(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module WebEvent.
  Inductive t : Set :=
  | PageLoad
  | PageUnload
  | KeyPress (_ : char)
  | Paste (_ : String)
  | Click (_ : i64) (_ : i64).
End WebEvent.
Definition WebEvent := WebEvent.t.

Definition inspect (event : WebEvent) : unit :=
  match event with
  | WebEvent.PageLoad =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "page loaded, r" ++ String "233" ("f" ++ String "233" "
") ]
        [  ]) ;;
    tt
  | WebEvent.PageUnload =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"] [ "page unloaded
" ] [  ]) ;;
    tt
  | WebEvent.KeyPress.Build_t c =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "pressed '"; "'.
" ]
        [ _crate.fmt.ArgumentV1::["new_display"] c ]) ;;
    tt
  | WebEvent.Paste.Build_t s =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "pasted ""; "".
" ]
        [ _crate.fmt.ArgumentV1::["new_display"] s ]) ;;
    tt
  | WebEvent.Click {| WebEvent.Click.x := x; WebEvent.Click.y := y; |} =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "clicked at x="; ", y="; ".
" ]
        [
          _crate.fmt.ArgumentV1::["new_display"] x;
          _crate.fmt.ArgumentV1::["new_display"] y
        ]) ;;
    tt ;;
    tt
  end.

Definition main (_ : unit) : unit :=
  let pressed := WebEvent.KeyPress x in
  let pasted := WebEvent.Paste "my text".["to_owned"] in
  let click := {| WebEvent.Click.x := 20; WebEvent.Click.y := 80; |} in
  let load := WebEvent.PageLoad in
  let unload := WebEvent.PageUnload in
  inspect pressed ;;
  inspect pasted ;;
  inspect click ;;
  inspect load ;;
  inspect unload ;;
  tt.
