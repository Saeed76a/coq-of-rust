(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module io := std.io.

Module Ordering := std.cmp.Ordering.
Definition Ordering := Ordering.t.

Module Rng := rand.Rng.

Definition main (_ : unit) : unit :=
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"] [ "Guess the number!
" ] [  ]) ;;
  tt ;;
  let secret_number := (rand.thread_rng tt).["gen_range"] (LangItem 1 100) in
  loop
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"] [ "Please input your guess.
" ] [  ]) ;;
    tt ;;
    let guess := String::["new"] tt in
    ((io.stdin tt).["read_line"] guess).["expect"] "Failed to read line" ;;
    let guess :=
      match guess.["trim"].["parse"] with
      | Ok.Build_t num => num
      | Err.Build_t _ => Continue
      end in
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "You guessed: "; "
" ]
        [ _crate.fmt.ArgumentV1::["new_display"] guess ]) ;;
    tt ;;
    match guess.["cmp"] secret_number with
    | Ordering.Less =>
      _crate.io._print
        (_crate.fmt.Arguments::["new_v1"] [ "Too small!
" ] [  ]) ;;
      tt
    | Ordering.Greater =>
      _crate.io._print
        (_crate.fmt.Arguments::["new_v1"] [ "Too big!
" ] [  ]) ;;
      tt
    | Ordering.Equal =>
      _crate.io._print
        (_crate.fmt.Arguments::["new_v1"] [ "You win!
" ] [  ]) ;;
      tt ;;
      Break ;;
      tt
    end
    from
    loop.
