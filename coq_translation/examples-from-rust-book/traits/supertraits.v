(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Person.
  Class Trait (Self : Set) : Set := {
    name : (ref Self) -> String;
  }.
  
  Global Instance Method_name `(Trait) : Notation.Dot "name" := {
    Notation.dot := name;
  }.
End Person.

Module Student.
  Class Trait (Self : Set) : Set := {
    university : (ref Self) -> String;
  }.
  
  Global Instance Method_university `(Trait) : Notation.Dot "university" := {
    Notation.dot := university;
  }.
End Student.

Module Programmer.
  Class Trait (Self : Set) : Set := {
    fav_language : (ref Self) -> String;
  }.
  
  Global Instance Method_fav_language `(Trait)
    : Notation.Dot "fav_language" := {
    Notation.dot := fav_language;
  }.
End Programmer.

Module CompSciStudent.
  Class Trait (Self : Set) : Set := {
    git_username : (ref Self) -> String;
  }.
  
  Global Instance Method_git_username `(Trait)
    : Notation.Dot "git_username" := {
    Notation.dot := git_username;
  }.
End CompSciStudent.

Definition comp_sci_student_greeting (student : ref TraitObject) : String :=
  let res :=
    _crate.fmt.format
      (_crate.fmt.Arguments::["new_v1"]
        [
          "My name is ";
          " and I attend ";
          ". My favorite language is ";
          ". My Git username is "
        ]
        [
          _crate.fmt.ArgumentV1::["new_display"] student.["name"];
          _crate.fmt.ArgumentV1::["new_display"] student.["university"];
          _crate.fmt.ArgumentV1::["new_display"] student.["fav_language"];
          _crate.fmt.ArgumentV1::["new_display"] student.["git_username"]
        ]) in
  res.

Definition main (_ : unit) : unit := tt.

Definition main (_ : unit) : unit := test.
