(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Command := std.process.Command.
Definition Command := Command.t.

Definition main (_ : unit) : unit :=
  let output :=
    ((Command::["new"] "rustc").["arg"]
          "--version").["output"].["unwrap_or_else"]
      (fun e =>
        _crate.rt.panic_fmt
          (_crate.fmt.Arguments::["new_v1"]
            [ "failed to execute process: " ]
            [ _crate.fmt.ArgumentV1::["new_display"] e ])) in
  if (output.["status"].["success"] : bool) then
    let s := String::["from_utf8_lossy"] output.["stdout"] in
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "rustc succeeded and stdout was:\n" ]
        [ _crate.fmt.ArgumentV1::["new_display"] s ]) ;;
    tt ;;
    tt
  else
    let s := String::["from_utf8_lossy"] output.["stderr"] in
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "rustc failed and stderr was:\n" ]
        [ _crate.fmt.ArgumentV1::["new_display"] s ]) ;;
    tt ;;
    tt.
