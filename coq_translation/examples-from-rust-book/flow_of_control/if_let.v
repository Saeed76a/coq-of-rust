(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition main (_ : unit) : unit :=
  let number := Some 7 in
  let letter := None in
  let emoticon := None in
  if (let_if Some.Build_t i := number : bool) then
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "Matched "; "!
" ]
        [ _crate.fmt.ArgumentV1::["new_debug"] i ]) ;;
    tt ;;
    tt
  else
    tt ;;
  if (let_if Some.Build_t i := letter : bool) then
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "Matched "; "!
" ]
        [ _crate.fmt.ArgumentV1::["new_debug"] i ]) ;;
    tt ;;
    tt
  else
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "Didn't match a number. Let's go with a letter!
" ]
        [  ]) ;;
    tt ;;
    tt ;;
  let i_like_letters := false in
  if (let_if Some.Build_t i := emoticon : bool) then
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "Matched "; "!
" ]
        [ _crate.fmt.ArgumentV1::["new_debug"] i ]) ;;
    tt ;;
    tt
  else
    if (i_like_letters : bool) then
      _crate.io._print
        (_crate.fmt.Arguments::["new_v1"]
          [ "Didn't match a number. Let's go with a letter!
" ]
          [  ]) ;;
      tt ;;
      tt
    else
      _crate.io._print
        (_crate.fmt.Arguments::["new_v1"]
          [ "I don't like letters. Let's go with an emoticon :)!
" ]
          [  ]) ;;
      tt ;;
      tt.
