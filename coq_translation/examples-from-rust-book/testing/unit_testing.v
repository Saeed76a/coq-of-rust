(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition add (a : i32) (b : i32) : i32 := a.["add"] b.

Definition bad_add (a : i32) (b : i32) : i32 := a.["sub"] b.

Module tests.
  Import super.
  
  Definition test_add : test.TestDescAndFn :=
    {|
      test.TestDescAndFn.desc :=
        {|
          test.TestDesc.name := test.StaticTestName "tests::test_add";
          test.TestDesc.ignore := false;
          test.TestDesc.ignore_message := _crate.option.Option.None;
          test.TestDesc.compile_fail := false;
          test.TestDesc.no_run := false;
          test.TestDesc.should_panic := test.ShouldPanic.No;
          test.TestDesc.test_type := test.TestType.Unknown;
        |};
      test.TestDescAndFn.testfn :=
        test.StaticTestFn (fun  => test.assert_test_result (test_add tt));
    |}.
  
  Definition test_add (_ : unit) : unit :=
    match (add 1 2, 3) with
    | (left_val, right_val) =>
      if (not ((deref left_val).["eq"] (deref right_val)) : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        _crate.panicking.assert_failed
          kind
          (deref left_val)
          (deref right_val)
          _crate.option.Option.None ;;
        tt
      else
        tt
    end ;;
    tt.
  
  Definition test_bad_add : test.TestDescAndFn :=
    {|
      test.TestDescAndFn.desc :=
        {|
          test.TestDesc.name := test.StaticTestName "tests::test_bad_add";
          test.TestDesc.ignore := false;
          test.TestDesc.ignore_message := _crate.option.Option.None;
          test.TestDesc.compile_fail := false;
          test.TestDesc.no_run := false;
          test.TestDesc.should_panic := test.ShouldPanic.No;
          test.TestDesc.test_type := test.TestType.Unknown;
        |};
      test.TestDescAndFn.testfn :=
        test.StaticTestFn (fun  => test.assert_test_result (test_bad_add tt));
    |}.
  
  Definition test_bad_add (_ : unit) : unit :=
    match (bad_add 1 2, 3) with
    | (left_val, right_val) =>
      if (not ((deref left_val).["eq"] (deref right_val)) : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        _crate.panicking.assert_failed
          kind
          (deref left_val)
          (deref right_val)
          _crate.option.Option.None ;;
        tt
      else
        tt
    end ;;
    tt.
End tests.

Import super.

Definition test_add : test.TestDescAndFn :=
  {|
    test.TestDescAndFn.desc :=
      {|
        test.TestDesc.name := test.StaticTestName "tests::test_add";
        test.TestDesc.ignore := false;
        test.TestDesc.ignore_message := _crate.option.Option.None;
        test.TestDesc.compile_fail := false;
        test.TestDesc.no_run := false;
        test.TestDesc.should_panic := test.ShouldPanic.No;
        test.TestDesc.test_type := test.TestType.Unknown;
      |};
    test.TestDescAndFn.testfn :=
      test.StaticTestFn (fun  => test.assert_test_result (test_add tt));
  |}.

Definition test_add (_ : unit) : unit :=
  match (add 1 2, 3) with
  | (left_val, right_val) =>
    if (not ((deref left_val).["eq"] (deref right_val)) : bool) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  tt.

Definition test_bad_add : test.TestDescAndFn :=
  {|
    test.TestDescAndFn.desc :=
      {|
        test.TestDesc.name := test.StaticTestName "tests::test_bad_add";
        test.TestDesc.ignore := false;
        test.TestDesc.ignore_message := _crate.option.Option.None;
        test.TestDesc.compile_fail := false;
        test.TestDesc.no_run := false;
        test.TestDesc.should_panic := test.ShouldPanic.No;
        test.TestDesc.test_type := test.TestType.Unknown;
      |};
    test.TestDescAndFn.testfn :=
      test.StaticTestFn (fun  => test.assert_test_result (test_bad_add tt));
  |}.

Definition test_bad_add (_ : unit) : unit :=
  match (bad_add 1 2, 3) with
  | (left_val, right_val) =>
    if (not ((deref left_val).["eq"] (deref right_val)) : bool) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  tt.

Definition main (_ : unit) : unit := test.
