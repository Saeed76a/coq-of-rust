(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Rc := std.rc.Rc.
Definition Rc := Rc.t.

Definition main (_ : unit) : unit :=
  let rc_examples := "Rc examples".["to_string"] in
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"] [ "--- rc_a is created ---\n" ] [  ]) ;;
  tt ;;
  let rc_a := Rc::["new"] rc_examples in
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "Reference Count of rc_a: "; "\n" ]
      [ _crate.fmt.ArgumentV1::["new_display"] (Rc::["strong_count"] rc_a) ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "--- rc_a is cloned to rc_b ---\n" ]
      [  ]) ;;
  tt ;;
  let rc_b := Rc::["clone"] rc_a in
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "Reference Count of rc_b: "; "\n" ]
      [ _crate.fmt.ArgumentV1::["new_display"] (Rc::["strong_count"] rc_b) ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "Reference Count of rc_a: "; "\n" ]
      [ _crate.fmt.ArgumentV1::["new_display"] (Rc::["strong_count"] rc_a) ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "rc_a and rc_b are equal: "; "\n" ]
      [ _crate.fmt.ArgumentV1::["new_display"] (rc_a.["eq"] rc_b) ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "Length of the value inside rc_a: "; "\n" ]
      [ _crate.fmt.ArgumentV1::["new_display"] rc_a.["len"] ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "Value of rc_b: "; "\n" ]
      [ _crate.fmt.ArgumentV1::["new_display"] rc_b ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "--- rc_b is dropped out of scope ---\n" ]
      [  ]) ;;
  tt ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "Reference Count of rc_a: "; "\n" ]
      [ _crate.fmt.ArgumentV1::["new_display"] (Rc::["strong_count"] rc_a) ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.Arguments::["new_v1"]
      [ "--- rc_a is dropped out of scope ---\n" ]
      [  ]) ;;
  tt ;;
  tt.

Definition main (_ : unit) : unit := test.
