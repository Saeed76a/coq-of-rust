(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module PhantomData := std.marker.PhantomData.
Definition PhantomData := PhantomData.t.

Module PhantomTuple.
  Record t : Set := { _ : A; _ : PhantomData;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_1 : Notation.Dot 1 := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End PhantomTuple.
Definition PhantomTuple := PhantomTuple.t.

Module Impl__crate_marker_StructuralPartialEq_for_PhantomTuple.
  Definition Self := PhantomTuple.
  
  Global Instance I A B : _crate.marker.StructuralPartialEq.Trait Self :=
    _crate.marker.StructuralPartialEq.Build_Class _.
End Impl__crate_marker_StructuralPartialEq_for_PhantomTuple.

Module Impl__crate_cmp_PartialEq_for_PhantomTuple.
  Definition Self := PhantomTuple.
  
  Definition eq (self : ref Self) (other : ref PhantomTuple) : bool :=
    ((IndexedField.get (index := 0) self).["eq"]
        (IndexedField.get (index := 0) other)).["andb"]
      ((IndexedField.get (index := 1) self).["eq"]
        (IndexedField.get (index := 1) other)).
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I A B : _crate.cmp.PartialEq.Trait Self := {
    _crate.cmp.PartialEq.eq := eq;
  }.
End Impl__crate_cmp_PartialEq_for_PhantomTuple.

Module PhantomStruct.
  Record t : Set := {
    first : A;
    phantom : PhantomData;
  }.
  
  Global Instance Get_first : Notation.Dot "first" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_phantom : Notation.Dot "phantom" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End PhantomStruct.
Definition PhantomStruct : Set := PhantomStruct.t.

Module Impl__crate_marker_StructuralPartialEq_for_PhantomStruct.
  Definition Self := PhantomStruct.
  
  Global Instance I A B : _crate.marker.StructuralPartialEq.Trait Self :=
    _crate.marker.StructuralPartialEq.Build_Class _.
End Impl__crate_marker_StructuralPartialEq_for_PhantomStruct.

Module Impl__crate_cmp_PartialEq_for_PhantomStruct.
  Definition Self := PhantomStruct.
  
  Definition eq (self : ref Self) (other : ref PhantomStruct) : bool :=
    (self.["first"].["eq"] other.["first"]).["andb"]
      (self.["phantom"].["eq"] other.["phantom"]).
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I A B : _crate.cmp.PartialEq.Trait Self := {
    _crate.cmp.PartialEq.eq := eq;
  }.
End Impl__crate_cmp_PartialEq_for_PhantomStruct.

Definition main (_ : unit) : unit :=
  let _tuple1 := PhantomTuple.Build Q PhantomData.Build in
  let _tuple2 := PhantomTuple.Build Q PhantomData.Build in
  let _struct1 :=
    {| PhantomStruct.first := Q; PhantomStruct.phantom := PhantomData.Build;
    |} in
  let _struct2 :=
    {| PhantomStruct.first := Q; PhantomStruct.phantom := PhantomData.Build;
    |} in
  tt.
