(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module ParseIntError := std.num.ParseIntError.
Definition ParseIntError := ParseIntError.t.

Definition AliasedResult : Set := Result T ParseIntError.

Definition multiply
    (first_number_str : ref str)
    (second_number_str : ref str)
    : AliasedResult i32 :=
  first_number_str.["parse"].["and_then"]
    (fun first_number =>
      second_number_str.["parse"].["map"]
        (fun second_number => first_number.["mul"] second_number)).

Definition print (result : AliasedResult i32) : unit :=
  match result with
  | 'Ok.Build_t n =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "n is "; "\n" ]
        [ _crate.fmt.ArgumentV1::["new_display"] n ]) ;;
    tt
  | 'Err.Build_t e =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "Error: "; "\n" ]
        [ _crate.fmt.ArgumentV1::["new_display"] e ]) ;;
    tt
  end.

Definition main (_ : unit) : unit :=
  print (multiply "10" "2") ;;
  print (multiply "t" "2") ;;
  tt.
