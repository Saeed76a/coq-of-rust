(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module ParseIntError := std.num.ParseIntError.
Definition ParseIntError := ParseIntError.t.

Definition multiply
    (first_number_str : ref str)
    (second_number_str : ref str)
    : Result i32 ParseIntError :=
  let first_number :=
    match first_number_str.["parse"] with
    | Ok (first_number) => first_number
    | Err (e) => Return (Err e)
    end in
  let second_number :=
    match second_number_str.["parse"] with
    | Ok (second_number) => second_number
    | Err (e) => Return (Err e)
    end in
  Ok (first_number.["mul"] second_number).

Definition print (result : Result i32 ParseIntError) : unit :=
  match result with
  | Ok (n) =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "n is "; "\n" ]
        [ _crate.fmt.ArgumentV1::["new_display"] n ]) ;;
    tt
  | Err (e) =>
    _crate.io._print
      (_crate.fmt.Arguments::["new_v1"]
        [ "Error: "; "\n" ]
        [ _crate.fmt.ArgumentV1::["new_display"] e ]) ;;
    tt
  end.

Definition main (_ : unit) : unit :=
  print (multiply "10" "2") ;;
  print (multiply "t" "2") ;;
  tt.
