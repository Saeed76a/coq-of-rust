(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Food.
  Inductive t : Set :=
  | Apple
  | Carrot
  | Potato.
End Food.
Definition Food : Set := Food.t.

Module Impl_core_fmt_Debug_for_combinators_map_Food.
  Definition Self `{State.Trait} := combinators_map.Food.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_combinators_map_Food.

Module Peeled.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : combinators_map.Food;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End Peeled.
Definition Peeled `{State.Trait} : Set := M.val Peeled.t.

Module Impl_core_fmt_Debug_for_combinators_map_Peeled.
  Definition Self `{State.Trait} := combinators_map.Peeled.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_combinators_map_Peeled.

Module Chopped.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : combinators_map.Food;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End Chopped.
Definition Chopped `{State.Trait} : Set := M.val Chopped.t.

Module Impl_core_fmt_Debug_for_combinators_map_Chopped.
  Definition Self `{State.Trait} := combinators_map.Chopped.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_combinators_map_Chopped.

Module Cooked.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : combinators_map.Food;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End Cooked.
Definition Cooked `{State.Trait} : Set := M.val Cooked.t.

Module Impl_core_fmt_Debug_for_combinators_map_Cooked.
  Definition Self `{State.Trait} := combinators_map.Cooked.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_combinators_map_Cooked.

Parameter peel :
    forall `{State.Trait},
    (core.option.Option combinators_map.Food) ->
      M (core.option.Option combinators_map.Peeled).

Parameter chop :
    forall `{State.Trait},
    (core.option.Option combinators_map.Peeled) ->
      M (core.option.Option combinators_map.Chopped).

Parameter cook :
    forall `{State.Trait},
    (core.option.Option combinators_map.Chopped) ->
      M (core.option.Option combinators_map.Cooked).

Parameter process :
    forall `{State.Trait},
    (core.option.Option combinators_map.Food) ->
      M (core.option.Option combinators_map.Cooked).

Parameter eat :
    forall `{State.Trait},
    (core.option.Option combinators_map.Cooked) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
