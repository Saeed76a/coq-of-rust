(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Food.
  Inductive t `{State.Trait} : Set :=
  | Apple
  | Carrot
  | Potato.
End Food.
Definition Food `{State.Trait} : Set := Food.t.

Module Impl_core_fmt_Debug_for_combinators_map_Food.
  Section Impl_core_fmt_Debug_for_combinators_map_Food.
    Context `{State.Trait}.
    
    Definition Self : Set := combinators_map.Food.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_combinators_map_Food.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_combinators_map_Food.

Module Peeled.
  Section Peeled.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : combinators_map.Food;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End Peeled.
End Peeled.
Definition Peeled `{State.Trait} : Set := M.val Peeled.t.

Module Impl_core_fmt_Debug_for_combinators_map_Peeled.
  Section Impl_core_fmt_Debug_for_combinators_map_Peeled.
    Context `{State.Trait}.
    
    Definition Self : Set := combinators_map.Peeled.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_combinators_map_Peeled.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_combinators_map_Peeled.

Module Chopped.
  Section Chopped.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : combinators_map.Food;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End Chopped.
End Chopped.
Definition Chopped `{State.Trait} : Set := M.val Chopped.t.

Module Impl_core_fmt_Debug_for_combinators_map_Chopped.
  Section Impl_core_fmt_Debug_for_combinators_map_Chopped.
    Context `{State.Trait}.
    
    Definition Self : Set := combinators_map.Chopped.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_combinators_map_Chopped.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_combinators_map_Chopped.

Module Cooked.
  Section Cooked.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : combinators_map.Food;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End Cooked.
End Cooked.
Definition Cooked `{State.Trait} : Set := M.val Cooked.t.

Module Impl_core_fmt_Debug_for_combinators_map_Cooked.
  Section Impl_core_fmt_Debug_for_combinators_map_Cooked.
    Context `{State.Trait}.
    
    Definition Self : Set := combinators_map.Cooked.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_combinators_map_Cooked.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_combinators_map_Cooked.

Parameter peel :
    forall `{State.Trait},
    (core.option.Option combinators_map.Food) ->
      M (core.option.Option combinators_map.Peeled).

Parameter chop :
    forall `{State.Trait},
    (core.option.Option combinators_map.Peeled) ->
      M (core.option.Option combinators_map.Chopped).

Parameter cook :
    forall `{State.Trait},
    (core.option.Option combinators_map.Chopped) ->
      M (core.option.Option combinators_map.Cooked).

Parameter process :
    forall `{State.Trait},
    (core.option.Option combinators_map.Food) ->
      M (core.option.Option combinators_map.Cooked).

Parameter eat :
    forall `{State.Trait},
    (core.option.Option combinators_map.Cooked) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
