(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module DoubleError.
  Section DoubleError.
    Context `{State.Trait}.
    
    Inductive t : Set := Build.
  End DoubleError.
End DoubleError.
Definition DoubleError := @DoubleError.t.

Module Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError.
  Section Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError.
    Context `{State.Trait}.
    
    Definition Self : Set := defining_an_error_type.DoubleError.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError.

Module Impl_core_clone_Clone_for_defining_an_error_type_DoubleError.
  Section Impl_core_clone_Clone_for_defining_an_error_type_DoubleError.
    Context `{State.Trait}.
    
    Definition Self : Set := defining_an_error_type.DoubleError.
    
    Parameter clone : (ref Self) -> M defining_an_error_type.DoubleError.
    
    Global Instance AssociatedFunction_clone :
      Notation.DoubleColon Self "clone" := {
      Notation.double_colon := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
  End Impl_core_clone_Clone_for_defining_an_error_type_DoubleError.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_defining_an_error_type_DoubleError.

Definition Result (T : Set) `{State.Trait} : Set :=
  core.result.Result T defining_an_error_type.DoubleError.

Module Impl_core_fmt_Display_for_defining_an_error_type_DoubleError.
  Section Impl_core_fmt_Display_for_defining_an_error_type_DoubleError.
    Context `{State.Trait}.
    
    Definition Self : Set := defining_an_error_type.DoubleError.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance I : core.fmt.Display.Trait Self := {
      core.fmt.Display.fmt := fmt;
    }.
  End Impl_core_fmt_Display_for_defining_an_error_type_DoubleError.
  Global Hint Resolve I : core.
End Impl_core_fmt_Display_for_defining_an_error_type_DoubleError.

Parameter double_first :
    forall `{State.Trait},
    (alloc.vec.Vec (ref str) alloc.vec.Vec.Default.A) ->
      M (defining_an_error_type.Result i32).

Parameter print :
    forall `{State.Trait},
    (defining_an_error_type.Result i32) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
