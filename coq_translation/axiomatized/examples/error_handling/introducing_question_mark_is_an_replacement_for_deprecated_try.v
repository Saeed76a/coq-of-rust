(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {
    let first_number = try!(first_number_str.parse::<i32>());
    let second_number = try!(second_number_str.parse::<i32>());

    Ok(first_number * second_number)
}
*)
Parameter multiply :
    (M.Val (ref str.t)) ->
      (M.Val (ref str.t)) ->
      M (M.Val (core.result.Result.t i32.t core.num.error.ParseIntError.t)).

(*
fn print(result: Result<i32, ParseIntError>) {
    match result {
        Ok(n) => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Parameter print :
    (M.Val (core.result.Result.t i32.t core.num.error.ParseIntError.t)) ->
      M (M.Val unit).

(*
fn main() {
    print(multiply("10", "2"));
    print(multiply("t", "2"));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M (M.Val unit).
