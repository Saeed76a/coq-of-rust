(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition Result (T : Set) `{State.Trait} : Set :=
  core.result.Result T wrapping_errors.DoubleError.

Module DoubleError.
  Inductive t `{State.Trait} : Set :=
  | EmptyVec
  | Parse (_ : core.num.error.ParseIntError).
End DoubleError.
Definition DoubleError `{State.Trait} : Set := DoubleError.t.

Module Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
  Definition Self `{State.Trait} := wrapping_errors.DoubleError.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.

Module Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
  Definition Self `{State.Trait} := wrapping_errors.DoubleError.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError.

Module Impl_core_error_Error_for_wrapping_errors_DoubleError.
  Definition Self `{State.Trait} := wrapping_errors.DoubleError.
  
  Parameter source :
      forall `{State.Trait},
      (ref Self) -> M (core.option.Option (ref _ (* dyn *))).
  
  Global Instance Method_source `{State.Trait} : Notation.Dot "source" := {
    Notation.dot := source;
  }.
  
  Global Instance I `{State.Trait} : core.error.Error.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_error_Error_for_wrapping_errors_DoubleError.

Module Impl_core_convert_From_for_wrapping_errors_DoubleError.
  Definition Self `{State.Trait} := wrapping_errors.DoubleError.
  
  Parameter from :
      forall `{State.Trait},
      core.num.error.ParseIntError -> M wrapping_errors.DoubleError.
  
  Global Instance AssociatedFunction_from `{State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.From.Trait Self (T := core.num.error.ParseIntError) := {
    core.convert.From.from := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_wrapping_errors_DoubleError.

Parameter double_first :
    forall `{State.Trait},
    (alloc.vec.Vec (ref str) alloc.vec.Vec.Default.A) ->
      M (wrapping_errors.Result i32).

Parameter print : forall `{State.Trait}, (wrapping_errors.Result i32) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
