(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.

Module Person.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    name : alloc.string.String;
    age : alloc.boxed.Box u8 alloc.boxed.Box.Default.A;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_name `{State.Trait} : Notation.Dot "name" := {
    Notation.dot x := let* x := M.read x in Pure x.(name) : M _;
  }.
  Global Instance Get_AF_name `{State.Trait}
    : Notation.DoubleColon t "name" := {
    Notation.double_colon x := let* x := M.read x in Pure x.(name) : M _;
  }.
  Global Instance Get_age `{State.Trait} : Notation.Dot "age" := {
    Notation.dot x := let* x := M.read x in Pure x.(age) : M _;
  }.
  Global Instance Get_AF_age `{State.Trait} : Notation.DoubleColon t "age" := {
    Notation.double_colon x := let* x := M.read x in Pure x.(age) : M _;
  }.
End Person.
Definition Person `{State.Trait} : Set := M.val (Person.t).

Module
  Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person.
  Definition Self `{State.Trait} :=
    scoping_rules_ownership_and_rules_partial_moves.main.Person.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person.
