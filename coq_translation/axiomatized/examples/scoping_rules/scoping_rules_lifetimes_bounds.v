(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Ref.
  Section Ref.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      x0 : ref T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End Ref.
End Ref.
Definition Ref `{State.Trait} : Set := M.val Ref.t.

Module Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.
  Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.
    Context {T : Set}.
    Context `{core.fmt.Debug.Trait T}.
    Definition Self `{State.Trait} := scoping_rules_lifetimes_bounds.Ref T.
    
    Parameter fmt :
        forall `{State.Trait},
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.

Parameter print :
    forall `{State.Trait} {T : Set} `{core.fmt.Debug.Trait T},
    T -> M unit.

Parameter print_ref :
    forall `{State.Trait} {T : Set} `{core.fmt.Debug.Trait T},
    (ref T) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
