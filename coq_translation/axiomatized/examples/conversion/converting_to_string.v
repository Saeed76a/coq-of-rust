(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Circle.
  Section Circle.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      radius : i32;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_radius : Notation.Dot "radius" := {
      Notation.dot x := let* x := M.read x in Pure x.(radius) : M _;
    }.
    Global Instance Get_AF_radius : Notation.DoubleColon t "radius" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(radius) : M _;
    }.
  End Circle.
End Circle.
Definition Circle `{State.Trait} : Set := M.val Circle.t.

Module Impl_core_fmt_Display_for_converting_to_string_Circle.
  Section Impl_core_fmt_Display_for_converting_to_string_Circle.
    Context `{State.Trait}.
    
    Definition Self : Set := converting_to_string.Circle.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance I : core.fmt.Display.Trait Self := {
      core.fmt.Display.fmt := fmt;
    }.
  End Impl_core_fmt_Display_for_converting_to_string_Circle.
  Global Hint Resolve I : core.
End Impl_core_fmt_Display_for_converting_to_string_Circle.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
