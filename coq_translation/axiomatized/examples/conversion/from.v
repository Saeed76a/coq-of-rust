(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Number.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    value : i32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_value `{State.Trait} : Notation.Dot "value" := {
    Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
  }.
  Global Instance Get_AF_value `{State.Trait}
    : Notation.DoubleColon t "value" := {
    Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
  }.
End Number.
Definition Number `{State.Trait} : Set := M.val (Number.t).

Module Impl_core_convert_From_for_from_Number.
  Definition Self `{State.Trait} := from.Number.
  
  Parameter from : forall `{State.Trait}, i32 -> M Self.
  
  Global Instance AssociatedFunction_from `{State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.From.Trait Self (T := i32) := {
    core.convert.From.from := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_from_Number.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
