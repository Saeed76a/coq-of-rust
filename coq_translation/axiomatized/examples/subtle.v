(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Choice.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End Choice.
Definition Choice `{State.Trait} : Set := M.val Choice.t.

Module Impl_core_marker_Copy_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_subtle_Choice.

Module Impl_core_clone_Clone_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Parameter clone : forall `{State.Trait}, (ref Self) -> M subtle.Choice.
  
  Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_subtle_Choice.

Module Impl_core_fmt_Debug_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_subtle_Choice.

Module Impl_subtle_Choice_4.
  Definition Self `{State.Trait} : Set := subtle.Choice.
  
  Parameter unwrap_u8 : forall `{State.Trait}, (ref Self) -> M u8.
  
  Global Instance Method_unwrap_u8 `{State.Trait} :
    Notation.Dot "unwrap_u8" := {
    Notation.dot := unwrap_u8;
  }.
End Impl_subtle_Choice_4.

Module Impl_core_convert_From_for_bool.
  Definition Self `{State.Trait} := bool.
  
  Parameter from : forall `{State.Trait}, subtle.Choice -> M bool.
  
  Global Instance AssociatedFunction_from `{State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.From.Trait Self (T := subtle.Choice) := {
    core.convert.From.from := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_bool.

Module Impl_core_ops_bit_BitAnd_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Definition Output : Set := subtle.Choice.
  
  Parameter bitand :
      forall `{State.Trait},
      Self -> subtle.Choice -> M subtle.Choice.
  
  Global Instance Method_bitand `{State.Trait} : Notation.Dot "bitand" := {
    Notation.dot := bitand;
  }.
  
  Global Instance I `{State.Trait}
    : core.ops.bit.BitAnd.Trait Self
        (Rhs := core.ops.bit.BitAnd.Default.Rhs Self)
      := {
    core.ops.bit.BitAnd.Output := Output;
    core.ops.bit.BitAnd.bitand := bitand;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.

Module Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Parameter bitand_assign :
      forall `{State.Trait},
      (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_bitand_assign `{State.Trait} :
    Notation.Dot "bitand_assign" := {
    Notation.dot := bitand_assign;
  }.
  
  Global Instance I `{State.Trait}
    : core.ops.bit.BitAndAssign.Trait Self
        (Rhs := core.ops.bit.BitAndAssign.Default.Rhs Self)
      := {
    core.ops.bit.BitAndAssign.bitand_assign := bitand_assign;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitOr_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Definition Output : Set := subtle.Choice.
  
  Parameter bitor :
      forall `{State.Trait},
      Self -> subtle.Choice -> M subtle.Choice.
  
  Global Instance Method_bitor `{State.Trait} : Notation.Dot "bitor" := {
    Notation.dot := bitor;
  }.
  
  Global Instance I `{State.Trait}
    : core.ops.bit.BitOr.Trait Self (Rhs := core.ops.bit.BitOr.Default.Rhs Self)
      := {
    core.ops.bit.BitOr.Output := Output;
    core.ops.bit.BitOr.bitor := bitor;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_bit_BitOr_for_subtle_Choice.

Module Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Parameter bitor_assign :
      forall `{State.Trait},
      (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_bitor_assign `{State.Trait} :
    Notation.Dot "bitor_assign" := {
    Notation.dot := bitor_assign;
  }.
  
  Global Instance I `{State.Trait}
    : core.ops.bit.BitOrAssign.Trait Self
        (Rhs := core.ops.bit.BitOrAssign.Default.Rhs Self)
      := {
    core.ops.bit.BitOrAssign.bitor_assign := bitor_assign;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitXor_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Definition Output : Set := subtle.Choice.
  
  Parameter bitxor :
      forall `{State.Trait},
      Self -> subtle.Choice -> M subtle.Choice.
  
  Global Instance Method_bitxor `{State.Trait} : Notation.Dot "bitxor" := {
    Notation.dot := bitxor;
  }.
  
  Global Instance I `{State.Trait}
    : core.ops.bit.BitXor.Trait Self
        (Rhs := core.ops.bit.BitXor.Default.Rhs Self)
      := {
    core.ops.bit.BitXor.Output := Output;
    core.ops.bit.BitXor.bitxor := bitxor;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_bit_BitXor_for_subtle_Choice.

Module Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Parameter bitxor_assign :
      forall `{State.Trait},
      (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_bitxor_assign `{State.Trait} :
    Notation.Dot "bitxor_assign" := {
    Notation.dot := bitxor_assign;
  }.
  
  Global Instance I `{State.Trait}
    : core.ops.bit.BitXorAssign.Trait Self
        (Rhs := core.ops.bit.BitXorAssign.Default.Rhs Self)
      := {
    core.ops.bit.BitXorAssign.bitxor_assign := bitxor_assign;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.

Module Impl_core_ops_bit_Not_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Definition Output : Set := subtle.Choice.
  
  Parameter not : forall `{State.Trait}, Self -> M subtle.Choice.
  
  Global Instance Method_not `{State.Trait} : Notation.Dot "not" := {
    Notation.dot := not;
  }.
  
  Global Instance I `{State.Trait} : core.ops.bit.Not.Trait Self := {
    core.ops.bit.Not.Output := Output;
    core.ops.bit.Not.not := not;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_bit_Not_for_subtle_Choice.

Parameter black_box : forall `{State.Trait}, u8 -> M u8.

Module Impl_core_convert_From_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Parameter from : forall `{State.Trait}, u8 -> M subtle.Choice.
  
  Global Instance AssociatedFunction_from `{State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I `{State.Trait} : core.convert.From.Trait Self (T := u8) := {
    core.convert.From.from := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_subtle_Choice.

Module ConstantTimeEq.
  Class Trait (Self : Set) `{State.Trait} : Type := {
    ct_eq : (ref Self) -> (ref Self) -> M subtle.Choice;
  }.
  
  Global Instance Method_ct_eq `{State.Trait} `(Trait)
    : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  Global Instance Method_ct_ne `{State.Trait} `(Trait)
    : Notation.Dot "ct_ne" := {
    Notation.dot (self : ref Self) (other : ref Self)
      :=
      (axiom : M subtle.Choice);
  }.
End ConstantTimeEq.

Module Impl_subtle_ConstantTimeEq_for_Slice_T.
  Section Impl_subtle_ConstantTimeEq_for_Slice_T.
    Context {T : Set}.
    Context `{subtle.ConstantTimeEq.Trait T}.
    Definition Self `{State.Trait} := Slice T.
    
    Parameter ct_eq :
        forall `{State.Trait},
        (ref Self) -> (ref (Slice T)) -> M subtle.Choice.
    
    Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
      Notation.dot := ct_eq;
    }.
    
    Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
  End Impl_subtle_ConstantTimeEq_for_Slice_T.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_Slice_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref subtle.Choice) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.

Module Impl_subtle_ConstantTimeEq_for_u8.
  Definition Self `{State.Trait} := u8.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref u8) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_u8.

Module Impl_subtle_ConstantTimeEq_for_i8.
  Definition Self `{State.Trait} := i8.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref i8) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_i8.

Module Impl_subtle_ConstantTimeEq_for_u16.
  Definition Self `{State.Trait} := u16.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref u16) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_u16.

Module Impl_subtle_ConstantTimeEq_for_i16.
  Definition Self `{State.Trait} := i16.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref i16) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_i16.

Module Impl_subtle_ConstantTimeEq_for_u32.
  Definition Self `{State.Trait} := u32.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref u32) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_u32.

Module Impl_subtle_ConstantTimeEq_for_i32.
  Definition Self `{State.Trait} := i32.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref i32) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_i32.

Module Impl_subtle_ConstantTimeEq_for_u64.
  Definition Self `{State.Trait} := u64.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref u64) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_u64.

Module Impl_subtle_ConstantTimeEq_for_i64.
  Definition Self `{State.Trait} := i64.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref i64) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_i64.

Module Impl_subtle_ConstantTimeEq_for_usize.
  Definition Self `{State.Trait} := usize.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref usize) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_usize.

Module Impl_subtle_ConstantTimeEq_for_isize.
  Definition Self `{State.Trait} := isize.
  
  Parameter ct_eq :
      forall `{State.Trait},
      (ref Self) -> (ref isize) -> M subtle.Choice.
  
  Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
    Notation.dot := ct_eq;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_isize.

Module ConditionallySelectable.
  Class Trait (Self : Set) `{core.marker.Copy.Trait Self} `{State.Trait} :
      Type := {
    conditional_select : (ref Self) -> (ref Self) -> subtle.Choice -> M Self;
  }.
  
  Global Instance Method_conditional_select `{State.Trait} `(Trait)
    : Notation.Dot "conditional_select" := {
    Notation.dot := conditional_select;
  }.
  Global Instance Method_conditional_assign `{State.Trait} `(Trait)
    : Notation.Dot "conditional_assign" := {
    Notation.dot
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      :=
      (axiom : M unit);
  }.
  Global Instance Method_conditional_swap `{State.Trait} `(Trait)
    : Notation.Dot "conditional_swap" := {
    Notation.dot (a : mut_ref Self) (b : mut_ref Self) (choice : subtle.Choice)
      :=
      (axiom : M unit);
  }.
End ConditionallySelectable.

Module Impl_subtle_ConditionallySelectable_for_u8.
  Definition Self `{State.Trait} := u8.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      forall `{State.Trait},
      (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_conditional_assign `{State.Trait} :
    Notation.Dot "conditional_assign" := {
    Notation.dot := conditional_assign;
  }.
  
  Parameter conditional_swap :
      forall `{State.Trait},
      (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance AssociatedFunction_conditional_swap `{State.Trait} :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_u8.

Module Impl_subtle_ConditionallySelectable_for_i8.
  Definition Self `{State.Trait} := i8.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      forall `{State.Trait},
      (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_conditional_assign `{State.Trait} :
    Notation.Dot "conditional_assign" := {
    Notation.dot := conditional_assign;
  }.
  
  Parameter conditional_swap :
      forall `{State.Trait},
      (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance AssociatedFunction_conditional_swap `{State.Trait} :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_i8.

Module Impl_subtle_ConditionallySelectable_for_u16.
  Definition Self `{State.Trait} := u16.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      forall `{State.Trait},
      (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_conditional_assign `{State.Trait} :
    Notation.Dot "conditional_assign" := {
    Notation.dot := conditional_assign;
  }.
  
  Parameter conditional_swap :
      forall `{State.Trait},
      (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance AssociatedFunction_conditional_swap `{State.Trait} :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_u16.

Module Impl_subtle_ConditionallySelectable_for_i16.
  Definition Self `{State.Trait} := i16.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      forall `{State.Trait},
      (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_conditional_assign `{State.Trait} :
    Notation.Dot "conditional_assign" := {
    Notation.dot := conditional_assign;
  }.
  
  Parameter conditional_swap :
      forall `{State.Trait},
      (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance AssociatedFunction_conditional_swap `{State.Trait} :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_i16.

Module Impl_subtle_ConditionallySelectable_for_u32.
  Definition Self `{State.Trait} := u32.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      forall `{State.Trait},
      (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_conditional_assign `{State.Trait} :
    Notation.Dot "conditional_assign" := {
    Notation.dot := conditional_assign;
  }.
  
  Parameter conditional_swap :
      forall `{State.Trait},
      (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance AssociatedFunction_conditional_swap `{State.Trait} :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_u32.

Module Impl_subtle_ConditionallySelectable_for_i32.
  Definition Self `{State.Trait} := i32.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      forall `{State.Trait},
      (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_conditional_assign `{State.Trait} :
    Notation.Dot "conditional_assign" := {
    Notation.dot := conditional_assign;
  }.
  
  Parameter conditional_swap :
      forall `{State.Trait},
      (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance AssociatedFunction_conditional_swap `{State.Trait} :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_i32.

Module Impl_subtle_ConditionallySelectable_for_u64.
  Definition Self `{State.Trait} := u64.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      forall `{State.Trait},
      (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_conditional_assign `{State.Trait} :
    Notation.Dot "conditional_assign" := {
    Notation.dot := conditional_assign;
  }.
  
  Parameter conditional_swap :
      forall `{State.Trait},
      (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance AssociatedFunction_conditional_swap `{State.Trait} :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_u64.

Module Impl_subtle_ConditionallySelectable_for_i64.
  Definition Self `{State.Trait} := i64.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      forall `{State.Trait},
      (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
  
  Global Instance Method_conditional_assign `{State.Trait} :
    Notation.Dot "conditional_assign" := {
    Notation.dot := conditional_assign;
  }.
  
  Parameter conditional_swap :
      forall `{State.Trait},
      (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
  
  Global Instance AssociatedFunction_conditional_swap `{State.Trait} :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_i64.

Module Impl_subtle_ConditionallySelectable_for_subtle_Choice.
  Definition Self `{State.Trait} := subtle.Choice.
  
  Parameter conditional_select :
      forall `{State.Trait},
      (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
  
  Global Instance AssociatedFunction_conditional_select `{State.Trait} :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Global Instance I `{State.Trait}
    : subtle.ConditionallySelectable.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.

Module ConditionallyNegatable.
  Class Trait (Self : Set) `{State.Trait} : Type := {
    conditional_negate : (mut_ref Self) -> subtle.Choice -> M unit;
  }.
  
  Global Instance Method_conditional_negate `{State.Trait} `(Trait)
    : Notation.Dot "conditional_negate" := {
    Notation.dot := conditional_negate;
  }.
End ConditionallyNegatable.

Module Impl_subtle_ConditionallyNegatable_for_T.
  Section Impl_subtle_ConditionallyNegatable_for_T.
    Context {T : Set}.
    Context
      `{subtle.ConditionallySelectable.Trait T}
      `{core.ops.arith.Neg.Trait (ref T)}.
    Definition Self `{State.Trait} := T.
    
    Parameter conditional_negate :
        forall `{State.Trait},
        (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance Method_conditional_negate `{State.Trait} :
      Notation.Dot "conditional_negate" := {
      Notation.dot := conditional_negate;
    }.
    
    Global Instance I `{State.Trait}
      : subtle.ConditionallyNegatable.Trait Self := {
      subtle.ConditionallyNegatable.conditional_negate := conditional_negate;
    }.
  End Impl_subtle_ConditionallyNegatable_for_T.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallyNegatable_for_T.

Module CtOption.
  Section CtOption.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      value : T;
      is_some : subtle.Choice;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_value `{State.Trait} : Notation.Dot "value" := {
      Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Global Instance Get_AF_value `{State.Trait}
      : Notation.DoubleColon t "value" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Global Instance Get_is_some `{State.Trait} : Notation.Dot "is_some" := {
      Notation.dot x := let* x := M.read x in Pure x.(is_some) : M _;
    }.
    Global Instance Get_AF_is_some `{State.Trait}
      : Notation.DoubleColon t "is_some" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(is_some) : M _;
    }.
  End CtOption.
End CtOption.
Definition CtOption (T : Set) `{State.Trait} : Set :=
  M.val (CtOption.t (T := T)).

Module Impl_core_clone_Clone_for_subtle_CtOption_T.
  Section Impl_core_clone_Clone_for_subtle_CtOption_T.
    Context {T : Set}.
    Context `{core.clone.Clone.Trait T}.
    Definition Self `{State.Trait} := subtle.CtOption T.
    
    Parameter clone :
        forall `{State.Trait},
        (ref Self) -> M (subtle.CtOption T).
    
    Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
  End Impl_core_clone_Clone_for_subtle_CtOption_T.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_subtle_CtOption_T.

Module Impl_core_marker_Copy_for_subtle_CtOption_T.
  Section Impl_core_marker_Copy_for_subtle_CtOption_T.
    Context {T : Set}.
    Context `{core.marker.Copy.Trait T}.
    Definition Self `{State.Trait} := subtle.CtOption T.
    
    Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_subtle_CtOption_T.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_subtle_CtOption_T.

Module Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Section Impl_core_fmt_Debug_for_subtle_CtOption_T.
    Context {T : Set}.
    Context `{core.fmt.Debug.Trait T}.
    Definition Self `{State.Trait} := subtle.CtOption T.
    
    Parameter fmt :
        forall `{State.Trait},
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_subtle_CtOption_T.

Module Impl_core_convert_From_for_core_option_Option_T.
  Section Impl_core_convert_From_for_core_option_Option_T.
    Context {T : Set}.
    Definition Self `{State.Trait} := core.option.Option T.
    
    Parameter from :
        forall `{State.Trait},
        (subtle.CtOption T) -> M (core.option.Option T).
    
    Global Instance AssociatedFunction_from `{State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.From.Trait Self (T := subtle.CtOption T) := {
      core.convert.From.from := from;
    }.
  End Impl_core_convert_From_for_core_option_Option_T.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_core_option_Option_T.

Module Impl_subtle_CtOption_T_4.
  Definition Self `{State.Trait} : Set := subtle.CtOption T.
  
  Parameter new :
      forall `{State.Trait},
      T -> subtle.Choice -> M (subtle.CtOption T).
  
  Global Instance AssociatedFunction_new `{State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter expect : forall `{State.Trait}, Self -> (ref str) -> M T.
  
  Global Instance Method_expect `{State.Trait} : Notation.Dot "expect" := {
    Notation.dot := expect;
  }.
  
  Parameter unwrap : forall `{State.Trait}, Self -> M T.
  
  Global Instance Method_unwrap `{State.Trait} : Notation.Dot "unwrap" := {
    Notation.dot := unwrap;
  }.
  
  Parameter unwrap_or :
      forall `{State.Trait} `{subtle.ConditionallySelectable.Trait T},
      Self -> T -> M T.
  
  Global Instance Method_unwrap_or
      `{State.Trait}
      `{subtle.ConditionallySelectable.Trait T} :
    Notation.Dot "unwrap_or" := {
    Notation.dot := unwrap_or;
  }.
  
  Parameter unwrap_or_else :
      forall
        `{State.Trait}
        {F : Set}
        `{subtle.ConditionallySelectable.Trait T}
        `{core.ops.function.FnOnce.Trait F (Args := unit)},
      Self -> F -> M T.
  
  Global Instance Method_unwrap_or_else
      `{State.Trait}
      {F : Set}
      `{subtle.ConditionallySelectable.Trait T}
      `{core.ops.function.FnOnce.Trait F (Args := unit)} :
    Notation.Dot "unwrap_or_else" := {
    Notation.dot := unwrap_or_else (F := F);
  }.
  
  Parameter is_some : forall `{State.Trait}, (ref Self) -> M subtle.Choice.
  
  Global Instance Method_is_some `{State.Trait} : Notation.Dot "is_some" := {
    Notation.dot := is_some;
  }.
  
  Parameter is_none : forall `{State.Trait}, (ref Self) -> M subtle.Choice.
  
  Global Instance Method_is_none `{State.Trait} : Notation.Dot "is_none" := {
    Notation.dot := is_none;
  }.
  
  Parameter map :
      forall
        `{State.Trait}
        {U F : Set}
        `{core.default.Default.Trait T}
        `{subtle.ConditionallySelectable.Trait T}
        `{core.ops.function.FnOnce.Trait F (Args := T)},
      Self -> F -> M (subtle.CtOption U).
  
  Global Instance Method_map
      `{State.Trait}
      {U F : Set}
      `{core.default.Default.Trait T}
      `{subtle.ConditionallySelectable.Trait T}
      `{core.ops.function.FnOnce.Trait F (Args := T)} :
    Notation.Dot "map" := {
    Notation.dot := map (U := U) (F := F);
  }.
  
  Parameter and_then :
      forall
        `{State.Trait}
        {U F : Set}
        `{core.default.Default.Trait T}
        `{subtle.ConditionallySelectable.Trait T}
        `{core.ops.function.FnOnce.Trait F (Args := T)},
      Self -> F -> M (subtle.CtOption U).
  
  Global Instance Method_and_then
      `{State.Trait}
      {U F : Set}
      `{core.default.Default.Trait T}
      `{subtle.ConditionallySelectable.Trait T}
      `{core.ops.function.FnOnce.Trait F (Args := T)} :
    Notation.Dot "and_then" := {
    Notation.dot := and_then (U := U) (F := F);
  }.
  
  Parameter or_else :
      forall
        `{State.Trait}
        {F : Set}
        `{subtle.ConditionallySelectable.Trait T}
        `{core.ops.function.FnOnce.Trait F (Args := unit)},
      Self -> F -> M (subtle.CtOption T).
  
  Global Instance Method_or_else
      `{State.Trait}
      {F : Set}
      `{subtle.ConditionallySelectable.Trait T}
      `{core.ops.function.FnOnce.Trait F (Args := unit)} :
    Notation.Dot "or_else" := {
    Notation.dot := or_else (F := F);
  }.
End Impl_subtle_CtOption_T_4.

Module Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Section Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
    Context {T : Set}.
    Context `{subtle.ConditionallySelectable.Trait T}.
    Definition Self `{State.Trait} := subtle.CtOption T.
    
    Parameter conditional_select :
        forall `{State.Trait},
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select `{State.Trait} :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Global Instance I `{State.Trait}
      : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
  End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Global Hint Resolve I : core.
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Section Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
    Context {T : Set}.
    Context `{subtle.ConstantTimeEq.Trait T}.
    Definition Self `{State.Trait} := subtle.CtOption T.
    
    Parameter ct_eq :
        forall `{State.Trait},
        (ref Self) -> (ref (subtle.CtOption T)) -> M subtle.Choice.
    
    Global Instance Method_ct_eq `{State.Trait} : Notation.Dot "ct_eq" := {
      Notation.dot := ct_eq;
    }.
    
    Global Instance I `{State.Trait} : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
  End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.

Module ConstantTimeGreater.
  Class Trait (Self : Set) `{State.Trait} : Type := {
    ct_gt : (ref Self) -> (ref Self) -> M subtle.Choice;
  }.
  
  Global Instance Method_ct_gt `{State.Trait} `(Trait)
    : Notation.Dot "ct_gt" := {
    Notation.dot := ct_gt;
  }.
End ConstantTimeGreater.

Module Impl_subtle_ConstantTimeGreater_for_u8.
  Definition Self `{State.Trait} := u8.
  
  Parameter ct_gt :
      forall `{State.Trait},
      (ref Self) -> (ref u8) -> M subtle.Choice.
  
  Global Instance Method_ct_gt `{State.Trait} : Notation.Dot "ct_gt" := {
    Notation.dot := ct_gt;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeGreater.Trait Self := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeGreater_for_u8.

Module Impl_subtle_ConstantTimeGreater_for_u16.
  Definition Self `{State.Trait} := u16.
  
  Parameter ct_gt :
      forall `{State.Trait},
      (ref Self) -> (ref u16) -> M subtle.Choice.
  
  Global Instance Method_ct_gt `{State.Trait} : Notation.Dot "ct_gt" := {
    Notation.dot := ct_gt;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeGreater.Trait Self := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeGreater_for_u16.

Module Impl_subtle_ConstantTimeGreater_for_u32.
  Definition Self `{State.Trait} := u32.
  
  Parameter ct_gt :
      forall `{State.Trait},
      (ref Self) -> (ref u32) -> M subtle.Choice.
  
  Global Instance Method_ct_gt `{State.Trait} : Notation.Dot "ct_gt" := {
    Notation.dot := ct_gt;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeGreater.Trait Self := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeGreater_for_u32.

Module Impl_subtle_ConstantTimeGreater_for_u64.
  Definition Self `{State.Trait} := u64.
  
  Parameter ct_gt :
      forall `{State.Trait},
      (ref Self) -> (ref u64) -> M subtle.Choice.
  
  Global Instance Method_ct_gt `{State.Trait} : Notation.Dot "ct_gt" := {
    Notation.dot := ct_gt;
  }.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeGreater.Trait Self := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeGreater_for_u64.

Module ConstantTimeLess.
  Unset Primitive Projections.
  Class Trait
      (Self : Set)
      `{subtle.ConstantTimeEq.Trait Self}
      `{subtle.ConstantTimeGreater.Trait Self}
      `{State.Trait} :
      Type := {
  }.
  Global Set Primitive Projections.
  Global Instance Method_ct_lt `{State.Trait} `(Trait)
    : Notation.Dot "ct_lt" := {
    Notation.dot (self : ref Self) (other : ref Self)
      :=
      (axiom : M subtle.Choice);
  }.
End ConstantTimeLess.

Module Impl_subtle_ConstantTimeLess_for_u8.
  Definition Self `{State.Trait} := u8.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeLess.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeLess_for_u8.

Module Impl_subtle_ConstantTimeLess_for_u16.
  Definition Self `{State.Trait} := u16.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeLess.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeLess_for_u16.

Module Impl_subtle_ConstantTimeLess_for_u32.
  Definition Self `{State.Trait} := u32.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeLess.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeLess_for_u32.

Module Impl_subtle_ConstantTimeLess_for_u64.
  Definition Self `{State.Trait} := u64.
  
  Global Instance I `{State.Trait} : subtle.ConstantTimeLess.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_subtle_ConstantTimeLess_for_u64.
