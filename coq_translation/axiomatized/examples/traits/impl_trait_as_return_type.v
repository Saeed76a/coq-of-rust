(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn combine_vecs_explicit_return_type(
    v: Vec<i32>,
    u: Vec<i32>,
) -> iter::Cycle<iter::Chain<IntoIter<i32>, IntoIter<i32>>> {
    v.into_iter().chain(u.into_iter()).cycle()
}
*)
Parameter combine_vecs_explicit_return_type :
    (M.Val (alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A)) ->
      (M.Val (alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A)) ->
      M
        (M.Val
          (core.iter.adapters.cycle.Cycle.t
            (core.iter.adapters.chain.Chain.t
              (alloc.vec.into_iter.IntoIter.t
                i32.t
                alloc.vec.into_iter.IntoIter.Default.A)
              (alloc.vec.into_iter.IntoIter.t
                i32.t
                alloc.vec.into_iter.IntoIter.Default.A)))).

(*
fn combine_vecs(v: Vec<i32>, u: Vec<i32>) -> impl Iterator<Item = i32> {
    v.into_iter().chain(u.into_iter()).cycle()
}
*)
Parameter combine_vecs_ret_ty :
    Sigma (Ty : Set) `(core.iter.traits.iterator.Iterator.Trait Ty),
    unit.
Parameter combine_vecs :
    (M.Val (alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A)) ->
      (M.Val (alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A)) ->
      M (M.Val _ (* OpaqueTy *)).

Error OpaqueTy.

(*
fn main() {
    let v1 = vec![1, 2, 3];
    let v2 = vec![4, 5];
    let mut v3 = combine_vecs(v1, v2);
    assert_eq!(Some(1), v3.next());
    assert_eq!(Some(2), v3.next());
    assert_eq!(Some(3), v3.next());
    assert_eq!(Some(4), v3.next());
    assert_eq!(Some(5), v3.next());
    println!("all done");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M (M.Val unit).
