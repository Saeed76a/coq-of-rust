(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Sheep.
Section Sheep.
  Record t : Set := {
    naked : bool.t;
    name : ref str.t;
  }.
  
  Global Instance Get_naked : Notation.Dot "naked" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(naked) : M _;
  }.
  Global Instance Get_AF_naked : Notation.DoubleColon t "naked" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(naked) : M _;
  }.
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(name) : M _;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(name) : M _;
  }.
End Sheep.
End Sheep.

Module  Animal.
Section Animal.
  Class Trait (Self : Set) : Type := {
    new : (ref str.t) -> M ltac:(Self);
    name : (ref ltac:(Self)) -> M (ref str.t);
    noise : (ref ltac:(Self)) -> M (ref str.t);
  }.
  
End Animal.
End Animal.

Module  Impl_traits_Sheep_t.
Section Impl_traits_Sheep_t.
  Ltac Self := exact traits.Sheep.t.
  
  Parameter is_naked : (M.Val (ref ltac:(Self))) -> M (M.Val bool.t).
  
  Global Instance AssociatedFunction_is_naked :
    Notation.DoubleColon ltac:(Self) "is_naked" := {
    Notation.double_colon := is_naked;
  }.
End Impl_traits_Sheep_t.
End Impl_traits_Sheep_t.

Module  Impl_traits_Animal_for_traits_Sheep_t.
Section Impl_traits_Animal_for_traits_Sheep_t.
  Ltac Self := exact traits.Sheep.t.
  
  Parameter new : (M.Val (ref str.t)) -> M (M.Val traits.Sheep.t).
  
  Global Instance AssociatedFunction_new :
    Notation.DoubleColon ltac:(Self) "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter name : (M.Val (ref ltac:(Self))) -> M (M.Val (ref str.t)).
  
  Global Instance AssociatedFunction_name :
    Notation.DoubleColon ltac:(Self) "name" := {
    Notation.double_colon := name;
  }.
  
  Parameter noise : (M.Val (ref ltac:(Self))) -> M (M.Val (ref str.t)).
  
  Global Instance AssociatedFunction_noise :
    Notation.DoubleColon ltac:(Self) "noise" := {
    Notation.double_colon := noise;
  }.
  
  Parameter talk : (M.Val (ref ltac:(Self))) -> M (M.Val unit).
  
  Global Instance AssociatedFunction_talk :
    Notation.DoubleColon ltac:(Self) "talk" := {
    Notation.double_colon := talk;
  }.
  
  Global Instance ℐ : traits.Animal.Required.Trait ltac:(Self) := {
    traits.Animal.new := new;
    traits.Animal.name := name;
    traits.Animal.noise := noise;
    traits.Animal.talk := Datatypes.Some talk;
  }.
End Impl_traits_Animal_for_traits_Sheep_t.
End Impl_traits_Animal_for_traits_Sheep_t.

Module  Impl_traits_Sheep_t_2.
Section Impl_traits_Sheep_t_2.
  Ltac Self := exact traits.Sheep.t.
  
  Parameter shear : (M.Val (mut_ref ltac:(Self))) -> M (M.Val unit).
  
  Global Instance AssociatedFunction_shear :
    Notation.DoubleColon ltac:(Self) "shear" := {
    Notation.double_colon := shear;
  }.
End Impl_traits_Sheep_t_2.
End Impl_traits_Sheep_t_2.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M (M.Val unit).
