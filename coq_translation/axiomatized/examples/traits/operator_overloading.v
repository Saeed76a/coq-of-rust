(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Impl_core_fmt_Debug_for_operator_overloading_FooBar.
  Definition Self := operator_overloading.FooBar.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_operator_overloading_FooBar.

Module Impl_core_fmt_Debug_for_operator_overloading_BarFoo.
  Definition Self := operator_overloading.BarFoo.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo.

Module Impl_core_ops_arith_Add_for_operator_overloading_Foo.
  Definition Self := operator_overloading.Foo.
  
  Definition Output : Set := operator_overloading.FooBar.
  
  Parameter add :
      forall `{H' : State.Trait},
      Self ->
        operator_overloading.Bar ->
        M (H := H') operator_overloading.FooBar.
  
  Global Instance Method_add `{H' : State.Trait} : Notation.Dot "add" := {
    Notation.dot := add;
  }.
  
  Global Instance I
    : core.ops.arith.Add.Trait Self (Rhs := operator_overloading.Bar) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add `{H' : State.Trait} := add;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_arith_Add_for_operator_overloading_Foo.

Module Impl_core_ops_arith_Add_for_operator_overloading_Bar.
  Definition Self := operator_overloading.Bar.
  
  Definition Output : Set := operator_overloading.BarFoo.
  
  Parameter add :
      forall `{H' : State.Trait},
      Self ->
        operator_overloading.Foo ->
        M (H := H') operator_overloading.BarFoo.
  
  Global Instance Method_add `{H' : State.Trait} : Notation.Dot "add" := {
    Notation.dot := add;
  }.
  
  Global Instance I
    : core.ops.arith.Add.Trait Self (Rhs := operator_overloading.Foo) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add `{H' : State.Trait} := add;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_arith_Add_for_operator_overloading_Bar.
