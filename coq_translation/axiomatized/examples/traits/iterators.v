(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Fibonacci.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    curr : u32;
    next : u32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_curr `{State.Trait} : Notation.Dot "curr" := {
    Notation.dot x := let* x := M.read x in Pure x.(curr) : M _;
  }.
  Global Instance Get_AF_curr `{State.Trait}
    : Notation.DoubleColon t "curr" := {
    Notation.double_colon x := let* x := M.read x in Pure x.(curr) : M _;
  }.
  Global Instance Get_next `{State.Trait} : Notation.Dot "next" := {
    Notation.dot x := let* x := M.read x in Pure x.(next) : M _;
  }.
  Global Instance Get_AF_next `{State.Trait}
    : Notation.DoubleColon t "next" := {
    Notation.double_colon x := let* x := M.read x in Pure x.(next) : M _;
  }.
End Fibonacci.
Definition Fibonacci `{State.Trait} : Set := M.val (Fibonacci.t).

Module Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
  Definition Self `{State.Trait} := iterators.Fibonacci.
  
  Definition Item : Set := u32.
  
  Parameter next :
      forall `{State.Trait},
      (mut_ref Self) -> M (core.option.Option Item).
  
  Global Instance Method_next `{State.Trait} : Notation.Dot "next" := {
    Notation.dot := next;
  }.
  
  Global Instance I `{State.Trait}
    : core.iter.traits.iterator.Iterator.Trait Self := {
    core.iter.traits.iterator.Iterator.Item := Item;
    core.iter.traits.iterator.Iterator.next := next;
  }.
  Global Hint Resolve I : core.
End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.

Parameter fibonacci : forall `{State.Trait}, M iterators.Fibonacci.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
