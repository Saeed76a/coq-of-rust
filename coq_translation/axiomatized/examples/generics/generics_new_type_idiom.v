(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Years.
Section Years.
  Record t : Set := {
    x0 : i64.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Years.
End Years.

Module  Days.
Section Days.
  Record t : Set := {
    x0 : i64.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Days.
End Days.

Module  Impl_generics_new_type_idiom_Years_t.
Section Impl_generics_new_type_idiom_Years_t.
  Ltac Self := exact generics_new_type_idiom.Years.t.
  
  Parameter to_days :
      (M.Val (ref ltac:(Self))) -> M (M.Val generics_new_type_idiom.Days.t).
  
  Global Instance AssociatedFunction_to_days :
    Notation.DoubleColon ltac:(Self) "to_days" := {
    Notation.double_colon := to_days;
  }.
End Impl_generics_new_type_idiom_Years_t.
End Impl_generics_new_type_idiom_Years_t.

Module  Impl_generics_new_type_idiom_Days_t.
Section Impl_generics_new_type_idiom_Days_t.
  Ltac Self := exact generics_new_type_idiom.Days.t.
  
  Parameter to_years :
      (M.Val (ref ltac:(Self))) -> M (M.Val generics_new_type_idiom.Years.t).
  
  Global Instance AssociatedFunction_to_years :
    Notation.DoubleColon ltac:(Self) "to_years" := {
    Notation.double_colon := to_years;
  }.
End Impl_generics_new_type_idiom_Days_t.
End Impl_generics_new_type_idiom_Days_t.

Parameter old_enough :
    (M.Val (ref generics_new_type_idiom.Years.t)) -> M (M.Val bool.t).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M (M.Val unit).
