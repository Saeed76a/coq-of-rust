(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module PhantomTuple.
  Section PhantomTuple.
    Context {A B : Set}.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      x0 : A;
      x1 : core.marker.PhantomData B;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
    Global Instance Get_1 `{State.Trait} : Notation.Dot "1" := {
      Notation.dot x := let* x := M.read x in Pure x.(x1) : M _;
    }.
  End PhantomTuple.
End PhantomTuple.
Definition PhantomTuple `{State.Trait} : Set := M.val PhantomTuple.t.

Module
  Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Section
    Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.
    Context {A B : Set}.
    Definition Self `{State.Trait} := generics_phantom_type.PhantomTuple A B.
    
    Global Instance I `{State.Trait}
      : core.marker.StructuralPartialEq.Trait Self := {
    }.
  End
    Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.

Module Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Section Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.
    Context {A B : Set}.
    Context
      `{core.cmp.PartialEq.Trait A (Rhs := core.cmp.PartialEq.Default.Rhs A)}
      `{core.cmp.PartialEq.Trait B (Rhs := core.cmp.PartialEq.Default.Rhs B)}.
    Definition Self `{State.Trait} := generics_phantom_type.PhantomTuple A B.
    
    Parameter eq :
        forall `{State.Trait},
        (ref Self) -> (ref (generics_phantom_type.PhantomTuple A B)) -> M bool.
    
    Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I `{State.Trait}
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq := eq;
    }.
  End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.

Module PhantomStruct.
  Section PhantomStruct.
    Context {A B : Set}.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      first : A;
      phantom : core.marker.PhantomData B;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_first `{State.Trait} : Notation.Dot "first" := {
      Notation.dot x := let* x := M.read x in Pure x.(first) : M _;
    }.
    Global Instance Get_AF_first `{State.Trait}
      : Notation.DoubleColon t "first" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(first) : M _;
    }.
    Global Instance Get_phantom `{State.Trait} : Notation.Dot "phantom" := {
      Notation.dot x := let* x := M.read x in Pure x.(phantom) : M _;
    }.
    Global Instance Get_AF_phantom `{State.Trait}
      : Notation.DoubleColon t "phantom" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(phantom) : M _;
    }.
  End PhantomStruct.
End PhantomStruct.
Definition PhantomStruct (A B : Set) `{State.Trait} : Set :=
  M.val (PhantomStruct.t (A := A) (B := B)).

Module
  Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Section
    Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.
    Context {A B : Set}.
    Definition Self `{State.Trait} := generics_phantom_type.PhantomStruct A B.
    
    Global Instance I `{State.Trait}
      : core.marker.StructuralPartialEq.Trait Self := {
    }.
  End
    Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.

Module Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Section Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.
    Context {A B : Set}.
    Context
      `{core.cmp.PartialEq.Trait A (Rhs := core.cmp.PartialEq.Default.Rhs A)}
      `{core.cmp.PartialEq.Trait B (Rhs := core.cmp.PartialEq.Default.Rhs B)}.
    Definition Self `{State.Trait} := generics_phantom_type.PhantomStruct A B.
    
    Parameter eq :
        forall `{State.Trait},
        (ref Self) -> (ref (generics_phantom_type.PhantomStruct A B)) -> M bool.
    
    Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I `{State.Trait}
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq := eq;
    }.
  End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
