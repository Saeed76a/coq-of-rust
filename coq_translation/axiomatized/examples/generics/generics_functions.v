(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module A.
  Section A.
    Context `{State.Trait}.
    
    Inductive t : Set := Build.
  End A.
End A.
Definition A := @A.t.

Module S.
  Section S.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : generics_functions.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End S.
End S.
Definition S `{State.Trait} : Set := M.val S.t.

Module SGen.
  Section SGen.
    Context `{State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End SGen.
End SGen.
Definition SGen `{State.Trait} (T : Set) : Set := M.val (SGen.t (T := T)).

Parameter reg_fn : forall `{State.Trait}, generics_functions.S -> M unit.

Parameter gen_spec_t :
    forall `{State.Trait},
    (generics_functions.SGen generics_functions.A) -> M unit.

Parameter gen_spec_i32 :
    forall `{State.Trait},
    (generics_functions.SGen i32) -> M unit.

Parameter generic :
    forall `{State.Trait} {T : Set},
    (generics_functions.SGen T) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
