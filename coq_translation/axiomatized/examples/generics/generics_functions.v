(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module A.
  Inductive t : Set := Build.
End A.
Definition A := @A.t.

Module S.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    _ : generics_functions.A;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End S.
Definition S := @S.t.

Module SGen.
  Section SGen.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      _ : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End SGen.
End SGen.
Definition SGen := @SGen.t.

Parameter reg_fn : forall `{State.Trait}, generics_functions.S -> M unit.

Parameter gen_spec_t :
    forall `{State.Trait},
    (generics_functions.SGen generics_functions.A) -> M unit.

Parameter gen_spec_i32 :
    forall `{State.Trait},
    (generics_functions.SGen i32) -> M unit.

Parameter generic :
    forall `{State.Trait} {T : Set},
    (generics_functions.SGen T) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
