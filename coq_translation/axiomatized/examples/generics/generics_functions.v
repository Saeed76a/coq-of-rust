(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  A.
Section A.
  Inductive t : Set := Build.
End A.
End A.

Module  S.
Section S.
  Record t : Set := {
    x0 : generics_functions.A.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End S.
End S.

Module  SGen.
Section SGen.
  Context {T : Set}.
  
  Record t : Set := {
    x0 : T;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End SGen.
End SGen.

Parameter reg_fn : (M.Val generics_functions.S.t) -> M (M.Val unit).

Parameter gen_spec_t :
    (M.Val (generics_functions.SGen.t generics_functions.A.t)) ->
      M (M.Val unit).

Parameter gen_spec_i32 :
    (M.Val (generics_functions.SGen.t i32.t)) -> M (M.Val unit).

Parameter generic :
    forall {T : Set},
    (M.Val (generics_functions.SGen.t T)) -> M (M.Val unit).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M (M.Val unit).
