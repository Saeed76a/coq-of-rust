(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  HasArea.
Section HasArea.
  Class Trait (Self : Set) : Type := {
    area : (ref ltac:(Self)) -> M f64.t;
  }.
  
End HasArea.
End HasArea.

Module  Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
  Ltac Self := exact generics_bounds.Rectangle.t.
  
  Parameter area : (M.Val (ref ltac:(Self))) -> M (M.Val f64.t).
  
  Global Instance AssociatedFunction_area :
    Notation.DoubleColon ltac:(Self) "area" := {
    Notation.double_colon := area;
  }.
  
  Global Instance ℐ : generics_bounds.HasArea.Trait ltac:(Self) := {
    generics_bounds.HasArea.area := area;
  }.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Global Instance Get_length : Notation.Dot "length" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(length) : M _;
  }.
  Global Instance Get_AF_length : Notation.DoubleColon t "length" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(length) : M _;
  }.
  Global Instance Get_height : Notation.Dot "height" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(height) : M _;
  }.
  Global Instance Get_AF_height : Notation.DoubleColon t "height" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(height) : M _;
  }.
End Rectangle.
End Rectangle.
Definition Rectangle : Set := M.Val Rectangle.t.

Module  Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
  Ltac Self := exact generics_bounds.Rectangle.t.
  
  Parameter fmt :
      (M.Val (ref ltac:(Self))) ->
        (M.Val (mut_ref core.fmt.Formatter.t)) ->
        M (M.Val ltac:(core.fmt.Result)).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Triangle.
Section Triangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Global Instance Get_length : Notation.Dot "length" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(length) : M _;
  }.
  Global Instance Get_AF_length : Notation.DoubleColon t "length" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(length) : M _;
  }.
  Global Instance Get_height : Notation.Dot "height" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(height) : M _;
  }.
  Global Instance Get_AF_height : Notation.DoubleColon t "height" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(height) : M _;
  }.
End Triangle.
End Triangle.
Definition Triangle : Set := M.Val Triangle.t.

Parameter print_debug :
    forall {T : Set} {ℋ_0 : core.fmt.Debug.Trait T},
    (M.Val (ref T)) -> M (M.Val unit).

Parameter area :
    forall {T : Set} {ℋ_0 : generics_bounds.HasArea.Trait T},
    (M.Val (ref T)) -> M (M.Val f64.t).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M (M.Val unit).
