(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module checked.
  Module MathError.
    Inductive t : Set :=
    | DivisionByZero
    | NonPositiveLogarithm
    | NegativeSquareRoot.
  End MathError.
  
  Module  Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError_t.
  Section Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError_t.
    Ltac Self := exact result_chaining_with_question_mark.checked.MathError.t.
    
    Parameter fmt :
        (M.Val (ref ltac:(Self))) ->
          (M.Val (mut_ref core.fmt.Formatter.t)) ->
          M (M.Val ltac:(core.fmt.Result)).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon ltac:(Self) "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError_t.
  End Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError_t.
  
  Ltac MathResult :=
    exact
      (core.result.Result.t
        f64.t
        result_chaining_with_question_mark.checked.MathError.t).
  
  Parameter div :
      (M.Val f64.t) ->
        (M.Val f64.t) ->
        M (M.Val ltac:(result_chaining_with_question_mark.checked.MathResult)).
  
  Parameter sqrt :
      (M.Val f64.t) ->
        M (M.Val ltac:(result_chaining_with_question_mark.checked.MathResult)).
  
  Parameter ln :
      (M.Val f64.t) ->
        M (M.Val ltac:(result_chaining_with_question_mark.checked.MathResult)).
  
  Parameter op_ :
      (M.Val f64.t) ->
        (M.Val f64.t) ->
        M (M.Val ltac:(result_chaining_with_question_mark.checked.MathResult)).
  
  Parameter op : (M.Val f64.t) -> (M.Val f64.t) -> M (M.Val unit).
End checked.

Module MathError.
  Inductive t : Set :=
  | DivisionByZero
  | NonPositiveLogarithm
  | NegativeSquareRoot.
End MathError.

Module  Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError_t.
Section Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError_t.
  Ltac Self := exact result_chaining_with_question_mark.checked.MathError.t.
  
  Parameter fmt :
      (M.Val (ref ltac:(Self))) ->
        (M.Val (mut_ref core.fmt.Formatter.t)) ->
        M (M.Val ltac:(core.fmt.Result)).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError_t.
End Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError_t.

Ltac MathResult :=
  exact
    (core.result.Result.t
      f64.t
      result_chaining_with_question_mark.checked.MathError.t).

Parameter div :
    (M.Val f64.t) ->
      (M.Val f64.t) ->
      M (M.Val ltac:(result_chaining_with_question_mark.checked.MathResult)).

Parameter sqrt :
    (M.Val f64.t) ->
      M (M.Val ltac:(result_chaining_with_question_mark.checked.MathResult)).

Parameter ln :
    (M.Val f64.t) ->
      M (M.Val ltac:(result_chaining_with_question_mark.checked.MathResult)).

Parameter op_ :
    (M.Val f64.t) ->
      (M.Val f64.t) ->
      M (M.Val ltac:(result_chaining_with_question_mark.checked.MathResult)).

Parameter op : (M.Val f64.t) -> (M.Val f64.t) -> M (M.Val unit).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M (M.Val unit).
