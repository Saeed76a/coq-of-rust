(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Point.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x : f64;
    y : f64;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_x `{State.Trait} : Notation.Dot "x" := {
    Notation.dot x := let* x' := M.read x' in Pure x'.(x) : M _;
  }.
  Global Instance Get_AF_x `{State.Trait} : Notation.DoubleColon t "x" := {
    Notation.double_colon x := let* x' := M.read x' in Pure x'.(x) : M _;
  }.
  Global Instance Get_y `{State.Trait} : Notation.Dot "y" := {
    Notation.dot x := let* x := M.read x in Pure x.(y) : M _;
  }.
  Global Instance Get_AF_y `{State.Trait} : Notation.DoubleColon t "y" := {
    Notation.double_colon x := let* x := M.read x in Pure x.(y) : M _;
  }.
End Point.
Definition Point `{State.Trait} : Set := M.val (Point.t).

Module Impl_core_fmt_Debug_for_box_stack_heap_Point.
  Definition Self `{State.Trait} := box_stack_heap.Point.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_box_stack_heap_Point.

Module Impl_core_clone_Clone_for_box_stack_heap_Point.
  Definition Self `{State.Trait} := box_stack_heap.Point.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Parameter clone : forall `{State.Trait}, (ref Self) -> M box_stack_heap.Point.
  
  Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_box_stack_heap_Point.

Module Impl_core_marker_Copy_for_box_stack_heap_Point.
  Definition Self `{State.Trait} := box_stack_heap.Point.
  
  Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_box_stack_heap_Point.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Rectangle.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    top_left : box_stack_heap.Point;
    bottom_right : box_stack_heap.Point;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_top_left `{State.Trait} : Notation.Dot "top_left" := {
    Notation.dot x := let* x := M.read x in Pure x.(top_left) : M _;
  }.
  Global Instance Get_AF_top_left `{State.Trait}
    : Notation.DoubleColon t "top_left" := {
    Notation.double_colon x := let* x := M.read x in Pure x.(top_left) : M _;
  }.
  Global Instance Get_bottom_right `{State.Trait}
    : Notation.Dot "bottom_right" := {
    Notation.dot x := let* x := M.read x in Pure x.(bottom_right) : M _;
  }.
  Global Instance Get_AF_bottom_right `{State.Trait}
    : Notation.DoubleColon t "bottom_right" := {
    Notation.double_colon x
      :=
      let* x := M.read x in Pure x.(bottom_right) : M _;
  }.
End Rectangle.
Definition Rectangle `{State.Trait} : Set := M.val (Rectangle.t).

Parameter origin : forall `{State.Trait}, M box_stack_heap.Point.

Parameter boxed_origin :
    forall `{State.Trait},
    M (alloc.boxed.Box box_stack_heap.Point alloc.boxed.Box.Default.A).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
