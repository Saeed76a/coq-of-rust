(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module checked.
  Module MathError.
    Inductive t `{State.Trait} : Set :=
    | DivisionByZero
    | NonPositiveLogarithm
    | NegativeSquareRoot.
  End MathError.
  Definition MathError `{State.Trait} : Set := MathError.t.
  
  Module Impl_core_fmt_Debug_for_result_checked_MathError.
    Definition Self `{State.Trait} := result.checked.MathError.
    
    Parameter fmt :
        forall `{State.Trait},
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_result_checked_MathError.
  
  Definition MathResult `{State.Trait} : Set :=
    core.result.Result f64 result.checked.MathError.
  
  Parameter div :
      forall `{State.Trait},
      f64 -> f64 -> M result.checked.MathResult.
  
  Parameter sqrt : forall `{State.Trait}, f64 -> M result.checked.MathResult.
  
  Parameter ln : forall `{State.Trait}, f64 -> M result.checked.MathResult.
End checked.

Module MathError.
  Inductive t `{State.Trait} : Set :=
  | DivisionByZero
  | NonPositiveLogarithm
  | NegativeSquareRoot.
End MathError.
Definition MathError `{State.Trait} : Set := MathError.t.

Module Impl_core_fmt_Debug_for_result_checked_MathError.
  Definition Self `{State.Trait} := result.checked.MathError.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_result_checked_MathError.

Definition MathResult `{State.Trait} : Set :=
  core.result.Result f64 result.checked.MathError.

Parameter div :
    forall `{State.Trait},
    f64 -> f64 -> M result.checked.MathResult.

Parameter sqrt : forall `{State.Trait}, f64 -> M result.checked.MathResult.

Parameter ln : forall `{State.Trait}, f64 -> M result.checked.MathResult.

Parameter op : forall `{State.Trait}, f64 -> f64 -> M f64.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
