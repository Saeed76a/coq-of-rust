(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module my.
  Module OpenBox.
    Section OpenBox.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t `{State.Trait} : Set := {
        contents : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_contents `{State.Trait} : Notation.Dot "contents" := {
        Notation.dot x := let* x := M.read x in Pure x.(contents) : M _;
      }.
      Global Instance Get_AF_contents `{State.Trait}
        : Notation.DoubleColon t "contents" := {
        Notation.double_colon x
          :=
          let* x := M.read x in Pure x.(contents) : M _;
      }.
    End OpenBox.
  End OpenBox.
  Definition OpenBox (T : Set) `{State.Trait} : Set :=
    M.val (OpenBox.t (T := T)).
  
  Module ClosedBox.
    Section ClosedBox.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t `{State.Trait} : Set := {
        contents : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_contents `{State.Trait} : Notation.Dot "contents" := {
        Notation.dot x := let* x := M.read x in Pure x.(contents) : M _;
      }.
      Global Instance Get_AF_contents `{State.Trait}
        : Notation.DoubleColon t "contents" := {
        Notation.double_colon x
          :=
          let* x := M.read x in Pure x.(contents) : M _;
      }.
    End ClosedBox.
  End ClosedBox.
  Definition ClosedBox (T : Set) `{State.Trait} : Set :=
    M.val (ClosedBox.t (T := T)).
  
  Module Impl_struct_visibility_my_ClosedBox_T.
    Definition Self `{State.Trait} : Set := struct_visibility.my.ClosedBox T.
    
    Parameter new :
        forall `{State.Trait},
        T -> M (struct_visibility.my.ClosedBox T).
    
    Global Instance AssociatedFunction_new `{State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_struct_visibility_my_ClosedBox_T.
End my.

Module OpenBox.
  Section OpenBox.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      contents : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_contents `{State.Trait} : Notation.Dot "contents" := {
      Notation.dot x := let* x := M.read x in Pure x.(contents) : M _;
    }.
    Global Instance Get_AF_contents `{State.Trait}
      : Notation.DoubleColon t "contents" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(contents) : M _;
    }.
  End OpenBox.
End OpenBox.
Definition OpenBox (T : Set) `{State.Trait} : Set := M.val (OpenBox.t (T := T)).

Module ClosedBox.
  Section ClosedBox.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      contents : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_contents `{State.Trait} : Notation.Dot "contents" := {
      Notation.dot x := let* x := M.read x in Pure x.(contents) : M _;
    }.
    Global Instance Get_AF_contents `{State.Trait}
      : Notation.DoubleColon t "contents" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(contents) : M _;
    }.
  End ClosedBox.
End ClosedBox.
Definition ClosedBox (T : Set) `{State.Trait} : Set :=
  M.val (ClosedBox.t (T := T)).

Module Impl_struct_visibility_my_ClosedBox_T_2.
  Definition Self `{State.Trait} : Set := struct_visibility.my.ClosedBox T.
  
  Parameter new :
      forall `{State.Trait},
      T -> M (struct_visibility.my.ClosedBox T).
  
  Global Instance AssociatedFunction_new `{State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_struct_visibility_my_ClosedBox_T_2.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{State.Trait}, M unit.
