(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module impls.
  Module bits.
    Module Impl_scale_encode_EncodeAsType_for_scale_bits_bits_bits_Bits.
      Definition Self := scale_bits.bits.bits.Bits.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_scale_bits_bits_bits_Bits.
    
    Parameter wrong_shape : forall `{H : State.Trait},
        u32 ->
        M (H := H) scale_encode.error.Error.
  End bits.
  
  Module composite.
    Module Composite.
      Unset Primitive Projections.
      Record t : Set := {
        _ : Vals;
      }.
      Global Set Primitive Projections.
    
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Composite.
    Definition Composite := Composite.t.
    
    Module
      Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
    Section
      Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
      Context {Vals : Set}.
      
      Definition Self := scale_encode.impls.composite.Composite Vals.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End
      Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
    End
      Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
    
    Module
      Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
    Section
      Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
      Context {Vals : Set}.
      
      Definition Self := scale_encode.impls.composite.Composite Vals.
      
      Parameter encode_as_fields_to : forall `{H : State.Trait},
          ref Self ->
          mut_ref TraitObject ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_fields_to `{H : State.Trait} :
        Notation.Dot "encode_as_fields_to" := {
        Notation.dot := encode_as_fields_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
        scale_encode.EncodeAsFields.encode_as_fields_to
          `{H : State.Trait}
          :=
          encode_as_fields_to;
      }.
    End
      Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
    End
      Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
    
    Parameter skip_through_single_unnamed_fields : forall `{H : State.Trait},
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        M (H := H) u32.
  End composite.
  
  Module primitive_types.
    Module Impl_scale_encode_EncodeAsType_for_primitive_types_H128.
      Definition Self := primitive_types.H128.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_primitive_types_H128.
    
    Module Impl_scale_encode_EncodeAsType_for_primitive_types_H160.
      Definition Self := primitive_types.H160.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_primitive_types_H160.
    
    Module Impl_scale_encode_EncodeAsType_for_primitive_types_H256.
      Definition Self := primitive_types.H256.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_primitive_types_H256.
    
    Module Impl_scale_encode_EncodeAsType_for_primitive_types_H384.
      Definition Self := primitive_types.H384.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_primitive_types_H384.
    
    Module Impl_scale_encode_EncodeAsType_for_primitive_types_H512.
      Definition Self := primitive_types.H512.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_primitive_types_H512.
    
    Module Impl_scale_encode_EncodeAsType_for_primitive_types_H768.
      Definition Self := primitive_types.H768.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_primitive_types_H768.
  End primitive_types.
  
  Module variant.
    Module Variant.
      Unset Primitive Projections.
      Record t : Set := {
        name : ref str;
        fields : scale_encode.impls.composite.Composite Vals;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_name : Notation.Dot "name" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_fields : Notation.Dot "fields" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End Variant.
    Definition Variant : Set := Variant.t.
    
    Module
      Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
    Section
      Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
      Context {Vals : Set}.
      
      Definition Self := scale_encode.impls.variant.Variant Vals.
      
      Parameter encode_as_type_to : forall `{H : State.Trait},
          ref Self ->
          u32 ->
          ref scale_info.portable.PortableRegistry ->
          mut_ref (alloc.vec.Vec u8) ->
          M (H := H) (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to
          `{H : State.Trait}
          :=
          encode_as_type_to;
      }.
    End
      Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
    End
      Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
  End variant.
  
  Module Impl_scale_encode_EncodeAsType_for_bool.
    Definition Self := bool.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_bool.
  
  Module Impl_scale_encode_EncodeAsType_for_str.
    Definition Self := str.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_str.
  
  Module Impl_scale_encode_EncodeAsType_for_StaticRef_T.
  Section Impl_scale_encode_EncodeAsType_for_StaticRef_T.
    Context {T : Set}.
    
    Definition Self := ref T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_StaticRef_T.
  End Impl_scale_encode_EncodeAsType_for_StaticRef_T.
  
  Module Impl_scale_encode_EncodeAsType_for_alloc_borrow_Cow_T.
  Section Impl_scale_encode_EncodeAsType_for_alloc_borrow_Cow_T.
    Context {T : Set}.
    
    Definition Self := alloc.borrow.Cow T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_alloc_borrow_Cow_T.
  End Impl_scale_encode_EncodeAsType_for_alloc_borrow_Cow_T.
  
  Module Impl_scale_encode_EncodeAsType_for_Slice.
  Section Impl_scale_encode_EncodeAsType_for_Slice.
    Context {T : Set}.
    
    Definition Self := Slice.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_Slice.
  End Impl_scale_encode_EncodeAsType_for_Slice.
  
  Module Impl_scale_encode_EncodeAsType_for_Array_T.
  Section Impl_scale_encode_EncodeAsType_for_Array_T.
    Context {T : Set}.
    
    Definition Self := list T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_Array_T.
  End Impl_scale_encode_EncodeAsType_for_Array_T.
  
  Module Impl_scale_encode_EncodeAsType_for_core_marker_PhantomData_T.
  Section Impl_scale_encode_EncodeAsType_for_core_marker_PhantomData_T.
    Context {T : Set}.
    
    Definition Self := core.marker.PhantomData T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_marker_PhantomData_T.
  End Impl_scale_encode_EncodeAsType_for_core_marker_PhantomData_T.
  
  Module Impl_scale_encode_EncodeAsType_for_core_result_Result_T_E.
  Section Impl_scale_encode_EncodeAsType_for_core_result_Result_T_E.
    Context {T E : Set}.
    
    Definition Self := core.result.Result T E.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_result_Result_T_E.
  End Impl_scale_encode_EncodeAsType_for_core_result_Result_T_E.
  
  Module Impl_scale_encode_EncodeAsType_for_core_option_Option_T.
  Section Impl_scale_encode_EncodeAsType_for_core_option_Option_T.
    Context {T : Set}.
    
    Definition Self := core.option.Option T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_option_Option_T.
  End Impl_scale_encode_EncodeAsType_for_core_option_Option_T.
  
  Module Impl_scale_encode_EncodeAsType_for_u8.
    Definition Self := u8.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_u8.
  
  Module Impl_scale_encode_EncodeAsType_for_u16.
    Definition Self := u16.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_u16.
  
  Module Impl_scale_encode_EncodeAsType_for_u32.
    Definition Self := u32.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_u32.
  
  Module Impl_scale_encode_EncodeAsType_for_u64.
    Definition Self := u64.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_u64.
  
  Module Impl_scale_encode_EncodeAsType_for_u128.
    Definition Self := u128.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_u128.
  
  Module Impl_scale_encode_EncodeAsType_for_usize.
    Definition Self := usize.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_usize.
  
  Module Impl_scale_encode_EncodeAsType_for_i8.
    Definition Self := i8.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_i8.
  
  Module Impl_scale_encode_EncodeAsType_for_i16.
    Definition Self := i16.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_i16.
  
  Module Impl_scale_encode_EncodeAsType_for_i32.
    Definition Self := i32.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_i32.
  
  Module Impl_scale_encode_EncodeAsType_for_i64.
    Definition Self := i64.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_i64.
  
  Module Impl_scale_encode_EncodeAsType_for_i128.
    Definition Self := i128.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_i128.
  
  Module Impl_scale_encode_EncodeAsType_for_isize.
    Definition Self := isize.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_isize.
  
  Module
    Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_set_BTreeSet_K.
  Section
    Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_set_BTreeSet_K.
    Context {K : Set}.
    
    Definition Self := alloc.collections.btree.set.BTreeSet K.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_set_BTreeSet_K.
  End Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_set_BTreeSet_K.
  
  Module
    Impl_scale_encode_EncodeAsType_for_alloc_collections_linked_list_LinkedList_V.
  Section
    Impl_scale_encode_EncodeAsType_for_alloc_collections_linked_list_LinkedList_V.
    Context {V : Set}.
    
    Definition Self := alloc.collections.linked_list.LinkedList V.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End
    Impl_scale_encode_EncodeAsType_for_alloc_collections_linked_list_LinkedList_V.
  End
    Impl_scale_encode_EncodeAsType_for_alloc_collections_linked_list_LinkedList_V.
  
  Module
    Impl_scale_encode_EncodeAsType_for_alloc_collections_binary_heap_BinaryHeap_V.
  Section
    Impl_scale_encode_EncodeAsType_for_alloc_collections_binary_heap_BinaryHeap_V.
    Context {V : Set}.
    
    Definition Self := alloc.collections.binary_heap.BinaryHeap V.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End
    Impl_scale_encode_EncodeAsType_for_alloc_collections_binary_heap_BinaryHeap_V.
  End
    Impl_scale_encode_EncodeAsType_for_alloc_collections_binary_heap_BinaryHeap_V.
  
  Module
    Impl_scale_encode_EncodeAsType_for_alloc_collections_vec_deque_VecDeque_V.
  Section
    Impl_scale_encode_EncodeAsType_for_alloc_collections_vec_deque_VecDeque_V.
    Context {V : Set}.
    
    Definition Self := alloc.collections.vec_deque.VecDeque V.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_alloc_collections_vec_deque_VecDeque_V.
  End Impl_scale_encode_EncodeAsType_for_alloc_collections_vec_deque_VecDeque_V.
  
  Module Impl_scale_encode_EncodeAsType_for_alloc_vec_Vec_V.
  Section Impl_scale_encode_EncodeAsType_for_alloc_vec_Vec_V.
    Context {V : Set}.
    
    Definition Self := alloc.vec.Vec V.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_alloc_vec_Vec_V.
  End Impl_scale_encode_EncodeAsType_for_alloc_vec_Vec_V.
  
  Module
    Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_map_BTreeMap_K_V.
  Section
    Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_map_BTreeMap_K_V.
    Context {K V : Set}.
    
    Definition Self := alloc.collections.btree.map.BTreeMap K V.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End
    Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_map_BTreeMap_K_V.
  End
    Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_map_BTreeMap_K_V.
  
  Module
    Impl_scale_encode_EncodeAsFields_for_alloc_collections_btree_map_BTreeMap_K_V.
  Section
    Impl_scale_encode_EncodeAsFields_for_alloc_collections_btree_map_BTreeMap_K_V.
    Context {K V : Set}.
    
    Definition Self := alloc.collections.btree.map.BTreeMap K V.
    
    Parameter encode_as_fields_to : forall `{H : State.Trait},
        ref Self ->
        mut_ref TraitObject ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to
        `{H : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End
    Impl_scale_encode_EncodeAsFields_for_alloc_collections_btree_map_BTreeMap_K_V.
  End
    Impl_scale_encode_EncodeAsFields_for_alloc_collections_btree_map_BTreeMap_K_V.
  
  Module Impl_scale_encode_EncodeAsType_for_alloc_string_String.
    Definition Self := alloc.string.String.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_alloc_string_String.
  
  Module Impl_scale_encode_EncodeAsType_for_alloc_boxed_Box_T.
  Section Impl_scale_encode_EncodeAsType_for_alloc_boxed_Box_T.
    Context {T : Set}.
    
    Definition Self := alloc.boxed.Box T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_alloc_boxed_Box_T.
  End Impl_scale_encode_EncodeAsType_for_alloc_boxed_Box_T.
  
  Module Impl_scale_encode_EncodeAsType_for_alloc_sync_Arc_T.
  Section Impl_scale_encode_EncodeAsType_for_alloc_sync_Arc_T.
    Context {T : Set}.
    
    Definition Self := alloc.sync.Arc T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_alloc_sync_Arc_T.
  End Impl_scale_encode_EncodeAsType_for_alloc_sync_Arc_T.
  
  Module Impl_scale_encode_EncodeAsType_for_alloc_rc_Rc_T.
  Section Impl_scale_encode_EncodeAsType_for_alloc_rc_Rc_T.
    Context {T : Set}.
    
    Definition Self := alloc.rc.Rc T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_alloc_rc_Rc_T.
  End Impl_scale_encode_EncodeAsType_for_alloc_rc_Rc_T.
  
  Module Impl_scale_encode_EncodeAsType_for_char.
    Definition Self := char.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_char.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU8.
    Definition Self := core.num.nonzero.NonZeroU8.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU8.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU16.
    Definition Self := core.num.nonzero.NonZeroU16.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU16.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU32.
    Definition Self := core.num.nonzero.NonZeroU32.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU32.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU64.
    Definition Self := core.num.nonzero.NonZeroU64.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU64.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU128.
    Definition Self := core.num.nonzero.NonZeroU128.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU128.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI8.
    Definition Self := core.num.nonzero.NonZeroI8.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI8.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI16.
    Definition Self := core.num.nonzero.NonZeroI16.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI16.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI32.
    Definition Self := core.num.nonzero.NonZeroI32.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI32.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI64.
    Definition Self := core.num.nonzero.NonZeroI64.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI64.
  
  Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI128.
    Definition Self := core.num.nonzero.NonZeroI128.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI128.
  
  Module Impl_scale_encode_EncodeAsType_for_core_time_Duration.
    Definition Self := core.time.Duration.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_time_Duration.
  
  Module Impl_scale_encode_EncodeAsType_for_core_ops_range_Range_T.
  Section Impl_scale_encode_EncodeAsType_for_core_ops_range_Range_T.
    Context {T : Set}.
    
    Definition Self := core.ops.range.Range T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_ops_range_Range_T.
  End Impl_scale_encode_EncodeAsType_for_core_ops_range_Range_T.
  
  Module Impl_scale_encode_EncodeAsType_for_core_ops_range_RangeInclusive_T.
  Section Impl_scale_encode_EncodeAsType_for_core_ops_range_RangeInclusive_T.
    Context {T : Set}.
    
    Definition Self := core.ops.range.RangeInclusive T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_core_ops_range_RangeInclusive_T.
  End Impl_scale_encode_EncodeAsType_for_core_ops_range_RangeInclusive_T.
  
  Module
    Impl_scale_encode_EncodeAsType_for_parity_scale_codec_compact_Compact_T.
  Section
    Impl_scale_encode_EncodeAsType_for_parity_scale_codec_compact_Compact_T.
    Context {T : Set}.
    
    Definition Self := parity_scale_codec.compact.Compact T.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_parity_scale_codec_compact_Compact_T.
  End Impl_scale_encode_EncodeAsType_for_parity_scale_codec_compact_Compact_T.
  
  Parameter find_single_entry_with_same_repr : forall `{H : State.Trait},
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      M (H := H) u32.
  
  Parameter encode_iterable_sequence_to : forall `{H : State.Trait},
      forall
      {I : Set},
      `{core.iter.traits.iterator.Iterator.Trait I}
      `{scale_encode.EncodeAsType.Trait ImplI.Item}
      usize ->
      I ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
End impls.

Module bits.
  Module Impl_scale_encode_EncodeAsType_for_scale_bits_bits_bits_Bits.
    Definition Self := scale_bits.bits.bits.Bits.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_scale_bits_bits_bits_Bits.
  
  Parameter wrong_shape : forall `{H : State.Trait},
      u32 ->
      M (H := H) scale_encode.error.Error.
End bits.

Module Impl_scale_encode_EncodeAsType_for_scale_bits_bits_bits_Bits.
  Definition Self := scale_bits.bits.bits.Bits.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_scale_bits_bits_bits_Bits.

Parameter wrong_shape : forall `{H : State.Trait},
    u32 ->
    M (H := H) scale_encode.error.Error.

Module composite.
  Module Composite.
    Unset Primitive Projections.
    Record t : Set := {
      _ : Vals;
    }.
    Global Set Primitive Projections.
  
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Composite.
  Definition Composite := Composite.t.
  
  Module
    Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
  Section
    Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
    Context {Vals : Set}.
    
    Definition Self := scale_encode.impls.composite.Composite Vals.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End
    Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
  End
    Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
  
  Module
    Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
  Section
    Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
    Context {Vals : Set}.
    
    Definition Self := scale_encode.impls.composite.Composite Vals.
    
    Parameter encode_as_fields_to : forall `{H : State.Trait},
        ref Self ->
        mut_ref TraitObject ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to
        `{H : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End
    Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
  End
    Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
  
  Parameter skip_through_single_unnamed_fields : forall `{H : State.Trait},
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      M (H := H) u32.
End composite.

Module Composite.
  Unset Primitive Projections.
  Record t : Set := {
    _ : Vals;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Composite.
Definition Composite := Composite.t.

Module
  Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
Section
  Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
  Context {Vals : Set}.
  
  Definition Self := scale_encode.impls.composite.Composite Vals.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End
  Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.
End
  Impl_scale_encode_EncodeAsType_for_scale_encode_impls_composite_Composite_Vals.

Module
  Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
Section
  Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
  Context {Vals : Set}.
  
  Definition Self := scale_encode.impls.composite.Composite Vals.
  
  Parameter encode_as_fields_to : forall `{H : State.Trait},
      ref Self ->
      mut_ref TraitObject ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_fields_to `{H : State.Trait} :
    Notation.Dot "encode_as_fields_to" := {
    Notation.dot := encode_as_fields_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
    scale_encode.EncodeAsFields.encode_as_fields_to
      `{H : State.Trait}
      :=
      encode_as_fields_to;
  }.
End
  Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.
End
  Impl_scale_encode_EncodeAsFields_for_scale_encode_impls_composite_Composite_Vals.

Parameter skip_through_single_unnamed_fields : forall `{H : State.Trait},
    u32 ->
    ref scale_info.portable.PortableRegistry ->
    M (H := H) u32.

Module primitive_types.
  Module Impl_scale_encode_EncodeAsType_for_primitive_types_H128.
    Definition Self := primitive_types.H128.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_primitive_types_H128.
  
  Module Impl_scale_encode_EncodeAsType_for_primitive_types_H160.
    Definition Self := primitive_types.H160.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_primitive_types_H160.
  
  Module Impl_scale_encode_EncodeAsType_for_primitive_types_H256.
    Definition Self := primitive_types.H256.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_primitive_types_H256.
  
  Module Impl_scale_encode_EncodeAsType_for_primitive_types_H384.
    Definition Self := primitive_types.H384.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_primitive_types_H384.
  
  Module Impl_scale_encode_EncodeAsType_for_primitive_types_H512.
    Definition Self := primitive_types.H512.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_primitive_types_H512.
  
  Module Impl_scale_encode_EncodeAsType_for_primitive_types_H768.
    Definition Self := primitive_types.H768.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_primitive_types_H768.
End primitive_types.

Module Impl_scale_encode_EncodeAsType_for_primitive_types_H128.
  Definition Self := primitive_types.H128.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_primitive_types_H128.

Module Impl_scale_encode_EncodeAsType_for_primitive_types_H160.
  Definition Self := primitive_types.H160.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_primitive_types_H160.

Module Impl_scale_encode_EncodeAsType_for_primitive_types_H256.
  Definition Self := primitive_types.H256.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_primitive_types_H256.

Module Impl_scale_encode_EncodeAsType_for_primitive_types_H384.
  Definition Self := primitive_types.H384.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_primitive_types_H384.

Module Impl_scale_encode_EncodeAsType_for_primitive_types_H512.
  Definition Self := primitive_types.H512.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_primitive_types_H512.

Module Impl_scale_encode_EncodeAsType_for_primitive_types_H768.
  Definition Self := primitive_types.H768.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_primitive_types_H768.

Module variant.
  Module Variant.
    Unset Primitive Projections.
    Record t : Set := {
      name : ref str;
      fields : scale_encode.impls.composite.Composite Vals;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_name : Notation.Dot "name" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_fields : Notation.Dot "fields" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End Variant.
  Definition Variant : Set := Variant.t.
  
  Module
    Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
  Section
    Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
    Context {Vals : Set}.
    
    Definition Self := scale_encode.impls.variant.Variant Vals.
    
    Parameter encode_as_type_to : forall `{H : State.Trait},
        ref Self ->
        u32 ->
        ref scale_info.portable.PortableRegistry ->
        mut_ref (alloc.vec.Vec u8) ->
        M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End
    Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
  End
    Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
End variant.

Module Variant.
  Unset Primitive Projections.
  Record t : Set := {
    name : ref str;
    fields : scale_encode.impls.composite.Composite Vals;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_fields : Notation.Dot "fields" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Variant.
Definition Variant : Set := Variant.t.

Module
  Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
Section
  Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
  Context {Vals : Set}.
  
  Definition Self := scale_encode.impls.variant.Variant Vals.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.
End Impl_scale_encode_EncodeAsType_for_scale_encode_impls_variant_Variant_Vals.

Module Impl_scale_encode_EncodeAsType_for_bool.
  Definition Self := bool.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_bool.

Module Impl_scale_encode_EncodeAsType_for_str.
  Definition Self := str.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_str.

Module Impl_scale_encode_EncodeAsType_for_StaticRef_T.
Section Impl_scale_encode_EncodeAsType_for_StaticRef_T.
  Context {T : Set}.
  
  Definition Self := ref T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_StaticRef_T.
End Impl_scale_encode_EncodeAsType_for_StaticRef_T.

Module Impl_scale_encode_EncodeAsType_for_alloc_borrow_Cow_T.
Section Impl_scale_encode_EncodeAsType_for_alloc_borrow_Cow_T.
  Context {T : Set}.
  
  Definition Self := alloc.borrow.Cow T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_borrow_Cow_T.
End Impl_scale_encode_EncodeAsType_for_alloc_borrow_Cow_T.

Module Impl_scale_encode_EncodeAsType_for_Slice.
Section Impl_scale_encode_EncodeAsType_for_Slice.
  Context {T : Set}.
  
  Definition Self := Slice.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Slice.
End Impl_scale_encode_EncodeAsType_for_Slice.

Module Impl_scale_encode_EncodeAsType_for_Array_T.
Section Impl_scale_encode_EncodeAsType_for_Array_T.
  Context {T : Set}.
  
  Definition Self := list T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Array_T.
End Impl_scale_encode_EncodeAsType_for_Array_T.

Module Impl_scale_encode_EncodeAsType_for_core_marker_PhantomData_T.
Section Impl_scale_encode_EncodeAsType_for_core_marker_PhantomData_T.
  Context {T : Set}.
  
  Definition Self := core.marker.PhantomData T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_marker_PhantomData_T.
End Impl_scale_encode_EncodeAsType_for_core_marker_PhantomData_T.

Module Impl_scale_encode_EncodeAsType_for_core_result_Result_T_E.
Section Impl_scale_encode_EncodeAsType_for_core_result_Result_T_E.
  Context {T E : Set}.
  
  Definition Self := core.result.Result T E.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_result_Result_T_E.
End Impl_scale_encode_EncodeAsType_for_core_result_Result_T_E.

Module Impl_scale_encode_EncodeAsType_for_core_option_Option_T.
Section Impl_scale_encode_EncodeAsType_for_core_option_Option_T.
  Context {T : Set}.
  
  Definition Self := core.option.Option T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_option_Option_T.
End Impl_scale_encode_EncodeAsType_for_core_option_Option_T.

Module Impl_scale_encode_EncodeAsType_for_u8.
  Definition Self := u8.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_u8.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait u8 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    u8 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_u16.
  Definition Self := u16.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_u16.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait u16 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    u16 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_u32.
  Definition Self := u32.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_u32.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait u32 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    u32 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_u64.
  Definition Self := u64.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_u64.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait u64 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    u64 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_u128.
  Definition Self := u128.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_u128.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait u128 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    u128 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_usize.
  Definition Self := usize.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_usize.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait usize T}
    `{parity_scale_codec.codec.Encode.Trait T}
    usize ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_i8.
  Definition Self := i8.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_i8.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait i8 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    i8 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_i16.
  Definition Self := i16.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_i16.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait i16 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    i16 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_i32.
  Definition Self := i32.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_i32.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait i32 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    i32 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_i64.
  Definition Self := i64.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_i64.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait i64 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    i64 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_i128.
  Definition Self := i128.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_i128.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait i128 T}
    `{parity_scale_codec.codec.Encode.Trait T}
    i128 ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_isize.
  Definition Self := isize.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_isize.

Parameter try_num : forall `{H : State.Trait},
    forall
    {T : Set},
    `{core.convert.TryFrom.Trait isize T}
    `{parity_scale_codec.codec.Encode.Trait T}
    isize ->
    u32 ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module Impl_scale_encode_EncodeAsType_for_Tuple_.
  Definition Self := unit.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_.
  Context {A : Set}.
  
  Definition Self := A.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_.
  Context {A B : Set}.
  
  Definition Self := A * B.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_.
  Context {A B C : Set}.
  
  Definition Self := A * B * C.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_.
  Context {A B C D : Set}.
  
  Definition Self := A * B * C * D.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_.
  Context {A B C D E : Set}.
  
  Definition Self := A * B * C * D * E.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_.
  Context {A B C D E F : Set}.
  
  Definition Self := A * B * C * D * E * F.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_.
  Context {A B C D E F G : Set}.
  
  Definition Self := A * B * C * D * E * F * G.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_.
  Context {A B C D E F G H : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_.
  Context {A B C D E F G H I : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_.
  Context {A B C D E F G H I J : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I * J.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_.
  Context {A B C D E F G H I J K : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I * J * K.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_.
  Context {A B C D E F G H I J K L : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I * J * K * L.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_.
  Context {A B C D E F G H I J K L M : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I * J * K * L * M.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_.
  Context {A B C D E F G H I J K L M N : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I * J * K * L * M * N.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_.

Module Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_.
Section Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_.
  Context {A B C D E F G H I J K L M N O : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I * J * K * L * M * N * O.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_.

Module
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_.
Section
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_.
  Context {A B C D E F G H I J K L M N O P : Set}.
  
  Definition
    Self
    :=
    A * B * C * D * E * F * G * H * I * J * K * L * M * N * O * P.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_.

Module
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_.
Section
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_.
  Context {A B C D E F G H I J K L M N O P Q : Set}.
  
  Definition
    Self
    :=
    A * B * C * D * E * F * G * H * I * J * K * L * M * N * O * P * Q.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_.
End Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_.

Module
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_.
Section
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_.
  Context {A B C D E F G H I J K L M N O P Q R : Set}.
  
  Definition
    Self
    :=
    A * B * C * D * E * F * G * H * I * J * K * L * M * N * O * P * Q * R.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_.
End
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_.

Module
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_.
Section
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_.
  Context {A B C D E F G H I J K L M N O P Q R S : Set}.
  
  Definition
    Self
    :=
    A * B * C * D * E * F * G * H * I * J * K * L * M * N * O * P * Q * R * S.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_.
End
  Impl_scale_encode_EncodeAsType_for_Tuple_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_.

Module
  Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_set_BTreeSet_K.
Section
  Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_set_BTreeSet_K.
  Context {K : Set}.
  
  Definition Self := alloc.collections.btree.set.BTreeSet K.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_set_BTreeSet_K.
End Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_set_BTreeSet_K.

Module
  Impl_scale_encode_EncodeAsType_for_alloc_collections_linked_list_LinkedList_V.
Section
  Impl_scale_encode_EncodeAsType_for_alloc_collections_linked_list_LinkedList_V.
  Context {V : Set}.
  
  Definition Self := alloc.collections.linked_list.LinkedList V.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End
  Impl_scale_encode_EncodeAsType_for_alloc_collections_linked_list_LinkedList_V.
End
  Impl_scale_encode_EncodeAsType_for_alloc_collections_linked_list_LinkedList_V.

Module
  Impl_scale_encode_EncodeAsType_for_alloc_collections_binary_heap_BinaryHeap_V.
Section
  Impl_scale_encode_EncodeAsType_for_alloc_collections_binary_heap_BinaryHeap_V.
  Context {V : Set}.
  
  Definition Self := alloc.collections.binary_heap.BinaryHeap V.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End
  Impl_scale_encode_EncodeAsType_for_alloc_collections_binary_heap_BinaryHeap_V.
End
  Impl_scale_encode_EncodeAsType_for_alloc_collections_binary_heap_BinaryHeap_V.

Module
  Impl_scale_encode_EncodeAsType_for_alloc_collections_vec_deque_VecDeque_V.
Section
  Impl_scale_encode_EncodeAsType_for_alloc_collections_vec_deque_VecDeque_V.
  Context {V : Set}.
  
  Definition Self := alloc.collections.vec_deque.VecDeque V.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_collections_vec_deque_VecDeque_V.
End Impl_scale_encode_EncodeAsType_for_alloc_collections_vec_deque_VecDeque_V.

Module Impl_scale_encode_EncodeAsType_for_alloc_vec_Vec_V.
Section Impl_scale_encode_EncodeAsType_for_alloc_vec_Vec_V.
  Context {V : Set}.
  
  Definition Self := alloc.vec.Vec V.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_vec_Vec_V.
End Impl_scale_encode_EncodeAsType_for_alloc_vec_Vec_V.

Module
  Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_map_BTreeMap_K_V.
Section
  Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_map_BTreeMap_K_V.
  Context {K V : Set}.
  
  Definition Self := alloc.collections.btree.map.BTreeMap K V.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_map_BTreeMap_K_V.
End Impl_scale_encode_EncodeAsType_for_alloc_collections_btree_map_BTreeMap_K_V.

Module
  Impl_scale_encode_EncodeAsFields_for_alloc_collections_btree_map_BTreeMap_K_V.
Section
  Impl_scale_encode_EncodeAsFields_for_alloc_collections_btree_map_BTreeMap_K_V.
  Context {K V : Set}.
  
  Definition Self := alloc.collections.btree.map.BTreeMap K V.
  
  Parameter encode_as_fields_to : forall `{H : State.Trait},
      ref Self ->
      mut_ref TraitObject ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_fields_to `{H : State.Trait} :
    Notation.Dot "encode_as_fields_to" := {
    Notation.dot := encode_as_fields_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
    scale_encode.EncodeAsFields.encode_as_fields_to
      `{H : State.Trait}
      :=
      encode_as_fields_to;
  }.
End
  Impl_scale_encode_EncodeAsFields_for_alloc_collections_btree_map_BTreeMap_K_V.
End
  Impl_scale_encode_EncodeAsFields_for_alloc_collections_btree_map_BTreeMap_K_V.

Module Impl_scale_encode_EncodeAsType_for_alloc_string_String.
  Definition Self := alloc.string.String.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_string_String.

Module Impl_scale_encode_EncodeAsType_for_alloc_boxed_Box_T.
Section Impl_scale_encode_EncodeAsType_for_alloc_boxed_Box_T.
  Context {T : Set}.
  
  Definition Self := alloc.boxed.Box T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_boxed_Box_T.
End Impl_scale_encode_EncodeAsType_for_alloc_boxed_Box_T.

Module Impl_scale_encode_EncodeAsType_for_alloc_sync_Arc_T.
Section Impl_scale_encode_EncodeAsType_for_alloc_sync_Arc_T.
  Context {T : Set}.
  
  Definition Self := alloc.sync.Arc T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_sync_Arc_T.
End Impl_scale_encode_EncodeAsType_for_alloc_sync_Arc_T.

Module Impl_scale_encode_EncodeAsType_for_alloc_rc_Rc_T.
Section Impl_scale_encode_EncodeAsType_for_alloc_rc_Rc_T.
  Context {T : Set}.
  
  Definition Self := alloc.rc.Rc T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_alloc_rc_Rc_T.
End Impl_scale_encode_EncodeAsType_for_alloc_rc_Rc_T.

Module Impl_scale_encode_EncodeAsType_for_char.
  Definition Self := char.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_char.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU8.
  Definition Self := core.num.nonzero.NonZeroU8.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU8.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU16.
  Definition Self := core.num.nonzero.NonZeroU16.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU16.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU32.
  Definition Self := core.num.nonzero.NonZeroU32.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU32.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU64.
  Definition Self := core.num.nonzero.NonZeroU64.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU64.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU128.
  Definition Self := core.num.nonzero.NonZeroU128.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroU128.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI8.
  Definition Self := core.num.nonzero.NonZeroI8.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI8.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI16.
  Definition Self := core.num.nonzero.NonZeroI16.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI16.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI32.
  Definition Self := core.num.nonzero.NonZeroI32.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI32.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI64.
  Definition Self := core.num.nonzero.NonZeroI64.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI64.

Module Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI128.
  Definition Self := core.num.nonzero.NonZeroI128.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_num_nonzero_NonZeroI128.

Module Impl_scale_encode_EncodeAsType_for_core_time_Duration.
  Definition Self := core.time.Duration.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_time_Duration.

Module Impl_scale_encode_EncodeAsType_for_core_ops_range_Range_T.
Section Impl_scale_encode_EncodeAsType_for_core_ops_range_Range_T.
  Context {T : Set}.
  
  Definition Self := core.ops.range.Range T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_ops_range_Range_T.
End Impl_scale_encode_EncodeAsType_for_core_ops_range_Range_T.

Module Impl_scale_encode_EncodeAsType_for_core_ops_range_RangeInclusive_T.
Section Impl_scale_encode_EncodeAsType_for_core_ops_range_RangeInclusive_T.
  Context {T : Set}.
  
  Definition Self := core.ops.range.RangeInclusive T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_core_ops_range_RangeInclusive_T.
End Impl_scale_encode_EncodeAsType_for_core_ops_range_RangeInclusive_T.

Module Impl_scale_encode_EncodeAsType_for_parity_scale_codec_compact_Compact_T.
Section Impl_scale_encode_EncodeAsType_for_parity_scale_codec_compact_Compact_T.
  Context {T : Set}.
  
  Definition Self := parity_scale_codec.compact.Compact T.
  
  Parameter encode_as_type_to : forall `{H : State.Trait},
      ref Self ->
      u32 ->
      ref scale_info.portable.PortableRegistry ->
      mut_ref (alloc.vec.Vec u8) ->
      M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_parity_scale_codec_compact_Compact_T.
End Impl_scale_encode_EncodeAsType_for_parity_scale_codec_compact_Compact_T.

Parameter find_single_entry_with_same_repr : forall `{H : State.Trait},
    u32 ->
    ref scale_info.portable.PortableRegistry ->
    M (H := H) u32.

Parameter encode_iterable_sequence_to : forall `{H : State.Trait},
    forall
    {I : Set},
    `{core.iter.traits.iterator.Iterator.Trait I}
    `{scale_encode.EncodeAsType.Trait ImplI.Item}
    usize ->
    I ->
    u32 ->
    ref scale_info.portable.PortableRegistry ->
    mut_ref (alloc.vec.Vec u8) ->
    M (H := H) (core.result.Result unit scale_encode.error.Error).

Module error.
  Module context.
    Module Context.
      Unset Primitive Projections.
      Record t : Set := {
        path : alloc.vec.Vec scale_encode.error.context.Location;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_path : Notation.Dot "path" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Context.
    Definition Context : Set := Context.t.
    
    Module Impl_core_clone_Clone_for_scale_encode_error_context_Context.
      Definition Self := scale_encode.error.context.Context.
      
      Parameter clone : forall `{H : State.Trait},
          ref Self ->
          M (H := H) scale_encode.error.context.Context.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_scale_encode_error_context_Context.
    
    Module Impl_core_default_Default_for_scale_encode_error_context_Context.
      Definition Self := scale_encode.error.context.Context.
      
      Parameter default : forall `{H : State.Trait},
          M (H := H) scale_encode.error.context.Context.
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End Impl_core_default_Default_for_scale_encode_error_context_Context.
    
    Module Impl_core_fmt_Debug_for_scale_encode_error_context_Context.
      Definition Self := scale_encode.error.context.Context.
      
      Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
        string -> alloc_vec_Vec_scale_encode_error_context_Location -> 
        M (H := H) core.fmt.Result.
      
      Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
        core.fmt.Formatter "debug_struct_field1_finish" := {
        Notation.double_colon := debug_struct_field1_finish; }.
      
      Parameter fmt : forall `{H : State.Trait},
          ref Self ->
          mut_ref core.fmt.Formatter ->
          M (H := H) core.fmt.Result.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_scale_encode_error_context_Context.
    
    Module Impl_scale_encode_error_context_Context.
      Definition Self := scale_encode.error.context.Context.
      
      Parameter new : forall `{H : State.Trait},
          M (H := H) scale_encode.error.context.Context.
      
      Global Instance AssociatedFunction_new `{H : State.Trait} :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
      
      Parameter push : forall `{H : State.Trait},
          mut_ref Self ->
          scale_encode.error.context.Location ->
          M (H := H) unit.
      
      Global Instance Method_push `{H : State.Trait} : Notation.Dot "push" := {
        Notation.dot := push;
      }.
      
      Parameter path : forall `{H : State.Trait},
          ref Self ->
          M (H := H) scale_encode.error.context.Path.
      
      Global Instance Method_path `{H : State.Trait} : Notation.Dot "path" := {
        Notation.dot := path;
      }.
    End Impl_scale_encode_error_context_Context.
    
    Module Path.
      Unset Primitive Projections.
      Record t : Set := {
        _ :
          alloc.borrow.Cow (alloc.vec.Vec scale_encode.error.context.Location);
      }.
      Global Set Primitive Projections.
    
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Path.
    Definition Path := Path.t.
    
    Module Impl_scale_encode_error_context_Path.
      Definition Self := scale_encode.error.context.Path.
      
      Parameter into_owned : forall `{H : State.Trait},
          Self ->
          M (H := H) scale_encode.error.context.Path.
      
      Global Instance Method_into_owned `{H : State.Trait} :
        Notation.Dot "into_owned" := {
        Notation.dot := into_owned;
      }.
      
      Parameter locations : forall `{H : State.Trait},
          ref Self ->
          M (H := H) OpaqueDef.
      
      Global Instance Method_locations `{H : State.Trait} :
        Notation.Dot "locations" := {
        Notation.dot := locations;
      }.
    End Impl_scale_encode_error_context_Path.
    
    Module Impl_core_fmt_Display_for_scale_encode_error_context_Path.
      Definition Self := scale_encode.error.context.Path.
      
      Parameter fmt : forall `{H : State.Trait},
          ref Self ->
          mut_ref core.fmt.Formatter ->
          M (H := H) core.fmt.Result.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Display_for_scale_encode_error_context_Path.
    
    Module Location.
      Unset Primitive Projections.
      Record t : Set := {
        inner : scale_encode.error.context.Loc;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_inner : Notation.Dot "inner" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Location.
    Definition Location : Set := Location.t.
    
    Module Impl_core_fmt_Debug_for_scale_encode_error_context_Location.
      Definition Self := scale_encode.error.context.Location.
      
      Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
        string -> scale_encode_error_context_Loc -> 
        M (H := H) core.fmt.Result.
      
      Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
        core.fmt.Formatter "debug_struct_field1_finish" := {
        Notation.double_colon := debug_struct_field1_finish; }.
      
      Parameter fmt : forall `{H : State.Trait},
          ref Self ->
          mut_ref core.fmt.Formatter ->
          M (H := H) core.fmt.Result.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_scale_encode_error_context_Location.
    
    Module Impl_core_clone_Clone_for_scale_encode_error_context_Location.
      Definition Self := scale_encode.error.context.Location.
      
      Parameter clone : forall `{H : State.Trait},
          ref Self ->
          M (H := H) scale_encode.error.context.Location.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_scale_encode_error_context_Location.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Location.
      Definition Self := scale_encode.error.context.Location.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
        core.marker.StructuralPartialEq.Build_Trait _.
    End
      Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Location.
    
    Module Impl_core_cmp_PartialEq_for_scale_encode_error_context_Location.
      Definition Self := scale_encode.error.context.Location.
      
      Parameter eq : forall `{H : State.Trait},
          ref Self ->
          ref scale_encode.error.context.Location ->
          M (H := H) bool.
      
      Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I : core.cmp.PartialEq.Trait Self := {
        core.cmp.PartialEq.eq `{H : State.Trait} := eq;
      }.
    End Impl_core_cmp_PartialEq_for_scale_encode_error_context_Location.
    
    Module
      Impl_core_marker_StructuralEq_for_scale_encode_error_context_Location.
      Definition Self := scale_encode.error.context.Location.
      
      Global Instance I : core.marker.StructuralEq.Trait Self :=
        core.marker.StructuralEq.Build_Trait _.
    End Impl_core_marker_StructuralEq_for_scale_encode_error_context_Location.
    
    Module Impl_core_cmp_Eq_for_scale_encode_error_context_Location.
      Definition Self := scale_encode.error.context.Location.
      
      Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
          ref Self ->
          M (H := H) unit.
      
      Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
    End Impl_core_cmp_Eq_for_scale_encode_error_context_Location.
    
    Module Loc.
      Inductive t : Set :=
      | Field (_ : alloc.borrow.Cow str)
      | Index (_ : usize)
      | Variant (_ : alloc.borrow.Cow str).
    End Loc.
    Definition Loc := Loc.t.
    
    Module Impl_core_fmt_Debug_for_scale_encode_error_context_Loc.
      Definition Self := scale_encode.error.context.Loc.
      
      Parameter fmt : forall `{H : State.Trait},
          ref Self ->
          mut_ref core.fmt.Formatter ->
          M (H := H) core.fmt.Result.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_scale_encode_error_context_Loc.
    
    Module Impl_core_clone_Clone_for_scale_encode_error_context_Loc.
      Definition Self := scale_encode.error.context.Loc.
      
      Parameter clone : forall `{H : State.Trait},
          ref Self ->
          M (H := H) scale_encode.error.context.Loc.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_scale_encode_error_context_Loc.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Loc.
      Definition Self := scale_encode.error.context.Loc.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
        core.marker.StructuralPartialEq.Build_Trait _.
    End Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Loc.
    
    Module Impl_core_cmp_PartialEq_for_scale_encode_error_context_Loc.
      Definition Self := scale_encode.error.context.Loc.
      
      Parameter eq : forall `{H : State.Trait},
          ref Self ->
          ref scale_encode.error.context.Loc ->
          M (H := H) bool.
      
      Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I : core.cmp.PartialEq.Trait Self := {
        core.cmp.PartialEq.eq `{H : State.Trait} := eq;
      }.
    End Impl_core_cmp_PartialEq_for_scale_encode_error_context_Loc.
    
    Module Impl_core_marker_StructuralEq_for_scale_encode_error_context_Loc.
      Definition Self := scale_encode.error.context.Loc.
      
      Global Instance I : core.marker.StructuralEq.Trait Self :=
        core.marker.StructuralEq.Build_Trait _.
    End Impl_core_marker_StructuralEq_for_scale_encode_error_context_Loc.
    
    Module Impl_core_cmp_Eq_for_scale_encode_error_context_Loc.
      Definition Self := scale_encode.error.context.Loc.
      
      Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
          ref Self ->
          M (H := H) unit.
      
      Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
    End Impl_core_cmp_Eq_for_scale_encode_error_context_Loc.
    
    Module Impl_scale_encode_error_context_Location.
      Definition Self := scale_encode.error.context.Location.
      
      Parameter field : forall `{H : State.Trait},
          impl Into<Cow<'static, str>> ->
          M (H := H) Self.
      
      Global Instance AssociatedFunction_field `{H : State.Trait} :
        Notation.DoubleColon Self "field" := {
        Notation.double_colon := field;
      }.
      
      Parameter variant : forall `{H : State.Trait},
          impl Into<Cow<'static, str>> ->
          M (H := H) Self.
      
      Global Instance AssociatedFunction_variant `{H : State.Trait} :
        Notation.DoubleColon Self "variant" := {
        Notation.double_colon := variant;
      }.
      
      Parameter idx : forall `{H : State.Trait}, usize -> M (H := H) Self.
      
      Global Instance AssociatedFunction_idx `{H : State.Trait} :
        Notation.DoubleColon Self "idx" := {
        Notation.double_colon := idx;
      }.
    End Impl_scale_encode_error_context_Location.
  End context.
  
  Module Error.
    Unset Primitive Projections.
    Record t : Set := {
      context : scale_encode.error.context.Context;
      kind : scale_encode.error.ErrorKind;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_context : Notation.Dot "context" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_kind : Notation.Dot "kind" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End Error.
  Definition Error : Set := Error.t.
  
  Module Impl_core_fmt_Debug_for_scale_encode_error_Error.
    Definition Self := scale_encode.error.Error.
    
    Parameter debug_struct_field2_finish : core.fmt.Formatter -> string -> 
      string -> scale_encode_error_context_Context -> 
      string -> scale_encode_error_ErrorKind -> 
      M (H := H) core.fmt.Result.
    
    Global Instance Deb_debug_struct_field2_finish : Notation.DoubleColon
      core.fmt.Formatter "debug_struct_field2_finish" := {
      Notation.double_colon := debug_struct_field2_finish; }.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_scale_encode_error_Error.
  
  Module Impl_scale_encode_error_Error.
    Definition Self := scale_encode.error.Error.
    
    Parameter new : forall `{H : State.Trait},
        scale_encode.error.ErrorKind ->
        M (H := H) scale_encode.error.Error.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Parameter custom : forall `{H : State.Trait},
        impl Into<CustomError> ->
        M (H := H) scale_encode.error.Error.
    
    Global Instance AssociatedFunction_custom `{H : State.Trait} :
      Notation.DoubleColon Self "custom" := {
      Notation.double_colon := custom;
    }.
    
    Parameter kind : forall `{H : State.Trait},
        ref Self ->
        M (H := H) (ref scale_encode.error.ErrorKind).
    
    Global Instance Method_kind `{H : State.Trait} : Notation.Dot "kind" := {
      Notation.dot := kind;
    }.
    
    Parameter context : forall `{H : State.Trait},
        ref Self ->
        M (H := H) (ref scale_encode.error.context.Context).
    
    Global Instance Method_context `{H : State.Trait} :
      Notation.Dot "context" := {
      Notation.dot := context;
    }.
    
    Parameter at : forall `{H : State.Trait},
        Self ->
        scale_encode.error.context.Location ->
        M (H := H) Self.
    
    Global Instance Method_at `{H : State.Trait} : Notation.Dot "at" := {
      Notation.dot := at;
    }.
    
    Parameter at_idx : forall `{H : State.Trait},
        Self ->
        usize ->
        M (H := H) Self.
    
    Global Instance Method_at_idx `{H : State.Trait} :
      Notation.Dot "at_idx" := {
      Notation.dot := at_idx;
    }.
    
    Parameter at_field : forall `{H : State.Trait},
        Self ->
        impl Into<Cow<'static, str>> ->
        M (H := H) Self.
    
    Global Instance Method_at_field `{H : State.Trait} :
      Notation.Dot "at_field" := {
      Notation.dot := at_field;
    }.
    
    Parameter at_variant : forall `{H : State.Trait},
        Self ->
        impl Into<Cow<'static, str>> ->
        M (H := H) Self.
    
    Global Instance Method_at_variant `{H : State.Trait} :
      Notation.Dot "at_variant" := {
      Notation.dot := at_variant;
    }.
  End Impl_scale_encode_error_Error.
  
  Module Impl_core_fmt_Display_for_scale_encode_error_Error.
    Definition Self := scale_encode.error.Error.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Display.Trait Self := {
      core.fmt.Display.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Display_for_scale_encode_error_Error.
  
  Module ErrorKind.
    Module WrongShape.
      Unset Primitive Projections.
      Record t : Set := {
        actual : scale_encode.error.Kind;
        expected : u32;
      }.
      Global Set Primitive Projections.
    End WrongShape.
    
    Module WrongLength.
      Unset Primitive Projections.
      Record t : Set := {
        actual_len : usize;
        expected_len : usize;
      }.
      Global Set Primitive Projections.
    End WrongLength.
    
    Module NumberOutOfRange.
      Unset Primitive Projections.
      Record t : Set := {
        value : alloc.string.String;
        expected : u32;
      }.
      Global Set Primitive Projections.
    End NumberOutOfRange.
    
    Module CannotFindVariant.
      Unset Primitive Projections.
      Record t : Set := {
        name : alloc.string.String;
        expected : u32;
      }.
      Global Set Primitive Projections.
    End CannotFindVariant.
    
    Module CannotFindField.
      Unset Primitive Projections.
      Record t : Set := {
        name : alloc.string.String;
      }.
      Global Set Primitive Projections.
    End CannotFindField.
    
    Inductive t : Set :=
    | TypeNotFound (_ : u32)
    | WrongShape (_ : WrongShape.t)
    | WrongLength (_ : WrongLength.t)
    | NumberOutOfRange (_ : NumberOutOfRange.t)
    | CannotFindVariant (_ : CannotFindVariant.t)
    | CannotFindField (_ : CannotFindField.t)
    | Custom (_ : scale_encode.error.CustomError).
  End ErrorKind.
  Definition ErrorKind := ErrorKind.t.
  
  Module Impl_core_fmt_Debug_for_scale_encode_error_ErrorKind.
    Definition Self := scale_encode.error.ErrorKind.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_scale_encode_error_ErrorKind.
  
  Module Impl_core_convert_From_for_scale_encode_error_ErrorKind.
    Definition Self := scale_encode.error.ErrorKind.
    
    Parameter from : forall `{H : State.Trait},
        scale_encode.error.CustomError ->
        M (H := H) scale_encode.error.ErrorKind.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := scale_encode.error.CustomError) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_scale_encode_error_ErrorKind.
  
  Module Impl_core_fmt_Display_for_scale_encode_error_ErrorKind.
    Definition Self := scale_encode.error.ErrorKind.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Display.Trait Self := {
      core.fmt.Display.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Display_for_scale_encode_error_ErrorKind.
  
  Definition CustomError : Set := alloc.boxed.Box TraitObject.
  
  Module Kind.
    Inductive t : Set :=
    | Struct
    | Tuple
    | Variant
    | Array
    | BitSequence
    | Bool
    | Char
    | Str
    | Number.
  End Kind.
  Definition Kind := Kind.t.
  
  Module Impl_core_marker_Copy_for_scale_encode_error_Kind.
    Definition Self := scale_encode.error.Kind.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_scale_encode_error_Kind.
  
  Module Impl_core_clone_Clone_for_scale_encode_error_Kind.
    Definition Self := scale_encode.error.Kind.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) scale_encode.error.Kind.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_scale_encode_error_Kind.
  
  Module Impl_core_marker_StructuralPartialEq_for_scale_encode_error_Kind.
    Definition Self := scale_encode.error.Kind.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_scale_encode_error_Kind.
  
  Module Impl_core_cmp_PartialEq_for_scale_encode_error_Kind.
    Definition Self := scale_encode.error.Kind.
    
    Parameter eq : forall `{H : State.Trait},
        ref Self ->
        ref scale_encode.error.Kind ->
        M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_scale_encode_error_Kind.
  
  Module Impl_core_marker_StructuralEq_for_scale_encode_error_Kind.
    Definition Self := scale_encode.error.Kind.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_scale_encode_error_Kind.
  
  Module Impl_core_cmp_Eq_for_scale_encode_error_Kind.
    Definition Self := scale_encode.error.Kind.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
        ref Self ->
        M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_scale_encode_error_Kind.
  
  Module Impl_core_fmt_Debug_for_scale_encode_error_Kind.
    Definition Self := scale_encode.error.Kind.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_scale_encode_error_Kind.
End error.

Module context.
  Module Context.
    Unset Primitive Projections.
    Record t : Set := {
      path : alloc.vec.Vec scale_encode.error.context.Location;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_path : Notation.Dot "path" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Context.
  Definition Context : Set := Context.t.
  
  Module Impl_core_clone_Clone_for_scale_encode_error_context_Context.
    Definition Self := scale_encode.error.context.Context.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) scale_encode.error.context.Context.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_scale_encode_error_context_Context.
  
  Module Impl_core_default_Default_for_scale_encode_error_context_Context.
    Definition Self := scale_encode.error.context.Context.
    
    Parameter default : forall `{H : State.Trait},
        M (H := H) scale_encode.error.context.Context.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_scale_encode_error_context_Context.
  
  Module Impl_core_fmt_Debug_for_scale_encode_error_context_Context.
    Definition Self := scale_encode.error.context.Context.
    
    Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
      string -> alloc_vec_Vec_scale_encode_error_context_Location -> 
      M (H := H) core.fmt.Result.
    
    Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
      core.fmt.Formatter "debug_struct_field1_finish" := {
      Notation.double_colon := debug_struct_field1_finish; }.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_scale_encode_error_context_Context.
  
  Module Impl_scale_encode_error_context_Context_2.
    Definition Self := scale_encode.error.context.Context.
    
    Parameter new : forall `{H : State.Trait},
        M (H := H) scale_encode.error.context.Context.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Parameter push : forall `{H : State.Trait},
        mut_ref Self ->
        scale_encode.error.context.Location ->
        M (H := H) unit.
    
    Global Instance Method_push `{H : State.Trait} : Notation.Dot "push" := {
      Notation.dot := push;
    }.
    
    Parameter path : forall `{H : State.Trait},
        ref Self ->
        M (H := H) scale_encode.error.context.Path.
    
    Global Instance Method_path `{H : State.Trait} : Notation.Dot "path" := {
      Notation.dot := path;
    }.
  End Impl_scale_encode_error_context_Context_2.
  
  Module Path.
    Unset Primitive Projections.
    Record t : Set := {
      _ : alloc.borrow.Cow (alloc.vec.Vec scale_encode.error.context.Location);
    }.
    Global Set Primitive Projections.
  
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Path.
  Definition Path := Path.t.
  
  Module Impl_scale_encode_error_context_Path_2.
    Definition Self := scale_encode.error.context.Path.
    
    Parameter into_owned : forall `{H : State.Trait},
        Self ->
        M (H := H) scale_encode.error.context.Path.
    
    Global Instance Method_into_owned `{H : State.Trait} :
      Notation.Dot "into_owned" := {
      Notation.dot := into_owned;
    }.
    
    Parameter locations : forall `{H : State.Trait},
        ref Self ->
        M (H := H) OpaqueDef.
    
    Global Instance Method_locations `{H : State.Trait} :
      Notation.Dot "locations" := {
      Notation.dot := locations;
    }.
  End Impl_scale_encode_error_context_Path_2.
  
  Module Impl_core_fmt_Display_for_scale_encode_error_context_Path.
    Definition Self := scale_encode.error.context.Path.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Display.Trait Self := {
      core.fmt.Display.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Display_for_scale_encode_error_context_Path.
  
  Module Location.
    Unset Primitive Projections.
    Record t : Set := {
      inner : scale_encode.error.context.Loc;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_inner : Notation.Dot "inner" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Location.
  Definition Location : Set := Location.t.
  
  Module Impl_core_fmt_Debug_for_scale_encode_error_context_Location.
    Definition Self := scale_encode.error.context.Location.
    
    Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
      string -> scale_encode_error_context_Loc -> 
      M (H := H) core.fmt.Result.
    
    Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
      core.fmt.Formatter "debug_struct_field1_finish" := {
      Notation.double_colon := debug_struct_field1_finish; }.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_scale_encode_error_context_Location.
  
  Module Impl_core_clone_Clone_for_scale_encode_error_context_Location.
    Definition Self := scale_encode.error.context.Location.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) scale_encode.error.context.Location.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_scale_encode_error_context_Location.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Location.
    Definition Self := scale_encode.error.context.Location.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End
    Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Location.
  
  Module Impl_core_cmp_PartialEq_for_scale_encode_error_context_Location.
    Definition Self := scale_encode.error.context.Location.
    
    Parameter eq : forall `{H : State.Trait},
        ref Self ->
        ref scale_encode.error.context.Location ->
        M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_scale_encode_error_context_Location.
  
  Module Impl_core_marker_StructuralEq_for_scale_encode_error_context_Location.
    Definition Self := scale_encode.error.context.Location.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_scale_encode_error_context_Location.
  
  Module Impl_core_cmp_Eq_for_scale_encode_error_context_Location.
    Definition Self := scale_encode.error.context.Location.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
        ref Self ->
        M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_scale_encode_error_context_Location.
  
  Module Loc.
    Inductive t : Set :=
    | Field (_ : alloc.borrow.Cow str)
    | Index (_ : usize)
    | Variant (_ : alloc.borrow.Cow str).
  End Loc.
  Definition Loc := Loc.t.
  
  Module Impl_core_fmt_Debug_for_scale_encode_error_context_Loc.
    Definition Self := scale_encode.error.context.Loc.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_scale_encode_error_context_Loc.
  
  Module Impl_core_clone_Clone_for_scale_encode_error_context_Loc.
    Definition Self := scale_encode.error.context.Loc.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) scale_encode.error.context.Loc.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_scale_encode_error_context_Loc.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Loc.
    Definition Self := scale_encode.error.context.Loc.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Loc.
  
  Module Impl_core_cmp_PartialEq_for_scale_encode_error_context_Loc.
    Definition Self := scale_encode.error.context.Loc.
    
    Parameter eq : forall `{H : State.Trait},
        ref Self ->
        ref scale_encode.error.context.Loc ->
        M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_scale_encode_error_context_Loc.
  
  Module Impl_core_marker_StructuralEq_for_scale_encode_error_context_Loc.
    Definition Self := scale_encode.error.context.Loc.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_scale_encode_error_context_Loc.
  
  Module Impl_core_cmp_Eq_for_scale_encode_error_context_Loc.
    Definition Self := scale_encode.error.context.Loc.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
        ref Self ->
        M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_scale_encode_error_context_Loc.
  
  Module Impl_scale_encode_error_context_Location_2.
    Definition Self := scale_encode.error.context.Location.
    
    Parameter field : forall `{H : State.Trait},
        impl Into<Cow<'static, str>> ->
        M (H := H) Self.
    
    Global Instance AssociatedFunction_field `{H : State.Trait} :
      Notation.DoubleColon Self "field" := {
      Notation.double_colon := field;
    }.
    
    Parameter variant : forall `{H : State.Trait},
        impl Into<Cow<'static, str>> ->
        M (H := H) Self.
    
    Global Instance AssociatedFunction_variant `{H : State.Trait} :
      Notation.DoubleColon Self "variant" := {
      Notation.double_colon := variant;
    }.
    
    Parameter idx : forall `{H : State.Trait}, usize -> M (H := H) Self.
    
    Global Instance AssociatedFunction_idx `{H : State.Trait} :
      Notation.DoubleColon Self "idx" := {
      Notation.double_colon := idx;
    }.
  End Impl_scale_encode_error_context_Location_2.
End context.

Module Context.
  Unset Primitive Projections.
  Record t : Set := {
    path : alloc.vec.Vec scale_encode.error.context.Location;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_path : Notation.Dot "path" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Context.
Definition Context : Set := Context.t.

Module Impl_core_clone_Clone_for_scale_encode_error_context_Context.
  Definition Self := scale_encode.error.context.Context.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) scale_encode.error.context.Context.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_scale_encode_error_context_Context.

Module Impl_core_default_Default_for_scale_encode_error_context_Context.
  Definition Self := scale_encode.error.context.Context.
  
  Parameter default : forall `{H : State.Trait},
      M (H := H) scale_encode.error.context.Context.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_scale_encode_error_context_Context.

Module Impl_core_fmt_Debug_for_scale_encode_error_context_Context.
  Definition Self := scale_encode.error.context.Context.
  
  Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
    string -> alloc_vec_Vec_scale_encode_error_context_Location -> 
    M (H := H) core.fmt.Result.
  
  Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
    core.fmt.Formatter "debug_struct_field1_finish" := {
    Notation.double_colon := debug_struct_field1_finish; }.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_scale_encode_error_context_Context.

Module Impl_scale_encode_error_context_Context_3.
  Definition Self := scale_encode.error.context.Context.
  
  Parameter new : forall `{H : State.Trait},
      M (H := H) scale_encode.error.context.Context.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter push : forall `{H : State.Trait},
      mut_ref Self ->
      scale_encode.error.context.Location ->
      M (H := H) unit.
  
  Global Instance Method_push `{H : State.Trait} : Notation.Dot "push" := {
    Notation.dot := push;
  }.
  
  Parameter path : forall `{H : State.Trait},
      ref Self ->
      M (H := H) scale_encode.error.context.Path.
  
  Global Instance Method_path `{H : State.Trait} : Notation.Dot "path" := {
    Notation.dot := path;
  }.
End Impl_scale_encode_error_context_Context_3.

Module Path.
  Unset Primitive Projections.
  Record t : Set := {
    _ : alloc.borrow.Cow (alloc.vec.Vec scale_encode.error.context.Location);
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Path.
Definition Path := Path.t.

Module Impl_scale_encode_error_context_Path_3.
  Definition Self := scale_encode.error.context.Path.
  
  Parameter into_owned : forall `{H : State.Trait},
      Self ->
      M (H := H) scale_encode.error.context.Path.
  
  Global Instance Method_into_owned `{H : State.Trait} :
    Notation.Dot "into_owned" := {
    Notation.dot := into_owned;
  }.
  
  Parameter locations : forall `{H : State.Trait},
      ref Self ->
      M (H := H) OpaqueDef.
  
  Global Instance Method_locations `{H : State.Trait} :
    Notation.Dot "locations" := {
    Notation.dot := locations;
  }.
End Impl_scale_encode_error_context_Path_3.

Error OpaqueTy.

Module Impl_core_fmt_Display_for_scale_encode_error_context_Path.
  Definition Self := scale_encode.error.context.Path.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Display_for_scale_encode_error_context_Path.

Module Location.
  Unset Primitive Projections.
  Record t : Set := {
    inner : scale_encode.error.context.Loc;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_inner : Notation.Dot "inner" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Location.
Definition Location : Set := Location.t.

Module Impl_core_fmt_Debug_for_scale_encode_error_context_Location.
  Definition Self := scale_encode.error.context.Location.
  
  Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
    string -> scale_encode_error_context_Loc -> 
    M (H := H) core.fmt.Result.
  
  Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
    core.fmt.Formatter "debug_struct_field1_finish" := {
    Notation.double_colon := debug_struct_field1_finish; }.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_scale_encode_error_context_Location.

Module Impl_core_clone_Clone_for_scale_encode_error_context_Location.
  Definition Self := scale_encode.error.context.Location.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) scale_encode.error.context.Location.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_scale_encode_error_context_Location.

Module
  Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Location.
  Definition Self := scale_encode.error.context.Location.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End
  Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Location.

Module Impl_core_cmp_PartialEq_for_scale_encode_error_context_Location.
  Definition Self := scale_encode.error.context.Location.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref scale_encode.error.context.Location ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_scale_encode_error_context_Location.

Module Impl_core_marker_StructuralEq_for_scale_encode_error_context_Location.
  Definition Self := scale_encode.error.context.Location.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_scale_encode_error_context_Location.

Module Impl_core_cmp_Eq_for_scale_encode_error_context_Location.
  Definition Self := scale_encode.error.context.Location.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
      ref Self ->
      M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_scale_encode_error_context_Location.

Module Loc.
  Inductive t : Set :=
  | Field (_ : alloc.borrow.Cow str)
  | Index (_ : usize)
  | Variant (_ : alloc.borrow.Cow str).
End Loc.
Definition Loc := Loc.t.

Module Impl_core_fmt_Debug_for_scale_encode_error_context_Loc.
  Definition Self := scale_encode.error.context.Loc.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_scale_encode_error_context_Loc.

Module Impl_core_clone_Clone_for_scale_encode_error_context_Loc.
  Definition Self := scale_encode.error.context.Loc.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) scale_encode.error.context.Loc.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_scale_encode_error_context_Loc.

Module Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Loc.
  Definition Self := scale_encode.error.context.Loc.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_scale_encode_error_context_Loc.

Module Impl_core_cmp_PartialEq_for_scale_encode_error_context_Loc.
  Definition Self := scale_encode.error.context.Loc.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref scale_encode.error.context.Loc ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_scale_encode_error_context_Loc.

Module Impl_core_marker_StructuralEq_for_scale_encode_error_context_Loc.
  Definition Self := scale_encode.error.context.Loc.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_scale_encode_error_context_Loc.

Module Impl_core_cmp_Eq_for_scale_encode_error_context_Loc.
  Definition Self := scale_encode.error.context.Loc.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
      ref Self ->
      M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_scale_encode_error_context_Loc.

Module Impl_scale_encode_error_context_Location_3.
  Definition Self := scale_encode.error.context.Location.
  
  Parameter field : forall `{H : State.Trait},
      impl Into<Cow<'static, str>> ->
      M (H := H) Self.
  
  Global Instance AssociatedFunction_field `{H : State.Trait} :
    Notation.DoubleColon Self "field" := {
    Notation.double_colon := field;
  }.
  
  Parameter variant : forall `{H : State.Trait},
      impl Into<Cow<'static, str>> ->
      M (H := H) Self.
  
  Global Instance AssociatedFunction_variant `{H : State.Trait} :
    Notation.DoubleColon Self "variant" := {
    Notation.double_colon := variant;
  }.
  
  Parameter idx : forall `{H : State.Trait}, usize -> M (H := H) Self.
  
  Global Instance AssociatedFunction_idx `{H : State.Trait} :
    Notation.DoubleColon Self "idx" := {
    Notation.double_colon := idx;
  }.
End Impl_scale_encode_error_context_Location_3.

Module Error.
  Unset Primitive Projections.
  Record t : Set := {
    context : scale_encode.error.context.Context;
    kind : scale_encode.error.ErrorKind;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_context : Notation.Dot "context" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_kind : Notation.Dot "kind" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Error.
Definition Error : Set := Error.t.

Module Impl_core_fmt_Debug_for_scale_encode_error_Error.
  Definition Self := scale_encode.error.Error.
  
  Parameter debug_struct_field2_finish : core.fmt.Formatter -> string -> 
    string -> scale_encode_error_context_Context -> 
    string -> scale_encode_error_ErrorKind -> 
    M (H := H) core.fmt.Result.
  
  Global Instance Deb_debug_struct_field2_finish : Notation.DoubleColon
    core.fmt.Formatter "debug_struct_field2_finish" := {
    Notation.double_colon := debug_struct_field2_finish; }.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_scale_encode_error_Error.

Module Impl_scale_encode_error_Error_2.
  Definition Self := scale_encode.error.Error.
  
  Parameter new : forall `{H : State.Trait},
      scale_encode.error.ErrorKind ->
      M (H := H) scale_encode.error.Error.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter custom : forall `{H : State.Trait},
      impl Into<CustomError> ->
      M (H := H) scale_encode.error.Error.
  
  Global Instance AssociatedFunction_custom `{H : State.Trait} :
    Notation.DoubleColon Self "custom" := {
    Notation.double_colon := custom;
  }.
  
  Parameter kind : forall `{H : State.Trait},
      ref Self ->
      M (H := H) (ref scale_encode.error.ErrorKind).
  
  Global Instance Method_kind `{H : State.Trait} : Notation.Dot "kind" := {
    Notation.dot := kind;
  }.
  
  Parameter context : forall `{H : State.Trait},
      ref Self ->
      M (H := H) (ref scale_encode.error.context.Context).
  
  Global Instance Method_context `{H : State.Trait} :
    Notation.Dot "context" := {
    Notation.dot := context;
  }.
  
  Parameter at : forall `{H : State.Trait},
      Self ->
      scale_encode.error.context.Location ->
      M (H := H) Self.
  
  Global Instance Method_at `{H : State.Trait} : Notation.Dot "at" := {
    Notation.dot := at;
  }.
  
  Parameter at_idx : forall `{H : State.Trait},
      Self ->
      usize ->
      M (H := H) Self.
  
  Global Instance Method_at_idx `{H : State.Trait} : Notation.Dot "at_idx" := {
    Notation.dot := at_idx;
  }.
  
  Parameter at_field : forall `{H : State.Trait},
      Self ->
      impl Into<Cow<'static, str>> ->
      M (H := H) Self.
  
  Global Instance Method_at_field `{H : State.Trait} :
    Notation.Dot "at_field" := {
    Notation.dot := at_field;
  }.
  
  Parameter at_variant : forall `{H : State.Trait},
      Self ->
      impl Into<Cow<'static, str>> ->
      M (H := H) Self.
  
  Global Instance Method_at_variant `{H : State.Trait} :
    Notation.Dot "at_variant" := {
    Notation.dot := at_variant;
  }.
End Impl_scale_encode_error_Error_2.

Module Impl_core_fmt_Display_for_scale_encode_error_Error.
  Definition Self := scale_encode.error.Error.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Display_for_scale_encode_error_Error.

Module ErrorKind.
  Module WrongShape.
    Unset Primitive Projections.
    Record t : Set := {
      actual : scale_encode.error.Kind;
      expected : u32;
    }.
    Global Set Primitive Projections.
  End WrongShape.
  
  Module WrongLength.
    Unset Primitive Projections.
    Record t : Set := {
      actual_len : usize;
      expected_len : usize;
    }.
    Global Set Primitive Projections.
  End WrongLength.
  
  Module NumberOutOfRange.
    Unset Primitive Projections.
    Record t : Set := {
      value : alloc.string.String;
      expected : u32;
    }.
    Global Set Primitive Projections.
  End NumberOutOfRange.
  
  Module CannotFindVariant.
    Unset Primitive Projections.
    Record t : Set := {
      name : alloc.string.String;
      expected : u32;
    }.
    Global Set Primitive Projections.
  End CannotFindVariant.
  
  Module CannotFindField.
    Unset Primitive Projections.
    Record t : Set := {
      name : alloc.string.String;
    }.
    Global Set Primitive Projections.
  End CannotFindField.
  
  Inductive t : Set :=
  | TypeNotFound (_ : u32)
  | WrongShape (_ : WrongShape.t)
  | WrongLength (_ : WrongLength.t)
  | NumberOutOfRange (_ : NumberOutOfRange.t)
  | CannotFindVariant (_ : CannotFindVariant.t)
  | CannotFindField (_ : CannotFindField.t)
  | Custom (_ : scale_encode.error.CustomError).
End ErrorKind.
Definition ErrorKind := ErrorKind.t.

Module Impl_core_fmt_Debug_for_scale_encode_error_ErrorKind.
  Definition Self := scale_encode.error.ErrorKind.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_scale_encode_error_ErrorKind.

Module Impl_core_convert_From_for_scale_encode_error_ErrorKind.
  Definition Self := scale_encode.error.ErrorKind.
  
  Parameter from : forall `{H : State.Trait},
      scale_encode.error.CustomError ->
      M (H := H) scale_encode.error.ErrorKind.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := scale_encode.error.CustomError) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_scale_encode_error_ErrorKind.

Module Impl_core_fmt_Display_for_scale_encode_error_ErrorKind.
  Definition Self := scale_encode.error.ErrorKind.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Display_for_scale_encode_error_ErrorKind.

Definition CustomError : Set := alloc.boxed.Box TraitObject.

Module Kind.
  Inductive t : Set :=
  | Struct
  | Tuple
  | Variant
  | Array
  | BitSequence
  | Bool
  | Char
  | Str
  | Number.
End Kind.
Definition Kind := Kind.t.

Module Impl_core_marker_Copy_for_scale_encode_error_Kind.
  Definition Self := scale_encode.error.Kind.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_scale_encode_error_Kind.

Module Impl_core_clone_Clone_for_scale_encode_error_Kind.
  Definition Self := scale_encode.error.Kind.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) scale_encode.error.Kind.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_scale_encode_error_Kind.

Module Impl_core_marker_StructuralPartialEq_for_scale_encode_error_Kind.
  Definition Self := scale_encode.error.Kind.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_scale_encode_error_Kind.

Module Impl_core_cmp_PartialEq_for_scale_encode_error_Kind.
  Definition Self := scale_encode.error.Kind.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref scale_encode.error.Kind ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_scale_encode_error_Kind.

Module Impl_core_marker_StructuralEq_for_scale_encode_error_Kind.
  Definition Self := scale_encode.error.Kind.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_scale_encode_error_Kind.

Module Impl_core_cmp_Eq_for_scale_encode_error_Kind.
  Definition Self := scale_encode.error.Kind.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
      ref Self ->
      M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_scale_encode_error_Kind.

Module Impl_core_fmt_Debug_for_scale_encode_error_Kind.
  Definition Self := scale_encode.error.Kind.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_scale_encode_error_Kind.

Module ext.
  
End ext.

Module EncodeAsType.
  Class Trait (Self : Set) : Set := {
    encode_as_type_to
      `{H : State.Trait}
      :
      (ref Self) ->
      u32 ->
      (ref scale_info.portable.PortableRegistry) ->
      (mut_ref (alloc.vec.Vec u8)) ->
      (M (H := H) (core.result.Result unit scale_encode.error.Error));
  }.
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} `(Trait)
    : Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  Global Instance Method_encode_as_type `{H : State.Trait} `(Trait)
    : Notation.Dot "encode_as_type" := {
    Notation.dot
        (self : ref Self)
        (type_id : u32)
        (types : ref scale_info.portable.PortableRegistry) :=
      (let* out := alloc.vec.Vec::["new"] in
      let* _ :=
        let* α0 := self.["encode_as_type_to"] type_id types (addr_of out) in
        let* α1 := α0.["branch"] in
        match α1 with
        | LanguageItem.Break residual =>
          let* α0 := residual.["from_residual"] in
          Return α0
        | LanguageItem.Continue val => Pure val
        end in
      Pure (core.result.Result.Ok out)
      :
        M (H := H)
          (core.result.Result (alloc.vec.Vec u8) scale_encode.error.Error));
  }.
End EncodeAsType.

Module EncodeAsFields.
  Class Trait (Self : Set) : Set := {
    encode_as_fields_to
      `{H : State.Trait}
      :
      (ref Self) ->
      (mut_ref TraitObject) ->
      (ref scale_info.portable.PortableRegistry) ->
      (mut_ref (alloc.vec.Vec u8)) ->
      (M (H := H) (core.result.Result unit scale_encode.error.Error));
  }.
  
  Global Instance Method_encode_as_fields_to `{H : State.Trait} `(Trait)
    : Notation.Dot "encode_as_fields_to" := {
    Notation.dot := encode_as_fields_to;
  }.
  Global Instance Method_encode_as_fields `{H : State.Trait} `(Trait)
    : Notation.Dot "encode_as_fields" := {
    Notation.dot
        (self : ref Self)
        (fields : mut_ref TraitObject)
        (types : ref scale_info.portable.PortableRegistry) :=
      (let* out := alloc.vec.Vec::["new"] in
      let* _ :=
        let* α0 := self.["encode_as_fields_to"] fields types (addr_of out) in
        let* α1 := α0.["branch"] in
        match α1 with
        | LanguageItem.Break residual =>
          let* α0 := residual.["from_residual"] in
          Return α0
        | LanguageItem.Continue val => Pure val
        end in
      Pure (core.result.Result.Ok out)
      :
        M (H := H)
          (core.result.Result (alloc.vec.Vec u8) scale_encode.error.Error));
  }.
End EncodeAsFields.

Module Field.
  Unset Primitive Projections.
  Record t : Set := {
    name : core.option.Option (ref str);
    id : u32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_id : Notation.Dot "id" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Field.
Definition Field : Set := Field.t.

Module Impl_core_fmt_Debug_for_scale_encode_Field.
  Definition Self := scale_encode.Field.
  
  Parameter debug_struct_field2_finish : core.fmt.Formatter -> string -> 
    string -> core_option_Option_StaticRef_str -> 
    string -> u32 -> 
    M (H := H) core.fmt.Result.
  
  Global Instance Deb_debug_struct_field2_finish : Notation.DoubleColon
    core.fmt.Formatter "debug_struct_field2_finish" := {
    Notation.double_colon := debug_struct_field2_finish; }.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_scale_encode_Field.

Module Impl_core_clone_Clone_for_scale_encode_Field.
  Definition Self := scale_encode.Field.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) scale_encode.Field.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_scale_encode_Field.

Module Impl_core_marker_Copy_for_scale_encode_Field.
  Definition Self := scale_encode.Field.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_scale_encode_Field.

Module Impl_scale_encode_Field.
  Definition Self := scale_encode.Field.
  
  Parameter new : forall `{H : State.Trait},
      u32 ->
      core.option.Option (ref str) ->
      M (H := H) Self.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter unnamed : forall `{H : State.Trait}, u32 -> M (H := H) Self.
  
  Global Instance AssociatedFunction_unnamed `{H : State.Trait} :
    Notation.DoubleColon Self "unnamed" := {
    Notation.double_colon := unnamed;
  }.
  
  Parameter named : forall `{H : State.Trait},
      u32 ->
      ref str ->
      M (H := H) Self.
  
  Global Instance AssociatedFunction_named `{H : State.Trait} :
    Notation.DoubleColon Self "named" := {
    Notation.double_colon := named;
  }.
  
  Parameter name : forall `{H : State.Trait},
      ref Self ->
      M (H := H) (core.option.Option (ref str)).
  
  Global Instance Method_name `{H : State.Trait} : Notation.Dot "name" := {
    Notation.dot := name;
  }.
  
  Parameter id : forall `{H : State.Trait}, ref Self -> M (H := H) u32.
  
  Global Instance Method_id `{H : State.Trait} : Notation.Dot "id" := {
    Notation.dot := id;
  }.
End Impl_scale_encode_Field.

Module FieldIter.
  Unset Primitive Projections.
  Class Trait (Self : Set) {'a : Set} : Set := {
  }.
  Global Set Primitive Projections.
End FieldIter.

Module Impl_scale_encode_FieldIter_for_T.
Section Impl_scale_encode_FieldIter_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Global Instance I : scale_encode.FieldIter.Trait Self :=
    scale_encode.FieldIter.Build_Trait _.
End Impl_scale_encode_FieldIter_for_T.
End Impl_scale_encode_FieldIter_for_T.
