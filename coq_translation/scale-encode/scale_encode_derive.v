(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition ATTR_NAME `{H : State.Trait} : ref str :=
  run (Pure "encode_as_type").

Parameter derive_macro : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter derive_with_attrs : forall `{H : State.Trait},
    scale_encode_derive.TopLevelAttrs ->
    syn.derive.DeriveInput ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_enum_impl : forall `{H : State.Trait},
    scale_encode_derive.TopLevelAttrs ->
    ref syn.derive.DeriveInput ->
    ref syn.derive.DataEnum ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_struct_impl : forall `{H : State.Trait},
    scale_encode_derive.TopLevelAttrs ->
    ref syn.derive.DeriveInput ->
    ref syn.derive.DataStruct ->
    M (H := H) proc_macro2.TokenStream.

Parameter handle_generics : forall `{H : State.Trait},
    ref scale_encode_derive.TopLevelAttrs ->
    ref syn.generics.Generics ->
    M (H := H)
      (syn.generics.ImplGenerics *
        syn.generics.TypeGenerics *
        syn.generics.WhereClause).

Parameter fields_to_matcher_and_composite : forall `{H : State.Trait},
    ref syn.path.Path ->
    ref syn.data.Fields ->
    M (H := H) (proc_macro2.TokenStream * proc_macro2.TokenStream).

Module TopLevelAttrs.
  Unset Primitive Projections.
  Record t : Set := {
    crate_path : syn.path.Path;
    trait_bounds
      :
      core.option.Option
        (syn.punctuated.Punctuated syn.generics.WherePredicate syn.token.Comma);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_crate_path : Notation.Dot "crate_path" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_trait_bounds : Notation.Dot "trait_bounds" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End TopLevelAttrs.
Definition TopLevelAttrs : Set := TopLevelAttrs.t.

Module Impl_scale_encode_derive_TopLevelAttrs.
  Definition Self := scale_encode_derive.TopLevelAttrs.
  
  Parameter parse : forall `{H : State.Trait},
      ref Slice ->
      M (H := H) (darling_core.error.Result Self).
  
  Global Instance AssociatedFunction_parse `{H : State.Trait} :
    Notation.DoubleColon Self "parse" := {
    Notation.double_colon := parse;
  }.
End Impl_scale_encode_derive_TopLevelAttrs.

Module TopLevelAttrsInner.
  Unset Primitive Projections.
  Record t : Set := {
    crate_path : core.option.Option syn.path.Path;
    trait_bounds
      :
      core.option.Option
        (syn.punctuated.Punctuated syn.generics.WherePredicate syn.token.Comma);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_crate_path : Notation.Dot "crate_path" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_trait_bounds : Notation.Dot "trait_bounds" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End TopLevelAttrsInner.
Definition TopLevelAttrsInner : Set := TopLevelAttrsInner.t.

Module
  Impl_darling_core_from_meta_FromMeta_for_scale_encode_derive_parse_TopLevelAttrsInner.
  Definition Self := scale_encode_derive.parse.TopLevelAttrsInner.
  
  Parameter from_list : forall `{H : State.Trait},
      ref Slice ->
      M (H := H) (darling_core.error.Result Self).
  
  Global Instance AssociatedFunction_from_list `{H : State.Trait} :
    Notation.DoubleColon Self "from_list" := {
    Notation.double_colon := from_list;
  }.
  
  Global Instance I : darling_core.from_meta.FromMeta.Trait Self := {
  }.
End
  Impl_darling_core_from_meta_FromMeta_for_scale_encode_derive_parse_TopLevelAttrsInner.

Definition _DECLS `{H : State.Trait} : ref Slice :=
  run
    (let* α0 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "EncodeAsType"
        (addr_of [ "encode_as_type" ])
        scale_encode_derive.derive_macro in
    Pure (addr_of [ α0 ])).
