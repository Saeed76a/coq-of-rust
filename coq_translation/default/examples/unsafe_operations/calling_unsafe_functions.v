(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let some_vector = vec![1, 2, 3, 4];

    let pointer = some_vector.as_ptr();
    let length = some_vector.len();

    unsafe {
        let my_slice: &[u32] = slice::from_raw_parts(pointer, length);

        assert_eq!(some_vector.as_slice(), my_slice);
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* some_vector :
        ltac:(refine (M.Val (alloc.vec.Vec.t u32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val u32.t)) := M.alloc 2 in
      let* α2 : ltac:(refine (M.Val u32.t)) := M.alloc 3 in
      let* α3 : ltac:(refine (M.Val u32.t)) := M.alloc 4 in
      let* α4 : ltac:(refine (M.Val (array u32.t))) :=
        M.alloc [ α0; α1; α2; α3 ] in
      let* α5 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (array u32.t) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α4 in
      let* α6 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (slice u32.t) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α5 in
      (slice u32.t)::["into_vec"] α6 in
    let* pointer : ltac:(refine (M.Val (ref u32.t))) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref (alloc.vec.Vec.t u32.t alloc.alloc.Global.t)))) :=
        borrow some_vector in
      (alloc.vec.Vec.t u32.t alloc.alloc.Global.t)::["as_ptr"] α0 in
    let* length : ltac:(refine (M.Val usize.t)) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref (alloc.vec.Vec.t u32.t alloc.alloc.Global.t)))) :=
        borrow some_vector in
      (alloc.vec.Vec.t u32.t alloc.alloc.Global.t)::["len"] α0 in
    let* my_slice : ltac:(refine (M.Val (ref (slice u32.t)))) :=
      let* α0 : ltac:(refine (M.Val (ref (slice u32.t)))) :=
        core.slice.raw.from_raw_parts pointer length in
      let* α1 : ltac:(refine (M.Val (slice u32.t))) := deref α0 in
      borrow α1 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref (alloc.vec.Vec.t u32.t alloc.alloc.Global.t)))) :=
        borrow some_vector in
      let* α1 : ltac:(refine (M.Val (ref (slice u32.t)))) :=
        (alloc.vec.Vec.t u32.t alloc.alloc.Global.t)::["as_slice"] α0 in
      let* α2 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) := borrow α1 in
      let* α3 := M.read α2 in
      let* α4 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) :=
        borrow my_slice in
      let* α5 := M.read α4 in
      let* α6 :
          ltac:(refine
            (M.Val ((ref (ref (slice u32.t))) * (ref (ref (slice u32.t)))))) :=
        M.alloc (α3, α5) in
      let* α7 := M.read α6 in
      match α7 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (ref (slice u32.t)))) := deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice u32.t)))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := ref (slice u32.t))
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (ref (slice u32.t)))) :=
              deref left_val in
            let* α1 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice u32.t)))) :=
              deref right_val in
            let* α3 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    M.alloc tt).
