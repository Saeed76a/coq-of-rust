(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition add (a : M.Val i32.t) (b : M.Val i32.t) : M (M.Val i32.t) :=
  M.function_body (BinOp.add a b).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition bad_add (a : M.Val i32.t) (b : M.Val i32.t) : M (M.Val i32.t) :=
  M.function_body (BinOp.sub a b).

Module tests.
  Definition test_add : M (M.Val unit) :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
        let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
        let* α2 : ltac:(refine (M.Val i32.t)) := unit_testing.add α0 α1 in
        let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow α2 in
        let* α4 := M.read α3 in
        let* α5 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
        let* α6 : ltac:(refine (M.Val (ref i32.t))) := borrow α5 in
        let* α7 := M.read α6 in
        let* α8 : ltac:(refine (M.Val ((ref i32.t) * (ref i32.t)))) :=
          M.alloc (α4, α7) in
        let* α9 := M.read α8 in
        match α9 with
        | (left_val, right_val) =>
          let* right_val := M.alloc right_val in
          let* left_val := M.alloc left_val in
          let* α0 : ltac:(refine (M.Val i32.t)) := deref left_val in
          let* α1 : ltac:(refine (M.Val i32.t)) := deref right_val in
          let* α2 : ltac:(refine (M.Val bool.t)) := BinOp.eq α0 α1 in
          let* α3 : ltac:(refine (M.Val bool.t)) := UnOp.not α2 in
          let* α4 : ltac:(refine (M.Val bool.t)) := use α3 in
          let* α5 := M.read α4 in
          if (α5 : bool) then
            let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
              M.alloc core.panicking.AssertKind.Eq in
            let* _ : ltac:(refine (M.Val never.t)) :=
              let* α0 : ltac:(refine (M.Val i32.t)) := deref left_val in
              let* α1 : ltac:(refine (M.Val (ref i32.t))) := borrow α0 in
              let* α2 : ltac:(refine (M.Val i32.t)) := deref right_val in
              let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow α2 in
              let* α4 :
                  ltac:(refine
                    (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
                M.alloc core.option.Option.None in
              core.panicking.assert_failed kind α1 α3 α4 in
            let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
            never_to_any α0
          else
            M.alloc tt
        end in
      M.alloc tt).
  
  Definition test_bad_add : M (M.Val unit) :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
        let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
        let* α2 : ltac:(refine (M.Val i32.t)) := unit_testing.bad_add α0 α1 in
        let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow α2 in
        let* α4 := M.read α3 in
        let* α5 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
        let* α6 : ltac:(refine (M.Val (ref i32.t))) := borrow α5 in
        let* α7 := M.read α6 in
        let* α8 : ltac:(refine (M.Val ((ref i32.t) * (ref i32.t)))) :=
          M.alloc (α4, α7) in
        let* α9 := M.read α8 in
        match α9 with
        | (left_val, right_val) =>
          let* right_val := M.alloc right_val in
          let* left_val := M.alloc left_val in
          let* α0 : ltac:(refine (M.Val i32.t)) := deref left_val in
          let* α1 : ltac:(refine (M.Val i32.t)) := deref right_val in
          let* α2 : ltac:(refine (M.Val bool.t)) := BinOp.eq α0 α1 in
          let* α3 : ltac:(refine (M.Val bool.t)) := UnOp.not α2 in
          let* α4 : ltac:(refine (M.Val bool.t)) := use α3 in
          let* α5 := M.read α4 in
          if (α5 : bool) then
            let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
              M.alloc core.panicking.AssertKind.Eq in
            let* _ : ltac:(refine (M.Val never.t)) :=
              let* α0 : ltac:(refine (M.Val i32.t)) := deref left_val in
              let* α1 : ltac:(refine (M.Val (ref i32.t))) := borrow α0 in
              let* α2 : ltac:(refine (M.Val i32.t)) := deref right_val in
              let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow α2 in
              let* α4 :
                  ltac:(refine
                    (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
                M.alloc core.option.Option.None in
              core.panicking.assert_failed kind α1 α3 α4 in
            let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
            never_to_any α0
          else
            M.alloc tt
        end in
      M.alloc tt).
End tests.

Definition test_add : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α2 : ltac:(refine (M.Val i32.t)) := unit_testing.add α0 α1 in
      let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α6 : ltac:(refine (M.Val (ref i32.t))) := borrow α5 in
      let* α7 := M.read α6 in
      let* α8 : ltac:(refine (M.Val ((ref i32.t) * (ref i32.t)))) :=
        M.alloc (α4, α7) in
      let* α9 := M.read α8 in
      match α9 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val i32.t)) := deref left_val in
        let* α1 : ltac:(refine (M.Val i32.t)) := deref right_val in
        let* α2 : ltac:(refine (M.Val bool.t)) := BinOp.eq α0 α1 in
        let* α3 : ltac:(refine (M.Val bool.t)) := UnOp.not α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) := use α3 in
        let* α5 := M.read α4 in
        if (α5 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val i32.t)) := deref left_val in
            let* α1 : ltac:(refine (M.Val (ref i32.t))) := borrow α0 in
            let* α2 : ltac:(refine (M.Val i32.t)) := deref right_val in
            let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    M.alloc tt).

Definition test_bad_add : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α2 : ltac:(refine (M.Val i32.t)) := unit_testing.bad_add α0 α1 in
      let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α6 : ltac:(refine (M.Val (ref i32.t))) := borrow α5 in
      let* α7 := M.read α6 in
      let* α8 : ltac:(refine (M.Val ((ref i32.t) * (ref i32.t)))) :=
        M.alloc (α4, α7) in
      let* α9 := M.read α8 in
      match α9 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val i32.t)) := deref left_val in
        let* α1 : ltac:(refine (M.Val i32.t)) := deref right_val in
        let* α2 : ltac:(refine (M.Val bool.t)) := BinOp.eq α0 α1 in
        let* α3 : ltac:(refine (M.Val bool.t)) := UnOp.not α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) := use α3 in
        let* α5 := M.read α4 in
        if (α5 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val i32.t)) := deref left_val in
            let* α1 : ltac:(refine (M.Val (ref i32.t))) := borrow α0 in
            let* α2 : ltac:(refine (M.Val i32.t)) := deref right_val in
            let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    M.alloc tt).
