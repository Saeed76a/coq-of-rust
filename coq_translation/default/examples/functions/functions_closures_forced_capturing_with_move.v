(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // `Vec` has non-copy semantics.
    let haystack = vec![1, 2, 3];

    let contains = move |needle| haystack.contains(needle);

    println!("{}", contains(&1));
    println!("{}", contains(&4));

    // println!("There're {} elements in vec", haystack.len());
    // ^ Uncommenting above line will result in compile-time error
    // because borrow checker doesn't allow re-using variable after it
    // has been moved.

    // Removing `move` from closure's signature will cause closure
    // to borrow _haystack_ variable immutably, hence _haystack_ is still
    // available and uncommenting above line will not cause an error.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* haystack :
        ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α3 : ltac:(refine (M.Val (array i32.t))) := M.alloc [ α0; α1; α2 ] in
      let* α4 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α4 in
      (slice i32.t)::["into_vec"] α5 in
    let contains :=
      let* α0 :
          ltac:(refine
            (M.Val (ref (alloc.vec.Vec.t i32.t alloc.alloc.Global.t)))) :=
        borrow haystack in
      let* α1 : ltac:(refine (M.Val (ref (slice i32.t)))) :=
        (core.ops.deref.Deref.deref
            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine (M.Val (slice i32.t))) := deref α1 in
      let* α3 : ltac:(refine (M.Val (ref (slice i32.t)))) := borrow α2 in
      (slice i32.t)::["contains"] α3 needle in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref type not implemented))) :=
          borrow contains in
        let* α4 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
        let* α5 : ltac:(refine (M.Val (ref i32.t))) := borrow α4 in
        let* α6 := M.read α5 in
        let* α7 : ltac:(refine (M.Val (ref i32.t))) := M.alloc (α6) in
        let* α8 : ltac:(refine (M.Val bool.t)) :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α3
            α7 in
        let* α9 : ltac:(refine (M.Val (ref bool.t))) := borrow α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α10 ] in
        let* α12 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α11 in
        let* α13 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref type not implemented))) :=
          borrow contains in
        let* α4 : ltac:(refine (M.Val i32.t)) := M.alloc 4 in
        let* α5 : ltac:(refine (M.Val (ref i32.t))) := borrow α4 in
        let* α6 := M.read α5 in
        let* α7 : ltac:(refine (M.Val (ref i32.t))) := M.alloc (α6) in
        let* α8 : ltac:(refine (M.Val bool.t)) :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α3
            α7 in
        let* α9 : ltac:(refine (M.Val (ref bool.t))) := borrow α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α10 ] in
        let* α12 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α11 in
        let* α13 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    M.alloc tt).
