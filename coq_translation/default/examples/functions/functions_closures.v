(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* outer_var : ltac:(refine i32) := M.alloc 42 in
    let closure_annotated := BinOp.add i outer_var in
    let closure_inferred := BinOp.add i outer_var in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "closure_annotated: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref type not implemented)) :=
          borrow closure_annotated in
        let* α6 : ltac:(refine i32) := M.alloc 1 in
        let* α7 : ltac:(refine (M.Val (i32))) := M.alloc (α6) in
        let* α8 : ltac:(refine i32) :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α5
            α7 in
        let* α9 : ltac:(refine (ref i32)) := borrow α8 in
        let* α10 : ltac:(refine i32) := deref α9 in
        let* α11 : ltac:(refine (ref i32)) := borrow α10 in
        let* α12 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α11 in
        let* α13 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α12 ] in
        let* α14 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α13 in
        let* α15 : ltac:(refine (array core.fmt.rt.Argument)) := deref α14 in
        let* α16 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α15 in
        let* α17 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α17 in
        std.io.stdio._print α18 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "closure_inferred: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref type not implemented)) :=
          borrow closure_inferred in
        let* α6 : ltac:(refine i32) := M.alloc 1 in
        let* α7 : ltac:(refine (M.Val (i32))) := M.alloc (α6) in
        let* α8 : ltac:(refine i32) :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α5
            α7 in
        let* α9 : ltac:(refine (ref i32)) := borrow α8 in
        let* α10 : ltac:(refine i32) := deref α9 in
        let* α11 : ltac:(refine (ref i32)) := borrow α10 in
        let* α12 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α11 in
        let* α13 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α12 ] in
        let* α14 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α13 in
        let* α15 : ltac:(refine (array core.fmt.rt.Argument)) := deref α14 in
        let* α16 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α15 in
        let* α17 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α17 in
        std.io.stdio._print α18 in
      M.alloc tt in
    let one := M.alloc 1 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "closure returning one: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref type not implemented)) := borrow one in
        let* α6 : ltac:(refine unit) := M.alloc tt in
        let* α7 : ltac:(refine i32) :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α5
            α6 in
        let* α8 : ltac:(refine (ref i32)) := borrow α7 in
        let* α9 : ltac:(refine i32) := deref α8 in
        let* α10 : ltac:(refine (ref i32)) := borrow α9 in
        let* α11 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α10 in
        let* α12 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α11 ] in
        let* α13 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α12 in
        let* α14 : ltac:(refine (array core.fmt.rt.Argument)) := deref α13 in
        let* α15 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α14 in
        let* α16 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α15 in
        let* α17 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α16 in
        std.io.stdio._print α17 in
      M.alloc tt in
    M.alloc tt).
