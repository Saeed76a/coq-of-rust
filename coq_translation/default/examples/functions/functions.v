(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // We can use this function here, and define it somewhere later
    fizzbuzz_to(100);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 100 in
      functions.fizzbuzz_to α0 in
    M.alloc tt).

(*
fn is_divisible_by(lhs: u32, rhs: u32) -> bool {
    // Corner case, early return
    if rhs == 0 {
        return false;
    }

    // This is an expression, the `return` keyword is not necessary here
    lhs % rhs == 0
}
*)
Definition is_divisible_by
    (lhs : M.Val u32.t)
    (rhs : M.Val u32.t)
    : M (M.Val bool.t) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 0 in
      let* α1 : ltac:(refine (M.Val bool.t)) := BinOp.eq rhs α0 in
      let* α2 : ltac:(refine (M.Val bool.t)) := use α1 in
      let* α3 := M.read α2 in
      if (α3 : bool) then
        let* _ : ltac:(refine (M.Val never.t)) :=
          let* α0 : ltac:(refine (M.Val bool.t)) := M.alloc false in
          M.return_ α0 in
        let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
        never_to_any α0
      else
        M.alloc tt in
    let* α0 : ltac:(refine (M.Val u32.t)) := BinOp.rem lhs rhs in
    let* α1 : ltac:(refine (M.Val u32.t)) := M.alloc 0 in
    BinOp.eq α0 α1).

(*
fn fizzbuzz(n: u32) -> () {
    if is_divisible_by(n, 15) {
        println!("fizzbuzz");
    } else if is_divisible_by(n, 3) {
        println!("fizz");
    } else if is_divisible_by(n, 5) {
        println!("buzz");
    } else {
        println!("{}", n);
    }
}
*)
Definition fizzbuzz (n : M.Val u32.t) : M (M.Val unit) :=
  M.function_body
    (let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 15 in
    let* α1 : ltac:(refine (M.Val bool.t)) := functions.is_divisible_by n α0 in
    let* α2 : ltac:(refine (M.Val bool.t)) := use α1 in
    let* α3 := M.read α2 in
    if (α3 : bool) then
      let* _ : ltac:(refine (M.Val unit)) :=
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
            M.alloc [ mk_str "fizzbuzz
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_const"] α2 in
          std.io.stdio._print α3 in
        M.alloc tt in
      M.alloc tt
    else
      let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 3 in
      let* α1 : ltac:(refine (M.Val bool.t)) :=
        functions.is_divisible_by n α0 in
      let* α2 : ltac:(refine (M.Val bool.t)) := use α1 in
      let* α3 := M.read α2 in
      if (α3 : bool) then
        let* _ : ltac:(refine (M.Val unit)) :=
          let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
              M.alloc [ mk_str "fizz
" ] in
            let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
              core.fmt.Arguments.t::["new_const"] α2 in
            std.io.stdio._print α3 in
          M.alloc tt in
        M.alloc tt
      else
        let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 5 in
        let* α1 : ltac:(refine (M.Val bool.t)) :=
          functions.is_divisible_by n α0 in
        let* α2 : ltac:(refine (M.Val bool.t)) := use α1 in
        let* α3 := M.read α2 in
        if (α3 : bool) then
          let* _ : ltac:(refine (M.Val unit)) :=
            let* _ : ltac:(refine (M.Val unit)) :=
              let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
                M.alloc [ mk_str "buzz
" ] in
              let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
                borrow α0 in
              let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                core.fmt.Arguments.t::["new_const"] α2 in
              std.io.stdio._print α3 in
            M.alloc tt in
          M.alloc tt
        else
          let* _ : ltac:(refine (M.Val unit)) :=
            let* _ : ltac:(refine (M.Val unit)) :=
              let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
                M.alloc [ mk_str ""; mk_str "
" ] in
              let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
                borrow α0 in
              let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : ltac:(refine (M.Val (ref u32.t))) := borrow n in
              let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                core.fmt.rt.Argument.t::["new_display"] α3 in
              let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
                M.alloc [ α4 ] in
              let* α6 :
                  ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
                borrow α5 in
              let* α7 :
                  ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
                pointer_coercion "Unsize" α6 in
              let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                core.fmt.Arguments.t::["new_v1"] α2 α7 in
              std.io.stdio._print α8 in
            M.alloc tt in
          M.alloc tt).

(*
fn fizzbuzz_to(n: u32) {
    for n in 1..=n {
        fizzbuzz(n);
    }
}
*)
Definition fizzbuzz_to (n : M.Val u32.t) : M (M.Val unit) :=
  M.function_body
    (let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
    let* α1 : ltac:(refine (M.Val (core.ops.range.RangeInclusive.t u32.t))) :=
      (core.ops.range.RangeInclusive.t u32.t)::["new"] α0 n in
    let* α2 : ltac:(refine (M.Val (core.ops.range.RangeInclusive.t u32.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.RangeInclusive.t u32.t)
          (Trait := ltac:(refine _)))
        α1 in
    let* α3 := M.read α2 in
    let* α4 : ltac:(refine (M.Val unit)) :=
      match α3 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 :
                ltac:(refine
                  (M.Val (mut_ref (core.ops.range.RangeInclusive.t u32.t)))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (M.Val (core.option.Option.t u32.t))) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.RangeInclusive.t u32.t)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine (M.Val never.t)) := Break in
              never_to_any α0
            | core.option.Option.Some n =>
              let* n := M.alloc n in
              let* _ : ltac:(refine (M.Val unit)) := functions.fizzbuzz n in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α4).
