(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  SomeType.
Section SomeType.
  Record t : Set := {
    x0 : u32.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End SomeType.
End SomeType.

Module  OtherType.
Section OtherType.
  Record t : Set := {
    x0 : bool.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End OtherType.
End OtherType.

Module  Impl_functions_order_SomeType_t.
Section Impl_functions_order_SomeType_t.
  Ltac Self := exact functions_order.SomeType.t.
  
  (*
      fn meth2(self) {}
  *)
  Definition meth2 (self : M.Val ltac:(Self)) : M (M.Val unit) :=
    M.function_body (M.alloc tt).
  
  Global Instance AssociatedFunction_meth2 :
    Notation.DoubleColon ltac:(Self) "meth2" := {
    Notation.double_colon := meth2;
  }.
  
  (*
      pub fn meth1(self) {
          self.meth2();
      }
  *)
  Definition meth1 (self : M.Val ltac:(Self)) : M (M.Val unit) :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) :=
        functions_order.SomeType.t::["meth2"] self in
      M.alloc tt).
  
  Global Instance AssociatedFunction_meth1 :
    Notation.DoubleColon ltac:(Self) "meth1" := {
    Notation.double_colon := meth1;
  }.
End Impl_functions_order_SomeType_t.
End Impl_functions_order_SomeType_t.

Module  SomeTrait.
Section SomeTrait.
  Class Trait (Self : Set) : Type := {
    some_trait_foo : (ref ltac:(Self)) -> M unit;
    some_trait_bar : (ref ltac:(Self)) -> M unit;
  }.
  
End SomeTrait.
End SomeTrait.

Module  Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
Section Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
  Ltac Self := exact functions_order.SomeType.t.
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Definition some_trait_bar (self : M.Val (ref ltac:(Self))) : M (M.Val unit) :=
    M.function_body (M.alloc tt).
  
  Global Instance AssociatedFunction_some_trait_bar :
    Notation.DoubleColon ltac:(Self) "some_trait_bar" := {
    Notation.double_colon := some_trait_bar;
  }.
  
  (*
      fn some_trait_foo(&self) {
          self.some_trait_bar()
      }
  *)
  Definition some_trait_foo (self : M.Val (ref ltac:(Self))) : M (M.Val unit) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val functions_order.SomeType.t)) :=
        deref self in
      let* α1 : ltac:(refine (M.Val (ref functions_order.SomeType.t))) :=
        borrow α0 in
      (functions_order.SomeTrait.some_trait_bar
          (Self := functions_order.SomeType.t)
          (Trait := ltac:(refine _)))
        α1).
  
  Global Instance AssociatedFunction_some_trait_foo :
    Notation.DoubleColon ltac:(Self) "some_trait_foo" := {
    Notation.double_colon := some_trait_foo;
  }.
  
  Global Instance ℐ : functions_order.SomeTrait.Trait ltac:(Self) := {
    functions_order.SomeTrait.some_trait_bar := some_trait_bar;
    functions_order.SomeTrait.some_trait_foo := some_trait_foo;
  }.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.

Module  Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
Section Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
  Ltac Self := exact functions_order.OtherType.t.
  
  (*
      fn some_trait_foo(&self) {}
  *)
  Definition some_trait_foo (self : M.Val (ref ltac:(Self))) : M (M.Val unit) :=
    M.function_body (M.alloc tt).
  
  Global Instance AssociatedFunction_some_trait_foo :
    Notation.DoubleColon ltac:(Self) "some_trait_foo" := {
    Notation.double_colon := some_trait_foo;
  }.
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Definition some_trait_bar (self : M.Val (ref ltac:(Self))) : M (M.Val unit) :=
    M.function_body (M.alloc tt).
  
  Global Instance AssociatedFunction_some_trait_bar :
    Notation.DoubleColon ltac:(Self) "some_trait_bar" := {
    Notation.double_colon := some_trait_bar;
  }.
  
  Global Instance ℐ : functions_order.SomeTrait.Trait ltac:(Self) := {
    functions_order.SomeTrait.some_trait_foo := some_trait_foo;
    functions_order.SomeTrait.some_trait_bar := some_trait_bar;
  }.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.

(*
fn depends_on_trait_impl(u: u32, b: bool) {
    OtherType(b).some_trait_foo();
    SomeType(u).some_trait_foo();
}
*)
Definition depends_on_trait_impl
    (u : M.Val u32.t)
    (b : M.Val bool.t)
    : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 := M.read b in
      let* α1 : ltac:(refine (M.Val functions_order.OtherType.t)) :=
        M.alloc (functions_order.OtherType.Build_t α0) in
      let* α2 : ltac:(refine (M.Val (ref functions_order.OtherType.t))) :=
        borrow α1 in
      (functions_order.SomeTrait.some_trait_foo
          (Self := functions_order.OtherType.t)
          (Trait := ltac:(refine _)))
        α2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 := M.read u in
      let* α1 : ltac:(refine (M.Val functions_order.SomeType.t)) :=
        M.alloc (functions_order.SomeType.Build_t α0) in
      let* α2 : ltac:(refine (M.Val (ref functions_order.SomeType.t))) :=
        borrow α1 in
      (functions_order.SomeTrait.some_trait_foo
          (Self := functions_order.SomeType.t)
          (Trait := ltac:(refine _)))
        α2 in
    M.alloc tt).

Module inner_mod.
  (*
      fn tar() {}
  *)
  Definition tar : M (M.Val unit) := M.function_body (M.alloc tt).
  
  (*
      pub fn bar() {
          // functions_order::inner_mod::bar
          tar();
      }
  *)
  Definition bar : M (M.Val unit) :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) := functions_order.inner_mod.tar in
      M.alloc tt).
  
  Module nested_mod.
    (*
            fn tack() {}
    *)
    Definition tack : M (M.Val unit) := M.function_body (M.alloc tt).
    
    (*
            pub fn tick() {
                tack();
            }
    *)
    Definition tick : M (M.Val unit) :=
      M.function_body
        (let* _ : ltac:(refine (M.Val unit)) :=
          functions_order.inner_mod.nested_mod.tack in
        M.alloc tt).
  End nested_mod.
End inner_mod.

(*
    pub fn bar() {
        // functions_order::inner_mod::bar
        tar();
    }
*)
Definition bar : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) := functions_order.inner_mod.tar in
    M.alloc tt).

(*
    fn tar() {}
*)
Definition tar : M (M.Val unit) := M.function_body (M.alloc tt).

Module nested_mod.
  (*
          fn tack() {}
  *)
  Definition tack : M (M.Val unit) := M.function_body (M.alloc tt).
  
  (*
          pub fn tick() {
              tack();
          }
  *)
  Definition tick : M (M.Val unit) :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) :=
        functions_order.inner_mod.nested_mod.tack in
      M.alloc tt).
End nested_mod.

(*
        pub fn tick() {
            tack();
        }
*)
Definition tick : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      functions_order.inner_mod.nested_mod.tack in
    M.alloc tt).

(*
        fn tack() {}
*)
Definition tack : M (M.Val unit) := M.function_body (M.alloc tt).

(*
fn foo() {}
*)
Definition foo : M (M.Val unit) := M.function_body (M.alloc tt).

(*
fn main() {
    // functions_order::main
    foo();
    inner_mod::bar();
    SomeType(0).meth1();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) := functions_order.foo in
    let* _ : ltac:(refine (M.Val unit)) := functions_order.inner_mod.bar in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 0 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val functions_order.SomeType.t)) :=
        M.alloc (functions_order.SomeType.Build_t α1) in
      functions_order.SomeType.t::["meth1"] α2 in
    M.alloc tt).
