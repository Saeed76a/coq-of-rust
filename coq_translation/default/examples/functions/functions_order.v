(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module SomeType.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : u32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End SomeType.
Definition SomeType `{State.Trait} : Set := M.val SomeType.t.

Module OtherType.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : bool;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End OtherType.
Definition OtherType `{State.Trait} : Set := M.val OtherType.t.

Module Impl_functions_order_SomeType.
  Definition Self `{State.Trait} : Set := functions_order.SomeType.
  
  Definition meth2 `{State.Trait} (self : Self) : M unit := Pure tt.
  
  Global Instance Method_meth2 `{State.Trait} : Notation.Dot "meth2" := {
    Notation.dot := meth2;
  }.
  
  Definition meth1 `{State.Trait} (self : Self) : M unit :=
    let* _ := functions_order.SomeType::["meth2"] self in
    Pure tt.
  
  Global Instance Method_meth1 `{State.Trait} : Notation.Dot "meth1" := {
    Notation.dot := meth1;
  }.
End Impl_functions_order_SomeType.

Module SomeTrait.
  Class Trait (Self : Set) `{State.Trait} : Type := {
    some_trait_foo : (ref Self) -> M unit;
    some_trait_bar : (ref Self) -> M unit;
  }.
  
  Global Instance Method_some_trait_foo `{State.Trait} `(Trait)
    : Notation.Dot "some_trait_foo" := {
    Notation.dot := some_trait_foo;
  }.
  Global Instance Method_some_trait_bar `{State.Trait} `(Trait)
    : Notation.Dot "some_trait_bar" := {
    Notation.dot := some_trait_bar;
  }.
End SomeTrait.

Module Impl_functions_order_SomeTrait_for_functions_order_SomeType.
  Definition Self `{State.Trait} := functions_order.SomeType.
  
  Definition some_trait_bar `{State.Trait} (self : ref Self) : M unit :=
    Pure tt.
  
  Global Instance Method_some_trait_bar `{State.Trait} :
    Notation.Dot "some_trait_bar" := {
    Notation.dot := some_trait_bar;
  }.
  
  Definition some_trait_foo `{State.Trait} (self : ref Self) : M unit :=
    let* α0 := deref self functions_order.SomeType in
    let* α1 := borrow α0 functions_order.SomeType in
    functions_order.SomeTrait.some_trait_bar α1.
  
  Global Instance Method_some_trait_foo `{State.Trait} :
    Notation.Dot "some_trait_foo" := {
    Notation.dot := some_trait_foo;
  }.
  
  Global Instance I `{State.Trait} : functions_order.SomeTrait.Trait Self := {
    functions_order.SomeTrait.some_trait_bar := some_trait_bar;
    functions_order.SomeTrait.some_trait_foo := some_trait_foo;
  }.
  Global Hint Resolve I : core.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType.

Module Impl_functions_order_SomeTrait_for_functions_order_OtherType.
  Definition Self `{State.Trait} := functions_order.OtherType.
  
  Definition some_trait_foo `{State.Trait} (self : ref Self) : M unit :=
    Pure tt.
  
  Global Instance Method_some_trait_foo `{State.Trait} :
    Notation.Dot "some_trait_foo" := {
    Notation.dot := some_trait_foo;
  }.
  
  Definition some_trait_bar `{State.Trait} (self : ref Self) : M unit :=
    Pure tt.
  
  Global Instance Method_some_trait_bar `{State.Trait} :
    Notation.Dot "some_trait_bar" := {
    Notation.dot := some_trait_bar;
  }.
  
  Global Instance I `{State.Trait} : functions_order.SomeTrait.Trait Self := {
    functions_order.SomeTrait.some_trait_foo := some_trait_foo;
    functions_order.SomeTrait.some_trait_bar := some_trait_bar;
  }.
  Global Hint Resolve I : core.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType.

Definition depends_on_trait_impl `{State.Trait} (u : u32) (b : bool) : M unit :=
  let* _ :=
    let* α0 :=
      borrow (functions_order.OtherType.Build_t b) functions_order.OtherType in
    functions_order.SomeTrait.some_trait_foo α0 in
  let* _ :=
    let* α0 :=
      borrow (functions_order.SomeType.Build_t u) functions_order.SomeType in
    functions_order.SomeTrait.some_trait_foo α0 in
  Pure tt.

Module inner_mod.
  Definition tar `{State.Trait} : M unit := Pure tt.
  
  Definition bar `{State.Trait} : M unit :=
    let* _ := functions_order.inner_mod.tar in
    Pure tt.
  
  Module nested_mod.
    Definition tack `{State.Trait} : M unit := Pure tt.
    
    Definition tick `{State.Trait} : M unit :=
      let* _ := functions_order.inner_mod.nested_mod.tack in
      Pure tt.
  End nested_mod.
End inner_mod.

Definition bar `{State.Trait} : M unit :=
  let* _ := functions_order.inner_mod.tar in
  Pure tt.

Definition tar `{State.Trait} : M unit := Pure tt.

Module nested_mod.
  Definition tack `{State.Trait} : M unit := Pure tt.
  
  Definition tick `{State.Trait} : M unit :=
    let* _ := functions_order.inner_mod.nested_mod.tack in
    Pure tt.
End nested_mod.

Definition tick `{State.Trait} : M unit :=
  let* _ := functions_order.inner_mod.nested_mod.tack in
  Pure tt.

Definition tack `{State.Trait} : M unit := Pure tt.

Definition foo `{State.Trait} : M unit := Pure tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{State.Trait} : M unit :=
  let* _ := functions_order.foo in
  let* _ := functions_order.inner_mod.bar in
  let* _ :=
    let* α0 := M.alloc 0 in
    functions_order.SomeType::["meth1"] (functions_order.SomeType.Build_t α0) in
  Pure tt.
