(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition create_fn `{State.Trait} : M _ (* OpaqueTy *) :=
  let* text :=
    let* α0 := deref (mk_str "Fn") str in
    let* α1 := borrow α0 str in
    alloc.borrow.ToOwned.to_owned α1 in
  Pure "Closure".

Error OpaqueTy.

Definition create_fnmut `{State.Trait} : M _ (* OpaqueTy *) :=
  let* text :=
    let* α0 := deref (mk_str "FnMut") str in
    let* α1 := borrow α0 str in
    alloc.borrow.ToOwned.to_owned α1 in
  Pure "Closure".

Definition create_fnonce `{State.Trait} : M _ (* OpaqueTy *) :=
  let* text :=
    let* α0 := deref (mk_str "FnOnce") str in
    let* α1 := borrow α0 str in
    alloc.borrow.ToOwned.to_owned α1 in
  Pure "Closure".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{State.Trait} : M unit :=
  let* fn_plain := functions_closures_as_output_parameters.create_fn in
  let* fn_mut := functions_closures_as_output_parameters.create_fnmut in
  let* fn_once := functions_closures_as_output_parameters.create_fnonce in
  let* _ :=
    let* α0 := borrow fn_plain type not implemented in
    core.ops.function.Fn.call α0 tt in
  let* _ :=
    let* α0 := borrow_mut fn_mut type not implemented in
    core.ops.function.FnMut.call_mut α0 tt in
  let* _ := core.ops.function.FnOnce.call_once fn_once tt in
  Pure tt.
