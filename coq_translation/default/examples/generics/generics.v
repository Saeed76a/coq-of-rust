(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module A.
  Section A.
    Context `{State.Trait}.
    
    Inductive t : Set := Build.
  End A.
End A.
Definition A := @A.t.

Module Single.
  Section Single.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : generics.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End Single.
End Single.
Definition Single `{State.Trait} : Set := M.val Single.t.

Module SingleGen.
  Section SingleGen.
    Context `{State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End SingleGen.
End SingleGen.
Definition SingleGen `{State.Trait} (T : Set) : Set :=
  M.val (SingleGen.t (T := T)).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let _s := generics.Single.Build_t (generics.A.Build_t tt) in
  let* _char :=
    let* α0 := "a"%char in
    Pure (generics.SingleGen.Build_t α0) in
  let _t := generics.SingleGen.Build_t (generics.A.Build_t tt) in
  let* _i32 :=
    let* α0 := M.alloc 6 in
    Pure (generics.SingleGen.Build_t α0) in
  let* _char :=
    let* α0 := "a"%char in
    Pure (generics.SingleGen.Build_t α0) in
  Pure tt.
