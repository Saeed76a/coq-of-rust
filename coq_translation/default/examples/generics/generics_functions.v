(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  A.
Section A.
  Inductive t : Set := Build.
End A.
End A.

Module  S.
Section S.
  Record t : Set := {
    x0 : generics_functions.A.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End S.
End S.

Module  SGen.
Section SGen.
  Context {T : Set}.
  
  Record t : Set := {
    x0 : T;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End SGen.
End SGen.

Definition reg_fn (_s : M.Val generics_functions.S.t) : M (M.Val unit) :=
  M.function_body (M.alloc tt).

Definition gen_spec_t
    (_s : M.Val (generics_functions.SGen.t generics_functions.A.t))
    : M (M.Val unit) :=
  M.function_body (M.alloc tt).

Definition gen_spec_i32
    (_s : M.Val (generics_functions.SGen.t i32.t))
    : M (M.Val unit) :=
  M.function_body (M.alloc tt).

Definition generic
    {T : Set}
    (_s : M.Val (generics_functions.SGen.t T))
    : M (M.Val unit) :=
  M.function_body (M.alloc tt).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val generics_functions.A.t)) :=
        M.alloc generics_functions.A.Build_t in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val generics_functions.S.t)) :=
        M.alloc (generics_functions.S.Build_t α1) in
      generics_functions.reg_fn α2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val generics_functions.A.t)) :=
        M.alloc generics_functions.A.Build_t in
      let* α1 := M.read α0 in
      let* α2 :
          ltac:(refine
            (M.Val (generics_functions.SGen.t generics_functions.A.t))) :=
        M.alloc (generics_functions.SGen.Build_t α1) in
      generics_functions.gen_spec_t α2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 6 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (generics_functions.SGen.t i32.t))) :=
        M.alloc (generics_functions.SGen.Build_t α1) in
      generics_functions.gen_spec_i32 α2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val char.t)) := M.alloc "a"%char in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (generics_functions.SGen.t char.t))) :=
        M.alloc (generics_functions.SGen.Build_t α1) in
      generics_functions.generic α2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val char.t)) := M.alloc "c"%char in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (generics_functions.SGen.t char.t))) :=
        M.alloc (generics_functions.SGen.Build_t α1) in
      generics_functions.generic α2 in
    M.alloc tt).
