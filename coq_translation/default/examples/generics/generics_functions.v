(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module A.
  Inductive t : Set := Build.
End A.
Definition A := @A.t.

Module S.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    _ : generics_functions.A;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End S.
Definition S := @S.t.

Module SGen.
  Section SGen.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      _ : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End SGen.
End SGen.
Definition SGen := @SGen.t.

Definition reg_fn `{State.Trait} (_s : generics_functions.S) : M unit :=
  Pure tt.

Definition gen_spec_t
    `{State.Trait}
    (_s : generics_functions.SGen generics_functions.A)
    : M unit :=
  Pure tt.

Definition gen_spec_i32
    `{State.Trait}
    (_s : generics_functions.SGen i32)
    : M unit :=
  Pure tt.

Definition generic
    `{State.Trait}
    {T : Set}
    (_s : generics_functions.SGen T)
    : M unit :=
  Pure tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{State.Trait} : M unit :=
  let* _ :=
    generics_functions.reg_fn
      (generics_functions.S.Build_t (generics_functions.A.Build_t tt)) in
  let* _ :=
    generics_functions.gen_spec_t
      (generics_functions.SGen.Build_t (generics_functions.A.Build_t tt)) in
  let* _ :=
    let* α0 := M.alloc 6 in
    generics_functions.gen_spec_i32 (generics_functions.SGen.Build_t α0) in
  let* _ :=
    let* α0 := "a"%char in
    generics_functions.generic (generics_functions.SGen.Build_t α0) in
  let* _ :=
    let* α0 := "c"%char in
    generics_functions.generic (generics_functions.SGen.Build_t α0) in
  Pure tt.
