(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  HasArea.
Section HasArea.
  Class Trait (Self : Set) : Type := {
    area : (ref ltac:(Self)) -> M f64.t;
  }.
  
End HasArea.
End HasArea.

Module  Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
  Ltac Self := exact generics_bounds.Rectangle.t.
  
  (*
      fn area(&self) -> f64 {
          self.length * self.height
      }
  *)
  Definition area (self : M.Val (ref ltac:(Self))) : M (M.Val f64.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val generics_bounds.Rectangle.t)) :=
        deref self in
      let* α1 : ltac:(refine (M.Val f64.t)) := α0.["length"] in
      let* α2 : ltac:(refine (M.Val generics_bounds.Rectangle.t)) :=
        deref self in
      let* α3 : ltac:(refine (M.Val f64.t)) := α2.["height"] in
      BinOp.mul α1 α3).
  
  Global Instance AssociatedFunction_area :
    Notation.DoubleColon ltac:(Self) "area" := {
    Notation.double_colon := area;
  }.
  
  Global Instance ℐ : generics_bounds.HasArea.Trait ltac:(Self) := {
    generics_bounds.HasArea.area := area;
  }.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Global Instance Get_length : Notation.Dot "length" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(length) : M _;
  }.
  Global Instance Get_AF_length : Notation.DoubleColon t "length" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(length) : M _;
  }.
  Global Instance Get_height : Notation.Dot "height" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(height) : M _;
  }.
  Global Instance Get_AF_height : Notation.DoubleColon t "height" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(height) : M _;
  }.
End Rectangle.
End Rectangle.

Module  Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
  Ltac Self := exact generics_bounds.Rectangle.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
      let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val str)) := deref (mk_str "Rectangle") in
      let* α3 : ltac:(refine (M.Val (ref str))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val str)) := deref (mk_str "length") in
      let* α5 : ltac:(refine (M.Val (ref str))) := borrow α4 in
      let* α6 : ltac:(refine (M.Val generics_bounds.Rectangle.t)) :=
        deref self in
      let* α7 : ltac:(refine (M.Val f64.t)) := α6.["length"] in
      let* α8 : ltac:(refine (M.Val (ref f64.t))) := borrow α7 in
      let* α9 : ltac:(refine (M.Val (ref type not implemented))) :=
        pointer_coercion "Unsize" α8 in
      let* α10 : ltac:(refine (M.Val str)) := deref (mk_str "height") in
      let* α11 : ltac:(refine (M.Val (ref str))) := borrow α10 in
      let* α12 : ltac:(refine (M.Val generics_bounds.Rectangle.t)) :=
        deref self in
      let* α13 : ltac:(refine (M.Val f64.t)) := α12.["height"] in
      let* α14 : ltac:(refine (M.Val (ref f64.t))) := borrow α13 in
      let* α15 : ltac:(refine (M.Val (ref (ref f64.t)))) := borrow α14 in
      let* α16 : ltac:(refine (M.Val (ref type not implemented))) :=
        pointer_coercion "Unsize" α15 in
      core.fmt.Formatter.t::["debug_struct_field2_finish"] α1 α3 α5 α9 α11 α16).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Triangle.
Section Triangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Global Instance Get_length : Notation.Dot "length" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(length) : M _;
  }.
  Global Instance Get_AF_length : Notation.DoubleColon t "length" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(length) : M _;
  }.
  Global Instance Get_height : Notation.Dot "height" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(height) : M _;
  }.
  Global Instance Get_AF_height : Notation.DoubleColon t "height" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(height) : M _;
  }.
End Triangle.
End Triangle.

(*
fn print_debug<T: Debug>(t: &T) {
    println!("{:?}", t);
}
*)
Definition print_debug
    {T : Set}
    {ℋ_0 : core.fmt.Debug.Trait T}
    (t : M.Val (ref T))
    : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (ref T)))) := borrow t in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).

(*
fn area<T: HasArea>(t: &T) -> f64 {
    t.area()
}
*)
Definition area
    {T : Set}
    {ℋ_0 : generics_bounds.HasArea.Trait T}
    (t : M.Val (ref T))
    : M (M.Val f64.t) :=
  M.function_body
    (let* α0 : ltac:(refine (M.Val T)) := deref t in
    let* α1 : ltac:(refine (M.Val (ref T))) := borrow α0 in
    (generics_bounds.HasArea.area (Self := T) (Trait := ltac:(refine _))) α1).

(*
fn main() {
    let rectangle = Rectangle {
        length: 3.0,
        height: 4.0,
    };
    let _triangle = Triangle {
        length: 3.0,
        height: 4.0,
    };

    print_debug(&rectangle);
    println!("Area: {}", rectangle.area());

    //print_debug(&_triangle);
    //println!("Area: {}", _triangle.area());
    // ^ TODO: Try uncommenting these.
    // | Error: Does not implement either `Debug` or `HasArea`.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* rectangle : ltac:(refine (M.Val generics_bounds.Rectangle.t)) :=
      let* α0 : ltac:(refine (M.Val f64.t)) := M.alloc 3 (* 3.0 *) in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val f64.t)) := M.alloc 4 (* 4.0 *) in
      let* α3 := M.read α2 in
      M.alloc
        {|
          generics_bounds.Rectangle.length := α1;
          generics_bounds.Rectangle.height := α3;
        |} in
    let* _triangle : ltac:(refine (M.Val generics_bounds.Triangle.t)) :=
      let* α0 : ltac:(refine (M.Val f64.t)) := M.alloc 3 (* 3.0 *) in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val f64.t)) := M.alloc 4 (* 4.0 *) in
      let* α3 := M.read α2 in
      M.alloc
        {|
          generics_bounds.Triangle.length := α1;
          generics_bounds.Triangle.height := α3;
        |} in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val (ref generics_bounds.Rectangle.t))) :=
        borrow rectangle in
      generics_bounds.print_debug α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "Area: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref generics_bounds.Rectangle.t))) :=
          borrow rectangle in
        let* α4 : ltac:(refine (M.Val f64.t)) :=
          (generics_bounds.HasArea.area
              (Self := generics_bounds.Rectangle.t)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 : ltac:(refine (M.Val (ref f64.t))) := borrow α4 in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α7 in
        let* α9 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    M.alloc tt).
