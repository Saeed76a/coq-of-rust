(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition compare_prints
    `{H' : State.Trait}
    {T : Set}
    `{core.fmt.Debug.Trait T}
    `{core.fmt.Display.Trait T}
    (t : ref T)
    : M (H := H') unit :=
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "Debug: `"; "`
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow t (ref _) in
      let* α5 := deref α4 (ref _) in
      let* α6 := borrow α5 (ref _) in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "Display: `"; "`
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow t (ref _) in
      let* α5 := deref α4 (ref _) in
      let* α6 := borrow α5 (ref _) in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  Pure tt.

Definition compare_types
    `{H' : State.Trait}
    {T U : Set}
    `{core.fmt.Debug.Trait T}
    `{core.fmt.Debug.Trait U}
    (t : ref T)
    (u : ref U)
    : M (H := H') unit :=
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "t: `"; "`
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow t (ref _) in
      let* α5 := deref α4 (ref _) in
      let* α6 := borrow α5 (ref _) in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "u: `"; "`
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow u (ref _) in
      let* α5 := deref α4 (ref _) in
      let* α6 := borrow α5 (ref _) in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  Pure tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let string := "words" in
  let array := [ 1; 2; 3 ] in
  let* vec :=
    let* α0 :=
      (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] [ 1; 2; 3 ] in
    let* α1 := pointer_coercion "Unsize" α0 in
    (Slice _)::["into_vec"] α1 in
  let* _ :=
    let* α0 := borrow string (ref str) in
    let* α1 := deref α0 (ref str) in
    let* α2 := borrow α1 (ref str) in
    generics_multiple_bounds.compare_prints α2 in
  let* _ :=
    let* α0 := borrow array (list i32) in
    let* α1 := deref α0 (list i32) in
    let* α2 := borrow α1 (list i32) in
    let* α3 := borrow vec (alloc.vec.Vec i32 alloc.alloc.Global) in
    let* α4 := deref α3 (alloc.vec.Vec i32 alloc.alloc.Global) in
    let* α5 := borrow α4 (alloc.vec.Vec i32 alloc.alloc.Global) in
    generics_multiple_bounds.compare_types α2 α5 in
  Pure tt.
