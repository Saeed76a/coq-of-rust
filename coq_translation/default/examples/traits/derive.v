(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Centimeters.
  Unset Primitive Projections.
  Record t : Set := {
    _ : f64;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Centimeters.
Definition Centimeters := @Centimeters.t.

Module Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.
  Definition Self := derive.Centimeters.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.

Module Impl_core_cmp_PartialEq_for_derive_Centimeters.
  Definition Self := derive.Centimeters.
  
  Definition eq
      `{H' : State.Trait}
      (self : ref Self)
      (other : ref derive.Centimeters)
      : M (H := H') bool :=
    let* α0 := deref self derive.Centimeters in
    let* α1 := deref other derive.Centimeters in
    eq α0.["0"] α1.["0"].
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_derive_Centimeters.

Module Impl_core_cmp_PartialOrd_for_derive_Centimeters.
  Definition Self := derive.Centimeters.
  
  Definition partial_cmp
      `{H' : State.Trait}
      (self : ref Self)
      (other : ref derive.Centimeters)
      : M (H := H') (core.option.Option core.cmp.Ordering) :=
    let* α0 := deref self derive.Centimeters in
    let* α1 := borrow α0.["0"] f64 in
    let* α2 := deref α1 f64 in
    let* α3 := borrow α2 f64 in
    let* α4 := deref other derive.Centimeters in
    let* α5 := borrow α4.["0"] f64 in
    let* α6 := deref α5 f64 in
    let* α7 := borrow α6 f64 in
    core.cmp.PartialOrd.partial_cmp α3 α7.
  
  Global Instance Method_partial_cmp `{H' : State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I
    : core.cmp.PartialOrd.Trait Self
        (Rhs := core.cmp.PartialOrd.Default.Rhs Self)
      := {
    core.cmp.PartialOrd.partial_cmp `{H' : State.Trait} := partial_cmp;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters.

Module Inches.
  Unset Primitive Projections.
  Record t : Set := {
    _ : i32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Inches.
Definition Inches := @Inches.t.

Module Impl_core_fmt_Debug_for_derive_Inches.
  Definition Self := derive.Inches.
  
  Definition fmt
      `{H' : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H') core.fmt.Result :=
    let* α0 := deref f core.fmt.Formatter in
    let* α1 := borrow_mut α0 core.fmt.Formatter in
    let* α2 := deref "Inches" str in
    let* α3 := borrow α2 str in
    let* α4 := deref self derive.Inches in
    let* α5 := borrow α4.["0"] i32 in
    let* α6 := borrow α5 (ref i32) in
    let* α7 := deref α6 (ref i32) in
    let* α8 := borrow α7 (ref i32) in
    let* α9 := pointer_coercion "Unsize" α8 in
    core.fmt.Formatter::["debug_tuple_field1_finish"] α1 α3 α9.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_derive_Inches.

Module Impl_derive_Inches_2.
  Definition Self := derive.Inches.
  
  Definition to_centimeters
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') derive.Centimeters :=
    let 'derive.Inches.Build_t inches := self in
    let* α0 := cast inches in
    let* α1 := mul α0 3 (* 2.54 *) in
    Pure (derive.Centimeters.Build_t α1).
  
  Global Instance Method_to_centimeters `{H' : State.Trait} :
    Notation.Dot "to_centimeters" := {
    Notation.dot := to_centimeters;
  }.
End Impl_derive_Inches_2.

Module Seconds.
  Unset Primitive Projections.
  Record t : Set := {
    _ : i32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Seconds.
Definition Seconds := @Seconds.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let _one_second := derive.Seconds.Build_t 1 in
  let foot := derive.Inches.Build_t 12 in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "One foot equals "; "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow foot derive.Inches in
      let* α5 := deref α4 derive.Inches in
      let* α6 := borrow α5 derive.Inches in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let meter := derive.Centimeters.Build_t 100 (* 100.0 *) in
  let* cmp :=
    let* α0 := borrow foot derive.Inches in
    let* α1 := derive.Inches::["to_centimeters"] α0 in
    let* α2 := borrow α1 derive.Centimeters in
    let* α3 := borrow meter derive.Centimeters in
    let* α4 := core.cmp.PartialOrd.lt α2 α3 in
    let* α5 := use α4 in
    if (α5 : bool) then
      Pure "smaller"
    else
      let* α0 := deref "bigger" str in
      borrow α0 str in
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow [ "One foot is "; " than one meter.
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow cmp (ref str) in
      let* α5 := deref α4 (ref str) in
      let* α6 := borrow α5 (ref str) in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  Pure tt.
