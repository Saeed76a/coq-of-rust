(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Centimeters.
Section Centimeters.
  Record t : Set := {
    x0 : f64.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Centimeters.
End Centimeters.
Definition Centimeters : Set := M.Val Centimeters.t.

Module  Impl_core_marker_StructuralPartialEq_for_derive_Centimeters_t.
Section Impl_core_marker_StructuralPartialEq_for_derive_Centimeters_t.
  Ltac Self := exact derive.Centimeters.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait ltac:(Self) := {
  }.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters_t.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters_t.

Module  Impl_core_cmp_PartialEq_for_derive_Centimeters_t.
Section Impl_core_cmp_PartialEq_for_derive_Centimeters_t.
  Ltac Self := exact derive.Centimeters.t.
  
  Definition eq
      (self : M.Val (ref ltac:(Self)))
      (other : M.Val (ref derive.Centimeters.t))
      : M (M.Val bool.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val derive.Centimeters.t)) := deref self in
      let* α1 : ltac:(refine (M.Val f64.t)) := α0.["0"] in
      let* α2 : ltac:(refine (M.Val derive.Centimeters.t)) := deref other in
      let* α3 : ltac:(refine (M.Val f64.t)) := α2.["0"] in
      BinOp.eq α1 α3).
  
  Global Instance AssociatedFunction_eq :
    Notation.DoubleColon ltac:(Self) "eq" := {
    Notation.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait ltac:(Self)
      (Rhs := core.cmp.PartialEq.Default.Rhs ltac:(Self)) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_derive_Centimeters_t.
End Impl_core_cmp_PartialEq_for_derive_Centimeters_t.

Module  Impl_core_cmp_PartialOrd_for_derive_Centimeters_t.
Section Impl_core_cmp_PartialOrd_for_derive_Centimeters_t.
  Ltac Self := exact derive.Centimeters.t.
  
  Definition partial_cmp
      (self : M.Val (ref ltac:(Self)))
      (other : M.Val (ref derive.Centimeters.t))
      : M (M.Val (core.option.Option.t core.cmp.Ordering.t)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val derive.Centimeters.t)) := deref self in
      let* α1 : ltac:(refine (M.Val f64.t)) := α0.["0"] in
      let* α2 : ltac:(refine (M.Val (ref f64.t))) := borrow α1 in
      let* α3 : ltac:(refine (M.Val derive.Centimeters.t)) := deref other in
      let* α4 : ltac:(refine (M.Val f64.t)) := α3.["0"] in
      let* α5 : ltac:(refine (M.Val (ref f64.t))) := borrow α4 in
      (core.cmp.PartialOrd.partial_cmp
          (Self := f64.t)
          (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_partial_cmp :
    Notation.DoubleColon ltac:(Self) "partial_cmp" := {
    Notation.double_colon := partial_cmp;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialOrd.Required.Trait ltac:(Self)
      (Rhs := core.cmp.PartialOrd.Default.Rhs ltac:(Self)) := {
    core.cmp.PartialOrd.partial_cmp := partial_cmp;
    core.cmp.PartialOrd.lt := Datatypes.None;
    core.cmp.PartialOrd.le := Datatypes.None;
    core.cmp.PartialOrd.gt := Datatypes.None;
    core.cmp.PartialOrd.ge := Datatypes.None;
  }.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters_t.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters_t.

Module  Inches.
Section Inches.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Inches.
End Inches.
Definition Inches : Set := M.Val Inches.t.

Module  Impl_core_fmt_Debug_for_derive_Inches_t.
Section Impl_core_fmt_Debug_for_derive_Inches_t.
  Ltac Self := exact derive.Inches.t.
  
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
      let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val str)) := deref (mk_str "Inches") in
      let* α3 : ltac:(refine (M.Val (ref str))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val derive.Inches.t)) := deref self in
      let* α5 : ltac:(refine (M.Val i32.t)) := α4.["0"] in
      let* α6 : ltac:(refine (M.Val (ref i32.t))) := borrow α5 in
      let* α7 : ltac:(refine (M.Val (ref (ref i32.t)))) := borrow α6 in
      let* α8 : ltac:(refine (M.Val (ref type not implemented))) :=
        pointer_coercion "Unsize" α7 in
      core.fmt.Formatter.t::["debug_tuple_field1_finish"] α1 α3 α8).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_derive_Inches_t.
End Impl_core_fmt_Debug_for_derive_Inches_t.

Module  Impl_derive_Inches_t.
Section Impl_derive_Inches_t.
  Ltac Self := exact derive.Inches.t.
  
  Definition to_centimeters
      (self : M.Val (ref ltac:(Self)))
      : M (M.Val derive.Centimeters.t) :=
    M.function_body
      (let 'derive.Inches.Build_t inches := self in
      let* α0 : ltac:(refine (M.Val f64.t)) := cast inches in
      let* α1 : ltac:(refine (M.Val f64.t)) := M.alloc 3 (* 2.54 *) in
      let* α2 : ltac:(refine (M.Val f64.t)) := BinOp.mul α0 α1 in
      let* α3 := M.read α2 in
      M.alloc (derive.Centimeters.Build_t α3)).
  
  Global Instance AssociatedFunction_to_centimeters :
    Notation.DoubleColon ltac:(Self) "to_centimeters" := {
    Notation.double_colon := to_centimeters;
  }.
End Impl_derive_Inches_t.
End Impl_derive_Inches_t.

Module  Seconds.
Section Seconds.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Seconds.
End Seconds.
Definition Seconds : Set := M.Val Seconds.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _one_second : ltac:(refine (M.Val derive.Seconds.t)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 := M.read α0 in
      M.alloc (derive.Seconds.Build_t α1) in
    let* foot : ltac:(refine (M.Val derive.Inches.t)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 12 in
      let* α1 := M.read α0 in
      M.alloc (derive.Inches.Build_t α1) in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "One foot equals "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref derive.Inches.t))) := borrow foot in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* meter : ltac:(refine (M.Val derive.Centimeters.t)) :=
      let* α0 : ltac:(refine (M.Val f64.t)) := M.alloc 100 (* 100.0 *) in
      let* α1 := M.read α0 in
      M.alloc (derive.Centimeters.Build_t α1) in
    let* cmp : ltac:(refine (M.Val (ref str))) :=
      let* α0 : ltac:(refine (M.Val (ref derive.Inches.t))) := borrow foot in
      let* α1 : ltac:(refine (M.Val derive.Centimeters.t)) :=
        derive.Inches.t::["to_centimeters"] α0 in
      let* α2 : ltac:(refine (M.Val (ref derive.Centimeters.t))) := borrow α1 in
      let* α3 : ltac:(refine (M.Val (ref derive.Centimeters.t))) :=
        borrow meter in
      let* α4 : ltac:(refine (M.Val bool.t)) :=
        (core.cmp.PartialOrd.lt
            (Self := derive.Centimeters.t)
            (Trait := ltac:(refine _)))
          α2
          α3 in
      let* α5 : ltac:(refine (M.Val bool.t)) := use α4 in
      let* α6 := M.read α5 in
      if (α6 : bool) then
        M.pure (mk_str "smaller")
      else
        let* α0 : ltac:(refine (M.Val str)) := deref (mk_str "bigger") in
        borrow α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "One foot is "; mk_str " than one meter.
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (ref str)))) := borrow cmp in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
