(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Unit.
  Inductive t : Set := Build.
End Unit.
Definition Unit := @Unit.t.

Module Impl_core_fmt_Debug_for_clone_Unit.
  Definition Self `{State.Trait} := clone.Unit.
  
  Definition fmt
      `{State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M core.fmt.Result :=
    let* α0 := deref f core.fmt.Formatter in
    let* α1 := borrow_mut α0 core.fmt.Formatter in
    let* α2 := deref (mk_str "Unit") str in
    let* α3 := borrow α2 str in
    core.fmt.Formatter::["write_str"] α1 α3.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_clone_Unit.

Module Impl_core_clone_Clone_for_clone_Unit.
  Definition Self `{State.Trait} := clone.Unit.
  
  Definition clone `{State.Trait} (self : ref Self) : M clone.Unit :=
    deref self clone.Unit.
  
  Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_clone_Unit.

Module Impl_core_marker_Copy_for_clone_Unit.
  Definition Self `{State.Trait} := clone.Unit.
  
  Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_clone_Unit.

Module Pair.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : alloc.boxed.Box i32 alloc.boxed.Box.Default.A;
    x1 : alloc.boxed.Box i32 alloc.boxed.Box.Default.A;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
  Global Instance Get_1 `{State.Trait} : Notation.Dot "1" := {
    Notation.dot x := let* x := M.read x in Pure x.(x1) : M _;
  }.
End Pair.
Definition Pair `{State.Trait} : Set := M.val Pair.t.

Module Impl_core_clone_Clone_for_clone_Pair.
  Definition Self `{State.Trait} := clone.Pair.
  
  Definition clone `{State.Trait} (self : ref Self) : M clone.Pair :=
    let* α0 := deref self clone.Pair in
    let* α1 := α0.["0"] in
    let* α2 := borrow α1 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α3 := deref α2 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α4 := borrow α3 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α5 := core.clone.Clone.clone α4 in
    let* α6 := deref self clone.Pair in
    let* α7 := α6.["1"] in
    let* α8 := borrow α7 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α9 := deref α8 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α10 := borrow α9 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α11 := core.clone.Clone.clone α10 in
    Pure (clone.Pair.Build_t α5 α11).
  
  Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_clone_Pair.

Module Impl_core_fmt_Debug_for_clone_Pair.
  Definition Self `{State.Trait} := clone.Pair.
  
  Definition fmt
      `{State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M core.fmt.Result :=
    let* α0 := deref f core.fmt.Formatter in
    let* α1 := borrow_mut α0 core.fmt.Formatter in
    let* α2 := deref (mk_str "Pair") str in
    let* α3 := borrow α2 str in
    let* α4 := deref self clone.Pair in
    let* α5 := α4.["0"] in
    let* α6 := borrow α5 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α7 := deref α6 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α8 := borrow α7 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α9 := pointer_coercion "Unsize" α8 in
    let* α10 := deref self clone.Pair in
    let* α11 := α10.["1"] in
    let* α12 := borrow α11 (alloc.boxed.Box i32 alloc.alloc.Global) in
    let* α13 := borrow α12 (ref (alloc.boxed.Box i32 alloc.alloc.Global)) in
    let* α14 := deref α13 (ref (alloc.boxed.Box i32 alloc.alloc.Global)) in
    let* α15 := borrow α14 (ref (alloc.boxed.Box i32 alloc.alloc.Global)) in
    let* α16 := pointer_coercion "Unsize" α15 in
    core.fmt.Formatter::["debug_tuple_field2_finish"] α1 α3 α9 α16.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_clone_Pair.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{State.Trait} : M unit :=
  let unit := clone.Unit.Build_t tt in
  let copied_unit := unit in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "original: "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow unit clone.Unit in
      let* α5 := deref α4 clone.Unit in
      let* α6 := borrow α5 clone.Unit in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "copy: "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow copied_unit clone.Unit in
      let* α5 := deref α4 clone.Unit in
      let* α6 := borrow α5 clone.Unit in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let* pair :=
    let* α0 := M.alloc 1 in
    let* α1 := (alloc.boxed.Box _ alloc.alloc.Global)::["new"] α0 in
    let* α2 := M.alloc 2 in
    let* α3 := (alloc.boxed.Box _ alloc.alloc.Global)::["new"] α2 in
    Pure (clone.Pair.Build_t α1 α3) in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "original: "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow pair clone.Pair in
      let* α5 := deref α4 clone.Pair in
      let* α6 := borrow α5 clone.Pair in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let moved_pair := pair in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "moved: "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow moved_pair clone.Pair in
      let* α5 := deref α4 clone.Pair in
      let* α6 := borrow α5 clone.Pair in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let* cloned_pair :=
    let* α0 := borrow moved_pair clone.Pair in
    core.clone.Clone.clone α0 in
  let* _ := core.mem.drop moved_pair in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "clone: "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow cloned_pair clone.Pair in
      let* α5 := deref α4 clone.Pair in
      let* α6 := borrow α5 clone.Pair in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  Pure tt.
