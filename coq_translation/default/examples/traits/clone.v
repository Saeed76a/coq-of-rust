(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Unit.
  Inductive t : Set := Build.
End Unit.
Definition Unit := @Unit.t.

Module Impl_core_fmt_Debug_for_clone_Unit.
  Definition Self := clone.Unit.
  
  Definition fmt
      `{H' : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H') core.fmt.Result :=
    core.fmt.Formatter::["write_str"] f "Unit".
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_clone_Unit.

Module Impl_core_clone_Clone_for_clone_Unit.
  Definition Self := clone.Unit.
  
  Definition clone
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') clone.Unit :=
    self.["deref"].
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_clone_Unit.

Module Impl_core_marker_Copy_for_clone_Unit.
  Definition Self := clone.Unit.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_clone_Unit.

Module Pair.
  Unset Primitive Projections.
  Record t : Set := {
    _ : alloc.boxed.Box i32 alloc.boxed.Box.Default.A;
    _ : alloc.boxed.Box i32 alloc.boxed.Box.Default.A;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_1 : Notation.Dot 1 := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Pair.
Definition Pair := @Pair.t.

Module Impl_core_clone_Clone_for_clone_Pair.
  Definition Self := clone.Pair.
  
  Definition clone
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') clone.Pair :=
    let* α0 := core.clone.Clone.clone (addr_of (self.[0])) in
    let* α1 := core.clone.Clone.clone (addr_of (self.[1])) in
    Pure (clone.Pair.Build_t α0 α1).
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_clone_Pair.

Module Impl_core_fmt_Debug_for_clone_Pair.
  Definition Self := clone.Pair.
  
  Definition fmt
      `{H' : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H') core.fmt.Result :=
    core.fmt.Formatter::["debug_tuple_field2_finish"]
      f
      "Pair"
      (addr_of (self.[0]))
      (addr_of (addr_of (self.[1]))).
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_clone_Pair.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let unit := clone.Unit.Build in
  let copied_unit := unit in
  let* _ :=
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of unit) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "original: "; "
" ])
          (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of copied_unit) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "copy: "; "
" ])
          (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt in
  let* pair :=
    let* α0 := (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] 1 in
    let* α1 := (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] 2 in
    Pure (clone.Pair.Build_t α0 α1) in
  let* _ :=
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of pair) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "original: "; "
" ])
          (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt in
  let moved_pair := pair in
  let* _ :=
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of moved_pair) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "moved: "; "
" ])
          (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt in
  let* cloned_pair := moved_pair.["clone"] in
  let* _ := core.mem.drop moved_pair in
  let* _ :=
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of cloned_pair) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "clone: "; "
" ])
          (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt in
  Pure tt.

Module Speak.
  Class Trait (Self : Set) {T : Set} : Type := {
    speak `{H' : State.Trait} : (ref Self) -> M (H := H') unit;
  }.
  
  Global Instance Method_speak `{H' : State.Trait} `(Trait)
    : Notation.Dot "speak" := {
    Notation.dot := speak;
  }.
End Speak.

Module Impl_clone_Speak_for_Tuple_A_bool_.
  Section Impl_clone_Speak_for_Tuple_A_bool_.
    Context {A : Set}.
    Context `{clone.Speak.Trait A (T := alloc.string.String)}.
    Definition Self := A * bool.
    
    Definition speak `{H' : State.Trait} (self : ref Self) : M (H := H') unit :=
      let* _ := (self.[0]).["speak"] in
      let* _ :=
        let* _ :=
          let* α0 := format_argument::["new_debug"] (addr_of (self.[1])) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "bool: "; "
" ])
              (addr_of [ α0 ]) in
          std.io.stdio._print α1 in
        Pure tt in
      Pure tt.
    
    Global Instance Method_speak `{H' : State.Trait} : Notation.Dot "speak" := {
      Notation.dot := speak;
    }.
    
    Global Instance I : clone.Speak.Trait Self (T := alloc.string.String) := {
      clone.Speak.speak `{H' : State.Trait} := speak;
    }.
  End Impl_clone_Speak_for_Tuple_A_bool_.
  Global Hint Resolve I : core.
End Impl_clone_Speak_for_Tuple_A_bool_.

Module Impl_clone_Speak_for_i32.
  Definition Self := i32.
  
  Definition speak `{H' : State.Trait} (self : ref Self) : M (H := H') unit :=
    let* _ :=
      let* _ :=
        let* α0 := self.["deref"] in
        let* α1 := format_argument::["new_display"] (addr_of α0) in
        let* α2 :=
          format_arguments::["new_v1"]
            (addr_of [ "i32: "; "
" ])
            (addr_of [ α1 ]) in
        std.io.stdio._print α2 in
      Pure tt in
    Pure tt.
  
  Global Instance Method_speak `{H' : State.Trait} : Notation.Dot "speak" := {
    Notation.dot := speak;
  }.
  
  Global Instance I : clone.Speak.Trait Self (T := alloc.string.String) := {
    clone.Speak.speak `{H' : State.Trait} := speak;
  }.
  Global Hint Resolve I : core.
End Impl_clone_Speak_for_i32.

Definition gre
    `{H' : State.Trait}
    {A : Set}
    `{clone.Speak.Trait A (T := alloc.string.String)}
    (x : A)
    : M (H := H') unit :=
  let* _ := (x, true).["speak"] in
  Pure tt.

Definition arg `{H' : State.Trait} (x : i32) : M (H := H') unit :=
  let* _ := (x, true).["speak"] in
  Pure tt.
