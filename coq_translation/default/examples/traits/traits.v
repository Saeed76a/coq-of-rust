(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Sheep.
  Unset Primitive Projections.
  Record t : Set := {
    naked : bool;
    name : ref str;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_naked : Notation.Dot "naked" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_AF_naked : Notation.DoubleColon t "naked" := {
    Notation.double_colon '(Build_t x0 _) := x0;
  }.
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon '(Build_t _ x1) := x1;
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Animal.
  Class Trait (Self : Set) : Type := {
    new `{H' : State.Trait} : (ref str) -> M (H := H') Self;
    name `{H' : State.Trait} : (ref Self) -> M (H := H') (ref str);
    noise `{H' : State.Trait} : (ref Self) -> M (H := H') (ref str);
  }.
  
  Global Instance Method_new `{H' : State.Trait} `(Trait)
    : Notation.Dot "new" := {
    Notation.dot := new;
  }.
  Global Instance Method_name `{H' : State.Trait} `(Trait)
    : Notation.Dot "name" := {
    Notation.dot := name;
  }.
  Global Instance Method_noise `{H' : State.Trait} `(Trait)
    : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  Global Instance Method_talk `{H' : State.Trait} `(Trait)
    : Notation.Dot "talk" := {
    Notation.dot (self : ref Self)
      :=
      (let* _ :=
        let* _ :=
          let* α0 := borrow [ ""; " says "; "
" ] in
          let* α1 := deref α0 in
          let* α2 := borrow α1 in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := deref self in
          let* α5 := borrow α4 in
          let* α6 := traits.Animal.name α5 in
          let* α7 := borrow α6 in
          let* α8 := deref α7 in
          let* α9 := borrow α8 in
          let* α10 := core.fmt.rt.Argument::["new_display"] α9 in
          let* α11 := deref self in
          let* α12 := borrow α11 in
          let* α13 := traits.Animal.noise α12 in
          let* α14 := borrow α13 in
          let* α15 := deref α14 in
          let* α16 := borrow α15 in
          let* α17 := core.fmt.rt.Argument::["new_display"] α16 in
          let* α18 := borrow [ α10; α17 ] in
          let* α19 := deref α18 in
          let* α20 := borrow α19 in
          let* α21 := pointer_coercion "Unsize" α20 in
          let* α22 := core.fmt.Arguments::["new_v1"] α3 α21 in
          std.io.stdio._print α22 in
        Pure tt in
      Pure tt
      : M (H := H') unit);
  }.
End Animal.

Module Impl_traits_Sheep.
  Definition Self := traits.Sheep.
  
  Definition is_naked
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') bool :=
    let* α0 := deref self in
    Pure α0.["naked"].
  
  Global Instance Method_is_naked `{H' : State.Trait} :
    Notation.Dot "is_naked" := {
    Notation.dot := is_naked;
  }.
End Impl_traits_Sheep.

Module Impl_traits_Animal_for_traits_Sheep.
  Definition Self := traits.Sheep.
  
  Definition new
      `{H' : State.Trait}
      (name : ref str)
      : M (H := H') traits.Sheep :=
    Pure {| traits.Sheep.name := name; traits.Sheep.naked := false; |}.
  
  Global Instance AssociatedFunction_new `{H' : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition name
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') (ref str) :=
    let* α0 := deref self in
    Pure α0.["name"].
  
  Global Instance Method_name `{H' : State.Trait} : Notation.Dot "name" := {
    Notation.dot := name;
  }.
  
  Definition noise
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') (ref str) :=
    let* α0 := deref self in
    let* α1 := borrow α0 in
    let* α2 := traits.Sheep::["is_naked"] α1 in
    let* α3 := use α2 in
    if (α3 : bool) then
      Pure "baaaaah?"
    else
      Pure "baaaaah!".
  
  Global Instance Method_noise `{H' : State.Trait} : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Definition talk `{H' : State.Trait} (self : ref Self) : M (H := H') unit :=
    let* _ :=
      let* _ :=
        let* α0 := borrow [ ""; " pauses briefly... "; "
" ] in
        let* α1 := deref α0 in
        let* α2 := borrow α1 in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := deref self in
        let* α5 := borrow α4.["name"] in
        let* α6 := deref α5 in
        let* α7 := borrow α6 in
        let* α8 := core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 := deref self in
        let* α10 := borrow α9 in
        let* α11 := traits.Animal.noise α10 in
        let* α12 := borrow α11 in
        let* α13 := deref α12 in
        let* α14 := borrow α13 in
        let* α15 := core.fmt.rt.Argument::["new_display"] α14 in
        let* α16 := borrow [ α8; α15 ] in
        let* α17 := deref α16 in
        let* α18 := borrow α17 in
        let* α19 := pointer_coercion "Unsize" α18 in
        let* α20 := core.fmt.Arguments::["new_v1"] α3 α19 in
        std.io.stdio._print α20 in
      Pure tt in
    Pure tt.
  
  Global Instance Method_talk `{H' : State.Trait} : Notation.Dot "talk" := {
    Notation.dot := talk;
  }.
  
  Global Instance I : traits.Animal.Trait Self := {
    traits.Animal.new `{H' : State.Trait} := new;
    traits.Animal.name `{H' : State.Trait} := name;
    traits.Animal.noise `{H' : State.Trait} := noise;
  }.
  Global Hint Resolve I : core.
End Impl_traits_Animal_for_traits_Sheep.

Module Impl_traits_Sheep_3.
  Definition Self := traits.Sheep.
  
  Definition shear
      `{H' : State.Trait}
      (self : mut_ref Self)
      : M (H := H') unit :=
    let* α0 := deref self in
    let* α1 := borrow α0 in
    let* α2 := traits.Sheep::["is_naked"] α1 in
    let* α3 := use α2 in
    if (α3 : bool) then
      let* _ :=
        let* _ :=
          let* α0 := borrow [ ""; " is already naked...
" ] in
          let* α1 := deref α0 in
          let* α2 := borrow α1 in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := deref self in
          let* α5 := borrow α4 in
          let* α6 := traits.Animal.name α5 in
          let* α7 := borrow α6 in
          let* α8 := deref α7 in
          let* α9 := borrow α8 in
          let* α10 := core.fmt.rt.Argument::["new_display"] α9 in
          let* α11 := borrow [ α10 ] in
          let* α12 := deref α11 in
          let* α13 := borrow α12 in
          let* α14 := pointer_coercion "Unsize" α13 in
          let* α15 := core.fmt.Arguments::["new_v1"] α3 α14 in
          std.io.stdio._print α15 in
        Pure tt in
      Pure tt
    else
      let* _ :=
        let* _ :=
          let* α0 := borrow [ ""; " gets a haircut!
" ] in
          let* α1 := deref α0 in
          let* α2 := borrow α1 in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := deref self in
          let* α5 := borrow α4.["name"] in
          let* α6 := deref α5 in
          let* α7 := borrow α6 in
          let* α8 := core.fmt.rt.Argument::["new_display"] α7 in
          let* α9 := borrow [ α8 ] in
          let* α10 := deref α9 in
          let* α11 := borrow α10 in
          let* α12 := pointer_coercion "Unsize" α11 in
          let* α13 := core.fmt.Arguments::["new_v1"] α3 α12 in
          std.io.stdio._print α13 in
        Pure tt in
      let* _ :=
        let* α0 := deref self in
        assign α0.["naked"] true in
      Pure tt.
  
  Global Instance Method_shear `{H' : State.Trait} : Notation.Dot "shear" := {
    Notation.dot := shear;
  }.
End Impl_traits_Sheep_3.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let* dolly := traits.Animal.new "Dolly" in
  let* _ :=
    let* α0 := borrow dolly in
    traits.Animal.talk α0 in
  let* _ :=
    let* α0 := borrow_mut dolly in
    traits.Sheep::["shear"] α0 in
  let* _ :=
    let* α0 := borrow dolly in
    traits.Animal.talk α0 in
  Pure tt.
