(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Person.
  Unset Primitive Projections.
  Record t : Set := {
    id : u32;
    name : alloc.string.String;
    phone : u64;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_id : Notation.Dot "id" := {
    Notation.dot '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_AF_id : Notation.DoubleColon t "id" := {
    Notation.double_colon '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_phone : Notation.Dot "phone" := {
    Notation.dot '(Build_t _ _ x2) := x2;
  }.
  Global Instance Get_AF_phone : Notation.DoubleColon t "phone" := {
    Notation.double_colon '(Build_t _ _ x2) := x2;
  }.
End Person.
Definition Person : Set := Person.t.

Module Impl_core_hash_Hash_for_hash_Person.
  Definition Self := hash.Person.
  
  Definition hash
      `{H' : State.Trait}
      {__H : Set}
      `{core.hash.Hasher.Trait __H}
      (self : ref Self)
      (state : mut_ref __H)
      : M (H := H') unit :=
    let* _ :=
      let* α0 := deref self in
      let* α1 := borrow α0.["id"] in
      let* α2 := deref α1 in
      let* α3 := borrow α2 in
      let* α4 := deref state in
      let* α5 := borrow_mut α4 in
      core.hash.Hash.hash α3 α5 in
    let* _ :=
      let* α0 := deref self in
      let* α1 := borrow α0.["name"] in
      let* α2 := deref α1 in
      let* α3 := borrow α2 in
      let* α4 := deref state in
      let* α5 := borrow_mut α4 in
      core.hash.Hash.hash α3 α5 in
    let* α0 := deref self in
    let* α1 := borrow α0.["phone"] in
    let* α2 := deref α1 in
    let* α3 := borrow α2 in
    let* α4 := deref state in
    let* α5 := borrow_mut α4 in
    core.hash.Hash.hash α3 α5.
  
  Global Instance Method_hash
      `{H' : State.Trait}
      {__H : Set}
      `{core.hash.Hasher.Trait __H} :
    Notation.Dot "hash" := {
    Notation.dot := hash (__H := __H);
  }.
  
  Global Instance I : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash
      `{H' : State.Trait}
      {__H : Set}
      `{core.hash.Hasher.Trait __H}
      :=
      hash (__H := __H);
  }.
  Global Hint Resolve I : core.
End Impl_core_hash_Hash_for_hash_Person.

Definition calculate_hash
    `{H' : State.Trait}
    {T : Set}
    `{core.hash.Hash.Trait T}
    (t : ref T)
    : M (H := H') u64 :=
  let* s := std.collections.hash.map.DefaultHasher::["new"] in
  let* _ :=
    let* α0 := deref t in
    let* α1 := borrow α0 in
    let* α2 := borrow_mut s in
    let* α3 := deref α2 in
    let* α4 := borrow_mut α3 in
    core.hash.Hash.hash α1 α4 in
  let* α0 := borrow s in
  core.hash.Hasher.finish α0.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let* person1 :=
    let* α0 := deref "Janet" in
    let* α1 := borrow α0 in
    let* α2 := alloc.string.ToString.to_string α1 in
    Pure
      {|
        hash.Person.id := 5;
        hash.Person.name := α2;
        hash.Person.phone := 5556667777;
      |} in
  let* person2 :=
    let* α0 := deref "Bob" in
    let* α1 := borrow α0 in
    let* α2 := alloc.string.ToString.to_string α1 in
    Pure
      {|
        hash.Person.id := 5;
        hash.Person.name := α2;
        hash.Person.phone := 5556667777;
      |} in
  let* _ :=
    let* α0 := borrow person1 in
    let* α1 := deref α0 in
    let* α2 := borrow α1 in
    let* α3 := hash.calculate_hash α2 in
    let* α4 := borrow person2 in
    let* α5 := deref α4 in
    let* α6 := borrow α5 in
    let* α7 := hash.calculate_hash α6 in
    let* α8 := ne α3 α7 in
    let* α9 := not α8 in
    let* α10 := use α9 in
    if (α10 : bool) then
      let* α0 :=
        core.panicking.panic
          "assertion failed: calculate_hash(&person1) != calculate_hash(&person2)" in
      never_to_any α0
    else
      Pure tt in
  Pure tt.
