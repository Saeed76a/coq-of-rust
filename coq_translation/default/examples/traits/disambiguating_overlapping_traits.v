(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  UsernameWidget.
Section UsernameWidget.
  Class Trait (Self : Set) : Type := {
    get : (ref ltac:(Self)) -> M alloc.string.String.t;
  }.
  
End UsernameWidget.
End UsernameWidget.

Module  AgeWidget.
Section AgeWidget.
  Class Trait (Self : Set) : Type := {
    get : (ref ltac:(Self)) -> M u8.t;
  }.
  
End AgeWidget.
End AgeWidget.

Module  Form.
Section Form.
  Record t : Set := {
    username : alloc.string.String.t;
    age : u8.t;
  }.
  
  Global Instance Get_username : Notation.Dot "username" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(username) : M _;
  }.
  Global Instance Get_AF_username : Notation.DoubleColon t "username" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(username) : M _;
  }.
  Global Instance Get_age : Notation.Dot "age" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(age) : M _;
  }.
  Global Instance Get_AF_age : Notation.DoubleColon t "age" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(age) : M _;
  }.
End Form.
End Form.
Definition Form : Set := M.Val Form.t.

Module  Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
Section Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
  Ltac Self := exact disambiguating_overlapping_traits.Form.t.
  
  Definition get
      (self : M.Val (ref ltac:(Self)))
      : M (M.Val alloc.string.String.t) :=
    M.function_body
      (let* α0 :
          ltac:(refine (M.Val disambiguating_overlapping_traits.Form.t)) :=
        deref self in
      let* α1 : ltac:(refine (M.Val alloc.string.String.t)) :=
        α0.["username"] in
      let* α2 : ltac:(refine (M.Val (ref alloc.string.String.t))) :=
        borrow α1 in
      (core.clone.Clone.clone
          (Self := alloc.string.String.t)
          (Trait := ltac:(refine _)))
        α2).
  
  Global Instance AssociatedFunction_get :
    Notation.DoubleColon ltac:(Self) "get" := {
    Notation.double_colon := get;
  }.
  
  Global Instance ℐ :
    disambiguating_overlapping_traits.UsernameWidget.Trait ltac:(Self) := {
    disambiguating_overlapping_traits.UsernameWidget.get := get;
  }.
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.

Module  Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
Section Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
  Ltac Self := exact disambiguating_overlapping_traits.Form.t.
  
  Definition get (self : M.Val (ref ltac:(Self))) : M (M.Val u8.t) :=
    M.function_body
      (let* α0 :
          ltac:(refine (M.Val disambiguating_overlapping_traits.Form.t)) :=
        deref self in
      α0.["age"]).
  
  Global Instance AssociatedFunction_get :
    Notation.DoubleColon ltac:(Self) "get" := {
    Notation.double_colon := get;
  }.
  
  Global Instance ℐ :
    disambiguating_overlapping_traits.AgeWidget.Trait ltac:(Self) := {
    disambiguating_overlapping_traits.AgeWidget.get := get;
  }.
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* form :
        ltac:(refine (M.Val disambiguating_overlapping_traits.Form.t)) :=
      let* α0 : ltac:(refine (M.Val str)) := deref (mk_str "rustacean") in
      let* α1 : ltac:(refine (M.Val (ref str))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val alloc.string.String.t)) :=
        (alloc.borrow.ToOwned.to_owned (Self := str) (Trait := ltac:(refine _)))
          α1 in
      let* α3 := M.read α2 in
      let* α4 : ltac:(refine (M.Val u8.t)) := M.alloc 28 in
      let* α5 := M.read α4 in
      M.alloc
        {|
          disambiguating_overlapping_traits.Form.username := α3;
          disambiguating_overlapping_traits.Form.age := α5;
        |} in
    let* username : ltac:(refine (M.Val alloc.string.String.t)) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref disambiguating_overlapping_traits.Form.t))) :=
        borrow form in
      (disambiguating_overlapping_traits.UsernameWidget.get
          (Self := disambiguating_overlapping_traits.Form.t)
          (Trait := ltac:(refine _)))
        α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val str)) := deref (mk_str "rustacean") in
      let* α1 : ltac:(refine (M.Val (ref str))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val alloc.string.String.t)) :=
        (alloc.string.ToString.to_string
            (Self := str)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 : ltac:(refine (M.Val (ref alloc.string.String.t))) :=
        borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val (ref alloc.string.String.t))) :=
        borrow username in
      let* α6 := M.read α5 in
      let* α7 :
          ltac:(refine
            (M.Val
              ((ref alloc.string.String.t) * (ref alloc.string.String.t)))) :=
        M.alloc (α4, α6) in
      let* α8 := M.read α7 in
      match α8 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val alloc.string.String.t)) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref alloc.string.String.t))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val alloc.string.String.t)) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref alloc.string.String.t))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := alloc.string.String.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val alloc.string.String.t)) :=
              deref left_val in
            let* α1 : ltac:(refine (M.Val (ref alloc.string.String.t))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val alloc.string.String.t)) :=
              deref right_val in
            let* α3 : ltac:(refine (M.Val (ref alloc.string.String.t))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* age : ltac:(refine (M.Val u8.t)) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref disambiguating_overlapping_traits.Form.t))) :=
        borrow form in
      (disambiguating_overlapping_traits.AgeWidget.get
          (Self := disambiguating_overlapping_traits.Form.t)
          (Trait := ltac:(refine _)))
        α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val u8.t)) := M.alloc 28 in
      let* α1 : ltac:(refine (M.Val (ref u8.t))) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 : ltac:(refine (M.Val (ref u8.t))) := borrow age in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val ((ref u8.t) * (ref u8.t)))) :=
        M.alloc (α2, α4) in
      let* α6 := M.read α5 in
      match α6 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val u8.t)) := deref left_val in
        let* α1 : ltac:(refine (M.Val u8.t)) := deref right_val in
        let* α2 : ltac:(refine (M.Val bool.t)) := BinOp.eq α0 α1 in
        let* α3 : ltac:(refine (M.Val bool.t)) := UnOp.not α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) := use α3 in
        let* α5 := M.read α4 in
        if (α5 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val u8.t)) := deref left_val in
            let* α1 : ltac:(refine (M.Val (ref u8.t))) := borrow α0 in
            let* α2 : ltac:(refine (M.Val u8.t)) := deref right_val in
            let* α3 : ltac:(refine (M.Val (ref u8.t))) := borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    M.alloc tt).
