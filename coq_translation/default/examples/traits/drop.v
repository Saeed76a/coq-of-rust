(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Droppable.
Section Droppable.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    name : ref str;
  }.
  
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot x := let* x := M.read x in M.pure x.(name) : M _;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(name) : M _;
  }.
End Droppable.
End Droppable.
Definition Droppable `{ℋ : State.Trait} : Set := M.Val Droppable.t.

Module  Impl_core_ops_drop_Drop_for_drop_Droppable.
Section Impl_core_ops_drop_Drop_for_drop_Droppable.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := drop.Droppable.
  
  Definition drop (self : mut_ref Self) : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "> Dropping "; mk_str "
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine drop.Droppable) := deref self in
          let* α6 : ltac:(refine (ref str)) := α5.["name"] in
          let* α7 : ltac:(refine (ref (ref str))) := borrow α6 in
          let* α8 : ltac:(refine (ref str)) := deref α7 in
          let* α9 : ltac:(refine (ref (ref str))) := borrow α8 in
          let* α10 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α10 ] in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (array core.fmt.rt.Argument)) := deref α12 in
          let* α14 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α13 in
          let* α15 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α14 in
          let* α16 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α15 in
          std.io.stdio._print α16 in
        M.alloc tt in
      M.alloc tt).
  
  Global Instance AssociatedFunction_drop :
    Notation.DoubleColon Self "drop" := {
    Notation.double_colon := drop;
  }.
  
  Global Instance ℐ : core.ops.drop.Drop.Trait Self := {
    core.ops.drop.Drop.drop := drop;
  }.
End Impl_core_ops_drop_Drop_for_drop_Droppable.
End Impl_core_ops_drop_Drop_for_drop_Droppable.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _a : ltac:(refine drop.Droppable) :=
      M.alloc {| drop.Droppable.name := mk_str "a"; |} in
    let* _ : ltac:(refine unit) :=
      let* _b : ltac:(refine drop.Droppable) :=
        M.alloc {| drop.Droppable.name := mk_str "b"; |} in
      let* _ : ltac:(refine unit) :=
        let* _c : ltac:(refine drop.Droppable) :=
          M.alloc {| drop.Droppable.name := mk_str "c"; |} in
        let* _d : ltac:(refine drop.Droppable) :=
          M.alloc {| drop.Droppable.name := mk_str "d"; |} in
        let* _ : ltac:(refine unit) :=
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine (array (ref str))) :=
              M.alloc [ mk_str "Exiting block B
" ] in
            let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
            let* α2 : ltac:(refine (array (ref str))) := deref α1 in
            let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
            let* α4 : ltac:(refine (ref (slice (ref str)))) :=
              pointer_coercion "Unsize" α3 in
            let* α5 : ltac:(refine core.fmt.Arguments) :=
              core.fmt.Arguments::["new_const"] α4 in
            std.io.stdio._print α5 in
          M.alloc tt in
        M.alloc tt in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Just exited block B
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α4 in
          std.io.stdio._print α5 in
        M.alloc tt in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Exiting block A
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α4 in
          std.io.stdio._print α5 in
        M.alloc tt in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Just exited block A
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_const"] α4 in
        std.io.stdio._print α5 in
      M.alloc tt in
    let* _ : ltac:(refine unit) := core.mem.drop _a in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "end of the main function
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_const"] α4 in
        std.io.stdio._print α5 in
      M.alloc tt in
    M.alloc tt).
