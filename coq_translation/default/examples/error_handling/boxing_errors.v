(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition Result (T : Set) : Set :=
  core.result.Result
    T
    (alloc.boxed.Box _ (* OpaqueTy *) alloc.boxed.Box.Default.A).

Module EmptyVec.
  Inductive t : Set := Build.
End EmptyVec.
Definition EmptyVec := @EmptyVec.t.

Module Impl_core_fmt_Debug_for_boxing_errors_EmptyVec.
  Definition Self := boxing_errors.EmptyVec.
  
  Definition fmt
      `{H' : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H') core.fmt.Result :=
    let* α0 := deref f in
    let* α1 := borrow_mut α0 in
    let* α2 := deref "EmptyVec" in
    let* α3 := borrow α2 in
    core.fmt.Formatter::["write_str"] α1 α3.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_boxing_errors_EmptyVec.

Module Impl_core_clone_Clone_for_boxing_errors_EmptyVec.
  Definition Self := boxing_errors.EmptyVec.
  
  Definition clone
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') boxing_errors.EmptyVec :=
    Pure (boxing_errors.EmptyVec.Build_t tt).
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_boxing_errors_EmptyVec.

Module Impl_core_fmt_Display_for_boxing_errors_EmptyVec.
  Definition Self := boxing_errors.EmptyVec.
  
  Definition fmt
      `{H' : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H') core.fmt.Result :=
    let* α0 := deref f in
    let* α1 := borrow_mut α0 in
    let* α2 := borrow [ "invalid first item to double" ] in
    let* α3 := deref α2 in
    let* α4 := borrow α3 in
    let* α5 := pointer_coercion "Unsize" α4 in
    let* α6 := core.fmt.Arguments::["new_const"] α5 in
    core.fmt.Formatter::["write_fmt"] α1 α6.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Display_for_boxing_errors_EmptyVec.

Module Impl_core_error_Error_for_boxing_errors_EmptyVec.
  Definition Self := boxing_errors.EmptyVec.
  
  Global Instance I : core.error.Error.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_error_Error_for_boxing_errors_EmptyVec.

Definition double_first
    `{H' : State.Trait}
    (vec : alloc.vec.Vec (ref str) alloc.vec.Vec.Default.A)
    : M (H := H') (boxing_errors.Result i32) :=
  let* α0 := borrow vec in
  let* α1 := core.ops.deref.Deref.deref α0 in
  let* α2 := deref α1 in
  let* α3 := borrow α2 in
  let* α4 := (Slice _)::["first"] α3 in
  let* α5 :=
    (core.option.Option _)::["ok_or_else"]
      α4
      core.convert.Into.into (boxing_errors.EmptyVec.Build_t tt) in
  (core.result.Result _ _)::["and_then"]
    α5
    let* α0 := deref s in
    let* α1 := deref α0 in
    let* α2 := borrow α1 in
    let* α3 := str::["parse"] α2 in
    let* α4 :=
      (core.result.Result _ _)::["map_err"] α3 core.convert.Into.into e in
    (core.result.Result _ _)::["map"] α4 mul 2 i.

Definition print
    `{H' : State.Trait}
    (result : boxing_errors.Result i32)
    : M (H := H') unit :=
  match result with
  | core.result.Result n =>
    let* _ :=
      let* α0 := borrow [ "The first doubled is "; "
" ] in
      let* α1 := deref α0 in
      let* α2 := borrow α1 in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow n in
      let* α5 := deref α4 in
      let* α6 := borrow α5 in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow [ α7 ] in
      let* α9 := deref α8 in
      let* α10 := borrow α9 in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt
  | core.result.Result e =>
    let* _ :=
      let* α0 := borrow [ "Error: "; "
" ] in
      let* α1 := deref α0 in
      let* α2 := borrow α1 in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow e in
      let* α5 := deref α4 in
      let* α6 := borrow α5 in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow [ α7 ] in
      let* α9 := deref α8 in
      let* α10 := borrow α9 in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let* numbers :=
    let* α0 := deref "93" in
    let* α1 := borrow α0 in
    let* α2 := deref "18" in
    let* α3 := borrow α2 in
    let* α4 :=
      (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] [ "42"; α1; α3 ] in
    let* α5 := pointer_coercion "Unsize" α4 in
    (Slice _)::["into_vec"] α5 in
  let* empty := (alloc.vec.Vec _ alloc.alloc.Global)::["new"] in
  let* strings :=
    let* α0 := deref "93" in
    let* α1 := borrow α0 in
    let* α2 := deref "18" in
    let* α3 := borrow α2 in
    let* α4 :=
      (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"]
        [ "tofu"; α1; α3 ] in
    let* α5 := pointer_coercion "Unsize" α4 in
    (Slice _)::["into_vec"] α5 in
  let* _ :=
    let* α0 := boxing_errors.double_first numbers in
    boxing_errors.print α0 in
  let* _ :=
    let* α0 := boxing_errors.double_first empty in
    boxing_errors.print α0 in
  let* _ :=
    let* α0 := boxing_errors.double_first strings in
    boxing_errors.print α0 in
  Pure tt.
