(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac Result T := exact (core.result.Result.t T wrapping_errors.DoubleError.t).

Module DoubleError.
  Inductive t : Set :=
  | EmptyVec
  | Parse (_ : core.num.error.ParseIntError.t).
End DoubleError.

Module  Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
Section Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
  Ltac Self := exact wrapping_errors.DoubleError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 := M.read self in
      match α0 with
      | wrapping_errors.DoubleError.EmptyVec  =>
        let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
        let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val str)) := deref (mk_str "EmptyVec") in
        let* α3 : ltac:(refine (M.Val (ref str))) := borrow α2 in
        core.fmt.Formatter.t::["write_str"] α1 α3
      | wrapping_errors.DoubleError.Parse __self_0 =>
        let* __self_0 := M.alloc __self_0 in
        let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
        let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val str)) := deref (mk_str "Parse") in
        let* α3 : ltac:(refine (M.Val (ref str))) := borrow α2 in
        let* α4 :
            ltac:(refine (M.Val (ref (ref core.num.error.ParseIntError.t)))) :=
          borrow __self_0 in
        let* α5 : ltac:(refine (M.Val (ref type not implemented))) :=
          pointer_coercion "Unsize" α4 in
        core.fmt.Formatter.t::["debug_tuple_field1_finish"] α1 α3 α5
      end).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.

Module  Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
Section Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
  Ltac Self := exact wrapping_errors.DoubleError.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          match *self {
              DoubleError::EmptyVec => write!(f, "please use a vector with at least one element"),
              // The wrapped error contains additional information and is available
              // via the source() method.
              DoubleError::Parse(..) => write!(f, "the provided string could not be parsed as int"),
          }
      }
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val wrapping_errors.DoubleError.t)) :=
        deref self in
      let* α1 := M.read α0 in
      match α1 with
      | wrapping_errors.DoubleError.EmptyVec  =>
        let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
        let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "please use a vector with at least one element" ] in
        let* α3 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α2 in
        let* α4 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α4 in
        core.fmt.Formatter.t::["write_fmt"] α1 α5
      | wrapping_errors.DoubleError.Parse  =>
        let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
        let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "the provided string could not be parsed as int" ] in
        let* α3 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α2 in
        let* α4 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α4 in
        core.fmt.Formatter.t::["write_fmt"] α1 α5
      end).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait ltac:(Self) := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.

Module  Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
Section Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
  Ltac Self := exact wrapping_errors.DoubleError.t.
  
  (*
      fn source(&self) -> Option<&(dyn error::Error + 'static)> {
          match *self {
              DoubleError::EmptyVec => None,
              // The cause is the underlying implementation error type. Is implicitly
              // cast to the trait object `&error::Error`. This works because the
              // underlying type already implements the `Error` trait.
              DoubleError::Parse(ref e) => Some(e),
          }
      }
  *)
  Definition source
      (self : M.Val (ref ltac:(Self)))
      : M (M.Val (core.option.Option.t (ref _ (* dyn *)))) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val wrapping_errors.DoubleError.t)) :=
        deref self in
      let* α1 := M.read α0 in
      match α1 with
      | wrapping_errors.DoubleError.EmptyVec  => M.alloc core.option.Option.None
      | wrapping_errors.DoubleError.Parse e =>
        let* e := M.alloc e in
        let* α0 : ltac:(refine (M.Val core.num.error.ParseIntError.t)) :=
          deref e in
        let* α1 : ltac:(refine (M.Val (ref core.num.error.ParseIntError.t))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref type not implemented))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        M.alloc (core.option.Option.Some α3)
      end).
  
  Global Instance AssociatedFunction_source :
    Notation.DoubleColon ltac:(Self) "source" := {
    Notation.double_colon := source;
  }.
  
  Global Instance ℐ : core.error.Error.Required.Trait ltac:(Self) := {
    core.error.Error.source := Datatypes.Some source;
    core.error.Error.type_id := Datatypes.None;
    core.error.Error.description := Datatypes.None;
    core.error.Error.cause := Datatypes.None;
    core.error.Error.provide := Datatypes.None;
  }.
End Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
End Impl_core_error_Error_for_wrapping_errors_DoubleError_t.

Module  Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
Section Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
  Ltac Self := exact wrapping_errors.DoubleError.t.
  
  (*
      fn from(err: ParseIntError) -> DoubleError {
          DoubleError::Parse(err)
      }
  *)
  Definition from
      (err : M.Val core.num.error.ParseIntError.t)
      : M (M.Val wrapping_errors.DoubleError.t) :=
    M.function_body
      (let* α0 := M.read err in
      M.alloc (wrapping_errors.DoubleError.Parse α0)).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon ltac:(Self) "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait ltac:(Self)
      (T := core.num.error.ParseIntError.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
End Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(DoubleError::EmptyVec)?;
    // Here we implicitly use the `ParseIntError` implementation of `From` (which
    // we defined above) in order to create a `DoubleError`.
    let parsed = first.parse::<i32>()?;

    Ok(2 * parsed)
}
*)
Definition double_first
    (vec : M.Val (alloc.vec.Vec.t (ref str.t) alloc.vec.Vec.Default.A))
    : M (M.Val ltac:(wrapping_errors.Result i32.t)) :=
  M.function_body
    (let* first : ltac:(refine (M.Val (ref (ref str)))) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref (alloc.vec.Vec.t (ref str) alloc.alloc.Global.t)))) :=
        borrow vec in
      let* α1 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
        (core.ops.deref.Deref.deref
            (Self := alloc.vec.Vec.t (ref str) alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine (M.Val (slice (ref str)))) := deref α1 in
      let* α3 : ltac:(refine (M.Val (ref (slice (ref str))))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val (core.option.Option.t (ref (ref str))))) :=
        (slice (ref str))::["first"] α3 in
      let* α5 : ltac:(refine (M.Val wrapping_errors.DoubleError.t)) :=
        M.alloc wrapping_errors.DoubleError.EmptyVec in
      let* α6 :
          ltac:(refine
            (M.Val
              (core.result.Result.t
                (ref (ref str))
                wrapping_errors.DoubleError.t))) :=
        (core.option.Option.t (ref (ref str)))::["ok_or"] α4 α5 in
      let* α7 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  wrapping_errors.DoubleError.t)
                (ref (ref str))))) :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.result.Result.t
                (ref (ref str))
                wrapping_errors.DoubleError.t)
            (Trait := ltac:(refine _)))
          α6 in
      let* α8 := M.read α7 in
      match α8 with
      | core.ops.control_flow.ControlFlow.Break residual =>
        let* residual := M.alloc residual in
        let* α0 :
            ltac:(refine
              (M.Val
                (core.result.Result.t i32.t wrapping_errors.DoubleError.t))) :=
          (core.ops.try_trait.FromResidual.from_residual
              (Self := core.result.Result.t i32.t wrapping_errors.DoubleError.t)
              (Trait := ltac:(refine _)))
            residual in
        let* α1 : ltac:(refine (M.Val never.t)) := M.return_ α0 in
        never_to_any α1
      | core.ops.control_flow.ControlFlow.Continue val =>
        let* val := M.alloc val in
        M.pure val
      end in
    let* parsed : ltac:(refine (M.Val i32.t)) :=
      let* α0 : ltac:(refine (M.Val (ref str))) := deref first in
      let* α1 : ltac:(refine (M.Val str)) := deref α0 in
      let* α2 : ltac:(refine (M.Val (ref str))) := borrow α1 in
      let* α3 :
          ltac:(refine
            (M.Val
              (core.result.Result.t i32.t core.num.error.ParseIntError.t))) :=
        str::["parse"] α2 in
      let* α4 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  core.num.error.ParseIntError.t)
                i32.t))) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result.t i32.t core.num.error.ParseIntError.t)
            (Trait := ltac:(refine _)))
          α3 in
      let* α5 := M.read α4 in
      match α5 with
      | core.ops.control_flow.ControlFlow.Break residual =>
        let* residual := M.alloc residual in
        let* α0 :
            ltac:(refine
              (M.Val
                (core.result.Result.t i32.t wrapping_errors.DoubleError.t))) :=
          (core.ops.try_trait.FromResidual.from_residual
              (Self := core.result.Result.t i32.t wrapping_errors.DoubleError.t)
              (Trait := ltac:(refine _)))
            residual in
        let* α1 : ltac:(refine (M.Val never.t)) := M.return_ α0 in
        never_to_any α1
      | core.ops.control_flow.ControlFlow.Continue val =>
        let* val := M.alloc val in
        M.pure val
      end in
    let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
    let* α1 : ltac:(refine (M.Val i32.t)) := BinOp.mul α0 parsed in
    let* α2 := M.read α1 in
    M.alloc (core.result.Result.Ok α2)).

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => {
            println!("Error: {}", e);
            if let Some(source) = e.source() {
                println!("  Caused by: {}", source);
            }
        }
    }
}
*)
Definition print
    (result : M.Val ltac:(wrapping_errors.Result i32.t))
    : M (M.Val unit) :=
  M.function_body
    (let* α0 := M.read result in
    match α0 with
    | core.result.Result.Ok n =>
      let* n := M.alloc n in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "The first doubled is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow n in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt
    | core.result.Result.Err e =>
      let* e := M.alloc e in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
            M.alloc [ mk_str "Error: "; mk_str "
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref wrapping_errors.DoubleError.t))) :=
            borrow e in
          let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_display"] α3 in
          let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α4 ] in
          let* α6 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α5 in
          let* α7 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      let* α0 : ltac:(refine (M.Val (ref wrapping_errors.DoubleError.t))) :=
        borrow e in
      let* α1 :
          ltac:(refine
            (M.Val (core.option.Option.t (ref type not implemented)))) :=
        (core.error.Error.source
            (Self := wrapping_errors.DoubleError.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine (M.Val bool.t)) :=
        let_if core.option.Option.Some source := α1 in
      let* α3 := M.read α2 in
      if (α3 : bool) then
        let* _ : ltac:(refine (M.Val unit)) :=
          let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
              M.alloc [ mk_str "  Caused by: "; mk_str "
" ] in
            let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 : ltac:(refine (M.Val (ref (ref type not implemented)))) :=
              borrow source in
            let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
              core.fmt.rt.Argument.t::["new_display"] α3 in
            let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
              M.alloc [ α4 ] in
            let* α6 :
                ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
              borrow α5 in
            let* α7 :
                ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
              pointer_coercion "Unsize" α6 in
            let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
              core.fmt.Arguments.t::["new_v1"] α2 α7 in
            std.io.stdio._print α8 in
          M.alloc tt in
        M.alloc tt
      else
        M.alloc tt
    end).

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* numbers :
        ltac:(refine
          (M.Val (alloc.vec.Vec.t (ref str) alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val str)) := deref (mk_str "93") in
      let* α1 : ltac:(refine (M.Val (ref str))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val str)) := deref (mk_str "18") in
      let* α3 : ltac:(refine (M.Val (ref str))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val (array (ref str)))) :=
        M.alloc [ mk_str "42"; α1; α3 ] in
      let* α5 :
          ltac:(refine
            (M.Val
              (alloc.boxed.Box.t (array (ref str)) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α4 in
      let* α6 :
          ltac:(refine
            (M.Val
              (alloc.boxed.Box.t (slice (ref str)) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α5 in
      (slice (ref str))::["into_vec"] α6 in
    let* empty :
        ltac:(refine
          (M.Val (alloc.vec.Vec.t (ref str) alloc.alloc.Global.t))) :=
      (alloc.vec.Vec.t (ref str) alloc.alloc.Global.t)::["new"] in
    let* strings :
        ltac:(refine
          (M.Val (alloc.vec.Vec.t (ref str) alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val str)) := deref (mk_str "93") in
      let* α1 : ltac:(refine (M.Val (ref str))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val str)) := deref (mk_str "18") in
      let* α3 : ltac:(refine (M.Val (ref str))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val (array (ref str)))) :=
        M.alloc [ mk_str "tofu"; α1; α3 ] in
      let* α5 :
          ltac:(refine
            (M.Val
              (alloc.boxed.Box.t (array (ref str)) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α4 in
      let* α6 :
          ltac:(refine
            (M.Val
              (alloc.boxed.Box.t (slice (ref str)) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α5 in
      (slice (ref str))::["into_vec"] α6 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val
              (core.result.Result.t i32.t wrapping_errors.DoubleError.t))) :=
        wrapping_errors.double_first numbers in
      wrapping_errors.print α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val
              (core.result.Result.t i32.t wrapping_errors.DoubleError.t))) :=
        wrapping_errors.double_first empty in
      wrapping_errors.print α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val
              (core.result.Result.t i32.t wrapping_errors.DoubleError.t))) :=
        wrapping_errors.double_first strings in
      wrapping_errors.print α0 in
    M.alloc tt).
