(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Food.
  Inductive t : Set :=
  | CordonBleu
  | Steak
  | Sushi.
End Food.

Module  Impl_core_fmt_Debug_for_combinators_and_then_Food_t.
Section Impl_core_fmt_Debug_for_combinators_and_then_Food_t.
  Ltac Self := exact combinators_and_then.Food.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
      let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
        borrow_mut α0 in
      let* α2 := M.read self in
      let* α3 : ltac:(refine (M.Val (ref str.t))) :=
        match α2 with
        | combinators_and_then.Food.CordonBleu  =>
          let* α0 : ltac:(refine (M.Val str.t)) :=
            deref (mk_str "CordonBleu") in
          borrow α0
        | combinators_and_then.Food.Steak  =>
          let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "Steak") in
          borrow α0
        | combinators_and_then.Food.Sushi  =>
          let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "Sushi") in
          borrow α0
        end in
      core.fmt.Formatter.t::["write_str"] α1 α3).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_and_then_Food_t.
End Impl_core_fmt_Debug_for_combinators_and_then_Food_t.

Module Day.
  Inductive t : Set :=
  | Monday
  | Tuesday
  | Wednesday.
End Day.

Module  Impl_core_fmt_Debug_for_combinators_and_then_Day_t.
Section Impl_core_fmt_Debug_for_combinators_and_then_Day_t.
  Ltac Self := exact combinators_and_then.Day.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
      let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
        borrow_mut α0 in
      let* α2 := M.read self in
      let* α3 : ltac:(refine (M.Val (ref str.t))) :=
        match α2 with
        | combinators_and_then.Day.Monday  =>
          let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "Monday") in
          borrow α0
        | combinators_and_then.Day.Tuesday  =>
          let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "Tuesday") in
          borrow α0
        | combinators_and_then.Day.Wednesday  =>
          let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "Wednesday") in
          borrow α0
        end in
      core.fmt.Formatter.t::["write_str"] α1 α3).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_and_then_Day_t.
End Impl_core_fmt_Debug_for_combinators_and_then_Day_t.

(*
fn have_ingredients(food: Food) -> Option<Food> {
    match food {
        Food::Sushi => None,
        _ => Some(food),
    }
}
*)
Definition have_ingredients
    (food : M.Val combinators_and_then.Food.t)
    : M (M.Val (core.option.Option.t combinators_and_then.Food.t)) :=
  M.function_body
    (let* α0 := M.read food in
    match α0 with
    | combinators_and_then.Food.Sushi  => M.alloc core.option.Option.None
    | _ =>
      let* α0 := M.read food in
      M.alloc (core.option.Option.Some α0)
    end).

(*
fn have_recipe(food: Food) -> Option<Food> {
    match food {
        Food::CordonBleu => None,
        _ => Some(food),
    }
}
*)
Definition have_recipe
    (food : M.Val combinators_and_then.Food.t)
    : M (M.Val (core.option.Option.t combinators_and_then.Food.t)) :=
  M.function_body
    (let* α0 := M.read food in
    match α0 with
    | combinators_and_then.Food.CordonBleu  => M.alloc core.option.Option.None
    | _ =>
      let* α0 := M.read food in
      M.alloc (core.option.Option.Some α0)
    end).

(*
fn cookable_v1(food: Food) -> Option<Food> {
    match have_recipe(food) {
        None => None,
        Some(food) => match have_ingredients(food) {
            None => None,
            Some(food) => Some(food),
        },
    }
}
*)
Definition cookable_v1
    (food : M.Val combinators_and_then.Food.t)
    : M (M.Val (core.option.Option.t combinators_and_then.Food.t)) :=
  M.function_body
    (let* α0 :
        ltac:(refine
          (M.Val (core.option.Option.t combinators_and_then.Food.t))) :=
      combinators_and_then.have_recipe food in
    let* α1 := M.read α0 in
    match α1 with
    | core.option.Option.None  => M.alloc core.option.Option.None
    | core.option.Option.Some food =>
      let* food := M.alloc food in
      let* α0 :
          ltac:(refine
            (M.Val (core.option.Option.t combinators_and_then.Food.t))) :=
        combinators_and_then.have_ingredients food in
      let* α1 := M.read α0 in
      match α1 with
      | core.option.Option.None  => M.alloc core.option.Option.None
      | core.option.Option.Some food =>
        let* food := M.alloc food in
        let* α0 := M.read food in
        M.alloc (core.option.Option.Some α0)
      end
    end).

(*
fn cookable_v2(food: Food) -> Option<Food> {
    have_recipe(food).and_then(have_ingredients)
}
*)
Definition cookable_v2
    (food : M.Val combinators_and_then.Food.t)
    : M (M.Val (core.option.Option.t combinators_and_then.Food.t)) :=
  M.function_body
    (let* α0 :
        ltac:(refine
          (M.Val (core.option.Option.t combinators_and_then.Food.t))) :=
      combinators_and_then.have_recipe food in
    (core.option.Option.t combinators_and_then.Food.t)::["and_then"]
      α0
      combinators_and_then.have_ingredients).

(*
fn eat(food: Food, day: Day) {
    match cookable_v2(food) {
        Some(food) => println!("Yay! On {:?} we get to eat {:?}.", day, food),
        None => println!("Oh no. We don't get to eat on {:?}?", day),
    }
}
*)
Definition eat
    (food : M.Val combinators_and_then.Food.t)
    (day : M.Val combinators_and_then.Day.t)
    : M (M.Val unit) :=
  M.function_body
    (let* α0 :
        ltac:(refine
          (M.Val (core.option.Option.t combinators_and_then.Food.t))) :=
      combinators_and_then.cookable_v2 food in
    let* α1 := M.read α0 in
    match α1 with
    | core.option.Option.Some food =>
      let* food := M.alloc food in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc
            [ mk_str "Yay! On "; mk_str " we get to eat "; mk_str ".
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref combinators_and_then.Day.t))) :=
          borrow day in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (ref combinators_and_then.Food.t))) :=
          borrow food in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4; α6 ] in
        let* α8 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α7 in
        let* α9 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt
    | core.option.Option.None  =>
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "Oh no. We don't get to eat on "; mk_str "?
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref combinators_and_then.Day.t))) :=
          borrow day in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt
    end).

(*
fn main() {
    let (cordon_bleu, steak, sushi) = (Food::CordonBleu, Food::Steak, Food::Sushi);

    eat(cordon_bleu, Day::Monday);
    eat(steak, Day::Tuesday);
    eat(sushi, Day::Wednesday);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* '(cordon_bleu, steak, sushi) :
        ltac:(refine
          (M.Val
            ((combinators_and_then.Food.t * combinators_and_then.Food.t)
            *
            combinators_and_then.Food.t))) :=
      M.alloc
        (combinators_and_then.Food.CordonBleu,
          combinators_and_then.Food.Steak,
          combinators_and_then.Food.Sushi) in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val combinators_and_then.Day.t)) :=
        M.alloc combinators_and_then.Day.Monday in
      combinators_and_then.eat cordon_bleu α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val combinators_and_then.Day.t)) :=
        M.alloc combinators_and_then.Day.Tuesday in
      combinators_and_then.eat steak α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val combinators_and_then.Day.t)) :=
        M.alloc combinators_and_then.Day.Wednesday in
      combinators_and_then.eat sushi α0 in
    M.alloc tt).
