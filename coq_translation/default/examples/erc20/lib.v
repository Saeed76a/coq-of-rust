(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Mapping.
Section Mapping.
  Context (K V : Set).
  
  Record t : Set := {
    _key : core.marker.PhantomData.t K;
    _value : core.marker.PhantomData.t V;
  }.
  
  Global Instance Get__key : Notation.Dot "_key" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(_key) : M _;
  }.
  Global Instance Get_AF__key : Notation.DoubleColon t "_key" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(_key) : M _;
  }.
  Global Instance Get__value : Notation.Dot "_value" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(_value) : M _;
  }.
  Global Instance Get_AF__value : Notation.DoubleColon t "_value" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(_value) : M _;
  }.
End Mapping.
End Mapping.
Definition Mapping (K V : Set) : Set := M.Val (Mapping.t K V).

Module  Impl_core_default_Default_for_lib_Mapping_t_K_V.
Section Impl_core_default_Default_for_lib_Mapping_t_K_V.
  Context {K V : Set}.
  
  Context
    {ℋ_0 : core.default.Default.Trait K}
    {ℋ_1 : core.default.Default.Trait V}.
  
  Ltac Self := exact (lib.Mapping.t K V).
  
  Definition default : M (M.Val (lib.Mapping.t K V)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val (core.marker.PhantomData.t K))) :=
        core.default.Default.default
          (Self := core.marker.PhantomData.t K)
          (Trait := ltac:(refine _)) in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (core.marker.PhantomData.t V))) :=
        core.default.Default.default
          (Self := core.marker.PhantomData.t V)
          (Trait := ltac:(refine _)) in
      let* α3 := M.read α2 in
      M.alloc {| lib.Mapping._key := α1; lib.Mapping._value := α3; |}).
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon ltac:(Self) "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait ltac:(Self) := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_lib_Mapping_t_K_V.
End Impl_core_default_Default_for_lib_Mapping_t_K_V.

Module  Impl_lib_Mapping_t_K_V.
Section Impl_lib_Mapping_t_K_V.
  Context {K V : Set}.
  
  Ltac Self := exact (lib.Mapping.t K V).
  
  Definition get
      (self : M.Val (ref ltac:(Self)))
      (_key : M.Val (ref K))
      : M (M.Val (core.option.Option.t V)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val never.t)) :=
        core.panicking.panic (mk_str "not implemented") in
      never_to_any α0).
  
  Global Instance AssociatedFunction_get :
    Notation.DoubleColon ltac:(Self) "get" := {
    Notation.double_colon := get;
  }.
  
  Definition insert
      (self : M.Val (mut_ref ltac:(Self)))
      (_key : M.Val K)
      (_value : M.Val V)
      : M (M.Val unit) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val never.t)) :=
        core.panicking.panic (mk_str "not implemented") in
      never_to_any α0).
  
  Global Instance AssociatedFunction_insert :
    Notation.DoubleColon ltac:(Self) "insert" := {
    Notation.double_colon := insert;
  }.
End Impl_lib_Mapping_t_K_V.
End Impl_lib_Mapping_t_K_V.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : alloc.string.String.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End AccountId.
End AccountId.
Definition AccountId : Set := M.Val AccountId.t.

Module  Impl_core_default_Default_for_lib_AccountId_t.
Section Impl_core_default_Default_for_lib_AccountId_t.
  Ltac Self := exact lib.AccountId.t.
  
  Definition default : M (M.Val lib.AccountId.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val alloc.string.String.t)) :=
        core.default.Default.default
          (Self := alloc.string.String.t)
          (Trait := ltac:(refine _)) in
      let* α1 := M.read α0 in
      M.alloc (lib.AccountId.Build_t α1)).
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon ltac:(Self) "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait ltac:(Self) := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_lib_AccountId_t.
End Impl_core_default_Default_for_lib_AccountId_t.

Ltac Balance := exact u128.t.

Module  Environment.
Section Environment.
  Record t : Set := {
    x0 : alloc.string.String.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Environment.
End Environment.
Definition Environment : Set := M.Val Environment.t.

Module  Event.
Section Event.
  Record t : Set := {
    x0 : alloc.string.String.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Event.
End Event.
Definition Event : Set := M.Val Event.t.

Module  Erc20.
Section Erc20.
  Record t : Set := {
    total_supply : ltac:(lib.Balance);
    balances : lib.Mapping.t lib.AccountId.t ltac:(lib.Balance);
    allowances :
      lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) ltac:(lib.Balance);
  }.
  
  Global Instance Get_total_supply : Notation.Dot "total_supply" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(total_supply) : M _;
  }.
  Global Instance Get_AF_total_supply :
    Notation.DoubleColon t "total_supply" := {
    Notation.double_colon x :=
      let* x := M.read x in M.alloc x.(total_supply) : M _;
  }.
  Global Instance Get_balances : Notation.Dot "balances" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(balances) : M _;
  }.
  Global Instance Get_AF_balances : Notation.DoubleColon t "balances" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(balances) : M _;
  }.
  Global Instance Get_allowances : Notation.Dot "allowances" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(allowances) : M _;
  }.
  Global Instance Get_AF_allowances : Notation.DoubleColon t "allowances" := {
    Notation.double_colon x :=
      let* x := M.read x in M.alloc x.(allowances) : M _;
  }.
End Erc20.
End Erc20.
Definition Erc20 : Set := M.Val Erc20.t.

Module  Impl_core_default_Default_for_lib_Erc20_t.
Section Impl_core_default_Default_for_lib_Erc20_t.
  Ltac Self := exact lib.Erc20.t.
  
  Definition default : M (M.Val lib.Erc20.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val u128.t)) :=
        core.default.Default.default
          (Self := u128.t)
          (Trait := ltac:(refine _)) in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (lib.Mapping.t lib.AccountId.t u128.t))) :=
        core.default.Default.default
          (Self := lib.Mapping.t lib.AccountId.t u128.t)
          (Trait := ltac:(refine _)) in
      let* α3 := M.read α2 in
      let* α4 :
          ltac:(refine
            (M.Val
              (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t))) :=
        core.default.Default.default
          (Self := lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t)
          (Trait := ltac:(refine _)) in
      let* α5 := M.read α4 in
      M.alloc
        {|
          lib.Erc20.total_supply := α1;
          lib.Erc20.balances := α3;
          lib.Erc20.allowances := α5;
        |}).
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon ltac:(Self) "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait ltac:(Self) := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_lib_Erc20_t.
End Impl_core_default_Default_for_lib_Erc20_t.

Module  Transfer.
Section Transfer.
  Record t : Set := {
    from : core.option.Option.t lib.AccountId.t;
    to : core.option.Option.t lib.AccountId.t;
    value : ltac:(lib.Balance);
  }.
  
  Global Instance Get_from : Notation.Dot "from" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(from) : M _;
  }.
  Global Instance Get_AF_from : Notation.DoubleColon t "from" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(from) : M _;
  }.
  Global Instance Get_to : Notation.Dot "to" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(to) : M _;
  }.
  Global Instance Get_AF_to : Notation.DoubleColon t "to" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(to) : M _;
  }.
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(value) : M _;
  }.
  Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(value) : M _;
  }.
End Transfer.
End Transfer.
Definition Transfer : Set := M.Val Transfer.t.

Module  Impl_core_convert_Into_lib_Event_t_for_lib_Transfer_t.
Section Impl_core_convert_Into_lib_Event_t_for_lib_Transfer_t.
  Ltac Self := exact lib.Transfer.t.
  
  Definition into (self : M.Val ltac:(Self)) : M (M.Val lib.Event.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val never.t)) :=
        core.panicking.panic (mk_str "not implemented") in
      never_to_any α0).
  
  Global Instance AssociatedFunction_into :
    Notation.DoubleColon ltac:(Self) "into" := {
    Notation.double_colon := into;
  }.
  
  Global Instance ℐ :
    core.convert.Into.Trait ltac:(Self) (T := lib.Event.t) := {
    core.convert.Into.into := into;
  }.
End Impl_core_convert_Into_lib_Event_t_for_lib_Transfer_t.
End Impl_core_convert_Into_lib_Event_t_for_lib_Transfer_t.

Module  Approval.
Section Approval.
  Record t : Set := {
    owner : lib.AccountId.t;
    spender : lib.AccountId.t;
    value : ltac:(lib.Balance);
  }.
  
  Global Instance Get_owner : Notation.Dot "owner" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(owner) : M _;
  }.
  Global Instance Get_AF_owner : Notation.DoubleColon t "owner" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(owner) : M _;
  }.
  Global Instance Get_spender : Notation.Dot "spender" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(spender) : M _;
  }.
  Global Instance Get_AF_spender : Notation.DoubleColon t "spender" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(spender) : M _;
  }.
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(value) : M _;
  }.
  Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(value) : M _;
  }.
End Approval.
End Approval.
Definition Approval : Set := M.Val Approval.t.

Module  Impl_core_convert_Into_lib_Event_t_for_lib_Approval_t.
Section Impl_core_convert_Into_lib_Event_t_for_lib_Approval_t.
  Ltac Self := exact lib.Approval.t.
  
  Definition into (self : M.Val ltac:(Self)) : M (M.Val lib.Event.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val never.t)) :=
        core.panicking.panic (mk_str "not implemented") in
      never_to_any α0).
  
  Global Instance AssociatedFunction_into :
    Notation.DoubleColon ltac:(Self) "into" := {
    Notation.double_colon := into;
  }.
  
  Global Instance ℐ :
    core.convert.Into.Trait ltac:(Self) (T := lib.Event.t) := {
    core.convert.Into.into := into;
  }.
End Impl_core_convert_Into_lib_Event_t_for_lib_Approval_t.
End Impl_core_convert_Into_lib_Event_t_for_lib_Approval_t.

Module Error.
  Inductive t : Set :=
  | InsufficientBalance
  | InsufficientAllowance.
End Error.
Definition Error : Set := M.Val Error.t.

Ltac Result T := exact (core.result.Result.t T lib.Error.t).

Module  Impl_lib_Environment_t.
Section Impl_lib_Environment_t.
  Ltac Self := exact lib.Environment.t.
  
  Definition caller
      (self : M.Val (ref ltac:(Self)))
      : M (M.Val lib.AccountId.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val never.t)) :=
        core.panicking.panic (mk_str "not implemented") in
      never_to_any α0).
  
  Global Instance AssociatedFunction_caller :
    Notation.DoubleColon ltac:(Self) "caller" := {
    Notation.double_colon := caller;
  }.
  
  Definition emit_event
      {E : Set}
      {ℋ_0 : core.convert.Into.Trait E (T := lib.Event.t)}
      (self : M.Val (ref ltac:(Self)))
      (event : M.Val E)
      : M (M.Val unit) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val never.t)) :=
        core.panicking.panic (mk_str "not implemented") in
      never_to_any α0).
  
  Global Instance AssociatedFunction_emit_event
      {E : Set}
      {ℋ_0 : core.convert.Into.Trait E (T := lib.Event.t)} :
    Notation.DoubleColon ltac:(Self) "emit_event" := {
    Notation.double_colon := emit_event (E := E);
  }.
End Impl_lib_Environment_t.
End Impl_lib_Environment_t.

Module  Impl_lib_Erc20_t.
Section Impl_lib_Erc20_t.
  Ltac Self := exact lib.Erc20.t.
  
  Definition init_env : M (M.Val lib.Environment.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val never.t)) :=
        core.panicking.panic (mk_str "not implemented") in
      never_to_any α0).
  
  Global Instance AssociatedFunction_init_env :
    Notation.DoubleColon ltac:(Self) "init_env" := {
    Notation.double_colon := init_env;
  }.
  
  Definition env
      (self : M.Val (ref ltac:(Self)))
      : M (M.Val lib.Environment.t) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val never.t)) :=
        core.panicking.panic (mk_str "not implemented") in
      never_to_any α0).
  
  Global Instance AssociatedFunction_env :
    Notation.DoubleColon ltac:(Self) "env" := {
    Notation.double_colon := env;
  }.
End Impl_lib_Erc20_t.
End Impl_lib_Erc20_t.

Module  Impl_lib_Erc20_t_2.
Section Impl_lib_Erc20_t_2.
  Ltac Self := exact lib.Erc20.t.
  
  Definition new
      (total_supply : M.Val ltac:(lib.Balance))
      : M (M.Val ltac:(Self)) :=
    M.function_body
      (let* balances :
          ltac:(refine (M.Val (lib.Mapping.t lib.AccountId.t u128.t))) :=
        core.default.Default.default
          (Self := lib.Mapping.t lib.AccountId.t u128.t)
          (Trait := ltac:(refine _)) in
      let* caller : ltac:(refine (M.Val lib.AccountId.t)) :=
        let* α0 : ltac:(refine (M.Val lib.Environment.t)) :=
          lib.Erc20.t::["init_env"] in
        let* α1 : ltac:(refine (M.Val (ref lib.Environment.t))) := borrow α0 in
        lib.Environment.t::["caller"] α1 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 :
            ltac:(refine
              (M.Val (mut_ref (lib.Mapping.t lib.AccountId.t u128.t)))) :=
          borrow_mut balances in
        (lib.Mapping.t lib.AccountId.t u128.t)::["insert"]
          α0
          caller
          total_supply in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val lib.Environment.t)) :=
          lib.Erc20.t::["init_env"] in
        let* α1 : ltac:(refine (M.Val (ref lib.Environment.t))) := borrow α0 in
        let* α2 :
            ltac:(refine (M.Val (core.option.Option.t lib.AccountId.t))) :=
          M.alloc core.option.Option.None in
        let* α3 := M.read α2 in
        let* α4 := M.read caller in
        let* α5 :
            ltac:(refine (M.Val (core.option.Option.t lib.AccountId.t))) :=
          M.alloc (core.option.Option.Some α4) in
        let* α6 := M.read α5 in
        let* α7 := M.read total_supply in
        let* α8 : ltac:(refine (M.Val lib.Transfer.t)) :=
          M.alloc
            {|
              lib.Transfer.from := α3;
              lib.Transfer.to := α6;
              lib.Transfer.value := α7;
            |} in
        lib.Environment.t::["emit_event"] α1 α8 in
      let* α0 := M.read total_supply in
      let* α1 := M.read balances in
      let* α2 :
          ltac:(refine
            (M.Val
              (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t))) :=
        core.default.Default.default
          (Self := lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t)
          (Trait := ltac:(refine _)) in
      let* α3 := M.read α2 in
      M.alloc
        {|
          lib.Erc20.total_supply := α0;
          lib.Erc20.balances := α1;
          lib.Erc20.allowances := α3;
        |}).
  
  Global Instance AssociatedFunction_new :
    Notation.DoubleColon ltac:(Self) "new" := {
    Notation.double_colon := new;
  }.
  
  Definition total_supply
      (self : M.Val (ref ltac:(Self)))
      : M (M.Val ltac:(lib.Balance)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
      α0.["total_supply"]).
  
  Global Instance AssociatedFunction_total_supply :
    Notation.DoubleColon ltac:(Self) "total_supply" := {
    Notation.double_colon := total_supply;
  }.
  
  Definition balance_of_impl
      (self : M.Val (ref ltac:(Self)))
      (owner : M.Val (ref lib.AccountId.t))
      : M (M.Val ltac:(lib.Balance)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
      let* α1 : ltac:(refine (M.Val (lib.Mapping.t lib.AccountId.t u128.t))) :=
        α0.["balances"] in
      let* α2 :
          ltac:(refine (M.Val (ref (lib.Mapping.t lib.AccountId.t u128.t)))) :=
        borrow α1 in
      let* α3 : ltac:(refine (M.Val lib.AccountId.t)) := deref owner in
      let* α4 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow α3 in
      let* α5 : ltac:(refine (M.Val (core.option.Option.t u128.t))) :=
        (lib.Mapping.t lib.AccountId.t u128.t)::["get"] α2 α4 in
      (core.option.Option.t u128.t)::["unwrap_or_default"] α5).
  
  Global Instance AssociatedFunction_balance_of_impl :
    Notation.DoubleColon ltac:(Self) "balance_of_impl" := {
    Notation.double_colon := balance_of_impl;
  }.
  
  Definition balance_of
      (self : M.Val (ref ltac:(Self)))
      (owner : M.Val lib.AccountId.t)
      : M (M.Val ltac:(lib.Balance)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
      let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow owner in
      lib.Erc20.t::["balance_of_impl"] α1 α2).
  
  Global Instance AssociatedFunction_balance_of :
    Notation.DoubleColon ltac:(Self) "balance_of" := {
    Notation.double_colon := balance_of;
  }.
  
  Definition allowance_impl
      (self : M.Val (ref ltac:(Self)))
      (owner : M.Val (ref lib.AccountId.t))
      (spender : M.Val (ref lib.AccountId.t))
      : M (M.Val ltac:(lib.Balance)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
      let* α1 :
          ltac:(refine
            (M.Val
              (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t))) :=
        α0.["allowances"] in
      let* α2 :
          ltac:(refine
            (M.Val
              (ref
                (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t)))) :=
        borrow α1 in
      let* α3 : ltac:(refine (M.Val lib.AccountId.t)) := deref owner in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val lib.AccountId.t)) := deref spender in
      let* α6 := M.read α5 in
      let* α7 : ltac:(refine (M.Val (lib.AccountId.t * lib.AccountId.t))) :=
        M.alloc (α4, α6) in
      let* α8 :
          ltac:(refine (M.Val (ref (lib.AccountId.t * lib.AccountId.t)))) :=
        borrow α7 in
      let* α9 : ltac:(refine (M.Val (core.option.Option.t u128.t))) :=
        (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t)::["get"]
          α2
          α8 in
      (core.option.Option.t u128.t)::["unwrap_or_default"] α9).
  
  Global Instance AssociatedFunction_allowance_impl :
    Notation.DoubleColon ltac:(Self) "allowance_impl" := {
    Notation.double_colon := allowance_impl;
  }.
  
  Definition allowance
      (self : M.Val (ref ltac:(Self)))
      (owner : M.Val lib.AccountId.t)
      (spender : M.Val lib.AccountId.t)
      : M (M.Val ltac:(lib.Balance)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
      let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow owner in
      let* α3 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow spender in
      lib.Erc20.t::["allowance_impl"] α1 α2 α3).
  
  Global Instance AssociatedFunction_allowance :
    Notation.DoubleColon ltac:(Self) "allowance" := {
    Notation.double_colon := allowance;
  }.
  
  Definition transfer_from_to
      (self : M.Val (mut_ref ltac:(Self)))
      (from : M.Val (ref lib.AccountId.t))
      (to : M.Val (ref lib.AccountId.t))
      (value : M.Val ltac:(lib.Balance))
      : M (M.Val ltac:(lib.Result unit)) :=
    M.function_body
      (let* from_balance : ltac:(refine (M.Val u128.t)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val lib.AccountId.t)) := deref from in
        let* α3 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow α2 in
        lib.Erc20.t::["balance_of_impl"] α1 α3 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val bool.t)) := BinOp.lt from_balance value in
        let* α1 : ltac:(refine (M.Val bool.t)) := use α0 in
        let* α2 := M.read α1 in
        if (α2 : bool) then
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val lib.Error.t)) :=
              M.alloc lib.Error.InsufficientBalance in
            let* α1 := M.read α0 in
            let* α2 :
                ltac:(refine (M.Val (core.result.Result.t unit lib.Error.t))) :=
              M.alloc (core.result.Result.Err α1) in
            M.return_ α2 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 :
            ltac:(refine (M.Val (lib.Mapping.t lib.AccountId.t u128.t))) :=
          α0.["balances"] in
        let* α2 :
            ltac:(refine
              (M.Val (mut_ref (lib.Mapping.t lib.AccountId.t u128.t)))) :=
          borrow_mut α1 in
        let* α3 : ltac:(refine (M.Val lib.AccountId.t)) := deref from in
        let* α4 : ltac:(refine (M.Val u128.t)) :=
          BinOp.sub from_balance value in
        (lib.Mapping.t lib.AccountId.t u128.t)::["insert"] α2 α3 α4 in
      let* to_balance : ltac:(refine (M.Val u128.t)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val lib.AccountId.t)) := deref to in
        let* α3 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow α2 in
        lib.Erc20.t::["balance_of_impl"] α1 α3 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 :
            ltac:(refine (M.Val (lib.Mapping.t lib.AccountId.t u128.t))) :=
          α0.["balances"] in
        let* α2 :
            ltac:(refine
              (M.Val (mut_ref (lib.Mapping.t lib.AccountId.t u128.t)))) :=
          borrow_mut α1 in
        let* α3 : ltac:(refine (M.Val lib.AccountId.t)) := deref to in
        let* α4 : ltac:(refine (M.Val u128.t)) := BinOp.add to_balance value in
        (lib.Mapping.t lib.AccountId.t u128.t)::["insert"] α2 α3 α4 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val lib.Environment.t)) :=
          lib.Erc20.t::["env"] α1 in
        let* α3 : ltac:(refine (M.Val (ref lib.Environment.t))) := borrow α2 in
        let* α4 : ltac:(refine (M.Val lib.AccountId.t)) := deref from in
        let* α5 := M.read α4 in
        let* α6 :
            ltac:(refine (M.Val (core.option.Option.t lib.AccountId.t))) :=
          M.alloc (core.option.Option.Some α5) in
        let* α7 := M.read α6 in
        let* α8 : ltac:(refine (M.Val lib.AccountId.t)) := deref to in
        let* α9 := M.read α8 in
        let* α10 :
            ltac:(refine (M.Val (core.option.Option.t lib.AccountId.t))) :=
          M.alloc (core.option.Option.Some α9) in
        let* α11 := M.read α10 in
        let* α12 := M.read value in
        let* α13 : ltac:(refine (M.Val lib.Transfer.t)) :=
          M.alloc
            {|
              lib.Transfer.from := α7;
              lib.Transfer.to := α11;
              lib.Transfer.value := α12;
            |} in
        lib.Environment.t::["emit_event"] α3 α13 in
      let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
      let* α1 := M.read α0 in
      M.alloc (core.result.Result.Ok α1)).
  
  Global Instance AssociatedFunction_transfer_from_to :
    Notation.DoubleColon ltac:(Self) "transfer_from_to" := {
    Notation.double_colon := transfer_from_to;
  }.
  
  Definition transfer
      (self : M.Val (mut_ref ltac:(Self)))
      (to : M.Val lib.AccountId.t)
      (value : M.Val ltac:(lib.Balance))
      : M (M.Val ltac:(lib.Result unit)) :=
    M.function_body
      (let* from : ltac:(refine (M.Val lib.AccountId.t)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val lib.Environment.t)) :=
          lib.Erc20.t::["env"] α1 in
        let* α3 : ltac:(refine (M.Val (ref lib.Environment.t))) := borrow α2 in
        lib.Environment.t::["caller"] α3 in
      let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
      let* α1 : ltac:(refine (M.Val (mut_ref lib.Erc20.t))) := borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow from in
      let* α3 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow to in
      lib.Erc20.t::["transfer_from_to"] α1 α2 α3 value).
  
  Global Instance AssociatedFunction_transfer :
    Notation.DoubleColon ltac:(Self) "transfer" := {
    Notation.double_colon := transfer;
  }.
  
  Definition approve
      (self : M.Val (mut_ref ltac:(Self)))
      (spender : M.Val lib.AccountId.t)
      (value : M.Val ltac:(lib.Balance))
      : M (M.Val ltac:(lib.Result unit)) :=
    M.function_body
      (let* owner : ltac:(refine (M.Val lib.AccountId.t)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val lib.Environment.t)) :=
          lib.Erc20.t::["env"] α1 in
        let* α3 : ltac:(refine (M.Val (ref lib.Environment.t))) := borrow α2 in
        lib.Environment.t::["caller"] α3 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 :
            ltac:(refine
              (M.Val
                (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t))) :=
          α0.["allowances"] in
        let* α2 :
            ltac:(refine
              (M.Val
                (mut_ref
                  (lib.Mapping.t
                    (lib.AccountId.t * lib.AccountId.t)
                    u128.t)))) :=
          borrow_mut α1 in
        let* α3 := M.read owner in
        let* α4 := M.read spender in
        let* α5 : ltac:(refine (M.Val (lib.AccountId.t * lib.AccountId.t))) :=
          M.alloc (α3, α4) in
        (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t)::["insert"]
          α2
          α5
          value in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val lib.Environment.t)) :=
          lib.Erc20.t::["env"] α1 in
        let* α3 : ltac:(refine (M.Val (ref lib.Environment.t))) := borrow α2 in
        let* α4 := M.read owner in
        let* α5 := M.read spender in
        let* α6 := M.read value in
        let* α7 : ltac:(refine (M.Val lib.Approval.t)) :=
          M.alloc
            {|
              lib.Approval.owner := α4;
              lib.Approval.spender := α5;
              lib.Approval.value := α6;
            |} in
        lib.Environment.t::["emit_event"] α3 α7 in
      let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
      let* α1 := M.read α0 in
      M.alloc (core.result.Result.Ok α1)).
  
  Global Instance AssociatedFunction_approve :
    Notation.DoubleColon ltac:(Self) "approve" := {
    Notation.double_colon := approve;
  }.
  
  Definition transfer_from
      (self : M.Val (mut_ref ltac:(Self)))
      (from : M.Val lib.AccountId.t)
      (to : M.Val lib.AccountId.t)
      (value : M.Val ltac:(lib.Balance))
      : M (M.Val ltac:(lib.Result unit)) :=
    M.function_body
      (let* caller : ltac:(refine (M.Val lib.AccountId.t)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val lib.Environment.t)) :=
          lib.Erc20.t::["env"] α1 in
        let* α3 : ltac:(refine (M.Val (ref lib.Environment.t))) := borrow α2 in
        lib.Environment.t::["caller"] α3 in
      let* allowance : ltac:(refine (M.Val u128.t)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (ref lib.Erc20.t))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow from in
        let* α3 : ltac:(refine (M.Val (ref lib.AccountId.t))) :=
          borrow caller in
        lib.Erc20.t::["allowance_impl"] α1 α2 α3 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val bool.t)) := BinOp.lt allowance value in
        let* α1 : ltac:(refine (M.Val bool.t)) := use α0 in
        let* α2 := M.read α1 in
        if (α2 : bool) then
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val lib.Error.t)) :=
              M.alloc lib.Error.InsufficientAllowance in
            let* α1 := M.read α0 in
            let* α2 :
                ltac:(refine (M.Val (core.result.Result.t unit lib.Error.t))) :=
              M.alloc (core.result.Result.Err α1) in
            M.return_ α2 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 : ltac:(refine (M.Val (mut_ref lib.Erc20.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow from in
        let* α3 : ltac:(refine (M.Val (ref lib.AccountId.t))) := borrow to in
        let* α4 :
            ltac:(refine (M.Val (core.result.Result.t unit lib.Error.t))) :=
          lib.Erc20.t::["transfer_from_to"] α1 α2 α3 value in
        let* α5 :
            ltac:(refine
              (M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t lib.Error.t)
                  unit))) :=
          (core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit lib.Error.t)
              (Trait := ltac:(refine _)))
            α4 in
        let* α6 := M.read α5 in
        match α6 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 :
              ltac:(refine (M.Val (core.result.Result.t unit lib.Error.t))) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := core.result.Result.t unit lib.Error.t)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine (M.Val never.t)) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val lib.Erc20.t)) := deref self in
        let* α1 :
            ltac:(refine
              (M.Val
                (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t))) :=
          α0.["allowances"] in
        let* α2 :
            ltac:(refine
              (M.Val
                (mut_ref
                  (lib.Mapping.t
                    (lib.AccountId.t * lib.AccountId.t)
                    u128.t)))) :=
          borrow_mut α1 in
        let* α3 := M.read from in
        let* α4 := M.read caller in
        let* α5 : ltac:(refine (M.Val (lib.AccountId.t * lib.AccountId.t))) :=
          M.alloc (α3, α4) in
        let* α6 : ltac:(refine (M.Val u128.t)) := BinOp.sub allowance value in
        (lib.Mapping.t (lib.AccountId.t * lib.AccountId.t) u128.t)::["insert"]
          α2
          α5
          α6 in
      let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
      let* α1 := M.read α0 in
      M.alloc (core.result.Result.Ok α1)).
  
  Global Instance AssociatedFunction_transfer_from :
    Notation.DoubleColon ltac:(Self) "transfer_from" := {
    Notation.double_colon := transfer_from;
  }.
End Impl_lib_Erc20_t_2.
End Impl_lib_Erc20_t_2.
