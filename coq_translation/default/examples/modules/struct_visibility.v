(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module my.
  Module  OpenBox.
  Section OpenBox.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Record t : Set := {
      contents : T;
    }.
    
    Global Instance Get_contents : Notation.Dot "contents" := {
      Notation.dot x := let* x := M.read x in M.pure x.(contents) : M _;
    }.
    Global Instance Get_AF_contents : Notation.DoubleColon t "contents" := {
      Notation.double_colon x :=
        let* x := M.read x in M.pure x.(contents) : M _;
    }.
  End OpenBox.
  End OpenBox.
  Definition OpenBox (T : Set) `{ℋ : State.Trait} : Set :=
    M.Val (OpenBox.t (T := T)).
  
  Module  ClosedBox.
  Section ClosedBox.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Record t : Set := {
      contents : T;
    }.
    
    Global Instance Get_contents : Notation.Dot "contents" := {
      Notation.dot x := let* x := M.read x in M.pure x.(contents) : M _;
    }.
    Global Instance Get_AF_contents : Notation.DoubleColon t "contents" := {
      Notation.double_colon x :=
        let* x := M.read x in M.pure x.(contents) : M _;
    }.
  End ClosedBox.
  End ClosedBox.
  Definition ClosedBox (T : Set) `{ℋ : State.Trait} : Set :=
    M.Val (ClosedBox.t (T := T)).
  
  Module  Impl_struct_visibility_my_ClosedBox_T.
  Section Impl_struct_visibility_my_ClosedBox_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Definition Self : Set := struct_visibility.my.ClosedBox T.
    
    Definition new (contents : T) : M (struct_visibility.my.ClosedBox T) :=
      M.function_body
        (M.alloc {| struct_visibility.my.ClosedBox.contents := contents; |}).
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_struct_visibility_my_ClosedBox_T.
  End Impl_struct_visibility_my_ClosedBox_T.
End my.

Module  OpenBox.
Section OpenBox.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Record t : Set := {
    contents : T;
  }.
  
  Global Instance Get_contents : Notation.Dot "contents" := {
    Notation.dot x := let* x := M.read x in M.pure x.(contents) : M _;
  }.
  Global Instance Get_AF_contents : Notation.DoubleColon t "contents" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(contents) : M _;
  }.
End OpenBox.
End OpenBox.
Definition OpenBox (T : Set) `{ℋ : State.Trait} : Set :=
  M.Val (OpenBox.t (T := T)).

Module  ClosedBox.
Section ClosedBox.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Record t : Set := {
    contents : T;
  }.
  
  Global Instance Get_contents : Notation.Dot "contents" := {
    Notation.dot x := let* x := M.read x in M.pure x.(contents) : M _;
  }.
  Global Instance Get_AF_contents : Notation.DoubleColon t "contents" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(contents) : M _;
  }.
End ClosedBox.
End ClosedBox.
Definition ClosedBox (T : Set) `{ℋ : State.Trait} : Set :=
  M.Val (ClosedBox.t (T := T)).

Module  Impl_struct_visibility_my_ClosedBox_T_2.
Section Impl_struct_visibility_my_ClosedBox_T_2.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Definition Self : Set := struct_visibility.my.ClosedBox T.
  
  Definition new (contents : T) : M (struct_visibility.my.ClosedBox T) :=
    M.function_body
      (M.alloc {| struct_visibility.my.ClosedBox.contents := contents; |}).
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_struct_visibility_my_ClosedBox_T_2.
End Impl_struct_visibility_my_ClosedBox_T_2.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* open_box : ltac:(refine (struct_visibility.my.OpenBox (ref str))) :=
      M.alloc
        {| struct_visibility.my.OpenBox.contents := mk_str "public information";
        |} in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "The open box contains: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref str)) := open_box.["contents"] in
        let* α6 : ltac:(refine (ref (ref str))) := borrow α5 in
        let* α7 : ltac:(refine (ref str)) := deref α6 in
        let* α8 : ltac:(refine (ref (ref str))) := borrow α7 in
        let* α9 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α8 in
        let* α10 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α9 ] in
        let* α11 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α10 in
        let* α12 : ltac:(refine (array core.fmt.rt.Argument)) := deref α11 in
        let* α13 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α12 in
        let* α14 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α13 in
        let* α15 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α14 in
        std.io.stdio._print α15 in
      M.alloc tt in
    let* _closed_box :
        ltac:(refine (struct_visibility.my.ClosedBox (ref str))) :=
      (struct_visibility.my.ClosedBox (ref str))::["new"]
        (mk_str "classified information") in
    M.alloc tt).
