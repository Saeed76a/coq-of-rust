(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition message `{H : State.Trait} : ref str := run (Pure "Hello, World!").

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H : State.Trait} : M (H := H) unit :=
  let* _ :=
    let* _ :=
      let* α0 := format_argument::["new_display"] (addr_of test0.message) in
      let* α1 :=
        format_arguments::["new_v1"] (addr_of [ ""; "
" ]) (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt in
  let number := core.option.Option.Some 7 in
  let letter := core.option.Option.None in
  let emoticon := core.option.Option.None in
  let* _ :=
    match number with
    | core.option.Option.Some i =>
      let* _ :=
        let* _ :=
          let* α0 := format_argument::["new_debug"] (addr_of i) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Matched "; "!
" ])
              (addr_of [ α0 ]) in
          std.io.stdio._print α1 in
        Pure tt in
      Pure tt
    end in
  let* _ :=
    match letter with
    | core.option.Option.Some j =>
      let* _ :=
        let* _ :=
          let* α0 := format_argument::["new_debug"] (addr_of j) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Matched "; "!
" ])
              (addr_of [ α0 ]) in
          std.io.stdio._print α1 in
        Pure tt in
      Pure tt
    end in
  let i_like_letters := false in
  match emoticon with
  | core.option.Option.Some i =>
    let* _ :=
      let* _ :=
        let* α0 := format_argument::["new_debug"] (addr_of i) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "Matched "; "!
" ])
            (addr_of [ α0 ]) in
        std.io.stdio._print α1 in
      Pure tt in
    Pure tt
  end.
