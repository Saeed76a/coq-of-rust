(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Owner.
Section Owner.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Owner.
End Owner.
Definition Owner : Set := M.Val Owner.t.

Module  Impl_scoping_rules_lifetimes_methods_Owner_t.
Section Impl_scoping_rules_lifetimes_methods_Owner_t.
  Ltac Self := exact scoping_rules_lifetimes_methods.Owner.t.
  
  Definition add_one (self : M.Val (mut_ref ltac:(Self))) : M (M.Val unit) :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 :
            ltac:(refine (M.Val scoping_rules_lifetimes_methods.Owner.t)) :=
          deref self in
        let* α1 : ltac:(refine (M.Val i32.t)) := α0.["0"] in
        let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
        assign_op add α1 α2 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_add_one :
    Notation.DoubleColon ltac:(Self) "add_one" := {
    Notation.double_colon := add_one;
  }.
  
  Definition print (self : M.Val (ref ltac:(Self))) : M (M.Val unit) :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) :=
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
            M.alloc [ mk_str "`print`: "; mk_str "
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 :
              ltac:(refine (M.Val scoping_rules_lifetimes_methods.Owner.t)) :=
            deref self in
          let* α4 : ltac:(refine (M.Val i32.t)) := α3.["0"] in
          let* α5 : ltac:(refine (M.Val (ref i32.t))) := borrow α4 in
          let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_display"] α5 in
          let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α6 ] in
          let* α8 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α7 in
          let* α9 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α8 in
          let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α9 in
          std.io.stdio._print α10 in
        M.alloc tt in
      M.alloc tt).
  
  Global Instance AssociatedFunction_print :
    Notation.DoubleColon ltac:(Self) "print" := {
    Notation.double_colon := print;
  }.
End Impl_scoping_rules_lifetimes_methods_Owner_t.
End Impl_scoping_rules_lifetimes_methods_Owner_t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* owner :
        ltac:(refine (M.Val scoping_rules_lifetimes_methods.Owner.t)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 18 in
      let* α1 := M.read α0 in
      M.alloc (scoping_rules_lifetimes_methods.Owner.Build_t α1) in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val (mut_ref scoping_rules_lifetimes_methods.Owner.t))) :=
        borrow_mut owner in
      scoping_rules_lifetimes_methods.Owner.t::["add_one"] α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine (M.Val (ref scoping_rules_lifetimes_methods.Owner.t))) :=
        borrow owner in
      scoping_rules_lifetimes_methods.Owner.t::["print"] α0 in
    M.alloc tt).
