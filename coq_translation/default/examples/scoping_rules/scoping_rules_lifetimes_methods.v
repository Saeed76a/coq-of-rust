(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Owner.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    _ : i32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Owner.
Definition Owner := @Owner.t.

Module Impl_scoping_rules_lifetimes_methods_Owner.
  Definition Self := scoping_rules_lifetimes_methods.Owner.
  
  Definition add_one `{State.Trait} (self : mut_ref Self) : M unit :=
    let* _ :=
      let* α0 := deref self scoping_rules_lifetimes_methods.Owner in
      let* α1 := α0.["0"] in
      let* α2 := M.alloc 1 in
      assign_op add α1 α2 in
    Pure tt.
  
  Global Instance Method_add_one `{State.Trait} : Notation.Dot "add_one" := {
    Notation.dot := add_one;
  }.
  
  Definition print `{State.Trait} (self : ref Self) : M unit :=
    let* _ :=
      let* _ :=
        let* α0 := borrow [ mk_str "`print`: "; mk_str "
" ] (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := deref self scoping_rules_lifetimes_methods.Owner in
        let* α5 := α4.["0"] in
        let* α6 := borrow α5 i32 in
        let* α7 := deref α6 i32 in
        let* α8 := borrow α7 i32 in
        let* α9 := core.fmt.rt.Argument::["new_display"] α8 in
        let* α10 := borrow [ α9 ] (list core.fmt.rt.Argument) in
        let* α11 := deref α10 (list core.fmt.rt.Argument) in
        let* α12 := borrow α11 (list core.fmt.rt.Argument) in
        let* α13 := pointer_coercion "Unsize" α12 in
        let* α14 := core.fmt.Arguments::["new_v1"] α3 α13 in
        std.io.stdio._print α14 in
      Pure tt in
    Pure tt.
  
  Global Instance Method_print `{State.Trait} : Notation.Dot "print" := {
    Notation.dot := print;
  }.
End Impl_scoping_rules_lifetimes_methods_Owner.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{State.Trait} : M unit :=
  let* owner :=
    let* α0 := M.alloc 18 in
    Pure (scoping_rules_lifetimes_methods.Owner.Build_t α0) in
  let* _ :=
    let* α0 := borrow_mut owner scoping_rules_lifetimes_methods.Owner in
    scoping_rules_lifetimes_methods.Owner::["add_one"] α0 in
  let* _ :=
    let* α0 := borrow owner scoping_rules_lifetimes_methods.Owner in
    scoping_rules_lifetimes_methods.Owner::["print"] α0 in
  Pure tt.
