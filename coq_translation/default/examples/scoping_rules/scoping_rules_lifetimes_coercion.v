(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn multiply<'a>(first: &'a i32, second: &'a i32) -> i32 {
    first * second
}
*)
Definition multiply
    (first : M.Val (ref i32.t))
    (second : M.Val (ref i32.t))
    : M (M.Val i32.t) :=
  M.function_body
    ((core.ops.arith.Mul.mul (Self := ref i32.t) (Trait := ltac:(refine _)))
      first
      second).

(*
fn choose_first<'a: 'b, 'b>(first: &'a i32, _: &'b i32) -> &'b i32 {
    first
}
*)
Definition choose_first
    (first : M.Val (ref i32.t))
    (arg : M.Val (ref i32.t))
    : M (M.Val (ref i32.t)) :=
  M.function_body
    (let* α0 : ltac:(refine (M.Val i32.t)) := deref first in
    borrow α0).

(*
fn main() {
    let first = 2; // Longer lifetime

    {
        let second = 3; // Shorter lifetime

        println!("The product is {}", multiply(&first, &second));
        println!("{} is the first", choose_first(&first, &second));
    };
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* first : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* second : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
            M.alloc [ mk_str "The product is "; mk_str "
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow first in
          let* α4 : ltac:(refine (M.Val (ref i32.t))) := borrow second in
          let* α5 : ltac:(refine (M.Val i32.t)) :=
            scoping_rules_lifetimes_coercion.multiply α3 α4 in
          let* α6 : ltac:(refine (M.Val (ref i32.t))) := borrow α5 in
          let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_display"] α6 in
          let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α7 ] in
          let* α9 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α8 in
          let* α10 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α9 in
          let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α10 in
          std.io.stdio._print α11 in
        M.alloc tt in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
            M.alloc [ mk_str ""; mk_str " is the first
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow first in
          let* α4 : ltac:(refine (M.Val (ref i32.t))) := borrow second in
          let* α5 : ltac:(refine (M.Val (ref i32.t))) :=
            scoping_rules_lifetimes_coercion.choose_first α3 α4 in
          let* α6 : ltac:(refine (M.Val (ref (ref i32.t)))) := borrow α5 in
          let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_display"] α6 in
          let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α7 ] in
          let* α9 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α8 in
          let* α10 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α9 in
          let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α10 in
          std.io.stdio._print α11 in
        M.alloc tt in
      M.alloc tt in
    M.alloc tt).
