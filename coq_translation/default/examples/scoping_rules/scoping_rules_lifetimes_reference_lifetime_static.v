(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NUM `{ℋ : State.Trait} : i32 := M.run (M.alloc 18).

Definition coerce_static `{ℋ : State.Trait} (arg : ref i32) : M (ref i32) :=
  M.function_body
    (let* α0 : ltac:(refine i32) :=
      deref scoping_rules_lifetimes_reference_lifetime_static.NUM in
    let* α1 : ltac:(refine (ref i32)) := borrow α0 in
    let* α2 : ltac:(refine i32) := deref α1 in
    borrow α2).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let static_string := mk_str "I'm in read-only memory" in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "static_string: "; mk_str "
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine (ref (ref str))) := borrow static_string in
          let* α6 : ltac:(refine (ref str)) := deref α5 in
          let* α7 : ltac:(refine (ref (ref str))) := borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          std.io.stdio._print α14 in
        M.alloc tt in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* lifetime_num : ltac:(refine i32) := M.alloc 9 in
      let* coerced_static : ltac:(refine (ref i32)) :=
        let* α0 : ltac:(refine (ref i32)) := borrow lifetime_num in
        let* α1 : ltac:(refine i32) := deref α0 in
        let* α2 : ltac:(refine (ref i32)) := borrow α1 in
        scoping_rules_lifetimes_reference_lifetime_static.coerce_static α2 in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "coerced_static: "; mk_str "
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine (ref (ref i32))) := borrow coerced_static in
          let* α6 : ltac:(refine (ref i32)) := deref α5 in
          let* α7 : ltac:(refine (ref (ref i32))) := borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          std.io.stdio._print α14 in
        M.alloc tt in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "NUM: "; mk_str " stays accessible!
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine i32) :=
          deref scoping_rules_lifetimes_reference_lifetime_static.NUM in
        let* α6 : ltac:(refine (ref i32)) := borrow α5 in
        let* α7 : ltac:(refine i32) := deref α6 in
        let* α8 : ltac:(refine (ref i32)) := borrow α7 in
        let* α9 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α8 in
        let* α10 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α9 ] in
        let* α11 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α10 in
        let* α12 : ltac:(refine (array core.fmt.rt.Argument)) := deref α11 in
        let* α13 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α12 in
        let* α14 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α13 in
        let* α15 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α14 in
        std.io.stdio._print α15 in
      M.alloc tt in
    M.alloc tt).
