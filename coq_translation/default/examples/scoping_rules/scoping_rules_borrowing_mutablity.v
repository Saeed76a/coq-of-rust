(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Book.
  Unset Primitive Projections.
  Record t : Set := {
    author : ref str;
    title : ref str;
    year : u32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_author : Notation.Dot "author" := {
    Notation.dot '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_AF_author : Notation.DoubleColon t "author" := {
    Notation.double_colon '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_title : Notation.Dot "title" := {
    Notation.dot '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_AF_title : Notation.DoubleColon t "title" := {
    Notation.double_colon '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_year : Notation.Dot "year" := {
    Notation.dot '(Build_t _ _ x2) := x2;
  }.
  Global Instance Get_AF_year : Notation.DoubleColon t "year" := {
    Notation.double_colon '(Build_t _ _ x2) := x2;
  }.
End Book.
Definition Book : Set := ⟅Book.t⟆.

Module Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self := scoping_rules_borrowing_mutablity.Book.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition clone
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') scoping_rules_borrowing_mutablity.Book :=
    let _ := tt in
    let _ := tt in
    let _ := tt in
    deref self scoping_rules_borrowing_mutablity.Book.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.

Module Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self := scoping_rules_borrowing_mutablity.Book.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.

Definition borrow_book
    `{H' : State.Trait}
    (book : ref scoping_rules_borrowing_mutablity.Book)
    : M (H := H') unit :=
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow
          [ "I immutably borrowed "; " - "; " edition
" ]
          (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := deref book scoping_rules_borrowing_mutablity.Book in
      let* α5 := borrow α4.["title"] (ref str) in
      let* α6 := deref α5 (ref str) in
      let* α7 := borrow α6 (ref str) in
      let* α8 := core.fmt.rt.Argument::["new_display"] α7 in
      let* α9 := deref book scoping_rules_borrowing_mutablity.Book in
      let* α10 := borrow α9.["year"] u32 in
      let* α11 := deref α10 u32 in
      let* α12 := borrow α11 u32 in
      let* α13 := core.fmt.rt.Argument::["new_display"] α12 in
      let* α14 := borrow [ α8; α13 ] (list core.fmt.rt.Argument) in
      let* α15 := deref α14 (list core.fmt.rt.Argument) in
      let* α16 := borrow α15 (list core.fmt.rt.Argument) in
      let* α17 := pointer_coercion "Unsize" α16 in
      let* α18 := core.fmt.Arguments::["new_v1"] α3 α17 in
      std.io.stdio._print α18 in
    Pure tt in
  Pure tt.

Definition new_edition
    `{H' : State.Trait}
    (book : mut_ref scoping_rules_borrowing_mutablity.Book)
    : M (H := H') unit :=
  let* _ :=
    let* α0 := deref book scoping_rules_borrowing_mutablity.Book in
    assign α0.["year"] 2014 in
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow [ "I mutably borrowed "; " - "; " edition
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := deref book scoping_rules_borrowing_mutablity.Book in
      let* α5 := borrow α4.["title"] (ref str) in
      let* α6 := deref α5 (ref str) in
      let* α7 := borrow α6 (ref str) in
      let* α8 := core.fmt.rt.Argument::["new_display"] α7 in
      let* α9 := deref book scoping_rules_borrowing_mutablity.Book in
      let* α10 := borrow α9.["year"] u32 in
      let* α11 := deref α10 u32 in
      let* α12 := borrow α11 u32 in
      let* α13 := core.fmt.rt.Argument::["new_display"] α12 in
      let* α14 := borrow [ α8; α13 ] (list core.fmt.rt.Argument) in
      let* α15 := deref α14 (list core.fmt.rt.Argument) in
      let* α16 := borrow α15 (list core.fmt.rt.Argument) in
      let* α17 := pointer_coercion "Unsize" α16 in
      let* α18 := core.fmt.Arguments::["new_v1"] α3 α17 in
      std.io.stdio._print α18 in
    Pure tt in
  Pure tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let immutabook :=
    {|
      scoping_rules_borrowing_mutablity.Book.author := "Douglas Hofstadter";
      scoping_rules_borrowing_mutablity.Book.title :=
        "G" ++ String.String "246" "del, Escher, Bach";
      scoping_rules_borrowing_mutablity.Book.year := 1979;
    |} in
  let mutabook := immutabook in
  let* _ :=
    let* α0 := borrow immutabook scoping_rules_borrowing_mutablity.Book in
    let* α1 := deref α0 scoping_rules_borrowing_mutablity.Book in
    let* α2 := borrow α1 scoping_rules_borrowing_mutablity.Book in
    scoping_rules_borrowing_mutablity.borrow_book α2 in
  let* _ :=
    let* α0 := borrow mutabook scoping_rules_borrowing_mutablity.Book in
    let* α1 := deref α0 scoping_rules_borrowing_mutablity.Book in
    let* α2 := borrow α1 scoping_rules_borrowing_mutablity.Book in
    scoping_rules_borrowing_mutablity.borrow_book α2 in
  let* _ :=
    let* α0 := borrow_mut mutabook scoping_rules_borrowing_mutablity.Book in
    let* α1 := deref α0 scoping_rules_borrowing_mutablity.Book in
    let* α2 := borrow_mut α1 scoping_rules_borrowing_mutablity.Book in
    scoping_rules_borrowing_mutablity.new_edition α2 in
  Pure tt.
