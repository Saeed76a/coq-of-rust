(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Borrowed.
Section Borrowed.
  Record t : Set := {
    x0 : ref i32.t;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(x0) : M _;
  }.
End Borrowed.
End Borrowed.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
  Ltac Self := exact scoping_rules_lifetimes_structs.Borrowed.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
      let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val str.t)) := deref (mk_str "Borrowed") in
      let* α3 : ltac:(refine (M.Val (ref str.t))) := borrow α2 in
      let* α4 :
          ltac:(refine (M.Val scoping_rules_lifetimes_structs.Borrowed.t)) :=
        deref self in
      let* α5 : ltac:(refine (M.Val (ref i32.t))) := α4.["0"] in
      let* α6 : ltac:(refine (M.Val (ref (ref i32.t)))) := borrow α5 in
      let* α7 : ltac:(refine (M.Val (ref (ref (ref i32.t))))) := borrow α6 in
      let* α8 : ltac:(refine (M.Val (ref type not implemented))) :=
        pointer_coercion "Unsize" α7 in
      core.fmt.Formatter.t::["debug_tuple_field1_finish"] α1 α3 α8).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.

Module  NamedBorrowed.
Section NamedBorrowed.
  Record t : Set := {
    x : ref i32.t;
    y : ref i32.t;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot x' := let* x' := M.read x' in M.alloc x'.(x) : M _;
  }.
  Global Instance Get_AF_x : Notation.DoubleColon t "x" := {
    Notation.double_colon x' := let* x' := M.read x' in M.alloc x'.(x) : M _;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot x := let* x := M.read x in M.alloc x.(y) : M _;
  }.
  Global Instance Get_AF_y : Notation.DoubleColon t "y" := {
    Notation.double_colon x := let* x := M.read x in M.alloc x.(y) : M _;
  }.
End NamedBorrowed.
End NamedBorrowed.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
  Ltac Self := exact scoping_rules_lifetimes_structs.NamedBorrowed.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
      let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val str.t)) := deref (mk_str "NamedBorrowed") in
      let* α3 : ltac:(refine (M.Val (ref str.t))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val str.t)) := deref (mk_str "x") in
      let* α5 : ltac:(refine (M.Val (ref str.t))) := borrow α4 in
      let* α6 :
          ltac:(refine
            (M.Val scoping_rules_lifetimes_structs.NamedBorrowed.t)) :=
        deref self in
      let* α7 : ltac:(refine (M.Val (ref i32.t))) := α6.["x"] in
      let* α8 : ltac:(refine (M.Val (ref (ref i32.t)))) := borrow α7 in
      let* α9 : ltac:(refine (M.Val (ref type not implemented))) :=
        pointer_coercion "Unsize" α8 in
      let* α10 : ltac:(refine (M.Val str.t)) := deref (mk_str "y") in
      let* α11 : ltac:(refine (M.Val (ref str.t))) := borrow α10 in
      let* α12 :
          ltac:(refine
            (M.Val scoping_rules_lifetimes_structs.NamedBorrowed.t)) :=
        deref self in
      let* α13 : ltac:(refine (M.Val (ref i32.t))) := α12.["y"] in
      let* α14 : ltac:(refine (M.Val (ref (ref i32.t)))) := borrow α13 in
      let* α15 : ltac:(refine (M.Val (ref (ref (ref i32.t))))) := borrow α14 in
      let* α16 : ltac:(refine (M.Val (ref type not implemented))) :=
        pointer_coercion "Unsize" α15 in
      core.fmt.Formatter.t::["debug_struct_field2_finish"] α1 α3 α5 α9 α11 α16).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.

Module Either.
  Inductive t : Set :=
  | Num (_ : i32.t)
  | Ref (_ : ref i32.t).
End Either.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
  Ltac Self := exact scoping_rules_lifetimes_structs.Either.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M (M.Val ltac:(core.fmt.Result)) :=
    M.function_body
      (let* α0 := M.read self in
      match α0 with
      | scoping_rules_lifetimes_structs.Either.Num __self_0 =>
        let* __self_0 := M.alloc __self_0 in
        let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
        let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val str.t)) := deref (mk_str "Num") in
        let* α3 : ltac:(refine (M.Val (ref str.t))) := borrow α2 in
        let* α4 : ltac:(refine (M.Val (ref (ref i32.t)))) := borrow __self_0 in
        let* α5 : ltac:(refine (M.Val (ref type not implemented))) :=
          pointer_coercion "Unsize" α4 in
        core.fmt.Formatter.t::["debug_tuple_field1_finish"] α1 α3 α5
      | scoping_rules_lifetimes_structs.Either.Ref __self_0 =>
        let* __self_0 := M.alloc __self_0 in
        let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
        let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val str.t)) := deref (mk_str "Ref") in
        let* α3 : ltac:(refine (M.Val (ref str.t))) := borrow α2 in
        let* α4 : ltac:(refine (M.Val (ref (ref (ref i32.t))))) :=
          borrow __self_0 in
        let* α5 : ltac:(refine (M.Val (ref type not implemented))) :=
          pointer_coercion "Unsize" α4 in
        core.fmt.Formatter.t::["debug_tuple_field1_finish"] α1 α3 α5
      end).
  
  Global Instance AssociatedFunction_fmt :
    Notation.DoubleColon ltac:(Self) "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.

(*
fn main() {
    let x = 18;
    let y = 15;

    let single = Borrowed(&x);
    let double = NamedBorrowed { x: &x, y: &y };
    let reference = Either::Ref(&x);
    let number = Either::Num(y);

    println!("x is borrowed in {:?}", single);
    println!("x and y are borrowed in {:?}", double);
    println!("x is borrowed in {:?}", reference);
    println!("y is *not* borrowed in {:?}", number);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* x : ltac:(refine (M.Val i32.t)) := M.alloc 18 in
    let* y : ltac:(refine (M.Val i32.t)) := M.alloc 15 in
    let* single :
        ltac:(refine (M.Val scoping_rules_lifetimes_structs.Borrowed.t)) :=
      let* α0 : ltac:(refine (M.Val (ref i32.t))) := borrow x in
      let* α1 := M.read α0 in
      M.alloc (scoping_rules_lifetimes_structs.Borrowed.Build_t α1) in
    let* double :
        ltac:(refine (M.Val scoping_rules_lifetimes_structs.NamedBorrowed.t)) :=
      let* α0 : ltac:(refine (M.Val (ref i32.t))) := borrow x in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (ref i32.t))) := borrow y in
      let* α3 := M.read α2 in
      M.alloc
        {|
          scoping_rules_lifetimes_structs.NamedBorrowed.x := α1;
          scoping_rules_lifetimes_structs.NamedBorrowed.y := α3;
        |} in
    let* reference :
        ltac:(refine (M.Val scoping_rules_lifetimes_structs.Either.t)) :=
      let* α0 : ltac:(refine (M.Val (ref i32.t))) := borrow x in
      let* α1 := M.read α0 in
      M.alloc (scoping_rules_lifetimes_structs.Either.Ref α1) in
    let* number :
        ltac:(refine (M.Val scoping_rules_lifetimes_structs.Either.t)) :=
      let* α0 := M.read y in
      M.alloc (scoping_rules_lifetimes_structs.Either.Num α0) in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "x is borrowed in "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (M.Val (ref scoping_rules_lifetimes_structs.Borrowed.t))) :=
          borrow single in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "x and y are borrowed in "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (M.Val (ref scoping_rules_lifetimes_structs.NamedBorrowed.t))) :=
          borrow double in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "x is borrowed in "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (M.Val (ref scoping_rules_lifetimes_structs.Either.t))) :=
          borrow reference in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "y is *not* borrowed in "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (M.Val (ref scoping_rules_lifetimes_structs.Either.t))) :=
          borrow number in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
