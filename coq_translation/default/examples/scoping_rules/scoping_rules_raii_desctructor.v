(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module ToDrop.
  Inductive t : Set := Build.
End ToDrop.
Definition ToDrop := @ToDrop.t.

Module Impl_core_ops_drop_Drop_for_scoping_rules_raii_desctructor_ToDrop.
  Definition Self := scoping_rules_raii_desctructor.ToDrop.
  
  Definition drop
      `{H' : State.Trait}
      (self : mut_ref Self)
      : M (H := H') unit :=
    let* _ :=
      let* _ :=
        let* α0 := borrow [ "ToDrop is being dropped
" ] (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := core.fmt.Arguments::["new_const"] α3 in
        std.io.stdio._print α4 in
      Pure tt in
    Pure tt.
  
  Global Instance Method_drop `{H' : State.Trait} : Notation.Dot "drop" := {
    Notation.dot := drop;
  }.
  
  Global Instance I : core.ops.drop.Drop.Trait Self := {
    core.ops.drop.Drop.drop `{H' : State.Trait} := drop;
  }.
  Global Hint Resolve I : core.
End Impl_core_ops_drop_Drop_for_scoping_rules_raii_desctructor_ToDrop.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let x := scoping_rules_raii_desctructor.ToDrop.Build_t tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "Made a ToDrop!
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := core.fmt.Arguments::["new_const"] α3 in
      std.io.stdio._print α4 in
    Pure tt in
  Pure tt.
