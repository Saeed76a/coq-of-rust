(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Foo.
  Inductive t `{ℋ : State.Trait} : Set :=
  | Bar.
End Foo.
Definition Foo `{ℋ : State.Trait} : Set := M.Val Foo.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* a : ltac:(refine if_let_challenge.Foo) :=
      M.alloc if_let_challenge.Foo.Bar in
    let* α0 : ltac:(refine bool) := let_if if_let_challenge.Foo.Bar  := a in
    if (α0 : bool) then
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "a is foobar
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α4 in
          std.io.stdio._print α5 in
        M.alloc tt in
      M.alloc tt
    else
      M.alloc tt).
