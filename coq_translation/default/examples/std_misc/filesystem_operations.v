(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn cat(path: &Path) -> io::Result<String> {
    let mut f = File::open(path)?;
    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
*)
Definition cat
    (path : M.Val (ref std.path.Path.t))
    : M (M.Val ltac:(std.io.error.Result alloc.string.String.t)) :=
  M.function_body
    (let* f : ltac:(refine (M.Val std.fs.File.t)) :=
      let* α0 :
          ltac:(refine
            (M.Val
              (core.result.Result.t std.fs.File.t std.io.error.Error.t))) :=
        std.fs.File.t::["open"] path in
      let* α1 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  std.io.error.Error.t)
                std.fs.File.t))) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result.t std.fs.File.t std.io.error.Error.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 := M.read α1 in
      match α2 with
      | core.ops.control_flow.ControlFlow.Break residual =>
        let* residual := M.alloc residual in
        let* α0 :
            ltac:(refine
              (M.Val
                (core.result.Result.t
                  alloc.string.String.t
                  std.io.error.Error.t))) :=
          (core.ops.try_trait.FromResidual.from_residual
              (Self :=
                core.result.Result.t alloc.string.String.t std.io.error.Error.t)
              (Trait := ltac:(refine _)))
            residual in
        let* α1 : ltac:(refine (M.Val never.t)) := M.return_ α0 in
        never_to_any α1
      | core.ops.control_flow.ControlFlow.Continue val =>
        let* val := M.alloc val in
        M.pure val
      end in
    let* s : ltac:(refine (M.Val alloc.string.String.t)) :=
      alloc.string.String.t::["new"] in
    let* α0 : ltac:(refine (M.Val (mut_ref std.fs.File.t))) := borrow_mut f in
    let* α1 : ltac:(refine (M.Val (mut_ref alloc.string.String.t))) :=
      borrow_mut s in
    let* α2 :
        ltac:(refine
          (M.Val (core.result.Result.t usize.t std.io.error.Error.t))) :=
      (std.io.Read.read_to_string
          (Self := std.fs.File.t)
          (Trait := ltac:(refine _)))
        α0
        α1 in
    let* α3 := M.read α2 in
    match α3 with
    | core.result.Result.Ok _ =>
      let* α0 := M.read s in
      M.alloc (core.result.Result.Ok α0)
    | core.result.Result.Err e =>
      let* e := M.alloc e in
      let* α0 := M.read e in
      M.alloc (core.result.Result.Err α0)
    end).

(*
fn echo(s: &str, path: &Path) -> io::Result<()> {
    let mut f = File::create(path)?;

    f.write_all(s.as_bytes())
}
*)
Definition echo
    (s : M.Val (ref str.t))
    (path : M.Val (ref std.path.Path.t))
    : M (M.Val ltac:(std.io.error.Result unit)) :=
  M.function_body
    (let* f : ltac:(refine (M.Val std.fs.File.t)) :=
      let* α0 :
          ltac:(refine
            (M.Val
              (core.result.Result.t std.fs.File.t std.io.error.Error.t))) :=
        std.fs.File.t::["create"] path in
      let* α1 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  std.io.error.Error.t)
                std.fs.File.t))) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result.t std.fs.File.t std.io.error.Error.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 := M.read α1 in
      match α2 with
      | core.ops.control_flow.ControlFlow.Break residual =>
        let* residual := M.alloc residual in
        let* α0 :
            ltac:(refine
              (M.Val (core.result.Result.t unit std.io.error.Error.t))) :=
          (core.ops.try_trait.FromResidual.from_residual
              (Self := core.result.Result.t unit std.io.error.Error.t)
              (Trait := ltac:(refine _)))
            residual in
        let* α1 : ltac:(refine (M.Val never.t)) := M.return_ α0 in
        never_to_any α1
      | core.ops.control_flow.ControlFlow.Continue val =>
        let* val := M.alloc val in
        M.pure val
      end in
    let* α0 : ltac:(refine (M.Val (mut_ref std.fs.File.t))) := borrow_mut f in
    let* α1 : ltac:(refine (M.Val str.t)) := deref s in
    let* α2 : ltac:(refine (M.Val (ref str.t))) := borrow α1 in
    let* α3 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
      str.t::["as_bytes"] α2 in
    let* α4 : ltac:(refine (M.Val (slice u8.t))) := deref α3 in
    let* α5 : ltac:(refine (M.Val (ref (slice u8.t)))) := borrow α4 in
    (std.io.Write.write_all (Self := std.fs.File.t) (Trait := ltac:(refine _)))
      α0
      α5).

(*
fn touch(path: &Path) -> io::Result<()> {
    match OpenOptions::new().create(true).write(true).open(path) {
        Ok(_) => Ok(()),
        Err(e) => Err(e),
    }
}
*)
Definition touch
    (path : M.Val (ref std.path.Path.t))
    : M (M.Val ltac:(std.io.error.Result unit)) :=
  M.function_body
    (let* α0 : ltac:(refine (M.Val std.fs.OpenOptions.t)) :=
      std.fs.OpenOptions.t::["new"] in
    let* α1 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
      borrow_mut α0 in
    let* α2 : ltac:(refine (M.Val bool.t)) := M.alloc true in
    let* α3 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
      std.fs.OpenOptions.t::["create"] α1 α2 in
    let* α4 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α3 in
    let* α5 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
      borrow_mut α4 in
    let* α6 : ltac:(refine (M.Val bool.t)) := M.alloc true in
    let* α7 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
      std.fs.OpenOptions.t::["write"] α5 α6 in
    let* α8 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α7 in
    let* α9 : ltac:(refine (M.Val (ref std.fs.OpenOptions.t))) := borrow α8 in
    let* α10 :
        ltac:(refine
          (M.Val (core.result.Result.t std.fs.File.t std.io.error.Error.t))) :=
      std.fs.OpenOptions.t::["open"] α9 path in
    let* α11 := M.read α10 in
    match α11 with
    | core.result.Result.Ok _ =>
      let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
      let* α1 := M.read α0 in
      M.alloc (core.result.Result.Ok α1)
    | core.result.Result.Err e =>
      let* e := M.alloc e in
      let* α0 := M.read e in
      M.alloc (core.result.Result.Err α0)
    end).

(*
fn main() {
    println!("`mkdir a`");
    // Create a directory, returns `io::Result<()>`
    match fs::create_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(_) => {}
    }

    println!("`echo hello > a/b.txt`");
    // The previous match can be simplified using the `unwrap_or_else` method
    echo("hello", &Path::new("a/b.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`mkdir -p a/c/d`");
    // Recursively create a directory, returns `io::Result<()>`
    fs::create_dir_all("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`touch a/c/e.txt`");
    touch(&Path::new("a/c/e.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`ln -s ../b.txt a/c/b.txt`");
    // Create a symbolic link, returns `io::Result<()>`
    if cfg!(target_family = "unix") {
        unix::fs::symlink("../b.txt", "a/c/b.txt").unwrap_or_else(|why| {
            println!("! {:?}", why.kind());
        });
    }

    println!("`cat a/c/b.txt`");
    match cat(&Path::new("a/c/b.txt")) {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(s) => println!("> {}", s),
    }

    println!("`ls a`");
    // Read the contents of a directory, returns `io::Result<Vec<Path>>`
    match fs::read_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(paths) => {
            for path in paths {
                println!("> {:?}", path.unwrap().path());
            }
        }
    }

    println!("`rm a/c/e.txt`");
    // Remove a file, returns `io::Result<()>`
    fs::remove_file("a/c/e.txt").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`rmdir a/c/d`");
    // Remove an empty directory, returns `io::Result<()>`
    fs::remove_dir("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`mkdir a`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val (core.result.Result.t unit std.io.error.Error.t))) :=
        std.fs.create_dir (mk_str "a") in
      let* α1 := M.read α0 in
      match α1 with
      | core.result.Result.Err why =>
        let* why := M.alloc why in
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
            M.alloc [ mk_str "! "; mk_str "
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
            borrow why in
          let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
            std.io.error.Error.t::["kind"] α3 in
          let* α5 : ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
            borrow α4 in
          let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_debug"] α5 in
          let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α6 ] in
          let* α8 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α7 in
          let* α9 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α8 in
          let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α9 in
          std.io.stdio._print α10 in
        M.alloc tt
      | core.result.Result.Ok _ => M.alloc tt
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`echo hello > a/b.txt`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "hello") in
      let* α1 : ltac:(refine (M.Val (ref str.t))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val str.t)) := deref (mk_str "a/b.txt") in
      let* α3 : ltac:(refine (M.Val (ref str.t))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val (ref std.path.Path.t))) :=
        std.path.Path.t::["new"] α3 in
      let* α5 : ltac:(refine (M.Val std.path.Path.t)) := deref α4 in
      let* α6 : ltac:(refine (M.Val (ref std.path.Path.t))) := borrow α5 in
      let* α7 :
          ltac:(refine
            (M.Val (core.result.Result.t unit std.io.error.Error.t))) :=
        filesystem_operations.echo α1 α6 in
      (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
        α7
        (let* _ : ltac:(refine (M.Val unit)) :=
          let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
              M.alloc [ mk_str "! "; mk_str "
" ] in
            let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
              borrow why in
            let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
              std.io.error.Error.t::["kind"] α3 in
            let* α5 : ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
              borrow α4 in
            let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
              core.fmt.rt.Argument.t::["new_debug"] α5 in
            let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
              M.alloc [ α6 ] in
            let* α8 :
                ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
              borrow α7 in
            let* α9 :
                ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
              pointer_coercion "Unsize" α8 in
            let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
              core.fmt.Arguments.t::["new_v1"] α2 α9 in
            std.io.stdio._print α10 in
          M.alloc tt in
        M.alloc tt) in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`mkdir -p a/c/d`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val (core.result.Result.t unit std.io.error.Error.t))) :=
        std.fs.create_dir_all (mk_str "a/c/d") in
      (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
        α0
        (let* _ : ltac:(refine (M.Val unit)) :=
          let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
              M.alloc [ mk_str "! "; mk_str "
" ] in
            let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
              borrow why in
            let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
              std.io.error.Error.t::["kind"] α3 in
            let* α5 : ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
              borrow α4 in
            let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
              core.fmt.rt.Argument.t::["new_debug"] α5 in
            let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
              M.alloc [ α6 ] in
            let* α8 :
                ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
              borrow α7 in
            let* α9 :
                ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
              pointer_coercion "Unsize" α8 in
            let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
              core.fmt.Arguments.t::["new_v1"] α2 α9 in
            std.io.stdio._print α10 in
          M.alloc tt in
        M.alloc tt) in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`touch a/c/e.txt`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "a/c/e.txt") in
      let* α1 : ltac:(refine (M.Val (ref str.t))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val (ref std.path.Path.t))) :=
        std.path.Path.t::["new"] α1 in
      let* α3 : ltac:(refine (M.Val std.path.Path.t)) := deref α2 in
      let* α4 : ltac:(refine (M.Val (ref std.path.Path.t))) := borrow α3 in
      let* α5 :
          ltac:(refine
            (M.Val (core.result.Result.t unit std.io.error.Error.t))) :=
        filesystem_operations.touch α4 in
      (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
        α5
        (let* _ : ltac:(refine (M.Val unit)) :=
          let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
              M.alloc [ mk_str "! "; mk_str "
" ] in
            let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
              borrow why in
            let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
              std.io.error.Error.t::["kind"] α3 in
            let* α5 : ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
              borrow α4 in
            let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
              core.fmt.rt.Argument.t::["new_debug"] α5 in
            let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
              M.alloc [ α6 ] in
            let* α8 :
                ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
              borrow α7 in
            let* α9 :
                ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
              pointer_coercion "Unsize" α8 in
            let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
              core.fmt.Arguments.t::["new_v1"] α2 α9 in
            std.io.stdio._print α10 in
          M.alloc tt in
        M.alloc tt) in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`ln -s ../b.txt a/c/b.txt`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val bool.t)) := M.alloc true in
      let* α1 : ltac:(refine (M.Val bool.t)) := use α0 in
      let* α2 := M.read α1 in
      if (α2 : bool) then
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 :
              ltac:(refine
                (M.Val (core.result.Result.t unit std.io.error.Error.t))) :=
            std.os.unix.fs.symlink (mk_str "../b.txt") (mk_str "a/c/b.txt") in
          (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
            α0
            (let* _ : ltac:(refine (M.Val unit)) :=
              let* _ : ltac:(refine (M.Val unit)) :=
                let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
                  M.alloc [ mk_str "! "; mk_str "
" ] in
                let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
                  borrow α0 in
                let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
                  pointer_coercion "Unsize" α1 in
                let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
                  borrow why in
                let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
                  std.io.error.Error.t::["kind"] α3 in
                let* α5 :
                    ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
                  borrow α4 in
                let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                  core.fmt.rt.Argument.t::["new_debug"] α5 in
                let* α7 :
                    ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
                  M.alloc [ α6 ] in
                let* α8 :
                    ltac:(refine
                      (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
                  borrow α7 in
                let* α9 :
                    ltac:(refine
                      (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
                  pointer_coercion "Unsize" α8 in
                let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                  core.fmt.Arguments.t::["new_v1"] α2 α9 in
                std.io.stdio._print α10 in
              M.alloc tt in
            M.alloc tt) in
        M.alloc tt
      else
        M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`cat a/c/b.txt`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "a/c/b.txt") in
      let* α1 : ltac:(refine (M.Val (ref str.t))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val (ref std.path.Path.t))) :=
        std.path.Path.t::["new"] α1 in
      let* α3 : ltac:(refine (M.Val std.path.Path.t)) := deref α2 in
      let* α4 : ltac:(refine (M.Val (ref std.path.Path.t))) := borrow α3 in
      let* α5 :
          ltac:(refine
            (M.Val
              (core.result.Result.t
                alloc.string.String.t
                std.io.error.Error.t))) :=
        filesystem_operations.cat α4 in
      let* α6 := M.read α5 in
      match α6 with
      | core.result.Result.Err why =>
        let* why := M.alloc why in
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
            M.alloc [ mk_str "! "; mk_str "
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
            borrow why in
          let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
            std.io.error.Error.t::["kind"] α3 in
          let* α5 : ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
            borrow α4 in
          let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_debug"] α5 in
          let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α6 ] in
          let* α8 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α7 in
          let* α9 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α8 in
          let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α9 in
          std.io.stdio._print α10 in
        M.alloc tt
      | core.result.Result.Ok s =>
        let* s := M.alloc s in
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
            M.alloc [ mk_str "> "; mk_str "
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref alloc.string.String.t))) :=
            borrow s in
          let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_display"] α3 in
          let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α4 ] in
          let* α6 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α5 in
          let* α7 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`ls a`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val
              (core.result.Result.t std.fs.ReadDir.t std.io.error.Error.t))) :=
        std.fs.read_dir (mk_str "a") in
      let* α1 := M.read α0 in
      match α1 with
      | core.result.Result.Err why =>
        let* why := M.alloc why in
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
            M.alloc [ mk_str "! "; mk_str "
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
            borrow why in
          let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
            std.io.error.Error.t::["kind"] α3 in
          let* α5 : ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
            borrow α4 in
          let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_debug"] α5 in
          let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α6 ] in
          let* α8 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α7 in
          let* α9 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α8 in
          let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α9 in
          std.io.stdio._print α10 in
        M.alloc tt
      | core.result.Result.Ok paths =>
        let* paths := M.alloc paths in
        let* α0 : ltac:(refine (M.Val std.fs.ReadDir.t)) :=
          (core.iter.traits.collect.IntoIterator.into_iter
              (Self := std.fs.ReadDir.t)
              (Trait := ltac:(refine _)))
            paths in
        let* α1 := M.read α0 in
        let* α2 : ltac:(refine (M.Val unit)) :=
          match α1 with
          | iter =>
            let* iter := M.alloc iter in
            loop
              (let* _ : ltac:(refine (M.Val unit)) :=
                let* α0 : ltac:(refine (M.Val (mut_ref std.fs.ReadDir.t))) :=
                  borrow_mut iter in
                let* α1 :
                    ltac:(refine
                      (M.Val
                        (core.option.Option.t
                          (core.result.Result.t
                            std.fs.DirEntry.t
                            std.io.error.Error.t)))) :=
                  (core.iter.traits.iterator.Iterator.next
                      (Self := std.fs.ReadDir.t)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 := M.read α1 in
                match α2 with
                | core.option.Option.None  =>
                  let* α0 : ltac:(refine (M.Val never.t)) := Break in
                  never_to_any α0
                | core.option.Option.Some path =>
                  let* path := M.alloc path in
                  let* _ : ltac:(refine (M.Val unit)) :=
                    let* _ : ltac:(refine (M.Val unit)) :=
                      let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
                        M.alloc [ mk_str "> "; mk_str "
" ] in
                      let* α1 :
                          ltac:(refine (M.Val (ref (array (ref str.t))))) :=
                        borrow α0 in
                      let* α2 :
                          ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
                        pointer_coercion "Unsize" α1 in
                      let* α3 : ltac:(refine (M.Val std.fs.DirEntry.t)) :=
                        (core.result.Result.t
                              std.fs.DirEntry.t
                              std.io.error.Error.t)::["unwrap"]
                          path in
                      let* α4 : ltac:(refine (M.Val (ref std.fs.DirEntry.t))) :=
                        borrow α3 in
                      let* α5 : ltac:(refine (M.Val std.path.PathBuf.t)) :=
                        std.fs.DirEntry.t::["path"] α4 in
                      let* α6 :
                          ltac:(refine (M.Val (ref std.path.PathBuf.t))) :=
                        borrow α5 in
                      let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                        core.fmt.rt.Argument.t::["new_debug"] α6 in
                      let* α8 :
                          ltac:(refine
                            (M.Val (array core.fmt.rt.Argument.t))) :=
                        M.alloc [ α7 ] in
                      let* α9 :
                          ltac:(refine
                            (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
                        borrow α8 in
                      let* α10 :
                          ltac:(refine
                            (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
                        pointer_coercion "Unsize" α9 in
                      let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                        core.fmt.Arguments.t::["new_v1"] α2 α10 in
                      std.io.stdio._print α11 in
                    M.alloc tt in
                  M.alloc tt
                end in
              M.alloc tt)
          end in
        use α2
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`rm a/c/e.txt`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val (core.result.Result.t unit std.io.error.Error.t))) :=
        std.fs.remove_file (mk_str "a/c/e.txt") in
      (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
        α0
        (let* _ : ltac:(refine (M.Val unit)) :=
          let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
              M.alloc [ mk_str "! "; mk_str "
" ] in
            let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
              borrow why in
            let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
              std.io.error.Error.t::["kind"] α3 in
            let* α5 : ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
              borrow α4 in
            let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
              core.fmt.rt.Argument.t::["new_debug"] α5 in
            let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
              M.alloc [ α6 ] in
            let* α8 :
                ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
              borrow α7 in
            let* α9 :
                ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
              pointer_coercion "Unsize" α8 in
            let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
              core.fmt.Arguments.t::["new_v1"] α2 α9 in
            std.io.stdio._print α10 in
          M.alloc tt in
        M.alloc tt) in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "`rmdir a/c/d`
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val (core.result.Result.t unit std.io.error.Error.t))) :=
        std.fs.remove_dir (mk_str "a/c/d") in
      (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
        α0
        (let* _ : ltac:(refine (M.Val unit)) :=
          let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
              M.alloc [ mk_str "! "; mk_str "
" ] in
            let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
              borrow why in
            let* α4 : ltac:(refine (M.Val std.io.error.ErrorKind.t)) :=
              std.io.error.Error.t::["kind"] α3 in
            let* α5 : ltac:(refine (M.Val (ref std.io.error.ErrorKind.t))) :=
              borrow α4 in
            let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
              core.fmt.rt.Argument.t::["new_debug"] α5 in
            let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
              M.alloc [ α6 ] in
            let* α8 :
                ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
              borrow α7 in
            let* α9 :
                ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
              pointer_coercion "Unsize" α8 in
            let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
              core.fmt.Arguments.t::["new_v1"] α2 α9 in
            std.io.stdio._print α10 in
          M.alloc tt in
        M.alloc tt) in
    M.alloc tt).
