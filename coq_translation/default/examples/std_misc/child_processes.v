(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let output = Command::new("rustc")
        .arg("--version")
        .output()
        .unwrap_or_else(|e| panic!("failed to execute process: {}", e));

    if output.status.success() {
        let s = String::from_utf8_lossy(&output.stdout);

        print!("rustc succeeded and stdout was:\n{}", s);
    } else {
        let s = String::from_utf8_lossy(&output.stderr);

        print!("rustc failed and stderr was:\n{}", s);
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* output : ltac:(refine (M.Val std.process.Output.t)) :=
      let* α0 : ltac:(refine (M.Val std.process.Command.t)) :=
        std.process.Command.t::["new"] (mk_str "rustc") in
      let* α1 : ltac:(refine (M.Val (mut_ref std.process.Command.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val (mut_ref std.process.Command.t))) :=
        std.process.Command.t::["arg"] α1 (mk_str "--version") in
      let* α3 : ltac:(refine (M.Val std.process.Command.t)) := deref α2 in
      let* α4 : ltac:(refine (M.Val (mut_ref std.process.Command.t))) :=
        borrow_mut α3 in
      let* α5 :
          ltac:(refine
            (M.Val
              (core.result.Result.t
                std.process.Output.t
                std.io.error.Error.t))) :=
        std.process.Command.t::["output"] α4 in
      (core.result.Result.t
            std.process.Output.t
            std.io.error.Error.t)::["unwrap_or_else"]
        α5
        (let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "failed to execute process: " ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref std.io.error.Error.t))) :=
          borrow e in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        let* α9 : ltac:(refine (M.Val never.t)) :=
          core.panicking.panic_fmt α8 in
        never_to_any α9) in
    let* α0 : ltac:(refine (M.Val std.process.ExitStatus.t)) :=
      output.["status"] in
    let* α1 : ltac:(refine (M.Val (ref std.process.ExitStatus.t))) :=
      borrow α0 in
    let* α2 : ltac:(refine (M.Val bool.t)) :=
      std.process.ExitStatus.t::["success"] α1 in
    let* α3 : ltac:(refine (M.Val bool.t)) := use α2 in
    let* α4 := M.read α3 in
    if (α4 : bool) then
      let* s : ltac:(refine (M.Val (alloc.borrow.Cow.t str.t))) :=
        let* α0 :
            ltac:(refine (M.Val (alloc.vec.Vec.t u8.t alloc.alloc.Global.t))) :=
          output.["stdout"] in
        let* α1 :
            ltac:(refine
              (M.Val (ref (alloc.vec.Vec.t u8.t alloc.alloc.Global.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
          (core.ops.deref.Deref.deref
              (Self := alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine (M.Val (slice u8.t))) := deref α2 in
        let* α4 : ltac:(refine (M.Val (ref (slice u8.t)))) := borrow α3 in
        alloc.string.String.t::["from_utf8_lossy"] α4 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
            M.alloc [ mk_str "rustc succeeded and stdout was:
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref (alloc.borrow.Cow.t str.t)))) :=
            borrow s in
          let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_display"] α3 in
          let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α4 ] in
          let* α6 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α5 in
          let* α7 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      M.alloc tt
    else
      let* s : ltac:(refine (M.Val (alloc.borrow.Cow.t str.t))) :=
        let* α0 :
            ltac:(refine (M.Val (alloc.vec.Vec.t u8.t alloc.alloc.Global.t))) :=
          output.["stderr"] in
        let* α1 :
            ltac:(refine
              (M.Val (ref (alloc.vec.Vec.t u8.t alloc.alloc.Global.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
          (core.ops.deref.Deref.deref
              (Self := alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine (M.Val (slice u8.t))) := deref α2 in
        let* α4 : ltac:(refine (M.Val (ref (slice u8.t)))) := borrow α3 in
        alloc.string.String.t::["from_utf8_lossy"] α4 in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
            M.alloc [ mk_str "rustc failed and stderr was:
" ] in
          let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
            borrow α0 in
          let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (M.Val (ref (alloc.borrow.Cow.t str.t)))) :=
            borrow s in
          let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
            core.fmt.rt.Argument.t::["new_display"] α3 in
          let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
            M.alloc [ α4 ] in
          let* α6 :
              ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
            borrow α5 in
          let* α7 :
              ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
            core.fmt.Arguments.t::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      M.alloc tt).
