(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn foo<A>(o: Option<A>) {
    match o {
        Some(_a) => println!("some"),
        None => println!("nothing"),
    }
}
*)
Definition foo
    {A : Set}
    (o : M.Val (core.option.Option.t A))
    : M (M.Val unit) :=
  M.function_body
    (let* α0 := M.read o in
    match α0 with
    | core.option.Option.Some _a =>
      let* _a := M.alloc _a in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "some
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt
    | core.option.Option.None  =>
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "nothing
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt
    end).

Module tests.
  (*
      fn test_file() {
          // Opens the file ferris.txt or creates one if it doesn't exist.
          let mut file = OpenOptions::new()
              .append(true)
              .create(true)
              .open("ferris.txt")
              .expect("Failed to open ferris.txt");
  
          // Print "Ferris" 5 times.
          for _ in 0..5 {
              file.write_all("Ferris\n".as_bytes())
                  .expect("Could not write to ferris.txt");
          }
      }
  *)
  Definition test_file : M (M.Val unit) :=
    M.function_body
      (let* file : ltac:(refine (M.Val std.fs.File.t)) :=
        let* α0 : ltac:(refine (M.Val std.fs.OpenOptions.t)) :=
          std.fs.OpenOptions.t::["new"] in
        let* α1 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val bool.t)) := M.alloc true in
        let* α3 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
          std.fs.OpenOptions.t::["append"] α1 α2 in
        let* α4 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α3 in
        let* α5 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
          borrow_mut α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := M.alloc true in
        let* α7 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
          std.fs.OpenOptions.t::["create"] α5 α6 in
        let* α8 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α7 in
        let* α9 : ltac:(refine (M.Val (ref std.fs.OpenOptions.t))) :=
          borrow α8 in
        let* α10 :
            ltac:(refine
              (M.Val
                (core.result.Result.t std.fs.File.t std.io.error.Error.t))) :=
          std.fs.OpenOptions.t::["open"] α9 (mk_str "ferris.txt") in
        let* α11 : ltac:(refine (M.Val str)) :=
          deref (mk_str "Failed to open ferris.txt") in
        let* α12 : ltac:(refine (M.Val (ref str))) := borrow α11 in
        (core.result.Result.t std.fs.File.t std.io.error.Error.t)::["expect"]
          α10
          α12 in
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
      let* α3 := M.read α2 in
      let* α4 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
        M.alloc
          {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α3;
          |} in
      let* α5 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range.t i32.t)
            (Trait := ltac:(refine _)))
          α4 in
      let* α6 := M.read α5 in
      let* α7 : ltac:(refine (M.Val unit)) :=
        match α6 with
        | iter =>
          let* iter := M.alloc iter in
          loop
            (let* _ : ltac:(refine (M.Val unit)) :=
              let* α0 :
                  ltac:(refine
                    (M.Val (mut_ref (core.ops.range.Range.t i32.t)))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range.t i32.t)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine (M.Val never.t)) := Break in
                never_to_any α0
              | core.option.Option.Some _ =>
                let* _ : ltac:(refine (M.Val unit)) :=
                  let* α0 : ltac:(refine (M.Val (mut_ref std.fs.File.t))) :=
                    borrow_mut file in
                  let* α1 : ltac:(refine (M.Val str)) :=
                    deref (mk_str "Ferris
") in
                  let* α2 : ltac:(refine (M.Val (ref str))) := borrow α1 in
                  let* α3 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
                    str::["as_bytes"] α2 in
                  let* α4 : ltac:(refine (M.Val (slice u8.t))) := deref α3 in
                  let* α5 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
                    borrow α4 in
                  let* α6 :
                      ltac:(refine
                        (M.Val
                          (core.result.Result.t unit std.io.error.Error.t))) :=
                    (std.io.Write.write_all
                        (Self := std.fs.File.t)
                        (Trait := ltac:(refine _)))
                      α0
                      α5 in
                  let* α7 : ltac:(refine (M.Val str)) :=
                    deref (mk_str "Could not write to ferris.txt") in
                  let* α8 : ltac:(refine (M.Val (ref str))) := borrow α7 in
                  (core.result.Result.t unit std.io.error.Error.t)::["expect"]
                    α6
                    α8 in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α7).
  
  (*
      fn test_file_also() {
          // Opens the file ferris.txt or creates one if it doesn't exist.
          let mut file = OpenOptions::new()
              .append(true)
              .create(true)
              .open("ferris.txt")
              .expect("Failed to open ferris.txt");
  
          // Print "Corro" 5 times.
          for _ in 0..5 {
              file.write_all("Corro\n".as_bytes())
                  .expect("Could not write to ferris.txt");
          }
      }
  *)
  Definition test_file_also : M (M.Val unit) :=
    M.function_body
      (let* file : ltac:(refine (M.Val std.fs.File.t)) :=
        let* α0 : ltac:(refine (M.Val std.fs.OpenOptions.t)) :=
          std.fs.OpenOptions.t::["new"] in
        let* α1 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (M.Val bool.t)) := M.alloc true in
        let* α3 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
          std.fs.OpenOptions.t::["append"] α1 α2 in
        let* α4 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α3 in
        let* α5 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
          borrow_mut α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := M.alloc true in
        let* α7 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
          std.fs.OpenOptions.t::["create"] α5 α6 in
        let* α8 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α7 in
        let* α9 : ltac:(refine (M.Val (ref std.fs.OpenOptions.t))) :=
          borrow α8 in
        let* α10 :
            ltac:(refine
              (M.Val
                (core.result.Result.t std.fs.File.t std.io.error.Error.t))) :=
          std.fs.OpenOptions.t::["open"] α9 (mk_str "ferris.txt") in
        let* α11 : ltac:(refine (M.Val str)) :=
          deref (mk_str "Failed to open ferris.txt") in
        let* α12 : ltac:(refine (M.Val (ref str))) := borrow α11 in
        (core.result.Result.t std.fs.File.t std.io.error.Error.t)::["expect"]
          α10
          α12 in
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
      let* α3 := M.read α2 in
      let* α4 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
        M.alloc
          {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α3;
          |} in
      let* α5 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range.t i32.t)
            (Trait := ltac:(refine _)))
          α4 in
      let* α6 := M.read α5 in
      let* α7 : ltac:(refine (M.Val unit)) :=
        match α6 with
        | iter =>
          let* iter := M.alloc iter in
          loop
            (let* _ : ltac:(refine (M.Val unit)) :=
              let* α0 :
                  ltac:(refine
                    (M.Val (mut_ref (core.ops.range.Range.t i32.t)))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range.t i32.t)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine (M.Val never.t)) := Break in
                never_to_any α0
              | core.option.Option.Some _ =>
                let* _ : ltac:(refine (M.Val unit)) :=
                  let* α0 : ltac:(refine (M.Val (mut_ref std.fs.File.t))) :=
                    borrow_mut file in
                  let* α1 : ltac:(refine (M.Val str)) :=
                    deref (mk_str "Corro
") in
                  let* α2 : ltac:(refine (M.Val (ref str))) := borrow α1 in
                  let* α3 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
                    str::["as_bytes"] α2 in
                  let* α4 : ltac:(refine (M.Val (slice u8.t))) := deref α3 in
                  let* α5 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
                    borrow α4 in
                  let* α6 :
                      ltac:(refine
                        (M.Val
                          (core.result.Result.t unit std.io.error.Error.t))) :=
                    (std.io.Write.write_all
                        (Self := std.fs.File.t)
                        (Trait := ltac:(refine _)))
                      α0
                      α5 in
                  let* α7 : ltac:(refine (M.Val str)) :=
                    deref (mk_str "Could not write to ferris.txt") in
                  let* α8 : ltac:(refine (M.Val (ref str))) := borrow α7 in
                  (core.result.Result.t unit std.io.error.Error.t)::["expect"]
                    α6
                    α8 in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α7).
End tests.

(*
    fn test_file() {
        // Opens the file ferris.txt or creates one if it doesn't exist.
        let mut file = OpenOptions::new()
            .append(true)
            .create(true)
            .open("ferris.txt")
            .expect("Failed to open ferris.txt");

        // Print "Ferris" 5 times.
        for _ in 0..5 {
            file.write_all("Ferris\n".as_bytes())
                .expect("Could not write to ferris.txt");
        }
    }
*)
Definition test_file : M (M.Val unit) :=
  M.function_body
    (let* file : ltac:(refine (M.Val std.fs.File.t)) :=
      let* α0 : ltac:(refine (M.Val std.fs.OpenOptions.t)) :=
        std.fs.OpenOptions.t::["new"] in
      let* α1 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val bool.t)) := M.alloc true in
      let* α3 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
        std.fs.OpenOptions.t::["append"] α1 α2 in
      let* α4 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α3 in
      let* α5 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
        borrow_mut α4 in
      let* α6 : ltac:(refine (M.Val bool.t)) := M.alloc true in
      let* α7 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
        std.fs.OpenOptions.t::["create"] α5 α6 in
      let* α8 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α7 in
      let* α9 : ltac:(refine (M.Val (ref std.fs.OpenOptions.t))) := borrow α8 in
      let* α10 :
          ltac:(refine
            (M.Val
              (core.result.Result.t std.fs.File.t std.io.error.Error.t))) :=
        std.fs.OpenOptions.t::["open"] α9 (mk_str "ferris.txt") in
      let* α11 : ltac:(refine (M.Val str)) :=
        deref (mk_str "Failed to open ferris.txt") in
      let* α12 : ltac:(refine (M.Val (ref str))) := borrow α11 in
      (core.result.Result.t std.fs.File.t std.io.error.Error.t)::["expect"]
        α10
        α12 in
    let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
    let* α1 := M.read α0 in
    let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
    let* α3 := M.read α2 in
    let* α4 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
      M.alloc
        {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α3;
        |} in
    let* α5 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.Range.t i32.t)
          (Trait := ltac:(refine _)))
        α4 in
    let* α6 := M.read α5 in
    let* α7 : ltac:(refine (M.Val unit)) :=
      match α6 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 :
                ltac:(refine
                  (M.Val (mut_ref (core.ops.range.Range.t i32.t)))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.Range.t i32.t)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine (M.Val never.t)) := Break in
              never_to_any α0
            | core.option.Option.Some _ =>
              let* _ : ltac:(refine (M.Val unit)) :=
                let* α0 : ltac:(refine (M.Val (mut_ref std.fs.File.t))) :=
                  borrow_mut file in
                let* α1 : ltac:(refine (M.Val str)) :=
                  deref (mk_str "Ferris
") in
                let* α2 : ltac:(refine (M.Val (ref str))) := borrow α1 in
                let* α3 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
                  str::["as_bytes"] α2 in
                let* α4 : ltac:(refine (M.Val (slice u8.t))) := deref α3 in
                let* α5 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
                  borrow α4 in
                let* α6 :
                    ltac:(refine
                      (M.Val
                        (core.result.Result.t unit std.io.error.Error.t))) :=
                  (std.io.Write.write_all
                      (Self := std.fs.File.t)
                      (Trait := ltac:(refine _)))
                    α0
                    α5 in
                let* α7 : ltac:(refine (M.Val str)) :=
                  deref (mk_str "Could not write to ferris.txt") in
                let* α8 : ltac:(refine (M.Val (ref str))) := borrow α7 in
                (core.result.Result.t unit std.io.error.Error.t)::["expect"]
                  α6
                  α8 in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α7).

(*
    fn test_file_also() {
        // Opens the file ferris.txt or creates one if it doesn't exist.
        let mut file = OpenOptions::new()
            .append(true)
            .create(true)
            .open("ferris.txt")
            .expect("Failed to open ferris.txt");

        // Print "Corro" 5 times.
        for _ in 0..5 {
            file.write_all("Corro\n".as_bytes())
                .expect("Could not write to ferris.txt");
        }
    }
*)
Definition test_file_also : M (M.Val unit) :=
  M.function_body
    (let* file : ltac:(refine (M.Val std.fs.File.t)) :=
      let* α0 : ltac:(refine (M.Val std.fs.OpenOptions.t)) :=
        std.fs.OpenOptions.t::["new"] in
      let* α1 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val bool.t)) := M.alloc true in
      let* α3 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
        std.fs.OpenOptions.t::["append"] α1 α2 in
      let* α4 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α3 in
      let* α5 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
        borrow_mut α4 in
      let* α6 : ltac:(refine (M.Val bool.t)) := M.alloc true in
      let* α7 : ltac:(refine (M.Val (mut_ref std.fs.OpenOptions.t))) :=
        std.fs.OpenOptions.t::["create"] α5 α6 in
      let* α8 : ltac:(refine (M.Val std.fs.OpenOptions.t)) := deref α7 in
      let* α9 : ltac:(refine (M.Val (ref std.fs.OpenOptions.t))) := borrow α8 in
      let* α10 :
          ltac:(refine
            (M.Val
              (core.result.Result.t std.fs.File.t std.io.error.Error.t))) :=
        std.fs.OpenOptions.t::["open"] α9 (mk_str "ferris.txt") in
      let* α11 : ltac:(refine (M.Val str)) :=
        deref (mk_str "Failed to open ferris.txt") in
      let* α12 : ltac:(refine (M.Val (ref str))) := borrow α11 in
      (core.result.Result.t std.fs.File.t std.io.error.Error.t)::["expect"]
        α10
        α12 in
    let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
    let* α1 := M.read α0 in
    let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
    let* α3 := M.read α2 in
    let* α4 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
      M.alloc
        {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α3;
        |} in
    let* α5 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.Range.t i32.t)
          (Trait := ltac:(refine _)))
        α4 in
    let* α6 := M.read α5 in
    let* α7 : ltac:(refine (M.Val unit)) :=
      match α6 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 :
                ltac:(refine
                  (M.Val (mut_ref (core.ops.range.Range.t i32.t)))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.Range.t i32.t)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine (M.Val never.t)) := Break in
              never_to_any α0
            | core.option.Option.Some _ =>
              let* _ : ltac:(refine (M.Val unit)) :=
                let* α0 : ltac:(refine (M.Val (mut_ref std.fs.File.t))) :=
                  borrow_mut file in
                let* α1 : ltac:(refine (M.Val str)) :=
                  deref (mk_str "Corro
") in
                let* α2 : ltac:(refine (M.Val (ref str))) := borrow α1 in
                let* α3 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
                  str::["as_bytes"] α2 in
                let* α4 : ltac:(refine (M.Val (slice u8.t))) := deref α3 in
                let* α5 : ltac:(refine (M.Val (ref (slice u8.t)))) :=
                  borrow α4 in
                let* α6 :
                    ltac:(refine
                      (M.Val
                        (core.result.Result.t unit std.io.error.Error.t))) :=
                  (std.io.Write.write_all
                      (Self := std.fs.File.t)
                      (Trait := ltac:(refine _)))
                    α0
                    α5 in
                let* α7 : ltac:(refine (M.Val str)) :=
                  deref (mk_str "Could not write to ferris.txt") in
                let* α8 : ltac:(refine (M.Val (ref str))) := borrow α7 in
                (core.result.Result.t unit std.io.error.Error.t)::["expect"]
                  α6
                  α8 in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α7).
