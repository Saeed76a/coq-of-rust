(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Person.
  Unset Primitive Projections.
  Record t : Set := {
    name : alloc.string.String;
    age : u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon '(Build_t x0 _) := x0;
  }.
  Global Instance Get_age : Notation.Dot "age" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
  Global Instance Get_AF_age : Notation.DoubleColon t "age" := {
    Notation.double_colon '(Build_t _ x1) := x1;
  }.
End Person.
Definition Person : Set := ⟅Person.t⟆.

Module Impl_core_fmt_Debug_for_structures_Person.
  Definition Self := structures.Person.
  
  Parameter struct_parameter_for_fmt :
      core.fmt.Formatter ->
        string ->
          string ->
          alloc_string_String ->
          string ->
          u8 ->
          M (H := H') core.fmt.Result.
  
  Global Instance Deb_struct_parameter_for_fmt : Notation.DoubleColon
    core.fmt.Formatter "struct_parameter_for_fmt" := {
    Notation.double_colon := struct_parameter_for_fmt; }.
  
  Definition fmt
      `{H' : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H') core.fmt.Result :=
    let* α0 := deref f core.fmt.Formatter in
    let* α1 := borrow_mut α0 core.fmt.Formatter in
    let* α2 := deref "Person" str in
    let* α3 := borrow α2 str in
    let* α4 := deref "name" str in
    let* α5 := borrow α4 str in
    let* α6 := deref self structures.Person in
    let* α7 := borrow α6.["name"] alloc.string.String in
    let* α8 := deref α7 alloc.string.String in
    let* α9 := borrow α8 alloc.string.String in
    let* α10 := pointer_coercion "Unsize" α9 in
    let* α11 := deref "age" str in
    let* α12 := borrow α11 str in
    let* α13 := deref self structures.Person in
    let* α14 := borrow α13.["age"] u8 in
    let* α15 := borrow α14 (ref u8) in
    let* α16 := deref α15 (ref u8) in
    let* α17 := borrow α16 (ref u8) in
    let* α18 := pointer_coercion "Unsize" α17 in
    core.fmt.Formatter::["debug_struct_field2_finish"] α1 α3 α5 α10 α12 α18.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_structures_Person.

Module Unit.
  Inductive t : Set := Build.
End Unit.
Definition Unit := @Unit.t.

Module Pair.
  Unset Primitive Projections.
  Record t : Set := {
    _ : i32;
    _ : f32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_1 : Notation.Dot 1 := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Pair.
Definition Pair := @Pair.t.

Module Point.
  Unset Primitive Projections.
  Record t : Set := {
    x : f32;
    y : f32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_AF_x : Notation.DoubleColon t "x" := {
    Notation.double_colon '(Build_t x0 _) := x0;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
  Global Instance Get_AF_y : Notation.DoubleColon t "y" := {
    Notation.double_colon '(Build_t _ x1) := x1;
  }.
End Point.
Definition Point : Set := ⟅Point.t⟆.

Module Rectangle.
  Unset Primitive Projections.
  Record t : Set := {
    top_left : structures.Point;
    bottom_right : structures.Point;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_top_left : Notation.Dot "top_left" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_AF_top_left : Notation.DoubleColon t "top_left" := {
    Notation.double_colon '(Build_t x0 _) := x0;
  }.
  Global Instance Get_bottom_right : Notation.Dot "bottom_right" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
  Global Instance Get_AF_bottom_right
    : Notation.DoubleColon t "bottom_right" := {
    Notation.double_colon '(Build_t _ x1) := x1;
  }.
End Rectangle.
Definition Rectangle : Set := ⟅Rectangle.t⟆.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let* name := core.convert.From.from "Peter" in
  let age := 27 in
  let peter :=
    {| structures.Person.name := name; structures.Person.age := age; |} in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ ""; "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow peter structures.Person in
      let* α5 := deref α4 structures.Person in
      let* α6 := borrow α5 structures.Person in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let point :=
    {| structures.Point.x := 10 (* 10.3 *); structures.Point.y := 0 (* 0.4 *);
    |} in
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow [ "point coordinates: ("; ", "; ")
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow point.["x"] f32 in
      let* α5 := deref α4 f32 in
      let* α6 := borrow α5 f32 in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow point.["y"] f32 in
      let* α9 := deref α8 f32 in
      let* α10 := borrow α9 f32 in
      let* α11 := core.fmt.rt.Argument::["new_display"] α10 in
      let* α12 := borrow [ α7; α11 ] (list core.fmt.rt.Argument) in
      let* α13 := deref α12 (list core.fmt.rt.Argument) in
      let* α14 := borrow α13 (list core.fmt.rt.Argument) in
      let* α15 := pointer_coercion "Unsize" α14 in
      let* α16 := core.fmt.Arguments::["new_v1"] α3 α15 in
      std.io.stdio._print α16 in
    Pure tt in
  let bottom_right := {| structures.Point.x := 5 (* 5.2 *); |} in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "second point: ("; ", "; ")
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow bottom_right.["x"] f32 in
      let* α5 := deref α4 f32 in
      let* α6 := borrow α5 f32 in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow bottom_right.["y"] f32 in
      let* α9 := deref α8 f32 in
      let* α10 := borrow α9 f32 in
      let* α11 := core.fmt.rt.Argument::["new_display"] α10 in
      let* α12 := borrow [ α7; α11 ] (list core.fmt.rt.Argument) in
      let* α13 := deref α12 (list core.fmt.rt.Argument) in
      let* α14 := borrow α13 (list core.fmt.rt.Argument) in
      let* α15 := pointer_coercion "Unsize" α14 in
      let* α16 := core.fmt.Arguments::["new_v1"] α3 α15 in
      std.io.stdio._print α16 in
    Pure tt in
  let '{| structures.Point.x := left_edge; structures.Point.y := top_edge; |} :=
    point in
  let _rectangle :=
    {|
      structures.Rectangle.top_left :=
        {| structures.Point.x := left_edge; structures.Point.y := top_edge; |};
      structures.Rectangle.bottom_right := bottom_right;
    |} in
  let _unit := structures.Unit.Build_t tt in
  let pair := structures.Pair.Build_t 1 0 (* 0.1 *) in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "pair contains "; " and "; "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow pair.["0"] i32 in
      let* α5 := deref α4 i32 in
      let* α6 := borrow α5 i32 in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow pair.["1"] f32 in
      let* α9 := deref α8 f32 in
      let* α10 := borrow α9 f32 in
      let* α11 := core.fmt.rt.Argument::["new_debug"] α10 in
      let* α12 := borrow [ α7; α11 ] (list core.fmt.rt.Argument) in
      let* α13 := deref α12 (list core.fmt.rt.Argument) in
      let* α14 := borrow α13 (list core.fmt.rt.Argument) in
      let* α15 := pointer_coercion "Unsize" α14 in
      let* α16 := core.fmt.Arguments::["new_v1"] α3 α15 in
      std.io.stdio._print α16 in
    Pure tt in
  let 'structures.Pair.Build_t integer decimal := pair in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "pair contains "; " and "; "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow integer i32 in
      let* α5 := deref α4 i32 in
      let* α6 := borrow α5 i32 in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow decimal f32 in
      let* α9 := deref α8 f32 in
      let* α10 := borrow α9 f32 in
      let* α11 := core.fmt.rt.Argument::["new_debug"] α10 in
      let* α12 := borrow [ α7; α11 ] (list core.fmt.rt.Argument) in
      let* α13 := deref α12 (list core.fmt.rt.Argument) in
      let* α14 := borrow α13 (list core.fmt.rt.Argument) in
      let* α15 := pointer_coercion "Unsize" α14 in
      let* α16 := core.fmt.Arguments::["new_v1"] α3 α15 in
      std.io.stdio._print α16 in
    Pure tt in
  Pure tt.
