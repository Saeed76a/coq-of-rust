(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    test!(1i32 + 1 == 2i32; and 2i32 * 2 == 4i32);
    test!(true; or false);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str ""; mk_str " and "; mk_str " is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (ref str)))) :=
          borrow (mk_str "1i32 + 1 == 2i32") in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (ref (ref str)))) :=
          borrow (mk_str "2i32 * 2 == 4i32") in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
        let* α8 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
        let* α9 : ltac:(refine (M.Val i32.t)) := BinOp.add α7 α8 in
        let* α10 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
        let* α11 : ltac:(refine (M.Val bool.t)) := BinOp.eq α9 α10 in
        let* α12 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
        let* α13 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
        let* α14 : ltac:(refine (M.Val i32.t)) := BinOp.mul α12 α13 in
        let* α15 : ltac:(refine (M.Val i32.t)) := M.alloc 4 in
        let* α16 : ltac:(refine (M.Val bool.t)) := BinOp.eq α14 α15 in
        let* α17 : ltac:(refine (M.Val bool.t)) := BinOp.and α11 α16 in
        let* α18 : ltac:(refine (M.Val (ref bool.t))) := borrow α17 in
        let* α19 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α18 in
        let* α20 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4; α6; α19 ] in
        let* α21 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α20 in
        let* α22 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α21 in
        let* α23 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α22 in
        std.io.stdio._print α23 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str ""; mk_str " or "; mk_str " is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (ref str)))) :=
          borrow (mk_str "true") in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val (ref (ref str)))) :=
          borrow (mk_str "false") in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : ltac:(refine (M.Val bool.t)) := M.alloc true in
        let* α8 : ltac:(refine (M.Val bool.t)) := M.alloc false in
        let* α9 : ltac:(refine (M.Val bool.t)) := BinOp.or α7 α8 in
        let* α10 : ltac:(refine (M.Val (ref bool.t))) := borrow α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α10 in
        let* α12 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4; α6; α11 ] in
        let* α13 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α12 in
        let* α14 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α13 in
        let* α15 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α14 in
        std.io.stdio._print α15 in
      M.alloc tt in
    M.alloc tt).
