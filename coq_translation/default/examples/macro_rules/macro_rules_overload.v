(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str ""; mk_str " and "; mk_str " is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref (ref str))) :=
          borrow (mk_str "1i32 + 1 == 2i32") in
        let* α6 : ltac:(refine (ref str)) := deref α5 in
        let* α7 : ltac:(refine (ref (ref str))) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (ref (ref str))) :=
          borrow (mk_str "2i32 * 2 == 4i32") in
        let* α10 : ltac:(refine (ref str)) := deref α9 in
        let* α11 : ltac:(refine (ref (ref str))) := borrow α10 in
        let* α12 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α11 in
        let* α13 : ltac:(refine i32) := M.alloc 1 in
        let* α14 : ltac:(refine i32) := M.alloc 1 in
        let* α15 : ltac:(refine i32) := BinOp.add α13 α14 in
        let* α16 : ltac:(refine i32) := M.alloc 2 in
        let* α17 : ltac:(refine bool) := BinOp.eq α15 α16 in
        let* α18 : ltac:(refine i32) := M.alloc 2 in
        let* α19 : ltac:(refine i32) := M.alloc 2 in
        let* α20 : ltac:(refine i32) := BinOp.mul α18 α19 in
        let* α21 : ltac:(refine i32) := M.alloc 4 in
        let* α22 : ltac:(refine bool) := BinOp.eq α20 α21 in
        let* α23 : ltac:(refine bool) := BinOp.and α17 α22 in
        let* α24 : ltac:(refine (ref bool)) := borrow α23 in
        let* α25 : ltac:(refine bool) := deref α24 in
        let* α26 : ltac:(refine (ref bool)) := borrow α25 in
        let* α27 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α26 in
        let* α28 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8; α12; α27 ] in
        let* α29 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α28 in
        let* α30 : ltac:(refine (array core.fmt.rt.Argument)) := deref α29 in
        let* α31 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α30 in
        let* α32 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α31 in
        let* α33 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α32 in
        std.io.stdio._print α33 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str ""; mk_str " or "; mk_str " is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref (ref str))) := borrow (mk_str "true") in
        let* α6 : ltac:(refine (ref str)) := deref α5 in
        let* α7 : ltac:(refine (ref (ref str))) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (ref (ref str))) := borrow (mk_str "false") in
        let* α10 : ltac:(refine (ref str)) := deref α9 in
        let* α11 : ltac:(refine (ref (ref str))) := borrow α10 in
        let* α12 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α11 in
        let* α13 : ltac:(refine bool) := M.alloc true in
        let* α14 : ltac:(refine bool) := M.alloc false in
        let* α15 : ltac:(refine bool) := BinOp.or α13 α14 in
        let* α16 : ltac:(refine (ref bool)) := borrow α15 in
        let* α17 : ltac:(refine bool) := deref α16 in
        let* α18 : ltac:(refine (ref bool)) := borrow α17 in
        let* α19 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α18 in
        let* α20 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8; α12; α19 ] in
        let* α21 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α20 in
        let* α22 : ltac:(refine (array core.fmt.rt.Argument)) := deref α21 in
        let* α23 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α22 in
        let* α24 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α23 in
        let* α25 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α24 in
        std.io.stdio._print α25 in
      M.alloc tt in
    M.alloc tt).
