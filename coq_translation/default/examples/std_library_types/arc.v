(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // This variable declaration is where its value is specified.
    let apple = Arc::new("the same apple");

    for _ in 0..10 {
        // Here there is no value specification as it is a pointer to a
        // reference in the memory heap.
        let apple = Arc::clone(&apple);

        thread::spawn(move || {
            // As Arc was used, threads can be spawned using the value allocated
            // in the Arc variable pointer's location.
            println!("{:?}", apple);
        });
    }

    // Make sure all Arc instances are printed from spawned threads.
    thread::sleep(Duration::from_secs(1));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* apple : ltac:(refine (M.Val (alloc.sync.Arc.t (ref str)))) :=
      (alloc.sync.Arc.t (ref str))::["new"] (mk_str "the same apple") in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 10 in
      let* α3 := M.read α2 in
      let* α4 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
        M.alloc
          {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α3;
          |} in
      let* α5 : ltac:(refine (M.Val (core.ops.range.Range.t i32.t))) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range.t i32.t)
            (Trait := ltac:(refine _)))
          α4 in
      let* α6 := M.read α5 in
      let* α7 : ltac:(refine (M.Val unit)) :=
        match α6 with
        | iter =>
          let* iter := M.alloc iter in
          loop
            (let* _ : ltac:(refine (M.Val unit)) :=
              let* α0 :
                  ltac:(refine
                    (M.Val (mut_ref (core.ops.range.Range.t i32.t)))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range.t i32.t)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine (M.Val never.t)) := Break in
                never_to_any α0
              | core.option.Option.Some _ =>
                let* apple :
                    ltac:(refine (M.Val (alloc.sync.Arc.t (ref str)))) :=
                  let* α0 :
                      ltac:(refine
                        (M.Val (ref (alloc.sync.Arc.t (ref str))))) :=
                    borrow apple in
                  (core.clone.Clone.clone
                      (Self := alloc.sync.Arc.t (ref str))
                      (Trait := ltac:(refine _)))
                    α0 in
                let* _ : ltac:(refine (M.Val (std.thread.JoinHandle.t unit))) :=
                  std.thread.spawn
                    (let* _ : ltac:(refine (M.Val unit)) :=
                      let* _ : ltac:(refine (M.Val unit)) :=
                        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
                          M.alloc [ mk_str ""; mk_str "
" ] in
                        let* α1 :
                            ltac:(refine (M.Val (ref (array (ref str))))) :=
                          borrow α0 in
                        let* α2 :
                            ltac:(refine (M.Val (ref (slice (ref str))))) :=
                          pointer_coercion "Unsize" α1 in
                        let* α3 :
                            ltac:(refine
                              (M.Val (ref (alloc.sync.Arc.t (ref str))))) :=
                          borrow apple in
                        let* α4 :
                            ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                          core.fmt.rt.Argument.t::["new_debug"] α3 in
                        let* α5 :
                            ltac:(refine
                              (M.Val (array core.fmt.rt.Argument.t))) :=
                          M.alloc [ α4 ] in
                        let* α6 :
                            ltac:(refine
                              (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
                          borrow α5 in
                        let* α7 :
                            ltac:(refine
                              (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
                          pointer_coercion "Unsize" α6 in
                        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                          core.fmt.Arguments.t::["new_v1"] α2 α7 in
                        std.io.stdio._print α8 in
                      M.alloc tt in
                    M.alloc tt) in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α7 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val u64.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val core.time.Duration.t)) :=
        core.time.Duration.t::["from_secs"] α0 in
      std.thread.sleep α1 in
    M.alloc tt).
