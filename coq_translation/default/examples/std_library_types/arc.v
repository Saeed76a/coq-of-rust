(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{State.Trait} : M unit :=
  let* apple := (alloc.sync.Arc _)::["new"] (mk_str "the same apple") in
  let* _ :=
    let* α0 := M.alloc 0 in
    let* α1 := M.alloc 10 in
    let* α2 :=
      M.alloc
        {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
        |} in
    let* α3 := core.iter.traits.collect.IntoIterator.into_iter α2 in
    let* α4 :=
      match α3 with
      | iter =>
        loop
          (let* _ :=
            let* α0 := borrow_mut iter (core.ops.range.Range i32) in
            let* α1 := deref α0 (core.ops.range.Range i32) in
            let* α2 := borrow_mut α1 (core.ops.range.Range i32) in
            let* α3 := core.iter.traits.iterator.Iterator.next α2 in
            match α3 with
            | core.option.Option  =>
              let* α0 := Break in
              never_to_any α0
            | core.option.Option _ =>
              let* apple :=
                let* α0 := borrow apple (alloc.sync.Arc (ref str)) in
                let* α1 := deref α0 (alloc.sync.Arc (ref str)) in
                let* α2 := borrow α1 (alloc.sync.Arc (ref str)) in
                core.clone.Clone.clone α2 in
              let* _ := std.thread.spawn "Closure" in
              Pure tt
            end in
          Pure tt)
      end in
    use α4 in
  let* _ :=
    let* α0 := M.alloc 1 in
    let* α1 := core.time.Duration::["from_secs"] α0 in
    std.thread.sleep α1 in
  Pure tt.
