(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Account.
  Unset Primitive Projections.
  Record t : Set := {
    username : ref str;
    password : ref str;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_username : Notation.Dot "username" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_AF_username : Notation.DoubleColon t "username" := {
    Notation.double_colon '(Build_t x0 _) := x0;
  }.
  Global Instance Get_password : Notation.Dot "password" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
  Global Instance Get_AF_password : Notation.DoubleColon t "password" := {
    Notation.double_colon '(Build_t _ x1) := x1;
  }.
End Account.
Definition Account : Set := ⟅Account.t⟆.

Module
  Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self := hash_map_alternate_or_custom_key_types.Account.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.

Module
  Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self := hash_map_alternate_or_custom_key_types.Account.
  
  Definition eq
      `{H' : State.Trait}
      (self : ref Self)
      (other : ref hash_map_alternate_or_custom_key_types.Account)
      : M (H := H') bool :=
    let* α0 := deref self hash_map_alternate_or_custom_key_types.Account in
    let* α1 := borrow α0.["username"] (ref str) in
    let* α2 := deref other hash_map_alternate_or_custom_key_types.Account in
    let* α3 := borrow α2.["username"] (ref str) in
    let* α4 := core.cmp.PartialEq.eq α1 α3 in
    let* α5 := deref self hash_map_alternate_or_custom_key_types.Account in
    let* α6 := borrow α5.["password"] (ref str) in
    let* α7 := deref other hash_map_alternate_or_custom_key_types.Account in
    let* α8 := borrow α7.["password"] (ref str) in
    let* α9 := core.cmp.PartialEq.eq α6 α8 in
    and α4 α9.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.

Module
  Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self := hash_map_alternate_or_custom_key_types.Account.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.

Module Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self := hash_map_alternate_or_custom_key_types.Account.
  
  Definition assert_receiver_is_total_eq
      `{H' : State.Trait}
      (self : ref Self)
      : M (H := H') unit :=
    let _ := tt in
    let _ := tt in
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.

Module Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self := hash_map_alternate_or_custom_key_types.Account.
  
  Definition hash
      `{H' : State.Trait}
      {__H : Set}
      `{core.hash.Hasher.Trait __H}
      (self : ref Self)
      (state : mut_ref __H)
      : M (H := H') unit :=
    let* _ :=
      let* α0 := deref self hash_map_alternate_or_custom_key_types.Account in
      let* α1 := borrow α0.["username"] (ref str) in
      let* α2 := deref α1 (ref str) in
      let* α3 := borrow α2 (ref str) in
      let* α4 := deref state _ in
      let* α5 := borrow_mut α4 _ in
      core.hash.Hash.hash α3 α5 in
    let* α0 := deref self hash_map_alternate_or_custom_key_types.Account in
    let* α1 := borrow α0.["password"] (ref str) in
    let* α2 := deref α1 (ref str) in
    let* α3 := borrow α2 (ref str) in
    let* α4 := deref state _ in
    let* α5 := borrow_mut α4 _ in
    core.hash.Hash.hash α3 α5.
  
  Global Instance Method_hash
      `{H' : State.Trait}
      {__H : Set}
      `{core.hash.Hasher.Trait __H} :
    Notation.Dot "hash" := {
    Notation.dot := hash (__H := __H);
  }.
  
  Global Instance I : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash
      `{H' : State.Trait}
      {__H : Set}
      `{core.hash.Hasher.Trait __H}
      :=
      hash (__H := __H);
  }.
  Global Hint Resolve I : core.
End Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.

Module AccountInfo.
  Unset Primitive Projections.
  Record t : Set := {
    name : ref str;
    email : ref str;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon '(Build_t x0 _) := x0;
  }.
  Global Instance Get_email : Notation.Dot "email" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
  Global Instance Get_AF_email : Notation.DoubleColon t "email" := {
    Notation.double_colon '(Build_t _ x1) := x1;
  }.
End AccountInfo.
Definition AccountInfo : Set := ⟅AccountInfo.t⟆.

Definition Accounts : Set :=
  std.collections.hash.map.HashMap
    hash_map_alternate_or_custom_key_types.Account
    hash_map_alternate_or_custom_key_types.AccountInfo
    std.collections.hash.map.HashMap.Default.S.

Definition try_logon
    `{H' : State.Trait}
    (accounts : ref hash_map_alternate_or_custom_key_types.Accounts)
    (username : ref str)
    (password : ref str)
    : M (H := H') unit :=
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "Username: "; "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow username (ref str) in
      let* α5 := deref α4 (ref str) in
      let* α6 := borrow α5 (ref str) in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "Password: "; "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow password (ref str) in
      let* α5 := deref α4 (ref str) in
      let* α6 := borrow α5 (ref str) in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ "Attempting logon...
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := core.fmt.Arguments::["new_const"] α3 in
      std.io.stdio._print α4 in
    Pure tt in
  let* logon :=
    let* α0 := deref username str in
    let* α1 := borrow α0 str in
    let* α2 := deref password str in
    let* α3 := borrow α2 str in
    Pure
      {|
        hash_map_alternate_or_custom_key_types.Account.username := α1;
        hash_map_alternate_or_custom_key_types.Account.password := α3;
      |} in
  let* α0 :=
    deref
      accounts
      (std.collections.hash.map.HashMap
        hash_map_alternate_or_custom_key_types.Account
        hash_map_alternate_or_custom_key_types.AccountInfo
        std.collections.hash.map.RandomState) in
  let* α1 :=
    borrow
      α0
      (std.collections.hash.map.HashMap
        hash_map_alternate_or_custom_key_types.Account
        hash_map_alternate_or_custom_key_types.AccountInfo
        std.collections.hash.map.RandomState) in
  let* α2 := borrow logon hash_map_alternate_or_custom_key_types.Account in
  let* α3 := deref α2 hash_map_alternate_or_custom_key_types.Account in
  let* α4 := borrow α3 hash_map_alternate_or_custom_key_types.Account in
  let* α5 := (std.collections.hash.map.HashMap _ _ _)::["get"] α1 α4 in
  match α5 with
  | core.option.Option account_info =>
    let* _ :=
      let* _ :=
        let* α0 := borrow [ "Successful logon!
" ] (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := core.fmt.Arguments::["new_const"] α3 in
        std.io.stdio._print α4 in
      Pure tt in
    let* _ :=
      let* _ :=
        let* α0 := borrow [ "Name: "; "
" ] (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 :=
          deref
            account_info
            hash_map_alternate_or_custom_key_types.AccountInfo in
        let* α5 := borrow α4.["name"] (ref str) in
        let* α6 := deref α5 (ref str) in
        let* α7 := borrow α6 (ref str) in
        let* α8 := core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 := borrow [ α8 ] (list core.fmt.rt.Argument) in
        let* α10 := deref α9 (list core.fmt.rt.Argument) in
        let* α11 := borrow α10 (list core.fmt.rt.Argument) in
        let* α12 := pointer_coercion "Unsize" α11 in
        let* α13 := core.fmt.Arguments::["new_v1"] α3 α12 in
        std.io.stdio._print α13 in
      Pure tt in
    let* _ :=
      let* _ :=
        let* α0 := borrow [ "Email: "; "
" ] (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 :=
          deref
            account_info
            hash_map_alternate_or_custom_key_types.AccountInfo in
        let* α5 := borrow α4.["email"] (ref str) in
        let* α6 := deref α5 (ref str) in
        let* α7 := borrow α6 (ref str) in
        let* α8 := core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 := borrow [ α8 ] (list core.fmt.rt.Argument) in
        let* α10 := deref α9 (list core.fmt.rt.Argument) in
        let* α11 := borrow α10 (list core.fmt.rt.Argument) in
        let* α12 := pointer_coercion "Unsize" α11 in
        let* α13 := core.fmt.Arguments::["new_v1"] α3 α12 in
        std.io.stdio._print α13 in
      Pure tt in
    Pure tt
  | _ =>
    let* _ :=
      let* α0 := borrow [ "Login failed!
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := core.fmt.Arguments::["new_const"] α3 in
      std.io.stdio._print α4 in
    Pure tt
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let* accounts :=
    (std.collections.hash.map.HashMap
          _
          _
          std.collections.hash.map.RandomState)::["new"] in
  let* account :=
    let* α0 := deref "j.everyman" str in
    let* α1 := borrow α0 str in
    let* α2 := deref "password123" str in
    let* α3 := borrow α2 str in
    Pure
      {|
        hash_map_alternate_or_custom_key_types.Account.username := α1;
        hash_map_alternate_or_custom_key_types.Account.password := α3;
      |} in
  let* account_info :=
    let* α0 := deref "John Everyman" str in
    let* α1 := borrow α0 str in
    let* α2 := deref "j.everyman@email.com" str in
    let* α3 := borrow α2 str in
    Pure
      {|
        hash_map_alternate_or_custom_key_types.AccountInfo.name := α1;
        hash_map_alternate_or_custom_key_types.AccountInfo.email := α3;
      |} in
  let* _ :=
    let* α0 :=
      borrow_mut
        accounts
        (std.collections.hash.map.HashMap
          hash_map_alternate_or_custom_key_types.Account
          hash_map_alternate_or_custom_key_types.AccountInfo
          std.collections.hash.map.RandomState) in
    (std.collections.hash.map.HashMap _ _ _)::["insert"]
      α0
      account
      account_info in
  let* _ :=
    let* α0 :=
      borrow
        accounts
        (std.collections.hash.map.HashMap
          hash_map_alternate_or_custom_key_types.Account
          hash_map_alternate_or_custom_key_types.AccountInfo
          std.collections.hash.map.RandomState) in
    let* α1 :=
      deref
        α0
        (std.collections.hash.map.HashMap
          hash_map_alternate_or_custom_key_types.Account
          hash_map_alternate_or_custom_key_types.AccountInfo
          std.collections.hash.map.RandomState) in
    let* α2 :=
      borrow
        α1
        (std.collections.hash.map.HashMap
          hash_map_alternate_or_custom_key_types.Account
          hash_map_alternate_or_custom_key_types.AccountInfo
          std.collections.hash.map.RandomState) in
    let* α3 := deref "j.everyman" str in
    let* α4 := borrow α3 str in
    let* α5 := deref "psasword123" str in
    let* α6 := borrow α5 str in
    hash_map_alternate_or_custom_key_types.try_logon α2 α4 α6 in
  let* _ :=
    let* α0 :=
      borrow
        accounts
        (std.collections.hash.map.HashMap
          hash_map_alternate_or_custom_key_types.Account
          hash_map_alternate_or_custom_key_types.AccountInfo
          std.collections.hash.map.RandomState) in
    let* α1 :=
      deref
        α0
        (std.collections.hash.map.HashMap
          hash_map_alternate_or_custom_key_types.Account
          hash_map_alternate_or_custom_key_types.AccountInfo
          std.collections.hash.map.RandomState) in
    let* α2 :=
      borrow
        α1
        (std.collections.hash.map.HashMap
          hash_map_alternate_or_custom_key_types.Account
          hash_map_alternate_or_custom_key_types.AccountInfo
          std.collections.hash.map.RandomState) in
    let* α3 := deref "j.everyman" str in
    let* α4 := borrow α3 str in
    let* α5 := deref "password123" str in
    let* α6 := borrow α5 str in
    hash_map_alternate_or_custom_key_types.try_logon α2 α4 α6 in
  Pure tt.
