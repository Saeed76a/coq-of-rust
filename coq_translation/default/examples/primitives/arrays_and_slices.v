(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition analyze_slice (slice : M.Val (ref (slice i32.t))) : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "first element of the slice: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (slice i32.t))) := deref slice in
        let* α4 : ltac:(refine (M.Val (ref i32.t))) := borrow α3[M.alloc 0] in
        let* α5 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α4 in
        let* α6 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α6 in
        let* α8 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α8 in
        std.io.stdio._print α9 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "the slice has "; mk_str " elements
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (slice i32.t))) := deref slice in
        let* α4 : ltac:(refine (M.Val (ref (slice i32.t)))) := borrow α3 in
        let* α5 : ltac:(refine (M.Val usize.t)) := (slice i32.t)::["len"] α4 in
        let* α6 : ltac:(refine (M.Val (ref usize.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    M.alloc tt).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* xs : ltac:(refine (M.Val (array i32.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α3 : ltac:(refine (M.Val i32.t)) := M.alloc 4 in
      let* α4 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
      M.alloc [ α0; α1; α2; α3; α4 ] in
    let* ys : ltac:(refine (M.Val (array i32.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
      repeat α0 500 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "first element of the array: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow xs[M.alloc 0] in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "second element of the array: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow xs[M.alloc 1] in
        let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α5 in
        let* α7 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "number of elements in array: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (array i32.t)))) := borrow xs in
        let* α4 : ltac:(refine (M.Val (ref (slice i32.t)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (M.Val usize.t)) := (slice i32.t)::["len"] α4 in
        let* α6 : ltac:(refine (M.Val (ref usize.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "array occupies "; mk_str " bytes
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (array i32.t)))) := borrow xs in
        let* α4 : ltac:(refine (M.Val usize.t)) := core.mem.size_of_val α3 in
        let* α5 : ltac:(refine (M.Val (ref usize.t))) := borrow α4 in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α7 in
        let* α9 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "borrow the whole array as a slice
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val (ref (array i32.t)))) := borrow xs in
      let* α1 : ltac:(refine (M.Val (ref (slice i32.t)))) :=
        pointer_coercion "Unsize" α0 in
      arrays_and_slices.analyze_slice α1 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "borrow a section of the array as a slice
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val (ref (array i32.t)))) := borrow ys in
      let* α1 : ltac:(refine (M.Val usize.t)) := M.alloc 1 in
      let* α2 := M.read α1 in
      let* α3 : ltac:(refine (M.Val usize.t)) := M.alloc 4 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val (core.ops.range.Range.t usize.t))) :=
        M.alloc
          {| core.ops.range.Range.start := α2; core.ops.range.Range.end := α4;
          |} in
      let* α6 : ltac:(refine (M.Val (ref (slice i32.t)))) :=
        (core.ops.index.Index.index
            (Self := array i32.t)
            (Trait := ltac:(refine _)))
          α0
          α5 in
      let* α7 : ltac:(refine (M.Val (slice i32.t))) := deref α6 in
      let* α8 : ltac:(refine (M.Val (ref (slice i32.t)))) := borrow α7 in
      arrays_and_slices.analyze_slice α8 in
    let* empty_array : ltac:(refine (M.Val (array u32.t))) := M.alloc [ ] in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val (ref (array u32.t)))) :=
        borrow empty_array in
      let* α1 : ltac:(refine (M.Val (ref (ref (array u32.t))))) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 : ltac:(refine (M.Val (array u32.t))) := M.alloc [ ] in
      let* α4 : ltac:(refine (M.Val (ref (array u32.t)))) := borrow α3 in
      let* α5 : ltac:(refine (M.Val (ref (ref (array u32.t))))) := borrow α4 in
      let* α6 := M.read α5 in
      let* α7 :
          ltac:(refine
            (M.Val ((ref (ref (array u32.t))) * (ref (ref (array u32.t)))))) :=
        M.alloc (α2, α6) in
      let* α8 := M.read α7 in
      match α8 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (ref (array u32.t)))) := deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (ref (array u32.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (array u32.t)))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (ref (array u32.t))))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := ref (array u32.t))
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (ref (array u32.t)))) :=
              deref left_val in
            let* α1 : ltac:(refine (M.Val (ref (ref (array u32.t))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (array u32.t)))) :=
              deref right_val in
            let* α3 : ltac:(refine (M.Val (ref (ref (array u32.t))))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val (ref (array u32.t)))) :=
        borrow empty_array in
      let* α1 : ltac:(refine (M.Val (ref (ref (array u32.t))))) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 : ltac:(refine (M.Val (array u32.t))) := M.alloc [ ] in
      let* α4 : ltac:(refine (M.Val (ref (array u32.t)))) := borrow α3 in
      let* α5 : ltac:(refine (M.Val core.ops.range.RangeFull.t)) :=
        M.alloc core.ops.range.RangeFull.Build_t in
      let* α6 : ltac:(refine (M.Val (ref (slice u32.t)))) :=
        (core.ops.index.Index.index
            (Self := array u32.t)
            (Trait := ltac:(refine _)))
          α4
          α5 in
      let* α7 : ltac:(refine (M.Val (slice u32.t))) := deref α6 in
      let* α8 : ltac:(refine (M.Val (ref (slice u32.t)))) := borrow α7 in
      let* α9 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) := borrow α8 in
      let* α10 := M.read α9 in
      let* α11 :
          ltac:(refine
            (M.Val ((ref (ref (array u32.t))) * (ref (ref (slice u32.t)))))) :=
        M.alloc (α2, α10) in
      let* α12 := M.read α11 in
      match α12 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (ref (array u32.t)))) := deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (ref (array u32.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice u32.t)))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := ref (array u32.t))
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (ref (array u32.t)))) :=
              deref left_val in
            let* α1 : ltac:(refine (M.Val (ref (ref (array u32.t))))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (ref (slice u32.t)))) :=
              deref right_val in
            let* α3 : ltac:(refine (M.Val (ref (ref (slice u32.t))))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* α0 : ltac:(refine (M.Val usize.t)) := M.alloc 0 in
    let* α1 := M.read α0 in
    let* α2 : ltac:(refine (M.Val (ref (array i32.t)))) := borrow xs in
    let* α3 : ltac:(refine (M.Val (ref (slice i32.t)))) :=
      pointer_coercion "Unsize" α2 in
    let* α4 : ltac:(refine (M.Val usize.t)) := (slice i32.t)::["len"] α3 in
    let* α5 : ltac:(refine (M.Val usize.t)) := M.alloc 1 in
    let* α6 : ltac:(refine (M.Val usize.t)) := BinOp.add α4 α5 in
    let* α7 := M.read α6 in
    let* α8 : ltac:(refine (M.Val (core.ops.range.Range.t usize.t))) :=
      M.alloc
        {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α7;
        |} in
    let* α9 : ltac:(refine (M.Val (core.ops.range.Range.t usize.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.Range.t usize.t)
          (Trait := ltac:(refine _)))
        α8 in
    let* α10 := M.read α9 in
    let* α11 : ltac:(refine (M.Val unit)) :=
      match α10 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 :
                ltac:(refine
                  (M.Val (mut_ref (core.ops.range.Range.t usize.t)))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.Range.t usize.t)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine (M.Val never.t)) := Break in
              never_to_any α0
            | core.option.Option.Some i =>
              let* i := M.alloc i in
              let* α0 : ltac:(refine (M.Val (ref (array i32.t)))) :=
                borrow xs in
              let* α1 : ltac:(refine (M.Val (ref (slice i32.t)))) :=
                pointer_coercion "Unsize" α0 in
              let* α2 :
                  ltac:(refine (M.Val (core.option.Option.t (ref i32.t)))) :=
                (slice i32.t)::["get"] α1 i in
              let* α3 := M.read α2 in
              match α3 with
              | core.option.Option.Some xval =>
                let* xval := M.alloc xval in
                let* _ : ltac:(refine (M.Val unit)) :=
                  let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
                    M.alloc [ mk_str ""; mk_str ": "; mk_str "
" ] in
                  let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
                    borrow α0 in
                  let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
                    pointer_coercion "Unsize" α1 in
                  let* α3 : ltac:(refine (M.Val (ref usize.t))) := borrow i in
                  let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                    core.fmt.rt.Argument.t::["new_display"] α3 in
                  let* α5 : ltac:(refine (M.Val (ref (ref i32.t)))) :=
                    borrow xval in
                  let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                    core.fmt.rt.Argument.t::["new_display"] α5 in
                  let* α7 :
                      ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
                    M.alloc [ α4; α6 ] in
                  let* α8 :
                      ltac:(refine
                        (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
                    borrow α7 in
                  let* α9 :
                      ltac:(refine
                        (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
                    pointer_coercion "Unsize" α8 in
                  let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                    core.fmt.Arguments.t::["new_v1"] α2 α9 in
                  std.io.stdio._print α10 in
                M.alloc tt
              | core.option.Option.None  =>
                let* _ : ltac:(refine (M.Val unit)) :=
                  let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
                    M.alloc [ mk_str "Slow down! "; mk_str " is too far!
" ] in
                  let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) :=
                    borrow α0 in
                  let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
                    pointer_coercion "Unsize" α1 in
                  let* α3 : ltac:(refine (M.Val (ref usize.t))) := borrow i in
                  let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                    core.fmt.rt.Argument.t::["new_display"] α3 in
                  let* α5 :
                      ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
                    M.alloc [ α4 ] in
                  let* α6 :
                      ltac:(refine
                        (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
                    borrow α5 in
                  let* α7 :
                      ltac:(refine
                        (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
                    pointer_coercion "Unsize" α6 in
                  let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                    core.fmt.Arguments.t::["new_v1"] α2 α7 in
                  std.io.stdio._print α8 in
                M.alloc tt
              end
            end in
          M.alloc tt)
      end in
    use α11).
