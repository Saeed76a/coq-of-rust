(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition reverse
    `{ℋ : State.Trait}
    (pair : M.Val (i32 * bool))
    : M (M.Val (bool * i32)) :=
  M.function_body
    (let '(int_param, bool_param) := pair in
    M.alloc (bool_param, int_param)).

Module  Matrix.
Section Matrix.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Record t : Set := {
    x0 : f32;
    x1 : f32;
    x2 : f32;
    x3 : f32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
  Global Instance Get_1 : Notation.Dot "1" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x1) : M _;
  }.
  Global Instance Get_2 : Notation.Dot "2" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x2) : M _;
  }.
  Global Instance Get_3 : Notation.Dot "3" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x3) : M _;
  }.
End Matrix.
End Matrix.
Definition Matrix `{ℋ : State.Trait} : Set := M.Val Matrix.t.

Module  Impl_core_fmt_Debug_for_tuples_Matrix.
Section Impl_core_fmt_Debug_for_tuples_Matrix.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := tuples.Matrix.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Matrix") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine tuples.Matrix) := deref self in
      let* α5 : ltac:(refine f32) := α4.["0"] in
      let* α6 : ltac:(refine (ref f32)) := borrow α5 in
      let* α7 : ltac:(refine f32) := deref α6 in
      let* α8 : ltac:(refine (ref f32)) := borrow α7 in
      let* α9 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α8 in
      let* α10 : ltac:(refine tuples.Matrix) := deref self in
      let* α11 : ltac:(refine f32) := α10.["1"] in
      let* α12 : ltac:(refine (ref f32)) := borrow α11 in
      let* α13 : ltac:(refine f32) := deref α12 in
      let* α14 : ltac:(refine (ref f32)) := borrow α13 in
      let* α15 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α14 in
      let* α16 : ltac:(refine tuples.Matrix) := deref self in
      let* α17 : ltac:(refine f32) := α16.["2"] in
      let* α18 : ltac:(refine (ref f32)) := borrow α17 in
      let* α19 : ltac:(refine f32) := deref α18 in
      let* α20 : ltac:(refine (ref f32)) := borrow α19 in
      let* α21 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α20 in
      let* α22 : ltac:(refine tuples.Matrix) := deref self in
      let* α23 : ltac:(refine f32) := α22.["3"] in
      let* α24 : ltac:(refine (ref f32)) := borrow α23 in
      let* α25 : ltac:(refine (ref (ref f32))) := borrow α24 in
      let* α26 : ltac:(refine (ref f32)) := deref α25 in
      let* α27 : ltac:(refine (ref (ref f32))) := borrow α26 in
      let* α28 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α27 in
      core.fmt.Formatter::["debug_tuple_field4_finish"] α1 α3 α9 α15 α21 α28).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_tuples_Matrix.
End Impl_core_fmt_Debug_for_tuples_Matrix.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let*
        long_tuple :
        ltac:(refine
          (M.Val
            (u8 *
              u16 *
              u32 *
              u64 *
              i8 *
              i16 *
              i32 *
              i64 *
              f32 *
              f64 *
              char *
              bool))) :=
      let* α0 : ltac:(refine u8) := M.alloc 1 in
      let* α1 : ltac:(refine u16) := M.alloc 2 in
      let* α2 : ltac:(refine u32) := M.alloc 3 in
      let* α3 : ltac:(refine u64) := M.alloc 4 in
      let* α4 : ltac:(refine i8) := M.alloc (- 1) in
      let* α5 : ltac:(refine i16) := M.alloc (- 2) in
      let* α6 : ltac:(refine i32) := M.alloc (- 3) in
      let* α7 : ltac:(refine i64) := M.alloc (- 4) in
      let* α8 : ltac:(refine f32) := M.alloc 0 (* 0.1 *) in
      let* α9 : ltac:(refine f64) := M.alloc 0 (* 0.2 *) in
      let* α10 : ltac:(refine char) := M.alloc "a"%char in
      let* α11 : ltac:(refine bool) := M.alloc true in
      M.alloc (α0, α1, α2, α3, α4, α5, α6, α7, α8, α9, α10, α11) in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "long tuple first value: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref u8)) := borrow "Unknown Field" in
        let* α6 : ltac:(refine u8) := deref α5 in
        let* α7 : ltac:(refine (ref u8)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "long tuple second value: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref u16)) := borrow "Unknown Field" in
        let* α6 : ltac:(refine u16) := deref α5 in
        let* α7 : ltac:(refine (ref u16)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    let*
        tuple_of_tuples :
        ltac:(refine
          (M.Val ((M.Val (u8 * u16 * u32)) * (M.Val (u64 * i8)) * i16))) :=
      let* α0 : ltac:(refine u8) := M.alloc 1 in
      let* α1 : ltac:(refine u16) := M.alloc 2 in
      let* α2 : ltac:(refine u32) := M.alloc 2 in
      let* α3 : ltac:(refine (M.Val (u8 * u16 * u32))) :=
        M.alloc (α0, α1, α2) in
      let* α4 : ltac:(refine u64) := M.alloc 4 in
      let* α5 : ltac:(refine i8) := M.alloc (- 1) in
      let* α6 : ltac:(refine (M.Val (u64 * i8))) := M.alloc (α4, α5) in
      let* α7 : ltac:(refine i16) := M.alloc (- 2) in
      M.alloc (α3, α6, α7) in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "tuple of tuples: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let*
            α5 :
            ltac:(refine
              (ref
                (M.Val
                  ((M.Val (u8 * u16 * u32)) * (M.Val (u64 * i8)) * i16)))) :=
          borrow tuple_of_tuples in
        let*
            α6 :
            ltac:(refine
              (M.Val ((M.Val (u8 * u16 * u32)) * (M.Val (u64 * i8)) * i16))) :=
          deref α5 in
        let*
            α7 :
            ltac:(refine
              (ref
                (M.Val
                  ((M.Val (u8 * u16 * u32)) * (M.Val (u64 * i8)) * i16)))) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    let* pair : ltac:(refine (M.Val (i32 * bool))) :=
      let* α0 : ltac:(refine i32) := M.alloc 1 in
      let* α1 : ltac:(refine bool) := M.alloc true in
      M.alloc (α0, α1) in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "pair is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref (M.Val (i32 * bool)))) := borrow pair in
        let* α6 : ltac:(refine (M.Val (i32 * bool))) := deref α5 in
        let* α7 : ltac:(refine (ref (M.Val (i32 * bool)))) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "the reversed pair is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (M.Val (bool * i32))) := tuples.reverse pair in
        let* α6 : ltac:(refine (ref (M.Val (bool * i32)))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val (bool * i32))) := deref α6 in
        let* α8 : ltac:(refine (ref (M.Val (bool * i32)))) := borrow α7 in
        let* α9 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α8 in
        let* α10 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α9 ] in
        let* α11 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α10 in
        let* α12 : ltac:(refine (array core.fmt.rt.Argument)) := deref α11 in
        let* α13 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α12 in
        let* α14 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α13 in
        let* α15 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α14 in
        std.io.stdio._print α15 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "one element tuple: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine u32) := M.alloc 5 in
        let* α6 : ltac:(refine (M.Val (u32))) := M.alloc (α5) in
        let* α7 : ltac:(refine (ref (M.Val (u32)))) := borrow α6 in
        let* α8 : ltac:(refine (M.Val (u32))) := deref α7 in
        let* α9 : ltac:(refine (ref (M.Val (u32)))) := borrow α8 in
        let* α10 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α10 ] in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (array core.fmt.rt.Argument)) := deref α12 in
        let* α14 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α13 in
        let* α15 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α14 in
        let* α16 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α15 in
        std.io.stdio._print α16 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "just an integer: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine u32) := M.alloc 5 in
        let* α6 : ltac:(refine (ref u32)) := borrow α5 in
        let* α7 : ltac:(refine u32) := deref α6 in
        let* α8 : ltac:(refine (ref u32)) := borrow α7 in
        let* α9 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α8 in
        let* α10 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α9 ] in
        let* α11 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α10 in
        let* α12 : ltac:(refine (array core.fmt.rt.Argument)) := deref α11 in
        let* α13 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α12 in
        let* α14 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α13 in
        let* α15 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α14 in
        std.io.stdio._print α15 in
      M.alloc tt in
    let* tuple : ltac:(refine (M.Val (i32 * (ref str) * f64 * bool))) :=
      let* α0 : ltac:(refine i32) := M.alloc 1 in
      let* α1 : ltac:(refine f64) := M.alloc 5 (* 4.5 *) in
      let* α2 : ltac:(refine bool) := M.alloc true in
      M.alloc (α0, mk_str "hello", α1, α2) in
    let '(a, b, c, d) := tuple in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str ""; mk_str ", "; mk_str ", "; mk_str ", "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref i32)) := borrow a in
        let* α6 : ltac:(refine i32) := deref α5 in
        let* α7 : ltac:(refine (ref i32)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (ref (ref str))) := borrow b in
        let* α10 : ltac:(refine (ref str)) := deref α9 in
        let* α11 : ltac:(refine (ref (ref str))) := borrow α10 in
        let* α12 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α11 in
        let* α13 : ltac:(refine (ref f64)) := borrow c in
        let* α14 : ltac:(refine f64) := deref α13 in
        let* α15 : ltac:(refine (ref f64)) := borrow α14 in
        let* α16 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α15 in
        let* α17 : ltac:(refine (ref bool)) := borrow d in
        let* α18 : ltac:(refine bool) := deref α17 in
        let* α19 : ltac:(refine (ref bool)) := borrow α18 in
        let* α20 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α19 in
        let* α21 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8; α12; α16; α20 ] in
        let* α22 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α21 in
        let* α23 : ltac:(refine (array core.fmt.rt.Argument)) := deref α22 in
        let* α24 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α23 in
        let* α25 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α24 in
        let* α26 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α25 in
        std.io.stdio._print α26 in
      M.alloc tt in
    let* matrix : ltac:(refine tuples.Matrix) :=
      let* α0 : ltac:(refine f32) := M.alloc 1 (* 1.1 *) in
      let* α1 : ltac:(refine f32) := M.alloc 1 (* 1.2 *) in
      let* α2 : ltac:(refine f32) := M.alloc 2 (* 2.1 *) in
      let* α3 : ltac:(refine f32) := M.alloc 2 (* 2.2 *) in
      M.alloc (tuples.Matrix.Build_t α0 α1 α2 α3) in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref tuples.Matrix)) := borrow matrix in
        let* α6 : ltac:(refine tuples.Matrix) := deref α5 in
        let* α7 : ltac:(refine (ref tuples.Matrix)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    M.alloc tt).
