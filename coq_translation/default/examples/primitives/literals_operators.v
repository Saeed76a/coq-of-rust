(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Integer addition
    println!("1 + 2 = {}", 1u32 + 2);

    // Integer subtraction
    println!("1 - 2 = {}", 1i32 - 2);
    // TODO ^ Try changing `1i32` to `1u32` to see why the type is important

    // Short-circuiting boolean logic
    println!("true AND false is {}", true && false);
    println!("true OR false is {}", true || false);
    println!("NOT true is {}", !true);

    // Bitwise operations
    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
    println!("1 << 5 is {}", 1u32 << 5);
    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);

    // Use underscores to improve readability!
    println!("One million is written as {}", 1_000_000u32);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "1 + 2 = "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
        let* α4 : ltac:(refine (M.Val u32.t)) := M.alloc 2 in
        let* α5 : ltac:(refine (M.Val u32.t)) := BinOp.add α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref u32.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "1 - 2 = "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
        let* α4 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
        let* α5 : ltac:(refine (M.Val i32.t)) := BinOp.sub α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref i32.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "true AND false is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val bool.t)) := M.alloc true in
        let* α4 : ltac:(refine (M.Val bool.t)) := M.alloc false in
        let* α5 : ltac:(refine (M.Val bool.t)) := BinOp.and α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref bool.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "true OR false is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val bool.t)) := M.alloc true in
        let* α4 : ltac:(refine (M.Val bool.t)) := M.alloc false in
        let* α5 : ltac:(refine (M.Val bool.t)) := BinOp.or α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref bool.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "NOT true is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val bool.t)) := M.alloc true in
        let* α4 : ltac:(refine (M.Val bool.t)) := UnOp.not α3 in
        let* α5 : ltac:(refine (M.Val (ref bool.t))) := borrow α4 in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α7 in
        let* α9 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "0011 AND 0101 is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val u32.t)) := M.alloc 3 in
        let* α4 : ltac:(refine (M.Val u32.t)) := M.alloc 5 in
        let* α5 : ltac:(refine (M.Val u32.t)) := BinOp.bit_and α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref u32.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_binary"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val usize.t)) := M.alloc 0 in
        let* α12 : ltac:(refine (M.Val char.t)) := M.alloc " "%char in
        let* α13 : ltac:(refine (M.Val core.fmt.rt.Alignment.t)) :=
          M.alloc core.fmt.rt.Alignment.Unknown in
        let* α14 : ltac:(refine (M.Val u32.t)) := M.alloc 8 in
        let* α15 : ltac:(refine (M.Val core.fmt.rt.Count.t)) :=
          M.alloc core.fmt.rt.Count.Implied in
        let* α16 : ltac:(refine (M.Val usize.t)) := M.alloc 4 in
        let* α17 : ltac:(refine (M.Val core.fmt.rt.Count.t)) :=
          "unimplemented parent_kind" α16 in
        let* α18 : ltac:(refine (M.Val core.fmt.rt.Placeholder.t)) :=
          core.fmt.rt.Placeholder.t::["new"] α11 α12 α13 α14 α15 α17 in
        let* α19 : ltac:(refine (M.Val (array core.fmt.rt.Placeholder.t))) :=
          M.alloc [ α18 ] in
        let* α20 :
            ltac:(refine (M.Val (ref (array core.fmt.rt.Placeholder.t)))) :=
          borrow α19 in
        let* α21 :
            ltac:(refine (M.Val (ref (slice core.fmt.rt.Placeholder.t)))) :=
          pointer_coercion "Unsize" α20 in
        let* α22 : ltac:(refine (M.Val core.fmt.rt.UnsafeArg.t)) :=
          core.fmt.rt.UnsafeArg.t::["new"] in
        let* α23 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1_formatted"] α2 α10 α21 α22 in
        std.io.stdio._print α23 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "0011 OR 0101 is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val u32.t)) := M.alloc 3 in
        let* α4 : ltac:(refine (M.Val u32.t)) := M.alloc 5 in
        let* α5 : ltac:(refine (M.Val u32.t)) := BinOp.bit_or α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref u32.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_binary"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val usize.t)) := M.alloc 0 in
        let* α12 : ltac:(refine (M.Val char.t)) := M.alloc " "%char in
        let* α13 : ltac:(refine (M.Val core.fmt.rt.Alignment.t)) :=
          M.alloc core.fmt.rt.Alignment.Unknown in
        let* α14 : ltac:(refine (M.Val u32.t)) := M.alloc 8 in
        let* α15 : ltac:(refine (M.Val core.fmt.rt.Count.t)) :=
          M.alloc core.fmt.rt.Count.Implied in
        let* α16 : ltac:(refine (M.Val usize.t)) := M.alloc 4 in
        let* α17 : ltac:(refine (M.Val core.fmt.rt.Count.t)) :=
          "unimplemented parent_kind" α16 in
        let* α18 : ltac:(refine (M.Val core.fmt.rt.Placeholder.t)) :=
          core.fmt.rt.Placeholder.t::["new"] α11 α12 α13 α14 α15 α17 in
        let* α19 : ltac:(refine (M.Val (array core.fmt.rt.Placeholder.t))) :=
          M.alloc [ α18 ] in
        let* α20 :
            ltac:(refine (M.Val (ref (array core.fmt.rt.Placeholder.t)))) :=
          borrow α19 in
        let* α21 :
            ltac:(refine (M.Val (ref (slice core.fmt.rt.Placeholder.t)))) :=
          pointer_coercion "Unsize" α20 in
        let* α22 : ltac:(refine (M.Val core.fmt.rt.UnsafeArg.t)) :=
          core.fmt.rt.UnsafeArg.t::["new"] in
        let* α23 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1_formatted"] α2 α10 α21 α22 in
        std.io.stdio._print α23 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "0011 XOR 0101 is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val u32.t)) := M.alloc 3 in
        let* α4 : ltac:(refine (M.Val u32.t)) := M.alloc 5 in
        let* α5 : ltac:(refine (M.Val u32.t)) := BinOp.bit_xor α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref u32.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_binary"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val usize.t)) := M.alloc 0 in
        let* α12 : ltac:(refine (M.Val char.t)) := M.alloc " "%char in
        let* α13 : ltac:(refine (M.Val core.fmt.rt.Alignment.t)) :=
          M.alloc core.fmt.rt.Alignment.Unknown in
        let* α14 : ltac:(refine (M.Val u32.t)) := M.alloc 8 in
        let* α15 : ltac:(refine (M.Val core.fmt.rt.Count.t)) :=
          M.alloc core.fmt.rt.Count.Implied in
        let* α16 : ltac:(refine (M.Val usize.t)) := M.alloc 4 in
        let* α17 : ltac:(refine (M.Val core.fmt.rt.Count.t)) :=
          "unimplemented parent_kind" α16 in
        let* α18 : ltac:(refine (M.Val core.fmt.rt.Placeholder.t)) :=
          core.fmt.rt.Placeholder.t::["new"] α11 α12 α13 α14 α15 α17 in
        let* α19 : ltac:(refine (M.Val (array core.fmt.rt.Placeholder.t))) :=
          M.alloc [ α18 ] in
        let* α20 :
            ltac:(refine (M.Val (ref (array core.fmt.rt.Placeholder.t)))) :=
          borrow α19 in
        let* α21 :
            ltac:(refine (M.Val (ref (slice core.fmt.rt.Placeholder.t)))) :=
          pointer_coercion "Unsize" α20 in
        let* α22 : ltac:(refine (M.Val core.fmt.rt.UnsafeArg.t)) :=
          core.fmt.rt.UnsafeArg.t::["new"] in
        let* α23 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1_formatted"] α2 α10 α21 α22 in
        std.io.stdio._print α23 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "1 << 5 is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
        let* α4 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
        let* α5 : ltac:(refine (M.Val u32.t)) := BinOp.shl α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref u32.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "0x80 >> 2 is 0x"; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val u32.t)) := M.alloc 128 in
        let* α4 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
        let* α5 : ltac:(refine (M.Val u32.t)) := BinOp.shr α3 α4 in
        let* α6 : ltac:(refine (M.Val (ref u32.t))) := borrow α5 in
        let* α7 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_lower_hex"] α6 in
        let* α8 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α8 in
        let* α10 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str)))) :=
          M.alloc [ mk_str "One million is written as 1000000
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str))))) := borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ ] in
        let* α4 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α3 in
        let* α5 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α5 in
        std.io.stdio._print α6 in
      M.alloc tt in
    M.alloc tt).
