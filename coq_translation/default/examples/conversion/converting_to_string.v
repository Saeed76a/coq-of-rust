(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Circle.
  Unset Primitive Projections.
  Record t : Set := {
    radius : i32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_radius : Notation.Dot "radius" := {
    Notation.dot '(Build_t x0) := x0;
  }.
  Global Instance Get_AF_radius : Notation.DoubleColon t "radius" := {
    Notation.double_colon '(Build_t x0) := x0;
  }.
End Circle.
Definition Circle : Set := ⟅Circle.t⟆.

Module Impl_core_fmt_Display_for_converting_to_string_Circle.
  Definition Self := converting_to_string.Circle.
  
  Definition fmt
      `{H' : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H') core.fmt.Result :=
    let* α0 := deref f core.fmt.Formatter in
    let* α1 := borrow_mut α0 core.fmt.Formatter in
    let* α2 := borrow [ "Circle of radius " ] (list (ref str)) in
    let* α3 := deref α2 (list (ref str)) in
    let* α4 := borrow α3 (list (ref str)) in
    let* α5 := pointer_coercion "Unsize" α4 in
    let* α6 := deref self converting_to_string.Circle in
    let* α7 := borrow α6.["radius"] i32 in
    let* α8 := deref α7 i32 in
    let* α9 := borrow α8 i32 in
    let* α10 := core.fmt.rt.Argument::["new_display"] α9 in
    let* α11 := borrow [ α10 ] (list core.fmt.rt.Argument) in
    let* α12 := deref α11 (list core.fmt.rt.Argument) in
    let* α13 := borrow α12 (list core.fmt.rt.Argument) in
    let* α14 := pointer_coercion "Unsize" α13 in
    let* α15 := core.fmt.Arguments::["new_v1"] α5 α14 in
    core.fmt.Formatter::["write_fmt"] α1 α15.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Display_for_converting_to_string_Circle.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let circle := {| converting_to_string.Circle.radius := 6; |} in
  let* _ :=
    let* α0 := borrow circle converting_to_string.Circle in
    alloc.string.ToString.to_string α0 in
  Pure tt.
