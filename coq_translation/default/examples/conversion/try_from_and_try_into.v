(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module EvenNumber.
  Unset Primitive Projections.
  Record t : Set := {
    _ : i32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End EvenNumber.
Definition EvenNumber := @EvenNumber.t.

Module Impl_core_fmt_Debug_for_try_from_and_try_into_EvenNumber.
  Definition Self := try_from_and_try_into.EvenNumber.
  
  Definition fmt
      `{H' : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H') core.fmt.Result :=
    let* α0 := deref f core.fmt.Formatter in
    let* α1 := borrow_mut α0 core.fmt.Formatter in
    let* α2 := deref "EvenNumber" str in
    let* α3 := borrow α2 str in
    let* α4 := deref self try_from_and_try_into.EvenNumber in
    let* α5 := borrow α4.["0"] i32 in
    let* α6 := borrow α5 (ref i32) in
    let* α7 := deref α6 (ref i32) in
    let* α8 := borrow α7 (ref i32) in
    let* α9 := pointer_coercion "Unsize" α8 in
    core.fmt.Formatter::["debug_tuple_field1_finish"] α1 α3 α9.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_try_from_and_try_into_EvenNumber.

Module
  Impl_core_marker_StructuralPartialEq_for_try_from_and_try_into_EvenNumber.
  Definition Self := try_from_and_try_into.EvenNumber.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_try_from_and_try_into_EvenNumber.

Module Impl_core_cmp_PartialEq_for_try_from_and_try_into_EvenNumber.
  Definition Self := try_from_and_try_into.EvenNumber.
  
  Definition eq
      `{H' : State.Trait}
      (self : ref Self)
      (other : ref try_from_and_try_into.EvenNumber)
      : M (H := H') bool :=
    let* α0 := deref self try_from_and_try_into.EvenNumber in
    let* α1 := deref other try_from_and_try_into.EvenNumber in
    eq α0.["0"] α1.["0"].
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_try_from_and_try_into_EvenNumber.

Module Impl_core_convert_TryFrom_for_try_from_and_try_into_EvenNumber.
  Definition Self := try_from_and_try_into.EvenNumber.
  
  Definition Error : Set := unit.
  
  Definition try_from
      `{H' : State.Trait}
      (value : i32)
      : M (H := H') (core.result.Result Self Error) :=
    let* α0 := rem value 2 in
    let* α1 := eq α0 0 in
    let* α2 := use α1 in
    if (α2 : bool) then
      Pure
        (core.result.Result.Ok (try_from_and_try_into.EvenNumber.Build_t value))
    else
      Pure (core.result.Result.Err tt).
  
  Global Instance AssociatedFunction_try_from `{H' : State.Trait} :
    Notation.DoubleColon Self "try_from" := {
    Notation.double_colon := try_from;
  }.
  
  Global Instance I : core.convert.TryFrom.Trait Self (T := i32) := {
    core.convert.TryFrom.Error := Error;
    core.convert.TryFrom.try_from `{H' : State.Trait} := try_from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_TryFrom_for_try_from_and_try_into_EvenNumber.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H' : State.Trait} : M (H := H') unit :=
  let* _ :=
    let* α0 := core.convert.TryFrom.try_from 8 in
    let* α1 :=
      borrow α0 (core.result.Result try_from_and_try_into.EvenNumber unit) in
    let* α2 :=
      borrow
        (core.result.Result.Ok (try_from_and_try_into.EvenNumber.Build_t 8))
        (core.result.Result try_from_and_try_into.EvenNumber unit) in
    match (α1, α2) with
    | (left_val, right_val) =>
      let* α0 :=
        deref
          left_val
          (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α1 :=
        borrow α0 (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α2 :=
        deref
          right_val
          (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α3 :=
        borrow α2 (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α4 := core.cmp.PartialEq.eq α1 α3 in
      let* α5 := not α4 in
      let* α6 := use α5 in
      if (α6 : bool) then
        let kind := core.panicking.AssertKind.Eq tt in
        let* _ :=
          let* α0 :=
            deref
              left_val
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α1 :=
            borrow
              α0
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α2 :=
            deref
              α1
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α3 :=
            borrow
              α2
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α4 :=
            deref
              right_val
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α5 :=
            borrow
              α4
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α6 :=
            deref
              α5
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α7 :=
            borrow
              α6
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          core.panicking.assert_failed
            kind
            α3
            α7
            (core.option.Option.None tt) in
        never_to_any tt
      else
        Pure tt
    end in
  let* _ :=
    let* α0 := core.convert.TryFrom.try_from 5 in
    let* α1 :=
      borrow α0 (core.result.Result try_from_and_try_into.EvenNumber unit) in
    let* α2 :=
      borrow
        (core.result.Result.Err tt)
        (core.result.Result try_from_and_try_into.EvenNumber unit) in
    match (α1, α2) with
    | (left_val, right_val) =>
      let* α0 :=
        deref
          left_val
          (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α1 :=
        borrow α0 (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α2 :=
        deref
          right_val
          (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α3 :=
        borrow α2 (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α4 := core.cmp.PartialEq.eq α1 α3 in
      let* α5 := not α4 in
      let* α6 := use α5 in
      if (α6 : bool) then
        let kind := core.panicking.AssertKind.Eq tt in
        let* _ :=
          let* α0 :=
            deref
              left_val
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α1 :=
            borrow
              α0
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α2 :=
            deref
              α1
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α3 :=
            borrow
              α2
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α4 :=
            deref
              right_val
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α5 :=
            borrow
              α4
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α6 :=
            deref
              α5
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α7 :=
            borrow
              α6
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          core.panicking.assert_failed
            kind
            α3
            α7
            (core.option.Option.None tt) in
        never_to_any tt
      else
        Pure tt
    end in
  let* result := core.convert.TryInto.try_into 8 in
  let* _ :=
    let* α0 :=
      borrow
        result
        (core.result.Result try_from_and_try_into.EvenNumber unit) in
    let* α1 :=
      borrow
        (core.result.Result.Ok (try_from_and_try_into.EvenNumber.Build_t 8))
        (core.result.Result try_from_and_try_into.EvenNumber unit) in
    match (α0, α1) with
    | (left_val, right_val) =>
      let* α0 :=
        deref
          left_val
          (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α1 :=
        borrow α0 (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α2 :=
        deref
          right_val
          (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α3 :=
        borrow α2 (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α4 := core.cmp.PartialEq.eq α1 α3 in
      let* α5 := not α4 in
      let* α6 := use α5 in
      if (α6 : bool) then
        let kind := core.panicking.AssertKind.Eq tt in
        let* _ :=
          let* α0 :=
            deref
              left_val
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α1 :=
            borrow
              α0
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α2 :=
            deref
              α1
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α3 :=
            borrow
              α2
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α4 :=
            deref
              right_val
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α5 :=
            borrow
              α4
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α6 :=
            deref
              α5
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α7 :=
            borrow
              α6
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          core.panicking.assert_failed
            kind
            α3
            α7
            (core.option.Option.None tt) in
        never_to_any tt
      else
        Pure tt
    end in
  let* result := core.convert.TryInto.try_into 5 in
  let* _ :=
    let* α0 :=
      borrow
        result
        (core.result.Result try_from_and_try_into.EvenNumber unit) in
    let* α1 :=
      borrow
        (core.result.Result.Err tt)
        (core.result.Result try_from_and_try_into.EvenNumber unit) in
    match (α0, α1) with
    | (left_val, right_val) =>
      let* α0 :=
        deref
          left_val
          (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α1 :=
        borrow α0 (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α2 :=
        deref
          right_val
          (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α3 :=
        borrow α2 (core.result.Result try_from_and_try_into.EvenNumber unit) in
      let* α4 := core.cmp.PartialEq.eq α1 α3 in
      let* α5 := not α4 in
      let* α6 := use α5 in
      if (α6 : bool) then
        let kind := core.panicking.AssertKind.Eq tt in
        let* _ :=
          let* α0 :=
            deref
              left_val
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α1 :=
            borrow
              α0
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α2 :=
            deref
              α1
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α3 :=
            borrow
              α2
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α4 :=
            deref
              right_val
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α5 :=
            borrow
              α4
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α6 :=
            deref
              α5
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          let* α7 :=
            borrow
              α6
              (core.result.Result try_from_and_try_into.EvenNumber unit) in
          core.panicking.assert_failed
            kind
            α3
            α7
            (core.option.Option.None tt) in
        never_to_any tt
      else
        Pure tt
    end in
  Pure tt.
