(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module impls.
  Module Impl_mod_StorageLayout_for_AccountId.
    Definition Self := AccountId.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_AccountId.
  
  Module Impl_mod_StorageLayout_for_Hash.
    Definition Self := Hash.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_Hash.
  
  Module Impl_mod_StorageLayout_for_String.
    Definition Self := String.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_String.
  
  Module Impl_mod_StorageLayout_for_bool.
    Definition Self := bool.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_bool.
  
  Module Impl_mod_StorageLayout_for_char.
    Definition Self := char.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_char.
  
  Module Impl_mod_StorageLayout_for_Tuple_.
    Definition Self := unit.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_Tuple_.
  
  Module Impl_mod_StorageLayout_for_u8.
    Definition Self := u8.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_u8.
  
  Module Impl_mod_StorageLayout_for_u16.
    Definition Self := u16.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_u16.
  
  Module Impl_mod_StorageLayout_for_u32.
    Definition Self := u32.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_u32.
  
  Module Impl_mod_StorageLayout_for_u64.
    Definition Self := u64.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_u64.
  
  Module Impl_mod_StorageLayout_for_u128.
    Definition Self := u128.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_u128.
  
  Module Impl_mod_StorageLayout_for_i8.
    Definition Self := i8.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_i8.
  
  Module Impl_mod_StorageLayout_for_i16.
    Definition Self := i16.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_i16.
  
  Module Impl_mod_StorageLayout_for_i32.
    Definition Self := i32.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_i32.
  
  Module Impl_mod_StorageLayout_for_i64.
    Definition Self := i64.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_i64.
  
  Module Impl_mod_StorageLayout_for_i128.
    Definition Self := i128.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_i128.
  
  Module Impl_mod_StorageLayout_for_Array_T.
  Section Impl_mod_StorageLayout_for_Array_T.
    Context {T : Set}.
    
    Definition Self := list T.
    
    Definition layout (key : ref Key) : M Layout :=
      let len := cast mod.impls.N u32 in
      let* α0 := LayoutKey.from key in
      let* α1 := mod.StorageLayout.layout key in
      let* α2 := ArrayLayout.new α0 len α1 in
      Layout.Array α2.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_Array_T.
  End Impl_mod_StorageLayout_for_Array_T.
  
  Module Impl_mod_StorageLayout_for_Box_T.
  Section Impl_mod_StorageLayout_for_Box_T.
    Context {T : Set}.
    
    Definition Self := Box T.
    
    Definition layout (key : ref Key) : M Layout :=
      mod.StorageLayout.layout key.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_Box_T.
  End Impl_mod_StorageLayout_for_Box_T.
  
  Module Impl_mod_StorageLayout_for_core_option_Option_T.
  Section Impl_mod_StorageLayout_for_core_option_Option_T.
    Context {T : Set}.
    
    Definition Self := core.option.Option T.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := Discriminant.from 0 in
      let* α1 := Vec.new tt in
      let* α2 := StructLayout.new "None" α1 in
      let* α3 := Discriminant.from 1 in
      let* α4 := mod.StorageLayout.layout key in
      let* α5 := FieldLayout.new "0" α4 in
      let* α6 := StructLayout.new "Some" [ α5 ] in
      let* α7 := EnumLayout.new "Option" key [ (α0, α2); (α3, α6) ] in
      Layout.Enum α7.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_core_option_Option_T.
  End Impl_mod_StorageLayout_for_core_option_Option_T.
  
  Module Impl_mod_StorageLayout_for_core_result_Result_T_E.
  Section Impl_mod_StorageLayout_for_core_result_Result_T_E.
    Context {T E : Set}.
    
    Definition Self := core.result.Result T E.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := key.["deref"] in
      let* α1 := Discriminant.from 0 in
      let* α2 := mod.StorageLayout.layout key in
      let* α3 := FieldLayout.new "0" α2 in
      let* α4 := StructLayout.new "Ok" [ α3 ] in
      let* α5 := Discriminant.from 1 in
      let* α6 := mod.StorageLayout.layout key in
      let* α7 := FieldLayout.new "1" α6 in
      let* α8 := StructLayout.new "Err" [ α7 ] in
      let* α9 := EnumLayout.new "Result" α0 [ (α1, α4); (α5, α8) ] in
      Layout.Enum α9.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_core_result_Result_T_E.
  End Impl_mod_StorageLayout_for_core_result_Result_T_E.
  
  Module Impl_mod_StorageLayout_for_Vec_T.
  Section Impl_mod_StorageLayout_for_Vec_T.
    Context {T : Set}.
    
    Definition Self := Vec T.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_Vec_T.
  End Impl_mod_StorageLayout_for_Vec_T.
  
  Module Impl_mod_StorageLayout_for_BTreeMap_K_V.
  Section Impl_mod_StorageLayout_for_BTreeMap_K_V.
    Context {K V : Set}.
    
    Definition Self := BTreeMap K V.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_BTreeMap_K_V.
  End Impl_mod_StorageLayout_for_BTreeMap_K_V.
  
  Module Impl_mod_StorageLayout_for_BTreeSet_T.
  Section Impl_mod_StorageLayout_for_BTreeSet_T.
    Context {T : Set}.
    
    Definition Self := BTreeSet T.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_BTreeSet_T.
  End Impl_mod_StorageLayout_for_BTreeSet_T.
  
  Module Impl_mod_StorageLayout_for_VecDeque_T.
  Section Impl_mod_StorageLayout_for_VecDeque_T.
    Context {T : Set}.
    
    Definition Self := VecDeque T.
    
    Definition layout (key : ref Key) : M Layout :=
      let* α0 := LayoutKey.from key in
      let* α1 := LeafLayout.from_key α0 in
      Layout.Leaf α1.
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    Global Instance I : mod.StorageLayout.Trait Self := {
      mod.StorageLayout.layout := layout;
    }.
  End Impl_mod_StorageLayout_for_VecDeque_T.
  End Impl_mod_StorageLayout_for_VecDeque_T.
End impls.

Module Impl_mod_StorageLayout_for_AccountId.
  Definition Self := AccountId.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_AccountId.

Module Impl_mod_StorageLayout_for_Hash.
  Definition Self := Hash.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Hash.

Module Impl_mod_StorageLayout_for_String.
  Definition Self := String.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_String.

Module Impl_mod_StorageLayout_for_bool.
  Definition Self := bool.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_bool.

Module Impl_mod_StorageLayout_for_char.
  Definition Self := char.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_char.

Module Impl_mod_StorageLayout_for_Tuple_.
  Definition Self := unit.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_.

Module Impl_mod_StorageLayout_for_u8.
  Definition Self := u8.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_u8.

Module Impl_mod_StorageLayout_for_u16.
  Definition Self := u16.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_u16.

Module Impl_mod_StorageLayout_for_u32.
  Definition Self := u32.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_u32.

Module Impl_mod_StorageLayout_for_u64.
  Definition Self := u64.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_u64.

Module Impl_mod_StorageLayout_for_u128.
  Definition Self := u128.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_u128.

Module Impl_mod_StorageLayout_for_i8.
  Definition Self := i8.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_i8.

Module Impl_mod_StorageLayout_for_i16.
  Definition Self := i16.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_i16.

Module Impl_mod_StorageLayout_for_i32.
  Definition Self := i32.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_i32.

Module Impl_mod_StorageLayout_for_i64.
  Definition Self := i64.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_i64.

Module Impl_mod_StorageLayout_for_i128.
  Definition Self := i128.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_i128.

Definition TUPLE_NAME : ref str := run (Pure "(A)").

Module Impl_mod_StorageLayout_for_Tuple_A_.
Section Impl_mod_StorageLayout_for_Tuple_A_.
  Context {A : Set}.
  
  Definition Self := A.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := StructLayout.new mod.impls._.TUPLE_NAME [ α1 ] in
    Layout.Struct α2.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_.
End Impl_mod_StorageLayout_for_Tuple_A_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_.
  Context {A B : Set}.
  
  Definition Self := A * B.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := StructLayout.new mod.impls._.TUPLE_NAME [ α1; α3 ] in
    Layout.Struct α4.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_.
End Impl_mod_StorageLayout_for_Tuple_A_B_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B, C)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_C_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_C_.
  Context {A B C : Set}.
  
  Definition Self := A * B * C.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new Err α4 in
    let* α6 := StructLayout.new mod.impls._.TUPLE_NAME [ α1; α3; α5 ] in
    Layout.Struct α6.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B, C, D)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_C_D_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_C_D_.
  Context {A B C D : Set}.
  
  Definition Self := A * B * C * D.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new Err α4 in
    let* α6 := mod.StorageLayout.layout key in
    let* α7 := FieldLayout.new Err α6 in
    let* α8 := StructLayout.new mod.impls._.TUPLE_NAME [ α1; α3; α5; α7 ] in
    Layout.Struct α8.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B, C, D, E)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_.
  Context {A B C D E : Set}.
  
  Definition Self := A * B * C * D * E.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new Err α4 in
    let* α6 := mod.StorageLayout.layout key in
    let* α7 := FieldLayout.new Err α6 in
    let* α8 := mod.StorageLayout.layout key in
    let* α9 := FieldLayout.new Err α8 in
    let* α10 :=
      StructLayout.new mod.impls._.TUPLE_NAME [ α1; α3; α5; α7; α9 ] in
    Layout.Struct α10.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B, C, D, E, F)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_.
  Context {A B C D E F : Set}.
  
  Definition Self := A * B * C * D * E * F.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new Err α4 in
    let* α6 := mod.StorageLayout.layout key in
    let* α7 := FieldLayout.new Err α6 in
    let* α8 := mod.StorageLayout.layout key in
    let* α9 := FieldLayout.new Err α8 in
    let* α10 := mod.StorageLayout.layout key in
    let* α11 := FieldLayout.new Err α10 in
    let* α12 :=
      StructLayout.new mod.impls._.TUPLE_NAME [ α1; α3; α5; α7; α9; α11 ] in
    Layout.Struct α12.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B, C, D, E, F, G)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_.
  Context {A B C D E F G : Set}.
  
  Definition Self := A * B * C * D * E * F * G.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new Err α4 in
    let* α6 := mod.StorageLayout.layout key in
    let* α7 := FieldLayout.new Err α6 in
    let* α8 := mod.StorageLayout.layout key in
    let* α9 := FieldLayout.new Err α8 in
    let* α10 := mod.StorageLayout.layout key in
    let* α11 := FieldLayout.new Err α10 in
    let* α12 := mod.StorageLayout.layout key in
    let* α13 := FieldLayout.new Err α12 in
    let* α14 :=
      StructLayout.new
        mod.impls._.TUPLE_NAME
        [ α1; α3; α5; α7; α9; α11; α13 ] in
    Layout.Struct α14.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B, C, D, E, F, G, H)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_.
  Context {A B C D E F G H : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new Err α4 in
    let* α6 := mod.StorageLayout.layout key in
    let* α7 := FieldLayout.new Err α6 in
    let* α8 := mod.StorageLayout.layout key in
    let* α9 := FieldLayout.new Err α8 in
    let* α10 := mod.StorageLayout.layout key in
    let* α11 := FieldLayout.new Err α10 in
    let* α12 := mod.StorageLayout.layout key in
    let* α13 := FieldLayout.new Err α12 in
    let* α14 := mod.StorageLayout.layout key in
    let* α15 := FieldLayout.new Err α14 in
    let* α16 :=
      StructLayout.new
        mod.impls._.TUPLE_NAME
        [ α1; α3; α5; α7; α9; α11; α13; α15 ] in
    Layout.Struct α16.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B, C, D, E, F, G, H, I)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_I_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_I_.
  Context {A B C D E F G H I : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new Err α4 in
    let* α6 := mod.StorageLayout.layout key in
    let* α7 := FieldLayout.new Err α6 in
    let* α8 := mod.StorageLayout.layout key in
    let* α9 := FieldLayout.new Err α8 in
    let* α10 := mod.StorageLayout.layout key in
    let* α11 := FieldLayout.new Err α10 in
    let* α12 := mod.StorageLayout.layout key in
    let* α13 := FieldLayout.new Err α12 in
    let* α14 := mod.StorageLayout.layout key in
    let* α15 := FieldLayout.new Err α14 in
    let* α16 := mod.StorageLayout.layout key in
    let* α17 := FieldLayout.new Err α16 in
    let* α18 :=
      StructLayout.new
        mod.impls._.TUPLE_NAME
        [ α1; α3; α5; α7; α9; α11; α13; α15; α17 ] in
    Layout.Struct α18.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_I_.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_I_.

Definition TUPLE_NAME : ref str := run (Pure "(A, B, C, D, E, F, G, H, I, J)").

Module Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_I_J_.
Section Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_I_J_.
  Context {A B C D E F G H I J : Set}.
  
  Definition Self := A * B * C * D * E * F * G * H * I * J.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := mod.StorageLayout.layout key in
    let* α1 := FieldLayout.new Err α0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new Err α2 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new Err α4 in
    let* α6 := mod.StorageLayout.layout key in
    let* α7 := FieldLayout.new Err α6 in
    let* α8 := mod.StorageLayout.layout key in
    let* α9 := FieldLayout.new Err α8 in
    let* α10 := mod.StorageLayout.layout key in
    let* α11 := FieldLayout.new Err α10 in
    let* α12 := mod.StorageLayout.layout key in
    let* α13 := FieldLayout.new Err α12 in
    let* α14 := mod.StorageLayout.layout key in
    let* α15 := FieldLayout.new Err α14 in
    let* α16 := mod.StorageLayout.layout key in
    let* α17 := FieldLayout.new Err α16 in
    let* α18 := mod.StorageLayout.layout key in
    let* α19 := FieldLayout.new Err α18 in
    let* α20 :=
      StructLayout.new
        mod.impls._.TUPLE_NAME
        [ α1; α3; α5; α7; α9; α11; α13; α15; α17; α19 ] in
    Layout.Struct α20.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_I_J_.
End Impl_mod_StorageLayout_for_Tuple_A_B_C_D_E_F_G_H_I_J_.

Module Impl_mod_StorageLayout_for_Array_T.
Section Impl_mod_StorageLayout_for_Array_T.
  Context {T : Set}.
  
  Definition Self := list T.
  
  Definition layout (key : ref Key) : M Layout :=
    let len := cast mod.impls.N u32 in
    let* α0 := LayoutKey.from key in
    let* α1 := mod.StorageLayout.layout key in
    let* α2 := ArrayLayout.new α0 len α1 in
    Layout.Array α2.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Array_T.
End Impl_mod_StorageLayout_for_Array_T.

Module Impl_mod_StorageLayout_for_Box_T.
Section Impl_mod_StorageLayout_for_Box_T.
  Context {T : Set}.
  
  Definition Self := Box T.
  
  Definition layout (key : ref Key) : M Layout := mod.StorageLayout.layout key.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Box_T.
End Impl_mod_StorageLayout_for_Box_T.

Module Impl_mod_StorageLayout_for_core_option_Option_T.
Section Impl_mod_StorageLayout_for_core_option_Option_T.
  Context {T : Set}.
  
  Definition Self := core.option.Option T.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := Discriminant.from 0 in
    let* α1 := Vec.new tt in
    let* α2 := StructLayout.new "None" α1 in
    let* α3 := Discriminant.from 1 in
    let* α4 := mod.StorageLayout.layout key in
    let* α5 := FieldLayout.new "0" α4 in
    let* α6 := StructLayout.new "Some" [ α5 ] in
    let* α7 := EnumLayout.new "Option" key [ (α0, α2); (α3, α6) ] in
    Layout.Enum α7.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_core_option_Option_T.
End Impl_mod_StorageLayout_for_core_option_Option_T.

Module Impl_mod_StorageLayout_for_core_result_Result_T_E.
Section Impl_mod_StorageLayout_for_core_result_Result_T_E.
  Context {T E : Set}.
  
  Definition Self := core.result.Result T E.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := key.["deref"] in
    let* α1 := Discriminant.from 0 in
    let* α2 := mod.StorageLayout.layout key in
    let* α3 := FieldLayout.new "0" α2 in
    let* α4 := StructLayout.new "Ok" [ α3 ] in
    let* α5 := Discriminant.from 1 in
    let* α6 := mod.StorageLayout.layout key in
    let* α7 := FieldLayout.new "1" α6 in
    let* α8 := StructLayout.new "Err" [ α7 ] in
    let* α9 := EnumLayout.new "Result" α0 [ (α1, α4); (α5, α8) ] in
    Layout.Enum α9.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_core_result_Result_T_E.
End Impl_mod_StorageLayout_for_core_result_Result_T_E.

Module Impl_mod_StorageLayout_for_Vec_T.
Section Impl_mod_StorageLayout_for_Vec_T.
  Context {T : Set}.
  
  Definition Self := Vec T.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_Vec_T.
End Impl_mod_StorageLayout_for_Vec_T.

Module Impl_mod_StorageLayout_for_BTreeMap_K_V.
Section Impl_mod_StorageLayout_for_BTreeMap_K_V.
  Context {K V : Set}.
  
  Definition Self := BTreeMap K V.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_BTreeMap_K_V.
End Impl_mod_StorageLayout_for_BTreeMap_K_V.

Module Impl_mod_StorageLayout_for_BTreeSet_T.
Section Impl_mod_StorageLayout_for_BTreeSet_T.
  Context {T : Set}.
  
  Definition Self := BTreeSet T.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_BTreeSet_T.
End Impl_mod_StorageLayout_for_BTreeSet_T.

Module Impl_mod_StorageLayout_for_VecDeque_T.
Section Impl_mod_StorageLayout_for_VecDeque_T.
  Context {T : Set}.
  
  Definition Self := VecDeque T.
  
  Definition layout (key : ref Key) : M Layout :=
    let* α0 := LayoutKey.from key in
    let* α1 := LeafLayout.from_key α0 in
    Layout.Leaf α1.
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : mod.StorageLayout.Trait Self := {
    mod.StorageLayout.layout := layout;
  }.
End Impl_mod_StorageLayout_for_VecDeque_T.
End Impl_mod_StorageLayout_for_VecDeque_T.

Module StorageLayout.
  Class Trait (Self : Set) : Set := {
    layout : (ref Key) -> (M Layout);
  }.
  
  Global Instance Method_layout `(Trait) : Notation.Dot "layout" := {
    Notation.dot := layout;
  }.
End StorageLayout.
