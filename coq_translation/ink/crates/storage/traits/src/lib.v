(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module impls.
  Module KeyType.
    Class Trait (Self : Set) : Set := {
      IS_AUTO_KEY : bool;
    }.
    
    Global Instance Method_IS_AUTO_KEY `(Trait)
      : Notation.Dot "IS_AUTO_KEY" := {
      Notation.dot := IS_AUTO_KEY;
    }.
  End KeyType.
  
  Module AutoKey.
    Inductive t : Set := Build.
  End AutoKey.
  Definition AutoKey := AutoKey.t.
  
  Module Impl_core_default_Default_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Definition default (_ : unit) : M lib.impls.AutoKey := Pure {|  |}.
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
  End Impl_core_default_Default_for_lib_impls_AutoKey.
  
  Module Impl_core_marker_Copy_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_lib_impls_AutoKey.
  
  Module Impl_core_clone_Clone_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Definition clone (self : ref Self) : M lib.impls.AutoKey := self.["deref"].
    
    Global Instance Method_clone : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
  End Impl_core_clone_Clone_for_lib_impls_AutoKey.
  
  Module Impl_core_marker_StructuralPartialEq_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_lib_impls_AutoKey.
  
  Module Impl_core_cmp_PartialEq_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Definition eq (self : ref Self) (other : ref lib.impls.AutoKey) : M bool :=
      Pure true.
    
    Global Instance Method_eq : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq := eq;
    }.
  End Impl_core_cmp_PartialEq_for_lib_impls_AutoKey.
  
  Module Impl_core_marker_StructuralEq_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_lib_impls_AutoKey.
  
  Module Impl_core_cmp_Eq_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_lib_impls_AutoKey.
  
  Module Impl_core_cmp_PartialOrd_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Definition partial_cmp
        (self : ref Self)
        (other : ref lib.impls.AutoKey)
        : M (core.option.Option core.cmp.Ordering) :=
      Pure (core.option.Option.Some core.cmp.Ordering.Equal).
    
    Global Instance Method_partial_cmp : Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I : core.cmp.PartialOrd.Trait Self := {
      core.cmp.PartialOrd.partial_cmp := partial_cmp;
    }.
  End Impl_core_cmp_PartialOrd_for_lib_impls_AutoKey.
  
  Module Impl_lib_storage_StorageKey_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Definition KEY := Pure 0.
    
    Global Instance AssociatedFunction_KEY :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    Global Instance I : lib.storage.StorageKey.Trait Self := {
      lib.storage.StorageKey.KEY := KEY;
    }.
  End Impl_lib_storage_StorageKey_for_lib_impls_AutoKey.
  
  Module Impl_lib_impls_KeyType_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Definition IS_AUTO_KEY := Pure true.
    
    Global Instance AssociatedFunction_IS_AUTO_KEY :
      Notation.DoubleColon Self "IS_AUTO_KEY" := {
      Notation.double_colon := IS_AUTO_KEY;
    }.
    
    Global Instance I : lib.impls.KeyType.Trait Self := {
      lib.impls.KeyType.IS_AUTO_KEY := IS_AUTO_KEY;
    }.
  End Impl_lib_impls_KeyType_for_lib_impls_AutoKey.
  
  Module Impl_core_fmt_Debug_for_lib_impls_AutoKey.
    Definition Self := lib.impls.AutoKey.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M core.fmt.Result :=
      let* α0 := f.["debug_struct"] "AutoKey" in
      let* α1 := α0.["field"] "key" (addr_of lib.storage.StorageKey.KEY) in
      α1.["finish"].
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_lib_impls_AutoKey.
  
  Module ManualKey.
    Record t : Set := { _ : core.marker.PhantomData (unit -> ParentKey);}.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ManualKey.
  Definition ManualKey := ManualKey.t.
  
  Module Impl_core_default_Default_for_lib_impls_ManualKey_ParentKey.
  Section Impl_core_default_Default_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Definition default (_ : unit) : M (lib.impls.ManualKey ParentKey) :=
      let* α0 := core.default.Default.default tt in
      Pure (lib.impls.ManualKey.Build_t α0).
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
  End Impl_core_default_Default_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_default_Default_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_core_marker_Copy_for_lib_impls_ManualKey_ParentKey.
  Section Impl_core_marker_Copy_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_marker_Copy_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_core_clone_Clone_for_lib_impls_ManualKey_ParentKey.
  Section Impl_core_clone_Clone_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Definition clone (self : ref Self) : M (lib.impls.ManualKey ParentKey) :=
      let* α0 := core.clone.Clone.clone (addr_of (self.[0])) in
      Pure (lib.impls.ManualKey.Build_t α0).
    
    Global Instance Method_clone : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
  End Impl_core_clone_Clone_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_clone_Clone_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_core_marker_StructuralEq_for_lib_impls_ManualKey_ParentKey.
  Section Impl_core_marker_StructuralEq_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_marker_StructuralEq_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_core_cmp_Eq_for_lib_impls_ManualKey_ParentKey.
  Section Impl_core_cmp_Eq_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
      let _ := tt in
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_cmp_Eq_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_core_marker_StructuralPartialEq_for_lib_impls_ManualKey_ParentKey.
  Section
    Impl_core_marker_StructuralPartialEq_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_marker_StructuralPartialEq_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_core_cmp_PartialEq_for_lib_impls_ManualKey_ParentKey.
  Section Impl_core_cmp_PartialEq_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Definition eq
        (self : ref Self)
        (other : ref (lib.impls.ManualKey ParentKey))
        : M bool :=
      (self.[0]).["eq"] (other.[0]).
    
    Global Instance Method_eq : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq := eq;
    }.
  End Impl_core_cmp_PartialEq_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_cmp_PartialEq_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_core_cmp_PartialOrd_for_lib_impls_ManualKey_ParentKey.
  Section Impl_core_cmp_PartialOrd_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Definition partial_cmp
        (self : ref Self)
        (other : ref (lib.impls.ManualKey ParentKey))
        : M (core.option.Option core.cmp.Ordering) :=
      core.cmp.PartialOrd.partial_cmp
        (addr_of (self.[0]))
        (addr_of (other.[0])).
    
    Global Instance Method_partial_cmp : Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I : core.cmp.PartialOrd.Trait Self := {
      core.cmp.PartialOrd.partial_cmp := partial_cmp;
    }.
  End Impl_core_cmp_PartialOrd_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_cmp_PartialOrd_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_lib_storage_StorageKey_for_lib_impls_ManualKey_ParentKey.
  Section Impl_lib_storage_StorageKey_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Definition KEY := KeyComposer.concat lib.impls.KEY ParentKey::["KEY"].
    
    Global Instance AssociatedFunction_KEY :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    Global Instance I : lib.storage.StorageKey.Trait Self := {
      lib.storage.StorageKey.KEY := KEY;
    }.
  End Impl_lib_storage_StorageKey_for_lib_impls_ManualKey_ParentKey.
  End Impl_lib_storage_StorageKey_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_lib_impls_KeyType_for_lib_impls_ManualKey_ParentKey.
  Section Impl_lib_impls_KeyType_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Definition IS_AUTO_KEY := Pure false.
    
    Global Instance AssociatedFunction_IS_AUTO_KEY :
      Notation.DoubleColon Self "IS_AUTO_KEY" := {
      Notation.double_colon := IS_AUTO_KEY;
    }.
    
    Global Instance I : lib.impls.KeyType.Trait Self := {
      lib.impls.KeyType.IS_AUTO_KEY := IS_AUTO_KEY;
    }.
  End Impl_lib_impls_KeyType_for_lib_impls_ManualKey_ParentKey.
  End Impl_lib_impls_KeyType_for_lib_impls_ManualKey_ParentKey.
  
  Module Impl_core_fmt_Debug_for_lib_impls_ManualKey_ParentKey.
  Section Impl_core_fmt_Debug_for_lib_impls_ManualKey_ParentKey.
    Context {ParentKey : Set}.
    
    Definition Self := lib.impls.ManualKey ParentKey.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M core.fmt.Result :=
      let* α0 := f.["debug_struct"] "ManualKey" in
      let* α1 := α0.["field"] "key" (addr_of lib.storage.StorageKey.KEY) in
      α1.["finish"].
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_lib_impls_ManualKey_ParentKey.
  End Impl_core_fmt_Debug_for_lib_impls_ManualKey_ParentKey.
  
  Module ResolverKey.
    Record t : Set := { _ : core.marker.PhantomData (unit -> (L * R));}.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ResolverKey.
  Definition ResolverKey := ResolverKey.t.
  
  Module Impl_core_default_Default_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_default_Default_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Definition default (_ : unit) : M (lib.impls.ResolverKey L R) :=
      let* α0 := core.default.Default.default tt in
      Pure (lib.impls.ResolverKey.Build_t α0).
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
  End Impl_core_default_Default_for_lib_impls_ResolverKey_L_R.
  End Impl_core_default_Default_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_core_marker_Copy_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_marker_Copy_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_lib_impls_ResolverKey_L_R.
  End Impl_core_marker_Copy_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_core_clone_Clone_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_clone_Clone_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Definition clone (self : ref Self) : M (lib.impls.ResolverKey L R) :=
      let* α0 := core.clone.Clone.clone (addr_of (self.[0])) in
      Pure (lib.impls.ResolverKey.Build_t α0).
    
    Global Instance Method_clone : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
  End Impl_core_clone_Clone_for_lib_impls_ResolverKey_L_R.
  End Impl_core_clone_Clone_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_core_marker_StructuralPartialEq_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_marker_StructuralPartialEq_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_lib_impls_ResolverKey_L_R.
  End Impl_core_marker_StructuralPartialEq_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_core_cmp_PartialEq_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_cmp_PartialEq_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Definition eq
        (self : ref Self)
        (other : ref (lib.impls.ResolverKey L R))
        : M bool :=
      (self.[0]).["eq"] (other.[0]).
    
    Global Instance Method_eq : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq := eq;
    }.
  End Impl_core_cmp_PartialEq_for_lib_impls_ResolverKey_L_R.
  End Impl_core_cmp_PartialEq_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_core_marker_StructuralEq_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_marker_StructuralEq_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_lib_impls_ResolverKey_L_R.
  End Impl_core_marker_StructuralEq_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_core_cmp_Eq_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_cmp_Eq_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
      let _ := tt in
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_lib_impls_ResolverKey_L_R.
  End Impl_core_cmp_Eq_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_core_cmp_PartialOrd_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_cmp_PartialOrd_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Definition partial_cmp
        (self : ref Self)
        (other : ref (lib.impls.ResolverKey L R))
        : M (core.option.Option core.cmp.Ordering) :=
      core.cmp.PartialOrd.partial_cmp
        (addr_of (self.[0]))
        (addr_of (other.[0])).
    
    Global Instance Method_partial_cmp : Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I : core.cmp.PartialOrd.Trait Self := {
      core.cmp.PartialOrd.partial_cmp := partial_cmp;
    }.
  End Impl_core_cmp_PartialOrd_for_lib_impls_ResolverKey_L_R.
  End Impl_core_cmp_PartialOrd_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_core_fmt_Debug_for_lib_impls_ResolverKey_L_R.
  Section Impl_core_fmt_Debug_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M core.fmt.Result :=
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "ResolverKey"
        (addr_of (addr_of (self.[0]))).
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_lib_impls_ResolverKey_L_R.
  End Impl_core_fmt_Debug_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_lib_storage_StorageKey_for_lib_impls_ResolverKey_L_R.
  Section Impl_lib_storage_StorageKey_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Definition
      KEY := if (L::["IS_AUTO_KEY"] : bool) then
        Pure R::["KEY"]
      else
        Pure L::["KEY"].
    
    Global Instance AssociatedFunction_KEY :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    Global Instance I : lib.storage.StorageKey.Trait Self := {
      lib.storage.StorageKey.KEY := KEY;
    }.
  End Impl_lib_storage_StorageKey_for_lib_impls_ResolverKey_L_R.
  End Impl_lib_storage_StorageKey_for_lib_impls_ResolverKey_L_R.
  
  Module Impl_lib_impls_KeyType_for_lib_impls_ResolverKey_L_R.
  Section Impl_lib_impls_KeyType_for_lib_impls_ResolverKey_L_R.
    Context {L R : Set}.
    
    Definition Self := lib.impls.ResolverKey L R.
    
    Definition IS_AUTO_KEY := Pure L::["IS_AUTO_KEY"].
    
    Global Instance AssociatedFunction_IS_AUTO_KEY :
      Notation.DoubleColon Self "IS_AUTO_KEY" := {
      Notation.double_colon := IS_AUTO_KEY;
    }.
    
    Global Instance I : lib.impls.KeyType.Trait Self := {
      lib.impls.KeyType.IS_AUTO_KEY := IS_AUTO_KEY;
    }.
  End Impl_lib_impls_KeyType_for_lib_impls_ResolverKey_L_R.
  End Impl_lib_impls_KeyType_for_lib_impls_ResolverKey_L_R.
  
  Definition FinalKey : Set :=
    lib.impls.ResolverKey
      lib.storage.StorableHint.PreferredKey
      (lib.impls.ManualKey ParentKey).
  
  Module Impl_lib_storage_AutoStorableHint_for_T.
  Section Impl_lib_storage_AutoStorableHint_for_T.
    Context {T ParentKey : Set}.
    
    Definition Self := T.
    
    Definition Type : Set := lib.storage.StorableHint.Type.
    
    Global Instance I :
        lib.storage.AutoStorableHint.Trait
          Self
          (Key := lib.impls.ManualKey ParentKey) := {
    }.
  End Impl_lib_storage_AutoStorableHint_for_T.
  End Impl_lib_storage_AutoStorableHint_for_T.
  
  Module Impl_lib_storage_private_Sealed_for_P.
  Section Impl_lib_storage_private_Sealed_for_P.
    Context {P : Set}.
    
    Definition Self := P.
    
    Global Instance I : lib.storage.private.Sealed.Trait Self :=
      lib.storage.private.Sealed.Build_Trait _.
  End Impl_lib_storage_private_Sealed_for_P.
  End Impl_lib_storage_private_Sealed_for_P.
  
  Module Impl_lib_storage_Packed_for_P.
  Section Impl_lib_storage_Packed_for_P.
    Context {P : Set}.
    
    Definition Self := P.
    
    Global Instance I : lib.storage.Packed.Trait Self :=
      lib.storage.Packed.Build_Trait _.
  End Impl_lib_storage_Packed_for_P.
  End Impl_lib_storage_Packed_for_P.
  
  Module Impl_lib_storage_StorageKey_for_P.
  Section Impl_lib_storage_StorageKey_for_P.
    Context {P : Set}.
    
    Definition Self := P.
    
    Definition KEY := Pure 0.
    
    Global Instance AssociatedFunction_KEY :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    Global Instance I : lib.storage.StorageKey.Trait Self := {
      lib.storage.StorageKey.KEY := KEY;
    }.
  End Impl_lib_storage_StorageKey_for_P.
  End Impl_lib_storage_StorageKey_for_P.
  
  Module Impl_lib_storage_StorableHint_for_P.
  Section Impl_lib_storage_StorableHint_for_P.
    Context {P Key : Set}.
    
    Definition Self := P.
    
    Definition Type : Set := P.
    
    Definition PreferredKey : Set := lib.impls.AutoKey.
    
    Global Instance I : lib.storage.StorableHint.Trait Self (Key := Key) := {
    }.
  End Impl_lib_storage_StorableHint_for_P.
  End Impl_lib_storage_StorableHint_for_P.
  
  Module tests.
    Module arrays.
      Definition Array : Set := list i32.
      
      Definition ArrayTuples : Set := list (i32 * i32).
    End arrays.
    
    Module prims.
      Definition OptionU8 : Set := core.option.Option u8.
      
      Definition ResultU8 : Set := core.result.Result u8 bool.
      
      Definition BoxU8 : Set := Box u8.
      
      Definition BoxOptionU8 : Set := Box (core.option.Option u8).
    End prims.
    
    Module tuples.
      Definition TupleSix : Set :=
        i32 * u32 * String * u8 * bool * (Box (core.option.Option i32)).
    End tuples.
    
    Definition storage_key_types_works (_ : unit) : M unit :=
      let* _ :=
        match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      let* _ :=
        match (addr_of lib.storage.StorageKey.KEY, addr_of 123) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      let* _ :=
        match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      let* _ :=
        match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      let* _ :=
        match (addr_of lib.storage.StorageKey.KEY, addr_of 123) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      let* _ :=
        match (addr_of lib.storage.StorageKey.KEY, addr_of 456) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      let* _ :=
        match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      Pure tt.
  End tests.
End impls.

Module KeyType.
  Class Trait (Self : Set) : Set := {
    IS_AUTO_KEY : bool;
  }.
  
  Global Instance Method_IS_AUTO_KEY `(Trait) : Notation.Dot "IS_AUTO_KEY" := {
    Notation.dot := IS_AUTO_KEY;
  }.
End KeyType.

Module AutoKey.
  Inductive t : Set := Build.
End AutoKey.
Definition AutoKey := AutoKey.t.

Module Impl_core_default_Default_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Definition default (_ : unit) : M lib.impls.AutoKey := Pure {|  |}.
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_lib_impls_AutoKey.

Module Impl_core_marker_Copy_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_lib_impls_AutoKey.

Module Impl_core_clone_Clone_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Definition clone (self : ref Self) : M lib.impls.AutoKey := self.["deref"].
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
End Impl_core_clone_Clone_for_lib_impls_AutoKey.

Module Impl_core_marker_StructuralPartialEq_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_lib_impls_AutoKey.

Module Impl_core_cmp_PartialEq_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Definition eq (self : ref Self) (other : ref lib.impls.AutoKey) : M bool :=
    Pure true.
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq := eq;
  }.
End Impl_core_cmp_PartialEq_for_lib_impls_AutoKey.

Module Impl_core_marker_StructuralEq_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_lib_impls_AutoKey.

Module Impl_core_cmp_Eq_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit := Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_lib_impls_AutoKey.

Module Impl_core_cmp_PartialOrd_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Definition partial_cmp
      (self : ref Self)
      (other : ref lib.impls.AutoKey)
      : M (core.option.Option core.cmp.Ordering) :=
    Pure (core.option.Option.Some core.cmp.Ordering.Equal).
  
  Global Instance Method_partial_cmp : Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_lib_impls_AutoKey.

Module Impl_lib_storage_StorageKey_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Definition KEY := Pure 0.
  
  Global Instance AssociatedFunction_KEY : Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : lib.storage.StorageKey.Trait Self := {
    lib.storage.StorageKey.KEY := KEY;
  }.
End Impl_lib_storage_StorageKey_for_lib_impls_AutoKey.

Module Impl_lib_impls_KeyType_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Definition IS_AUTO_KEY := Pure true.
  
  Global Instance AssociatedFunction_IS_AUTO_KEY :
    Notation.DoubleColon Self "IS_AUTO_KEY" := {
    Notation.double_colon := IS_AUTO_KEY;
  }.
  
  Global Instance I : lib.impls.KeyType.Trait Self := {
    lib.impls.KeyType.IS_AUTO_KEY := IS_AUTO_KEY;
  }.
End Impl_lib_impls_KeyType_for_lib_impls_AutoKey.

Module Impl_core_fmt_Debug_for_lib_impls_AutoKey.
  Definition Self := lib.impls.AutoKey.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M core.fmt.Result :=
    let* α0 := f.["debug_struct"] "AutoKey" in
    let* α1 := α0.["field"] "key" (addr_of lib.storage.StorageKey.KEY) in
    α1.["finish"].
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_lib_impls_AutoKey.

Module ManualKey.
  Record t : Set := { _ : core.marker.PhantomData (unit -> ParentKey);}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End ManualKey.
Definition ManualKey := ManualKey.t.

Module Impl_core_default_Default_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_default_Default_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Definition default (_ : unit) : M (lib.impls.ManualKey ParentKey) :=
    let* α0 := core.default.Default.default tt in
    Pure (lib.impls.ManualKey.Build_t α0).
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_lib_impls_ManualKey_ParentKey.
End Impl_core_default_Default_for_lib_impls_ManualKey_ParentKey.

Module Impl_core_marker_Copy_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_marker_Copy_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_lib_impls_ManualKey_ParentKey.
End Impl_core_marker_Copy_for_lib_impls_ManualKey_ParentKey.

Module Impl_core_clone_Clone_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_clone_Clone_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Definition clone (self : ref Self) : M (lib.impls.ManualKey ParentKey) :=
    let* α0 := core.clone.Clone.clone (addr_of (self.[0])) in
    Pure (lib.impls.ManualKey.Build_t α0).
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
End Impl_core_clone_Clone_for_lib_impls_ManualKey_ParentKey.
End Impl_core_clone_Clone_for_lib_impls_ManualKey_ParentKey.

Module Impl_core_marker_StructuralEq_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_marker_StructuralEq_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_lib_impls_ManualKey_ParentKey.
End Impl_core_marker_StructuralEq_for_lib_impls_ManualKey_ParentKey.

Module Impl_core_cmp_Eq_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_cmp_Eq_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    let _ := tt in
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_lib_impls_ManualKey_ParentKey.
End Impl_core_cmp_Eq_for_lib_impls_ManualKey_ParentKey.

Module Impl_core_marker_StructuralPartialEq_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_marker_StructuralPartialEq_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_lib_impls_ManualKey_ParentKey.
End Impl_core_marker_StructuralPartialEq_for_lib_impls_ManualKey_ParentKey.

Module Impl_core_cmp_PartialEq_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_cmp_PartialEq_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Definition eq
      (self : ref Self)
      (other : ref (lib.impls.ManualKey ParentKey))
      : M bool :=
    (self.[0]).["eq"] (other.[0]).
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq := eq;
  }.
End Impl_core_cmp_PartialEq_for_lib_impls_ManualKey_ParentKey.
End Impl_core_cmp_PartialEq_for_lib_impls_ManualKey_ParentKey.

Module Impl_core_cmp_PartialOrd_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_cmp_PartialOrd_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Definition partial_cmp
      (self : ref Self)
      (other : ref (lib.impls.ManualKey ParentKey))
      : M (core.option.Option core.cmp.Ordering) :=
    core.cmp.PartialOrd.partial_cmp (addr_of (self.[0])) (addr_of (other.[0])).
  
  Global Instance Method_partial_cmp : Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_lib_impls_ManualKey_ParentKey.
End Impl_core_cmp_PartialOrd_for_lib_impls_ManualKey_ParentKey.

Module Impl_lib_storage_StorageKey_for_lib_impls_ManualKey_ParentKey.
Section Impl_lib_storage_StorageKey_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Definition KEY := KeyComposer.concat lib.impls.KEY ParentKey::["KEY"].
  
  Global Instance AssociatedFunction_KEY : Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : lib.storage.StorageKey.Trait Self := {
    lib.storage.StorageKey.KEY := KEY;
  }.
End Impl_lib_storage_StorageKey_for_lib_impls_ManualKey_ParentKey.
End Impl_lib_storage_StorageKey_for_lib_impls_ManualKey_ParentKey.

Module Impl_lib_impls_KeyType_for_lib_impls_ManualKey_ParentKey.
Section Impl_lib_impls_KeyType_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Definition IS_AUTO_KEY := Pure false.
  
  Global Instance AssociatedFunction_IS_AUTO_KEY :
    Notation.DoubleColon Self "IS_AUTO_KEY" := {
    Notation.double_colon := IS_AUTO_KEY;
  }.
  
  Global Instance I : lib.impls.KeyType.Trait Self := {
    lib.impls.KeyType.IS_AUTO_KEY := IS_AUTO_KEY;
  }.
End Impl_lib_impls_KeyType_for_lib_impls_ManualKey_ParentKey.
End Impl_lib_impls_KeyType_for_lib_impls_ManualKey_ParentKey.

Module Impl_core_fmt_Debug_for_lib_impls_ManualKey_ParentKey.
Section Impl_core_fmt_Debug_for_lib_impls_ManualKey_ParentKey.
  Context {ParentKey : Set}.
  
  Definition Self := lib.impls.ManualKey ParentKey.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M core.fmt.Result :=
    let* α0 := f.["debug_struct"] "ManualKey" in
    let* α1 := α0.["field"] "key" (addr_of lib.storage.StorageKey.KEY) in
    α1.["finish"].
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_lib_impls_ManualKey_ParentKey.
End Impl_core_fmt_Debug_for_lib_impls_ManualKey_ParentKey.

Module ResolverKey.
  Record t : Set := { _ : core.marker.PhantomData (unit -> (L * R));}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End ResolverKey.
Definition ResolverKey := ResolverKey.t.

Module Impl_core_default_Default_for_lib_impls_ResolverKey_L_R.
Section Impl_core_default_Default_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Definition default (_ : unit) : M (lib.impls.ResolverKey L R) :=
    let* α0 := core.default.Default.default tt in
    Pure (lib.impls.ResolverKey.Build_t α0).
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_lib_impls_ResolverKey_L_R.
End Impl_core_default_Default_for_lib_impls_ResolverKey_L_R.

Module Impl_core_marker_Copy_for_lib_impls_ResolverKey_L_R.
Section Impl_core_marker_Copy_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_lib_impls_ResolverKey_L_R.
End Impl_core_marker_Copy_for_lib_impls_ResolverKey_L_R.

Module Impl_core_clone_Clone_for_lib_impls_ResolverKey_L_R.
Section Impl_core_clone_Clone_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Definition clone (self : ref Self) : M (lib.impls.ResolverKey L R) :=
    let* α0 := core.clone.Clone.clone (addr_of (self.[0])) in
    Pure (lib.impls.ResolverKey.Build_t α0).
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
End Impl_core_clone_Clone_for_lib_impls_ResolverKey_L_R.
End Impl_core_clone_Clone_for_lib_impls_ResolverKey_L_R.

Module Impl_core_marker_StructuralPartialEq_for_lib_impls_ResolverKey_L_R.
Section Impl_core_marker_StructuralPartialEq_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_lib_impls_ResolverKey_L_R.
End Impl_core_marker_StructuralPartialEq_for_lib_impls_ResolverKey_L_R.

Module Impl_core_cmp_PartialEq_for_lib_impls_ResolverKey_L_R.
Section Impl_core_cmp_PartialEq_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Definition eq
      (self : ref Self)
      (other : ref (lib.impls.ResolverKey L R))
      : M bool :=
    (self.[0]).["eq"] (other.[0]).
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq := eq;
  }.
End Impl_core_cmp_PartialEq_for_lib_impls_ResolverKey_L_R.
End Impl_core_cmp_PartialEq_for_lib_impls_ResolverKey_L_R.

Module Impl_core_marker_StructuralEq_for_lib_impls_ResolverKey_L_R.
Section Impl_core_marker_StructuralEq_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_lib_impls_ResolverKey_L_R.
End Impl_core_marker_StructuralEq_for_lib_impls_ResolverKey_L_R.

Module Impl_core_cmp_Eq_for_lib_impls_ResolverKey_L_R.
Section Impl_core_cmp_Eq_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    let _ := tt in
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_lib_impls_ResolverKey_L_R.
End Impl_core_cmp_Eq_for_lib_impls_ResolverKey_L_R.

Module Impl_core_cmp_PartialOrd_for_lib_impls_ResolverKey_L_R.
Section Impl_core_cmp_PartialOrd_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Definition partial_cmp
      (self : ref Self)
      (other : ref (lib.impls.ResolverKey L R))
      : M (core.option.Option core.cmp.Ordering) :=
    core.cmp.PartialOrd.partial_cmp (addr_of (self.[0])) (addr_of (other.[0])).
  
  Global Instance Method_partial_cmp : Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_lib_impls_ResolverKey_L_R.
End Impl_core_cmp_PartialOrd_for_lib_impls_ResolverKey_L_R.

Module Impl_core_fmt_Debug_for_lib_impls_ResolverKey_L_R.
Section Impl_core_fmt_Debug_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M core.fmt.Result :=
    core.fmt.Formatter::["debug_tuple_field1_finish"]
      f
      "ResolverKey"
      (addr_of (addr_of (self.[0]))).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_lib_impls_ResolverKey_L_R.
End Impl_core_fmt_Debug_for_lib_impls_ResolverKey_L_R.

Module Impl_lib_storage_StorageKey_for_lib_impls_ResolverKey_L_R.
Section Impl_lib_storage_StorageKey_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Definition
    KEY := if (L::["IS_AUTO_KEY"] : bool) then
      Pure R::["KEY"]
    else
      Pure L::["KEY"].
  
  Global Instance AssociatedFunction_KEY : Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : lib.storage.StorageKey.Trait Self := {
    lib.storage.StorageKey.KEY := KEY;
  }.
End Impl_lib_storage_StorageKey_for_lib_impls_ResolverKey_L_R.
End Impl_lib_storage_StorageKey_for_lib_impls_ResolverKey_L_R.

Module Impl_lib_impls_KeyType_for_lib_impls_ResolverKey_L_R.
Section Impl_lib_impls_KeyType_for_lib_impls_ResolverKey_L_R.
  Context {L R : Set}.
  
  Definition Self := lib.impls.ResolverKey L R.
  
  Definition IS_AUTO_KEY := Pure L::["IS_AUTO_KEY"].
  
  Global Instance AssociatedFunction_IS_AUTO_KEY :
    Notation.DoubleColon Self "IS_AUTO_KEY" := {
    Notation.double_colon := IS_AUTO_KEY;
  }.
  
  Global Instance I : lib.impls.KeyType.Trait Self := {
    lib.impls.KeyType.IS_AUTO_KEY := IS_AUTO_KEY;
  }.
End Impl_lib_impls_KeyType_for_lib_impls_ResolverKey_L_R.
End Impl_lib_impls_KeyType_for_lib_impls_ResolverKey_L_R.

Definition FinalKey : Set :=
  lib.impls.ResolverKey
    lib.storage.StorableHint.PreferredKey
    (lib.impls.ManualKey ParentKey).

Module Impl_lib_storage_AutoStorableHint_for_T.
Section Impl_lib_storage_AutoStorableHint_for_T.
  Context {T ParentKey : Set}.
  
  Definition Self := T.
  
  Definition Type : Set := lib.storage.StorableHint.Type.
  
  Global Instance I :
      lib.storage.AutoStorableHint.Trait
        Self
        (Key := lib.impls.ManualKey ParentKey) := {
  }.
End Impl_lib_storage_AutoStorableHint_for_T.
End Impl_lib_storage_AutoStorableHint_for_T.

Module Impl_lib_storage_private_Sealed_for_P.
Section Impl_lib_storage_private_Sealed_for_P.
  Context {P : Set}.
  
  Definition Self := P.
  
  Global Instance I : lib.storage.private.Sealed.Trait Self :=
    lib.storage.private.Sealed.Build_Trait _.
End Impl_lib_storage_private_Sealed_for_P.
End Impl_lib_storage_private_Sealed_for_P.

Module Impl_lib_storage_Packed_for_P.
Section Impl_lib_storage_Packed_for_P.
  Context {P : Set}.
  
  Definition Self := P.
  
  Global Instance I : lib.storage.Packed.Trait Self :=
    lib.storage.Packed.Build_Trait _.
End Impl_lib_storage_Packed_for_P.
End Impl_lib_storage_Packed_for_P.

Module Impl_lib_storage_StorageKey_for_P.
Section Impl_lib_storage_StorageKey_for_P.
  Context {P : Set}.
  
  Definition Self := P.
  
  Definition KEY := Pure 0.
  
  Global Instance AssociatedFunction_KEY : Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : lib.storage.StorageKey.Trait Self := {
    lib.storage.StorageKey.KEY := KEY;
  }.
End Impl_lib_storage_StorageKey_for_P.
End Impl_lib_storage_StorageKey_for_P.

Module Impl_lib_storage_StorableHint_for_P.
Section Impl_lib_storage_StorableHint_for_P.
  Context {P Key : Set}.
  
  Definition Self := P.
  
  Definition Type : Set := P.
  
  Definition PreferredKey : Set := lib.impls.AutoKey.
  
  Global Instance I : lib.storage.StorableHint.Trait Self (Key := Key) := {
  }.
End Impl_lib_storage_StorableHint_for_P.
End Impl_lib_storage_StorableHint_for_P.

Module tests.
  Module arrays.
    Definition Array : Set := list i32.
    
    Definition ArrayTuples : Set := list (i32 * i32).
  End arrays.
  
  Module prims.
    Definition OptionU8 : Set := core.option.Option u8.
    
    Definition ResultU8 : Set := core.result.Result u8 bool.
    
    Definition BoxU8 : Set := Box u8.
    
    Definition BoxOptionU8 : Set := Box (core.option.Option u8).
  End prims.
  
  Module tuples.
    Definition TupleSix : Set :=
      i32 * u32 * String * u8 * bool * (Box (core.option.Option i32)).
  End tuples.
  
  Definition storage_key_types_works (_ : unit) : M unit :=
    let* _ :=
      match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    let* _ :=
      match (addr_of lib.storage.StorageKey.KEY, addr_of 123) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    let* _ :=
      match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    let* _ :=
      match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    let* _ :=
      match (addr_of lib.storage.StorageKey.KEY, addr_of 123) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    let* _ :=
      match (addr_of lib.storage.StorageKey.KEY, addr_of 456) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    let* _ :=
      match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    Pure tt.
End tests.

Module arrays.
  Definition Array : Set := list i32.
  
  Definition ArrayTuples : Set := list (i32 * i32).
End arrays.

Definition Array : Set := list i32.

Definition ArrayTuples : Set := list (i32 * i32).

Module prims.
  Definition OptionU8 : Set := core.option.Option u8.
  
  Definition ResultU8 : Set := core.result.Result u8 bool.
  
  Definition BoxU8 : Set := Box u8.
  
  Definition BoxOptionU8 : Set := Box (core.option.Option u8).
End prims.

Definition OptionU8 : Set := core.option.Option u8.

Definition ResultU8 : Set := core.result.Result u8 bool.

Definition BoxU8 : Set := Box u8.

Definition BoxOptionU8 : Set := Box (core.option.Option u8).

Module tuples.
  Definition TupleSix : Set :=
    i32 * u32 * String * u8 * bool * (Box (core.option.Option i32)).
End tuples.

Definition TupleSix : Set :=
  i32 * u32 * String * u8 * bool * (Box (core.option.Option i32)).

Definition storage_key_types_works (_ : unit) : M unit :=
  let* _ :=
    match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* _ :=
    match (addr_of lib.storage.StorageKey.KEY, addr_of 123) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* _ :=
    match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* _ :=
    match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* _ :=
    match (addr_of lib.storage.StorageKey.KEY, addr_of 123) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* _ :=
    match (addr_of lib.storage.StorageKey.KEY, addr_of 456) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* _ :=
    match (addr_of lib.storage.StorageKey.KEY, addr_of 0) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  Pure tt.

Module storage.
  Module Storable.
    Class Trait (Self : Set) : Set := {
      encode : (ref Self) -> (mut_ref T) -> (M unit);
      decode : (mut_ref I) -> (M (core.result.Result Self scale.Error));
    }.
    
    Global Instance Method_encode `(Trait) : Notation.Dot "encode" := {
      Notation.dot := encode;
    }.
    Global Instance Method_decode `(Trait) : Notation.Dot "decode" := {
      Notation.dot := decode;
    }.
  End Storable.
  
  Module Impl_lib_storage_Storable_for_P.
  Section Impl_lib_storage_Storable_for_P.
    Context {P : Set}.
    
    Definition Self := P.
    
    Definition encode (self : ref Self) (dest : mut_ref T) : M unit :=
      scale.Encode.encode_to self dest.
    
    Global Instance Method_encode : Notation.Dot "encode" := {
      Notation.dot := encode;
    }.
    
    Definition decode
        (input : mut_ref I)
        : M (core.result.Result Self scale.Error) :=
      scale.Decode.decode input.
    
    Global Instance AssociatedFunction_decode :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode;
    }.
    
    Global Instance I : lib.storage.Storable.Trait Self := {
      lib.storage.Storable.encode := encode;
      lib.storage.Storable.decode := decode;
    }.
  End Impl_lib_storage_Storable_for_P.
  End Impl_lib_storage_Storable_for_P.
  
  Module private.
    Module Sealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Set := {
      }.
      Global Set Primitive Projections.
    End Sealed.
  End private.
  
  Module Packed.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End Packed.
  
  Module StorageKey.
    Class Trait (Self : Set) : Set := {
      KEY : Key;
    }.
    
    Global Instance Method_KEY `(Trait) : Notation.Dot "KEY" := {
      Notation.dot := KEY;
    }.
    Global Instance Method_key `(Trait) : Notation.Dot "key" := {
      Notation.dot (self : ref Self) := (Pure Self::["KEY"] : M Key);
    }.
  End StorageKey.
  
  Module StorableHint.
    Class Trait
        (Self : Set) {Key : Set}
        {Type : Set}
        `{lib.storage.Storable.Trait Type}
        {PreferredKey : Set}
        `{lib.storage.StorageKey.Trait PreferredKey} :
        Set := {
      Type := Type;
      PreferredKey := PreferredKey;
    }.
    
    Global Instance Method_Type `(Trait)
      : Notation.DoubleColonType Self "Type" := {
      Notation.double_colon_type := Type;
    }.
    Global Instance Method_PreferredKey `(Trait)
      : Notation.DoubleColonType Self "PreferredKey" := {
      Notation.double_colon_type := PreferredKey;
    }.
  End StorableHint.
  
  Module AutoStorableHint.
    Class Trait
        (Self : Set) {Key : Set}
        {Type : Set}
        `{lib.storage.Storable.Trait Type} :
        Set := {
      Type := Type;
    }.
    
    Global Instance Method_Type `(Trait)
      : Notation.DoubleColonType Self "Type" := {
      Notation.double_colon_type := Type;
    }.
  End AutoStorableHint.
End storage.

Module Storable.
  Class Trait (Self : Set) : Set := {
    encode : (ref Self) -> (mut_ref T) -> (M unit);
    decode : (mut_ref I) -> (M (core.result.Result Self scale.Error));
  }.
  
  Global Instance Method_encode `(Trait) : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  Global Instance Method_decode `(Trait) : Notation.Dot "decode" := {
    Notation.dot := decode;
  }.
End Storable.

Module Impl_lib_storage_Storable_for_P.
Section Impl_lib_storage_Storable_for_P.
  Context {P : Set}.
  
  Definition Self := P.
  
  Definition encode (self : ref Self) (dest : mut_ref T) : M unit :=
    scale.Encode.encode_to self dest.
  
  Global Instance Method_encode : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Definition decode
      (input : mut_ref I)
      : M (core.result.Result Self scale.Error) :=
    scale.Decode.decode input.
  
  Global Instance AssociatedFunction_decode :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : lib.storage.Storable.Trait Self := {
    lib.storage.Storable.encode := encode;
    lib.storage.Storable.decode := decode;
  }.
End Impl_lib_storage_Storable_for_P.
End Impl_lib_storage_Storable_for_P.

Module private.
  Module Sealed.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End Sealed.
End private.

Module Sealed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End Sealed.

Module Packed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End Packed.

Module StorageKey.
  Class Trait (Self : Set) : Set := {
    KEY : Key;
  }.
  
  Global Instance Method_KEY `(Trait) : Notation.Dot "KEY" := {
    Notation.dot := KEY;
  }.
  Global Instance Method_key `(Trait) : Notation.Dot "key" := {
    Notation.dot (self : ref Self) := (Pure Self::["KEY"] : M Key);
  }.
End StorageKey.

Module StorableHint.
  Class Trait
      (Self : Set) {Key : Set}
      {Type : Set}
      `{lib.storage.Storable.Trait Type}
      {PreferredKey : Set}
      `{lib.storage.StorageKey.Trait PreferredKey} :
      Set := {
    Type := Type;
    PreferredKey := PreferredKey;
  }.
  
  Global Instance Method_Type `(Trait)
    : Notation.DoubleColonType Self "Type" := {
    Notation.double_colon_type := Type;
  }.
  Global Instance Method_PreferredKey `(Trait)
    : Notation.DoubleColonType Self "PreferredKey" := {
    Notation.double_colon_type := PreferredKey;
  }.
End StorableHint.

Module AutoStorableHint.
  Class Trait
      (Self : Set) {Key : Set}
      {Type : Set}
      `{lib.storage.Storable.Trait Type} :
      Set := {
    Type := Type;
  }.
  
  Global Instance Method_Type `(Trait)
    : Notation.DoubleColonType Self "Type" := {
    Notation.double_colon_type := Type;
  }.
End AutoStorableHint.
