(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
Section Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "scoping_rules_borrowing_mutablity::Book") [].
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Parameter clone :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "scoping_rules_borrowing_mutablity::Book") []])
        ->
        Ty.apply (Ty.path "scoping_rules_borrowing_mutablity::Book") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.

Module  Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
Section Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "scoping_rules_borrowing_mutablity::Book") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.

Parameter borrow_book :
    (Ty.apply
        (Ty.path "ref")
        [Ty.apply (Ty.path "scoping_rules_borrowing_mutablity::Book") []])
      ->
      Ty.path "unit".

Parameter new_edition :
    (Ty.apply
        (Ty.path "mut_ref")
        [Ty.apply (Ty.path "scoping_rules_borrowing_mutablity::Book") []])
      ->
      Ty.path "unit".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
