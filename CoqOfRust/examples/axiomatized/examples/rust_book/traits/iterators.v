(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
Section Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
  Definition Self : Ty.t := Ty.apply (Ty.path "iterators::Fibonacci") [].
  
  Definition Item : Set := Ty.path "u32".
  
  Parameter next :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "iterators::Fibonacci") []])
        ->
        Ty.apply (Ty.path "core::option::Option") [_].
  
  Definition AssociatedFunction_next : Instance.t := {
    Notations.double_colon := next;
  }.
  
  Definition ‚Ñê : Instance.t := [("Item", Item);
    ("next", next);
    ("next_chunk", next_chunk);
    ("size_hint", size_hint);
    ("count", count);
    ("last", last);
    ("advance_by", advance_by);
    ("nth", nth);
    ("step_by", step_by);
    ("chain", chain);
    ("zip", zip);
    ("intersperse", intersperse);
    ("intersperse_with", intersperse_with);
    ("map", map);
    ("for_each", for_each);
    ("filter", filter);
    ("filter_map", filter_map);
    ("enumerate", enumerate);
    ("peekable", peekable);
    ("skip_while", skip_while);
    ("take_while", take_while);
    ("map_while", map_while);
    ("skip", skip);
    ("take", take);
    ("scan", scan);
    ("flat_map", flat_map);
    ("flatten", flatten);
    ("map_windows", map_windows);
    ("fuse", fuse);
    ("inspect", inspect);
    ("by_ref", by_ref);
    ("collect", collect);
    ("try_collect", try_collect);
    ("collect_into", collect_into);
    ("partition", partition);
    ("partition_in_place", partition_in_place);
    ("is_partitioned", is_partitioned);
    ("try_fold", try_fold);
    ("try_for_each", try_for_each);
    ("fold", fold);
    ("reduce", reduce);
    ("try_reduce", try_reduce);
    ("all", all);
    ("any", any);
    ("find", find);
    ("find_map", find_map);
    ("try_find", try_find);
    ("position", position);
    ("rposition", rposition);
    ("max", max);
    ("min", min);
    ("max_by_key", max_by_key);
    ("max_by", max_by);
    ("min_by_key", min_by_key);
    ("min_by", min_by);
    ("rev", rev);
    ("unzip", unzip);
    ("copied", copied);
    ("cloned", cloned);
    ("cycle", cycle);
    ("array_chunks", array_chunks);
    ("sum", sum);
    ("product", product);
    ("cmp", cmp);
    ("cmp_by", cmp_by);
    ("partial_cmp", partial_cmp);
    ("partial_cmp_by", partial_cmp_by);
    ("eq", eq);
    ("eq_by", eq_by);
    ("ne", ne);
    ("lt", lt);
    ("le", le);
    ("gt", gt);
    ("ge", ge);
    ("is_sorted", is_sorted);
    ("is_sorted_by", is_sorted_by);
    ("is_sorted_by_key", is_sorted_by_key);
    ("__iterator_get_unchecked", __iterator_get_unchecked)].
End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.

Parameter fibonacci : Ty.apply (Ty.path "iterators::Fibonacci") [].

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
