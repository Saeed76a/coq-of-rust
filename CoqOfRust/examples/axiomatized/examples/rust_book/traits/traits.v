(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Sheep.
Section Sheep.
  Record t : Set := {
    naked : bool.t;
    name : ref str.t;
  }.
  
  Definition Get_naked :=
    Ref.map (fun α => Some α.(naked)) (fun β α => Some (α <| naked := β |>)).
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
End Sheep.
End Sheep.

Module  Animal.
Section Animal.
  Class Trait (Self : Set) : Type := {
    new : (ref str.t) -> M Self;
    name : (ref Self) -> M (ref str.t);
    noise : (ref Self) -> M (ref str.t);
  }.
  
End Animal.
End Animal.

Module  Impl_traits_Sheep_t.
Section Impl_traits_Sheep_t.
  Definition Self : Set := traits.Sheep.t.
  
  Parameter is_naked : (ref Self) -> M bool.t.
  
  Global Instance AssociatedFunction_is_naked :
    Notations.DoubleColon Self "is_naked" := {
    Notations.double_colon := is_naked;
  }.
End Impl_traits_Sheep_t.
End Impl_traits_Sheep_t.

Module  Impl_traits_Animal_for_traits_Sheep_t.
Section Impl_traits_Animal_for_traits_Sheep_t.
  Definition Self : Set := traits.Sheep.t.
  
  Parameter new : (ref str.t) -> M traits.Sheep.t.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  Parameter name : (ref Self) -> M (ref str.t).
  
  Global Instance AssociatedFunction_name :
    Notations.DoubleColon Self "name" := {
    Notations.double_colon := name;
  }.
  
  Parameter noise : (ref Self) -> M (ref str.t).
  
  Global Instance AssociatedFunction_noise :
    Notations.DoubleColon Self "noise" := {
    Notations.double_colon := noise;
  }.
  
  Parameter talk : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_talk :
    Notations.DoubleColon Self "talk" := {
    Notations.double_colon := talk;
  }.
  
  Global Instance ℐ : traits.Animal.Required.Trait Self := {
    traits.Animal.new := new;
    traits.Animal.name := name;
    traits.Animal.noise := noise;
    traits.Animal.talk := Datatypes.Some talk;
  }.
End Impl_traits_Animal_for_traits_Sheep_t.
End Impl_traits_Animal_for_traits_Sheep_t.

Module  Impl_traits_Sheep_t_2.
Section Impl_traits_Sheep_t_2.
  Definition Self : Set := traits.Sheep.t.
  
  Parameter shear : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_shear :
    Notations.DoubleColon Self "shear" := {
    Notations.double_colon := shear;
  }.
End Impl_traits_Sheep_t_2.
End Impl_traits_Sheep_t_2.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
