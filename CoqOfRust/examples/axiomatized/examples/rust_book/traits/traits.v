(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Animal.
Section Animal.
  Class Trait (Self : Set) : Type := {
    new : Ty.function [Ty.apply (Ty.path "ref") [Ty.path "str"]] Self;
    name :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]]
        (Ty.apply (Ty.path "ref") [Ty.path "str"]);
    noise :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]]
        (Ty.apply (Ty.path "ref") [Ty.path "str"]);
  }.
  
End Animal.
End Animal.

Module  Impl_traits_Sheep.
Section Impl_traits_Sheep.
  Definition Self : Set := Ty.apply (Ty.path "traits::Sheep") [].
  
  Parameter is_naked :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_is_naked : Instance.t := {
    Notations.double_colon := is_naked;
  }.
End Impl_traits_Sheep.
End Impl_traits_Sheep.

Module  Impl_traits_Animal_for_traits_Sheep.
Section Impl_traits_Animal_for_traits_Sheep.
  Definition Self : Ty.t := Ty.apply (Ty.path "traits::Sheep") [].
  
  Parameter new :
      (Ty.apply (Ty.path "ref") [Ty.path "str"]) ->
        Ty.apply (Ty.path "traits::Sheep") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter name :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []]) ->
        Ty.apply (Ty.path "ref") [Ty.path "str"].
  
  Definition AssociatedFunction_name : Instance.t := {
    Notations.double_colon := name;
  }.
  
  Parameter noise :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []]) ->
        Ty.apply (Ty.path "ref") [Ty.path "str"].
  
  Definition AssociatedFunction_noise : Instance.t := {
    Notations.double_colon := noise;
  }.
  
  Parameter talk :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []]) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_talk : Instance.t := {
    Notations.double_colon := talk;
  }.
  
  Definition ℐ : Instance.t := [("new", new);
    ("name", name);
    ("noise", noise);
    ("talk", talk)].
End Impl_traits_Animal_for_traits_Sheep.
End Impl_traits_Animal_for_traits_Sheep.

Module  Impl_traits_Sheep_2.
Section Impl_traits_Sheep_2.
  Definition Self : Set := Ty.apply (Ty.path "traits::Sheep") [].
  
  Parameter shear :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "traits::Sheep") []]) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_shear : Instance.t := {
    Notations.double_colon := shear;
  }.
End Impl_traits_Sheep_2.
End Impl_traits_Sheep_2.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
