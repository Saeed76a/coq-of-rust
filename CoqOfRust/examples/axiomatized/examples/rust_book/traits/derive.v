(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.
Section Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.
  Definition Self : Ty.t := Ty.apply (Ty.path "derive::Centimeters") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.

Module  Impl_core_cmp_PartialEq_for_derive_Centimeters.
Section Impl_core_cmp_PartialEq_for_derive_Centimeters.
  Definition Self : Ty.t := Ty.apply (Ty.path "derive::Centimeters") [].
  
  Parameter eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "derive::Centimeters") []])
        ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "derive::Centimeters") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_derive_Centimeters.
End Impl_core_cmp_PartialEq_for_derive_Centimeters.

Module  Impl_core_cmp_PartialOrd_for_derive_Centimeters.
Section Impl_core_cmp_PartialOrd_for_derive_Centimeters.
  Definition Self : Ty.t := Ty.apply (Ty.path "derive::Centimeters") [].
  
  Parameter partial_cmp :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "derive::Centimeters") []])
        ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "derive::Centimeters") []])
        ->
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "core::cmp::Ordering") []].
  
  Definition AssociatedFunction_partial_cmp : Instance.t := {
    Notations.double_colon := partial_cmp;
  }.
  
  Definition ℐ : Instance.t := [("partial_cmp", partial_cmp);
    ("lt", lt);
    ("le", le);
    ("gt", gt);
    ("ge", ge)].
End Impl_core_cmp_PartialOrd_for_derive_Centimeters.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters.



Module  Impl_core_fmt_Debug_for_derive_Inches.
Section Impl_core_fmt_Debug_for_derive_Inches.
  Definition Self : Ty.t := Ty.apply (Ty.path "derive::Inches") [].
  
  Parameter fmt :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "derive::Inches") []]) ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_derive_Inches.
End Impl_core_fmt_Debug_for_derive_Inches.

Module  Impl_derive_Inches.
Section Impl_derive_Inches.
  Definition Self : Set := Ty.apply (Ty.path "derive::Inches") [].
  
  Parameter to_centimeters :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "derive::Inches") []]) ->
        Ty.apply (Ty.path "derive::Centimeters") [].
  
  Definition AssociatedFunction_to_centimeters : Instance.t := {
    Notations.double_colon := to_centimeters;
  }.
End Impl_derive_Inches.
End Impl_derive_Inches.



(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
