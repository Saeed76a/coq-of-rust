(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module WebEvent.
  Module Click.
    Record t : Set := {
      x : i64.t;
      y : i64.t;
    }.
  End Click.
  
  Inductive t : Set :=
  | PageLoad
  | PageUnload
  | KeyPress (_ : char.t)
  | Paste (_ : alloc.string.String.t)
  | Click (_ : Click.t).
  
  Definition Get_KeyPress_0 :=
    Ref.map
      (fun α => match α with | KeyPress α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | KeyPress _ => Some (KeyPress β) | _ => None end).
  
  Definition Get_Paste_0 :=
    Ref.map
      (fun α => match α with | Paste α0 => Some α0 | _ => None end)
      (fun β α => match α with | Paste _ => Some (Paste β) | _ => None end).
  
  Definition Get_Click_x :=
    Ref.map
      (fun α => match α with | Click α => Some α.(Click.x) | _ => None end)
      (fun β α =>
        match α with
        | Click α => Some (Click (α <| Click.x := β |>))
        | _ => None
        end).
  
  Definition Get_Click_y :=
    Ref.map
      (fun α => match α with | Click α => Some α.(Click.y) | _ => None end)
      (fun β α =>
        match α with
        | Click α => Some (Click (α <| Click.y := β |>))
        | _ => None
        end).
End WebEvent.

(*
fn inspect(event: WebEvent) {
    match event {
        WebEvent::PageLoad => println!("page loaded, réfé"),
        WebEvent::PageUnload => println!("page unloaded"),
        // Destructure `c` from inside the `enum`.
        WebEvent::KeyPress(c) => println!("pressed '{}'.", c),
        WebEvent::Paste(s) => println!("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        WebEvent::Click { x, y } => {
            println!("clicked at x={}, y={}.", x, y);
        }
    }
}
*)
Parameter inspect : enums.WebEvent.t -> M unit.

(*
fn main() {
    let pressed = WebEvent::KeyPress('x');
    // `to_owned()` creates an owned `String` from a string slice.
    let pasted = WebEvent::Paste("my text".to_owned());
    let click = WebEvent::Click { x: 20, y: 80 };
    let load = WebEvent::PageLoad;
    let unload = WebEvent::PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
