(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn create_fn() -> impl Fn() {
    let text = "Fn".to_owned();

    move || println!("This is a: {}", text)
}
*)
Parameter create_fn_ret_ty :
    Sigma (Ty : Set) `(core.ops.function.Fn.Trait Ty),
    unit.
Parameter create_fn : M _ (* OpaqueTy *).

Error OpaqueTy.

(*
fn create_fnmut() -> impl FnMut() {
    let text = "FnMut".to_owned();

    move || println!("This is a: {}", text)
}
*)
Parameter create_fnmut_ret_ty :
    Sigma (Ty : Set) `(core.ops.function.FnMut.Trait Ty),
    unit.
Parameter create_fnmut : M _ (* OpaqueTy *).

Error OpaqueTy.

(*
fn create_fnonce() -> impl FnOnce() {
    let text = "FnOnce".to_owned();

    move || println!("This is a: {}", text)
}
*)
Parameter create_fnonce_ret_ty :
    Sigma (Ty : Set) `(core.ops.function.FnOnce.Trait Ty),
    unit.
Parameter create_fnonce : M _ (* OpaqueTy *).

Error OpaqueTy.

(*
fn main() {
    let fn_plain = create_fn();
    let mut fn_mut = create_fnmut();
    let fn_once = create_fnonce();

    fn_plain();
    fn_mut();
    fn_once();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
