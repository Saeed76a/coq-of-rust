(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Point.
Section Point.
  Record t : Set := {
    x : f64.t;
    y : f64.t;
  }.
  
  Definition Get_x :=
    Ref.map (fun α => Some α.(x)) (fun β α => Some (α <| x := β |>)).
  Definition Get_y :=
    Ref.map (fun α => Some α.(y)) (fun β α => Some (α <| y := β |>)).
End Point.
End Point.

Module  Impl_associated_functions_and_methods_Point_t.
Section Impl_associated_functions_and_methods_Point_t.
  Definition Self : Set := associated_functions_and_methods.Point.t.
  
  Parameter origin : M associated_functions_and_methods.Point.t.
  
  Global Instance AssociatedFunction_origin :
    Notations.DoubleColon Self "origin" := {
    Notations.double_colon := origin;
  }.
  
  Parameter new : f64.t -> f64.t -> M associated_functions_and_methods.Point.t.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
End Impl_associated_functions_and_methods_Point_t.
End Impl_associated_functions_and_methods_Point_t.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    p1 : associated_functions_and_methods.Point.t;
    p2 : associated_functions_and_methods.Point.t;
  }.
  
  Definition Get_p1 :=
    Ref.map (fun α => Some α.(p1)) (fun β α => Some (α <| p1 := β |>)).
  Definition Get_p2 :=
    Ref.map (fun α => Some α.(p2)) (fun β α => Some (α <| p2 := β |>)).
End Rectangle.
End Rectangle.

Module  Impl_associated_functions_and_methods_Rectangle_t.
Section Impl_associated_functions_and_methods_Rectangle_t.
  Definition Self : Set := associated_functions_and_methods.Rectangle.t.
  
  Parameter get_p1 : (ref Self) -> M associated_functions_and_methods.Point.t.
  
  Global Instance AssociatedFunction_get_p1 :
    Notations.DoubleColon Self "get_p1" := {
    Notations.double_colon := get_p1;
  }.
  
  Parameter area : (ref Self) -> M f64.t.
  
  Global Instance AssociatedFunction_area :
    Notations.DoubleColon Self "area" := {
    Notations.double_colon := area;
  }.
  
  Parameter perimeter : (ref Self) -> M f64.t.
  
  Global Instance AssociatedFunction_perimeter :
    Notations.DoubleColon Self "perimeter" := {
    Notations.double_colon := perimeter;
  }.
  
  Parameter translate : (mut_ref Self) -> f64.t -> f64.t -> M unit.
  
  Global Instance AssociatedFunction_translate :
    Notations.DoubleColon Self "translate" := {
    Notations.double_colon := translate;
  }.
End Impl_associated_functions_and_methods_Rectangle_t.
End Impl_associated_functions_and_methods_Rectangle_t.

Module  Pair.
Section Pair.
  Record t : Set := {
    x0 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
    x1 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
End Pair.
End Pair.

Module  Impl_associated_functions_and_methods_Pair_t.
Section Impl_associated_functions_and_methods_Pair_t.
  Definition Self : Set := associated_functions_and_methods.Pair.t.
  
  Parameter destroy : Self -> M unit.
  
  Global Instance AssociatedFunction_destroy :
    Notations.DoubleColon Self "destroy" := {
    Notations.double_colon := destroy;
  }.
End Impl_associated_functions_and_methods_Pair_t.
End Impl_associated_functions_and_methods_Pair_t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
