(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_associated_functions_and_methods_Point.
Section Impl_associated_functions_and_methods_Point.
  Definition Self : Set :=
    Ty.apply (Ty.path "associated_functions_and_methods::Point") [].
  
  Parameter origin :
      Ty.apply (Ty.path "associated_functions_and_methods::Point") [].
  
  Definition AssociatedFunction_origin : Instance.t := {
    Notations.double_colon := origin;
  }.
  
  Parameter new :
      (Ty.path "f64") ->
        (Ty.path "f64") ->
        Ty.apply (Ty.path "associated_functions_and_methods::Point") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
End Impl_associated_functions_and_methods_Point.
End Impl_associated_functions_and_methods_Point.



Module  Impl_associated_functions_and_methods_Rectangle.
Section Impl_associated_functions_and_methods_Rectangle.
  Definition Self : Set :=
    Ty.apply (Ty.path "associated_functions_and_methods::Rectangle") [].
  
  Parameter get_p1 :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "associated_functions_and_methods::Rectangle") []])
        ->
        Ty.apply (Ty.path "associated_functions_and_methods::Point") [].
  
  Definition AssociatedFunction_get_p1 : Instance.t := {
    Notations.double_colon := get_p1;
  }.
  
  Parameter area :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "associated_functions_and_methods::Rectangle") []])
        ->
        Ty.path "f64".
  
  Definition AssociatedFunction_area : Instance.t := {
    Notations.double_colon := area;
  }.
  
  Parameter perimeter :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "associated_functions_and_methods::Rectangle") []])
        ->
        Ty.path "f64".
  
  Definition AssociatedFunction_perimeter : Instance.t := {
    Notations.double_colon := perimeter;
  }.
  
  Parameter translate :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "associated_functions_and_methods::Rectangle") []])
        ->
        (Ty.path "f64") ->
        (Ty.path "f64") ->
        Ty.path "unit".
  
  Definition AssociatedFunction_translate : Instance.t := {
    Notations.double_colon := translate;
  }.
End Impl_associated_functions_and_methods_Rectangle.
End Impl_associated_functions_and_methods_Rectangle.



Module  Impl_associated_functions_and_methods_Pair.
Section Impl_associated_functions_and_methods_Pair.
  Definition Self : Set :=
    Ty.apply (Ty.path "associated_functions_and_methods::Pair") [].
  
  Parameter destroy :
      (Ty.apply (Ty.path "associated_functions_and_methods::Pair") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_destroy : Instance.t := {
    Notations.double_colon := destroy;
  }.
End Impl_associated_functions_and_methods_Pair.
End Impl_associated_functions_and_methods_Pair.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
