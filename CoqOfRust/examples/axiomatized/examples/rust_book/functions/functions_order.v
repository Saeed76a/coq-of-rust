(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.





Module  Impl_functions_order_SomeType.
Section Impl_functions_order_SomeType.
  Definition Self : Set := Ty.apply (Ty.path "functions_order::SomeType") [].
  
  Parameter meth2 :
      (Ty.apply (Ty.path "functions_order::SomeType") []) -> Ty.path "unit".
  
  Definition AssociatedFunction_meth2 : Instance.t := {
    Notations.double_colon := meth2;
  }.
  
  Parameter meth1 :
      (Ty.apply (Ty.path "functions_order::SomeType") []) -> Ty.path "unit".
  
  Definition AssociatedFunction_meth1 : Instance.t := {
    Notations.double_colon := meth1;
  }.
End Impl_functions_order_SomeType.
End Impl_functions_order_SomeType.

Module  SomeTrait.
Section SomeTrait.
  Class Trait (Self : Set) : Type := {
    some_trait_foo :
      Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "unit");
    some_trait_bar :
      Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "unit");
  }.
  
End SomeTrait.
End SomeTrait.

Module  Impl_functions_order_SomeTrait_for_functions_order_SomeType.
Section Impl_functions_order_SomeTrait_for_functions_order_SomeType.
  Definition Self : Ty.t := Ty.apply (Ty.path "functions_order::SomeType") [].
  
  Parameter some_trait_bar :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "functions_order::SomeType") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_some_trait_bar : Instance.t := {
    Notations.double_colon := some_trait_bar;
  }.
  
  Parameter some_trait_foo :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "functions_order::SomeType") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_some_trait_foo : Instance.t := {
    Notations.double_colon := some_trait_foo;
  }.
  
  Definition ℐ : Instance.t := [("some_trait_bar", some_trait_bar);
    ("some_trait_foo", some_trait_foo)].
End Impl_functions_order_SomeTrait_for_functions_order_SomeType.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType.

Module  Impl_functions_order_SomeTrait_for_functions_order_OtherType.
Section Impl_functions_order_SomeTrait_for_functions_order_OtherType.
  Definition Self : Ty.t := Ty.apply (Ty.path "functions_order::OtherType") [].
  
  Parameter some_trait_foo :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "functions_order::OtherType") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_some_trait_foo : Instance.t := {
    Notations.double_colon := some_trait_foo;
  }.
  
  Parameter some_trait_bar :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "functions_order::OtherType") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_some_trait_bar : Instance.t := {
    Notations.double_colon := some_trait_bar;
  }.
  
  Definition ℐ : Instance.t := [("some_trait_foo", some_trait_foo);
    ("some_trait_bar", some_trait_bar)].
End Impl_functions_order_SomeTrait_for_functions_order_OtherType.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType.

Parameter depends_on_trait_impl :
    (Ty.path "u32") -> (Ty.path "bool") -> Ty.path "unit".

Module inner_mod.
  Parameter tar : Ty.path "unit".
  
  Parameter bar : Ty.path "unit".
  
  Module nested_mod.
    Parameter tack : Ty.path "unit".
    
    Parameter tick : Ty.path "unit".
  End nested_mod.
End inner_mod.

Parameter foo : Ty.path "unit".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
