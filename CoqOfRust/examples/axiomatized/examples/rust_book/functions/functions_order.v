(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  SomeType.
Section SomeType.
  Record t : Set := {
    x0 : u32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End SomeType.
End SomeType.

Module  OtherType.
Section OtherType.
  Record t : Set := {
    x0 : bool.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End OtherType.
End OtherType.

Module  Impl_functions_order_SomeType_t.
Section Impl_functions_order_SomeType_t.
  Definition Self : Set := functions_order.SomeType.t.
  
  (*
      pub fn meth1(self) {
          self.meth2();
      }
  *)
  Parameter meth1 : Self -> M unit.
  
  Global Instance AssociatedFunction_meth1 :
    Notations.DoubleColon Self "meth1" := {
    Notations.double_colon := meth1;
  }.
  
  (*
      fn meth2(self) {}
  *)
  Parameter meth2 : Self -> M unit.
  
  Global Instance AssociatedFunction_meth2 :
    Notations.DoubleColon Self "meth2" := {
    Notations.double_colon := meth2;
  }.
End Impl_functions_order_SomeType_t.
End Impl_functions_order_SomeType_t.

(*
fn depends_on_trait_impl(u: u32, b: bool) {
    OtherType(b).some_trait_foo();
    SomeType(u).some_trait_foo();
}
*)
Parameter depends_on_trait_impl : u32.t -> bool.t -> M unit.

Module  SomeTrait.
Section SomeTrait.
  Class Trait (Self : Set) : Type := {
    some_trait_foo : (ref Self) -> M unit;
    some_trait_bar : (ref Self) -> M unit;
  }.
  
End SomeTrait.
End SomeTrait.

Module  Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
Section Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
  Definition Self : Set := functions_order.SomeType.t.
  
  (*
      fn some_trait_foo(&self) {
          self.some_trait_bar()
      }
  *)
  Parameter some_trait_foo : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_some_trait_foo :
    Notations.DoubleColon Self "some_trait_foo" := {
    Notations.double_colon := some_trait_foo;
  }.
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Parameter some_trait_bar : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_some_trait_bar :
    Notations.DoubleColon Self "some_trait_bar" := {
    Notations.double_colon := some_trait_bar;
  }.
  
  Global Instance ℐ : functions_order.SomeTrait.Trait Self := {
    functions_order.SomeTrait.some_trait_foo := some_trait_foo;
    functions_order.SomeTrait.some_trait_bar := some_trait_bar;
  }.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.

Module  Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
Section Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
  Definition Self : Set := functions_order.OtherType.t.
  
  (*
      fn some_trait_foo(&self) {}
  *)
  Parameter some_trait_foo : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_some_trait_foo :
    Notations.DoubleColon Self "some_trait_foo" := {
    Notations.double_colon := some_trait_foo;
  }.
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Parameter some_trait_bar : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_some_trait_bar :
    Notations.DoubleColon Self "some_trait_bar" := {
    Notations.double_colon := some_trait_bar;
  }.
  
  Global Instance ℐ : functions_order.SomeTrait.Trait Self := {
    functions_order.SomeTrait.some_trait_foo := some_trait_foo;
    functions_order.SomeTrait.some_trait_bar := some_trait_bar;
  }.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.

Module inner_mod.
  (*
      pub fn bar() {
          // functions_order::inner_mod::bar
          tar();
      }
  *)
  Parameter bar : M unit.
  
  (*
      fn tar() {}
  *)
  Parameter tar : M unit.
  
  Module nested_mod.
    (*
            pub fn tick() {
                tack();
            }
    *)
    Parameter tick : M unit.
    
    (*
            fn tack() {}
    *)
    Parameter tack : M unit.
  End nested_mod.
End inner_mod.

(*
    pub fn bar() {
        // functions_order::inner_mod::bar
        tar();
    }
*)
Parameter bar : M unit.

(*
    fn tar() {}
*)
Parameter tar : M unit.

Module nested_mod.
  (*
          pub fn tick() {
              tack();
          }
  *)
  Parameter tick : M unit.
  
  (*
          fn tack() {}
  *)
  Parameter tack : M unit.
End nested_mod.

(*
        pub fn tick() {
            tack();
        }
*)
Parameter tick : M unit.

(*
        fn tack() {}
*)
Parameter tack : M unit.

(*
fn main() {
    // functions_order::main
    foo();
    inner_mod::bar();
    SomeType(0).meth1();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.

(*
fn foo() {}
*)
Parameter foo : M unit.
