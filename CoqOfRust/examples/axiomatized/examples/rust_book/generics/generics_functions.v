(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  A.
Section A.
  Inductive t : Set := Build.
End A.
End A.

Module  S.
Section S.
  Record t : Set := {
    x0 : generics_functions.A.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End S.
End S.

Module  SGen.
Section SGen.
  Context {T : Set}.
  
  Record t : Set := {
    x0 : T;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End SGen.
End SGen.

Parameter reg_fn : generics_functions.S.t -> M unit.

Parameter gen_spec_t :
    (generics_functions.SGen.t generics_functions.A.t) -> M unit.

Parameter gen_spec_i32 : (generics_functions.SGen.t i32.t) -> M unit.

Parameter generic : forall {T : Set}, (generics_functions.SGen.t T) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
