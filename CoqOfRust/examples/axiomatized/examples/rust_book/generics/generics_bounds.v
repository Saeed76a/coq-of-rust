(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  HasArea.
Section HasArea.
  Class Trait (Self : Set) : Type := {
    area : (ref Self) -> M f64.t;
  }.
  
End HasArea.
End HasArea.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Definition Get_length :=
    Ref.map (fun α => Some α.(length)) (fun β α => Some (α <| length := β |>)).
  Definition Get_height :=
    Ref.map (fun α => Some α.(height)) (fun β α => Some (α <| height := β |>)).
End Rectangle.
End Rectangle.

Module  Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
  Definition Self : Set := generics_bounds.Rectangle.t.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Triangle.
Section Triangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Definition Get_length :=
    Ref.map (fun α => Some α.(length)) (fun β α => Some (α <| length := β |>)).
  Definition Get_height :=
    Ref.map (fun α => Some α.(height)) (fun β α => Some (α <| height := β |>)).
End Triangle.
End Triangle.

Module  Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
  Definition Self : Set := generics_bounds.Rectangle.t.
  
  Parameter area : (ref Self) -> M f64.t.
  
  Global Instance AssociatedFunction_area :
    Notations.DoubleColon Self "area" := {
    Notations.double_colon := area;
  }.
  
  Global Instance ℐ : generics_bounds.HasArea.Trait Self := {
    generics_bounds.HasArea.area := area;
  }.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.

Parameter print_debug :
    forall {T : Set} {ℋ_0 : core.fmt.Debug.Trait T},
    (ref T) -> M unit.

Parameter area :
    forall {T : Set} {ℋ_0 : generics_bounds.HasArea.Trait T},
    (ref T) -> M f64.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
