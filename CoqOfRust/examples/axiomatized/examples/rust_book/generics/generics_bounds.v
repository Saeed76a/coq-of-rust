(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  HasArea.
Section HasArea.
  Class Trait (Self : Set) : Type := {
    area : Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "f64");
  }.
  
End HasArea.
End HasArea.



Module  Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
  Definition Self : Ty.t := Ty.apply (Ty.path "generics_bounds::Rectangle") [].
  
  Parameter fmt :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "generics_bounds::Rectangle") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.



Module  Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
  Definition Self : Ty.t := Ty.apply (Ty.path "generics_bounds::Rectangle") [].
  
  Parameter area :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "generics_bounds::Rectangle") []])
        ->
        Ty.path "f64".
  
  Definition AssociatedFunction_area : Instance.t := {
    Notations.double_colon := area;
  }.
  
  Definition ℐ : Instance.t := [("area", area)].
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.

Parameter print_debug :
    forall {T : Set},
    (Ty.apply (Ty.path "ref") [T]) -> Ty.path "unit".

Parameter area :
    forall {T : Set},
    (Ty.apply (Ty.path "ref") [T]) -> Ty.path "f64".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
