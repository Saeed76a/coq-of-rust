(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Contains.
Section Contains.
  Class Trait (Self : Set) : Type := {
    A : Set;
    B : Set;
    contains :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "ref") [_];
          Ty.apply (Ty.path "ref") [_]]
        (Ty.path "bool");
    first : Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "i32");
    last : Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "i32");
    a : Ty.function [Ty.apply (Ty.path "ref") [Self]] _;
  }.
  
  Definition Method_A `(Trait) : Instance.t := {
    Notations.double_colon_type := A;
  }.
  Definition Method_B `(Trait) : Instance.t := {
    Notations.double_colon_type := B;
  }.
End Contains.
End Contains.

Module  Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.
Section Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "generics_associated_types_solution::Container") [].
  
  Definition A : Set := Ty.path "i32".
  
  Definition B : Set := Ty.path "i32".
  
  Parameter contains :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "generics_associated_types_solution::Container")
              []])
        ->
        (Ty.apply (Ty.path "ref") [Ty.path "i32"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i32"]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_contains : Instance.t := {
    Notations.double_colon := contains;
  }.
  
  Parameter first :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "generics_associated_types_solution::Container")
              []])
        ->
        Ty.path "i32".
  
  Definition AssociatedFunction_first : Instance.t := {
    Notations.double_colon := first;
  }.
  
  Parameter last :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "generics_associated_types_solution::Container")
              []])
        ->
        Ty.path "i32".
  
  Definition AssociatedFunction_last : Instance.t := {
    Notations.double_colon := last;
  }.
  
  Parameter a :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "generics_associated_types_solution::Container")
              []])
        ->
        Ty.path "i32".
  
  Definition AssociatedFunction_a : Instance.t := {
    Notations.double_colon := a;
  }.
  
  Definition ℐ : Instance.t := [("A", A);
    ("B", B);
    ("contains", contains);
    ("first", first);
    ("last", last);
    ("a", a)].
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.

Parameter difference :
    forall {C : Set},
    (Ty.apply (Ty.path "ref") [C]) -> Ty.path "i32".

Parameter get_a : forall {C : Set}, (Ty.apply (Ty.path "ref") [C]) -> _.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
