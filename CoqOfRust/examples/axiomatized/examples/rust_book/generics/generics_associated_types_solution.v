(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Container.
Section Container.
  Record t : Set := {
    x0 : i32.t;
    x1 : i32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
End Container.
End Container.

Module  Contains.
Section Contains.
  Class Trait (Self : Set) : Type := {
    A : Set;
    B : Set;
    contains : (ref Self) -> (ref A.t) -> (ref B.t) -> M bool.t;
    first : (ref Self) -> M i32.t;
    last : (ref Self) -> M i32.t;
    a : (ref Self) -> M A.t;
  }.
  
  Global Instance Method_A `(Trait) : Notations.DoubleColonType Self "A" := {
    Notations.double_colon_type := A;
  }.
  Global Instance Method_B `(Trait) : Notations.DoubleColonType Self "B" := {
    Notations.double_colon_type := B;
  }.
End Contains.
End Contains.

Module  Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
Section Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
  Definition Self : Set := generics_associated_types_solution.Container.t.
  
  Definition A : Set := i32.t.
  
  Definition B : Set := i32.t.
  
  Parameter contains : (ref Self) -> (ref i32.t) -> (ref i32.t) -> M bool.t.
  
  Global Instance AssociatedFunction_contains :
    Notations.DoubleColon Self "contains" := {
    Notations.double_colon := contains;
  }.
  
  Parameter first : (ref Self) -> M i32.t.
  
  Global Instance AssociatedFunction_first :
    Notations.DoubleColon Self "first" := {
    Notations.double_colon := first;
  }.
  
  Parameter last : (ref Self) -> M i32.t.
  
  Global Instance AssociatedFunction_last :
    Notations.DoubleColon Self "last" := {
    Notations.double_colon := last;
  }.
  
  Parameter a : (ref Self) -> M i32.t.
  
  Global Instance AssociatedFunction_a : Notations.DoubleColon Self "a" := {
    Notations.double_colon := a;
  }.
  
  Global Instance ℐ :
    generics_associated_types_solution.Contains.Trait Self := {
    generics_associated_types_solution.Contains.A := A;
    generics_associated_types_solution.Contains.B := B;
    generics_associated_types_solution.Contains.contains := contains;
    generics_associated_types_solution.Contains.first := first;
    generics_associated_types_solution.Contains.last := last;
    generics_associated_types_solution.Contains.a := a;
  }.
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.

Parameter difference :
    forall
      {C : Set}
      {ℋ_0 : generics_associated_types_solution.Contains.Trait C},
    (ref C) -> M i32.t.

Parameter get_a :
    forall
      {C : Set}
      {ℋ_0 : generics_associated_types_solution.Contains.Trait C},
    (ref C) -> M C::type["A"].t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
