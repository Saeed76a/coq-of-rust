(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module DoubleError.
  Inductive t : Set :=
  | EmptyVec
  | Parse (_ : core.num.error.ParseIntError.t).
  
  Definition Get_Parse_0 :=
    Ref.map
      (fun α => match α with | Parse α0 => Some α0 | _ => None end)
      (fun β α => match α with | Parse _ => Some (Parse β) | _ => None end).
End DoubleError.

Module  Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
Section Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
  Definition Self : Set := wrapping_errors.DoubleError.t.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.

Ltac Result T := exact (core.result.Result.t T wrapping_errors.DoubleError.t).

Module  Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
Section Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
  Definition Self : Set := wrapping_errors.DoubleError.t.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.

Module  Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
Section Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
  Definition Self : Set := wrapping_errors.DoubleError.t.
  
  Parameter source :
      (ref Self) ->
        M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))).
  
  Global Instance AssociatedFunction_source :
    Notations.DoubleColon Self "source" := {
    Notations.double_colon := source;
  }.
  
  Global Instance ℐ : core.error.Error.Required.Trait Self := {
    core.error.Error.source := Datatypes.Some source;
    core.error.Error.type_id := Datatypes.None;
    core.error.Error.description := Datatypes.None;
    core.error.Error.cause := Datatypes.None;
    core.error.Error.provide := Datatypes.None;
  }.
End Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
End Impl_core_error_Error_for_wrapping_errors_DoubleError_t.

Module  Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
Section Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
  Definition Self : Set := wrapping_errors.DoubleError.t.
  
  Parameter from :
      core.num.error.ParseIntError.t -> M wrapping_errors.DoubleError.t.
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := core.num.error.ParseIntError.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
End Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.

Parameter double_first :
    (alloc.vec.Vec.t (ref str.t) alloc.vec.Vec.Default.A) ->
      M ltac:(wrapping_errors.Result i32.t).

Parameter print : ltac:(wrapping_errors.Result i32.t) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
