(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
Section Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  Parameter fmt :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "wrapping_errors::DoubleError") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T; Ty.apply (Ty.path "wrapping_errors::DoubleError") []].

Module  Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
Section Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  Parameter fmt :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "wrapping_errors::DoubleError") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError.

Module  Impl_core_error_Error_for_wrapping_errors_DoubleError.
Section Impl_core_error_Error_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  Parameter source :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "wrapping_errors::DoubleError") []])
        ->
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "ref") [dyn [core.error.Error.Trait]]].
  
  Definition AssociatedFunction_source : Instance.t := {
    Notations.double_colon := source;
  }.
  
  Definition ℐ : Instance.t := [("source", source);
    ("type_id", type_id);
    ("description", description);
    ("cause", cause);
    ("provide", provide)].
End Impl_core_error_Error_for_wrapping_errors_DoubleError.
End Impl_core_error_Error_for_wrapping_errors_DoubleError.

Module  Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
Section Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  Parameter from :
      (Ty.apply (Ty.path "core::num::error::ParseIntError") []) ->
        Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
End Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.

Parameter double_first :
    (Ty.apply
        (Ty.path "alloc::vec::Vec")
        [Ty.apply (Ty.path "ref") [Ty.path "str"];
          Ty.apply (Ty.path "alloc::alloc::Global") []])
      ->
      Ty.apply
        (Ty.path "core::result::Result")
        [Ty.path "i32"; Ty.apply (Ty.path "wrapping_errors::DoubleError") []].

Parameter print :
    (Ty.apply
        (Ty.path "core::result::Result")
        [Ty.path "i32"; Ty.apply (Ty.path "wrapping_errors::DoubleError") []])
      ->
      Ty.path "unit".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
