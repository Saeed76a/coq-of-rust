(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_combinators_and_then_Food.
Section Impl_core_fmt_Debug_for_combinators_and_then_Food.
  Definition Self : Ty.t := Ty.apply (Ty.path "combinators_and_then::Food") [].
  
  Parameter fmt :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "combinators_and_then::Food") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_combinators_and_then_Food.
End Impl_core_fmt_Debug_for_combinators_and_then_Food.



Module  Impl_core_fmt_Debug_for_combinators_and_then_Day.
Section Impl_core_fmt_Debug_for_combinators_and_then_Day.
  Definition Self : Ty.t := Ty.apply (Ty.path "combinators_and_then::Day") [].
  
  Parameter fmt :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "combinators_and_then::Day") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_combinators_and_then_Day.
End Impl_core_fmt_Debug_for_combinators_and_then_Day.

Parameter have_ingredients :
    (Ty.apply (Ty.path "combinators_and_then::Food") []) ->
      Ty.apply
        (Ty.path "core::option::Option")
        [Ty.apply (Ty.path "combinators_and_then::Food") []].

Parameter have_recipe :
    (Ty.apply (Ty.path "combinators_and_then::Food") []) ->
      Ty.apply
        (Ty.path "core::option::Option")
        [Ty.apply (Ty.path "combinators_and_then::Food") []].

Parameter cookable_v1 :
    (Ty.apply (Ty.path "combinators_and_then::Food") []) ->
      Ty.apply
        (Ty.path "core::option::Option")
        [Ty.apply (Ty.path "combinators_and_then::Food") []].

Parameter cookable_v2 :
    (Ty.apply (Ty.path "combinators_and_then::Food") []) ->
      Ty.apply
        (Ty.path "core::option::Option")
        [Ty.apply (Ty.path "combinators_and_then::Food") []].

Parameter eat :
    (Ty.apply (Ty.path "combinators_and_then::Food") []) ->
      (Ty.apply (Ty.path "combinators_and_then::Day") []) ->
      Ty.path "unit".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
