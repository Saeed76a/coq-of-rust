(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError.
Section Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "defining_an_error_type::DoubleError") [].
  
  Parameter fmt :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "defining_an_error_type::DoubleError") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError.
End Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError.

Module  Impl_core_clone_Clone_for_defining_an_error_type_DoubleError.
Section Impl_core_clone_Clone_for_defining_an_error_type_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "defining_an_error_type::DoubleError") [].
  
  Parameter clone :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "defining_an_error_type::DoubleError") []])
        ->
        Ty.apply (Ty.path "defining_an_error_type::DoubleError") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_defining_an_error_type_DoubleError.
End Impl_core_clone_Clone_for_defining_an_error_type_DoubleError.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T; Ty.apply (Ty.path "defining_an_error_type::DoubleError") []].

Module  Impl_core_fmt_Display_for_defining_an_error_type_DoubleError.
Section Impl_core_fmt_Display_for_defining_an_error_type_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "defining_an_error_type::DoubleError") [].
  
  Parameter fmt :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "defining_an_error_type::DoubleError") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Display_for_defining_an_error_type_DoubleError.
End Impl_core_fmt_Display_for_defining_an_error_type_DoubleError.

Parameter double_first :
    (Ty.apply
        (Ty.path "alloc::vec::Vec")
        [Ty.apply (Ty.path "ref") [Ty.path "str"];
          Ty.apply (Ty.path "alloc::alloc::Global") []])
      ->
      Ty.apply
        (Ty.path "core::result::Result")
        [Ty.path "i32";
          Ty.apply (Ty.path "defining_an_error_type::DoubleError") []].

Parameter print :
    (Ty.apply
        (Ty.path "core::result::Result")
        [Ty.path "i32";
          Ty.apply (Ty.path "defining_an_error_type::DoubleError") []])
      ->
      Ty.path "unit".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
