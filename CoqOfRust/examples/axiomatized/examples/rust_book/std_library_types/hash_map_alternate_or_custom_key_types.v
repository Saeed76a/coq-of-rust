(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.

Module  Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  Parameter eq :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "hash_map_alternate_or_custom_key_types::Account")
              []])
        ->
        (Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "hash_map_alternate_or_custom_key_types::Account")
              []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.

Module  Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.

Module  Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  Parameter assert_receiver_is_total_eq :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "hash_map_alternate_or_custom_key_types::Account")
              []])
        ->
        Ty.tuple.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.

Module  Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  Parameter hash :
      forall {__H : Set},
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "hash_map_alternate_or_custom_key_types::Account")
              []])
        ->
        (Ty.apply (Ty.path "mut_ref") [__H]) ->
        Ty.tuple.
  
  Definition AssociatedFunction_hash {__H : Set} : Instance.t := {
    Notations.double_colon := hash (__H := __H);
  }.
  
  Definition ℐ : Instance.t := [("hash", hash); ("hash_slice", hash_slice)].
End Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.



Axiom Accounts :
    Ty.apply
      (Ty.path "std::collections::hash::map::HashMap")
      [Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [];
        Ty.apply
          (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
          [];
        Ty.apply (Ty.path "std::hash::random::RandomState") []].

Parameter try_logon :
    (Ty.apply
        (Ty.path "ref")
        [Ty.apply
            (Ty.path "std::collections::hash::map::HashMap")
            [Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                [];
              Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
                [];
              Ty.apply (Ty.path "std::hash::random::RandomState") []]])
      ->
      (Ty.apply (Ty.path "ref") [Ty.path "str"]) ->
      (Ty.apply (Ty.path "ref") [Ty.path "str"]) ->
      Ty.path "unit".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : Ty.path "unit".
