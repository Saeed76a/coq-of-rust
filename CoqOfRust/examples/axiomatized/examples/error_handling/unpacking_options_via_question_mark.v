(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Person.
Section Person.
  Record t : Set := {
    job : core.option.Option.t unpacking_options_via_question_mark.Job.t;
  }.
  
  Global Instance Get_job : Notations.Dot "job" := {
    Notations.dot := Ref.map (fun x => x.(job)) (fun v x => x <| job := v |>);
  }.
  Global Instance Get_AF_job : Notations.DoubleColon t "job" := {
    Notations.double_colon (x : M.Val t) := x.["job"];
  }.
End Person.
End Person.

Module  Job.
Section Job.
  Record t : Set := {
    phone_number :
      core.option.Option.t unpacking_options_via_question_mark.PhoneNumber.t;
  }.
  
  Global Instance Get_phone_number : Notations.Dot "phone_number" := {
    Notations.dot :=
      Ref.map
        (fun x => x.(phone_number))
        (fun v x => x <| phone_number := v |>);
  }.
  Global Instance Get_AF_phone_number :
    Notations.DoubleColon t "phone_number" := {
    Notations.double_colon (x : M.Val t) := x.["phone_number"];
  }.
End Job.
End Job.

Module  Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
Section Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
  Ltac Self := exact unpacking_options_via_question_mark.Job.t.
  
  (*
  Clone
  *)
  Parameter clone :
      (M.Val (ref ltac:(Self))) -> M unpacking_options_via_question_mark.Job.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.

Module  Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
Section Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
  Ltac Self := exact unpacking_options_via_question_mark.Job.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.

Module  PhoneNumber.
Section PhoneNumber.
  Record t : Set := {
    area_code : core.option.Option.t u8.t;
    number : u32.t;
  }.
  
  Global Instance Get_area_code : Notations.Dot "area_code" := {
    Notations.dot :=
      Ref.map (fun x => x.(area_code)) (fun v x => x <| area_code := v |>);
  }.
  Global Instance Get_AF_area_code : Notations.DoubleColon t "area_code" := {
    Notations.double_colon (x : M.Val t) := x.["area_code"];
  }.
  Global Instance Get_number : Notations.Dot "number" := {
    Notations.dot :=
      Ref.map (fun x => x.(number)) (fun v x => x <| number := v |>);
  }.
  Global Instance Get_AF_number : Notations.DoubleColon t "number" := {
    Notations.double_colon (x : M.Val t) := x.["number"];
  }.
End PhoneNumber.
End PhoneNumber.

Module  Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
Section Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
  Ltac Self := exact unpacking_options_via_question_mark.PhoneNumber.t.
  
  (*
  Clone
  *)
  Parameter clone :
      (M.Val (ref ltac:(Self))) ->
        M unpacking_options_via_question_mark.PhoneNumber.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.

Module  Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
Section Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
  Ltac Self := exact unpacking_options_via_question_mark.PhoneNumber.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.

Module  Impl_unpacking_options_via_question_mark_Person_t.
Section Impl_unpacking_options_via_question_mark_Person_t.
  Ltac Self := exact unpacking_options_via_question_mark.Person.t.
  
  (*
      fn work_phone_area_code(&self) -> Option<u8> {
          // This would need many nested `match` statements without the `?` operator.
          // It would take a lot more code - try writing it yourself and see which
          // is easier.
          self.job?.phone_number?.area_code
      }
  *)
  Parameter work_phone_area_code :
      (M.Val (ref ltac:(Self))) -> M (core.option.Option.t u8.t).
  
  Global Instance AssociatedFunction_work_phone_area_code :
    Notations.DoubleColon ltac:(Self) "work_phone_area_code" := {
    Notations.double_colon := work_phone_area_code;
  }.
End Impl_unpacking_options_via_question_mark_Person_t.
End Impl_unpacking_options_via_question_mark_Person_t.

(*
fn main() {
    let p = Person {
        job: Some(Job {
            phone_number: Some(PhoneNumber {
                area_code: Some(61),
                number: 439222222,
            }),
        }),
    };

    assert_eq!(p.work_phone_area_code(), Some(61));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
