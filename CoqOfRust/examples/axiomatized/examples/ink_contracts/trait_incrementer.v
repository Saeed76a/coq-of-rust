(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Increment.
Section Increment.
  Class Trait (Self : Set) : Type := {
    inc : (mut_ref Self) -> M unit;
    get : (ref Self) -> M u64.t;
  }.
  
End Increment.
End Increment.

Module  Reset.
Section Reset.
  Class Trait (Self : Set) : Type := {
    reset : (mut_ref Self) -> M unit;
  }.
  
End Reset.
End Reset.

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    value : u64.t;
  }.
  
  Global Instance Get_value : Notations.Dot "value" := {
    Notations.dot :=
      Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>));
  }.
  Global Instance Get_AF_value : Notations.DoubleColon t "value" := {
    Notations.double_colon (α : M.Val t) := α.["value"];
  }.
End Incrementer.
End Incrementer.

Module  Impl_trait_incrementer_Incrementer_t.
Section Impl_trait_incrementer_Incrementer_t.
  Definition Self : Set := trait_incrementer.Incrementer.t.
  
  (*
      pub fn new(init_value: u64) -> Self {
          Self { value: init_value }
      }
  *)
  Parameter new : u64.t -> M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn inc_by(&mut self, delta: u64) {
          self.value += delta;
      }
  *)
  Parameter inc_by : (mut_ref Self) -> u64.t -> M unit.
  
  Global Instance AssociatedFunction_inc_by :
    Notations.DoubleColon Self "inc_by" := {
    Notations.double_colon := inc_by;
  }.
End Impl_trait_incrementer_Incrementer_t.
End Impl_trait_incrementer_Incrementer_t.

Module  Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer_t.
Section Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer_t.
  Definition Self : Set := trait_incrementer.Incrementer.t.
  
  (*
      fn inc(&mut self) {
          self.inc_by(1)
      }
  *)
  Parameter inc : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_inc : Notations.DoubleColon Self "inc" := {
    Notations.double_colon := inc;
  }.
  
  (*
      fn get(&self) -> u64 {
          self.value
      }
  *)
  Parameter get : (ref Self) -> M u64.t.
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  Global Instance ℐ : trait_incrementer.Increment.Trait Self := {
    trait_incrementer.Increment.inc := inc;
    trait_incrementer.Increment.get := get;
  }.
End Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer_t.
End Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer_t.

Module  Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer_t.
Section Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer_t.
  Definition Self : Set := trait_incrementer.Incrementer.t.
  
  (*
      fn reset(&mut self) {
          self.value = 0;
      }
  *)
  Parameter reset : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_reset :
    Notations.DoubleColon Self "reset" := {
    Notations.double_colon := reset;
  }.
  
  Global Instance ℐ : trait_incrementer.Reset.Trait Self := {
    trait_incrementer.Reset.reset := reset;
  }.
End Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer_t.
End Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer_t.
