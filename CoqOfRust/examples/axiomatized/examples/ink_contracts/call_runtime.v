(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot :=
      Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>));
  }.
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_call_runtime_AccountId_t.
Section Impl_core_default_Default_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M call_runtime.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_runtime_AccountId_t.
End Impl_core_default_Default_for_call_runtime_AccountId_t.

Module  Impl_core_clone_Clone_for_call_runtime_AccountId_t.
Section Impl_core_clone_Clone_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M call_runtime.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_call_runtime_AccountId_t.
End Impl_core_clone_Clone_for_call_runtime_AccountId_t.

Module  Impl_core_marker_Copy_for_call_runtime_AccountId_t.
Section Impl_core_marker_Copy_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_call_runtime_AccountId_t.
End Impl_core_marker_Copy_for_call_runtime_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : call_runtime.AccountId.t;
  }.
  
  Global Instance Get_caller : Notations.Dot "caller" := {
    Notations.dot :=
      Ref.map
        (fun α => Some α.(caller))
        (fun β α => Some (α <| caller := β |>));
  }.
  Global Instance Get_AF_caller : Notations.DoubleColon t "caller" := {
    Notations.double_colon (α : M.Val t) := α.["caller"];
  }.
End Env.
End Env.

Module MultiAddress.
  Inductive t (AccountId : Set) (AccountIndex : Set) : Set :=
  .
End MultiAddress.

Module  Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
Section Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
  Definition Self : Set :=
    call_runtime.MultiAddress.t call_runtime.AccountId.t unit.
  
  (*
      fn from(_value: AccountId) -> Self {
          unimplemented!()
      }
  *)
  Parameter from : call_runtime.AccountId.t -> M Self.
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := call_runtime.AccountId.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
End Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.

Module BalancesCall.
  Module Transfer.
    Record t : Set := {
      dest : call_runtime.MultiAddress.t call_runtime.AccountId.t unit;
      value : u128.t;
    }.
  End Transfer.
  
  Inductive t : Set :=
  | Transfer (_ : Transfer.t).
  
  Global Instance Get_Transfer_dest : Notations.Dot "Transfer.dest" := {
    Notations.dot :=
      Ref.map
        (fun α => match α with | Transfer α => Some α.(Transfer.dest) end)
        (fun β α =>
          match α with
          | Transfer α => Some (Transfer (α <| Transfer.dest := β |>))
          end);
  }.
  
  Global Instance Get_Transfer_value : Notations.Dot "Transfer.value" := {
    Notations.dot :=
      Ref.map
        (fun α => match α with | Transfer α => Some α.(Transfer.value) end)
        (fun β α =>
          match α with
          | Transfer α => Some (Transfer (α <| Transfer.value := β |>))
          end);
  }.
End BalancesCall.

Module RuntimeCall.
  Inductive t : Set :=
  | Balances (_ : call_runtime.BalancesCall.t).
  
  Global Instance Get_Balances_0 : Notations.Dot "Balances.0" := {
    Notations.dot :=
      Ref.map
        (fun α => match α with | Balances α0 => Some α0 end)
        (fun β α => match α with | Balances _ => Some (Balances β) end);
  }.
End RuntimeCall.

Module  RuntimeCaller.
Section RuntimeCaller.
  Inductive t : Set := Build.
End RuntimeCaller.
End RuntimeCaller.

Module  Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
Section Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
  Definition Self : Set := call_runtime.RuntimeCaller.t.
  
  (*
  Default
  *)
  Parameter default : M call_runtime.RuntimeCaller.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
End Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.

Module RuntimeError.
  Inductive t : Set :=
  | CallRuntimeFailed.
End RuntimeError.

Module  Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
Section Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  Debug
  *)
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.

Module  Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
Section Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
Section Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref call_runtime.RuntimeError.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
Section Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
Section Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.

Module EnvError.
  Inductive t : Set :=
  | CallRuntimeFailed
  | AnotherKindOfError.
End EnvError.

Module  Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
Section Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
      fn from(e: EnvError) -> Self {
          match e {
              EnvError::CallRuntimeFailed => RuntimeError::CallRuntimeFailed,
              _ => panic!("Unexpected error from `pallet-contracts`."),
          }
      }
  *)
  Parameter from : call_runtime.EnvError.t -> M Self.
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := call_runtime.EnvError.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
End Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.

Module  Impl_call_runtime_Env_t.
Section Impl_call_runtime_Env_t.
  Definition Self : Set := call_runtime.Env.t.
  
  (*
      fn call_runtime<Call>(&self, _call: &Call) -> Result<(), EnvError> {
          unimplemented!()
      }
  *)
  Parameter call_runtime :
      forall {Call : Set},
      (ref Self) ->
        (ref Call) ->
        M (core.result.Result.t unit call_runtime.EnvError.t).
  
  Global Instance AssociatedFunction_call_runtime {Call : Set} :
    Notations.DoubleColon Self "call_runtime" := {
    Notations.double_colon := call_runtime (Call := Call);
  }.
End Impl_call_runtime_Env_t.
End Impl_call_runtime_Env_t.

Module  Impl_call_runtime_RuntimeCaller_t.
Section Impl_call_runtime_RuntimeCaller_t.
  Definition Self : Set := call_runtime.RuntimeCaller.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M call_runtime.Env.t.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M call_runtime.Env.t.
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Parameter new : M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn transfer_through_runtime(
          &mut self,
          receiver: AccountId,
          value: Balance,
      ) -> Result<(), RuntimeError> {
          self.env()
              .call_runtime(&RuntimeCall::Balances(BalancesCall::Transfer {
                  dest: receiver.into(),
                  value,
              }))
              .map_err(Into::into)
      }
  *)
  Parameter transfer_through_runtime :
      (mut_ref Self) ->
        call_runtime.AccountId.t ->
        ltac:(call_runtime.Balance) ->
        M (core.result.Result.t unit call_runtime.RuntimeError.t).
  
  Global Instance AssociatedFunction_transfer_through_runtime :
    Notations.DoubleColon Self "transfer_through_runtime" := {
    Notations.double_colon := transfer_through_runtime;
  }.
  
  (*
      pub fn call_nonexistent_extrinsic(&mut self) -> Result<(), RuntimeError> {
          self.env().call_runtime(&()).map_err(Into::into)
      }
  *)
  Parameter call_nonexistent_extrinsic :
      (mut_ref Self) ->
        M (core.result.Result.t unit call_runtime.RuntimeError.t).
  
  Global Instance AssociatedFunction_call_nonexistent_extrinsic :
    Notations.DoubleColon Self "call_nonexistent_extrinsic" := {
    Notations.double_colon := call_nonexistent_extrinsic;
  }.
End Impl_call_runtime_RuntimeCaller_t.
End Impl_call_runtime_RuntimeCaller_t.
