(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
Section Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  Parameter default : M basic_contract_caller.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
End Impl_core_default_Default_for_basic_contract_caller_AccountId_t.

Module  Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
Section Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  Parameter clone : (ref Self) -> M basic_contract_caller.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.

Module  Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
Section Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.

Ltac Hash := exact (array u8.t).

Module Error.
  Inductive t : Set :=
  .
End Error.

Module  OtherContract.
Section OtherContract.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End OtherContract.
End OtherContract.

Module  Impl_basic_contract_caller_OtherContract_t.
Section Impl_basic_contract_caller_OtherContract_t.
  Definition Self : Set := basic_contract_caller.OtherContract.t.
  
  Parameter new : bool.t -> M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  Parameter flip : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_flip :
    Notations.DoubleColon Self "flip" := {
    Notations.double_colon := flip;
  }.
  
  Parameter get : (ref Self) -> M bool.t.
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
End Impl_basic_contract_caller_OtherContract_t.
End Impl_basic_contract_caller_OtherContract_t.

Module  BasicContractCaller.
Section BasicContractCaller.
  Record t : Set := {
    other_contract : basic_contract_caller.OtherContract.t;
  }.
  
  Definition Get_other_contract :=
    Ref.map
      (fun α => Some α.(other_contract))
      (fun β α => Some (α <| other_contract := β |>)).
End BasicContractCaller.
End BasicContractCaller.

Module  Impl_basic_contract_caller_BasicContractCaller_t.
Section Impl_basic_contract_caller_BasicContractCaller_t.
  Definition Self : Set := basic_contract_caller.BasicContractCaller.t.
  
  Parameter new : ltac:(basic_contract_caller.Hash) -> M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  Parameter flip_and_get : (mut_ref Self) -> M bool.t.
  
  Global Instance AssociatedFunction_flip_and_get :
    Notations.DoubleColon Self "flip_and_get" := {
    Notations.double_colon := flip_and_get;
  }.
End Impl_basic_contract_caller_BasicContractCaller_t.
End Impl_basic_contract_caller_BasicContractCaller_t.
