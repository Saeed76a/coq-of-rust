(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_basic_contract_caller_AccountId.
Section Impl_core_default_Default_for_basic_contract_caller_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "basic_contract_caller::AccountId") [].
  
  Parameter default : Ty.apply (Ty.path "basic_contract_caller::AccountId") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_basic_contract_caller_AccountId.
End Impl_core_default_Default_for_basic_contract_caller_AccountId.

Module  Impl_core_clone_Clone_for_basic_contract_caller_AccountId.
Section Impl_core_clone_Clone_for_basic_contract_caller_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "basic_contract_caller::AccountId") [].
  
  Parameter clone :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "basic_contract_caller::AccountId") []])
        ->
        Ty.apply (Ty.path "basic_contract_caller::AccountId") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId.
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId.

Module  Impl_core_marker_Copy_for_basic_contract_caller_AccountId.
Section Impl_core_marker_Copy_for_basic_contract_caller_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "basic_contract_caller::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId.
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId.

Axiom Hash : Ty.apply (Ty.path "array") [Ty.path "u8"].





Module  Impl_basic_contract_caller_OtherContract.
Section Impl_basic_contract_caller_OtherContract.
  Definition Self : Set :=
    Ty.apply (Ty.path "basic_contract_caller::OtherContract") [].
  
  Parameter new :
      (Ty.path "bool") ->
        Ty.apply (Ty.path "basic_contract_caller::OtherContract") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter flip :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "basic_contract_caller::OtherContract") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_flip : Instance.t := {
    Notations.double_colon := flip;
  }.
  
  Parameter get :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "basic_contract_caller::OtherContract") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
End Impl_basic_contract_caller_OtherContract.
End Impl_basic_contract_caller_OtherContract.



Module  Impl_basic_contract_caller_BasicContractCaller.
Section Impl_basic_contract_caller_BasicContractCaller.
  Definition Self : Set :=
    Ty.apply (Ty.path "basic_contract_caller::BasicContractCaller") [].
  
  Parameter new :
      (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.apply (Ty.path "basic_contract_caller::BasicContractCaller") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter flip_and_get :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "basic_contract_caller::BasicContractCaller") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_flip_and_get : Instance.t := {
    Notations.double_colon := flip_and_get;
  }.
End Impl_basic_contract_caller_BasicContractCaller.
End Impl_basic_contract_caller_BasicContractCaller.
