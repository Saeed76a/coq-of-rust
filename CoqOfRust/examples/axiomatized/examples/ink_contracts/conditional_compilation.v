(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_conditional_compilation_AccountId_t.
Section Impl_core_default_Default_for_conditional_compilation_AccountId_t.
  Definition Self : Set := conditional_compilation.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M conditional_compilation.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_conditional_compilation_AccountId_t.
End Impl_core_default_Default_for_conditional_compilation_AccountId_t.

Module  Impl_core_clone_Clone_for_conditional_compilation_AccountId_t.
Section Impl_core_clone_Clone_for_conditional_compilation_AccountId_t.
  Definition Self : Set := conditional_compilation.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M conditional_compilation.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_conditional_compilation_AccountId_t.
End Impl_core_clone_Clone_for_conditional_compilation_AccountId_t.

Module  Impl_core_marker_Copy_for_conditional_compilation_AccountId_t.
Section Impl_core_marker_Copy_for_conditional_compilation_AccountId_t.
  Definition Self : Set := conditional_compilation.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_conditional_compilation_AccountId_t.
End Impl_core_marker_Copy_for_conditional_compilation_AccountId_t.

Ltac Balance := exact u128.t.

Ltac BlockNumber := exact u32.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : conditional_compilation.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Flip.
Section Flip.
  Class Trait (Self : Set) : Type := {
    flip : (mut_ref Self) -> M unit;
    get : (ref Self) -> M bool.t;
    push_foo : (mut_ref Self) -> bool.t -> M unit;
  }.
  
End Flip.
End Flip.

Module  Changes.
Section Changes.
  Record t : Set := {
    new_value : bool.t;
    by_ : conditional_compilation.AccountId.t;
  }.
  
  Definition Get_new_value :=
    Ref.map
      (fun α => Some α.(new_value))
      (fun β α => Some (α <| new_value := β |>)).
  Definition Get_by_ :=
    Ref.map (fun α => Some α.(by_)) (fun β α => Some (α <| by_ := β |>)).
End Changes.
End Changes.

Module  ChangesDated.
Section ChangesDated.
  Record t : Set := {
    new_value : bool.t;
    by_ : conditional_compilation.AccountId.t;
    when : ltac:(conditional_compilation.BlockNumber);
  }.
  
  Definition Get_new_value :=
    Ref.map
      (fun α => Some α.(new_value))
      (fun β α => Some (α <| new_value := β |>)).
  Definition Get_by_ :=
    Ref.map (fun α => Some α.(by_)) (fun β α => Some (α <| by_ := β |>)).
  Definition Get_when :=
    Ref.map (fun α => Some α.(when)) (fun β α => Some (α <| when := β |>)).
End ChangesDated.
End ChangesDated.

Module Event.
  Inductive t : Set :=
  | Changes (_ : conditional_compilation.Changes.t)
  | ChangesDated (_ : conditional_compilation.ChangesDated.t).
  
  Definition Get_Changes_0 :=
    Ref.map
      (fun α => match α with | Changes α0 => Some α0 | _ => None end)
      (fun β α => match α with | Changes _ => Some (Changes β) | _ => None end).
  
  Definition Get_ChangesDated_0 :=
    Ref.map
      (fun α => match α with | ChangesDated α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | ChangesDated _ => Some (ChangesDated β) | _ => None end).
End Event.

Module  Impl_conditional_compilation_Env_t.
Section Impl_conditional_compilation_Env_t.
  Definition Self : Set := conditional_compilation.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Parameter caller : (ref Self) -> M conditional_compilation.AccountId.t.
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Parameter emit_event :
      (ref Self) -> conditional_compilation.Event.t -> M unit.
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
  
  (*
      fn block_number(&self) -> BlockNumber {
          unimplemented!()
      }
  *)
  Parameter block_number :
      (ref Self) -> M ltac:(conditional_compilation.BlockNumber).
  
  Global Instance AssociatedFunction_block_number :
    Notations.DoubleColon Self "block_number" := {
    Notations.double_colon := block_number;
  }.
End Impl_conditional_compilation_Env_t.
End Impl_conditional_compilation_Env_t.

Module  ConditionalCompilation.
Section ConditionalCompilation.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End ConditionalCompilation.
End ConditionalCompilation.

Module  Impl_conditional_compilation_ConditionalCompilation_t.
Section Impl_conditional_compilation_ConditionalCompilation_t.
  Definition Self : Set := conditional_compilation.ConditionalCompilation.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M conditional_compilation.Env.t.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M conditional_compilation.Env.t.
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Self {
              value: Default::default(),
          }
      }
  *)
  Parameter new : M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_foo(value: bool) -> Self {
          Self { value }
      }
  *)
  Parameter new_foo : bool.t -> M Self.
  
  Global Instance AssociatedFunction_new_foo :
    Notations.DoubleColon Self "new_foo" := {
    Notations.double_colon := new_foo;
  }.
  
  (*
      pub fn new_bar(value: bool) -> Self {
          Self { value }
      }
  *)
  Parameter new_bar : bool.t -> M Self.
  
  Global Instance AssociatedFunction_new_bar :
    Notations.DoubleColon Self "new_bar" := {
    Notations.double_colon := new_bar;
  }.
  
  (*
      pub fn new_foo_bar(value: bool) -> Self {
          Self { value }
      }
  *)
  Parameter new_foo_bar : bool.t -> M Self.
  
  Global Instance AssociatedFunction_new_foo_bar :
    Notations.DoubleColon Self "new_foo_bar" := {
    Notations.double_colon := new_foo_bar;
  }.
  
  (*
      pub fn inherent_flip_foo(&mut self) {
          self.value = !self.value;
          let caller = Self::init_env().caller();
          Self::init_env().emit_event(Event::Changes(Changes {
              new_value: self.value,
              by: caller,
          }));
      }
  *)
  Parameter inherent_flip_foo : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_inherent_flip_foo :
    Notations.DoubleColon Self "inherent_flip_foo" := {
    Notations.double_colon := inherent_flip_foo;
  }.
  
  (*
      pub fn inherent_flip_bar(&mut self) {
          let caller = Self::init_env().caller();
          let block_number = Self::init_env().block_number();
          self.value = !self.value;
          Self::init_env().emit_event(Event::ChangesDated(ChangesDated {
              new_value: self.value,
              by: caller,
              when: block_number,
          }));
      }
  *)
  Parameter inherent_flip_bar : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_inherent_flip_bar :
    Notations.DoubleColon Self "inherent_flip_bar" := {
    Notations.double_colon := inherent_flip_bar;
  }.
End Impl_conditional_compilation_ConditionalCompilation_t.
End Impl_conditional_compilation_ConditionalCompilation_t.

Module  Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation_t.
Section Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation_t.
  Definition Self : Set := conditional_compilation.ConditionalCompilation.t.
  
  (*
      fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Parameter flip : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_flip :
    Notations.DoubleColon Self "flip" := {
    Notations.double_colon := flip;
  }.
  
  (*
      fn get(&self) -> bool {
          self.value
      }
  *)
  Parameter get : (ref Self) -> M bool.t.
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      fn push_foo(&mut self, value: bool) {
          let caller = Self::init_env().caller();
          Self::init_env().emit_event(Event::Changes(Changes {
              new_value: value,
              by: caller,
          }));
          self.value = value;
      }
  *)
  Parameter push_foo : (mut_ref Self) -> bool.t -> M unit.
  
  Global Instance AssociatedFunction_push_foo :
    Notations.DoubleColon Self "push_foo" := {
    Notations.double_colon := push_foo;
  }.
  
  Global Instance ℐ : conditional_compilation.Flip.Trait Self := {
    conditional_compilation.Flip.flip := flip;
    conditional_compilation.Flip.get := get;
    conditional_compilation.Flip.push_foo := push_foo;
  }.
End Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation_t.
End Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation_t.
