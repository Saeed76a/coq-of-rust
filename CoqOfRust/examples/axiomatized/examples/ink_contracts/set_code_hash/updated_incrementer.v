(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_updated_incrementer_AccountId_t.
Section Impl_core_default_Default_for_updated_incrementer_AccountId_t.
  Definition Self : Set := updated_incrementer.AccountId.t.
  
  Parameter default : M updated_incrementer.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_updated_incrementer_AccountId_t.
End Impl_core_default_Default_for_updated_incrementer_AccountId_t.

Module  Impl_core_clone_Clone_for_updated_incrementer_AccountId_t.
Section Impl_core_clone_Clone_for_updated_incrementer_AccountId_t.
  Definition Self : Set := updated_incrementer.AccountId.t.
  
  Parameter clone : (ref Self) -> M updated_incrementer.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_updated_incrementer_AccountId_t.
End Impl_core_clone_Clone_for_updated_incrementer_AccountId_t.

Module  Impl_core_marker_Copy_for_updated_incrementer_AccountId_t.
Section Impl_core_marker_Copy_for_updated_incrementer_AccountId_t.
  Definition Self : Set := updated_incrementer.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_updated_incrementer_AccountId_t.
End Impl_core_marker_Copy_for_updated_incrementer_AccountId_t.

Ltac Hash := exact (array u8.t).

Module Error.
  Inductive t : Set :=
  .
End Error.

Module  Env.
Section Env.
  Record t : Set := {
    caller : updated_incrementer.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Impl_updated_incrementer_Env_t.
Section Impl_updated_incrementer_Env_t.
  Definition Self : Set := updated_incrementer.Env.t.
  
  Parameter set_code_hash :
      forall {E : Set},
      (ref Self) ->
        (ref E) ->
        M (core.result.Result.t unit updated_incrementer.Error.t).
  
  Global Instance AssociatedFunction_set_code_hash {E : Set} :
    Notations.DoubleColon Self "set_code_hash" := {
    Notations.double_colon := set_code_hash (E := E);
  }.
End Impl_updated_incrementer_Env_t.
End Impl_updated_incrementer_Env_t.

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    count : u32.t;
  }.
  
  Definition Get_count :=
    Ref.map (fun α => Some α.(count)) (fun β α => Some (α <| count := β |>)).
End Incrementer.
End Incrementer.

Module  Impl_updated_incrementer_Incrementer_t.
Section Impl_updated_incrementer_Incrementer_t.
  Definition Self : Set := updated_incrementer.Incrementer.t.
  
  Parameter init_env : M updated_incrementer.Env.t.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env : (ref Self) -> M updated_incrementer.Env.t.
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  Parameter new : M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  Parameter inc : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_inc : Notations.DoubleColon Self "inc" := {
    Notations.double_colon := inc;
  }.
  
  Parameter get : (ref Self) -> M u32.t.
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  Parameter set_code :
      (mut_ref Self) -> ltac:(updated_incrementer.Hash) -> M unit.
  
  Global Instance AssociatedFunction_set_code :
    Notations.DoubleColon Self "set_code" := {
    Notations.double_colon := set_code;
  }.
End Impl_updated_incrementer_Incrementer_t.
End Impl_updated_incrementer_Incrementer_t.
