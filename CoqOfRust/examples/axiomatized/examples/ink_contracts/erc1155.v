(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Mapping.
Section Mapping.
  Context (K V : Set).
  
  Record t : Set := {
    _key : core.marker.PhantomData.t K;
    _value : core.marker.PhantomData.t V;
  }.
  
  Definition Get__key :=
    Ref.map (fun α => Some α.(_key)) (fun β α => Some (α <| _key := β |>)).
  Definition Get__value :=
    Ref.map (fun α => Some α.(_value)) (fun β α => Some (α <| _value := β |>)).
End Mapping.
End Mapping.

Module  Impl_core_default_Default_for_erc1155_Mapping_t_K_V.
Section Impl_core_default_Default_for_erc1155_Mapping_t_K_V.
  Context {K V : Set}.
  
  Context
    {ℋ_0 : core.default.Default.Trait K}
    {ℋ_1 : core.default.Default.Trait V}.
  
  Definition Self : Set := erc1155.Mapping.t K V.
  
  Parameter default : M (erc1155.Mapping.t K V).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc1155_Mapping_t_K_V.
End Impl_core_default_Default_for_erc1155_Mapping_t_K_V.

Module  Impl_erc1155_Mapping_t_K_V.
Section Impl_erc1155_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := erc1155.Mapping.t K V.
  
  Parameter contains : (ref Self) -> (ref K) -> M bool.t.
  
  Global Instance AssociatedFunction_contains :
    Notations.DoubleColon Self "contains" := {
    Notations.double_colon := contains;
  }.
  
  Parameter get : (ref Self) -> (ref K) -> M (core.option.Option.t V).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  Parameter insert : (mut_ref Self) -> K -> V -> M (core.option.Option.t u32.t).
  
  Global Instance AssociatedFunction_insert :
    Notations.DoubleColon Self "insert" := {
    Notations.double_colon := insert;
  }.
  
  Parameter remove : (ref Self) -> K -> M unit.
  
  Global Instance AssociatedFunction_remove :
    Notations.DoubleColon Self "remove" := {
    Notations.double_colon := remove;
  }.
  
  Parameter size : (ref Self) -> K -> M (core.option.Option.t u32.t).
  
  Global Instance AssociatedFunction_size :
    Notations.DoubleColon Self "size" := {
    Notations.double_colon := size;
  }.
  
  Parameter take : (ref Self) -> K -> M (core.option.Option.t V).
  
  Global Instance AssociatedFunction_take :
    Notations.DoubleColon Self "take" := {
    Notations.double_colon := take;
  }.
End Impl_erc1155_Mapping_t_K_V.
End Impl_erc1155_Mapping_t_K_V.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_erc1155_AccountId_t.
Section Impl_core_default_Default_for_erc1155_AccountId_t.
  Definition Self : Set := erc1155.AccountId.t.
  
  Parameter default : M erc1155.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc1155_AccountId_t.
End Impl_core_default_Default_for_erc1155_AccountId_t.

Module  Impl_core_clone_Clone_for_erc1155_AccountId_t.
Section Impl_core_clone_Clone_for_erc1155_AccountId_t.
  Definition Self : Set := erc1155.AccountId.t.
  
  Parameter clone : (ref Self) -> M erc1155.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_erc1155_AccountId_t.
End Impl_core_clone_Clone_for_erc1155_AccountId_t.

Module  Impl_core_marker_Copy_for_erc1155_AccountId_t.
Section Impl_core_marker_Copy_for_erc1155_AccountId_t.
  Definition Self : Set := erc1155.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_erc1155_AccountId_t.
End Impl_core_marker_Copy_for_erc1155_AccountId_t.

Module  Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId_t.
Section Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId_t.
  Definition Self : Set := erc1155.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId_t.
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId_t.

Module  Impl_core_cmp_PartialEq_for_erc1155_AccountId_t.
Section Impl_core_cmp_PartialEq_for_erc1155_AccountId_t.
  Definition Self : Set := erc1155.AccountId.t.
  
  Parameter eq : (ref Self) -> (ref erc1155.AccountId.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_erc1155_AccountId_t.
End Impl_core_cmp_PartialEq_for_erc1155_AccountId_t.

Module  Impl_core_convert_From_array_u8_t_for_erc1155_AccountId_t.
Section Impl_core_convert_From_array_u8_t_for_erc1155_AccountId_t.
  Definition Self : Set := erc1155.AccountId.t.
  
  Parameter from : (array u8.t) -> M Self.
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := array u8.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_array_u8_t_for_erc1155_AccountId_t.
End Impl_core_convert_From_array_u8_t_for_erc1155_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : erc1155.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Parameter zero_address : M erc1155.AccountId.t.

Parameter ON_ERC_1155_RECEIVED_SELECTOR : M.Val (array u8.t).

Parameter _ON_ERC_1155_BATCH_RECEIVED_SELECTOR : M.Val (array u8.t).

Ltac TokenId := exact u128.t.

Module Error.
  Inductive t : Set :=
  | UnexistentToken
  | ZeroAddressTransfer
  | NotApproved
  | InsufficientBalance
  | SelfApproval
  | BatchTransferMismatch.
End Error.

Module  Impl_core_marker_StructuralPartialEq_for_erc1155_Error_t.
Section Impl_core_marker_StructuralPartialEq_for_erc1155_Error_t.
  Definition Self : Set := erc1155.Error.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error_t.
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error_t.

Module  Impl_core_cmp_PartialEq_for_erc1155_Error_t.
Section Impl_core_cmp_PartialEq_for_erc1155_Error_t.
  Definition Self : Set := erc1155.Error.t.
  
  Parameter eq : (ref Self) -> (ref erc1155.Error.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_erc1155_Error_t.
End Impl_core_cmp_PartialEq_for_erc1155_Error_t.

Module  Impl_core_marker_StructuralEq_for_erc1155_Error_t.
Section Impl_core_marker_StructuralEq_for_erc1155_Error_t.
  Definition Self : Set := erc1155.Error.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_erc1155_Error_t.
End Impl_core_marker_StructuralEq_for_erc1155_Error_t.

Module  Impl_core_cmp_Eq_for_erc1155_Error_t.
Section Impl_core_cmp_Eq_for_erc1155_Error_t.
  Definition Self : Set := erc1155.Error.t.
  
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_erc1155_Error_t.
End Impl_core_cmp_Eq_for_erc1155_Error_t.

Ltac Result T := exact (core.result.Result.t T erc1155.Error.t).

Module  Erc1155.
Section Erc1155.
  Class Trait (Self : Set) : Type := {
    safe_transfer_from :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        ltac:(erc1155.TokenId) ->
        ltac:(erc1155.Balance) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M ltac:(erc1155.Result unit);
    safe_batch_transfer_from :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        (alloc.vec.Vec.t ltac:(erc1155.TokenId) alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t ltac:(erc1155.Balance) alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M ltac:(erc1155.Result unit);
    balance_of :
      (ref Self) ->
        erc1155.AccountId.t ->
        ltac:(erc1155.TokenId) ->
        M ltac:(erc1155.Balance);
    balance_of_batch :
      (ref Self) ->
        (alloc.vec.Vec.t erc1155.AccountId.t alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t ltac:(erc1155.TokenId) alloc.vec.Vec.Default.A) ->
        M (alloc.vec.Vec.t ltac:(erc1155.Balance) alloc.vec.Vec.Default.A);
    set_approval_for_all :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        bool.t ->
        M ltac:(erc1155.Result unit);
    is_approved_for_all :
      (ref Self) -> erc1155.AccountId.t -> erc1155.AccountId.t -> M bool.t;
  }.
  
End Erc1155.
End Erc1155.

Module  Erc1155TokenReceiver.
Section Erc1155TokenReceiver.
  Class Trait (Self : Set) : Type := {
    on_received :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        ltac:(erc1155.TokenId) ->
        ltac:(erc1155.Balance) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A);
    on_batch_received :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        (alloc.vec.Vec.t ltac:(erc1155.TokenId) alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t ltac:(erc1155.Balance) alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A);
  }.
  
End Erc1155TokenReceiver.
End Erc1155TokenReceiver.

Ltac Owner := exact erc1155.AccountId.t.

Ltac Operator := exact erc1155.AccountId.t.

Module  TransferSingle.
Section TransferSingle.
  Record t : Set := {
    operator : core.option.Option.t erc1155.AccountId.t;
    from : core.option.Option.t erc1155.AccountId.t;
    to : core.option.Option.t erc1155.AccountId.t;
    token_id : ltac:(erc1155.TokenId);
    value : ltac:(erc1155.Balance);
  }.
  
  Definition Get_operator :=
    Ref.map
      (fun α => Some α.(operator))
      (fun β α => Some (α <| operator := β |>)).
  Definition Get_from :=
    Ref.map (fun α => Some α.(from)) (fun β α => Some (α <| from := β |>)).
  Definition Get_to :=
    Ref.map (fun α => Some α.(to)) (fun β α => Some (α <| to := β |>)).
  Definition Get_token_id :=
    Ref.map
      (fun α => Some α.(token_id))
      (fun β α => Some (α <| token_id := β |>)).
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End TransferSingle.
End TransferSingle.

Module  ApprovalForAll.
Section ApprovalForAll.
  Record t : Set := {
    owner : erc1155.AccountId.t;
    operator : erc1155.AccountId.t;
    approved : bool.t;
  }.
  
  Definition Get_owner :=
    Ref.map (fun α => Some α.(owner)) (fun β α => Some (α <| owner := β |>)).
  Definition Get_operator :=
    Ref.map
      (fun α => Some α.(operator))
      (fun β α => Some (α <| operator := β |>)).
  Definition Get_approved :=
    Ref.map
      (fun α => Some α.(approved))
      (fun β α => Some (α <| approved := β |>)).
End ApprovalForAll.
End ApprovalForAll.

Module  Uri.
Section Uri.
  Record t : Set := {
    value : alloc.string.String.t;
    token_id : ltac:(erc1155.TokenId);
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
  Definition Get_token_id :=
    Ref.map
      (fun α => Some α.(token_id))
      (fun β α => Some (α <| token_id := β |>)).
End Uri.
End Uri.

Module Event.
  Inductive t : Set :=
  | TransferSingle (_ : erc1155.TransferSingle.t)
  | ApprovalForAll (_ : erc1155.ApprovalForAll.t)
  | Uri (_ : erc1155.Uri.t).
  
  Definition Get_TransferSingle_0 :=
    Ref.map
      (fun α => match α with | TransferSingle α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | TransferSingle _ => Some (TransferSingle β)
        | _ => None
        end).
  
  Definition Get_ApprovalForAll_0 :=
    Ref.map
      (fun α => match α with | ApprovalForAll α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | ApprovalForAll _ => Some (ApprovalForAll β)
        | _ => None
        end).
  
  Definition Get_Uri_0 :=
    Ref.map
      (fun α => match α with | Uri α0 => Some α0 | _ => None end)
      (fun β α => match α with | Uri _ => Some (Uri β) | _ => None end).
End Event.

Module  Impl_erc1155_Env_t.
Section Impl_erc1155_Env_t.
  Definition Self : Set := erc1155.Env.t.
  
  Parameter caller : (ref Self) -> M erc1155.AccountId.t.
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  Parameter emit_event : (ref Self) -> erc1155.Event.t -> M unit.
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
End Impl_erc1155_Env_t.
End Impl_erc1155_Env_t.

Module  Contract.
Section Contract.
  Record t : Set := {
    balances :
      erc1155.Mapping.t
        (erc1155.AccountId.t * ltac:(erc1155.TokenId))
        ltac:(erc1155.Balance);
    approvals :
      erc1155.Mapping.t (ltac:(erc1155.Owner) * ltac:(erc1155.Operator)) unit;
    token_id_nonce : ltac:(erc1155.TokenId);
  }.
  
  Definition Get_balances :=
    Ref.map
      (fun α => Some α.(balances))
      (fun β α => Some (α <| balances := β |>)).
  Definition Get_approvals :=
    Ref.map
      (fun α => Some α.(approvals))
      (fun β α => Some (α <| approvals := β |>)).
  Definition Get_token_id_nonce :=
    Ref.map
      (fun α => Some α.(token_id_nonce))
      (fun β α => Some (α <| token_id_nonce := β |>)).
End Contract.
End Contract.

Module  Impl_core_default_Default_for_erc1155_Contract_t.
Section Impl_core_default_Default_for_erc1155_Contract_t.
  Definition Self : Set := erc1155.Contract.t.
  
  Parameter default : M erc1155.Contract.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc1155_Contract_t.
End Impl_core_default_Default_for_erc1155_Contract_t.

Module  Impl_erc1155_Contract_t.
Section Impl_erc1155_Contract_t.
  Definition Self : Set := erc1155.Contract.t.
  
  Parameter init_env : M erc1155.Env.t.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env : (ref Self) -> M erc1155.Env.t.
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  Parameter new : M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  Parameter create :
      (mut_ref Self) -> ltac:(erc1155.Balance) -> M ltac:(erc1155.TokenId).
  
  Global Instance AssociatedFunction_create :
    Notations.DoubleColon Self "create" := {
    Notations.double_colon := create;
  }.
  
  Parameter mint :
      (mut_ref Self) ->
        ltac:(erc1155.TokenId) ->
        ltac:(erc1155.Balance) ->
        M ltac:(erc1155.Result unit).
  
  Global Instance AssociatedFunction_mint :
    Notations.DoubleColon Self "mint" := {
    Notations.double_colon := mint;
  }.
  
  Parameter perform_transfer :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        ltac:(erc1155.TokenId) ->
        ltac:(erc1155.Balance) ->
        M unit.
  
  Global Instance AssociatedFunction_perform_transfer :
    Notations.DoubleColon Self "perform_transfer" := {
    Notations.double_colon := perform_transfer;
  }.
  
  Parameter transfer_acceptance_check :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        ltac:(erc1155.TokenId) ->
        ltac:(erc1155.Balance) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M unit.
  
  Global Instance AssociatedFunction_transfer_acceptance_check :
    Notations.DoubleColon Self "transfer_acceptance_check" := {
    Notations.double_colon := transfer_acceptance_check;
  }.
End Impl_erc1155_Contract_t.
End Impl_erc1155_Contract_t.

Module  Impl_erc1155_Erc1155_for_erc1155_Contract_t.
Section Impl_erc1155_Erc1155_for_erc1155_Contract_t.
  Definition Self : Set := erc1155.Contract.t.
  
  Parameter is_approved_for_all :
      (ref Self) -> erc1155.AccountId.t -> erc1155.AccountId.t -> M bool.t.
  
  Global Instance AssociatedFunction_is_approved_for_all :
    Notations.DoubleColon Self "is_approved_for_all" := {
    Notations.double_colon := is_approved_for_all;
  }.
  
  Parameter balance_of :
      (ref Self) ->
        erc1155.AccountId.t ->
        ltac:(erc1155.TokenId) ->
        M ltac:(erc1155.Balance).
  
  Global Instance AssociatedFunction_balance_of :
    Notations.DoubleColon Self "balance_of" := {
    Notations.double_colon := balance_of;
  }.
  
  Parameter safe_transfer_from :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        ltac:(erc1155.TokenId) ->
        ltac:(erc1155.Balance) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M ltac:(erc1155.Result unit).
  
  Global Instance AssociatedFunction_safe_transfer_from :
    Notations.DoubleColon Self "safe_transfer_from" := {
    Notations.double_colon := safe_transfer_from;
  }.
  
  Parameter safe_batch_transfer_from :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        (alloc.vec.Vec.t ltac:(erc1155.TokenId) alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t ltac:(erc1155.Balance) alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M ltac:(erc1155.Result unit).
  
  Global Instance AssociatedFunction_safe_batch_transfer_from :
    Notations.DoubleColon Self "safe_batch_transfer_from" := {
    Notations.double_colon := safe_batch_transfer_from;
  }.
  
  Parameter balance_of_batch :
      (ref Self) ->
        (alloc.vec.Vec.t erc1155.AccountId.t alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t ltac:(erc1155.TokenId) alloc.vec.Vec.Default.A) ->
        M (alloc.vec.Vec.t ltac:(erc1155.Balance) alloc.vec.Vec.Default.A).
  
  Global Instance AssociatedFunction_balance_of_batch :
    Notations.DoubleColon Self "balance_of_batch" := {
    Notations.double_colon := balance_of_batch;
  }.
  
  Parameter set_approval_for_all :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        bool.t ->
        M ltac:(erc1155.Result unit).
  
  Global Instance AssociatedFunction_set_approval_for_all :
    Notations.DoubleColon Self "set_approval_for_all" := {
    Notations.double_colon := set_approval_for_all;
  }.
  
  Global Instance ℐ : erc1155.Erc1155.Trait Self := {
    erc1155.Erc1155.is_approved_for_all := is_approved_for_all;
    erc1155.Erc1155.balance_of := balance_of;
    erc1155.Erc1155.safe_transfer_from := safe_transfer_from;
    erc1155.Erc1155.safe_batch_transfer_from := safe_batch_transfer_from;
    erc1155.Erc1155.balance_of_batch := balance_of_batch;
    erc1155.Erc1155.set_approval_for_all := set_approval_for_all;
  }.
End Impl_erc1155_Erc1155_for_erc1155_Contract_t.
End Impl_erc1155_Erc1155_for_erc1155_Contract_t.

Module  Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract_t.
Section Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract_t.
  Definition Self : Set := erc1155.Contract.t.
  
  Parameter on_received :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        ltac:(erc1155.TokenId) ->
        ltac:(erc1155.Balance) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A).
  
  Global Instance AssociatedFunction_on_received :
    Notations.DoubleColon Self "on_received" := {
    Notations.double_colon := on_received;
  }.
  
  Parameter on_batch_received :
      (mut_ref Self) ->
        erc1155.AccountId.t ->
        erc1155.AccountId.t ->
        (alloc.vec.Vec.t ltac:(erc1155.TokenId) alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t ltac:(erc1155.Balance) alloc.vec.Vec.Default.A) ->
        (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A) ->
        M (alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A).
  
  Global Instance AssociatedFunction_on_batch_received :
    Notations.DoubleColon Self "on_batch_received" := {
    Notations.double_colon := on_batch_received;
  }.
  
  Global Instance ℐ : erc1155.Erc1155TokenReceiver.Trait Self := {
    erc1155.Erc1155TokenReceiver.on_received := on_received;
    erc1155.Erc1155TokenReceiver.on_batch_received := on_batch_received;
  }.
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract_t.
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract_t.
