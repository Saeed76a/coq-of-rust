(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_erc1155_Mapping_K_V.
Section Impl_core_default_Default_for_erc1155_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Mapping") [K; V].
  
  Parameter default : Ty.apply (Ty.path "erc1155::Mapping") [K; V].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc1155_Mapping_K_V.
End Impl_core_default_Default_for_erc1155_Mapping_K_V.

Module  Impl_erc1155_Mapping_K_V.
Section Impl_erc1155_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := Ty.apply (Ty.path "erc1155::Mapping") [K; V].
  
  Parameter contains :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Mapping") [K; V]])
        ->
        (Ty.apply (Ty.path "ref") [K]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_contains : Instance.t := {
    Notations.double_colon := contains;
  }.
  
  Parameter get :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Mapping") [K; V]])
        ->
        (Ty.apply (Ty.path "ref") [K]) ->
        Ty.apply (Ty.path "core::option::Option") [V].
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  Parameter insert :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "erc1155::Mapping") [K; V]])
        ->
        K ->
        V ->
        Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"].
  
  Definition AssociatedFunction_insert : Instance.t := {
    Notations.double_colon := insert;
  }.
  
  Parameter remove :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Mapping") [K; V]])
        ->
        K ->
        Ty.path "unit".
  
  Definition AssociatedFunction_remove : Instance.t := {
    Notations.double_colon := remove;
  }.
  
  Parameter size :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Mapping") [K; V]])
        ->
        K ->
        Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"].
  
  Definition AssociatedFunction_size : Instance.t := {
    Notations.double_colon := size;
  }.
  
  Parameter take :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Mapping") [K; V]])
        ->
        K ->
        Ty.apply (Ty.path "core::option::Option") [V].
  
  Definition AssociatedFunction_take : Instance.t := {
    Notations.double_colon := take;
  }.
End Impl_erc1155_Mapping_K_V.
End Impl_erc1155_Mapping_K_V.



Module  Impl_core_default_Default_for_erc1155_AccountId.
Section Impl_core_default_Default_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Parameter default : Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc1155_AccountId.
End Impl_core_default_Default_for_erc1155_AccountId.

Module  Impl_core_clone_Clone_for_erc1155_AccountId.
Section Impl_core_clone_Clone_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Parameter clone :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::AccountId") []]) ->
        Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_erc1155_AccountId.
End Impl_core_clone_Clone_for_erc1155_AccountId.

Module  Impl_core_marker_Copy_for_erc1155_AccountId.
Section Impl_core_marker_Copy_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_erc1155_AccountId.
End Impl_core_marker_Copy_for_erc1155_AccountId.

Module  Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
Section Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.

Module  Impl_core_cmp_PartialEq_for_erc1155_AccountId.
Section Impl_core_cmp_PartialEq_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Parameter eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::AccountId") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::AccountId") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_erc1155_AccountId.
End Impl_core_cmp_PartialEq_for_erc1155_AccountId.

Module  Impl_core_convert_From_array_u8_for_erc1155_AccountId.
Section Impl_core_convert_From_array_u8_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Parameter from :
      (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_array_u8_for_erc1155_AccountId.
End Impl_core_convert_From_array_u8_for_erc1155_AccountId.

Axiom Balance : Ty.path "u128".



Parameter zero_address : Ty.apply (Ty.path "erc1155::AccountId") [].

Parameter ON_ERC_1155_RECEIVED_SELECTOR :
    Ty.apply (Ty.path "array") [Ty.path "u8"].

Parameter _ON_ERC_1155_BATCH_RECEIVED_SELECTOR :
    Ty.apply (Ty.path "array") [Ty.path "u8"].

Axiom TokenId : Ty.path "u128".



Module  Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
Section Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error.

Module  Impl_core_cmp_PartialEq_for_erc1155_Error.
Section Impl_core_cmp_PartialEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Error") [].
  
  Parameter eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Error") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Error") []]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_erc1155_Error.
End Impl_core_cmp_PartialEq_for_erc1155_Error.

Module  Impl_core_marker_StructuralEq_for_erc1155_Error.
Section Impl_core_marker_StructuralEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_erc1155_Error.
End Impl_core_marker_StructuralEq_for_erc1155_Error.

Module  Impl_core_cmp_Eq_for_erc1155_Error.
Section Impl_core_cmp_Eq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Error") [].
  
  Parameter assert_receiver_is_total_eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Error") []]) ->
        Ty.tuple.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_erc1155_Error.
End Impl_core_cmp_Eq_for_erc1155_Error.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T; Ty.apply (Ty.path "erc1155::Error") []].

Module  Erc1155.
Section Erc1155.
  Class Trait (Self : Set) : Type := {
    safe_transfer_from :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.path "u128";
          Ty.path "u128";
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]);
    safe_batch_transfer_from :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]);
    balance_of :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.path "u128"]
        (Ty.path "u128");
    balance_of_batch :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "erc1155::AccountId") [];
              Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []]);
    set_approval_for_all :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.path "bool"]
        (Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]);
    is_approved_for_all :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") []]
        (Ty.path "bool");
  }.
  
End Erc1155.
End Erc1155.

Module  Erc1155TokenReceiver.
Section Erc1155TokenReceiver.
  Class Trait (Self : Set) : Type := {
    on_received :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.path "u128";
          Ty.path "u128";
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]);
    on_batch_received :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]);
  }.
  
End Erc1155TokenReceiver.
End Erc1155TokenReceiver.

Axiom Owner : Ty.apply (Ty.path "erc1155::AccountId") [].

Axiom Operator : Ty.apply (Ty.path "erc1155::AccountId") [].









Module  Impl_erc1155_Env.
Section Impl_erc1155_Env.
  Definition Self : Set := Ty.apply (Ty.path "erc1155::Env") [].
  
  Parameter caller :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Env") []]) ->
        Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  Parameter emit_event :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Env") []]) ->
        (Ty.apply (Ty.path "erc1155::Event") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
End Impl_erc1155_Env.
End Impl_erc1155_Env.



Module  Impl_core_default_Default_for_erc1155_Contract.
Section Impl_core_default_Default_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Contract") [].
  
  Parameter default : Ty.apply (Ty.path "erc1155::Contract") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc1155_Contract.
End Impl_core_default_Default_for_erc1155_Contract.

Module  Impl_erc1155_Contract.
Section Impl_erc1155_Contract.
  Definition Self : Set := Ty.apply (Ty.path "erc1155::Contract") [].
  
  Parameter init_env : Ty.apply (Ty.path "erc1155::Env") [].
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Contract") []]) ->
        Ty.apply (Ty.path "erc1155::Env") [].
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  Parameter new : Ty.apply (Ty.path "erc1155::Contract") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter create :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.path "u128") ->
        Ty.path "u128".
  
  Definition AssociatedFunction_create : Instance.t := {
    Notations.double_colon := create;
  }.
  
  Parameter mint :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.path "u128") ->
        (Ty.path "u128") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []].
  
  Definition AssociatedFunction_mint : Instance.t := {
    Notations.double_colon := mint;
  }.
  
  Parameter perform_transfer :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.path "u128") ->
        (Ty.path "u128") ->
        Ty.path "unit".
  
  Definition AssociatedFunction_perform_transfer : Instance.t := {
    Notations.double_colon := perform_transfer;
  }.
  
  Parameter transfer_acceptance_check :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.path "u128") ->
        (Ty.path "u128") ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_transfer_acceptance_check : Instance.t := {
    Notations.double_colon := transfer_acceptance_check;
  }.
End Impl_erc1155_Contract.
End Impl_erc1155_Contract.

Module  Impl_erc1155_Erc1155_for_erc1155_Contract.
Section Impl_erc1155_Erc1155_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Contract") [].
  
  Parameter is_approved_for_all :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Contract") []]) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_is_approved_for_all : Instance.t := {
    Notations.double_colon := is_approved_for_all;
  }.
  
  Parameter balance_of :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Contract") []]) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.path "u128") ->
        Ty.path "u128".
  
  Definition AssociatedFunction_balance_of : Instance.t := {
    Notations.double_colon := balance_of;
  }.
  
  Parameter safe_transfer_from :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.path "u128") ->
        (Ty.path "u128") ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []].
  
  Definition AssociatedFunction_safe_transfer_from : Instance.t := {
    Notations.double_colon := safe_transfer_from;
  }.
  
  Parameter safe_batch_transfer_from :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []].
  
  Definition AssociatedFunction_safe_batch_transfer_from : Instance.t := {
    Notations.double_colon := safe_batch_transfer_from;
  }.
  
  Parameter balance_of_batch :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Contract") []]) ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "erc1155::AccountId") [];
            Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []].
  
  Definition AssociatedFunction_balance_of_batch : Instance.t := {
    Notations.double_colon := balance_of_batch;
  }.
  
  Parameter set_approval_for_all :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.path "bool") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []].
  
  Definition AssociatedFunction_set_approval_for_all : Instance.t := {
    Notations.double_colon := set_approval_for_all;
  }.
  
  Definition ℐ : Instance.t := [("is_approved_for_all", is_approved_for_all);
    ("balance_of", balance_of);
    ("safe_transfer_from", safe_transfer_from);
    ("safe_batch_transfer_from", safe_batch_transfer_from);
    ("balance_of_batch", balance_of_batch);
    ("set_approval_for_all", set_approval_for_all)].
End Impl_erc1155_Erc1155_for_erc1155_Contract.
End Impl_erc1155_Erc1155_for_erc1155_Contract.

Module  Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
Section Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Contract") [].
  
  Parameter on_received :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.path "u128") ->
        (Ty.path "u128") ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []].
  
  Definition AssociatedFunction_on_received : Instance.t := {
    Notations.double_colon := on_received;
  }.
  
  Parameter on_batch_received :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc1155::Contract") []])
        ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply (Ty.path "erc1155::AccountId") []) ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []].
  
  Definition AssociatedFunction_on_batch_received : Instance.t := {
    Notations.double_colon := on_batch_received;
  }.
  
  Definition ℐ : Instance.t := [("on_received", on_received);
    ("on_batch_received", on_batch_received)].
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
