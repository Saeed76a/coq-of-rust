(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_erc721_Mapping_K_V.
Section Impl_core_default_Default_for_erc721_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::Mapping") [K; V].
  
  Parameter default : Ty.apply (Ty.path "erc721::Mapping") [K; V].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc721_Mapping_K_V.
End Impl_core_default_Default_for_erc721_Mapping_K_V.

Module  Impl_erc721_Mapping_K_V.
Section Impl_erc721_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := Ty.apply (Ty.path "erc721::Mapping") [K; V].
  
  Parameter contains :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Mapping") [K; V]])
        ->
        (Ty.apply (Ty.path "ref") [K]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_contains : Instance.t := {
    Notations.double_colon := contains;
  }.
  
  Parameter get :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Mapping") [K; V]])
        ->
        (Ty.apply (Ty.path "ref") [K]) ->
        Ty.apply (Ty.path "core::option::Option") [V].
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  Parameter insert :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "erc721::Mapping") [K; V]])
        ->
        K ->
        V ->
        Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"].
  
  Definition AssociatedFunction_insert : Instance.t := {
    Notations.double_colon := insert;
  }.
  
  Parameter remove :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Mapping") [K; V]])
        ->
        K ->
        Ty.path "unit".
  
  Definition AssociatedFunction_remove : Instance.t := {
    Notations.double_colon := remove;
  }.
  
  Parameter size :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Mapping") [K; V]])
        ->
        K ->
        Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"].
  
  Definition AssociatedFunction_size : Instance.t := {
    Notations.double_colon := size;
  }.
  
  Parameter take :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Mapping") [K; V]])
        ->
        K ->
        Ty.apply (Ty.path "core::option::Option") [V].
  
  Definition AssociatedFunction_take : Instance.t := {
    Notations.double_colon := take;
  }.
End Impl_erc721_Mapping_K_V.
End Impl_erc721_Mapping_K_V.



Module  Impl_core_default_Default_for_erc721_AccountId.
Section Impl_core_default_Default_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::AccountId") [].
  
  Parameter default : Ty.apply (Ty.path "erc721::AccountId") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc721_AccountId.
End Impl_core_default_Default_for_erc721_AccountId.

Module  Impl_core_clone_Clone_for_erc721_AccountId.
Section Impl_core_clone_Clone_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::AccountId") [].
  
  Parameter clone :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []]) ->
        Ty.apply (Ty.path "erc721::AccountId") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_erc721_AccountId.
End Impl_core_clone_Clone_for_erc721_AccountId.

Module  Impl_core_marker_Copy_for_erc721_AccountId.
Section Impl_core_marker_Copy_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_erc721_AccountId.
End Impl_core_marker_Copy_for_erc721_AccountId.

Module  Impl_core_marker_StructuralPartialEq_for_erc721_AccountId.
Section Impl_core_marker_StructuralPartialEq_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc721_AccountId.
End Impl_core_marker_StructuralPartialEq_for_erc721_AccountId.

Module  Impl_core_cmp_PartialEq_for_erc721_AccountId.
Section Impl_core_cmp_PartialEq_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::AccountId") [].
  
  Parameter eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_erc721_AccountId.
End Impl_core_cmp_PartialEq_for_erc721_AccountId.

Module  Impl_core_convert_From_array_u8_for_erc721_AccountId.
Section Impl_core_convert_From_array_u8_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::AccountId") [].
  
  Parameter from :
      (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.apply (Ty.path "erc721::AccountId") [].
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_array_u8_for_erc721_AccountId.
End Impl_core_convert_From_array_u8_for_erc721_AccountId.

Axiom Balance : Ty.path "u128".



Axiom TokenId : Ty.path "u32".



Module  Impl_core_default_Default_for_erc721_Erc721.
Section Impl_core_default_Default_for_erc721_Erc721.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::Erc721") [].
  
  Parameter default : Ty.apply (Ty.path "erc721::Erc721") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc721_Erc721.
End Impl_core_default_Default_for_erc721_Erc721.



Module  Impl_core_marker_StructuralPartialEq_for_erc721_Error.
Section Impl_core_marker_StructuralPartialEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc721_Error.
End Impl_core_marker_StructuralPartialEq_for_erc721_Error.

Module  Impl_core_cmp_PartialEq_for_erc721_Error.
Section Impl_core_cmp_PartialEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::Error") [].
  
  Parameter eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Error") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Error") []]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_erc721_Error.
End Impl_core_cmp_PartialEq_for_erc721_Error.

Module  Impl_core_marker_StructuralEq_for_erc721_Error.
Section Impl_core_marker_StructuralEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_erc721_Error.
End Impl_core_marker_StructuralEq_for_erc721_Error.

Module  Impl_core_cmp_Eq_for_erc721_Error.
Section Impl_core_cmp_Eq_for_erc721_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::Error") [].
  
  Parameter assert_receiver_is_total_eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Error") []]) ->
        Ty.tuple.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_erc721_Error.
End Impl_core_cmp_Eq_for_erc721_Error.

Module  Impl_core_clone_Clone_for_erc721_Error.
Section Impl_core_clone_Clone_for_erc721_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::Error") [].
  
  Parameter clone :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Error") []]) ->
        Ty.apply (Ty.path "erc721::Error") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_erc721_Error.
End Impl_core_clone_Clone_for_erc721_Error.

Module  Impl_core_marker_Copy_for_erc721_Error.
Section Impl_core_marker_Copy_for_erc721_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc721::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_erc721_Error.
End Impl_core_marker_Copy_for_erc721_Error.









Module  Impl_erc721_Env.
Section Impl_erc721_Env.
  Definition Self : Set := Ty.apply (Ty.path "erc721::Env") [].
  
  Parameter caller :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Env") []]) ->
        Ty.apply (Ty.path "erc721::AccountId") [].
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  Parameter emit_event :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Env") []]) ->
        (Ty.apply (Ty.path "erc721::Event") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
End Impl_erc721_Env.
End Impl_erc721_Env.

Module  Impl_erc721_Erc721.
Section Impl_erc721_Erc721.
  Definition Self : Set := Ty.apply (Ty.path "erc721::Erc721") [].
  
  Parameter init_env : Ty.apply (Ty.path "erc721::Env") [].
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        Ty.apply (Ty.path "erc721::Env") [].
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  Parameter new : Ty.apply (Ty.path "erc721::Erc721") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter balance_of_or_zero :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []])
        ->
        Ty.path "u32".
  
  Definition AssociatedFunction_balance_of_or_zero : Instance.t := {
    Notations.double_colon := balance_of_or_zero;
  }.
  
  Parameter clear_approval :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.path "u32") ->
        Ty.path "unit".
  
  Definition AssociatedFunction_clear_approval : Instance.t := {
    Notations.double_colon := clear_approval;
  }.
  
  Parameter approved_for_all :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_approved_for_all : Instance.t := {
    Notations.double_colon := approved_for_all;
  }.
  
  Parameter owner_of :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "erc721::AccountId") []].
  
  Definition AssociatedFunction_owner_of : Instance.t := {
    Notations.double_colon := owner_of;
  }.
  
  Parameter approved_or_owner :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "erc721::AccountId") []])
        ->
        (Ty.path "u32") ->
        Ty.path "bool".
  
  Definition AssociatedFunction_approved_or_owner : Instance.t := {
    Notations.double_colon := approved_or_owner;
  }.
  
  Parameter exists_ :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.path "u32") ->
        Ty.path "bool".
  
  Definition AssociatedFunction_exists_ : Instance.t := {
    Notations.double_colon := exists_;
  }.
  
  Parameter balance_of :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        Ty.path "u32".
  
  Definition AssociatedFunction_balance_of : Instance.t := {
    Notations.double_colon := balance_of;
  }.
  
  Parameter get_approved :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "erc721::AccountId") []].
  
  Definition AssociatedFunction_get_approved : Instance.t := {
    Notations.double_colon := get_approved;
  }.
  
  Parameter is_approved_for_all :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_is_approved_for_all : Instance.t := {
    Notations.double_colon := is_approved_for_all;
  }.
  
  Parameter approve_for_all :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        (Ty.path "bool") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_approve_for_all : Instance.t := {
    Notations.double_colon := approve_for_all;
  }.
  
  Parameter set_approval_for_all :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        (Ty.path "bool") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_set_approval_for_all : Instance.t := {
    Notations.double_colon := set_approval_for_all;
  }.
  
  Parameter approve_for :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []])
        ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_approve_for : Instance.t := {
    Notations.double_colon := approve_for;
  }.
  
  Parameter approve :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_approve : Instance.t := {
    Notations.double_colon := approve;
  }.
  
  Parameter remove_token_from :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []])
        ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_remove_token_from : Instance.t := {
    Notations.double_colon := remove_token_from;
  }.
  
  Parameter add_token_to :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []])
        ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_add_token_to : Instance.t := {
    Notations.double_colon := add_token_to;
  }.
  
  Parameter transfer_token_from :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []])
        ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc721::AccountId") []])
        ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_transfer_token_from : Instance.t := {
    Notations.double_colon := transfer_token_from;
  }.
  
  Parameter transfer :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_transfer : Instance.t := {
    Notations.double_colon := transfer;
  }.
  
  Parameter transfer_from :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        (Ty.apply (Ty.path "erc721::AccountId") []) ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_transfer_from : Instance.t := {
    Notations.double_colon := transfer_from;
  }.
  
  Parameter mint :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_mint : Instance.t := {
    Notations.double_colon := mint;
  }.
  
  Parameter burn :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc721::Erc721") []]) ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc721::Error") []].
  
  Definition AssociatedFunction_burn : Instance.t := {
    Notations.double_colon := burn;
  }.
End Impl_erc721_Erc721.
End Impl_erc721_Erc721.
