(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_erc20_Mapping_K_V.
Section Impl_core_default_Default_for_erc20_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "erc20::Mapping") [K; V].
  
  Parameter default : Ty.apply (Ty.path "erc20::Mapping") [K; V].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc20_Mapping_K_V.
End Impl_core_default_Default_for_erc20_Mapping_K_V.

Module  Impl_erc20_Mapping_K_V.
Section Impl_erc20_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := Ty.apply (Ty.path "erc20::Mapping") [K; V].
  
  Parameter get :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Mapping") [K; V]]) ->
        (Ty.apply (Ty.path "ref") [K]) ->
        Ty.apply (Ty.path "core::option::Option") [V].
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  Parameter insert :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "erc20::Mapping") [K; V]])
        ->
        K ->
        V ->
        Ty.path "unit".
  
  Definition AssociatedFunction_insert : Instance.t := {
    Notations.double_colon := insert;
  }.
End Impl_erc20_Mapping_K_V.
End Impl_erc20_Mapping_K_V.



Module  Impl_core_default_Default_for_erc20_AccountId.
Section Impl_core_default_Default_for_erc20_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc20::AccountId") [].
  
  Parameter default : Ty.apply (Ty.path "erc20::AccountId") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc20_AccountId.
End Impl_core_default_Default_for_erc20_AccountId.

Module  Impl_core_clone_Clone_for_erc20_AccountId.
Section Impl_core_clone_Clone_for_erc20_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc20::AccountId") [].
  
  Parameter clone :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::AccountId") []]) ->
        Ty.apply (Ty.path "erc20::AccountId") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_erc20_AccountId.
End Impl_core_clone_Clone_for_erc20_AccountId.

Module  Impl_core_marker_Copy_for_erc20_AccountId.
Section Impl_core_marker_Copy_for_erc20_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc20::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_erc20_AccountId.
End Impl_core_marker_Copy_for_erc20_AccountId.

Axiom Balance : Ty.path "u128".





Module  Impl_core_default_Default_for_erc20_Erc20.
Section Impl_core_default_Default_for_erc20_Erc20.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc20::Erc20") [].
  
  Parameter default : Ty.apply (Ty.path "erc20::Erc20") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc20_Erc20.
End Impl_core_default_Default_for_erc20_Erc20.









Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T; Ty.apply (Ty.path "erc20::Error") []].

Module  Impl_erc20_Env.
Section Impl_erc20_Env.
  Definition Self : Set := Ty.apply (Ty.path "erc20::Env") [].
  
  Parameter caller :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Env") []]) ->
        Ty.apply (Ty.path "erc20::AccountId") [].
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  Parameter emit_event :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Env") []]) ->
        (Ty.apply (Ty.path "erc20::Event") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
End Impl_erc20_Env.
End Impl_erc20_Env.

Module  Impl_erc20_Erc20.
Section Impl_erc20_Erc20.
  Definition Self : Set := Ty.apply (Ty.path "erc20::Erc20") [].
  
  Parameter init_env : Ty.apply (Ty.path "erc20::Env") [].
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        Ty.apply (Ty.path "erc20::Env") [].
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
End Impl_erc20_Erc20.
End Impl_erc20_Erc20.

Module  Impl_erc20_Erc20_2.
Section Impl_erc20_Erc20_2.
  Definition Self : Set := Ty.apply (Ty.path "erc20::Erc20") [].
  
  Parameter new : (Ty.path "u128") -> Ty.apply (Ty.path "erc20::Erc20") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter total_supply :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        Ty.path "u128".
  
  Definition AssociatedFunction_total_supply : Instance.t := {
    Notations.double_colon := total_supply;
  }.
  
  Parameter balance_of_impl :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::AccountId") []]) ->
        Ty.path "u128".
  
  Definition AssociatedFunction_balance_of_impl : Instance.t := {
    Notations.double_colon := balance_of_impl;
  }.
  
  Parameter balance_of :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        (Ty.apply (Ty.path "erc20::AccountId") []) ->
        Ty.path "u128".
  
  Definition AssociatedFunction_balance_of : Instance.t := {
    Notations.double_colon := balance_of;
  }.
  
  Parameter allowance_impl :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::AccountId") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::AccountId") []]) ->
        Ty.path "u128".
  
  Definition AssociatedFunction_allowance_impl : Instance.t := {
    Notations.double_colon := allowance_impl;
  }.
  
  Parameter allowance :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        (Ty.apply (Ty.path "erc20::AccountId") []) ->
        (Ty.apply (Ty.path "erc20::AccountId") []) ->
        Ty.path "u128".
  
  Definition AssociatedFunction_allowance : Instance.t := {
    Notations.double_colon := allowance;
  }.
  
  Parameter transfer_from_to :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::AccountId") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc20::AccountId") []]) ->
        (Ty.path "u128") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc20::Error") []].
  
  Definition AssociatedFunction_transfer_from_to : Instance.t := {
    Notations.double_colon := transfer_from_to;
  }.
  
  Parameter transfer :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        (Ty.apply (Ty.path "erc20::AccountId") []) ->
        (Ty.path "u128") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc20::Error") []].
  
  Definition AssociatedFunction_transfer : Instance.t := {
    Notations.double_colon := transfer;
  }.
  
  Parameter approve :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        (Ty.apply (Ty.path "erc20::AccountId") []) ->
        (Ty.path "u128") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc20::Error") []].
  
  Definition AssociatedFunction_approve : Instance.t := {
    Notations.double_colon := approve;
  }.
  
  Parameter transfer_from :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "erc20::Erc20") []]) ->
        (Ty.apply (Ty.path "erc20::AccountId") []) ->
        (Ty.apply (Ty.path "erc20::AccountId") []) ->
        (Ty.path "u128") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc20::Error") []].
  
  Definition AssociatedFunction_transfer_from : Instance.t := {
    Notations.double_colon := transfer_from;
  }.
End Impl_erc20_Erc20_2.
End Impl_erc20_Erc20_2.
