(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Error.
  Inductive t : Set :=
  .
End Error.

Parameter set_code_hash :
    forall {E : Set},
    (ref E) -> M (core.result.Result.t unit set_code_hash.Error.t).

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    count : u32.t;
  }.
  
  Definition Get_count :=
    Ref.map (fun α => Some α.(count)) (fun β α => Some (α <| count := β |>)).
End Incrementer.
End Incrementer.

Module  Impl_core_default_Default_for_set_code_hash_Incrementer_t.
Section Impl_core_default_Default_for_set_code_hash_Incrementer_t.
  Definition Self : Set := set_code_hash.Incrementer.t.
  
  Parameter default : M set_code_hash.Incrementer.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_set_code_hash_Incrementer_t.
End Impl_core_default_Default_for_set_code_hash_Incrementer_t.

Module  Impl_set_code_hash_Incrementer_t.
Section Impl_set_code_hash_Incrementer_t.
  Definition Self : Set := set_code_hash.Incrementer.t.
  
  Parameter new : M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  Parameter inc : (mut_ref Self) -> M unit.
  
  Global Instance AssociatedFunction_inc : Notations.DoubleColon Self "inc" := {
    Notations.double_colon := inc;
  }.
  
  Parameter get : (ref Self) -> M u32.t.
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  Parameter set_code : (mut_ref Self) -> (array u8.t) -> M unit.
  
  Global Instance AssociatedFunction_set_code :
    Notations.DoubleColon Self "set_code" := {
    Notations.double_colon := set_code;
  }.
End Impl_set_code_hash_Incrementer_t.
End Impl_set_code_hash_Incrementer_t.
