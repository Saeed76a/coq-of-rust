(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_contract_ref_AccountId.
Section Impl_core_default_Default_for_contract_ref_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "contract_ref::AccountId") [].
  
  Parameter default : Ty.apply (Ty.path "contract_ref::AccountId") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_contract_ref_AccountId.
End Impl_core_default_Default_for_contract_ref_AccountId.

Module  Impl_core_clone_Clone_for_contract_ref_AccountId.
Section Impl_core_clone_Clone_for_contract_ref_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "contract_ref::AccountId") [].
  
  Parameter clone :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "contract_ref::AccountId") []])
        ->
        Ty.apply (Ty.path "contract_ref::AccountId") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_contract_ref_AccountId.
End Impl_core_clone_Clone_for_contract_ref_AccountId.

Module  Impl_core_marker_Copy_for_contract_ref_AccountId.
Section Impl_core_marker_Copy_for_contract_ref_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "contract_ref::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_contract_ref_AccountId.
End Impl_core_marker_Copy_for_contract_ref_AccountId.

Axiom Balance : Ty.path "u128".

Axiom Hash : Ty.apply (Ty.path "array") [Ty.path "u8"].







Module  Impl_core_fmt_Debug_for_contract_ref_FlipperError.
Section Impl_core_fmt_Debug_for_contract_ref_FlipperError.
  Definition Self : Ty.t := Ty.apply (Ty.path "contract_ref::FlipperError") [].
  
  Parameter fmt :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "contract_ref::FlipperError") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_contract_ref_FlipperError.
End Impl_core_fmt_Debug_for_contract_ref_FlipperError.

Module  Impl_contract_ref_FlipperRef.
Section Impl_contract_ref_FlipperRef.
  Definition Self : Set := Ty.apply (Ty.path "contract_ref::FlipperRef") [].
  
  Parameter init_env : Ty.apply (Ty.path "contract_ref::Env") [].
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "contract_ref::FlipperRef") []])
        ->
        Ty.apply (Ty.path "contract_ref::Env") [].
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  Parameter new :
      (Ty.path "bool") -> Ty.apply (Ty.path "contract_ref::FlipperRef") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter new_default : Ty.apply (Ty.path "contract_ref::FlipperRef") [].
  
  Definition AssociatedFunction_new_default : Instance.t := {
    Notations.double_colon := new_default;
  }.
  
  Parameter try_new :
      (Ty.path "bool") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.apply (Ty.path "contract_ref::FlipperRef") [];
            Ty.apply (Ty.path "contract_ref::FlipperError") []].
  
  Definition AssociatedFunction_try_new : Instance.t := {
    Notations.double_colon := try_new;
  }.
  
  Parameter flip :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "contract_ref::FlipperRef") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_flip : Instance.t := {
    Notations.double_colon := flip;
  }.
  
  Parameter get :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "contract_ref::FlipperRef") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
End Impl_contract_ref_FlipperRef.
End Impl_contract_ref_FlipperRef.



Module  Impl_contract_ref_ContractRef.
Section Impl_contract_ref_ContractRef.
  Definition Self : Set := Ty.apply (Ty.path "contract_ref::ContractRef") [].
  
  Parameter new :
      (Ty.path "u32") ->
        (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.apply (Ty.path "contract_ref::ContractRef") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter try_new :
      (Ty.path "u32") ->
        (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        (Ty.path "bool") ->
        Ty.apply (Ty.path "contract_ref::ContractRef") [].
  
  Definition AssociatedFunction_try_new : Instance.t := {
    Notations.double_colon := try_new;
  }.
  
  Parameter flip :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "contract_ref::ContractRef") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_flip : Instance.t := {
    Notations.double_colon := flip;
  }.
  
  Parameter get :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "contract_ref::ContractRef") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
End Impl_contract_ref_ContractRef.
End Impl_contract_ref_ContractRef.
