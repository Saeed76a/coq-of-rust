(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_multisig_Mapping_K_V.
Section Impl_core_default_Default_for_multisig_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Mapping") [K; V].
  
  Parameter default : Ty.apply (Ty.path "multisig::Mapping") [K; V].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_multisig_Mapping_K_V.
End Impl_core_default_Default_for_multisig_Mapping_K_V.

Module  Impl_multisig_Mapping_K_V.
Section Impl_multisig_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := Ty.apply (Ty.path "multisig::Mapping") [K; V].
  
  Parameter contains :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Mapping") [K; V]])
        ->
        (Ty.apply (Ty.path "ref") [K]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_contains : Instance.t := {
    Notations.double_colon := contains;
  }.
  
  Parameter get :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Mapping") [K; V]])
        ->
        (Ty.apply (Ty.path "ref") [K]) ->
        Ty.apply (Ty.path "core::option::Option") [V].
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  Parameter insert :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Mapping") [K; V]])
        ->
        K ->
        V ->
        Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"].
  
  Definition AssociatedFunction_insert : Instance.t := {
    Notations.double_colon := insert;
  }.
  
  Parameter remove :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Mapping") [K; V]])
        ->
        K ->
        Ty.path "unit".
  
  Definition AssociatedFunction_remove : Instance.t := {
    Notations.double_colon := remove;
  }.
  
  Parameter size :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Mapping") [K; V]])
        ->
        K ->
        Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"].
  
  Definition AssociatedFunction_size : Instance.t := {
    Notations.double_colon := size;
  }.
  
  Parameter take :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Mapping") [K; V]])
        ->
        K ->
        Ty.apply (Ty.path "core::option::Option") [V].
  
  Definition AssociatedFunction_take : Instance.t := {
    Notations.double_colon := take;
  }.
End Impl_multisig_Mapping_K_V.
End Impl_multisig_Mapping_K_V.



Module  Impl_core_default_Default_for_multisig_AccountId.
Section Impl_core_default_Default_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Parameter default : Ty.apply (Ty.path "multisig::AccountId") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_multisig_AccountId.
End Impl_core_default_Default_for_multisig_AccountId.

Module  Impl_core_fmt_Debug_for_multisig_AccountId.
Section Impl_core_fmt_Debug_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Parameter fmt :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_multisig_AccountId.
End Impl_core_fmt_Debug_for_multisig_AccountId.

Module  Impl_core_clone_Clone_for_multisig_AccountId.
Section Impl_core_clone_Clone_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Parameter clone :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.apply (Ty.path "multisig::AccountId") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_multisig_AccountId.
End Impl_core_clone_Clone_for_multisig_AccountId.

Module  Impl_core_marker_Copy_for_multisig_AccountId.
Section Impl_core_marker_Copy_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_multisig_AccountId.
End Impl_core_marker_Copy_for_multisig_AccountId.

Module  Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.
Section Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.
End Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.

Module  Impl_core_cmp_PartialEq_for_multisig_AccountId.
Section Impl_core_cmp_PartialEq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Parameter eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_multisig_AccountId.
End Impl_core_cmp_PartialEq_for_multisig_AccountId.

Module  Impl_core_marker_StructuralEq_for_multisig_AccountId.
Section Impl_core_marker_StructuralEq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_multisig_AccountId.
End Impl_core_marker_StructuralEq_for_multisig_AccountId.

Module  Impl_core_cmp_Eq_for_multisig_AccountId.
Section Impl_core_cmp_Eq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Parameter assert_receiver_is_total_eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.tuple.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_multisig_AccountId.
End Impl_core_cmp_Eq_for_multisig_AccountId.

Module  Impl_core_cmp_PartialOrd_for_multisig_AccountId.
Section Impl_core_cmp_PartialOrd_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Parameter partial_cmp :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "core::cmp::Ordering") []].
  
  Definition AssociatedFunction_partial_cmp : Instance.t := {
    Notations.double_colon := partial_cmp;
  }.
  
  Definition ℐ : Instance.t := [("partial_cmp", partial_cmp);
    ("lt", lt);
    ("le", le);
    ("gt", gt);
    ("ge", ge)].
End Impl_core_cmp_PartialOrd_for_multisig_AccountId.
End Impl_core_cmp_PartialOrd_for_multisig_AccountId.

Module  Impl_core_cmp_Ord_for_multisig_AccountId.
Section Impl_core_cmp_Ord_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::AccountId") [].
  
  Parameter cmp :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.apply (Ty.path "core::cmp::Ordering") [].
  
  Definition AssociatedFunction_cmp : Instance.t := {
    Notations.double_colon := cmp;
  }.
  
  Definition ℐ : Instance.t := [("cmp", cmp);
    ("max", max);
    ("min", min);
    ("clamp", clamp)].
End Impl_core_cmp_Ord_for_multisig_AccountId.
End Impl_core_cmp_Ord_for_multisig_AccountId.

Axiom Balance : Ty.path "u128".



Parameter MAX_OWNERS : Ty.path "u32".

Axiom TransactionId : Ty.path "u32".

Parameter WRONG_TRANSACTION_ID : Ty.apply (Ty.path "ref") [Ty.path "str"].





Module  Impl_core_clone_Clone_for_multisig_ConfirmationStatus.
Section Impl_core_clone_Clone_for_multisig_ConfirmationStatus.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "multisig::ConfirmationStatus") [].
  
  Parameter clone :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "multisig::ConfirmationStatus") []])
        ->
        Ty.apply (Ty.path "multisig::ConfirmationStatus") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_multisig_ConfirmationStatus.
End Impl_core_clone_Clone_for_multisig_ConfirmationStatus.

Module  Impl_core_marker_Copy_for_multisig_ConfirmationStatus.
Section Impl_core_marker_Copy_for_multisig_ConfirmationStatus.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "multisig::ConfirmationStatus") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_multisig_ConfirmationStatus.
End Impl_core_marker_Copy_for_multisig_ConfirmationStatus.



Module  Impl_core_default_Default_for_multisig_Transaction.
Section Impl_core_default_Default_for_multisig_Transaction.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Transaction") [].
  
  Parameter default : Ty.apply (Ty.path "multisig::Transaction") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_multisig_Transaction.
End Impl_core_default_Default_for_multisig_Transaction.



Module  Impl_core_clone_Clone_for_multisig_Error.
Section Impl_core_clone_Clone_for_multisig_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Error") [].
  
  Parameter clone :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Error") []]) ->
        Ty.apply (Ty.path "multisig::Error") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_multisig_Error.
End Impl_core_clone_Clone_for_multisig_Error.

Module  Impl_core_marker_Copy_for_multisig_Error.
Section Impl_core_marker_Copy_for_multisig_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_multisig_Error.
End Impl_core_marker_Copy_for_multisig_Error.

Module  Impl_core_marker_StructuralPartialEq_for_multisig_Error.
Section Impl_core_marker_StructuralPartialEq_for_multisig_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_multisig_Error.
End Impl_core_marker_StructuralPartialEq_for_multisig_Error.

Module  Impl_core_cmp_PartialEq_for_multisig_Error.
Section Impl_core_cmp_PartialEq_for_multisig_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Error") [].
  
  Parameter eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Error") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Error") []]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_multisig_Error.
End Impl_core_cmp_PartialEq_for_multisig_Error.

Module  Impl_core_marker_StructuralEq_for_multisig_Error.
Section Impl_core_marker_StructuralEq_for_multisig_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_multisig_Error.
End Impl_core_marker_StructuralEq_for_multisig_Error.

Module  Impl_core_cmp_Eq_for_multisig_Error.
Section Impl_core_cmp_Eq_for_multisig_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Error") [].
  
  Parameter assert_receiver_is_total_eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Error") []]) ->
        Ty.tuple.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_multisig_Error.
End Impl_core_cmp_Eq_for_multisig_Error.



Module  Impl_core_default_Default_for_multisig_Transactions.
Section Impl_core_default_Default_for_multisig_Transactions.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Transactions") [].
  
  Parameter default : Ty.apply (Ty.path "multisig::Transactions") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_multisig_Transactions.
End Impl_core_default_Default_for_multisig_Transactions.



















Module  Impl_multisig_Env.
Section Impl_multisig_Env.
  Definition Self : Set := Ty.apply (Ty.path "multisig::Env") [].
  
  Parameter caller :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Env") []]) ->
        Ty.apply (Ty.path "multisig::AccountId") [].
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  Parameter emit_event :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Env") []]) ->
        (Ty.apply (Ty.path "multisig::Event") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
  
  Parameter transferred_value :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Env") []]) ->
        Ty.path "u128".
  
  Definition AssociatedFunction_transferred_value : Instance.t := {
    Notations.double_colon := transferred_value;
  }.
  
  Parameter account_id :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Env") []]) ->
        Ty.apply (Ty.path "multisig::AccountId") [].
  
  Definition AssociatedFunction_account_id : Instance.t := {
    Notations.double_colon := account_id;
  }.
End Impl_multisig_Env.
End Impl_multisig_Env.



Module  Impl_core_default_Default_for_multisig_Multisig.
Section Impl_core_default_Default_for_multisig_Multisig.
  Definition Self : Ty.t := Ty.apply (Ty.path "multisig::Multisig") [].
  
  Parameter default : Ty.apply (Ty.path "multisig::Multisig") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_multisig_Multisig.
End Impl_core_default_Default_for_multisig_Multisig.

Parameter ensure_requirement_is_valid :
    (Ty.path "u32") -> (Ty.path "u32") -> Ty.path "unit".

Module  Impl_multisig_Multisig.
Section Impl_multisig_Multisig.
  Definition Self : Set := Ty.apply (Ty.path "multisig::Multisig") [].
  
  Parameter init_env : Ty.apply (Ty.path "multisig::Env") [].
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Multisig") []]) ->
        Ty.apply (Ty.path "multisig::Env") [].
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  Parameter new :
      (Ty.path "u32") ->
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "multisig::AccountId") [];
            Ty.apply (Ty.path "alloc::alloc::Global") []])
        ->
        Ty.apply (Ty.path "multisig::Multisig") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter ensure_confirmed :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Multisig") []]) ->
        (Ty.path "u32") ->
        Ty.path "unit".
  
  Definition AssociatedFunction_ensure_confirmed : Instance.t := {
    Notations.double_colon := ensure_confirmed;
  }.
  
  Parameter ensure_transaction_exists :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Multisig") []]) ->
        (Ty.path "u32") ->
        Ty.path "unit".
  
  Definition AssociatedFunction_ensure_transaction_exists : Instance.t := {
    Notations.double_colon := ensure_transaction_exists;
  }.
  
  Parameter ensure_owner :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Multisig") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_ensure_owner : Instance.t := {
    Notations.double_colon := ensure_owner;
  }.
  
  Parameter ensure_caller_is_owner :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Multisig") []]) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_ensure_caller_is_owner : Instance.t := {
    Notations.double_colon := ensure_caller_is_owner;
  }.
  
  Parameter ensure_from_wallet :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Multisig") []]) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_ensure_from_wallet : Instance.t := {
    Notations.double_colon := ensure_from_wallet;
  }.
  
  Parameter ensure_no_owner :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Multisig") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_ensure_no_owner : Instance.t := {
    Notations.double_colon := ensure_no_owner;
  }.
  
  Parameter add_owner :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.apply (Ty.path "multisig::AccountId") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_add_owner : Instance.t := {
    Notations.double_colon := add_owner;
  }.
  
  Parameter owner_index :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::Multisig") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.path "u32".
  
  Definition AssociatedFunction_owner_index : Instance.t := {
    Notations.double_colon := owner_index;
  }.
  
  Parameter clean_owner_confirmations :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "multisig::AccountId") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_clean_owner_confirmations : Instance.t := {
    Notations.double_colon := clean_owner_confirmations;
  }.
  
  Parameter remove_owner :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.apply (Ty.path "multisig::AccountId") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_remove_owner : Instance.t := {
    Notations.double_colon := remove_owner;
  }.
  
  Parameter replace_owner :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.apply (Ty.path "multisig::AccountId") []) ->
        (Ty.apply (Ty.path "multisig::AccountId") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_replace_owner : Instance.t := {
    Notations.double_colon := replace_owner;
  }.
  
  Parameter change_requirement :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.path "u32") ->
        Ty.path "unit".
  
  Definition AssociatedFunction_change_requirement : Instance.t := {
    Notations.double_colon := change_requirement;
  }.
  
  Parameter confirm_by_caller :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.apply (Ty.path "multisig::AccountId") []) ->
        (Ty.path "u32") ->
        Ty.apply (Ty.path "multisig::ConfirmationStatus") [].
  
  Definition AssociatedFunction_confirm_by_caller : Instance.t := {
    Notations.double_colon := confirm_by_caller;
  }.
  
  Parameter submit_transaction :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.apply (Ty.path "multisig::Transaction") []) ->
        Ty.tuple
          (Ty.path "u32")
          (Ty.apply (Ty.path "multisig::ConfirmationStatus") []).
  
  Definition AssociatedFunction_submit_transaction : Instance.t := {
    Notations.double_colon := submit_transaction;
  }.
  
  Parameter take_transaction :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "multisig::Transaction") []].
  
  Definition AssociatedFunction_take_transaction : Instance.t := {
    Notations.double_colon := take_transaction;
  }.
  
  Parameter cancel_transaction :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.path "u32") ->
        Ty.path "unit".
  
  Definition AssociatedFunction_cancel_transaction : Instance.t := {
    Notations.double_colon := cancel_transaction;
  }.
  
  Parameter confirm_transaction :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.path "u32") ->
        Ty.apply (Ty.path "multisig::ConfirmationStatus") [].
  
  Definition AssociatedFunction_confirm_transaction : Instance.t := {
    Notations.double_colon := confirm_transaction;
  }.
  
  Parameter revoke_confirmation :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.path "u32") ->
        Ty.path "unit".
  
  Definition AssociatedFunction_revoke_confirmation : Instance.t := {
    Notations.double_colon := revoke_confirmation;
  }.
  
  Parameter invoke_transaction :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "multisig::Error") []].
  
  Definition AssociatedFunction_invoke_transaction : Instance.t := {
    Notations.double_colon := invoke_transaction;
  }.
  
  Parameter eval_transaction :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "multisig::Multisig") []])
        ->
        (Ty.path "u32") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []];
            Ty.apply (Ty.path "multisig::Error") []].
  
  Definition AssociatedFunction_eval_transaction : Instance.t := {
    Notations.double_colon := eval_transaction;
  }.
End Impl_multisig_Multisig.
End Impl_multisig_Multisig.
