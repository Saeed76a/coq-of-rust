(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_custom_environment_AccountId.
Section Impl_core_default_Default_for_custom_environment_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "custom_environment::AccountId") [].
  
  Parameter default : Ty.apply (Ty.path "custom_environment::AccountId") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_custom_environment_AccountId.
End Impl_core_default_Default_for_custom_environment_AccountId.

Module  Impl_core_clone_Clone_for_custom_environment_AccountId.
Section Impl_core_clone_Clone_for_custom_environment_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "custom_environment::AccountId") [].
  
  Parameter clone :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "custom_environment::AccountId") []])
        ->
        Ty.apply (Ty.path "custom_environment::AccountId") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_custom_environment_AccountId.
End Impl_core_clone_Clone_for_custom_environment_AccountId.

Module  Impl_core_marker_Copy_for_custom_environment_AccountId.
Section Impl_core_marker_Copy_for_custom_environment_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "custom_environment::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_custom_environment_AccountId.
End Impl_core_marker_Copy_for_custom_environment_AccountId.

Axiom Balance : Ty.path "u128".





Module  Impl_core_default_Default_for_custom_environment_Topics.
Section Impl_core_default_Default_for_custom_environment_Topics.
  Definition Self : Ty.t := Ty.apply (Ty.path "custom_environment::Topics") [].
  
  Parameter default : Ty.apply (Ty.path "custom_environment::Topics") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_custom_environment_Topics.
End Impl_core_default_Default_for_custom_environment_Topics.



Module  Impl_core_default_Default_for_custom_environment_EventWithTopics.
Section Impl_core_default_Default_for_custom_environment_EventWithTopics.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "custom_environment::EventWithTopics") [].
  
  Parameter default :
      Ty.apply (Ty.path "custom_environment::EventWithTopics") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_custom_environment_EventWithTopics.
End Impl_core_default_Default_for_custom_environment_EventWithTopics.



Module  Impl_custom_environment_Env.
Section Impl_custom_environment_Env.
  Definition Self : Set := Ty.apply (Ty.path "custom_environment::Env") [].
  
  Parameter caller :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "custom_environment::Env") []])
        ->
        Ty.apply (Ty.path "custom_environment::AccountId") [].
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  Parameter emit_event :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "custom_environment::Env") []])
        ->
        (Ty.apply (Ty.path "custom_environment::Event") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
End Impl_custom_environment_Env.
End Impl_custom_environment_Env.

Module  Impl_custom_environment_Topics.
Section Impl_custom_environment_Topics.
  Definition Self : Set := Ty.apply (Ty.path "custom_environment::Topics") [].
  
  Parameter init_env : Ty.apply (Ty.path "custom_environment::Env") [].
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "custom_environment::Topics") []])
        ->
        Ty.apply (Ty.path "custom_environment::Env") [].
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  Parameter new : Ty.apply (Ty.path "custom_environment::Topics") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter trigger :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "custom_environment::Topics") []])
        ->
        Ty.path "unit".
  
  Definition AssociatedFunction_trigger : Instance.t := {
    Notations.double_colon := trigger;
  }.
End Impl_custom_environment_Topics.
End Impl_custom_environment_Topics.
