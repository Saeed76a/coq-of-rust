(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_payment_channel_AccountId.
Section Impl_core_default_Default_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Parameter default : Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_payment_channel_AccountId.
End Impl_core_default_Default_for_payment_channel_AccountId.

Module  Impl_core_clone_Clone_for_payment_channel_AccountId.
Section Impl_core_clone_Clone_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Parameter clone :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::AccountId") []])
        ->
        Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_payment_channel_AccountId.
End Impl_core_clone_Clone_for_payment_channel_AccountId.

Module  Impl_core_marker_Copy_for_payment_channel_AccountId.
Section Impl_core_marker_Copy_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_payment_channel_AccountId.
End Impl_core_marker_Copy_for_payment_channel_AccountId.

Module  Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId.
Section Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId.

Module  Impl_core_cmp_PartialEq_for_payment_channel_AccountId.
Section Impl_core_cmp_PartialEq_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Parameter eq :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::AccountId") []])
        ->
        (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::AccountId") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_payment_channel_AccountId.
End Impl_core_cmp_PartialEq_for_payment_channel_AccountId.

Module  Impl_core_marker_StructuralEq_for_payment_channel_AccountId.
Section Impl_core_marker_StructuralEq_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_payment_channel_AccountId.
End Impl_core_marker_StructuralEq_for_payment_channel_AccountId.

Module  Impl_core_cmp_Eq_for_payment_channel_AccountId.
Section Impl_core_cmp_Eq_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Parameter assert_receiver_is_total_eq :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::AccountId") []])
        ->
        Ty.tuple.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_payment_channel_AccountId.
End Impl_core_cmp_Eq_for_payment_channel_AccountId.

Module  Impl_core_convert_From_array_u8_for_payment_channel_AccountId.
Section Impl_core_convert_From_array_u8_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Parameter from :
      (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_array_u8_for_payment_channel_AccountId.
End Impl_core_convert_From_array_u8_for_payment_channel_AccountId.

Axiom Balance : Ty.path "u128".

Axiom Timestamp : Ty.path "u64".







Module  Impl_core_marker_StructuralPartialEq_for_payment_channel_Error.
Section Impl_core_marker_StructuralPartialEq_for_payment_channel_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_payment_channel_Error.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_Error.

Module  Impl_core_cmp_PartialEq_for_payment_channel_Error.
Section Impl_core_cmp_PartialEq_for_payment_channel_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Error") [].
  
  Parameter eq :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::Error") []])
        ->
        (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::Error") []])
        ->
        Ty.path "bool".
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_payment_channel_Error.
End Impl_core_cmp_PartialEq_for_payment_channel_Error.

Module  Impl_core_marker_StructuralEq_for_payment_channel_Error.
Section Impl_core_marker_StructuralEq_for_payment_channel_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_payment_channel_Error.
End Impl_core_marker_StructuralEq_for_payment_channel_Error.

Module  Impl_core_cmp_Eq_for_payment_channel_Error.
Section Impl_core_cmp_Eq_for_payment_channel_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Error") [].
  
  Parameter assert_receiver_is_total_eq :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::Error") []])
        ->
        Ty.tuple.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_payment_channel_Error.
End Impl_core_cmp_Eq_for_payment_channel_Error.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T; Ty.apply (Ty.path "payment_channel::Error") []].





Module  Impl_payment_channel_Env.
Section Impl_payment_channel_Env.
  Definition Self : Set := Ty.apply (Ty.path "payment_channel::Env") [].
  
  Parameter caller :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "payment_channel::Env") []])
        ->
        Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  Parameter emit_event :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "payment_channel::Env") []])
        ->
        (Ty.apply (Ty.path "payment_channel::Event") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
  
  Parameter terminate_contract :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "payment_channel::Env") []])
        ->
        (Ty.apply (Ty.path "payment_channel::AccountId") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_terminate_contract : Instance.t := {
    Notations.double_colon := terminate_contract;
  }.
  
  Parameter transfer :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "payment_channel::Env") []])
        ->
        (Ty.apply (Ty.path "payment_channel::AccountId") []) ->
        (Ty.path "u128") ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []].
  
  Definition AssociatedFunction_transfer : Instance.t := {
    Notations.double_colon := transfer;
  }.
  
  Parameter block_timestamp :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "payment_channel::Env") []])
        ->
        Ty.path "u64".
  
  Definition AssociatedFunction_block_timestamp : Instance.t := {
    Notations.double_colon := block_timestamp;
  }.
  
  Parameter balance :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "payment_channel::Env") []])
        ->
        Ty.path "u128".
  
  Definition AssociatedFunction_balance : Instance.t := {
    Notations.double_colon := balance;
  }.
  
  Parameter account_id :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "payment_channel::Env") []])
        ->
        Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition AssociatedFunction_account_id : Instance.t := {
    Notations.double_colon := account_id;
  }.
End Impl_payment_channel_Env.
End Impl_payment_channel_Env.

Module  HashOutput.
Section HashOutput.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
    ℒ_0 :: core.default.Default.Trait Type_;
  }.
  
  Definition Method_Type_ `(Trait) : Instance.t := {
    Notations.double_colon_type := Type_;
  }.
End HashOutput.
End HashOutput.

Module  CryptoHash.
Section CryptoHash.
  Class Trait (Self : Set) : Type := {
    hash :
      Ty.function
        [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "slice") [Ty.path "u8"]];
          Ty.apply (Ty.path "mut_ref") [_]]
        (Ty.path "unit");
  }.
  
End CryptoHash.
End CryptoHash.

Parameter hash_encoded :
    forall {H T : Set},
    (Ty.apply (Ty.path "ref") [T]) ->
      (Ty.apply (Ty.path "mut_ref") [_]) ->
      Ty.path "unit".

Parameter ecdsa_recover :
    (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "array") [Ty.path "u8"]]) ->
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "array") [Ty.path "u8"]]) ->
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "array") [Ty.path "u8"]])
      ->
      Ty.apply
        (Ty.path "core::result::Result")
        [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []].









Module  Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256.
Section Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Sha2x256") [].
  
  Definition Type_ : Set := Ty.apply (Ty.path "array") [Ty.path "u8"].
  
  Definition ℐ : Instance.t := [("Type_", Type_)].
End Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256.
End Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Keccak256.
Section Impl_payment_channel_HashOutput_for_payment_channel_Keccak256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Keccak256") [].
  
  Definition Type_ : Set := Ty.apply (Ty.path "array") [Ty.path "u8"].
  
  Definition ℐ : Instance.t := [("Type_", Type_)].
End Impl_payment_channel_HashOutput_for_payment_channel_Keccak256.
End Impl_payment_channel_HashOutput_for_payment_channel_Keccak256.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256.
Section Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Blake2x256") [].
  
  Definition Type_ : Set := Ty.apply (Ty.path "array") [Ty.path "u8"].
  
  Definition ℐ : Instance.t := [("Type_", Type_)].
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128.
Section Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Blake2x128") [].
  
  Definition Type_ : Set := Ty.apply (Ty.path "array") [Ty.path "u8"].
  
  Definition ℐ : Instance.t := [("Type_", Type_)].
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Sha2x256") [].
  
  Parameter hash :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "slice") [Ty.path "u8"]]) ->
        (Ty.apply (Ty.path "mut_ref") [_]) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_hash : Instance.t := {
    Notations.double_colon := hash;
  }.
  
  Definition ℐ : Instance.t := [("hash", hash)].
End Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256.
End Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Keccak256") [].
  
  Parameter hash :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "slice") [Ty.path "u8"]]) ->
        (Ty.apply (Ty.path "mut_ref") [_]) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_hash : Instance.t := {
    Notations.double_colon := hash;
  }.
  
  Definition ℐ : Instance.t := [("hash", hash)].
End Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256.
End Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Blake2x256") [].
  
  Parameter hash :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "slice") [Ty.path "u8"]]) ->
        (Ty.apply (Ty.path "mut_ref") [_]) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_hash : Instance.t := {
    Notations.double_colon := hash;
  }.
  
  Definition ℐ : Instance.t := [("hash", hash)].
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Blake2x128") [].
  
  Parameter hash :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "slice") [Ty.path "u8"]]) ->
        (Ty.apply (Ty.path "mut_ref") [_]) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_hash : Instance.t := {
    Notations.double_colon := hash;
  }.
  
  Definition ℐ : Instance.t := [("hash", hash)].
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128.

Module  Impl_payment_channel_PaymentChannel.
Section Impl_payment_channel_PaymentChannel.
  Definition Self : Set :=
    Ty.apply (Ty.path "payment_channel::PaymentChannel") [].
  
  Parameter init_env : Ty.apply (Ty.path "payment_channel::Env") [].
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  Parameter env :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.apply (Ty.path "payment_channel::Env") [].
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  Parameter is_signature_valid :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        (Ty.path "u128") ->
        (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.path "bool".
  
  Definition AssociatedFunction_is_signature_valid : Instance.t := {
    Notations.double_colon := is_signature_valid;
  }.
  
  Parameter new :
      (Ty.apply (Ty.path "payment_channel::AccountId") []) ->
        (Ty.path "u64") ->
        Ty.apply (Ty.path "payment_channel::PaymentChannel") [].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter close_inner :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        (Ty.path "u128") ->
        (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []].
  
  Definition AssociatedFunction_close_inner : Instance.t := {
    Notations.double_colon := close_inner;
  }.
  
  Parameter close :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        (Ty.path "u128") ->
        (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []].
  
  Definition AssociatedFunction_close : Instance.t := {
    Notations.double_colon := close;
  }.
  
  Parameter start_sender_close :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []].
  
  Definition AssociatedFunction_start_sender_close : Instance.t := {
    Notations.double_colon := start_sender_close;
  }.
  
  Parameter claim_timeout :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []].
  
  Definition AssociatedFunction_claim_timeout : Instance.t := {
    Notations.double_colon := claim_timeout;
  }.
  
  Parameter withdraw :
      (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        (Ty.path "u128") ->
        (Ty.apply (Ty.path "array") [Ty.path "u8"]) ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []].
  
  Definition AssociatedFunction_withdraw : Instance.t := {
    Notations.double_colon := withdraw;
  }.
  
  Parameter get_sender :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition AssociatedFunction_get_sender : Instance.t := {
    Notations.double_colon := get_sender;
  }.
  
  Parameter get_recipient :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition AssociatedFunction_get_recipient : Instance.t := {
    Notations.double_colon := get_recipient;
  }.
  
  Parameter get_expiration :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.apply (Ty.path "core::option::Option") [Ty.path "u64"].
  
  Definition AssociatedFunction_get_expiration : Instance.t := {
    Notations.double_colon := get_expiration;
  }.
  
  Parameter get_withdrawn :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.path "u128".
  
  Definition AssociatedFunction_get_withdrawn : Instance.t := {
    Notations.double_colon := get_withdrawn;
  }.
  
  Parameter get_close_duration :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.path "u64".
  
  Definition AssociatedFunction_get_close_duration : Instance.t := {
    Notations.double_colon := get_close_duration;
  }.
  
  Parameter get_balance :
      (Ty.apply
          (Ty.path "ref")
          [Ty.apply (Ty.path "payment_channel::PaymentChannel") []])
        ->
        Ty.path "u128".
  
  Definition AssociatedFunction_get_balance : Instance.t := {
    Notations.double_colon := get_balance;
  }.
End Impl_payment_channel_PaymentChannel.
End Impl_payment_channel_PaymentChannel.
