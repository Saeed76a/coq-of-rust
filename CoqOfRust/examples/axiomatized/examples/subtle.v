(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_marker_Copy_for_subtle_Choice.
Section Impl_core_marker_Copy_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_subtle_Choice.
End Impl_core_marker_Copy_for_subtle_Choice.

Module  Impl_core_clone_Clone_for_subtle_Choice.
Section Impl_core_clone_Clone_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter clone :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_subtle_Choice.
End Impl_core_clone_Clone_for_subtle_Choice.

Module  Impl_core_fmt_Debug_for_subtle_Choice.
Section Impl_core_fmt_Debug_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter fmt :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_subtle_Choice.
End Impl_core_fmt_Debug_for_subtle_Choice.

Module  Impl_subtle_Choice.
Section Impl_subtle_Choice.
  Definition Self : Set := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter unwrap_u8 :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        Ty.path "u8".
  
  Definition AssociatedFunction_unwrap_u8 : Instance.t := {
    Notations.double_colon := unwrap_u8;
  }.
End Impl_subtle_Choice.
End Impl_subtle_Choice.

Module  Impl_core_convert_From_subtle_Choice_for_bool.
Section Impl_core_convert_From_subtle_Choice_for_bool.
  Definition Self : Ty.t := Ty.path "bool".
  
  Parameter from : (Ty.apply (Ty.path "subtle::Choice") []) -> Ty.path "bool".
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_subtle_Choice_for_bool.
End Impl_core_convert_From_subtle_Choice_for_bool.

Module  Impl_core_ops_bit_BitAnd_for_subtle_Choice.
Section Impl_core_ops_bit_BitAnd_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition Output : Set := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter bitand :
      (Ty.apply (Ty.path "subtle::Choice") []) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_bitand : Instance.t := {
    Notations.double_colon := bitand;
  }.
  
  Definition ℐ : Instance.t := [("Output", Output); ("bitand", bitand)].
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.

Module  Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
Section Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter bitand_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_bitand_assign : Instance.t := {
    Notations.double_colon := bitand_assign;
  }.
  
  Definition ℐ : Instance.t := [("bitand_assign", bitand_assign)].
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.

Module  Impl_core_ops_bit_BitOr_for_subtle_Choice.
Section Impl_core_ops_bit_BitOr_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition Output : Set := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter bitor :
      (Ty.apply (Ty.path "subtle::Choice") []) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_bitor : Instance.t := {
    Notations.double_colon := bitor;
  }.
  
  Definition ℐ : Instance.t := [("Output", Output); ("bitor", bitor)].
End Impl_core_ops_bit_BitOr_for_subtle_Choice.
End Impl_core_ops_bit_BitOr_for_subtle_Choice.

Module  Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
Section Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter bitor_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_bitor_assign : Instance.t := {
    Notations.double_colon := bitor_assign;
  }.
  
  Definition ℐ : Instance.t := [("bitor_assign", bitor_assign)].
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.

Module  Impl_core_ops_bit_BitXor_for_subtle_Choice.
Section Impl_core_ops_bit_BitXor_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition Output : Set := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter bitxor :
      (Ty.apply (Ty.path "subtle::Choice") []) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_bitxor : Instance.t := {
    Notations.double_colon := bitxor;
  }.
  
  Definition ℐ : Instance.t := [("Output", Output); ("bitxor", bitxor)].
End Impl_core_ops_bit_BitXor_for_subtle_Choice.
End Impl_core_ops_bit_BitXor_for_subtle_Choice.

Module  Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
Section Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter bitxor_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_bitxor_assign : Instance.t := {
    Notations.double_colon := bitxor_assign;
  }.
  
  Definition ℐ : Instance.t := [("bitxor_assign", bitxor_assign)].
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.

Module  Impl_core_ops_bit_Not_for_subtle_Choice.
Section Impl_core_ops_bit_Not_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition Output : Set := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter not :
      (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_not : Instance.t := {
    Notations.double_colon := not;
  }.
  
  Definition ℐ : Instance.t := [("Output", Output); ("not", not)].
End Impl_core_ops_bit_Not_for_subtle_Choice.
End Impl_core_ops_bit_Not_for_subtle_Choice.

Parameter black_box : (Ty.path "u8") -> Ty.path "u8".

Module  Impl_core_convert_From_u8_for_subtle_Choice.
Section Impl_core_convert_From_u8_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter from : (Ty.path "u8") -> Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_u8_for_subtle_Choice.
End Impl_core_convert_From_u8_for_subtle_Choice.

Module  ConstantTimeEq.
Section ConstantTimeEq.
  Class Trait (Self : Set) : Type := {
    ct_eq :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]; Ty.apply (Ty.path "ref") [Self]]
        (Ty.apply (Ty.path "subtle::Choice") []);
  }.
  
End ConstantTimeEq.
End ConstantTimeEq.

Module  Impl_subtle_ConstantTimeEq_for_slice_T.
Section Impl_subtle_ConstantTimeEq_for_slice_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "slice") [T].
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "slice") [T]]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "slice") [T]]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_slice_T.
End Impl_subtle_ConstantTimeEq_for_slice_T.

Module  Impl_subtle_ConstantTimeEq_for_subtle_Choice.
Section Impl_subtle_ConstantTimeEq_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.

Module  Impl_subtle_ConstantTimeEq_for_u8.
Section Impl_subtle_ConstantTimeEq_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "u8"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u8"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_u8.
End Impl_subtle_ConstantTimeEq_for_u8.

Module  Impl_subtle_ConstantTimeEq_for_i8.
Section Impl_subtle_ConstantTimeEq_for_i8.
  Definition Self : Ty.t := Ty.path "i8".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "i8"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i8"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_i8.
End Impl_subtle_ConstantTimeEq_for_i8.

Module  Impl_subtle_ConstantTimeEq_for_u16.
Section Impl_subtle_ConstantTimeEq_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "u16"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u16"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_u16.
End Impl_subtle_ConstantTimeEq_for_u16.

Module  Impl_subtle_ConstantTimeEq_for_i16.
Section Impl_subtle_ConstantTimeEq_for_i16.
  Definition Self : Ty.t := Ty.path "i16".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "i16"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i16"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_i16.
End Impl_subtle_ConstantTimeEq_for_i16.

Module  Impl_subtle_ConstantTimeEq_for_u32.
Section Impl_subtle_ConstantTimeEq_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "u32"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u32"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_u32.
End Impl_subtle_ConstantTimeEq_for_u32.

Module  Impl_subtle_ConstantTimeEq_for_i32.
Section Impl_subtle_ConstantTimeEq_for_i32.
  Definition Self : Ty.t := Ty.path "i32".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "i32"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i32"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_i32.
End Impl_subtle_ConstantTimeEq_for_i32.

Module  Impl_subtle_ConstantTimeEq_for_u64.
Section Impl_subtle_ConstantTimeEq_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "u64"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u64"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_u64.
End Impl_subtle_ConstantTimeEq_for_u64.

Module  Impl_subtle_ConstantTimeEq_for_i64.
Section Impl_subtle_ConstantTimeEq_for_i64.
  Definition Self : Ty.t := Ty.path "i64".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "i64"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i64"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_i64.
End Impl_subtle_ConstantTimeEq_for_i64.

Module  Impl_subtle_ConstantTimeEq_for_usize.
Section Impl_subtle_ConstantTimeEq_for_usize.
  Definition Self : Ty.t := Ty.path "usize".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "usize"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "usize"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_usize.
End Impl_subtle_ConstantTimeEq_for_usize.

Module  Impl_subtle_ConstantTimeEq_for_isize.
Section Impl_subtle_ConstantTimeEq_for_isize.
  Definition Self : Ty.t := Ty.path "isize".
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.path "isize"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "isize"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_isize.
End Impl_subtle_ConstantTimeEq_for_isize.

Module  ConditionallySelectable.
Section ConditionallySelectable.
  Class Trait (Self : Set) : Type := {
    conditional_select :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "subtle::Choice") []]
        Self;
  }.
  
End ConditionallySelectable.
End ConditionallySelectable.

Module  Impl_subtle_ConditionallySelectable_for_u8.
Section Impl_subtle_ConditionallySelectable_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.path "u8"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u8"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "u8".
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "u8"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u8"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_assign : Instance.t := {
    Notations.double_colon := conditional_assign;
  }.
  
  Parameter conditional_swap :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "u8"]) ->
        (Ty.apply (Ty.path "mut_ref") [Ty.path "u8"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_swap : Instance.t := {
    Notations.double_colon := conditional_swap;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u8.
End Impl_subtle_ConditionallySelectable_for_u8.

Module  Impl_subtle_ConditionallySelectable_for_i8.
Section Impl_subtle_ConditionallySelectable_for_i8.
  Definition Self : Ty.t := Ty.path "i8".
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.path "i8"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i8"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "i8".
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "i8"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i8"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_assign : Instance.t := {
    Notations.double_colon := conditional_assign;
  }.
  
  Parameter conditional_swap :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "i8"]) ->
        (Ty.apply (Ty.path "mut_ref") [Ty.path "i8"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_swap : Instance.t := {
    Notations.double_colon := conditional_swap;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i8.
End Impl_subtle_ConditionallySelectable_for_i8.

Module  Impl_subtle_ConditionallySelectable_for_u16.
Section Impl_subtle_ConditionallySelectable_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.path "u16"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u16"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "u16".
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "u16"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u16"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_assign : Instance.t := {
    Notations.double_colon := conditional_assign;
  }.
  
  Parameter conditional_swap :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "u16"]) ->
        (Ty.apply (Ty.path "mut_ref") [Ty.path "u16"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_swap : Instance.t := {
    Notations.double_colon := conditional_swap;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u16.
End Impl_subtle_ConditionallySelectable_for_u16.

Module  Impl_subtle_ConditionallySelectable_for_i16.
Section Impl_subtle_ConditionallySelectable_for_i16.
  Definition Self : Ty.t := Ty.path "i16".
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.path "i16"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i16"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "i16".
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "i16"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i16"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_assign : Instance.t := {
    Notations.double_colon := conditional_assign;
  }.
  
  Parameter conditional_swap :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "i16"]) ->
        (Ty.apply (Ty.path "mut_ref") [Ty.path "i16"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_swap : Instance.t := {
    Notations.double_colon := conditional_swap;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i16.
End Impl_subtle_ConditionallySelectable_for_i16.

Module  Impl_subtle_ConditionallySelectable_for_u32.
Section Impl_subtle_ConditionallySelectable_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.path "u32"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u32"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "u32".
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "u32"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u32"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_assign : Instance.t := {
    Notations.double_colon := conditional_assign;
  }.
  
  Parameter conditional_swap :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "u32"]) ->
        (Ty.apply (Ty.path "mut_ref") [Ty.path "u32"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_swap : Instance.t := {
    Notations.double_colon := conditional_swap;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u32.
End Impl_subtle_ConditionallySelectable_for_u32.

Module  Impl_subtle_ConditionallySelectable_for_i32.
Section Impl_subtle_ConditionallySelectable_for_i32.
  Definition Self : Ty.t := Ty.path "i32".
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.path "i32"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i32"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "i32".
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "i32"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i32"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_assign : Instance.t := {
    Notations.double_colon := conditional_assign;
  }.
  
  Parameter conditional_swap :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "i32"]) ->
        (Ty.apply (Ty.path "mut_ref") [Ty.path "i32"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_swap : Instance.t := {
    Notations.double_colon := conditional_swap;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i32.
End Impl_subtle_ConditionallySelectable_for_i32.

Module  Impl_subtle_ConditionallySelectable_for_u64.
Section Impl_subtle_ConditionallySelectable_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.path "u64"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u64"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "u64".
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "u64"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u64"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_assign : Instance.t := {
    Notations.double_colon := conditional_assign;
  }.
  
  Parameter conditional_swap :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "u64"]) ->
        (Ty.apply (Ty.path "mut_ref") [Ty.path "u64"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_swap : Instance.t := {
    Notations.double_colon := conditional_swap;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u64.
End Impl_subtle_ConditionallySelectable_for_u64.

Module  Impl_subtle_ConditionallySelectable_for_i64.
Section Impl_subtle_ConditionallySelectable_for_i64.
  Definition Self : Ty.t := Ty.path "i64".
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.path "i64"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i64"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "i64".
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Parameter conditional_assign :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "i64"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "i64"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_assign : Instance.t := {
    Notations.double_colon := conditional_assign;
  }.
  
  Parameter conditional_swap :
      (Ty.apply (Ty.path "mut_ref") [Ty.path "i64"]) ->
        (Ty.apply (Ty.path "mut_ref") [Ty.path "i64"]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_swap : Instance.t := {
    Notations.double_colon := conditional_swap;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i64.
End Impl_subtle_ConditionallySelectable_for_i64.

Module  Impl_subtle_ConditionallySelectable_for_subtle_Choice.
Section Impl_subtle_ConditionallySelectable_for_subtle_Choice.
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::Choice") [].
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::Choice") []]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.

Module  ConditionallyNegatable.
Section ConditionallyNegatable.
  Class Trait (Self : Set) : Type := {
    conditional_negate :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "subtle::Choice") []]
        (Ty.path "unit");
  }.
  
End ConditionallyNegatable.
End ConditionallyNegatable.

Module  Impl_subtle_ConditionallyNegatable_for_T.
Section Impl_subtle_ConditionallyNegatable_for_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := T.
  
  Parameter conditional_negate :
      (Ty.apply (Ty.path "mut_ref") [T]) ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.path "unit".
  
  Definition AssociatedFunction_conditional_negate : Instance.t := {
    Notations.double_colon := conditional_negate;
  }.
  
  Definition ℐ : Instance.t := [("conditional_negate", conditional_negate)].
End Impl_subtle_ConditionallyNegatable_for_T.
End Impl_subtle_ConditionallyNegatable_for_T.



Module  Impl_core_clone_Clone_for_subtle_CtOption_T.
Section Impl_core_clone_Clone_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter clone :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::CtOption") [T]]) ->
        Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_subtle_CtOption_T.
End Impl_core_clone_Clone_for_subtle_CtOption_T.

Module  Impl_core_marker_Copy_for_subtle_CtOption_T.
Section Impl_core_marker_Copy_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_subtle_CtOption_T.
End Impl_core_marker_Copy_for_subtle_CtOption_T.

Module  Impl_core_fmt_Debug_for_subtle_CtOption_T.
Section Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter fmt :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::CtOption") [T]]) ->
        (Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "core::fmt::Formatter") []])
        ->
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []].
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_subtle_CtOption_T.
End Impl_core_fmt_Debug_for_subtle_CtOption_T.

Module  Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
Section Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "core::option::Option") [T].
  
  Parameter from :
      (Ty.apply (Ty.path "subtle::CtOption") [T]) ->
        Ty.apply (Ty.path "core::option::Option") [T].
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
End Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.

Module  Impl_subtle_CtOption_T.
Section Impl_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Set := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter new :
      T ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  Parameter expect :
      (Ty.apply (Ty.path "subtle::CtOption") [T]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "str"]) ->
        T.
  
  Definition AssociatedFunction_expect : Instance.t := {
    Notations.double_colon := expect;
  }.
  
  Parameter unwrap : (Ty.apply (Ty.path "subtle::CtOption") [T]) -> T.
  
  Definition AssociatedFunction_unwrap : Instance.t := {
    Notations.double_colon := unwrap;
  }.
  
  Parameter unwrap_or : (Ty.apply (Ty.path "subtle::CtOption") [T]) -> T -> T.
  
  Definition AssociatedFunction_unwrap_or : Instance.t := {
    Notations.double_colon := unwrap_or;
  }.
  
  Parameter unwrap_or_else :
      forall {F : Set},
      (Ty.apply (Ty.path "subtle::CtOption") [T]) -> F -> T.
  
  Definition AssociatedFunction_unwrap_or_else {F : Set} : Instance.t := {
    Notations.double_colon := unwrap_or_else (F := F);
  }.
  
  Parameter is_some :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::CtOption") [T]]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_is_some : Instance.t := {
    Notations.double_colon := is_some;
  }.
  
  Parameter is_none :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::CtOption") [T]]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_is_none : Instance.t := {
    Notations.double_colon := is_none;
  }.
  
  Parameter map :
      forall {U F : Set},
      (Ty.apply (Ty.path "subtle::CtOption") [T]) ->
        F ->
        Ty.apply (Ty.path "subtle::CtOption") [U].
  
  Definition AssociatedFunction_map {U F : Set} : Instance.t := {
    Notations.double_colon := map (U := U) (F := F);
  }.
  
  Parameter and_then :
      forall {U F : Set},
      (Ty.apply (Ty.path "subtle::CtOption") [T]) ->
        F ->
        Ty.apply (Ty.path "subtle::CtOption") [U].
  
  Definition AssociatedFunction_and_then {U F : Set} : Instance.t := {
    Notations.double_colon := and_then (U := U) (F := F);
  }.
  
  Parameter or_else :
      forall {F : Set},
      (Ty.apply (Ty.path "subtle::CtOption") [T]) ->
        F ->
        Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Definition AssociatedFunction_or_else {F : Set} : Instance.t := {
    Notations.double_colon := or_else (F := F);
  }.
End Impl_subtle_CtOption_T.
End Impl_subtle_CtOption_T.

Module  Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
Section Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter conditional_select :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::CtOption") [T]]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::CtOption") [T]])
        ->
        (Ty.apply (Ty.path "subtle::Choice") []) ->
        Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Definition AssociatedFunction_conditional_select : Instance.t := {
    Notations.double_colon := conditional_select;
  }.
  
  Definition ℐ : Instance.t := [("conditional_select", conditional_select);
    ("conditional_assign", conditional_assign);
    ("conditional_swap", conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.

Module  Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
Section Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter ct_eq :
      (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::CtOption") [T]]) ->
        (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "subtle::CtOption") [T]])
        ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_eq : Instance.t := {
    Notations.double_colon := ct_eq;
  }.
  
  Definition ℐ : Instance.t := [("ct_eq", ct_eq); ("ct_ne", ct_ne)].
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.

Module  ConstantTimeGreater.
Section ConstantTimeGreater.
  Class Trait (Self : Set) : Type := {
    ct_gt :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]; Ty.apply (Ty.path "ref") [Self]]
        (Ty.apply (Ty.path "subtle::Choice") []);
  }.
  
End ConstantTimeGreater.
End ConstantTimeGreater.

Module  Impl_subtle_ConstantTimeGreater_for_u8.
Section Impl_subtle_ConstantTimeGreater_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Parameter ct_gt :
      (Ty.apply (Ty.path "ref") [Ty.path "u8"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u8"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_gt : Instance.t := {
    Notations.double_colon := ct_gt;
  }.
  
  Definition ℐ : Instance.t := [("ct_gt", ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u8.
End Impl_subtle_ConstantTimeGreater_for_u8.

Module  Impl_subtle_ConstantTimeGreater_for_u16.
Section Impl_subtle_ConstantTimeGreater_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Parameter ct_gt :
      (Ty.apply (Ty.path "ref") [Ty.path "u16"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u16"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_gt : Instance.t := {
    Notations.double_colon := ct_gt;
  }.
  
  Definition ℐ : Instance.t := [("ct_gt", ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u16.
End Impl_subtle_ConstantTimeGreater_for_u16.

Module  Impl_subtle_ConstantTimeGreater_for_u32.
Section Impl_subtle_ConstantTimeGreater_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Parameter ct_gt :
      (Ty.apply (Ty.path "ref") [Ty.path "u32"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u32"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_gt : Instance.t := {
    Notations.double_colon := ct_gt;
  }.
  
  Definition ℐ : Instance.t := [("ct_gt", ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u32.
End Impl_subtle_ConstantTimeGreater_for_u32.

Module  Impl_subtle_ConstantTimeGreater_for_u64.
Section Impl_subtle_ConstantTimeGreater_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Parameter ct_gt :
      (Ty.apply (Ty.path "ref") [Ty.path "u64"]) ->
        (Ty.apply (Ty.path "ref") [Ty.path "u64"]) ->
        Ty.apply (Ty.path "subtle::Choice") [].
  
  Definition AssociatedFunction_ct_gt : Instance.t := {
    Notations.double_colon := ct_gt;
  }.
  
  Definition ℐ : Instance.t := [("ct_gt", ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u64.
End Impl_subtle_ConstantTimeGreater_for_u64.

Module  ConstantTimeLess.
Section ConstantTimeLess.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End ConstantTimeLess.
End ConstantTimeLess.

Module  Impl_subtle_ConstantTimeLess_for_u8.
Section Impl_subtle_ConstantTimeLess_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Definition ℐ : Instance.t := [("ct_lt", ct_lt)].
End Impl_subtle_ConstantTimeLess_for_u8.
End Impl_subtle_ConstantTimeLess_for_u8.

Module  Impl_subtle_ConstantTimeLess_for_u16.
Section Impl_subtle_ConstantTimeLess_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Definition ℐ : Instance.t := [("ct_lt", ct_lt)].
End Impl_subtle_ConstantTimeLess_for_u16.
End Impl_subtle_ConstantTimeLess_for_u16.

Module  Impl_subtle_ConstantTimeLess_for_u32.
Section Impl_subtle_ConstantTimeLess_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Definition ℐ : Instance.t := [("ct_lt", ct_lt)].
End Impl_subtle_ConstantTimeLess_for_u32.
End Impl_subtle_ConstantTimeLess_for_u32.

Module  Impl_subtle_ConstantTimeLess_for_u64.
Section Impl_subtle_ConstantTimeLess_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Definition ℐ : Instance.t := [("ct_lt", ct_lt)].
End Impl_subtle_ConstantTimeLess_for_u64.
End Impl_subtle_ConstantTimeLess_for_u64.
