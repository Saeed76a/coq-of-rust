(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Choice *)

Module Impl_core_marker_Copy_for_subtle_Choice.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [].
End Impl_core_marker_Copy_for_subtle_Choice.

Module Impl_core_clone_Clone_for_subtle_Choice.
  Parameter clone : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("clone", InstanceField.Method clone []) ].
End Impl_core_clone_Clone_for_subtle_Choice.

Module Impl_core_fmt_Debug_for_subtle_Choice.
  Parameter fmt : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("fmt", InstanceField.Method fmt []) ].
End Impl_core_fmt_Debug_for_subtle_Choice.

Module Impl_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter unwrap_u8 : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_unwrap_u8 :
    M.IsAssociatedFunction Self "unwrap_u8" unwrap_u8 [].
End Impl_subtle_Choice.

Module Impl_core_convert_From_subtle_Choice_for_bool.
  Parameter from : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::From"
      (* Self *) (Ty.path "bool")
      [ (* T *) Ty.path "subtle::Choice" ]
      [ ("from", InstanceField.Method from []) ].
End Impl_core_convert_From_subtle_Choice_for_bool.

Module Impl_core_ops_bit_BitAnd_for_subtle_Choice.
  Definition Output : Set := Ty.path "subtle::Choice".
  
  Parameter bitand : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::bit::BitAnd"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("Output", TODO); ("bitand", InstanceField.Method bitand []) ].
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.

Module Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
  Parameter bitand_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::bit::BitAndAssign"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("bitand_assign", InstanceField.Method bitand_assign []) ].
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitOr_for_subtle_Choice.
  Definition Output : Set := Ty.path "subtle::Choice".
  
  Parameter bitor : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::bit::BitOr"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("Output", TODO); ("bitor", InstanceField.Method bitor []) ].
End Impl_core_ops_bit_BitOr_for_subtle_Choice.

Module Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
  Parameter bitor_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::bit::BitOrAssign"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("bitor_assign", InstanceField.Method bitor_assign []) ].
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitXor_for_subtle_Choice.
  Definition Output : Set := Ty.path "subtle::Choice".
  
  Parameter bitxor : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::bit::BitXor"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("Output", TODO); ("bitxor", InstanceField.Method bitxor []) ].
End Impl_core_ops_bit_BitXor_for_subtle_Choice.

Module Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
  Parameter bitxor_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::bit::BitXorAssign"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("bitxor_assign", InstanceField.Method bitxor_assign []) ].
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.

Module Impl_core_ops_bit_Not_for_subtle_Choice.
  Definition Output : Set := Ty.path "subtle::Choice".
  
  Parameter not : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::bit::Not"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("Output", TODO); ("not", InstanceField.Method not []) ].
End Impl_core_ops_bit_Not_for_subtle_Choice.

Parameter black_box : (list Ty.t) -> (list Value.t) -> M.

Module Impl_core_convert_From_u8_for_subtle_Choice.
  Parameter from : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::From"
      (* Self *) (Ty.path "subtle::Choice")
      [ (* T *) Ty.path "u8" ]
      [ ("from", InstanceField.Method from []) ].
End Impl_core_convert_From_u8_for_subtle_Choice.

(* Trait *)
Module ConstantTimeEq.
  Parameter ct_ne : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom ProvidedMethod_ct_ne :
    M.IsProvidedMethod "subtle::ConstantTimeEq" ct_ne.
End ConstantTimeEq.

Module Impl_subtle_ConstantTimeEq_for_slice_T.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.apply (Ty.path "slice") [ T ])
      []
      [ ("ct_eq", InstanceField.Method ct_eq [ T ]) ].
End Impl_subtle_ConstantTimeEq_for_slice_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_Choice.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.

Module Impl_subtle_ConstantTimeEq_for_u8.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "u8")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_u8.

Module Impl_subtle_ConstantTimeEq_for_i8.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "i8")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_i8.

Module Impl_subtle_ConstantTimeEq_for_u16.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "u16")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_u16.

Module Impl_subtle_ConstantTimeEq_for_i16.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "i16")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_i16.

Module Impl_subtle_ConstantTimeEq_for_u32.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "u32")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_u32.

Module Impl_subtle_ConstantTimeEq_for_i32.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "i32")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_i32.

Module Impl_subtle_ConstantTimeEq_for_u64.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "u64")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_u64.

Module Impl_subtle_ConstantTimeEq_for_i64.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "i64")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_i64.

Module Impl_subtle_ConstantTimeEq_for_usize.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "usize")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_usize.

Module Impl_subtle_ConstantTimeEq_for_isize.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.path "isize")
      []
      [ ("ct_eq", InstanceField.Method ct_eq []) ].
End Impl_subtle_ConstantTimeEq_for_isize.

(* Trait *)
Module ConditionallySelectable.
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom ProvidedMethod_conditional_assign :
    M.IsProvidedMethod "subtle::ConditionallySelectable" conditional_assign.
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom ProvidedMethod_conditional_swap :
    M.IsProvidedMethod "subtle::ConditionallySelectable" conditional_swap.
End ConditionallySelectable.

Module Impl_subtle_ConditionallySelectable_for_u8.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "u8")
      []
      [
        ("conditional_select", InstanceField.Method conditional_select []);
        ("conditional_assign", InstanceField.Method conditional_assign []);
        ("conditional_swap", InstanceField.Method conditional_swap [])
      ].
End Impl_subtle_ConditionallySelectable_for_u8.

Module Impl_subtle_ConditionallySelectable_for_i8.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "i8")
      []
      [
        ("conditional_select", InstanceField.Method conditional_select []);
        ("conditional_assign", InstanceField.Method conditional_assign []);
        ("conditional_swap", InstanceField.Method conditional_swap [])
      ].
End Impl_subtle_ConditionallySelectable_for_i8.

Module Impl_subtle_ConditionallySelectable_for_u16.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "u16")
      []
      [
        ("conditional_select", InstanceField.Method conditional_select []);
        ("conditional_assign", InstanceField.Method conditional_assign []);
        ("conditional_swap", InstanceField.Method conditional_swap [])
      ].
End Impl_subtle_ConditionallySelectable_for_u16.

Module Impl_subtle_ConditionallySelectable_for_i16.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "i16")
      []
      [
        ("conditional_select", InstanceField.Method conditional_select []);
        ("conditional_assign", InstanceField.Method conditional_assign []);
        ("conditional_swap", InstanceField.Method conditional_swap [])
      ].
End Impl_subtle_ConditionallySelectable_for_i16.

Module Impl_subtle_ConditionallySelectable_for_u32.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "u32")
      []
      [
        ("conditional_select", InstanceField.Method conditional_select []);
        ("conditional_assign", InstanceField.Method conditional_assign []);
        ("conditional_swap", InstanceField.Method conditional_swap [])
      ].
End Impl_subtle_ConditionallySelectable_for_u32.

Module Impl_subtle_ConditionallySelectable_for_i32.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "i32")
      []
      [
        ("conditional_select", InstanceField.Method conditional_select []);
        ("conditional_assign", InstanceField.Method conditional_assign []);
        ("conditional_swap", InstanceField.Method conditional_swap [])
      ].
End Impl_subtle_ConditionallySelectable_for_i32.

Module Impl_subtle_ConditionallySelectable_for_u64.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "u64")
      []
      [
        ("conditional_select", InstanceField.Method conditional_select []);
        ("conditional_assign", InstanceField.Method conditional_assign []);
        ("conditional_swap", InstanceField.Method conditional_swap [])
      ].
End Impl_subtle_ConditionallySelectable_for_u64.

Module Impl_subtle_ConditionallySelectable_for_i64.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "i64")
      []
      [
        ("conditional_select", InstanceField.Method conditional_select []);
        ("conditional_assign", InstanceField.Method conditional_assign []);
        ("conditional_swap", InstanceField.Method conditional_swap [])
      ].
End Impl_subtle_ConditionallySelectable_for_i64.

Module Impl_subtle_ConditionallySelectable_for_subtle_Choice.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.path "subtle::Choice")
      []
      [ ("conditional_select", InstanceField.Method conditional_select []) ].
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.

(* Trait *)
Module ConditionallyNegatable.
  
End ConditionallyNegatable.

Module Impl_subtle_ConditionallyNegatable_for_T.
  Parameter conditional_negate : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "subtle::ConditionallyNegatable"
      (* Self *) T
      []
      [ ("conditional_negate", InstanceField.Method conditional_negate [ T ]) ].
End Impl_subtle_ConditionallyNegatable_for_T.

(* Enum CtOption *)

Module Impl_core_clone_Clone_for_subtle_CtOption_T.
  Parameter clone : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.apply (Ty.path "subtle::CtOption") [ T ])
      []
      [ ("clone", InstanceField.Method clone [ T ]) ].
End Impl_core_clone_Clone_for_subtle_CtOption_T.

Module Impl_core_marker_Copy_for_subtle_CtOption_T.
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.apply (Ty.path "subtle::CtOption") [ T ])
      []
      [].
End Impl_core_marker_Copy_for_subtle_CtOption_T.

Module Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Parameter fmt : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.apply (Ty.path "subtle::CtOption") [ T ])
      []
      [ ("fmt", InstanceField.Method fmt [ T ]) ].
End Impl_core_fmt_Debug_for_subtle_CtOption_T.

Module Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
  Parameter from : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "core::convert::From"
      (* Self *) (Ty.apply (Ty.path "core::option::Option") [ T ])
      [ (* T *) Ty.apply (Ty.path "subtle::CtOption") [ T ] ]
      [ ("from", InstanceField.Method from [ T ]) ].
End Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.

Module Impl_subtle_CtOption_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "subtle::CtOption") [ T ].
  
  Parameter new : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_new :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "new" new [ T ].
  
  Parameter expect : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_expect :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "expect" expect [ T ].
  
  Parameter unwrap : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_unwrap :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "unwrap" unwrap [ T ].
  
  Parameter unwrap_or : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_unwrap_or :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "unwrap_or" unwrap_or [ T ].
  
  Parameter unwrap_or_else : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_unwrap_or_else :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "unwrap_or_else" unwrap_or_else [ T ].
  
  Parameter is_some : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_is_some :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "is_some" is_some [ T ].
  
  Parameter is_none : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_is_none :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "is_none" is_none [ T ].
  
  Parameter map : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_map :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "map" map [ T ].
  
  Parameter and_then : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_and_then :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "and_then" and_then [ T ].
  
  Parameter or_else : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_or_else :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "or_else" or_else [ T ].
End Impl_subtle_CtOption_T.

Module Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "subtle::ConditionallySelectable"
      (* Self *) (Ty.apply (Ty.path "subtle::CtOption") [ T ])
      []
      [ ("conditional_select", InstanceField.Method conditional_select [ T ]) ].
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "subtle::ConstantTimeEq"
      (* Self *) (Ty.apply (Ty.path "subtle::CtOption") [ T ])
      []
      [ ("ct_eq", InstanceField.Method ct_eq [ T ]) ].
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.

(* Trait *)
Module ConstantTimeGreater.
  
End ConstantTimeGreater.

Module Impl_subtle_ConstantTimeGreater_for_u8.
  Parameter ct_gt : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeGreater"
      (* Self *) (Ty.path "u8")
      []
      [ ("ct_gt", InstanceField.Method ct_gt []) ].
End Impl_subtle_ConstantTimeGreater_for_u8.

Module Impl_subtle_ConstantTimeGreater_for_u16.
  Parameter ct_gt : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeGreater"
      (* Self *) (Ty.path "u16")
      []
      [ ("ct_gt", InstanceField.Method ct_gt []) ].
End Impl_subtle_ConstantTimeGreater_for_u16.

Module Impl_subtle_ConstantTimeGreater_for_u32.
  Parameter ct_gt : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeGreater"
      (* Self *) (Ty.path "u32")
      []
      [ ("ct_gt", InstanceField.Method ct_gt []) ].
End Impl_subtle_ConstantTimeGreater_for_u32.

Module Impl_subtle_ConstantTimeGreater_for_u64.
  Parameter ct_gt : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeGreater"
      (* Self *) (Ty.path "u64")
      []
      [ ("ct_gt", InstanceField.Method ct_gt []) ].
End Impl_subtle_ConstantTimeGreater_for_u64.

(* Trait *)
Module ConstantTimeLess.
  Parameter ct_lt : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom ProvidedMethod_ct_lt :
    M.IsProvidedMethod "subtle::ConstantTimeLess" ct_lt.
End ConstantTimeLess.

Module Impl_subtle_ConstantTimeLess_for_u8.
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeLess"
      (* Self *) (Ty.path "u8")
      []
      [].
End Impl_subtle_ConstantTimeLess_for_u8.

Module Impl_subtle_ConstantTimeLess_for_u16.
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeLess"
      (* Self *) (Ty.path "u16")
      []
      [].
End Impl_subtle_ConstantTimeLess_for_u16.

Module Impl_subtle_ConstantTimeLess_for_u32.
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeLess"
      (* Self *) (Ty.path "u32")
      []
      [].
End Impl_subtle_ConstantTimeLess_for_u32.

Module Impl_subtle_ConstantTimeLess_for_u64.
  Axiom Implements :
    M.IsTraitInstance
      "subtle::ConstantTimeLess"
      (* Self *) (Ty.path "u64")
      []
      [].
End Impl_subtle_ConstantTimeLess_for_u64.
