(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Choice *)

Module Impl_core_marker_Copy_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_subtle_Choice.

Module Impl_core_clone_Clone_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter clone : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("clone", InstanceField.Method clone)].
End Impl_core_clone_Clone_for_subtle_Choice.

Module Impl_core_fmt_Debug_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter fmt : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("fmt", InstanceField.Method fmt)].
End Impl_core_fmt_Debug_for_subtle_Choice.

Module Impl_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter unwrap_u8 : (list Ty.t) -> (list Value.t) -> M.
End Impl_subtle_Choice.

Module Impl_core_convert_From_subtle_Choice_for_bool.
  Definition Self : Ty.t := Ty.path "bool".
  
  Parameter from : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("from", InstanceField.Method from)].
End Impl_core_convert_From_subtle_Choice_for_bool.

Module Impl_core_ops_bit_BitAnd_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Definition Output : Set := Ty.path "subtle::Choice".
  
  Parameter bitand : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("Output", TODO);
    ("bitand", InstanceField.Method bitand)].
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.

Module Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter bitand_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("bitand_assign",
      InstanceField.Method bitand_assign)].
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitOr_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Definition Output : Set := Ty.path "subtle::Choice".
  
  Parameter bitor : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("Output", TODO);
    ("bitor", InstanceField.Method bitor)].
End Impl_core_ops_bit_BitOr_for_subtle_Choice.

Module Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter bitor_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("bitor_assign",
      InstanceField.Method bitor_assign)].
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitXor_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Definition Output : Set := Ty.path "subtle::Choice".
  
  Parameter bitxor : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("Output", TODO);
    ("bitxor", InstanceField.Method bitxor)].
End Impl_core_ops_bit_BitXor_for_subtle_Choice.

Module Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter bitxor_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("bitxor_assign",
      InstanceField.Method bitxor_assign)].
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.

Module Impl_core_ops_bit_Not_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Definition Output : Set := Ty.path "subtle::Choice".
  
  Parameter not : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("Output", TODO);
    ("not", InstanceField.Method not)].
End Impl_core_ops_bit_Not_for_subtle_Choice.

Parameter black_box : (list Ty.t) -> (list Value.t) -> M.

Module Impl_core_convert_From_u8_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter from : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("from", InstanceField.Method from)].
End Impl_core_convert_From_u8_for_subtle_Choice.

Module ConstantTimeEq.
  Class Trait (Self : Set) : Type := {
    ct_eq :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]; Ty.apply (Ty.path "ref") [Self]]
        (Ty.path "subtle::Choice");
  }.
  
End ConstantTimeEq.

Module Impl_subtle_ConstantTimeEq_for_slice_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "slice") [T].
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_slice_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.

Module Impl_subtle_ConstantTimeEq_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_u8.

Module Impl_subtle_ConstantTimeEq_for_i8.
  Definition Self : Ty.t := Ty.path "i8".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_i8.

Module Impl_subtle_ConstantTimeEq_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_u16.

Module Impl_subtle_ConstantTimeEq_for_i16.
  Definition Self : Ty.t := Ty.path "i16".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_i16.

Module Impl_subtle_ConstantTimeEq_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_u32.

Module Impl_subtle_ConstantTimeEq_for_i32.
  Definition Self : Ty.t := Ty.path "i32".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_i32.

Module Impl_subtle_ConstantTimeEq_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_u64.

Module Impl_subtle_ConstantTimeEq_for_i64.
  Definition Self : Ty.t := Ty.path "i64".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_i64.

Module Impl_subtle_ConstantTimeEq_for_usize.
  Definition Self : Ty.t := Ty.path "usize".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_usize.

Module Impl_subtle_ConstantTimeEq_for_isize.
  Definition Self : Ty.t := Ty.path "isize".
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_isize.

Module ConditionallySelectable.
  Class Trait (Self : Set) : Type := {
    conditional_select :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "ref") [Self];
          Ty.path "subtle::Choice"]
        Self;
  }.
  
End ConditionallySelectable.

Module Impl_subtle_ConditionallySelectable_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select);
    ("conditional_assign", InstanceField.Method conditional_assign);
    ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u8.

Module Impl_subtle_ConditionallySelectable_for_i8.
  Definition Self : Ty.t := Ty.path "i8".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select);
    ("conditional_assign", InstanceField.Method conditional_assign);
    ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i8.

Module Impl_subtle_ConditionallySelectable_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select);
    ("conditional_assign", InstanceField.Method conditional_assign);
    ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u16.

Module Impl_subtle_ConditionallySelectable_for_i16.
  Definition Self : Ty.t := Ty.path "i16".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select);
    ("conditional_assign", InstanceField.Method conditional_assign);
    ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i16.

Module Impl_subtle_ConditionallySelectable_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select);
    ("conditional_assign", InstanceField.Method conditional_assign);
    ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u32.

Module Impl_subtle_ConditionallySelectable_for_i32.
  Definition Self : Ty.t := Ty.path "i32".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select);
    ("conditional_assign", InstanceField.Method conditional_assign);
    ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i32.

Module Impl_subtle_ConditionallySelectable_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select);
    ("conditional_assign", InstanceField.Method conditional_assign);
    ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u64.

Module Impl_subtle_ConditionallySelectable_for_i64.
  Definition Self : Ty.t := Ty.path "i64".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_assign : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter conditional_swap : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select);
    ("conditional_assign", InstanceField.Method conditional_assign);
    ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i64.

Module Impl_subtle_ConditionallySelectable_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select)].
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.

Module ConditionallyNegatable.
  Class Trait (Self : Set) : Type := {
    conditional_negate :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self]; Ty.path "subtle::Choice"]
        (Ty.path "unit");
  }.
  
End ConditionallyNegatable.

Module Impl_subtle_ConditionallyNegatable_for_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := T.
  
  Parameter conditional_negate : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_negate",
      InstanceField.Method conditional_negate)].
End Impl_subtle_ConditionallyNegatable_for_T.

(* Enum CtOption *)

Module Impl_core_clone_Clone_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter clone : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("clone", InstanceField.Method clone)].
End Impl_core_clone_Clone_for_subtle_CtOption_T.

Module Impl_core_marker_Copy_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_subtle_CtOption_T.

Module Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter fmt : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("fmt", InstanceField.Method fmt)].
End Impl_core_fmt_Debug_for_subtle_CtOption_T.

Module Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "core::option::Option") [T].
  
  Parameter from : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("from", InstanceField.Method from)].
End Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.

Module Impl_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter new : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter expect : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter unwrap : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter unwrap_or : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter unwrap_or_else : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter is_some : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter is_none : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter map : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter and_then : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter or_else : (list Ty.t) -> (list Value.t) -> M.
End Impl_subtle_CtOption_T.

Module Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter conditional_select : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("conditional_select",
      InstanceField.Method conditional_select)].
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Parameter ct_eq : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.

Module ConstantTimeGreater.
  Class Trait (Self : Set) : Type := {
    ct_gt :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]; Ty.apply (Ty.path "ref") [Self]]
        (Ty.path "subtle::Choice");
  }.
  
End ConstantTimeGreater.

Module Impl_subtle_ConstantTimeGreater_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Parameter ct_gt : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_gt", InstanceField.Method ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u8.

Module Impl_subtle_ConstantTimeGreater_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Parameter ct_gt : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_gt", InstanceField.Method ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u16.

Module Impl_subtle_ConstantTimeGreater_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Parameter ct_gt : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_gt", InstanceField.Method ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u32.

Module Impl_subtle_ConstantTimeGreater_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Parameter ct_gt : (list Ty.t) -> (list Value.t) -> M.
  
  Definition ℐ : Instance.t := [("ct_gt", InstanceField.Method ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u64.

Module ConstantTimeLess.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End ConstantTimeLess.

Module Impl_subtle_ConstantTimeLess_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Definition ℐ : Instance.t := [].
End Impl_subtle_ConstantTimeLess_for_u8.

Module Impl_subtle_ConstantTimeLess_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Definition ℐ : Instance.t := [].
End Impl_subtle_ConstantTimeLess_for_u16.

Module Impl_subtle_ConstantTimeLess_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Definition ℐ : Instance.t := [].
End Impl_subtle_ConstantTimeLess_for_u32.

Module Impl_subtle_ConstantTimeLess_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Definition ℐ : Instance.t := [].
End Impl_subtle_ConstantTimeLess_for_u64.
