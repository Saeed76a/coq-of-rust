(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Choice *)

Module Impl_core_marker_Copy_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_subtle_Choice.

Module Impl_core_clone_Clone_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u8"]))
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read self in
              M.pure (deref Œ±0)) :
              Ty.path "subtle::Choice"
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("clone", InstanceField.Method clone)].
End Impl_core_clone_Clone_for_subtle_Choice.

Module Impl_core_fmt_Debug_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 := M.read (mk_str "Choice") in
      let* Œ±2 := M.read self in
      let* Œ±3 :=
        M.alloc (borrow ((M.var "subtle::Choice::Get_0") (deref Œ±2))) in
      M.call
        ((Ty.path "core::fmt::Formatter")::["debug_tuple_field1_finish"]
          Œ±0
          Œ±1
          (pointer_coercion "Unsize" (borrow Œ±3)))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("fmt", InstanceField.Method fmt)].
End Impl_core_fmt_Debug_for_subtle_Choice.

Module Impl_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      pub fn unwrap_u8(&self) -> u8 {
          self.0
      }
  *)
  Definition unwrap_u8 (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read ((M.var "subtle::Choice::Get_0") (deref Œ±0))
    | _, _ => M.impossible
    end.
End Impl_subtle_Choice.

Module Impl_core_convert_From_subtle_Choice_for_bool.
  Definition Self : Ty.t := Ty.path "bool".
  
  (*
      fn from(source: Choice) -> bool {
          debug_assert!((source.0 == 0u8) | (source.0 == 1u8));
          source.0 != 0
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [source] =>
      let* source := M.alloc source in
      let* _ :=
        let* Œ±0 := M.alloc true in
        let* Œ±1 := M.read (use Œ±0) in
        if Œ±1 then
          let* _ :=
            let* Œ±0 := M.read ((M.var "subtle::Choice::Get_0") source) in
            let* Œ±1 := M.read ((M.var "subtle::Choice::Get_0") source) in
            let* Œ±2 :=
              M.alloc
                ((M.var "UnOp::not")
                  ((M.var "BinOp::Pure::bit_or")
                    ((M.var "BinOp::Pure::eq")
                      Œ±0
                      ((Integer.of_Z 0) : Ty.path "u8"))
                    ((M.var "BinOp::Pure::eq")
                      Œ±1
                      ((Integer.of_Z 1) : Ty.path "u8")))) in
            let* Œ±3 := M.read (use Œ±2) in
            if Œ±3 then
              let* Œ±0 :=
                M.read
                  (mk_str
                    "assertion failed: (source.0 == 0u8) | (source.0 == 1u8)") in
              let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2
            else
              M.alloc tt in
          M.alloc tt
        else
          M.alloc tt in
      let* Œ±0 := M.read ((M.var "subtle::Choice::Get_0") source) in
      let* Œ±0 :=
        M.alloc
          ((M.var "BinOp::Pure::ne") Œ±0 ((Integer.of_Z 0) : Ty.path "u8")) in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("from", InstanceField.Method from)].
End Impl_core_convert_From_subtle_Choice_for_bool.

Module Impl_core_ops_bit_BitAnd_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      type Output = Choice;
  *)
  Definition Output : Set := Ty.path "subtle::Choice".
  
  (*
      fn bitand(self, rhs: Choice) -> Choice {
          (self.0 & rhs.0).into()
      }
  *)
  Definition bitand (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read ((M.var "subtle::Choice::Get_0") self) in
      let* Œ±2 := M.read ((M.var "subtle::Choice::Get_0") rhs) in
      M.call (Œ±0 ((M.var "BinOp::Pure::bit_and") Œ±1 Œ±2))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("Output", TODO); ("bitand", InstanceField.Method bitand)].
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.

Module Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      fn bitand_assign(&mut self, rhs: Choice) {
          *self = *self & rhs;
      }
  *)
  Definition bitand_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.path "subtle::Choice")
              (Rhs := Ty.path "subtle::Choice")
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read rhs in
        let* Œ±5 := M.call (Œ±1 Œ±3 Œ±4) in
        assign (deref Œ±0) Œ±5 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("bitand_assign", InstanceField.Method bitand_assign)].
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitOr_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      type Output = Choice;
  *)
  Definition Output : Set := Ty.path "subtle::Choice".
  
  (*
      fn bitor(self, rhs: Choice) -> Choice {
          (self.0 | rhs.0).into()
      }
  *)
  Definition bitor (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read ((M.var "subtle::Choice::Get_0") self) in
      let* Œ±2 := M.read ((M.var "subtle::Choice::Get_0") rhs) in
      M.call (Œ±0 ((M.var "BinOp::Pure::bit_or") Œ±1 Œ±2))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("Output", TODO); ("bitor", InstanceField.Method bitor)].
End Impl_core_ops_bit_BitOr_for_subtle_Choice.

Module Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      fn bitor_assign(&mut self, rhs: Choice) {
          *self = *self | rhs;
      }
  *)
  Definition bitor_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitOr.bitor
              (Self := Ty.path "subtle::Choice")
              (Rhs := Ty.path "subtle::Choice")
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read rhs in
        let* Œ±5 := M.call (Œ±1 Œ±3 Œ±4) in
        assign (deref Œ±0) Œ±5 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("bitor_assign", InstanceField.Method bitor_assign)].
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitXor_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      type Output = Choice;
  *)
  Definition Output : Set := Ty.path "subtle::Choice".
  
  (*
      fn bitxor(self, rhs: Choice) -> Choice {
          (self.0 ^ rhs.0).into()
      }
  *)
  Definition bitxor (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read ((M.var "subtle::Choice::Get_0") self) in
      let* Œ±2 := M.read ((M.var "subtle::Choice::Get_0") rhs) in
      M.call (Œ±0 ((M.var "BinOp::Pure::bit_xor") Œ±1 Œ±2))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("Output", TODO); ("bitxor", InstanceField.Method bitxor)].
End Impl_core_ops_bit_BitXor_for_subtle_Choice.

Module Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      fn bitxor_assign(&mut self, rhs: Choice) {
          *self = *self ^ rhs;
      }
  *)
  Definition bitxor_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitXor.bitxor
              (Self := Ty.path "subtle::Choice")
              (Rhs := Ty.path "subtle::Choice")
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read rhs in
        let* Œ±5 := M.call (Œ±1 Œ±3 Œ±4) in
        assign (deref Œ±0) Œ±5 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("bitxor_assign", InstanceField.Method bitxor_assign)].
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.

Module Impl_core_ops_bit_Not_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      type Output = Choice;
  *)
  Definition Output : Set := Ty.path "subtle::Choice".
  
  (*
      fn not(self) -> Choice {
          (1u8 & (!self.0)).into()
      }
  *)
  Definition not (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read ((M.var "subtle::Choice::Get_0") self) in
      M.call
        (Œ±0
          ((M.var "BinOp::Pure::bit_and")
            ((Integer.of_Z 1) : Ty.path "u8")
            ((M.var "UnOp::not") Œ±1)))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("Output", TODO); ("not", InstanceField.Method not)].
End Impl_core_ops_bit_Not_for_subtle_Choice.

(*
fn black_box(input: u8) -> u8 {
    debug_assert!((input == 0u8) | (input == 1u8));

    unsafe {
        // Optimization barrier
        //
        // Unsafe is ok, because:
        //   - &input is not NULL;
        //   - size of input is not zero;
        //   - u8 is neither Sync, nor Send;
        //   - u8 is Copy, so input is always live;
        //   - u8 type is always properly aligned.
        core::ptr::read_volatile(&input as *const u8)
    }
}
*)
Definition black_box (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [input] =>
    let* input := M.alloc input in
    let* _ :=
      let* Œ±0 := M.alloc true in
      let* Œ±1 := M.read (use Œ±0) in
      if Œ±1 then
        let* _ :=
          let* Œ±0 := M.read input in
          let* Œ±1 := M.read input in
          let* Œ±2 :=
            M.alloc
              ((M.var "UnOp::not")
                ((M.var "BinOp::Pure::bit_or")
                  ((M.var "BinOp::Pure::eq")
                    Œ±0
                    ((Integer.of_Z 0) : Ty.path "u8"))
                  ((M.var "BinOp::Pure::eq")
                    Œ±1
                    ((Integer.of_Z 1) : Ty.path "u8")))) in
          let* Œ±3 := M.read (use Œ±2) in
          if Œ±3 then
            let* Œ±0 :=
              M.read
                (mk_str "assertion failed: (input == 0u8) | (input == 1u8)") in
            let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2
          else
            M.alloc tt in
        M.alloc tt
      else
        M.alloc tt in
    let* Œ±0 := M.alloc (addr_of input) in
    let* Œ±1 := M.read (use Œ±0) in
    let* Œ±2 := M.call ((M.var "core::ptr::read_volatile") Œ±1) in
    let* Œ±0 := M.alloc Œ±2 in
    M.read Œ±0
  | _, _ => M.impossible
  end.

Module Impl_core_convert_From_u8_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      fn from(input: u8) -> Choice {
          // Our goal is to prevent the compiler from inferring that the value held inside the
          // resulting `Choice` struct is really an `i1` instead of an `i8`.
          Choice(black_box(input))
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [input] =>
      let* input := M.alloc input in
      let* Œ±0 := M.read input in
      let* Œ±1 := M.call ((M.var "subtle::black_box") Œ±0) in
      M.pure (subtle.Choice.Build_t Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("from", InstanceField.Method from)].
End Impl_core_convert_From_u8_for_subtle_Choice.

(* Trait *)
Module ConstantTimeEq.
  Definition ct_ne (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.Not.not
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeEq.ct_eq (Self := Self) (Trait := ‚Ñê))) in
      let* Œ±2 := M.read self in
      let* Œ±3 := M.read other in
      let* Œ±4 := M.call (Œ±1 Œ±2 Œ±3) in
      M.call (Œ±0 Œ±4)
    | _, _ => M.impossible
    end.
  
  Axiom ProvidedMethod_ct_ne :
    M.IsProvidedMethod "subtle::ConstantTimeEq" ct_ne.
End ConstantTimeEq.

Module Impl_subtle_ConstantTimeEq_for_slice_T.
  Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [T].
  
  (*
      fn ct_eq(&self, _rhs: &[T]) -> Choice {
          let len = self.len();
  
          // Short-circuit on the *lengths* of the slices, not their
          // contents.
          if len != _rhs.len() {
              return Choice::from(0);
          }
  
          // This loop shouldn't be shortcircuitable, since the compiler
          // shouldn't be able to reason about the value of the `u8`
          // unwrapped from the `ct_eq` result.
          let mut x = 1u8;
          for (ai, bi) in self.iter().zip(_rhs.iter()) {
              x &= ai.ct_eq(bi).unwrap_u8();
          }
  
          x.into()
      }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _rhs] =>
      let* self := M.alloc self in
      let* _rhs := M.alloc _rhs in
      let return_ := M.return_ (R := Ty.path "subtle::Choice") in
      M.catch_return
        (let* len :=
          let* Œ±0 := M.read self in
          let* Œ±1 := M.call ((Ty.apply (Ty.path "slice") [T])::["len"] Œ±0) in
          M.alloc Œ±1 in
        let* _ :=
          let* Œ±0 := M.read len in
          let* Œ±1 := M.read _rhs in
          let* Œ±2 := M.call ((Ty.apply (Ty.path "slice") [T])::["len"] Œ±1) in
          let* Œ±3 := M.alloc ((M.var "BinOp::Pure::ne") Œ±0 Œ±2) in
          let* Œ±4 := M.read (use Œ±3) in
          if Œ±4 then
            let* Œ±0 :=
              ltac:(M.get_method (fun ‚Ñê =>
                core.convert.From.from
                  (Self := Ty.path "subtle::Choice")
                  (T := Ty.path "u8")
                  (Trait := ‚Ñê))) in
            let* Œ±1 := M.call (Œ±0 ((Integer.of_Z 0) : Ty.path "u8")) in
            let* Œ±2 := return_ Œ±1 in
            let* Œ±3 := M.read Œ±2 in
            let* Œ±4 := never_to_any Œ±3 in
            M.alloc Œ±4
          else
            M.alloc tt in
        let* x := M.alloc ((Integer.of_Z 1) : Ty.path "u8") in
        let* _ :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.iter.traits.collect.IntoIterator.into_iter
                (Self :=
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply (Ty.path "core::slice::iter::Iter") [T];
                      Ty.apply (Ty.path "core::slice::iter::Iter") [T]])
                (Trait := ‚Ñê))) in
          let* Œ±1 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.iter.traits.iterator.Iterator.zip
                (Self := Ty.apply (Ty.path "core::slice::iter::Iter") [T])
                (U := Ty.apply (Ty.path "core::slice::iter::Iter") [T])
                (Trait := ‚Ñê))) in
          let* Œ±2 := M.read self in
          let* Œ±3 := M.call ((Ty.apply (Ty.path "slice") [T])::["iter"] Œ±2) in
          let* Œ±4 := M.read _rhs in
          let* Œ±5 := M.call ((Ty.apply (Ty.path "slice") [T])::["iter"] Œ±4) in
          let* Œ±6 := M.call (Œ±1 Œ±3 Œ±5) in
          let* Œ±7 := M.call (Œ±0 Œ±6) in
          let* Œ±8 := M.alloc Œ±7 in
          let* Œ±9 :=
            match_operator
              Œ±8
              [
                fun Œ≥ =>
                  (let* iter := M.copy Œ≥ in
                  M.loop
                    (let* _ :=
                      let* Œ±0 :=
                        ltac:(M.get_method (fun ‚Ñê =>
                          core.iter.traits.iterator.Iterator.next
                            (Self :=
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [T];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [T]])
                            (Trait := ‚Ñê))) in
                      let* Œ±1 := M.call (Œ±0 (borrow_mut iter)) in
                      let* Œ±2 := M.alloc Œ±1 in
                      match_operator
                        Œ±2
                        [
                          fun Œ≥ =>
                            (let* Œ±0 := M.read Œ≥ in
                            match Œ±0 with
                            | core.option.Option.None =>
                              let* Œ±0 := M.break in
                              let* Œ±1 := M.read Œ±0 in
                              let* Œ±2 := never_to_any Œ±1 in
                              M.alloc Œ±2
                            | _ => M.break_match
                            end) :
                            Ty.tuple [];
                          fun Œ≥ =>
                            (let* Œ±0 := M.read Œ≥ in
                            match Œ±0 with
                            | core.option.Option.Some _ =>
                              let Œ≥0_0 :=
                                (M.var "core::option::Option::Get_Some_0") Œ≥ in
                              let* Œ±0 := M.read Œ≥0_0 in
                              match Œ±0 with
                              | (_, _) =>
                                let Œ≥1_0 := Tuple.Access.left Œ≥0_0 in
                                let Œ≥1_1 := Tuple.Access.right Œ≥0_0 in
                                let* ai := M.copy Œ≥1_0 in
                                let* bi := M.copy Œ≥1_1 in
                                let* _ :=
                                  let Œ≤ := x in
                                  let* Œ±0 := M.read Œ≤ in
                                  let* Œ±1 :=
                                    ltac:(M.get_method (fun ‚Ñê =>
                                      subtle.ConstantTimeEq.ct_eq
                                        (Self := T)
                                        (Trait := ‚Ñê))) in
                                  let* Œ±2 := M.read ai in
                                  let* Œ±3 := M.read bi in
                                  let* Œ±4 := M.call (Œ±1 Œ±2 Œ±3) in
                                  let* Œ±5 := M.alloc Œ±4 in
                                  let* Œ±6 :=
                                    M.call
                                      ((Ty.path "subtle::Choice")::["unwrap_u8"]
                                        (borrow Œ±5)) in
                                  (M.var "assign")
                                    Œ≤
                                    ((M.var "BinOp::Pure::bit_and") Œ±0 Œ±6) in
                                M.alloc tt
                              end
                            | _ => M.break_match
                            end) :
                            Ty.tuple []
                        ] in
                    M.alloc tt)) :
                  Ty.tuple []
              ] in
          M.pure (use Œ±9) in
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.convert.Into.into
              (Self := Ty.path "u8")
              (T := Ty.path "subtle::Choice")
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read x in
        let* Œ±2 := M.call (Œ±0 Œ±1) in
        let* Œ±0 := M.alloc Œ±2 in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (T : Ty.t) : Instance.t :=
    [("ct_eq", InstanceField.Method (ct_eq T))].
End Impl_subtle_ConstantTimeEq_for_slice_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      fn ct_eq(&self, rhs: &Choice) -> Choice {
          !( *self ^ *rhs)
      }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.Not.not
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.path "subtle::Choice")
            (Rhs := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±2 := M.read self in
      let* Œ±3 := M.read (deref Œ±2) in
      let* Œ±4 := M.read rhs in
      let* Œ±5 := M.read (deref Œ±4) in
      let* Œ±6 := M.call (Œ±1 Œ±3 Œ±5) in
      M.call (Œ±0 Œ±6)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.

Module Impl_subtle_ConstantTimeEq_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* x :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitXor.bitxor
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u8"])
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u8"])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 := M.read other in
        let* Œ±3 := M.call (Œ±0 Œ±1 Œ±2) in
        M.alloc Œ±3 in
      let* y :=
        let* Œ±0 := M.read x in
        let* Œ±1 := M.read x in
        let* Œ±2 := M.call ((Ty.path "u8")::["wrapping_neg"] Œ±1) in
        let* Œ±3 :=
          (M.var "BinOp::Panic::sub")
            ((Integer.of_Z 8) : Ty.path "i32")
            ((Integer.of_Z 1) : Ty.path "i32") in
        let* Œ±4 :=
          (M.var "BinOp::Panic::shr")
            ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±2)
            Œ±3 in
        M.alloc Œ±4 in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read y in
      let* Œ±2 := M.alloc ((Integer.of_Z 1) : Ty.path "u8") in
      let* Œ±3 := M.read (use Œ±2) in
      let* Œ±4 := M.alloc ((M.var "BinOp::Pure::bit_xor") Œ±1 Œ±3) in
      let* Œ±5 := M.read (use Œ±4) in
      let* Œ±6 := M.call (Œ±0 Œ±5) in
      let* Œ±0 := M.alloc Œ±6 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_u8.

Module Impl_subtle_ConstantTimeEq_for_i8.
  Definition Self : Ty.t := Ty.path "i8".
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeEq.ct_eq (Self := Ty.path "u8") (Trait := ‚Ñê))) in
      let* Œ±1 := M.read self in
      let* Œ±2 := M.read (deref Œ±1) in
      let* Œ±3 := M.alloc (rust_cast Œ±2) in
      let* Œ±4 := M.read other in
      let* Œ±5 := M.read (deref Œ±4) in
      let* Œ±6 := M.alloc (rust_cast Œ±5) in
      M.call (Œ±0 (borrow Œ±3) (borrow Œ±6))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_i8.

Module Impl_subtle_ConstantTimeEq_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* x :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitXor.bitxor
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u16"])
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u16"])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 := M.read other in
        let* Œ±3 := M.call (Œ±0 Œ±1 Œ±2) in
        M.alloc Œ±3 in
      let* y :=
        let* Œ±0 := M.read x in
        let* Œ±1 := M.read x in
        let* Œ±2 := M.call ((Ty.path "u16")::["wrapping_neg"] Œ±1) in
        let* Œ±3 :=
          (M.var "BinOp::Panic::sub")
            ((Integer.of_Z 16) : Ty.path "i32")
            ((Integer.of_Z 1) : Ty.path "i32") in
        let* Œ±4 :=
          (M.var "BinOp::Panic::shr")
            ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±2)
            Œ±3 in
        M.alloc Œ±4 in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read y in
      let* Œ±2 := M.alloc ((Integer.of_Z 1) : Ty.path "u16") in
      let* Œ±3 := M.read (use Œ±2) in
      let* Œ±4 :=
        M.call (Œ±0 (rust_cast ((M.var "BinOp::Pure::bit_xor") Œ±1 Œ±3))) in
      let* Œ±0 := M.alloc Œ±4 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_u16.

Module Impl_subtle_ConstantTimeEq_for_i16.
  Definition Self : Ty.t := Ty.path "i16".
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeEq.ct_eq (Self := Ty.path "u16") (Trait := ‚Ñê))) in
      let* Œ±1 := M.read self in
      let* Œ±2 := M.read (deref Œ±1) in
      let* Œ±3 := M.alloc (rust_cast Œ±2) in
      let* Œ±4 := M.read other in
      let* Œ±5 := M.read (deref Œ±4) in
      let* Œ±6 := M.alloc (rust_cast Œ±5) in
      M.call (Œ±0 (borrow Œ±3) (borrow Œ±6))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_i16.

Module Impl_subtle_ConstantTimeEq_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* x :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitXor.bitxor
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u32"])
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u32"])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 := M.read other in
        let* Œ±3 := M.call (Œ±0 Œ±1 Œ±2) in
        M.alloc Œ±3 in
      let* y :=
        let* Œ±0 := M.read x in
        let* Œ±1 := M.read x in
        let* Œ±2 := M.call ((Ty.path "u32")::["wrapping_neg"] Œ±1) in
        let* Œ±3 :=
          (M.var "BinOp::Panic::sub")
            ((Integer.of_Z 32) : Ty.path "i32")
            ((Integer.of_Z 1) : Ty.path "i32") in
        let* Œ±4 :=
          (M.var "BinOp::Panic::shr")
            ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±2)
            Œ±3 in
        M.alloc Œ±4 in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read y in
      let* Œ±2 := M.alloc ((Integer.of_Z 1) : Ty.path "u32") in
      let* Œ±3 := M.read (use Œ±2) in
      let* Œ±4 :=
        M.call (Œ±0 (rust_cast ((M.var "BinOp::Pure::bit_xor") Œ±1 Œ±3))) in
      let* Œ±0 := M.alloc Œ±4 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_u32.

Module Impl_subtle_ConstantTimeEq_for_i32.
  Definition Self : Ty.t := Ty.path "i32".
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeEq.ct_eq (Self := Ty.path "u32") (Trait := ‚Ñê))) in
      let* Œ±1 := M.read self in
      let* Œ±2 := M.read (deref Œ±1) in
      let* Œ±3 := M.alloc (rust_cast Œ±2) in
      let* Œ±4 := M.read other in
      let* Œ±5 := M.read (deref Œ±4) in
      let* Œ±6 := M.alloc (rust_cast Œ±5) in
      M.call (Œ±0 (borrow Œ±3) (borrow Œ±6))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_i32.

Module Impl_subtle_ConstantTimeEq_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* x :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitXor.bitxor
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u64"])
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u64"])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 := M.read other in
        let* Œ±3 := M.call (Œ±0 Œ±1 Œ±2) in
        M.alloc Œ±3 in
      let* y :=
        let* Œ±0 := M.read x in
        let* Œ±1 := M.read x in
        let* Œ±2 := M.call ((Ty.path "u64")::["wrapping_neg"] Œ±1) in
        let* Œ±3 :=
          (M.var "BinOp::Panic::sub")
            ((Integer.of_Z 64) : Ty.path "i32")
            ((Integer.of_Z 1) : Ty.path "i32") in
        let* Œ±4 :=
          (M.var "BinOp::Panic::shr")
            ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±2)
            Œ±3 in
        M.alloc Œ±4 in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read y in
      let* Œ±2 := M.alloc ((Integer.of_Z 1) : Ty.path "u64") in
      let* Œ±3 := M.read (use Œ±2) in
      let* Œ±4 :=
        M.call (Œ±0 (rust_cast ((M.var "BinOp::Pure::bit_xor") Œ±1 Œ±3))) in
      let* Œ±0 := M.alloc Œ±4 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_u64.

Module Impl_subtle_ConstantTimeEq_for_i64.
  Definition Self : Ty.t := Ty.path "i64".
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeEq.ct_eq (Self := Ty.path "u64") (Trait := ‚Ñê))) in
      let* Œ±1 := M.read self in
      let* Œ±2 := M.read (deref Œ±1) in
      let* Œ±3 := M.alloc (rust_cast Œ±2) in
      let* Œ±4 := M.read other in
      let* Œ±5 := M.read (deref Œ±4) in
      let* Œ±6 := M.alloc (rust_cast Œ±5) in
      M.call (Œ±0 (borrow Œ±3) (borrow Œ±6))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_i64.

Module Impl_subtle_ConstantTimeEq_for_usize.
  Definition Self : Ty.t := Ty.path "usize".
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* x :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitXor.bitxor
              (Self := Ty.apply (Ty.path "ref") [Ty.path "usize"])
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "usize"])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 := M.read other in
        let* Œ±3 := M.call (Œ±0 Œ±1 Œ±2) in
        M.alloc Œ±3 in
      let* y :=
        let* Œ±0 := M.read x in
        let* Œ±1 := M.read x in
        let* Œ±2 := M.call ((Ty.path "usize")::["wrapping_neg"] Œ±1) in
        let* Œ±3 := M.call (M.var "core::mem::size_of") in
        let* Œ±4 :=
          (M.var "BinOp::Panic::mul") Œ±3 ((Integer.of_Z 8) : Ty.path "usize") in
        let* Œ±5 :=
          (M.var "BinOp::Panic::sub") Œ±4 ((Integer.of_Z 1) : Ty.path "usize") in
        let* Œ±6 :=
          (M.var "BinOp::Panic::shr")
            ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±2)
            Œ±5 in
        M.alloc Œ±6 in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "u8")
            (T := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read y in
      let* Œ±2 := M.alloc ((Integer.of_Z 1) : Ty.path "usize") in
      let* Œ±3 := M.read (use Œ±2) in
      let* Œ±4 :=
        M.call (Œ±0 (rust_cast ((M.var "BinOp::Pure::bit_xor") Œ±1 Œ±3))) in
      let* Œ±0 := M.alloc Œ±4 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_usize.

Module Impl_subtle_ConstantTimeEq_for_isize.
  Definition Self : Ty.t := Ty.path "isize".
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeEq.ct_eq
            (Self := Ty.path "usize")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read self in
      let* Œ±2 := M.read (deref Œ±1) in
      let* Œ±3 := M.alloc (rust_cast Œ±2) in
      let* Œ±4 := M.read other in
      let* Œ±5 := M.read (deref Œ±4) in
      let* Œ±6 := M.alloc (rust_cast Œ±5) in
      M.call (Œ±0 (borrow Œ±3) (borrow Œ±6))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_eq", InstanceField.Method ct_eq)].
End Impl_subtle_ConstantTimeEq_for_isize.

(* Trait *)
Module ConditionallySelectable.
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            subtle.ConditionallySelectable.conditional_select
              (Self := Self)
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read other in
        let* Œ±4 := M.read choice in
        let* Œ±5 := M.call (Œ±1 (borrow (deref Œ±2)) Œ±3 Œ±4) in
        assign (deref Œ±0) Œ±5 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Axiom ProvidedMethod_conditional_assign :
    M.IsProvidedMethod "subtle::ConditionallySelectable" conditional_assign.
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* t :=
        let* Œ±0 := M.read a in
        M.copy (deref Œ±0) in
      let* _ :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            subtle.ConditionallySelectable.conditional_assign
              (Self := Self)
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read b in
        let* Œ±3 := M.read choice in
        let* Œ±4 := M.call (Œ±0 Œ±1 (borrow (deref Œ±2)) Œ±3) in
        M.alloc Œ±4 in
      let* _ :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            subtle.ConditionallySelectable.conditional_assign
              (Self := Self)
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read b in
        let* Œ±2 := M.read choice in
        let* Œ±3 := M.call (Œ±0 Œ±1 (borrow t) Œ±2) in
        M.alloc Œ±3 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Axiom ProvidedMethod_conditional_swap :
    M.IsProvidedMethod "subtle::ConditionallySelectable" conditional_swap.
End ConditionallySelectable.

Module Impl_subtle_ConditionallySelectable_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "u8"])
            (Rhs := Ty.path "u8")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read mask in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "u8"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u8"])
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read a in
      let* Œ±5 := M.read b in
      let* Œ±6 := M.call (Œ±3 Œ±4 Œ±5) in
      let* Œ±7 := M.call (Œ±0 Œ±1 ((M.var "BinOp::Pure::bit_and") Œ±2 Œ±6)) in
      let* Œ±0 := M.alloc Œ±7 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read mask in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.read (deref Œ±4) in
        (M.var "assign")
          Œ≤
          ((M.var "BinOp::Pure::bit_xor")
            Œ±0
            ((M.var "BinOp::Pure::bit_and")
              Œ±1
              ((M.var "BinOp::Pure::bit_xor") Œ±3 Œ±5))) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* t :=
        let* Œ±0 := M.read mask in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.read b in
        let* Œ±4 := M.read (deref Œ±3) in
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±0
            ((M.var "BinOp::Pure::bit_xor") Œ±2 Œ±4)) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read a in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read b in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select);
      ("conditional_assign", InstanceField.Method conditional_assign);
      ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u8.

Module Impl_subtle_ConditionallySelectable_for_i8.
  Definition Self : Ty.t := Ty.path "i8".
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i8"])
            (Rhs := Ty.path "i8")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read mask in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i8"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "i8"])
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read a in
      let* Œ±5 := M.read b in
      let* Œ±6 := M.call (Œ±3 Œ±4 Œ±5) in
      let* Œ±7 := M.call (Œ±0 Œ±1 ((M.var "BinOp::Pure::bit_and") Œ±2 Œ±6)) in
      let* Œ±0 := M.alloc Œ±7 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read mask in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.read (deref Œ±4) in
        (M.var "assign")
          Œ≤
          ((M.var "BinOp::Pure::bit_xor")
            Œ±0
            ((M.var "BinOp::Pure::bit_and")
              Œ±1
              ((M.var "BinOp::Pure::bit_xor") Œ±3 Œ±5))) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* t :=
        let* Œ±0 := M.read mask in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.read b in
        let* Œ±4 := M.read (deref Œ±3) in
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±0
            ((M.var "BinOp::Pure::bit_xor") Œ±2 Œ±4)) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read a in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read b in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select);
      ("conditional_assign", InstanceField.Method conditional_assign);
      ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i8.

Module Impl_subtle_ConditionallySelectable_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "u16"])
            (Rhs := Ty.path "u16")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read mask in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "u16"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u16"])
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read a in
      let* Œ±5 := M.read b in
      let* Œ±6 := M.call (Œ±3 Œ±4 Œ±5) in
      let* Œ±7 := M.call (Œ±0 Œ±1 ((M.var "BinOp::Pure::bit_and") Œ±2 Œ±6)) in
      let* Œ±0 := M.alloc Œ±7 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read mask in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.read (deref Œ±4) in
        (M.var "assign")
          Œ≤
          ((M.var "BinOp::Pure::bit_xor")
            Œ±0
            ((M.var "BinOp::Pure::bit_and")
              Œ±1
              ((M.var "BinOp::Pure::bit_xor") Œ±3 Œ±5))) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* t :=
        let* Œ±0 := M.read mask in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.read b in
        let* Œ±4 := M.read (deref Œ±3) in
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±0
            ((M.var "BinOp::Pure::bit_xor") Œ±2 Œ±4)) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read a in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read b in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select);
      ("conditional_assign", InstanceField.Method conditional_assign);
      ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u16.

Module Impl_subtle_ConditionallySelectable_for_i16.
  Definition Self : Ty.t := Ty.path "i16".
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i16"])
            (Rhs := Ty.path "i16")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read mask in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i16"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "i16"])
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read a in
      let* Œ±5 := M.read b in
      let* Œ±6 := M.call (Œ±3 Œ±4 Œ±5) in
      let* Œ±7 := M.call (Œ±0 Œ±1 ((M.var "BinOp::Pure::bit_and") Œ±2 Œ±6)) in
      let* Œ±0 := M.alloc Œ±7 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read mask in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.read (deref Œ±4) in
        (M.var "assign")
          Œ≤
          ((M.var "BinOp::Pure::bit_xor")
            Œ±0
            ((M.var "BinOp::Pure::bit_and")
              Œ±1
              ((M.var "BinOp::Pure::bit_xor") Œ±3 Œ±5))) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* t :=
        let* Œ±0 := M.read mask in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.read b in
        let* Œ±4 := M.read (deref Œ±3) in
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±0
            ((M.var "BinOp::Pure::bit_xor") Œ±2 Œ±4)) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read a in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read b in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select);
      ("conditional_assign", InstanceField.Method conditional_assign);
      ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i16.

Module Impl_subtle_ConditionallySelectable_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "u32"])
            (Rhs := Ty.path "u32")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read mask in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "u32"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u32"])
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read a in
      let* Œ±5 := M.read b in
      let* Œ±6 := M.call (Œ±3 Œ±4 Œ±5) in
      let* Œ±7 := M.call (Œ±0 Œ±1 ((M.var "BinOp::Pure::bit_and") Œ±2 Œ±6)) in
      let* Œ±0 := M.alloc Œ±7 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read mask in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.read (deref Œ±4) in
        (M.var "assign")
          Œ≤
          ((M.var "BinOp::Pure::bit_xor")
            Œ±0
            ((M.var "BinOp::Pure::bit_and")
              Œ±1
              ((M.var "BinOp::Pure::bit_xor") Œ±3 Œ±5))) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* t :=
        let* Œ±0 := M.read mask in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.read b in
        let* Œ±4 := M.read (deref Œ±3) in
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±0
            ((M.var "BinOp::Pure::bit_xor") Œ±2 Œ±4)) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read a in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read b in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select);
      ("conditional_assign", InstanceField.Method conditional_assign);
      ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u32.

Module Impl_subtle_ConditionallySelectable_for_i32.
  Definition Self : Ty.t := Ty.path "i32".
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i32"])
            (Rhs := Ty.path "i32")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read mask in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i32"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "i32"])
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read a in
      let* Œ±5 := M.read b in
      let* Œ±6 := M.call (Œ±3 Œ±4 Œ±5) in
      let* Œ±7 := M.call (Œ±0 Œ±1 ((M.var "BinOp::Pure::bit_and") Œ±2 Œ±6)) in
      let* Œ±0 := M.alloc Œ±7 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read mask in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.read (deref Œ±4) in
        (M.var "assign")
          Œ≤
          ((M.var "BinOp::Pure::bit_xor")
            Œ±0
            ((M.var "BinOp::Pure::bit_and")
              Œ±1
              ((M.var "BinOp::Pure::bit_xor") Œ±3 Œ±5))) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* t :=
        let* Œ±0 := M.read mask in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.read b in
        let* Œ±4 := M.read (deref Œ±3) in
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±0
            ((M.var "BinOp::Pure::bit_xor") Œ±2 Œ±4)) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read a in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read b in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select);
      ("conditional_assign", InstanceField.Method conditional_assign);
      ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i32.

Module Impl_subtle_ConditionallySelectable_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "u64"])
            (Rhs := Ty.path "u64")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read mask in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "u64"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u64"])
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read a in
      let* Œ±5 := M.read b in
      let* Œ±6 := M.call (Œ±3 Œ±4 Œ±5) in
      let* Œ±7 := M.call (Œ±0 Œ±1 ((M.var "BinOp::Pure::bit_and") Œ±2 Œ±6)) in
      let* Œ±0 := M.alloc Œ±7 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read mask in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.read (deref Œ±4) in
        (M.var "assign")
          Œ≤
          ((M.var "BinOp::Pure::bit_xor")
            Œ±0
            ((M.var "BinOp::Pure::bit_and")
              Œ±1
              ((M.var "BinOp::Pure::bit_xor") Œ±3 Œ±5))) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        M.alloc (rust_cast Œ±1) in
      let* t :=
        let* Œ±0 := M.read mask in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.read b in
        let* Œ±4 := M.read (deref Œ±3) in
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±0
            ((M.var "BinOp::Pure::bit_xor") Œ±2 Œ±4)) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read a in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read b in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select);
      ("conditional_assign", InstanceField.Method conditional_assign);
      ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_u64.

Module Impl_subtle_ConditionallySelectable_for_i64.
  Definition Self : Ty.t := Ty.path "i64".
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i64"])
            (Rhs := Ty.path "i64")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read mask in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitXor.bitxor
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i64"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "i64"])
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read a in
      let* Œ±5 := M.read b in
      let* Œ±6 := M.call (Œ±3 Œ±4 Œ±5) in
      let* Œ±7 := M.call (Œ±0 Œ±1 ((M.var "BinOp::Pure::bit_and") Œ±2 Œ±6)) in
      let* Œ±0 := M.alloc Œ±7 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other; choice] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read mask in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.read (deref Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.read (deref Œ±4) in
        (M.var "assign")
          Œ≤
          ((M.var "BinOp::Pure::bit_xor")
            Œ±0
            ((M.var "BinOp::Pure::bit_and")
              Œ±1
              ((M.var "BinOp::Pure::bit_xor") Œ±3 Œ±5))) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* mask :=
        let* Œ±0 :=
          M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow choice)) in
        let* Œ±1 := (M.var "UnOp::neg") (rust_cast Œ±0) in
        let* Œ±2 := M.alloc Œ±1 in
        M.copy (use Œ±2) in
      let* t :=
        let* Œ±0 := M.read mask in
        let* Œ±1 := M.read a in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.read b in
        let* Œ±4 := M.read (deref Œ±3) in
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±0
            ((M.var "BinOp::Pure::bit_xor") Œ±2 Œ±4)) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read a in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read b in
          M.pure (deref Œ±0) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read t in
        (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_xor") Œ±0 Œ±1) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select);
      ("conditional_assign", InstanceField.Method conditional_assign);
      ("conditional_swap", InstanceField.Method conditional_swap)].
End Impl_subtle_ConditionallySelectable_for_i64.

Module Impl_subtle_ConditionallySelectable_for_subtle_Choice.
  Definition Self : Ty.t := Ty.path "subtle::Choice".
  
  (*
      fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
          Choice(u8::conditional_select(&a.0, &b.0, choice))
      }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConditionallySelectable.conditional_select
            (Self := Ty.path "u8")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read b in
      let* Œ±3 := M.read choice in
      let* Œ±4 :=
        M.call
          (Œ±0
            (borrow ((M.var "subtle::Choice::Get_0") (deref Œ±1)))
            (borrow ((M.var "subtle::Choice::Get_0") (deref Œ±2)))
            Œ±3) in
      M.pure (subtle.Choice.Build_t Œ±4)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("conditional_select", InstanceField.Method conditional_select)].
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.

(* Trait *)
Module ConditionallyNegatable.
  
End ConditionallyNegatable.

Module Impl_subtle_ConditionallyNegatable_for_T.
  Definition Self (T : Ty.t) : Ty.t := T.
  
  (*
      fn conditional_negate(&mut self, choice: Choice) {
          // Need to cast to eliminate mutability
          let self_neg: T = -(self as &T);
          self.conditional_assign(&self_neg, choice);
      }
  *)
  Definition conditional_negate (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; choice] =>
      let* self := M.alloc self in
      let* choice := M.alloc choice in
      let* self_neg :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.arith.Neg.neg
              (Self := Ty.apply (Ty.path "ref") [T])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 := M.alloc (borrow (deref Œ±1)) in
        let* Œ±3 := M.read (use Œ±2) in
        let* Œ±4 := M.call (Œ±0 Œ±3) in
        M.alloc Œ±4 in
      let* _ :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            subtle.ConditionallySelectable.conditional_assign
              (Self := T)
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 := M.read choice in
        let* Œ±3 := M.call (Œ±0 Œ±1 (borrow self_neg) Œ±2) in
        M.alloc Œ±3 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (T : Ty.t) : Instance.t :=
    [("conditional_negate", InstanceField.Method (conditional_negate T))].
End Impl_subtle_ConditionallyNegatable_for_T.

(* Enum CtOption *)

Module Impl_core_clone_Clone_for_subtle_CtOption_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "subtle::CtOption") [T].
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.clone.Clone.clone (Self := T) (Trait := ‚Ñê))) in
      let* Œ±1 := M.read self in
      let* Œ±2 :=
        M.call
          (Œ±0 (borrow ((M.var "subtle::CtOption::Get_value") (deref Œ±1)))) in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.clone.Clone.clone
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±4 := M.read self in
      let* Œ±5 :=
        M.call
          (Œ±3 (borrow ((M.var "subtle::CtOption::Get_is_some") (deref Œ±4)))) in
      M.pure {| subtle.CtOption.value := Œ±2; subtle.CtOption.is_some := Œ±5; |}
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (T : Ty.t) : Instance.t :=
    [("clone", InstanceField.Method (clone T))].
End Impl_core_clone_Clone_for_subtle_CtOption_T.

Module Impl_core_marker_Copy_for_subtle_CtOption_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "subtle::CtOption") [T].
  
  Definition ‚Ñê (T : Ty.t) : Instance.t := [].
End Impl_core_marker_Copy_for_subtle_CtOption_T.

Module Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "subtle::CtOption") [T].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 := M.read (mk_str "CtOption") in
      let* Œ±2 := M.read (mk_str "value") in
      let* Œ±3 := M.read self in
      let* Œ±4 := M.read (mk_str "is_some") in
      let* Œ±5 := M.read self in
      let* Œ±6 :=
        M.alloc (borrow ((M.var "subtle::CtOption::Get_is_some") (deref Œ±5))) in
      M.call
        ((Ty.path "core::fmt::Formatter")::["debug_struct_field2_finish"]
          Œ±0
          Œ±1
          Œ±2
          (pointer_coercion
            "Unsize"
            (borrow ((M.var "subtle::CtOption::Get_value") (deref Œ±3))))
          Œ±4
          (pointer_coercion "Unsize" (borrow Œ±6)))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (T : Ty.t) : Instance.t :=
    [("fmt", InstanceField.Method (fmt T))].
End Impl_core_fmt_Debug_for_subtle_CtOption_T.

Module Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "core::option::Option") [T].
  
  (*
      fn from(source: CtOption<T>) -> Option<T> {
          if source.is_some().unwrap_u8() == 1u8 {
              Option::Some(source.value)
          } else {
              None
          }
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [source] =>
      let* source := M.alloc source in
      let* Œ±0 :=
        M.call
          ((Ty.apply (Ty.path "subtle::CtOption") [T])::["is_some"]
            (borrow source)) in
      let* Œ±1 := M.alloc Œ±0 in
      let* Œ±2 :=
        M.call ((Ty.path "subtle::Choice")::["unwrap_u8"] (borrow Œ±1)) in
      let* Œ±3 :=
        M.alloc
          ((M.var "BinOp::Pure::eq") Œ±2 ((Integer.of_Z 1) : Ty.path "u8")) in
      let* Œ±4 := M.read (use Œ±3) in
      let* Œ±5 :=
        if Œ±4 then
          let* Œ±0 := M.read ((M.var "subtle::CtOption::Get_value") source) in
          M.alloc (core.option.Option.Some Œ±0)
        else
          M.alloc core.option.Option.None in
      M.read Œ±5
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (T : Ty.t) : Instance.t :=
    [("from", InstanceField.Method (from T))].
End Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.

Module Impl_subtle_CtOption_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "subtle::CtOption") [T].
  
  (*
      pub fn new(value: T, is_some: Choice) -> CtOption<T> {
          CtOption {
              value: value,
              is_some: is_some,
          }
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [value; is_some] =>
      let* value := M.alloc value in
      let* is_some := M.alloc is_some in
      let* Œ±0 := M.read value in
      let* Œ±1 := M.read is_some in
      M.pure {| subtle.CtOption.value := Œ±0; subtle.CtOption.is_some := Œ±1; |}
    | _, _ => M.impossible
    end.
  
  (*
      pub fn expect(self, msg: &str) -> T {
          assert_eq!(self.is_some.unwrap_u8(), 1, "{}", msg);
  
          self.value
      }
  *)
  Definition expect (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; msg] =>
      let* self := M.alloc self in
      let* msg := M.alloc msg in
      let* _ :=
        let* Œ±0 :=
          M.call
            ((Ty.path "subtle::Choice")::["unwrap_u8"]
              (borrow ((M.var "subtle::CtOption::Get_is_some") self))) in
        let* Œ±1 := M.alloc Œ±0 in
        let* Œ±2 := M.alloc ((Integer.of_Z 1) : Ty.path "u8") in
        let* Œ±3 := M.alloc (borrow Œ±1, borrow Œ±2) in
        match_operator
          Œ±3
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | (_, _) =>
                let Œ≥0_0 := Tuple.Access.left Œ≥ in
                let Œ≥0_1 := Tuple.Access.right Œ≥ in
                let* left_val := M.copy Œ≥0_0 in
                let* right_val := M.copy Œ≥0_1 in
                let* Œ±0 := M.read left_val in
                let* Œ±1 := M.read (deref Œ±0) in
                let* Œ±2 := M.read right_val in
                let* Œ±3 := M.read (deref Œ±2) in
                let* Œ±4 :=
                  M.alloc
                    ((M.var "UnOp::not") ((M.var "BinOp::Pure::eq") Œ±1 Œ±3)) in
                let* Œ±5 := M.read (use Œ±4) in
                if Œ±5 then
                  let* kind := M.alloc core.panicking.AssertKind.Eq in
                  let* Œ±0 := M.read kind in
                  let* Œ±1 := M.read left_val in
                  let* Œ±2 := M.read right_val in
                  let* Œ±3 := M.read (mk_str "") in
                  let* Œ±4 := M.alloc [ Œ±3 ] in
                  let* Œ±5 :=
                    M.call
                      ((Ty.path "core::fmt::rt::Argument")::["new_display"]
                        (borrow msg)) in
                  let* Œ±6 := M.alloc [ Œ±5 ] in
                  let* Œ±7 :=
                    M.call
                      ((Ty.path "core::fmt::Arguments")::["new_v1"]
                        (pointer_coercion "Unsize" (borrow Œ±4))
                        (pointer_coercion "Unsize" (borrow Œ±6))) in
                  let* Œ±8 :=
                    M.call
                      ((M.var "core::panicking::assert_failed")
                        Œ±0
                        Œ±1
                        Œ±2
                        (core.option.Option.Some Œ±7)) in
                  let* Œ±0 := M.alloc Œ±8 in
                  let* Œ±1 := M.read Œ±0 in
                  let* Œ±2 := never_to_any Œ±1 in
                  M.alloc Œ±2
                else
                  M.alloc tt
              end) :
              Ty.tuple []
          ] in
      M.read ((M.var "subtle::CtOption::Get_value") self)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn unwrap(self) -> T {
          assert_eq!(self.is_some.unwrap_u8(), 1);
  
          self.value
      }
  *)
  Definition unwrap (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ :=
        let* Œ±0 :=
          M.call
            ((Ty.path "subtle::Choice")::["unwrap_u8"]
              (borrow ((M.var "subtle::CtOption::Get_is_some") self))) in
        let* Œ±1 := M.alloc Œ±0 in
        let* Œ±2 := M.alloc ((Integer.of_Z 1) : Ty.path "u8") in
        let* Œ±3 := M.alloc (borrow Œ±1, borrow Œ±2) in
        match_operator
          Œ±3
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | (_, _) =>
                let Œ≥0_0 := Tuple.Access.left Œ≥ in
                let Œ≥0_1 := Tuple.Access.right Œ≥ in
                let* left_val := M.copy Œ≥0_0 in
                let* right_val := M.copy Œ≥0_1 in
                let* Œ±0 := M.read left_val in
                let* Œ±1 := M.read (deref Œ±0) in
                let* Œ±2 := M.read right_val in
                let* Œ±3 := M.read (deref Œ±2) in
                let* Œ±4 :=
                  M.alloc
                    ((M.var "UnOp::not") ((M.var "BinOp::Pure::eq") Œ±1 Œ±3)) in
                let* Œ±5 := M.read (use Œ±4) in
                if Œ±5 then
                  let* kind := M.alloc core.panicking.AssertKind.Eq in
                  let* Œ±0 := M.read kind in
                  let* Œ±1 := M.read left_val in
                  let* Œ±2 := M.read right_val in
                  let* Œ±3 :=
                    M.call
                      ((M.var "core::panicking::assert_failed")
                        Œ±0
                        Œ±1
                        Œ±2
                        core.option.Option.None) in
                  let* Œ±0 := M.alloc Œ±3 in
                  let* Œ±1 := M.read Œ±0 in
                  let* Œ±2 := never_to_any Œ±1 in
                  M.alloc Œ±2
                else
                  M.alloc tt
              end) :
              Ty.tuple []
          ] in
      M.read ((M.var "subtle::CtOption::Get_value") self)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn unwrap_or(self, def: T) -> T
      where
          T: ConditionallySelectable,
      {
          T::conditional_select(&def, &self.value, self.is_some)
      }
  *)
  Definition unwrap_or (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; def] =>
      let* self := M.alloc self in
      let* def := M.alloc def in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConditionallySelectable.conditional_select
            (Self := T)
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read ((M.var "subtle::CtOption::Get_is_some") self) in
      M.call
        (Œ±0
          (borrow def)
          (borrow ((M.var "subtle::CtOption::Get_value") self))
          Œ±1)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn unwrap_or_else<F>(self, f: F) -> T
      where
          T: ConditionallySelectable,
          F: FnOnce() -> T,
      {
          T::conditional_select(&f(), &self.value, self.is_some)
      }
  *)
  Definition unwrap_or_else (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [F], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConditionallySelectable.conditional_select
            (Self := T)
            (Trait := ‚Ñê))) in
      let* Œ±1 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.function.FnOnce.call_once
            (Self := F)
            (Args := Ty.tuple [])
            (Trait := ‚Ñê))) in
      let* Œ±2 := M.read f in
      let* Œ±3 := M.call (Œ±1 Œ±2 tt) in
      let* Œ±4 := M.alloc Œ±3 in
      let* Œ±5 := M.read ((M.var "subtle::CtOption::Get_is_some") self) in
      M.call
        (Œ±0
          (borrow Œ±4)
          (borrow ((M.var "subtle::CtOption::Get_value") self))
          Œ±5)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn is_some(&self) -> Choice {
          self.is_some
      }
  *)
  Definition is_some (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read ((M.var "subtle::CtOption::Get_is_some") (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  (*
      pub fn is_none(&self) -> Choice {
          !self.is_some
      }
  *)
  Definition is_none (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.Not.not
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read self in
      let* Œ±2 := M.read ((M.var "subtle::CtOption::Get_is_some") (deref Œ±1)) in
      M.call (Œ±0 Œ±2)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn map<U, F>(self, f: F) -> CtOption<U>
      where
          T: Default + ConditionallySelectable,
          F: FnOnce(T) -> U,
      {
          CtOption::new(
              f(T::conditional_select(
                  &T::default(),
                  &self.value,
                  self.is_some,
              )),
              self.is_some,
          )
      }
  *)
  Definition map (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [U; F], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.function.FnOnce.call_once
            (Self := F)
            (Args := Ty.tuple [T])
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read f in
      let* Œ±2 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConditionallySelectable.conditional_select
            (Self := T)
            (Trait := ‚Ñê))) in
      let* Œ±3 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default (Self := T) (Trait := ‚Ñê))) in
      let* Œ±4 := M.call Œ±3 in
      let* Œ±5 := M.alloc Œ±4 in
      let* Œ±6 := M.read ((M.var "subtle::CtOption::Get_is_some") self) in
      let* Œ±7 :=
        M.call
          (Œ±2
            (borrow Œ±5)
            (borrow ((M.var "subtle::CtOption::Get_value") self))
            Œ±6) in
      let* Œ±8 := M.call (Œ±0 Œ±1 (Œ±7)) in
      let* Œ±9 := M.read ((M.var "subtle::CtOption::Get_is_some") self) in
      M.call ((Ty.apply (Ty.path "subtle::CtOption") [U])::["new"] Œ±8 Œ±9)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn and_then<U, F>(self, f: F) -> CtOption<U>
      where
          T: Default + ConditionallySelectable,
          F: FnOnce(T) -> CtOption<U>,
      {
          let mut tmp = f(T::conditional_select(
              &T::default(),
              &self.value,
              self.is_some,
          ));
          tmp.is_some &= self.is_some;
  
          tmp
      }
  *)
  Definition and_then (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [U; F], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* tmp :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.function.FnOnce.call_once
              (Self := F)
              (Args := Ty.tuple [T])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read f in
        let* Œ±2 :=
          ltac:(M.get_method (fun ‚Ñê =>
            subtle.ConditionallySelectable.conditional_select
              (Self := T)
              (Trait := ‚Ñê))) in
        let* Œ±3 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.default.Default.default (Self := T) (Trait := ‚Ñê))) in
        let* Œ±4 := M.call Œ±3 in
        let* Œ±5 := M.alloc Œ±4 in
        let* Œ±6 := M.read ((M.var "subtle::CtOption::Get_is_some") self) in
        let* Œ±7 :=
          M.call
            (Œ±2
              (borrow Œ±5)
              (borrow ((M.var "subtle::CtOption::Get_value") self))
              Œ±6) in
        let* Œ±8 := M.call (Œ±0 Œ±1 (Œ±7)) in
        M.alloc Œ±8 in
      let* _ :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAndAssign.bitand_assign
              (Self := Ty.path "subtle::Choice")
              (Rhs := Ty.path "subtle::Choice")
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read ((M.var "subtle::CtOption::Get_is_some") self) in
        let* Œ±2 :=
          M.call
            (Œ±0
              (borrow_mut ((M.var "subtle::CtOption::Get_is_some") tmp))
              Œ±1) in
        M.alloc Œ±2 in
      M.read tmp
    | _, _ => M.impossible
    end.
  
  (*
      pub fn or_else<F>(self, f: F) -> CtOption<T>
      where
          T: ConditionallySelectable,
          F: FnOnce() -> CtOption<T>,
      {
          let is_none = self.is_none();
          let f = f();
  
          Self::conditional_select(&self, &f, is_none)
      }
  *)
  Definition or_else (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [F], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* is_none :=
        let* Œ±0 :=
          M.call
            ((Ty.apply (Ty.path "subtle::CtOption") [T])::["is_none"]
              (borrow self)) in
        M.alloc Œ±0 in
      let* f :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.function.FnOnce.call_once
              (Self := F)
              (Args := Ty.tuple [])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read f in
        let* Œ±2 := M.call (Œ±0 Œ±1 tt) in
        M.alloc Œ±2 in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConditionallySelectable.conditional_select
            (Self := Ty.apply (Ty.path "subtle::CtOption") [T])
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read is_none in
      let* Œ±2 := M.call (Œ±0 (borrow self) (borrow f) Œ±1) in
      let* Œ±0 := M.alloc Œ±2 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
End Impl_subtle_CtOption_T.

Module Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "subtle::CtOption") [T].
  
  (*
      fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
          CtOption::new(
              T::conditional_select(&a.value, &b.value, choice),
              Choice::conditional_select(&a.is_some, &b.is_some, choice),
          )
      }
  *)
  Definition conditional_select (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [a; b; choice] =>
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* choice := M.alloc choice in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConditionallySelectable.conditional_select
            (Self := T)
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read a in
      let* Œ±2 := M.read b in
      let* Œ±3 := M.read choice in
      let* Œ±4 :=
        M.call
          (Œ±0
            (borrow ((M.var "subtle::CtOption::Get_value") (deref Œ±1)))
            (borrow ((M.var "subtle::CtOption::Get_value") (deref Œ±2)))
            Œ±3) in
      let* Œ±5 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConditionallySelectable.conditional_select
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±6 := M.read a in
      let* Œ±7 := M.read b in
      let* Œ±8 := M.read choice in
      let* Œ±9 :=
        M.call
          (Œ±5
            (borrow ((M.var "subtle::CtOption::Get_is_some") (deref Œ±6)))
            (borrow ((M.var "subtle::CtOption::Get_is_some") (deref Œ±7)))
            Œ±8) in
      M.call ((Ty.apply (Ty.path "subtle::CtOption") [T])::["new"] Œ±4 Œ±9)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (T : Ty.t) : Instance.t :=
    [("conditional_select", InstanceField.Method (conditional_select T))].
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "subtle::CtOption") [T].
  
  (*
      fn ct_eq(&self, rhs: &CtOption<T>) -> Choice {
          let a = self.is_some();
          let b = rhs.is_some();
  
          (a & b & self.value.ct_eq(&rhs.value)) | (!a & !b)
      }
  *)
  Definition ct_eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* a :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          M.call
            ((Ty.apply (Ty.path "subtle::CtOption") [T])::["is_some"] Œ±0) in
        M.alloc Œ±1 in
      let* b :=
        let* Œ±0 := M.read rhs in
        let* Œ±1 :=
          M.call
            ((Ty.apply (Ty.path "subtle::CtOption") [T])::["is_some"] Œ±0) in
        M.alloc Œ±1 in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitOr.bitor
            (Self := Ty.path "subtle::Choice")
            (Rhs := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitAnd.bitand
            (Self := Ty.path "subtle::Choice")
            (Rhs := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±2 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitAnd.bitand
            (Self := Ty.path "subtle::Choice")
            (Rhs := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±3 := M.read a in
      let* Œ±4 := M.read b in
      let* Œ±5 := M.call (Œ±2 Œ±3 Œ±4) in
      let* Œ±6 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeEq.ct_eq (Self := T) (Trait := ‚Ñê))) in
      let* Œ±7 := M.read self in
      let* Œ±8 := M.read rhs in
      let* Œ±9 :=
        M.call
          (Œ±6
            (borrow ((M.var "subtle::CtOption::Get_value") (deref Œ±7)))
            (borrow ((M.var "subtle::CtOption::Get_value") (deref Œ±8)))) in
      let* Œ±10 := M.call (Œ±1 Œ±5 Œ±9) in
      let* Œ±11 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitAnd.bitand
            (Self := Ty.path "subtle::Choice")
            (Rhs := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±12 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.Not.not
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±13 := M.read a in
      let* Œ±14 := M.call (Œ±12 Œ±13) in
      let* Œ±15 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.Not.not
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±16 := M.read b in
      let* Œ±17 := M.call (Œ±15 Œ±16) in
      let* Œ±18 := M.call (Œ±11 Œ±14 Œ±17) in
      let* Œ±19 := M.call (Œ±0 Œ±10 Œ±18) in
      let* Œ±0 := M.alloc Œ±19 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (T : Ty.t) : Instance.t :=
    [("ct_eq", InstanceField.Method (ct_eq T))].
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.

(* Trait *)
Module ConstantTimeGreater.
  
End ConstantTimeGreater.

Module Impl_subtle_ConstantTimeGreater_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  (*
              fn ct_gt(&self, other: &$t_u) -> Choice {
                  let gtb = self & !other; // All the bits in self that are greater than their corresponding bits in other.
                  let mut ltb = !self & other; // All the bits in self that are less than their corresponding bits in other.
                  let mut pow = 1;
  
                  // Less-than operator is okay here because it's dependent on the bit-width.
                  while pow < $bit_width {
                      ltb |= ltb >> pow; // Bit-smear the highest set bit to the right.
                      pow += pow;
                  }
                  let mut bit = gtb & !ltb; // Select the highest set bit.
                  let mut pow = 1;
  
                  while pow < $bit_width {
                      bit |= bit >> pow; // Shift it to the right until we end up with either 0 or 1.
                      pow += pow;
                  }
                  // XXX We should possibly do the above flattening to 0 or 1 in the
                  //     Choice constructor rather than making it a debug error?
                  Choice::from((bit & 1) as u8)
              }
  *)
  Definition ct_gt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* gtb :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u8"])
              (Rhs := Ty.path "u8")
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.Not.not
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u8"])
              (Trait := ‚Ñê))) in
        let* Œ±3 := M.read other in
        let* Œ±4 := M.call (Œ±2 Œ±3) in
        let* Œ±5 := M.call (Œ±0 Œ±1 Œ±4) in
        M.alloc Œ±5 in
      let* ltb :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.path "u8")
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u8"])
              (Trait := ‚Ñê))) in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.Not.not
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u8"])
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.call (Œ±1 Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.call (Œ±0 Œ±3 Œ±4) in
        M.alloc Œ±5 in
      let* pow := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
      let* _ :=
        M.loop
          (let* Œ±0 := M.read pow in
          let* Œ±1 :=
            M.alloc
              ((M.var "BinOp::Pure::lt")
                Œ±0
                ((Integer.of_Z 8) : Ty.path "i32")) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* _ :=
              let Œ≤ := ltb in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read ltb in
              let* Œ±2 := M.read pow in
              let* Œ±3 := (M.var "BinOp::Panic::shr") Œ±1 Œ±2 in
              (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±3) in
            let* _ :=
              let Œ≤ := pow in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read pow in
              let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
              (M.var "assign") Œ≤ Œ±2 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.break in
              let* Œ±1 := M.read Œ±0 in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2 in
            let* Œ±0 := M.alloc tt in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2) in
      let* bit :=
        let* Œ±0 := M.read gtb in
        let* Œ±1 := M.read ltb in
        M.alloc ((M.var "BinOp::Pure::bit_and") Œ±0 ((M.var "UnOp::not") Œ±1)) in
      let* pow := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
      let* _ :=
        M.loop
          (let* Œ±0 := M.read pow in
          let* Œ±1 :=
            M.alloc
              ((M.var "BinOp::Pure::lt")
                Œ±0
                ((Integer.of_Z 8) : Ty.path "i32")) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* _ :=
              let Œ≤ := bit in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read bit in
              let* Œ±2 := M.read pow in
              let* Œ±3 := (M.var "BinOp::Panic::shr") Œ±1 Œ±2 in
              (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±3) in
            let* _ :=
              let Œ≤ := pow in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read pow in
              let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
              (M.var "assign") Œ≤ Œ±2 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.break in
              let* Œ±1 := M.read Œ±0 in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2 in
            let* Œ±0 := M.alloc tt in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.From.from
            (Self := Ty.path "subtle::Choice")
            (T := Ty.path "u8")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read bit in
      let* Œ±2 :=
        M.alloc
          ((M.var "BinOp::Pure::bit_and")
            Œ±1
            ((Integer.of_Z 1) : Ty.path "u8")) in
      let* Œ±3 := M.read (use Œ±2) in
      let* Œ±4 := M.call (Œ±0 Œ±3) in
      let* Œ±0 := M.alloc Œ±4 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_gt", InstanceField.Method ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u8.

Module Impl_subtle_ConstantTimeGreater_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  (*
              fn ct_gt(&self, other: &$t_u) -> Choice {
                  let gtb = self & !other; // All the bits in self that are greater than their corresponding bits in other.
                  let mut ltb = !self & other; // All the bits in self that are less than their corresponding bits in other.
                  let mut pow = 1;
  
                  // Less-than operator is okay here because it's dependent on the bit-width.
                  while pow < $bit_width {
                      ltb |= ltb >> pow; // Bit-smear the highest set bit to the right.
                      pow += pow;
                  }
                  let mut bit = gtb & !ltb; // Select the highest set bit.
                  let mut pow = 1;
  
                  while pow < $bit_width {
                      bit |= bit >> pow; // Shift it to the right until we end up with either 0 or 1.
                      pow += pow;
                  }
                  // XXX We should possibly do the above flattening to 0 or 1 in the
                  //     Choice constructor rather than making it a debug error?
                  Choice::from((bit & 1) as u8)
              }
  *)
  Definition ct_gt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* gtb :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u16"])
              (Rhs := Ty.path "u16")
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.Not.not
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u16"])
              (Trait := ‚Ñê))) in
        let* Œ±3 := M.read other in
        let* Œ±4 := M.call (Œ±2 Œ±3) in
        let* Œ±5 := M.call (Œ±0 Œ±1 Œ±4) in
        M.alloc Œ±5 in
      let* ltb :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.path "u16")
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u16"])
              (Trait := ‚Ñê))) in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.Not.not
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u16"])
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.call (Œ±1 Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.call (Œ±0 Œ±3 Œ±4) in
        M.alloc Œ±5 in
      let* pow := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
      let* _ :=
        M.loop
          (let* Œ±0 := M.read pow in
          let* Œ±1 :=
            M.alloc
              ((M.var "BinOp::Pure::lt")
                Œ±0
                ((Integer.of_Z 16) : Ty.path "i32")) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* _ :=
              let Œ≤ := ltb in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read ltb in
              let* Œ±2 := M.read pow in
              let* Œ±3 := (M.var "BinOp::Panic::shr") Œ±1 Œ±2 in
              (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±3) in
            let* _ :=
              let Œ≤ := pow in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read pow in
              let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
              (M.var "assign") Œ≤ Œ±2 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.break in
              let* Œ±1 := M.read Œ±0 in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2 in
            let* Œ±0 := M.alloc tt in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2) in
      let* bit :=
        let* Œ±0 := M.read gtb in
        let* Œ±1 := M.read ltb in
        M.alloc ((M.var "BinOp::Pure::bit_and") Œ±0 ((M.var "UnOp::not") Œ±1)) in
      let* pow := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
      let* _ :=
        M.loop
          (let* Œ±0 := M.read pow in
          let* Œ±1 :=
            M.alloc
              ((M.var "BinOp::Pure::lt")
                Œ±0
                ((Integer.of_Z 16) : Ty.path "i32")) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* _ :=
              let Œ≤ := bit in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read bit in
              let* Œ±2 := M.read pow in
              let* Œ±3 := (M.var "BinOp::Panic::shr") Œ±1 Œ±2 in
              (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±3) in
            let* _ :=
              let Œ≤ := pow in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read pow in
              let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
              (M.var "assign") Œ≤ Œ±2 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.break in
              let* Œ±1 := M.read Œ±0 in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2 in
            let* Œ±0 := M.alloc tt in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.From.from
            (Self := Ty.path "subtle::Choice")
            (T := Ty.path "u8")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read bit in
      let* Œ±2 :=
        M.call
          (Œ±0
            (rust_cast
              ((M.var "BinOp::Pure::bit_and")
                Œ±1
                ((Integer.of_Z 1) : Ty.path "u16")))) in
      let* Œ±0 := M.alloc Œ±2 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_gt", InstanceField.Method ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u16.

Module Impl_subtle_ConstantTimeGreater_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  (*
              fn ct_gt(&self, other: &$t_u) -> Choice {
                  let gtb = self & !other; // All the bits in self that are greater than their corresponding bits in other.
                  let mut ltb = !self & other; // All the bits in self that are less than their corresponding bits in other.
                  let mut pow = 1;
  
                  // Less-than operator is okay here because it's dependent on the bit-width.
                  while pow < $bit_width {
                      ltb |= ltb >> pow; // Bit-smear the highest set bit to the right.
                      pow += pow;
                  }
                  let mut bit = gtb & !ltb; // Select the highest set bit.
                  let mut pow = 1;
  
                  while pow < $bit_width {
                      bit |= bit >> pow; // Shift it to the right until we end up with either 0 or 1.
                      pow += pow;
                  }
                  // XXX We should possibly do the above flattening to 0 or 1 in the
                  //     Choice constructor rather than making it a debug error?
                  Choice::from((bit & 1) as u8)
              }
  *)
  Definition ct_gt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* gtb :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u32"])
              (Rhs := Ty.path "u32")
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.Not.not
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u32"])
              (Trait := ‚Ñê))) in
        let* Œ±3 := M.read other in
        let* Œ±4 := M.call (Œ±2 Œ±3) in
        let* Œ±5 := M.call (Œ±0 Œ±1 Œ±4) in
        M.alloc Œ±5 in
      let* ltb :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.path "u32")
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u32"])
              (Trait := ‚Ñê))) in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.Not.not
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u32"])
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.call (Œ±1 Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.call (Œ±0 Œ±3 Œ±4) in
        M.alloc Œ±5 in
      let* pow := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
      let* _ :=
        M.loop
          (let* Œ±0 := M.read pow in
          let* Œ±1 :=
            M.alloc
              ((M.var "BinOp::Pure::lt")
                Œ±0
                ((Integer.of_Z 32) : Ty.path "i32")) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* _ :=
              let Œ≤ := ltb in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read ltb in
              let* Œ±2 := M.read pow in
              let* Œ±3 := (M.var "BinOp::Panic::shr") Œ±1 Œ±2 in
              (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±3) in
            let* _ :=
              let Œ≤ := pow in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read pow in
              let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
              (M.var "assign") Œ≤ Œ±2 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.break in
              let* Œ±1 := M.read Œ±0 in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2 in
            let* Œ±0 := M.alloc tt in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2) in
      let* bit :=
        let* Œ±0 := M.read gtb in
        let* Œ±1 := M.read ltb in
        M.alloc ((M.var "BinOp::Pure::bit_and") Œ±0 ((M.var "UnOp::not") Œ±1)) in
      let* pow := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
      let* _ :=
        M.loop
          (let* Œ±0 := M.read pow in
          let* Œ±1 :=
            M.alloc
              ((M.var "BinOp::Pure::lt")
                Œ±0
                ((Integer.of_Z 32) : Ty.path "i32")) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* _ :=
              let Œ≤ := bit in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read bit in
              let* Œ±2 := M.read pow in
              let* Œ±3 := (M.var "BinOp::Panic::shr") Œ±1 Œ±2 in
              (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±3) in
            let* _ :=
              let Œ≤ := pow in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read pow in
              let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
              (M.var "assign") Œ≤ Œ±2 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.break in
              let* Œ±1 := M.read Œ±0 in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2 in
            let* Œ±0 := M.alloc tt in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.From.from
            (Self := Ty.path "subtle::Choice")
            (T := Ty.path "u8")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read bit in
      let* Œ±2 :=
        M.call
          (Œ±0
            (rust_cast
              ((M.var "BinOp::Pure::bit_and")
                Œ±1
                ((Integer.of_Z 1) : Ty.path "u32")))) in
      let* Œ±0 := M.alloc Œ±2 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_gt", InstanceField.Method ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u32.

Module Impl_subtle_ConstantTimeGreater_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  (*
              fn ct_gt(&self, other: &$t_u) -> Choice {
                  let gtb = self & !other; // All the bits in self that are greater than their corresponding bits in other.
                  let mut ltb = !self & other; // All the bits in self that are less than their corresponding bits in other.
                  let mut pow = 1;
  
                  // Less-than operator is okay here because it's dependent on the bit-width.
                  while pow < $bit_width {
                      ltb |= ltb >> pow; // Bit-smear the highest set bit to the right.
                      pow += pow;
                  }
                  let mut bit = gtb & !ltb; // Select the highest set bit.
                  let mut pow = 1;
  
                  while pow < $bit_width {
                      bit |= bit >> pow; // Shift it to the right until we end up with either 0 or 1.
                      pow += pow;
                  }
                  // XXX We should possibly do the above flattening to 0 or 1 in the
                  //     Choice constructor rather than making it a debug error?
                  Choice::from((bit & 1) as u8)
              }
  *)
  Definition ct_gt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* gtb :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u64"])
              (Rhs := Ty.path "u64")
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read self in
        let* Œ±2 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.Not.not
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u64"])
              (Trait := ‚Ñê))) in
        let* Œ±3 := M.read other in
        let* Œ±4 := M.call (Œ±2 Œ±3) in
        let* Œ±5 := M.call (Œ±0 Œ±1 Œ±4) in
        M.alloc Œ±5 in
      let* ltb :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.BitAnd.bitand
              (Self := Ty.path "u64")
              (Rhs := Ty.apply (Ty.path "ref") [Ty.path "u64"])
              (Trait := ‚Ñê))) in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.bit.Not.not
              (Self := Ty.apply (Ty.path "ref") [Ty.path "u64"])
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.read self in
        let* Œ±3 := M.call (Œ±1 Œ±2) in
        let* Œ±4 := M.read other in
        let* Œ±5 := M.call (Œ±0 Œ±3 Œ±4) in
        M.alloc Œ±5 in
      let* pow := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
      let* _ :=
        M.loop
          (let* Œ±0 := M.read pow in
          let* Œ±1 :=
            M.alloc
              ((M.var "BinOp::Pure::lt")
                Œ±0
                ((Integer.of_Z 64) : Ty.path "i32")) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* _ :=
              let Œ≤ := ltb in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read ltb in
              let* Œ±2 := M.read pow in
              let* Œ±3 := (M.var "BinOp::Panic::shr") Œ±1 Œ±2 in
              (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±3) in
            let* _ :=
              let Œ≤ := pow in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read pow in
              let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
              (M.var "assign") Œ≤ Œ±2 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.break in
              let* Œ±1 := M.read Œ±0 in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2 in
            let* Œ±0 := M.alloc tt in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2) in
      let* bit :=
        let* Œ±0 := M.read gtb in
        let* Œ±1 := M.read ltb in
        M.alloc ((M.var "BinOp::Pure::bit_and") Œ±0 ((M.var "UnOp::not") Œ±1)) in
      let* pow := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
      let* _ :=
        M.loop
          (let* Œ±0 := M.read pow in
          let* Œ±1 :=
            M.alloc
              ((M.var "BinOp::Pure::lt")
                Œ±0
                ((Integer.of_Z 64) : Ty.path "i32")) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* _ :=
              let Œ≤ := bit in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read bit in
              let* Œ±2 := M.read pow in
              let* Œ±3 := (M.var "BinOp::Panic::shr") Œ±1 Œ±2 in
              (M.var "assign") Œ≤ ((M.var "BinOp::Pure::bit_or") Œ±0 Œ±3) in
            let* _ :=
              let Œ≤ := pow in
              let* Œ±0 := M.read Œ≤ in
              let* Œ±1 := M.read pow in
              let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
              (M.var "assign") Œ≤ Œ±2 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.break in
              let* Œ±1 := M.read Œ±0 in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2 in
            let* Œ±0 := M.alloc tt in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2) in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.From.from
            (Self := Ty.path "subtle::Choice")
            (T := Ty.path "u8")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read bit in
      let* Œ±2 :=
        M.call
          (Œ±0
            (rust_cast
              ((M.var "BinOp::Pure::bit_and")
                Œ±1
                ((Integer.of_Z 1) : Ty.path "u64")))) in
      let* Œ±0 := M.alloc Œ±2 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("ct_gt", InstanceField.Method ct_gt)].
End Impl_subtle_ConstantTimeGreater_for_u64.

(* Trait *)
Module ConstantTimeLess.
  Definition ct_lt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.BitAnd.bitand
            (Self := Ty.path "subtle::Choice")
            (Rhs := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±1 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.Not.not
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±2 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeGreater.ct_gt (Self := Self) (Trait := ‚Ñê))) in
      let* Œ±3 := M.read self in
      let* Œ±4 := M.read other in
      let* Œ±5 := M.call (Œ±2 Œ±3 Œ±4) in
      let* Œ±6 := M.call (Œ±1 Œ±5) in
      let* Œ±7 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.bit.Not.not
            (Self := Ty.path "subtle::Choice")
            (Trait := ‚Ñê))) in
      let* Œ±8 :=
        ltac:(M.get_method (fun ‚Ñê =>
          subtle.ConstantTimeEq.ct_eq (Self := Self) (Trait := ‚Ñê))) in
      let* Œ±9 := M.read self in
      let* Œ±10 := M.read other in
      let* Œ±11 := M.call (Œ±8 Œ±9 Œ±10) in
      let* Œ±12 := M.call (Œ±7 Œ±11) in
      M.call (Œ±0 Œ±6 Œ±12)
    | _, _ => M.impossible
    end.
  
  Axiom ProvidedMethod_ct_lt :
    M.IsProvidedMethod "subtle::ConstantTimeLess" ct_lt.
End ConstantTimeLess.

Module Impl_subtle_ConstantTimeLess_for_u8.
  Definition Self : Ty.t := Ty.path "u8".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_subtle_ConstantTimeLess_for_u8.

Module Impl_subtle_ConstantTimeLess_for_u16.
  Definition Self : Ty.t := Ty.path "u16".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_subtle_ConstantTimeLess_for_u16.

Module Impl_subtle_ConstantTimeLess_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_subtle_ConstantTimeLess_for_u32.

Module Impl_subtle_ConstantTimeLess_for_u64.
  Definition Self : Ty.t := Ty.path "u64".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_subtle_ConstantTimeLess_for_u64.
