(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Choice.
Section Choice.
  Record t : Set := {
    x0 : u8.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
End Choice.
End Choice.

Module  Impl_core_marker_Copy_for_subtle_Choice_t.
Section Impl_core_marker_Copy_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_subtle_Choice_t.
End Impl_core_marker_Copy_for_subtle_Choice_t.

Module  Impl_core_clone_Clone_for_subtle_Choice_t.
Section Impl_core_clone_Clone_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref ltac:(Self)) : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* _ : M.Val unit := M.alloc tt in
    let* α0 : ref subtle.Choice.t := M.read self in
    M.read (deref α0).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_subtle_Choice_t.
End Impl_core_clone_Clone_for_subtle_Choice_t.

Module  Impl_core_fmt_Debug_for_subtle_Choice_t.
Section Impl_core_fmt_Debug_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* f : M.Val (mut_ref core.fmt.Formatter.t) := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "Choice") in
    let* α2 : ref subtle.Choice.t := M.read self in
    let* α3 : M.Val (ref u8.t) := M.alloc (borrow (deref α2).["0"]) in
    let* α4 : M.Val (ref (ref u8.t)) := M.alloc (borrow α3) in
    let* α5 : ref type not implemented :=
      M.read (pointer_coercion "Unsize" α4) in
    M.call (core.fmt.Formatter.t::["debug_tuple_field1_finish"] α0 α1 α5).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_subtle_Choice_t.
End Impl_core_fmt_Debug_for_subtle_Choice_t.

Module  Impl_subtle_Choice_t.
Section Impl_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      pub fn unwrap_u8(&self) -> u8 {
          self.0
      }
  *)
  Definition unwrap_u8 (self : ref ltac:(Self)) : M u8.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* α0 : ref subtle.Choice.t := M.read self in
    M.read (deref α0).["0"].
  
  Global Instance AssociatedFunction_unwrap_u8 :
    Notations.DoubleColon ltac:(Self) "unwrap_u8" := {
    Notations.double_colon := unwrap_u8;
  }.
End Impl_subtle_Choice_t.
End Impl_subtle_Choice_t.

Module  Impl_core_convert_From_subtle_Choice_t_for_bool_t.
Section Impl_core_convert_From_subtle_Choice_t_for_bool_t.
  Ltac Self := exact bool.t.
  
  (*
      fn from(source: Choice) -> bool {
          debug_assert!((source.0 == 0u8) | (source.0 == 1u8));
          source.0 != 0
      }
  *)
  Definition from (source : subtle.Choice.t) : M bool.t :=
    let* source : M.Val subtle.Choice.t := M.alloc source in
    let* _ : M.Val unit :=
      if (use true : bool) then
        let* _ : M.Val unit :=
          let* α0 : u8.t := M.read source.["0"] in
          let* α1 : u8.t := M.read source.["0"] in
          if
            (use
              (UnOp.not
                (BinOp.Pure.bit_or
                  (BinOp.Pure.eq α0 (Integer.of_Z 0))
                  (BinOp.Pure.eq α1 (Integer.of_Z 1))))
            : bool)
          then
            let* α0 : ref str.t :=
              M.read
                (mk_str
                  "assertion failed: (source.0 == 0u8) | (source.0 == 1u8)") in
            let* α1 : never.t := M.call (core.panicking.panic α0) in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        M.alloc tt
      else
        M.alloc tt in
    let* α0 : u8.t := M.read source.["0"] in
    let* α0 : M.Val bool.t := M.alloc (BinOp.Pure.ne α0 (Integer.of_Z 0)) in
    M.read α0.
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon ltac:(Self) "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait ltac:(Self) (T := subtle.Choice.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_subtle_Choice_t_for_bool_t.
End Impl_core_convert_From_subtle_Choice_t_for_bool_t.

Module  Impl_core_ops_bit_BitAnd_for_subtle_Choice_t.
Section Impl_core_ops_bit_BitAnd_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      type Output = Choice;
  *)
  Definition Output : Set := subtle.Choice.t.
  
  (*
      fn bitand(self, rhs: Choice) -> Choice {
          (self.0 & rhs.0).into()
      }
  *)
  Definition bitand
      (self : ltac:(Self))
      (rhs : subtle.Choice.t)
      : M subtle.Choice.t :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* rhs : M.Val subtle.Choice.t := M.alloc rhs in
    let* α0 : u8.t := M.read self.["0"] in
    let* α1 : u8.t := M.read rhs.["0"] in
    M.call
      ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
        (BinOp.Pure.bit_and α0 α1)).
  
  Global Instance AssociatedFunction_bitand :
    Notations.DoubleColon ltac:(Self) "bitand" := {
    Notations.double_colon := bitand;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitAnd.Trait ltac:(Self)
      (Rhs := core.ops.bit.BitAnd.Default.Rhs ltac:(Self)) := {
    core.ops.bit.BitAnd.Output := Output;
    core.ops.bit.BitAnd.bitand := bitand;
  }.
End Impl_core_ops_bit_BitAnd_for_subtle_Choice_t.
End Impl_core_ops_bit_BitAnd_for_subtle_Choice_t.

Module  Impl_core_ops_bit_BitAndAssign_for_subtle_Choice_t.
Section Impl_core_ops_bit_BitAndAssign_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      fn bitand_assign(&mut self, rhs: Choice) {
          *self = *self & rhs;
      }
  *)
  Definition bitand_assign
      (self : mut_ref ltac:(Self))
      (rhs : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* rhs : M.Val subtle.Choice.t := M.alloc rhs in
    let* _ : M.Val unit :=
      let* α0 : mut_ref subtle.Choice.t := M.read self in
      let* α1 : mut_ref subtle.Choice.t := M.read self in
      let* α2 : subtle.Choice.t := M.read (deref α1) in
      let* α3 : subtle.Choice.t := M.read rhs in
      let* α4 : subtle.Choice.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := subtle.Choice.t)
              (Trait := ltac:(refine _)))
            α2
            α3) in
      assign (deref α0) α4 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_bitand_assign :
    Notations.DoubleColon ltac:(Self) "bitand_assign" := {
    Notations.double_colon := bitand_assign;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitAndAssign.Trait ltac:(Self)
      (Rhs := core.ops.bit.BitAndAssign.Default.Rhs ltac:(Self)) := {
    core.ops.bit.BitAndAssign.bitand_assign := bitand_assign;
  }.
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice_t.
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice_t.

Module  Impl_core_ops_bit_BitOr_for_subtle_Choice_t.
Section Impl_core_ops_bit_BitOr_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      type Output = Choice;
  *)
  Definition Output : Set := subtle.Choice.t.
  
  (*
      fn bitor(self, rhs: Choice) -> Choice {
          (self.0 | rhs.0).into()
      }
  *)
  Definition bitor
      (self : ltac:(Self))
      (rhs : subtle.Choice.t)
      : M subtle.Choice.t :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* rhs : M.Val subtle.Choice.t := M.alloc rhs in
    let* α0 : u8.t := M.read self.["0"] in
    let* α1 : u8.t := M.read rhs.["0"] in
    M.call
      ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
        (BinOp.Pure.bit_or α0 α1)).
  
  Global Instance AssociatedFunction_bitor :
    Notations.DoubleColon ltac:(Self) "bitor" := {
    Notations.double_colon := bitor;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitOr.Trait ltac:(Self)
      (Rhs := core.ops.bit.BitOr.Default.Rhs ltac:(Self)) := {
    core.ops.bit.BitOr.Output := Output;
    core.ops.bit.BitOr.bitor := bitor;
  }.
End Impl_core_ops_bit_BitOr_for_subtle_Choice_t.
End Impl_core_ops_bit_BitOr_for_subtle_Choice_t.

Module  Impl_core_ops_bit_BitOrAssign_for_subtle_Choice_t.
Section Impl_core_ops_bit_BitOrAssign_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      fn bitor_assign(&mut self, rhs: Choice) {
          *self = *self | rhs;
      }
  *)
  Definition bitor_assign
      (self : mut_ref ltac:(Self))
      (rhs : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* rhs : M.Val subtle.Choice.t := M.alloc rhs in
    let* _ : M.Val unit :=
      let* α0 : mut_ref subtle.Choice.t := M.read self in
      let* α1 : mut_ref subtle.Choice.t := M.read self in
      let* α2 : subtle.Choice.t := M.read (deref α1) in
      let* α3 : subtle.Choice.t := M.read rhs in
      let* α4 : subtle.Choice.t :=
        M.call
          ((core.ops.bit.BitOr.bitor
              (Self := subtle.Choice.t)
              (Trait := ltac:(refine _)))
            α2
            α3) in
      assign (deref α0) α4 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_bitor_assign :
    Notations.DoubleColon ltac:(Self) "bitor_assign" := {
    Notations.double_colon := bitor_assign;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitOrAssign.Trait ltac:(Self)
      (Rhs := core.ops.bit.BitOrAssign.Default.Rhs ltac:(Self)) := {
    core.ops.bit.BitOrAssign.bitor_assign := bitor_assign;
  }.
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice_t.
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice_t.

Module  Impl_core_ops_bit_BitXor_for_subtle_Choice_t.
Section Impl_core_ops_bit_BitXor_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      type Output = Choice;
  *)
  Definition Output : Set := subtle.Choice.t.
  
  (*
      fn bitxor(self, rhs: Choice) -> Choice {
          (self.0 ^ rhs.0).into()
      }
  *)
  Definition bitxor
      (self : ltac:(Self))
      (rhs : subtle.Choice.t)
      : M subtle.Choice.t :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* rhs : M.Val subtle.Choice.t := M.alloc rhs in
    let* α0 : u8.t := M.read self.["0"] in
    let* α1 : u8.t := M.read rhs.["0"] in
    M.call
      ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
        (BinOp.Pure.bit_xor α0 α1)).
  
  Global Instance AssociatedFunction_bitxor :
    Notations.DoubleColon ltac:(Self) "bitxor" := {
    Notations.double_colon := bitxor;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitXor.Trait ltac:(Self)
      (Rhs := core.ops.bit.BitXor.Default.Rhs ltac:(Self)) := {
    core.ops.bit.BitXor.Output := Output;
    core.ops.bit.BitXor.bitxor := bitxor;
  }.
End Impl_core_ops_bit_BitXor_for_subtle_Choice_t.
End Impl_core_ops_bit_BitXor_for_subtle_Choice_t.

Module  Impl_core_ops_bit_BitXorAssign_for_subtle_Choice_t.
Section Impl_core_ops_bit_BitXorAssign_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      fn bitxor_assign(&mut self, rhs: Choice) {
          *self = *self ^ rhs;
      }
  *)
  Definition bitxor_assign
      (self : mut_ref ltac:(Self))
      (rhs : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* rhs : M.Val subtle.Choice.t := M.alloc rhs in
    let* _ : M.Val unit :=
      let* α0 : mut_ref subtle.Choice.t := M.read self in
      let* α1 : mut_ref subtle.Choice.t := M.read self in
      let* α2 : subtle.Choice.t := M.read (deref α1) in
      let* α3 : subtle.Choice.t := M.read rhs in
      let* α4 : subtle.Choice.t :=
        M.call
          ((core.ops.bit.BitXor.bitxor
              (Self := subtle.Choice.t)
              (Trait := ltac:(refine _)))
            α2
            α3) in
      assign (deref α0) α4 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_bitxor_assign :
    Notations.DoubleColon ltac:(Self) "bitxor_assign" := {
    Notations.double_colon := bitxor_assign;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitXorAssign.Trait ltac:(Self)
      (Rhs := core.ops.bit.BitXorAssign.Default.Rhs ltac:(Self)) := {
    core.ops.bit.BitXorAssign.bitxor_assign := bitxor_assign;
  }.
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice_t.
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice_t.

Module  Impl_core_ops_bit_Not_for_subtle_Choice_t.
Section Impl_core_ops_bit_Not_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      type Output = Choice;
  *)
  Definition Output : Set := subtle.Choice.t.
  
  (*
      fn not(self) -> Choice {
          (1u8 & (!self.0)).into()
      }
  *)
  Definition not (self : ltac:(Self)) : M subtle.Choice.t :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* α0 : u8.t := M.read self.["0"] in
    M.call
      ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
        (BinOp.Pure.bit_and (Integer.of_Z 1) (UnOp.not α0))).
  
  Global Instance AssociatedFunction_not :
    Notations.DoubleColon ltac:(Self) "not" := {
    Notations.double_colon := not;
  }.
  
  Global Instance ℐ : core.ops.bit.Not.Trait ltac:(Self) := {
    core.ops.bit.Not.Output := Output;
    core.ops.bit.Not.not := not;
  }.
End Impl_core_ops_bit_Not_for_subtle_Choice_t.
End Impl_core_ops_bit_Not_for_subtle_Choice_t.

(*
fn black_box(input: u8) -> u8 {
    debug_assert!((input == 0u8) | (input == 1u8));

    unsafe {
        // Optimization barrier
        //
        // Unsafe is ok, because:
        //   - &input is not NULL;
        //   - size of input is not zero;
        //   - u8 is neither Sync, nor Send;
        //   - u8 is Copy, so input is always live;
        //   - u8 type is always properly aligned.
        core::ptr::read_volatile(&input as *const u8)
    }
}
*)
Definition black_box (input : u8.t) : M u8.t :=
  let* input : M.Val u8.t := M.alloc input in
  let* _ : M.Val unit :=
    if (use true : bool) then
      let* _ : M.Val unit :=
        let* α0 : u8.t := M.read input in
        let* α1 : u8.t := M.read input in
        if
          (use
            (UnOp.not
              (BinOp.Pure.bit_or
                (BinOp.Pure.eq α0 (Integer.of_Z 0))
                (BinOp.Pure.eq α1 (Integer.of_Z 1))))
          : bool)
        then
          let* α0 : ref str.t :=
            M.read
              (mk_str "assertion failed: (input == 0u8) | (input == 1u8)") in
          let* α1 : never.t := M.call (core.panicking.panic α0) in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt in
      M.alloc tt
    else
      M.alloc tt in
  let* α0 : ref u8.t := M.read (addr_of input) in
  let* α1 : u8.t := M.call (core.ptr.read_volatile (use α0)) in
  let* α0 : M.Val u8.t := M.alloc α1 in
  M.read α0.

Module  Impl_core_convert_From_u8_t_for_subtle_Choice_t.
Section Impl_core_convert_From_u8_t_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      fn from(input: u8) -> Choice {
          // Our goal is to prevent the compiler from inferring that the value held inside the
          // resulting `Choice` struct is really an `i1` instead of an `i8`.
          Choice(black_box(input))
      }
  *)
  Definition from (input : u8.t) : M subtle.Choice.t :=
    let* input : M.Val u8.t := M.alloc input in
    let* α0 : u8.t := M.read input in
    let* α1 : u8.t := M.call (subtle.black_box α0) in
    M.pure (subtle.Choice.Build_t α1).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon ltac:(Self) "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait ltac:(Self) (T := u8.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_u8_t_for_subtle_Choice_t.
End Impl_core_convert_From_u8_t_for_subtle_Choice_t.

Module  ConstantTimeEq.
Section ConstantTimeEq.
  Class Trait (Self : Set) : Type := {
    ct_eq : (ref ltac:(Self)) -> (ref ltac:(Self)) -> M subtle.Choice.t;
  }.
  
End ConstantTimeEq.
End ConstantTimeEq.

Module  Impl_subtle_ConstantTimeEq_for_slice_T.
Section Impl_subtle_ConstantTimeEq_for_slice_T.
  Context {T : Set}.
  
  Context {ℋ_0 : subtle.ConstantTimeEq.Trait T}.
  
  Ltac Self := exact (slice T).
  
  (*
      fn ct_eq(&self, _rhs: &[T]) -> Choice {
          let len = self.len();
  
          // Short-circuit on the *lengths* of the slices, not their
          // contents.
          if len != _rhs.len() {
              return Choice::from(0);
          }
  
          // This loop shouldn't be shortcircuitable, since the compiler
          // shouldn't be able to reason about the value of the `u8`
          // unwrapped from the `ct_eq` result.
          let mut x = 1u8;
          for (ai, bi) in self.iter().zip(_rhs.iter()) {
              x &= ai.ct_eq(bi).unwrap_u8();
          }
  
          x.into()
      }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (_rhs : ref (slice T))
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* _rhs : M.Val (ref (slice T)) := M.alloc _rhs in
    let return_ := M.return_ (R := subtle.Choice.t) in
    M.catch_return
      (let* len : M.Val usize.t :=
        let* α0 : ref (slice T) := M.read self in
        let* α1 : usize.t := M.call ((slice T)::["len"] α0) in
        M.alloc α1 in
      let* _ : M.Val unit :=
        let* α0 : usize.t := M.read len in
        let* α1 : ref (slice T) := M.read _rhs in
        let* α2 : usize.t := M.call ((slice T)::["len"] α1) in
        if (use (BinOp.Pure.ne α0 α2) : bool) then
          let* _ : M.Val never.t :=
            let* α0 : subtle.Choice.t :=
              M.call
                ((core.convert.From.from
                    (Self := subtle.Choice.t)
                    (Trait := ltac:(refine _)))
                  (Integer.of_Z 0)) in
            return_ α0 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt in
      let* x : M.Val u8.t := M.alloc (Integer.of_Z 1) in
      let* _ : M.Val unit :=
        let* α0 : ref (slice T) := M.read self in
        let* α1 : core.slice.iter.Iter.t T := M.call ((slice T)::["iter"] α0) in
        let* α2 : ref (slice T) := M.read _rhs in
        let* α3 : core.slice.iter.Iter.t T := M.call ((slice T)::["iter"] α2) in
        let* α4 :
            core.iter.adapters.zip.Zip.t
              (core.slice.iter.Iter.t T)
              (core.slice.iter.Iter.t T) :=
          M.call
            ((core.iter.traits.iterator.Iterator.zip
                (Self := core.slice.iter.Iter.t T)
                (Trait := ltac:(refine _)))
              α1
              α3) in
        let* α5 :
            core.iter.adapters.zip.Zip.t
              (core.slice.iter.Iter.t T)
              (core.slice.iter.Iter.t T) :=
          M.call
            ((core.iter.traits.collect.IntoIterator.into_iter
                (Self :=
                  core.iter.adapters.zip.Zip.t
                    (core.slice.iter.Iter.t T)
                    (core.slice.iter.Iter.t T))
                (Trait := ltac:(refine _)))
              α4) in
        let* α6 : M.Val unit :=
          match α5 with
          | iter =>
            let* iter := M.alloc iter in
            loop
              (let* _ : M.Val unit :=
                let* α0 : core.option.Option.t ((ref T) * (ref T)) :=
                  M.call
                    ((core.iter.traits.iterator.Iterator.next
                        (Self :=
                          core.iter.adapters.zip.Zip.t
                            (core.slice.iter.Iter.t T)
                            (core.slice.iter.Iter.t T))
                        (Trait := ltac:(refine _)))
                      (borrow_mut iter)) in
                match α0 with
                | core.option.Option.None  =>
                  let* α0 : M.Val never.t := Break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2
                | core.option.Option.Some (ai, bi) =>
                  let* bi := M.alloc bi in
                  let* ai := M.alloc ai in
                  let* _ : M.Val unit :=
                    let* α0 : ref T := M.read ai in
                    let* α1 : ref T := M.read bi in
                    let* α2 : subtle.Choice.t :=
                      M.call
                        ((subtle.ConstantTimeEq.ct_eq
                            (Self := T)
                            (Trait := ltac:(refine _)))
                          α0
                          α1) in
                    let* α3 : M.Val subtle.Choice.t := M.alloc α2 in
                    let* α4 : u8.t :=
                      M.call (subtle.Choice.t::["unwrap_u8"] (borrow α3)) in
                    let* α5 : M.Val u8.t := M.alloc α4 in
                    M.pure (assign_op BinOp.Pure.bit_and x α5) in
                  M.alloc tt
                end in
              M.alloc tt)
          end in
        let* α7 : unit := M.read α6 in
        M.alloc (use α7) in
      let* α0 : u8.t := M.read x in
      let* α1 : subtle.Choice.t :=
        M.call
          ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
            α0) in
      let* α0 : M.Val subtle.Choice.t := M.alloc α1 in
      M.read α0).
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_slice_T.
End Impl_subtle_ConstantTimeEq_for_slice_T.

Module  Impl_subtle_ConstantTimeEq_for_subtle_Choice_t.
Section Impl_subtle_ConstantTimeEq_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      fn ct_eq(&self, rhs: &Choice) -> Choice {
          !( *self ^ *rhs)
      }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (rhs : ref subtle.Choice.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* rhs : M.Val (ref subtle.Choice.t) := M.alloc rhs in
    let* α0 : ref subtle.Choice.t := M.read self in
    let* α1 : subtle.Choice.t := M.read (deref α0) in
    let* α2 : ref subtle.Choice.t := M.read rhs in
    let* α3 : subtle.Choice.t := M.read (deref α2) in
    let* α4 : subtle.Choice.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α1
          α3) in
    M.call
      ((core.ops.bit.Not.not
          (Self := subtle.Choice.t)
          (Trait := ltac:(refine _)))
        α4).
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_subtle_Choice_t.
End Impl_subtle_ConstantTimeEq_for_subtle_Choice_t.

Module  Impl_subtle_ConstantTimeEq_for_u8_t.
Section Impl_subtle_ConstantTimeEq_for_u8_t.
  Ltac Self := exact u8.t.
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref u8.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref u8.t) := M.alloc other in
    let* x : M.Val u8.t :=
      let* α0 : ref u8.t := M.read self in
      let* α1 : ref u8.t := M.read other in
      let* α2 : u8.t :=
        M.call
          ((core.ops.bit.BitXor.bitxor
              (Self := ref u8.t)
              (Trait := ltac:(refine _)))
            α0
            α1) in
      M.alloc α2 in
    let* y : M.Val u8.t :=
      let* α0 : u8.t := M.read x in
      let* α1 : u8.t := M.read x in
      let* α2 : u8.t := M.call (u8.t::["wrapping_neg"] α1) in
      let* α3 : i32.t := BinOp.Panic.sub (Integer.of_Z 8) (Integer.of_Z 1) in
      let* α4 : u8.t := BinOp.Panic.shr (BinOp.Pure.bit_or α0 α2) α3 in
      M.alloc α4 in
    let* α0 : u8.t := M.read y in
    let* α1 : subtle.Choice.t :=
      M.call
        ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
          (use (BinOp.Pure.bit_xor α0 (use (Integer.of_Z 1))))) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α1 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_u8_t.
End Impl_subtle_ConstantTimeEq_for_u8_t.

Module  Impl_subtle_ConstantTimeEq_for_i8_t.
Section Impl_subtle_ConstantTimeEq_for_i8_t.
  Ltac Self := exact i8.t.
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref i8.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref i8.t) := M.alloc other in
    let* α0 : ref i8.t := M.read self in
    let* α1 : i8.t := M.read (deref α0) in
    let* α2 : u8.t := cast α1 in
    let* α3 : M.Val u8.t := M.alloc α2 in
    let* α4 : ref i8.t := M.read other in
    let* α5 : i8.t := M.read (deref α4) in
    let* α6 : u8.t := cast α5 in
    let* α7 : M.Val u8.t := M.alloc α6 in
    M.call
      ((subtle.ConstantTimeEq.ct_eq (Self := u8.t) (Trait := ltac:(refine _)))
        (borrow α3)
        (borrow α7)).
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_i8_t.
End Impl_subtle_ConstantTimeEq_for_i8_t.

Module  Impl_subtle_ConstantTimeEq_for_u16_t.
Section Impl_subtle_ConstantTimeEq_for_u16_t.
  Ltac Self := exact u16.t.
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref u16.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref u16.t) := M.alloc other in
    let* x : M.Val u16.t :=
      let* α0 : ref u16.t := M.read self in
      let* α1 : ref u16.t := M.read other in
      let* α2 : u16.t :=
        M.call
          ((core.ops.bit.BitXor.bitxor
              (Self := ref u16.t)
              (Trait := ltac:(refine _)))
            α0
            α1) in
      M.alloc α2 in
    let* y : M.Val u16.t :=
      let* α0 : u16.t := M.read x in
      let* α1 : u16.t := M.read x in
      let* α2 : u16.t := M.call (u16.t::["wrapping_neg"] α1) in
      let* α3 : i32.t := BinOp.Panic.sub (Integer.of_Z 16) (Integer.of_Z 1) in
      let* α4 : u16.t := BinOp.Panic.shr (BinOp.Pure.bit_or α0 α2) α3 in
      M.alloc α4 in
    let* α0 : u16.t := M.read y in
    let* α1 : u8.t := cast (BinOp.Pure.bit_xor α0 (use (Integer.of_Z 1))) in
    let* α2 : subtle.Choice.t :=
      M.call
        ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
          α1) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α2 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_u16_t.
End Impl_subtle_ConstantTimeEq_for_u16_t.

Module  Impl_subtle_ConstantTimeEq_for_i16_t.
Section Impl_subtle_ConstantTimeEq_for_i16_t.
  Ltac Self := exact i16.t.
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref i16.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref i16.t) := M.alloc other in
    let* α0 : ref i16.t := M.read self in
    let* α1 : i16.t := M.read (deref α0) in
    let* α2 : u16.t := cast α1 in
    let* α3 : M.Val u16.t := M.alloc α2 in
    let* α4 : ref i16.t := M.read other in
    let* α5 : i16.t := M.read (deref α4) in
    let* α6 : u16.t := cast α5 in
    let* α7 : M.Val u16.t := M.alloc α6 in
    M.call
      ((subtle.ConstantTimeEq.ct_eq (Self := u16.t) (Trait := ltac:(refine _)))
        (borrow α3)
        (borrow α7)).
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_i16_t.
End Impl_subtle_ConstantTimeEq_for_i16_t.

Module  Impl_subtle_ConstantTimeEq_for_u32_t.
Section Impl_subtle_ConstantTimeEq_for_u32_t.
  Ltac Self := exact u32.t.
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref u32.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref u32.t) := M.alloc other in
    let* x : M.Val u32.t :=
      let* α0 : ref u32.t := M.read self in
      let* α1 : ref u32.t := M.read other in
      let* α2 : u32.t :=
        M.call
          ((core.ops.bit.BitXor.bitxor
              (Self := ref u32.t)
              (Trait := ltac:(refine _)))
            α0
            α1) in
      M.alloc α2 in
    let* y : M.Val u32.t :=
      let* α0 : u32.t := M.read x in
      let* α1 : u32.t := M.read x in
      let* α2 : u32.t := M.call (u32.t::["wrapping_neg"] α1) in
      let* α3 : i32.t := BinOp.Panic.sub (Integer.of_Z 32) (Integer.of_Z 1) in
      let* α4 : u32.t := BinOp.Panic.shr (BinOp.Pure.bit_or α0 α2) α3 in
      M.alloc α4 in
    let* α0 : u32.t := M.read y in
    let* α1 : u8.t := cast (BinOp.Pure.bit_xor α0 (use (Integer.of_Z 1))) in
    let* α2 : subtle.Choice.t :=
      M.call
        ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
          α1) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α2 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_u32_t.
End Impl_subtle_ConstantTimeEq_for_u32_t.

Module  Impl_subtle_ConstantTimeEq_for_i32_t.
Section Impl_subtle_ConstantTimeEq_for_i32_t.
  Ltac Self := exact i32.t.
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref i32.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref i32.t) := M.alloc other in
    let* α0 : ref i32.t := M.read self in
    let* α1 : i32.t := M.read (deref α0) in
    let* α2 : u32.t := cast α1 in
    let* α3 : M.Val u32.t := M.alloc α2 in
    let* α4 : ref i32.t := M.read other in
    let* α5 : i32.t := M.read (deref α4) in
    let* α6 : u32.t := cast α5 in
    let* α7 : M.Val u32.t := M.alloc α6 in
    M.call
      ((subtle.ConstantTimeEq.ct_eq (Self := u32.t) (Trait := ltac:(refine _)))
        (borrow α3)
        (borrow α7)).
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_i32_t.
End Impl_subtle_ConstantTimeEq_for_i32_t.

Module  Impl_subtle_ConstantTimeEq_for_u64_t.
Section Impl_subtle_ConstantTimeEq_for_u64_t.
  Ltac Self := exact u64.t.
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref u64.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref u64.t) := M.alloc other in
    let* x : M.Val u64.t :=
      let* α0 : ref u64.t := M.read self in
      let* α1 : ref u64.t := M.read other in
      let* α2 : u64.t :=
        M.call
          ((core.ops.bit.BitXor.bitxor
              (Self := ref u64.t)
              (Trait := ltac:(refine _)))
            α0
            α1) in
      M.alloc α2 in
    let* y : M.Val u64.t :=
      let* α0 : u64.t := M.read x in
      let* α1 : u64.t := M.read x in
      let* α2 : u64.t := M.call (u64.t::["wrapping_neg"] α1) in
      let* α3 : i32.t := BinOp.Panic.sub (Integer.of_Z 64) (Integer.of_Z 1) in
      let* α4 : u64.t := BinOp.Panic.shr (BinOp.Pure.bit_or α0 α2) α3 in
      M.alloc α4 in
    let* α0 : u64.t := M.read y in
    let* α1 : u8.t := cast (BinOp.Pure.bit_xor α0 (use (Integer.of_Z 1))) in
    let* α2 : subtle.Choice.t :=
      M.call
        ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
          α1) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α2 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_u64_t.
End Impl_subtle_ConstantTimeEq_for_u64_t.

Module  Impl_subtle_ConstantTimeEq_for_i64_t.
Section Impl_subtle_ConstantTimeEq_for_i64_t.
  Ltac Self := exact i64.t.
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref i64.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref i64.t) := M.alloc other in
    let* α0 : ref i64.t := M.read self in
    let* α1 : i64.t := M.read (deref α0) in
    let* α2 : u64.t := cast α1 in
    let* α3 : M.Val u64.t := M.alloc α2 in
    let* α4 : ref i64.t := M.read other in
    let* α5 : i64.t := M.read (deref α4) in
    let* α6 : u64.t := cast α5 in
    let* α7 : M.Val u64.t := M.alloc α6 in
    M.call
      ((subtle.ConstantTimeEq.ct_eq (Self := u64.t) (Trait := ltac:(refine _)))
        (borrow α3)
        (borrow α7)).
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_i64_t.
End Impl_subtle_ConstantTimeEq_for_i64_t.

Module  Impl_subtle_ConstantTimeEq_for_usize_t.
Section Impl_subtle_ConstantTimeEq_for_usize_t.
  Ltac Self := exact usize.t.
  
  (*
              fn ct_eq(&self, other: &$t_u) -> Choice {
                  // x == 0 if and only if self == other
                  let x: $t_u = self ^ other;
  
                  // If x == 0, then x and -x are both equal to zero;
                  // otherwise, one or both will have its high bit set.
                  let y: $t_u = (x | x.wrapping_neg()) >> ($bit_width - 1);
  
                  // Result is the opposite of the high bit (now shifted to low).
                  ((y ^ (1 as $t_u)) as u8).into()
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref usize.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref usize.t) := M.alloc other in
    let* x : M.Val usize.t :=
      let* α0 : ref usize.t := M.read self in
      let* α1 : ref usize.t := M.read other in
      let* α2 : usize.t :=
        M.call
          ((core.ops.bit.BitXor.bitxor
              (Self := ref usize.t)
              (Trait := ltac:(refine _)))
            α0
            α1) in
      M.alloc α2 in
    let* y : M.Val usize.t :=
      let* α0 : usize.t := M.read x in
      let* α1 : usize.t := M.read x in
      let* α2 : usize.t := M.call (usize.t::["wrapping_neg"] α1) in
      let* α3 : usize.t := M.call core.mem.size_of in
      let* α4 : usize.t := BinOp.Panic.mul α3 (Integer.of_Z 8) in
      let* α5 : usize.t := BinOp.Panic.sub α4 (Integer.of_Z 1) in
      let* α6 : usize.t := BinOp.Panic.shr (BinOp.Pure.bit_or α0 α2) α5 in
      M.alloc α6 in
    let* α0 : usize.t := M.read y in
    let* α1 : u8.t := cast (BinOp.Pure.bit_xor α0 (use (Integer.of_Z 1))) in
    let* α2 : subtle.Choice.t :=
      M.call
        ((core.convert.Into.into (Self := u8.t) (Trait := ltac:(refine _)))
          α1) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α2 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_usize_t.
End Impl_subtle_ConstantTimeEq_for_usize_t.

Module  Impl_subtle_ConstantTimeEq_for_isize_t.
Section Impl_subtle_ConstantTimeEq_for_isize_t.
  Ltac Self := exact isize.t.
  
  (*
              fn ct_eq(&self, other: &$t_i) -> Choice {
                  // Bitcast to unsigned and call that implementation.
                  ( *self as $t_u).ct_eq(&( *other as $t_u))
              }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (other : ref isize.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref isize.t) := M.alloc other in
    let* α0 : ref isize.t := M.read self in
    let* α1 : isize.t := M.read (deref α0) in
    let* α2 : usize.t := cast α1 in
    let* α3 : M.Val usize.t := M.alloc α2 in
    let* α4 : ref isize.t := M.read other in
    let* α5 : isize.t := M.read (deref α4) in
    let* α6 : usize.t := cast α5 in
    let* α7 : M.Val usize.t := M.alloc α6 in
    M.call
      ((subtle.ConstantTimeEq.ct_eq
          (Self := usize.t)
          (Trait := ltac:(refine _)))
        (borrow α3)
        (borrow α7)).
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_isize_t.
End Impl_subtle_ConstantTimeEq_for_isize_t.

Module  ConditionallySelectable.
Section ConditionallySelectable.
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: core.marker.Copy.Trait Self;
    conditional_select :
      (ref ltac:(Self)) ->
        (ref ltac:(Self)) ->
        subtle.Choice.t ->
        M ltac:(Self);
  }.
  
End ConditionallySelectable.
End ConditionallySelectable.

Module  Impl_subtle_ConditionallySelectable_for_u8_t.
Section Impl_subtle_ConditionallySelectable_for_u8_t.
  Ltac Self := exact u8.t.
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u8.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i8.t := cast α0 in
      let* α2 : i8.t := UnOp.neg α1 in
      let* α3 : u8.t := cast α2 in
      M.alloc α3 in
    let* α0 : ref u8.t := M.read a in
    let* α1 : u8.t := M.read mask in
    let* α2 : ref u8.t := M.read a in
    let* α3 : ref u8.t := M.read b in
    let* α4 : u8.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref u8.t)
            (Trait := ltac:(refine _)))
          α2
          α3) in
    let* α5 : u8.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref u8.t)
            (Trait := ltac:(refine _)))
          α0
          (BinOp.Pure.bit_and α1 α4)) in
    let* α0 : M.Val u8.t := M.alloc α5 in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign
      (self : mut_ref ltac:(Self))
      (other : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref ltac:(Self)) := M.alloc other in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u8.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i8.t := cast α0 in
      let* α2 : i8.t := UnOp.neg α1 in
      let* α3 : u8.t := cast α2 in
      M.alloc α3 in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u8.t := M.read self in
      let* α1 : u8.t := M.read mask in
      let* α2 : mut_ref u8.t := M.read self in
      let* α3 : u8.t := M.read (deref α2) in
      let* α4 : ref u8.t := M.read other in
      let* α5 : u8.t := M.read (deref α4) in
      let* α6 : M.Val u8.t :=
        M.alloc (BinOp.Pure.bit_and α1 (BinOp.Pure.bit_xor α3 α5)) in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) α6) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_assign :
    Notations.DoubleColon ltac:(Self) "conditional_assign" := {
    Notations.double_colon := conditional_assign;
  }.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap
      (a : mut_ref ltac:(Self))
      (b : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* a : M.Val (mut_ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (mut_ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u8.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i8.t := cast α0 in
      let* α2 : i8.t := UnOp.neg α1 in
      let* α3 : u8.t := cast α2 in
      M.alloc α3 in
    let* t : M.Val u8.t :=
      let* α0 : u8.t := M.read mask in
      let* α1 : mut_ref u8.t := M.read a in
      let* α2 : u8.t := M.read (deref α1) in
      let* α3 : mut_ref u8.t := M.read b in
      let* α4 : u8.t := M.read (deref α3) in
      M.alloc (BinOp.Pure.bit_and α0 (BinOp.Pure.bit_xor α2 α4)) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u8.t := M.read a in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u8.t := M.read b in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_swap :
    Notations.DoubleColon ltac:(Self) "conditional_swap" := {
    Notations.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_u8_t.
End Impl_subtle_ConditionallySelectable_for_u8_t.

Module  Impl_subtle_ConditionallySelectable_for_i8_t.
Section Impl_subtle_ConditionallySelectable_for_i8_t.
  Ltac Self := exact i8.t.
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i8.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i8.t := cast α0 in
      let* α2 : i8.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* α0 : ref i8.t := M.read a in
    let* α1 : i8.t := M.read mask in
    let* α2 : ref i8.t := M.read a in
    let* α3 : ref i8.t := M.read b in
    let* α4 : i8.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref i8.t)
            (Trait := ltac:(refine _)))
          α2
          α3) in
    let* α5 : i8.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref i8.t)
            (Trait := ltac:(refine _)))
          α0
          (BinOp.Pure.bit_and α1 α4)) in
    let* α0 : M.Val i8.t := M.alloc α5 in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign
      (self : mut_ref ltac:(Self))
      (other : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref ltac:(Self)) := M.alloc other in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i8.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i8.t := cast α0 in
      let* α2 : i8.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i8.t := M.read self in
      let* α1 : i8.t := M.read mask in
      let* α2 : mut_ref i8.t := M.read self in
      let* α3 : i8.t := M.read (deref α2) in
      let* α4 : ref i8.t := M.read other in
      let* α5 : i8.t := M.read (deref α4) in
      let* α6 : M.Val i8.t :=
        M.alloc (BinOp.Pure.bit_and α1 (BinOp.Pure.bit_xor α3 α5)) in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) α6) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_assign :
    Notations.DoubleColon ltac:(Self) "conditional_assign" := {
    Notations.double_colon := conditional_assign;
  }.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap
      (a : mut_ref ltac:(Self))
      (b : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* a : M.Val (mut_ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (mut_ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i8.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i8.t := cast α0 in
      let* α2 : i8.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* t : M.Val i8.t :=
      let* α0 : i8.t := M.read mask in
      let* α1 : mut_ref i8.t := M.read a in
      let* α2 : i8.t := M.read (deref α1) in
      let* α3 : mut_ref i8.t := M.read b in
      let* α4 : i8.t := M.read (deref α3) in
      M.alloc (BinOp.Pure.bit_and α0 (BinOp.Pure.bit_xor α2 α4)) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i8.t := M.read a in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i8.t := M.read b in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_swap :
    Notations.DoubleColon ltac:(Self) "conditional_swap" := {
    Notations.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_i8_t.
End Impl_subtle_ConditionallySelectable_for_i8_t.

Module  Impl_subtle_ConditionallySelectable_for_u16_t.
Section Impl_subtle_ConditionallySelectable_for_u16_t.
  Ltac Self := exact u16.t.
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u16.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i16.t := cast α0 in
      let* α2 : i16.t := UnOp.neg α1 in
      let* α3 : u16.t := cast α2 in
      M.alloc α3 in
    let* α0 : ref u16.t := M.read a in
    let* α1 : u16.t := M.read mask in
    let* α2 : ref u16.t := M.read a in
    let* α3 : ref u16.t := M.read b in
    let* α4 : u16.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref u16.t)
            (Trait := ltac:(refine _)))
          α2
          α3) in
    let* α5 : u16.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref u16.t)
            (Trait := ltac:(refine _)))
          α0
          (BinOp.Pure.bit_and α1 α4)) in
    let* α0 : M.Val u16.t := M.alloc α5 in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign
      (self : mut_ref ltac:(Self))
      (other : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref ltac:(Self)) := M.alloc other in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u16.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i16.t := cast α0 in
      let* α2 : i16.t := UnOp.neg α1 in
      let* α3 : u16.t := cast α2 in
      M.alloc α3 in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u16.t := M.read self in
      let* α1 : u16.t := M.read mask in
      let* α2 : mut_ref u16.t := M.read self in
      let* α3 : u16.t := M.read (deref α2) in
      let* α4 : ref u16.t := M.read other in
      let* α5 : u16.t := M.read (deref α4) in
      let* α6 : M.Val u16.t :=
        M.alloc (BinOp.Pure.bit_and α1 (BinOp.Pure.bit_xor α3 α5)) in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) α6) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_assign :
    Notations.DoubleColon ltac:(Self) "conditional_assign" := {
    Notations.double_colon := conditional_assign;
  }.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap
      (a : mut_ref ltac:(Self))
      (b : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* a : M.Val (mut_ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (mut_ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u16.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i16.t := cast α0 in
      let* α2 : i16.t := UnOp.neg α1 in
      let* α3 : u16.t := cast α2 in
      M.alloc α3 in
    let* t : M.Val u16.t :=
      let* α0 : u16.t := M.read mask in
      let* α1 : mut_ref u16.t := M.read a in
      let* α2 : u16.t := M.read (deref α1) in
      let* α3 : mut_ref u16.t := M.read b in
      let* α4 : u16.t := M.read (deref α3) in
      M.alloc (BinOp.Pure.bit_and α0 (BinOp.Pure.bit_xor α2 α4)) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u16.t := M.read a in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u16.t := M.read b in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_swap :
    Notations.DoubleColon ltac:(Self) "conditional_swap" := {
    Notations.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_u16_t.
End Impl_subtle_ConditionallySelectable_for_u16_t.

Module  Impl_subtle_ConditionallySelectable_for_i16_t.
Section Impl_subtle_ConditionallySelectable_for_i16_t.
  Ltac Self := exact i16.t.
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i16.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i16.t := cast α0 in
      let* α2 : i16.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* α0 : ref i16.t := M.read a in
    let* α1 : i16.t := M.read mask in
    let* α2 : ref i16.t := M.read a in
    let* α3 : ref i16.t := M.read b in
    let* α4 : i16.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref i16.t)
            (Trait := ltac:(refine _)))
          α2
          α3) in
    let* α5 : i16.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref i16.t)
            (Trait := ltac:(refine _)))
          α0
          (BinOp.Pure.bit_and α1 α4)) in
    let* α0 : M.Val i16.t := M.alloc α5 in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign
      (self : mut_ref ltac:(Self))
      (other : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref ltac:(Self)) := M.alloc other in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i16.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i16.t := cast α0 in
      let* α2 : i16.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i16.t := M.read self in
      let* α1 : i16.t := M.read mask in
      let* α2 : mut_ref i16.t := M.read self in
      let* α3 : i16.t := M.read (deref α2) in
      let* α4 : ref i16.t := M.read other in
      let* α5 : i16.t := M.read (deref α4) in
      let* α6 : M.Val i16.t :=
        M.alloc (BinOp.Pure.bit_and α1 (BinOp.Pure.bit_xor α3 α5)) in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) α6) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_assign :
    Notations.DoubleColon ltac:(Self) "conditional_assign" := {
    Notations.double_colon := conditional_assign;
  }.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap
      (a : mut_ref ltac:(Self))
      (b : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* a : M.Val (mut_ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (mut_ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i16.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i16.t := cast α0 in
      let* α2 : i16.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* t : M.Val i16.t :=
      let* α0 : i16.t := M.read mask in
      let* α1 : mut_ref i16.t := M.read a in
      let* α2 : i16.t := M.read (deref α1) in
      let* α3 : mut_ref i16.t := M.read b in
      let* α4 : i16.t := M.read (deref α3) in
      M.alloc (BinOp.Pure.bit_and α0 (BinOp.Pure.bit_xor α2 α4)) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i16.t := M.read a in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i16.t := M.read b in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_swap :
    Notations.DoubleColon ltac:(Self) "conditional_swap" := {
    Notations.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_i16_t.
End Impl_subtle_ConditionallySelectable_for_i16_t.

Module  Impl_subtle_ConditionallySelectable_for_u32_t.
Section Impl_subtle_ConditionallySelectable_for_u32_t.
  Ltac Self := exact u32.t.
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u32.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i32.t := cast α0 in
      let* α2 : i32.t := UnOp.neg α1 in
      let* α3 : u32.t := cast α2 in
      M.alloc α3 in
    let* α0 : ref u32.t := M.read a in
    let* α1 : u32.t := M.read mask in
    let* α2 : ref u32.t := M.read a in
    let* α3 : ref u32.t := M.read b in
    let* α4 : u32.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref u32.t)
            (Trait := ltac:(refine _)))
          α2
          α3) in
    let* α5 : u32.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref u32.t)
            (Trait := ltac:(refine _)))
          α0
          (BinOp.Pure.bit_and α1 α4)) in
    let* α0 : M.Val u32.t := M.alloc α5 in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign
      (self : mut_ref ltac:(Self))
      (other : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref ltac:(Self)) := M.alloc other in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u32.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i32.t := cast α0 in
      let* α2 : i32.t := UnOp.neg α1 in
      let* α3 : u32.t := cast α2 in
      M.alloc α3 in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u32.t := M.read self in
      let* α1 : u32.t := M.read mask in
      let* α2 : mut_ref u32.t := M.read self in
      let* α3 : u32.t := M.read (deref α2) in
      let* α4 : ref u32.t := M.read other in
      let* α5 : u32.t := M.read (deref α4) in
      let* α6 : M.Val u32.t :=
        M.alloc (BinOp.Pure.bit_and α1 (BinOp.Pure.bit_xor α3 α5)) in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) α6) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_assign :
    Notations.DoubleColon ltac:(Self) "conditional_assign" := {
    Notations.double_colon := conditional_assign;
  }.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap
      (a : mut_ref ltac:(Self))
      (b : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* a : M.Val (mut_ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (mut_ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u32.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i32.t := cast α0 in
      let* α2 : i32.t := UnOp.neg α1 in
      let* α3 : u32.t := cast α2 in
      M.alloc α3 in
    let* t : M.Val u32.t :=
      let* α0 : u32.t := M.read mask in
      let* α1 : mut_ref u32.t := M.read a in
      let* α2 : u32.t := M.read (deref α1) in
      let* α3 : mut_ref u32.t := M.read b in
      let* α4 : u32.t := M.read (deref α3) in
      M.alloc (BinOp.Pure.bit_and α0 (BinOp.Pure.bit_xor α2 α4)) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u32.t := M.read a in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u32.t := M.read b in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_swap :
    Notations.DoubleColon ltac:(Self) "conditional_swap" := {
    Notations.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_u32_t.
End Impl_subtle_ConditionallySelectable_for_u32_t.

Module  Impl_subtle_ConditionallySelectable_for_i32_t.
Section Impl_subtle_ConditionallySelectable_for_i32_t.
  Ltac Self := exact i32.t.
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i32.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i32.t := cast α0 in
      let* α2 : i32.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* α0 : ref i32.t := M.read a in
    let* α1 : i32.t := M.read mask in
    let* α2 : ref i32.t := M.read a in
    let* α3 : ref i32.t := M.read b in
    let* α4 : i32.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref i32.t)
            (Trait := ltac:(refine _)))
          α2
          α3) in
    let* α5 : i32.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref i32.t)
            (Trait := ltac:(refine _)))
          α0
          (BinOp.Pure.bit_and α1 α4)) in
    let* α0 : M.Val i32.t := M.alloc α5 in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign
      (self : mut_ref ltac:(Self))
      (other : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref ltac:(Self)) := M.alloc other in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i32.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i32.t := cast α0 in
      let* α2 : i32.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i32.t := M.read self in
      let* α1 : i32.t := M.read mask in
      let* α2 : mut_ref i32.t := M.read self in
      let* α3 : i32.t := M.read (deref α2) in
      let* α4 : ref i32.t := M.read other in
      let* α5 : i32.t := M.read (deref α4) in
      let* α6 : M.Val i32.t :=
        M.alloc (BinOp.Pure.bit_and α1 (BinOp.Pure.bit_xor α3 α5)) in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) α6) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_assign :
    Notations.DoubleColon ltac:(Self) "conditional_assign" := {
    Notations.double_colon := conditional_assign;
  }.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap
      (a : mut_ref ltac:(Self))
      (b : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* a : M.Val (mut_ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (mut_ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i32.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i32.t := cast α0 in
      let* α2 : i32.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* t : M.Val i32.t :=
      let* α0 : i32.t := M.read mask in
      let* α1 : mut_ref i32.t := M.read a in
      let* α2 : i32.t := M.read (deref α1) in
      let* α3 : mut_ref i32.t := M.read b in
      let* α4 : i32.t := M.read (deref α3) in
      M.alloc (BinOp.Pure.bit_and α0 (BinOp.Pure.bit_xor α2 α4)) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i32.t := M.read a in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i32.t := M.read b in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_swap :
    Notations.DoubleColon ltac:(Self) "conditional_swap" := {
    Notations.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_i32_t.
End Impl_subtle_ConditionallySelectable_for_i32_t.

Module  Impl_subtle_ConditionallySelectable_for_u64_t.
Section Impl_subtle_ConditionallySelectable_for_u64_t.
  Ltac Self := exact u64.t.
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u64.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i64.t := cast α0 in
      let* α2 : i64.t := UnOp.neg α1 in
      let* α3 : u64.t := cast α2 in
      M.alloc α3 in
    let* α0 : ref u64.t := M.read a in
    let* α1 : u64.t := M.read mask in
    let* α2 : ref u64.t := M.read a in
    let* α3 : ref u64.t := M.read b in
    let* α4 : u64.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref u64.t)
            (Trait := ltac:(refine _)))
          α2
          α3) in
    let* α5 : u64.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref u64.t)
            (Trait := ltac:(refine _)))
          α0
          (BinOp.Pure.bit_and α1 α4)) in
    let* α0 : M.Val u64.t := M.alloc α5 in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign
      (self : mut_ref ltac:(Self))
      (other : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref ltac:(Self)) := M.alloc other in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u64.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i64.t := cast α0 in
      let* α2 : i64.t := UnOp.neg α1 in
      let* α3 : u64.t := cast α2 in
      M.alloc α3 in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u64.t := M.read self in
      let* α1 : u64.t := M.read mask in
      let* α2 : mut_ref u64.t := M.read self in
      let* α3 : u64.t := M.read (deref α2) in
      let* α4 : ref u64.t := M.read other in
      let* α5 : u64.t := M.read (deref α4) in
      let* α6 : M.Val u64.t :=
        M.alloc (BinOp.Pure.bit_and α1 (BinOp.Pure.bit_xor α3 α5)) in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) α6) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_assign :
    Notations.DoubleColon ltac:(Self) "conditional_assign" := {
    Notations.double_colon := conditional_assign;
  }.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap
      (a : mut_ref ltac:(Self))
      (b : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* a : M.Val (mut_ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (mut_ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val u64.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i64.t := cast α0 in
      let* α2 : i64.t := UnOp.neg α1 in
      let* α3 : u64.t := cast α2 in
      M.alloc α3 in
    let* t : M.Val u64.t :=
      let* α0 : u64.t := M.read mask in
      let* α1 : mut_ref u64.t := M.read a in
      let* α2 : u64.t := M.read (deref α1) in
      let* α3 : mut_ref u64.t := M.read b in
      let* α4 : u64.t := M.read (deref α3) in
      M.alloc (BinOp.Pure.bit_and α0 (BinOp.Pure.bit_xor α2 α4)) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u64.t := M.read a in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref u64.t := M.read b in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_swap :
    Notations.DoubleColon ltac:(Self) "conditional_swap" := {
    Notations.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_u64_t.
End Impl_subtle_ConditionallySelectable_for_u64_t.

Module  Impl_subtle_ConditionallySelectable_for_i64_t.
Section Impl_subtle_ConditionallySelectable_for_i64_t.
  Ltac Self := exact i64.t.
  
  (*
              fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  a ^ (mask & (a ^ b))
              }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i64.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i64.t := cast α0 in
      let* α2 : i64.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* α0 : ref i64.t := M.read a in
    let* α1 : i64.t := M.read mask in
    let* α2 : ref i64.t := M.read a in
    let* α3 : ref i64.t := M.read b in
    let* α4 : i64.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref i64.t)
            (Trait := ltac:(refine _)))
          α2
          α3) in
    let* α5 : i64.t :=
      M.call
        ((core.ops.bit.BitXor.bitxor
            (Self := ref i64.t)
            (Trait := ltac:(refine _)))
          α0
          (BinOp.Pure.bit_and α1 α4)) in
    let* α0 : M.Val i64.t := M.alloc α5 in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  (*
              fn conditional_assign(&mut self, other: &Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  *self ^= mask & ( *self ^ *other);
              }
  *)
  Definition conditional_assign
      (self : mut_ref ltac:(Self))
      (other : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref ltac:(Self)) := M.alloc other in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i64.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i64.t := cast α0 in
      let* α2 : i64.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i64.t := M.read self in
      let* α1 : i64.t := M.read mask in
      let* α2 : mut_ref i64.t := M.read self in
      let* α3 : i64.t := M.read (deref α2) in
      let* α4 : ref i64.t := M.read other in
      let* α5 : i64.t := M.read (deref α4) in
      let* α6 : M.Val i64.t :=
        M.alloc (BinOp.Pure.bit_and α1 (BinOp.Pure.bit_xor α3 α5)) in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) α6) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_assign :
    Notations.DoubleColon ltac:(Self) "conditional_assign" := {
    Notations.double_colon := conditional_assign;
  }.
  
  (*
              fn conditional_swap(a: &mut Self, b: &mut Self, choice: Choice) {
                  // if choice = 0, mask = (-0) = 0000...0000
                  // if choice = 1, mask = (-1) = 1111...1111
                  let mask = -(choice.unwrap_u8() as to_signed_int!($t)) as $t;
                  let t = mask & ( *a ^ *b);
                  *a ^= t;
                  *b ^= t;
              }
  *)
  Definition conditional_swap
      (a : mut_ref ltac:(Self))
      (b : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* a : M.Val (mut_ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (mut_ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* mask : M.Val i64.t :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow choice)) in
      let* α1 : i64.t := cast α0 in
      let* α2 : i64.t := UnOp.neg α1 in
      M.alloc (use α2) in
    let* t : M.Val i64.t :=
      let* α0 : i64.t := M.read mask in
      let* α1 : mut_ref i64.t := M.read a in
      let* α2 : i64.t := M.read (deref α1) in
      let* α3 : mut_ref i64.t := M.read b in
      let* α4 : i64.t := M.read (deref α3) in
      M.alloc (BinOp.Pure.bit_and α0 (BinOp.Pure.bit_xor α2 α4)) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i64.t := M.read a in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref i64.t := M.read b in
      M.pure (assign_op BinOp.Pure.bit_xor (deref α0) t) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_swap :
    Notations.DoubleColon ltac:(Self) "conditional_swap" := {
    Notations.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_i64_t.
End Impl_subtle_ConditionallySelectable_for_i64_t.

Module  Impl_subtle_ConditionallySelectable_for_subtle_Choice_t.
Section Impl_subtle_ConditionallySelectable_for_subtle_Choice_t.
  Ltac Self := exact subtle.Choice.t.
  
  (*
      fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
          Choice(u8::conditional_select(&a.0, &b.0, choice))
      }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* α0 : ref subtle.Choice.t := M.read a in
    let* α1 : ref subtle.Choice.t := M.read b in
    let* α2 : subtle.Choice.t := M.read choice in
    let* α3 : u8.t :=
      M.call
        ((subtle.ConditionallySelectable.conditional_select
            (Self := u8.t)
            (Trait := ltac:(refine _)))
          (borrow (deref α0).["0"])
          (borrow (deref α1).["0"])
          α2) in
    M.pure (subtle.Choice.Build_t α3).
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign := Datatypes.None;
    subtle.ConditionallySelectable.conditional_swap := Datatypes.None;
  }.
End Impl_subtle_ConditionallySelectable_for_subtle_Choice_t.
End Impl_subtle_ConditionallySelectable_for_subtle_Choice_t.

Module  ConditionallyNegatable.
Section ConditionallyNegatable.
  Class Trait (Self : Set) : Type := {
    conditional_negate : (mut_ref ltac:(Self)) -> subtle.Choice.t -> M unit;
  }.
  
End ConditionallyNegatable.
End ConditionallyNegatable.

Module  Impl_subtle_ConditionallyNegatable_for_T.
Section Impl_subtle_ConditionallyNegatable_for_T.
  Context {T : Set}.
  
  Context
    {ℋ_0 : subtle.ConditionallySelectable.Trait T}
    {ℋ_1 : core.ops.arith.Neg.Trait (ref T)}.
  
  Ltac Self := exact T.
  
  (*
      fn conditional_negate(&mut self, choice: Choice) {
          // Need to cast to eliminate mutability
          let self_neg: T = -(self as &T);
          self.conditional_assign(&self_neg, choice);
      }
  *)
  Definition conditional_negate
      (self : mut_ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* self_neg : M.Val T :=
      let* α0 : mut_ref T := M.read self in
      let* α1 : T :=
        M.call
          ((core.ops.arith.Neg.neg (Self := ref T) (Trait := ltac:(refine _)))
            (use (borrow (deref α0)))) in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 : mut_ref T := M.read self in
      let* α1 : subtle.Choice.t := M.read choice in
      let* α2 : unit :=
        M.call
          ((subtle.ConditionallySelectable.conditional_assign
              (Self := T)
              (Trait := ltac:(refine _)))
            α0
            (borrow self_neg)
            α1) in
      M.alloc α2 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Global Instance AssociatedFunction_conditional_negate :
    Notations.DoubleColon ltac:(Self) "conditional_negate" := {
    Notations.double_colon := conditional_negate;
  }.
  
  Global Instance ℐ : subtle.ConditionallyNegatable.Trait ltac:(Self) := {
    subtle.ConditionallyNegatable.conditional_negate := conditional_negate;
  }.
End Impl_subtle_ConditionallyNegatable_for_T.
End Impl_subtle_ConditionallyNegatable_for_T.

Module  CtOption.
Section CtOption.
  Context (T : Set).
  
  Record t : Set := {
    value : T;
    is_some : subtle.Choice.t;
  }.
  
  Global Instance Get_value : Notations.Dot "value" := {
    Notations.dot :=
      Ref.map (fun x => x.(value)) (fun v x => x <| value := v |>);
  }.
  Global Instance Get_AF_value : Notations.DoubleColon t "value" := {
    Notations.double_colon (x : M.Val t) := x.["value"];
  }.
  Global Instance Get_is_some : Notations.Dot "is_some" := {
    Notations.dot :=
      Ref.map (fun x => x.(is_some)) (fun v x => x <| is_some := v |>);
  }.
  Global Instance Get_AF_is_some : Notations.DoubleColon t "is_some" := {
    Notations.double_colon (x : M.Val t) := x.["is_some"];
  }.
End CtOption.
End CtOption.

Module  Impl_core_clone_Clone_for_subtle_CtOption_t_T.
Section Impl_core_clone_Clone_for_subtle_CtOption_t_T.
  Context {T : Set}.
  
  Context {ℋ_0 : core.clone.Clone.Trait T}.
  
  Ltac Self := exact (subtle.CtOption.t T).
  
  (*
  Clone
  *)
  Definition clone (self : ref ltac:(Self)) : M (subtle.CtOption.t T) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* α0 : ref (subtle.CtOption.t T) := M.read self in
    let* α1 : T :=
      M.call
        ((core.clone.Clone.clone (Self := T) (Trait := ltac:(refine _)))
          (borrow (deref α0).["value"])) in
    let* α2 : ref (subtle.CtOption.t T) := M.read self in
    let* α3 : subtle.Choice.t :=
      M.call
        ((core.clone.Clone.clone
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          (borrow (deref α2).["is_some"])) in
    M.pure {| subtle.CtOption.value := α1; subtle.CtOption.is_some := α3; |}.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_subtle_CtOption_t_T.
End Impl_core_clone_Clone_for_subtle_CtOption_t_T.

Module  Impl_core_marker_Copy_for_subtle_CtOption_t_T.
Section Impl_core_marker_Copy_for_subtle_CtOption_t_T.
  Context {T : Set}.
  
  Context {ℋ_0 : core.marker.Copy.Trait T}.
  
  Ltac Self := exact (subtle.CtOption.t T).
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_subtle_CtOption_t_T.
End Impl_core_marker_Copy_for_subtle_CtOption_t_T.

Module  Impl_core_fmt_Debug_for_subtle_CtOption_t_T.
Section Impl_core_fmt_Debug_for_subtle_CtOption_t_T.
  Context {T : Set}.
  
  Context {ℋ_0 : core.fmt.Debug.Trait T}.
  
  Ltac Self := exact (subtle.CtOption.t T).
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* f : M.Val (mut_ref core.fmt.Formatter.t) := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "CtOption") in
    let* α2 : ref str.t := M.read (mk_str "value") in
    let* α3 : ref (subtle.CtOption.t T) := M.read self in
    let* α4 : M.Val (ref T) := M.alloc (borrow (deref α3).["value"]) in
    let* α5 : ref type not implemented :=
      M.read (pointer_coercion "Unsize" α4) in
    let* α6 : ref str.t := M.read (mk_str "is_some") in
    let* α7 : ref (subtle.CtOption.t T) := M.read self in
    let* α8 : M.Val (ref subtle.Choice.t) :=
      M.alloc (borrow (deref α7).["is_some"]) in
    let* α9 : M.Val (ref (ref subtle.Choice.t)) := M.alloc (borrow α8) in
    let* α10 : ref type not implemented :=
      M.read (pointer_coercion "Unsize" α9) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field2_finish"] α0 α1 α2 α5 α6 α10).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_subtle_CtOption_t_T.
End Impl_core_fmt_Debug_for_subtle_CtOption_t_T.

Module  Impl_core_convert_From_subtle_CtOption_t_T_for_core_option_Option_t_T.
Section Impl_core_convert_From_subtle_CtOption_t_T_for_core_option_Option_t_T.
  Context {T : Set}.
  
  Ltac Self := exact (core.option.Option.t T).
  
  (*
      fn from(source: CtOption<T>) -> Option<T> {
          if source.is_some().unwrap_u8() == 1u8 {
              Option::Some(source.value)
          } else {
              None
          }
      }
  *)
  Definition from (source : subtle.CtOption.t T) : M (core.option.Option.t T) :=
    let* source : M.Val (subtle.CtOption.t T) := M.alloc source in
    let* α0 : subtle.Choice.t :=
      M.call ((subtle.CtOption.t T)::["is_some"] (borrow source)) in
    let* α1 : M.Val subtle.Choice.t := M.alloc α0 in
    let* α2 : u8.t := M.call (subtle.Choice.t::["unwrap_u8"] (borrow α1)) in
    let* α3 : M.Val (core.option.Option.t T) :=
      if (use (BinOp.Pure.eq α2 (Integer.of_Z 1)) : bool) then
        let* α0 : T := M.read source.["value"] in
        M.alloc (core.option.Option.Some α0)
      else
        M.alloc core.option.Option.None in
    M.read α3.
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon ltac:(Self) "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait ltac:(Self) (T := subtle.CtOption.t T) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_subtle_CtOption_t_T_for_core_option_Option_t_T.
End Impl_core_convert_From_subtle_CtOption_t_T_for_core_option_Option_t_T.

Module  Impl_subtle_CtOption_t_T.
Section Impl_subtle_CtOption_t_T.
  Context {T : Set}.
  
  Ltac Self := exact (subtle.CtOption.t T).
  
  (*
      pub fn new(value: T, is_some: Choice) -> CtOption<T> {
          CtOption {
              value: value,
              is_some: is_some,
          }
      }
  *)
  Definition new
      (value : T)
      (is_some : subtle.Choice.t)
      : M (subtle.CtOption.t T) :=
    let* value : M.Val T := M.alloc value in
    let* is_some : M.Val subtle.Choice.t := M.alloc is_some in
    let* α0 : T := M.read value in
    let* α1 : subtle.Choice.t := M.read is_some in
    M.pure {| subtle.CtOption.value := α0; subtle.CtOption.is_some := α1; |}.
  
  Global Instance AssociatedFunction_new :
    Notations.DoubleColon ltac:(Self) "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn expect(self, msg: &str) -> T {
          assert_eq!(self.is_some.unwrap_u8(), 1, "{}", msg);
  
          self.value
      }
  *)
  Definition expect (self : ltac:(Self)) (msg : ref str.t) : M T :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* msg : M.Val (ref str.t) := M.alloc msg in
    let* _ : M.Val unit :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow self.["is_some"])) in
      let* α1 : M.Val u8.t := M.alloc α0 in
      let* α2 : M.Val u8.t := M.alloc (Integer.of_Z 1) in
      match (borrow α1, borrow α2) with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ref u8.t := M.read left_val in
        let* α1 : u8.t := M.read (deref α0) in
        let* α2 : ref u8.t := M.read right_val in
        let* α3 : u8.t := M.read (deref α2) in
        if (use (UnOp.not (BinOp.Pure.eq α1 α3)) : bool) then
          let* kind : M.Val core.panicking.AssertKind.t :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : M.Val never.t :=
            let* α0 : core.panicking.AssertKind.t := M.read kind in
            let* α1 : ref u8.t := M.read left_val in
            let* α2 : ref u8.t := M.read right_val in
            let* α3 : M.Val (array (ref str.t)) := M.alloc [ mk_str "" ] in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α3) in
            let* α5 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α4) in
            let* α6 : core.fmt.rt.Argument.t :=
              M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
            let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
            let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
            let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
              M.alloc (borrow α8) in
            let* α10 : ref (slice core.fmt.rt.Argument.t) :=
              M.read (pointer_coercion "Unsize" α9) in
            let* α11 : core.fmt.Arguments.t :=
              M.call (core.fmt.Arguments.t::["new_v1"] α5 α10) in
            let* α12 : never.t :=
              M.call
                (core.panicking.assert_failed
                  α0
                  α1
                  α2
                  (core.option.Option.Some α11)) in
            M.alloc α12 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt
      end in
    M.read self.["value"].
  
  Global Instance AssociatedFunction_expect :
    Notations.DoubleColon ltac:(Self) "expect" := {
    Notations.double_colon := expect;
  }.
  
  (*
      pub fn unwrap(self) -> T {
          assert_eq!(self.is_some.unwrap_u8(), 1);
  
          self.value
      }
  *)
  Definition unwrap (self : ltac:(Self)) : M T :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* _ : M.Val unit :=
      let* α0 : u8.t :=
        M.call (subtle.Choice.t::["unwrap_u8"] (borrow self.["is_some"])) in
      let* α1 : M.Val u8.t := M.alloc α0 in
      let* α2 : M.Val u8.t := M.alloc (Integer.of_Z 1) in
      match (borrow α1, borrow α2) with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ref u8.t := M.read left_val in
        let* α1 : u8.t := M.read (deref α0) in
        let* α2 : ref u8.t := M.read right_val in
        let* α3 : u8.t := M.read (deref α2) in
        if (use (UnOp.not (BinOp.Pure.eq α1 α3)) : bool) then
          let* kind : M.Val core.panicking.AssertKind.t :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : M.Val never.t :=
            let* α0 : core.panicking.AssertKind.t := M.read kind in
            let* α1 : ref u8.t := M.read left_val in
            let* α2 : ref u8.t := M.read right_val in
            let* α3 : never.t :=
              M.call
                (core.panicking.assert_failed
                  α0
                  α1
                  α2
                  core.option.Option.None) in
            M.alloc α3 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt
      end in
    M.read self.["value"].
  
  Global Instance AssociatedFunction_unwrap :
    Notations.DoubleColon ltac:(Self) "unwrap" := {
    Notations.double_colon := unwrap;
  }.
  
  (*
      pub fn unwrap_or(self, def: T) -> T
      where
          T: ConditionallySelectable,
      {
          T::conditional_select(&def, &self.value, self.is_some)
      }
  *)
  Definition unwrap_or
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      (self : ltac:(Self))
      (def : T)
      : M T :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* def : M.Val T := M.alloc def in
    let* α0 : subtle.Choice.t := M.read self.["is_some"] in
    M.call
      ((subtle.ConditionallySelectable.conditional_select
          (Self := T)
          (Trait := ltac:(refine _)))
        (borrow def)
        (borrow self.["value"])
        α0).
  
  Global Instance AssociatedFunction_unwrap_or
      {ℋ_0 : subtle.ConditionallySelectable.Trait T} :
    Notations.DoubleColon ltac:(Self) "unwrap_or" := {
    Notations.double_colon := unwrap_or;
  }.
  
  (*
      pub fn unwrap_or_else<F>(self, f: F) -> T
      where
          T: ConditionallySelectable,
          F: FnOnce() -> T,
      {
          T::conditional_select(&f(), &self.value, self.is_some)
      }
  *)
  Definition unwrap_or_else
      {F : Set}
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)}
      (self : ltac:(Self))
      (f : F)
      : M T :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* f : M.Val F := M.alloc f in
    let* α0 : F := M.read f in
    let* α1 : T :=
      M.call
        ((core.ops.function.FnOnce.call_once
            (Self := F)
            (Trait := ltac:(refine _)))
          α0
          tt) in
    let* α2 : M.Val T := M.alloc α1 in
    let* α3 : subtle.Choice.t := M.read self.["is_some"] in
    M.call
      ((subtle.ConditionallySelectable.conditional_select
          (Self := T)
          (Trait := ltac:(refine _)))
        (borrow α2)
        (borrow self.["value"])
        α3).
  
  Global Instance AssociatedFunction_unwrap_or_else
      {F : Set}
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)} :
    Notations.DoubleColon ltac:(Self) "unwrap_or_else" := {
    Notations.double_colon := unwrap_or_else (F := F);
  }.
  
  (*
      pub fn is_some(&self) -> Choice {
          self.is_some
      }
  *)
  Definition is_some (self : ref ltac:(Self)) : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* α0 : ref (subtle.CtOption.t T) := M.read self in
    M.read (deref α0).["is_some"].
  
  Global Instance AssociatedFunction_is_some :
    Notations.DoubleColon ltac:(Self) "is_some" := {
    Notations.double_colon := is_some;
  }.
  
  (*
      pub fn is_none(&self) -> Choice {
          !self.is_some
      }
  *)
  Definition is_none (self : ref ltac:(Self)) : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* α0 : ref (subtle.CtOption.t T) := M.read self in
    let* α1 : subtle.Choice.t := M.read (deref α0).["is_some"] in
    M.call
      ((core.ops.bit.Not.not
          (Self := subtle.Choice.t)
          (Trait := ltac:(refine _)))
        α1).
  
  Global Instance AssociatedFunction_is_none :
    Notations.DoubleColon ltac:(Self) "is_none" := {
    Notations.double_colon := is_none;
  }.
  
  (*
      pub fn map<U, F>(self, f: F) -> CtOption<U>
      where
          T: Default + ConditionallySelectable,
          F: FnOnce(T) -> U,
      {
          CtOption::new(
              f(T::conditional_select(
                  &T::default(),
                  &self.value,
                  self.is_some,
              )),
              self.is_some,
          )
      }
  *)
  Definition map
      {U F : Set}
      {ℋ_0 : core.default.Default.Trait T}
      {ℋ_1 : subtle.ConditionallySelectable.Trait T}
      {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := T)}
      (self : ltac:(Self))
      (f : F)
      : M (subtle.CtOption.t U) :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* f : M.Val F := M.alloc f in
    let* α0 : F := M.read f in
    let* α1 : T :=
      M.call
        (core.default.Default.default (Self := T) (Trait := ltac:(refine _))) in
    let* α2 : M.Val T := M.alloc α1 in
    let* α3 : subtle.Choice.t := M.read self.["is_some"] in
    let* α4 : T :=
      M.call
        ((subtle.ConditionallySelectable.conditional_select
            (Self := T)
            (Trait := ltac:(refine _)))
          (borrow α2)
          (borrow self.["value"])
          α3) in
    let* α5 : U :=
      M.call
        ((core.ops.function.FnOnce.call_once
            (Self := F)
            (Trait := ltac:(refine _)))
          α0
          (α4)) in
    let* α6 : subtle.Choice.t := M.read self.["is_some"] in
    M.call ((subtle.CtOption.t U)::["new"] α5 α6).
  
  Global Instance AssociatedFunction_map
      {U F : Set}
      {ℋ_0 : core.default.Default.Trait T}
      {ℋ_1 : subtle.ConditionallySelectable.Trait T}
      {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := T)} :
    Notations.DoubleColon ltac:(Self) "map" := {
    Notations.double_colon := map (U := U) (F := F);
  }.
  
  (*
      pub fn and_then<U, F>(self, f: F) -> CtOption<U>
      where
          T: Default + ConditionallySelectable,
          F: FnOnce(T) -> CtOption<U>,
      {
          let mut tmp = f(T::conditional_select(
              &T::default(),
              &self.value,
              self.is_some,
          ));
          tmp.is_some &= self.is_some;
  
          tmp
      }
  *)
  Definition and_then
      {U F : Set}
      {ℋ_0 : core.default.Default.Trait T}
      {ℋ_1 : subtle.ConditionallySelectable.Trait T}
      {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := T)}
      (self : ltac:(Self))
      (f : F)
      : M (subtle.CtOption.t U) :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* f : M.Val F := M.alloc f in
    let* tmp : M.Val (subtle.CtOption.t U) :=
      let* α0 : F := M.read f in
      let* α1 : T :=
        M.call
          (core.default.Default.default
            (Self := T)
            (Trait := ltac:(refine _))) in
      let* α2 : M.Val T := M.alloc α1 in
      let* α3 : subtle.Choice.t := M.read self.["is_some"] in
      let* α4 : T :=
        M.call
          ((subtle.ConditionallySelectable.conditional_select
              (Self := T)
              (Trait := ltac:(refine _)))
            (borrow α2)
            (borrow self.["value"])
            α3) in
      let* α5 : subtle.CtOption.t U :=
        M.call
          ((core.ops.function.FnOnce.call_once
              (Self := F)
              (Trait := ltac:(refine _)))
            α0
            (α4)) in
      M.alloc α5 in
    let* _ : M.Val unit :=
      let* α0 : subtle.Choice.t := M.read self.["is_some"] in
      let* α1 : unit :=
        M.call
          ((core.ops.bit.BitAndAssign.bitand_assign
              (Self := subtle.Choice.t)
              (Trait := ltac:(refine _)))
            (borrow_mut tmp.["is_some"])
            α0) in
      M.alloc α1 in
    M.read tmp.
  
  Global Instance AssociatedFunction_and_then
      {U F : Set}
      {ℋ_0 : core.default.Default.Trait T}
      {ℋ_1 : subtle.ConditionallySelectable.Trait T}
      {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := T)} :
    Notations.DoubleColon ltac:(Self) "and_then" := {
    Notations.double_colon := and_then (U := U) (F := F);
  }.
  
  (*
      pub fn or_else<F>(self, f: F) -> CtOption<T>
      where
          T: ConditionallySelectable,
          F: FnOnce() -> CtOption<T>,
      {
          let is_none = self.is_none();
          let f = f();
  
          Self::conditional_select(&self, &f, is_none)
      }
  *)
  Definition or_else
      {F : Set}
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)}
      (self : ltac:(Self))
      (f : F)
      : M (subtle.CtOption.t T) :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    let* f : M.Val F := M.alloc f in
    let* is_none : M.Val subtle.Choice.t :=
      let* α0 : subtle.Choice.t :=
        M.call ((subtle.CtOption.t T)::["is_none"] (borrow self)) in
      M.alloc α0 in
    let* f : M.Val (subtle.CtOption.t T) :=
      let* α0 : F := M.read f in
      let* α1 : subtle.CtOption.t T :=
        M.call
          ((core.ops.function.FnOnce.call_once
              (Self := F)
              (Trait := ltac:(refine _)))
            α0
            tt) in
      M.alloc α1 in
    let* α0 : subtle.Choice.t := M.read is_none in
    let* α1 : subtle.CtOption.t T :=
      M.call
        ((subtle.ConditionallySelectable.conditional_select
            (Self := subtle.CtOption.t T)
            (Trait := ltac:(refine _)))
          (borrow self)
          (borrow f)
          α0) in
    let* α0 : M.Val (subtle.CtOption.t T) := M.alloc α1 in
    M.read α0.
  
  Global Instance AssociatedFunction_or_else
      {F : Set}
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)} :
    Notations.DoubleColon ltac:(Self) "or_else" := {
    Notations.double_colon := or_else (F := F);
  }.
End Impl_subtle_CtOption_t_T.
End Impl_subtle_CtOption_t_T.

Module  Impl_subtle_ConditionallySelectable_for_subtle_CtOption_t_T.
Section Impl_subtle_ConditionallySelectable_for_subtle_CtOption_t_T.
  Context {T : Set}.
  
  Context {ℋ_0 : subtle.ConditionallySelectable.Trait T}.
  
  Ltac Self := exact (subtle.CtOption.t T).
  
  (*
      fn conditional_select(a: &Self, b: &Self, choice: Choice) -> Self {
          CtOption::new(
              T::conditional_select(&a.value, &b.value, choice),
              Choice::conditional_select(&a.is_some, &b.is_some, choice),
          )
      }
  *)
  Definition conditional_select
      (a : ref ltac:(Self))
      (b : ref ltac:(Self))
      (choice : subtle.Choice.t)
      : M ltac:(Self) :=
    let* a : M.Val (ref ltac:(Self)) := M.alloc a in
    let* b : M.Val (ref ltac:(Self)) := M.alloc b in
    let* choice : M.Val subtle.Choice.t := M.alloc choice in
    let* α0 : ref (subtle.CtOption.t T) := M.read a in
    let* α1 : ref (subtle.CtOption.t T) := M.read b in
    let* α2 : subtle.Choice.t := M.read choice in
    let* α3 : T :=
      M.call
        ((subtle.ConditionallySelectable.conditional_select
            (Self := T)
            (Trait := ltac:(refine _)))
          (borrow (deref α0).["value"])
          (borrow (deref α1).["value"])
          α2) in
    let* α4 : ref (subtle.CtOption.t T) := M.read a in
    let* α5 : ref (subtle.CtOption.t T) := M.read b in
    let* α6 : subtle.Choice.t := M.read choice in
    let* α7 : subtle.Choice.t :=
      M.call
        ((subtle.ConditionallySelectable.conditional_select
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          (borrow (deref α4).["is_some"])
          (borrow (deref α5).["is_some"])
          α6) in
    M.call ((subtle.CtOption.t T)::["new"] α3 α7).
  
  Global Instance AssociatedFunction_conditional_select :
    Notations.DoubleColon ltac:(Self) "conditional_select" := {
    Notations.double_colon := conditional_select;
  }.
  
  Global Instance ℐ :
    subtle.ConditionallySelectable.Required.Trait ltac:(Self) := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign := Datatypes.None;
    subtle.ConditionallySelectable.conditional_swap := Datatypes.None;
  }.
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_t_T.
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_t_T.

Module  Impl_subtle_ConstantTimeEq_for_subtle_CtOption_t_T.
Section Impl_subtle_ConstantTimeEq_for_subtle_CtOption_t_T.
  Context {T : Set}.
  
  Context {ℋ_0 : subtle.ConstantTimeEq.Trait T}.
  
  Ltac Self := exact (subtle.CtOption.t T).
  
  (*
      fn ct_eq(&self, rhs: &CtOption<T>) -> Choice {
          let a = self.is_some();
          let b = rhs.is_some();
  
          (a & b & self.value.ct_eq(&rhs.value)) | (!a & !b)
      }
  *)
  Definition ct_eq
      (self : ref ltac:(Self))
      (rhs : ref (subtle.CtOption.t T))
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* rhs : M.Val (ref (subtle.CtOption.t T)) := M.alloc rhs in
    let* a : M.Val subtle.Choice.t :=
      let* α0 : ref (subtle.CtOption.t T) := M.read self in
      let* α1 : subtle.Choice.t :=
        M.call ((subtle.CtOption.t T)::["is_some"] α0) in
      M.alloc α1 in
    let* b : M.Val subtle.Choice.t :=
      let* α0 : ref (subtle.CtOption.t T) := M.read rhs in
      let* α1 : subtle.Choice.t :=
        M.call ((subtle.CtOption.t T)::["is_some"] α0) in
      M.alloc α1 in
    let* α0 : subtle.Choice.t := M.read a in
    let* α1 : subtle.Choice.t := M.read b in
    let* α2 : subtle.Choice.t :=
      M.call
        ((core.ops.bit.BitAnd.bitand
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α0
          α1) in
    let* α3 : ref (subtle.CtOption.t T) := M.read self in
    let* α4 : ref (subtle.CtOption.t T) := M.read rhs in
    let* α5 : subtle.Choice.t :=
      M.call
        ((subtle.ConstantTimeEq.ct_eq (Self := T) (Trait := ltac:(refine _)))
          (borrow (deref α3).["value"])
          (borrow (deref α4).["value"])) in
    let* α6 : subtle.Choice.t :=
      M.call
        ((core.ops.bit.BitAnd.bitand
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α2
          α5) in
    let* α7 : subtle.Choice.t := M.read a in
    let* α8 : subtle.Choice.t :=
      M.call
        ((core.ops.bit.Not.not
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α7) in
    let* α9 : subtle.Choice.t := M.read b in
    let* α10 : subtle.Choice.t :=
      M.call
        ((core.ops.bit.Not.not
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α9) in
    let* α11 : subtle.Choice.t :=
      M.call
        ((core.ops.bit.BitAnd.bitand
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α8
          α10) in
    let* α12 : subtle.Choice.t :=
      M.call
        ((core.ops.bit.BitOr.bitor
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α6
          α11) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α12 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_eq :
    Notations.DoubleColon ltac:(Self) "ct_eq" := {
    Notations.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_t_T.
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_t_T.

Module  ConstantTimeGreater.
Section ConstantTimeGreater.
  Class Trait (Self : Set) : Type := {
    ct_gt : (ref ltac:(Self)) -> (ref ltac:(Self)) -> M subtle.Choice.t;
  }.
  
End ConstantTimeGreater.
End ConstantTimeGreater.

Module  Impl_subtle_ConstantTimeGreater_for_u8_t.
Section Impl_subtle_ConstantTimeGreater_for_u8_t.
  Ltac Self := exact u8.t.
  
  (*
              fn ct_gt(&self, other: &$t_u) -> Choice {
                  let gtb = self & !other; // All the bits in self that are greater than their corresponding bits in other.
                  let mut ltb = !self & other; // All the bits in self that are less than their corresponding bits in other.
                  let mut pow = 1;
  
                  // Less-than operator is okay here because it's dependent on the bit-width.
                  while pow < $bit_width {
                      ltb |= ltb >> pow; // Bit-smear the highest set bit to the right.
                      pow += pow;
                  }
                  let mut bit = gtb & !ltb; // Select the highest set bit.
                  let mut pow = 1;
  
                  while pow < $bit_width {
                      bit |= bit >> pow; // Shift it to the right until we end up with either 0 or 1.
                      pow += pow;
                  }
                  // XXX We should possibly do the above flattening to 0 or 1 in the
                  //     Choice constructor rather than making it a debug error?
                  Choice::from((bit & 1) as u8)
              }
  *)
  Definition ct_gt
      (self : ref ltac:(Self))
      (other : ref u8.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref u8.t) := M.alloc other in
    let* gtb : M.Val u8.t :=
      let* α0 : ref u8.t := M.read self in
      let* α1 : ref u8.t := M.read other in
      let* α2 : u8.t :=
        M.call
          ((core.ops.bit.Not.not (Self := ref u8.t) (Trait := ltac:(refine _)))
            α1) in
      let* α3 : u8.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := ref u8.t)
              (Trait := ltac:(refine _)))
            α0
            α2) in
      M.alloc α3 in
    let* ltb : M.Val u8.t :=
      let* α0 : ref u8.t := M.read self in
      let* α1 : u8.t :=
        M.call
          ((core.ops.bit.Not.not (Self := ref u8.t) (Trait := ltac:(refine _)))
            α0) in
      let* α2 : ref u8.t := M.read other in
      let* α3 : u8.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := u8.t)
              (Trait := ltac:(refine _)))
            α1
            α2) in
      M.alloc α3 in
    let* pow : M.Val i32.t := M.alloc (Integer.of_Z 1) in
    let* _ : M.Val unit :=
      loop
        (let* α0 : i32.t := M.read pow in
        if (use (BinOp.Pure.lt α0 (Integer.of_Z 8)) : bool) then
          let* _ : M.Val unit :=
            let* α0 : u8.t := M.read ltb in
            let* α1 : i32.t := M.read pow in
            let* α2 : u8.t := BinOp.Panic.shr α0 α1 in
            let* α3 : M.Val u8.t := M.alloc α2 in
            M.pure (assign_op BinOp.Pure.bit_or ltb α3) in
          let* _ : M.Val unit := assign_op BinOp.Panic.add pow pow in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2) in
    let* bit : M.Val u8.t :=
      let* α0 : u8.t := M.read gtb in
      let* α1 : u8.t := M.read ltb in
      M.alloc (BinOp.Pure.bit_and α0 (UnOp.not α1)) in
    let* pow : M.Val i32.t := M.alloc (Integer.of_Z 1) in
    let* _ : M.Val unit :=
      loop
        (let* α0 : i32.t := M.read pow in
        if (use (BinOp.Pure.lt α0 (Integer.of_Z 8)) : bool) then
          let* _ : M.Val unit :=
            let* α0 : u8.t := M.read bit in
            let* α1 : i32.t := M.read pow in
            let* α2 : u8.t := BinOp.Panic.shr α0 α1 in
            let* α3 : M.Val u8.t := M.alloc α2 in
            M.pure (assign_op BinOp.Pure.bit_or bit α3) in
          let* _ : M.Val unit := assign_op BinOp.Panic.add pow pow in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2) in
    let* α0 : u8.t := M.read bit in
    let* α1 : subtle.Choice.t :=
      M.call
        ((core.convert.From.from
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          (use (BinOp.Pure.bit_and α0 (Integer.of_Z 1)))) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α1 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_gt :
    Notations.DoubleColon ltac:(Self) "ct_gt" := {
    Notations.double_colon := ct_gt;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeGreater.Trait ltac:(Self) := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
End Impl_subtle_ConstantTimeGreater_for_u8_t.
End Impl_subtle_ConstantTimeGreater_for_u8_t.

Module  Impl_subtle_ConstantTimeGreater_for_u16_t.
Section Impl_subtle_ConstantTimeGreater_for_u16_t.
  Ltac Self := exact u16.t.
  
  (*
              fn ct_gt(&self, other: &$t_u) -> Choice {
                  let gtb = self & !other; // All the bits in self that are greater than their corresponding bits in other.
                  let mut ltb = !self & other; // All the bits in self that are less than their corresponding bits in other.
                  let mut pow = 1;
  
                  // Less-than operator is okay here because it's dependent on the bit-width.
                  while pow < $bit_width {
                      ltb |= ltb >> pow; // Bit-smear the highest set bit to the right.
                      pow += pow;
                  }
                  let mut bit = gtb & !ltb; // Select the highest set bit.
                  let mut pow = 1;
  
                  while pow < $bit_width {
                      bit |= bit >> pow; // Shift it to the right until we end up with either 0 or 1.
                      pow += pow;
                  }
                  // XXX We should possibly do the above flattening to 0 or 1 in the
                  //     Choice constructor rather than making it a debug error?
                  Choice::from((bit & 1) as u8)
              }
  *)
  Definition ct_gt
      (self : ref ltac:(Self))
      (other : ref u16.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref u16.t) := M.alloc other in
    let* gtb : M.Val u16.t :=
      let* α0 : ref u16.t := M.read self in
      let* α1 : ref u16.t := M.read other in
      let* α2 : u16.t :=
        M.call
          ((core.ops.bit.Not.not (Self := ref u16.t) (Trait := ltac:(refine _)))
            α1) in
      let* α3 : u16.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := ref u16.t)
              (Trait := ltac:(refine _)))
            α0
            α2) in
      M.alloc α3 in
    let* ltb : M.Val u16.t :=
      let* α0 : ref u16.t := M.read self in
      let* α1 : u16.t :=
        M.call
          ((core.ops.bit.Not.not (Self := ref u16.t) (Trait := ltac:(refine _)))
            α0) in
      let* α2 : ref u16.t := M.read other in
      let* α3 : u16.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := u16.t)
              (Trait := ltac:(refine _)))
            α1
            α2) in
      M.alloc α3 in
    let* pow : M.Val i32.t := M.alloc (Integer.of_Z 1) in
    let* _ : M.Val unit :=
      loop
        (let* α0 : i32.t := M.read pow in
        if (use (BinOp.Pure.lt α0 (Integer.of_Z 16)) : bool) then
          let* _ : M.Val unit :=
            let* α0 : u16.t := M.read ltb in
            let* α1 : i32.t := M.read pow in
            let* α2 : u16.t := BinOp.Panic.shr α0 α1 in
            let* α3 : M.Val u16.t := M.alloc α2 in
            M.pure (assign_op BinOp.Pure.bit_or ltb α3) in
          let* _ : M.Val unit := assign_op BinOp.Panic.add pow pow in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2) in
    let* bit : M.Val u16.t :=
      let* α0 : u16.t := M.read gtb in
      let* α1 : u16.t := M.read ltb in
      M.alloc (BinOp.Pure.bit_and α0 (UnOp.not α1)) in
    let* pow : M.Val i32.t := M.alloc (Integer.of_Z 1) in
    let* _ : M.Val unit :=
      loop
        (let* α0 : i32.t := M.read pow in
        if (use (BinOp.Pure.lt α0 (Integer.of_Z 16)) : bool) then
          let* _ : M.Val unit :=
            let* α0 : u16.t := M.read bit in
            let* α1 : i32.t := M.read pow in
            let* α2 : u16.t := BinOp.Panic.shr α0 α1 in
            let* α3 : M.Val u16.t := M.alloc α2 in
            M.pure (assign_op BinOp.Pure.bit_or bit α3) in
          let* _ : M.Val unit := assign_op BinOp.Panic.add pow pow in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2) in
    let* α0 : u16.t := M.read bit in
    let* α1 : u8.t := cast (BinOp.Pure.bit_and α0 (Integer.of_Z 1)) in
    let* α2 : subtle.Choice.t :=
      M.call
        ((core.convert.From.from
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α1) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α2 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_gt :
    Notations.DoubleColon ltac:(Self) "ct_gt" := {
    Notations.double_colon := ct_gt;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeGreater.Trait ltac:(Self) := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
End Impl_subtle_ConstantTimeGreater_for_u16_t.
End Impl_subtle_ConstantTimeGreater_for_u16_t.

Module  Impl_subtle_ConstantTimeGreater_for_u32_t.
Section Impl_subtle_ConstantTimeGreater_for_u32_t.
  Ltac Self := exact u32.t.
  
  (*
              fn ct_gt(&self, other: &$t_u) -> Choice {
                  let gtb = self & !other; // All the bits in self that are greater than their corresponding bits in other.
                  let mut ltb = !self & other; // All the bits in self that are less than their corresponding bits in other.
                  let mut pow = 1;
  
                  // Less-than operator is okay here because it's dependent on the bit-width.
                  while pow < $bit_width {
                      ltb |= ltb >> pow; // Bit-smear the highest set bit to the right.
                      pow += pow;
                  }
                  let mut bit = gtb & !ltb; // Select the highest set bit.
                  let mut pow = 1;
  
                  while pow < $bit_width {
                      bit |= bit >> pow; // Shift it to the right until we end up with either 0 or 1.
                      pow += pow;
                  }
                  // XXX We should possibly do the above flattening to 0 or 1 in the
                  //     Choice constructor rather than making it a debug error?
                  Choice::from((bit & 1) as u8)
              }
  *)
  Definition ct_gt
      (self : ref ltac:(Self))
      (other : ref u32.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref u32.t) := M.alloc other in
    let* gtb : M.Val u32.t :=
      let* α0 : ref u32.t := M.read self in
      let* α1 : ref u32.t := M.read other in
      let* α2 : u32.t :=
        M.call
          ((core.ops.bit.Not.not (Self := ref u32.t) (Trait := ltac:(refine _)))
            α1) in
      let* α3 : u32.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := ref u32.t)
              (Trait := ltac:(refine _)))
            α0
            α2) in
      M.alloc α3 in
    let* ltb : M.Val u32.t :=
      let* α0 : ref u32.t := M.read self in
      let* α1 : u32.t :=
        M.call
          ((core.ops.bit.Not.not (Self := ref u32.t) (Trait := ltac:(refine _)))
            α0) in
      let* α2 : ref u32.t := M.read other in
      let* α3 : u32.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := u32.t)
              (Trait := ltac:(refine _)))
            α1
            α2) in
      M.alloc α3 in
    let* pow : M.Val i32.t := M.alloc (Integer.of_Z 1) in
    let* _ : M.Val unit :=
      loop
        (let* α0 : i32.t := M.read pow in
        if (use (BinOp.Pure.lt α0 (Integer.of_Z 32)) : bool) then
          let* _ : M.Val unit :=
            let* α0 : u32.t := M.read ltb in
            let* α1 : i32.t := M.read pow in
            let* α2 : u32.t := BinOp.Panic.shr α0 α1 in
            let* α3 : M.Val u32.t := M.alloc α2 in
            M.pure (assign_op BinOp.Pure.bit_or ltb α3) in
          let* _ : M.Val unit := assign_op BinOp.Panic.add pow pow in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2) in
    let* bit : M.Val u32.t :=
      let* α0 : u32.t := M.read gtb in
      let* α1 : u32.t := M.read ltb in
      M.alloc (BinOp.Pure.bit_and α0 (UnOp.not α1)) in
    let* pow : M.Val i32.t := M.alloc (Integer.of_Z 1) in
    let* _ : M.Val unit :=
      loop
        (let* α0 : i32.t := M.read pow in
        if (use (BinOp.Pure.lt α0 (Integer.of_Z 32)) : bool) then
          let* _ : M.Val unit :=
            let* α0 : u32.t := M.read bit in
            let* α1 : i32.t := M.read pow in
            let* α2 : u32.t := BinOp.Panic.shr α0 α1 in
            let* α3 : M.Val u32.t := M.alloc α2 in
            M.pure (assign_op BinOp.Pure.bit_or bit α3) in
          let* _ : M.Val unit := assign_op BinOp.Panic.add pow pow in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2) in
    let* α0 : u32.t := M.read bit in
    let* α1 : u8.t := cast (BinOp.Pure.bit_and α0 (Integer.of_Z 1)) in
    let* α2 : subtle.Choice.t :=
      M.call
        ((core.convert.From.from
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α1) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α2 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_gt :
    Notations.DoubleColon ltac:(Self) "ct_gt" := {
    Notations.double_colon := ct_gt;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeGreater.Trait ltac:(Self) := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
End Impl_subtle_ConstantTimeGreater_for_u32_t.
End Impl_subtle_ConstantTimeGreater_for_u32_t.

Module  Impl_subtle_ConstantTimeGreater_for_u64_t.
Section Impl_subtle_ConstantTimeGreater_for_u64_t.
  Ltac Self := exact u64.t.
  
  (*
              fn ct_gt(&self, other: &$t_u) -> Choice {
                  let gtb = self & !other; // All the bits in self that are greater than their corresponding bits in other.
                  let mut ltb = !self & other; // All the bits in self that are less than their corresponding bits in other.
                  let mut pow = 1;
  
                  // Less-than operator is okay here because it's dependent on the bit-width.
                  while pow < $bit_width {
                      ltb |= ltb >> pow; // Bit-smear the highest set bit to the right.
                      pow += pow;
                  }
                  let mut bit = gtb & !ltb; // Select the highest set bit.
                  let mut pow = 1;
  
                  while pow < $bit_width {
                      bit |= bit >> pow; // Shift it to the right until we end up with either 0 or 1.
                      pow += pow;
                  }
                  // XXX We should possibly do the above flattening to 0 or 1 in the
                  //     Choice constructor rather than making it a debug error?
                  Choice::from((bit & 1) as u8)
              }
  *)
  Definition ct_gt
      (self : ref ltac:(Self))
      (other : ref u64.t)
      : M subtle.Choice.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* other : M.Val (ref u64.t) := M.alloc other in
    let* gtb : M.Val u64.t :=
      let* α0 : ref u64.t := M.read self in
      let* α1 : ref u64.t := M.read other in
      let* α2 : u64.t :=
        M.call
          ((core.ops.bit.Not.not (Self := ref u64.t) (Trait := ltac:(refine _)))
            α1) in
      let* α3 : u64.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := ref u64.t)
              (Trait := ltac:(refine _)))
            α0
            α2) in
      M.alloc α3 in
    let* ltb : M.Val u64.t :=
      let* α0 : ref u64.t := M.read self in
      let* α1 : u64.t :=
        M.call
          ((core.ops.bit.Not.not (Self := ref u64.t) (Trait := ltac:(refine _)))
            α0) in
      let* α2 : ref u64.t := M.read other in
      let* α3 : u64.t :=
        M.call
          ((core.ops.bit.BitAnd.bitand
              (Self := u64.t)
              (Trait := ltac:(refine _)))
            α1
            α2) in
      M.alloc α3 in
    let* pow : M.Val i32.t := M.alloc (Integer.of_Z 1) in
    let* _ : M.Val unit :=
      loop
        (let* α0 : i32.t := M.read pow in
        if (use (BinOp.Pure.lt α0 (Integer.of_Z 64)) : bool) then
          let* _ : M.Val unit :=
            let* α0 : u64.t := M.read ltb in
            let* α1 : i32.t := M.read pow in
            let* α2 : u64.t := BinOp.Panic.shr α0 α1 in
            let* α3 : M.Val u64.t := M.alloc α2 in
            M.pure (assign_op BinOp.Pure.bit_or ltb α3) in
          let* _ : M.Val unit := assign_op BinOp.Panic.add pow pow in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2) in
    let* bit : M.Val u64.t :=
      let* α0 : u64.t := M.read gtb in
      let* α1 : u64.t := M.read ltb in
      M.alloc (BinOp.Pure.bit_and α0 (UnOp.not α1)) in
    let* pow : M.Val i32.t := M.alloc (Integer.of_Z 1) in
    let* _ : M.Val unit :=
      loop
        (let* α0 : i32.t := M.read pow in
        if (use (BinOp.Pure.lt α0 (Integer.of_Z 64)) : bool) then
          let* _ : M.Val unit :=
            let* α0 : u64.t := M.read bit in
            let* α1 : i32.t := M.read pow in
            let* α2 : u64.t := BinOp.Panic.shr α0 α1 in
            let* α3 : M.Val u64.t := M.alloc α2 in
            M.pure (assign_op BinOp.Pure.bit_or bit α3) in
          let* _ : M.Val unit := assign_op BinOp.Panic.add pow pow in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2 in
          let* α0 : M.Val unit := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2) in
    let* α0 : u64.t := M.read bit in
    let* α1 : u8.t := cast (BinOp.Pure.bit_and α0 (Integer.of_Z 1)) in
    let* α2 : subtle.Choice.t :=
      M.call
        ((core.convert.From.from
            (Self := subtle.Choice.t)
            (Trait := ltac:(refine _)))
          α1) in
    let* α0 : M.Val subtle.Choice.t := M.alloc α2 in
    M.read α0.
  
  Global Instance AssociatedFunction_ct_gt :
    Notations.DoubleColon ltac:(Self) "ct_gt" := {
    Notations.double_colon := ct_gt;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeGreater.Trait ltac:(Self) := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
End Impl_subtle_ConstantTimeGreater_for_u64_t.
End Impl_subtle_ConstantTimeGreater_for_u64_t.

Module  ConstantTimeLess.
Section ConstantTimeLess.
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: subtle.ConstantTimeEq.Trait Self;
    ℒ_1 :: subtle.ConstantTimeGreater.Trait Self;
  }.
  
End ConstantTimeLess.
End ConstantTimeLess.

Module  Impl_subtle_ConstantTimeLess_for_u8_t.
Section Impl_subtle_ConstantTimeLess_for_u8_t.
  Ltac Self := exact u8.t.
  
  Global Instance ℐ : subtle.ConstantTimeLess.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeLess.ct_lt := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeLess_for_u8_t.
End Impl_subtle_ConstantTimeLess_for_u8_t.

Module  Impl_subtle_ConstantTimeLess_for_u16_t.
Section Impl_subtle_ConstantTimeLess_for_u16_t.
  Ltac Self := exact u16.t.
  
  Global Instance ℐ : subtle.ConstantTimeLess.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeLess.ct_lt := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeLess_for_u16_t.
End Impl_subtle_ConstantTimeLess_for_u16_t.

Module  Impl_subtle_ConstantTimeLess_for_u32_t.
Section Impl_subtle_ConstantTimeLess_for_u32_t.
  Ltac Self := exact u32.t.
  
  Global Instance ℐ : subtle.ConstantTimeLess.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeLess.ct_lt := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeLess_for_u32_t.
End Impl_subtle_ConstantTimeLess_for_u32_t.

Module  Impl_subtle_ConstantTimeLess_for_u64_t.
Section Impl_subtle_ConstantTimeLess_for_u64_t.
  Ltac Self := exact u64.t.
  
  Global Instance ℐ : subtle.ConstantTimeLess.Required.Trait ltac:(Self) := {
    subtle.ConstantTimeLess.ct_lt := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeLess_for_u64_t.
End Impl_subtle_ConstantTimeLess_for_u64_t.
