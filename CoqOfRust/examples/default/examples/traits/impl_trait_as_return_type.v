(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn combine_vecs_explicit_return_type(
    v: Vec<i32>,
    u: Vec<i32>,
) -> iter::Cycle<iter::Chain<IntoIter<i32>, IntoIter<i32>>> {
    v.into_iter().chain(u.into_iter()).cycle()
}
*)
Definition combine_vecs_explicit_return_type
    (v : M.Val (alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A))
    (u : M.Val (alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A))
    :
      M
        (M.Val
          (core.iter.adapters.cycle.Cycle.t
            (core.iter.adapters.chain.Chain.t
              (alloc.vec.into_iter.IntoIter.t
                i32.t
                alloc.vec.into_iter.IntoIter.Default.A)
              (alloc.vec.into_iter.IntoIter.t
                i32.t
                alloc.vec.into_iter.IntoIter.Default.A)))) :=
  M.function_body
    (let* α0 :
        ltac:(refine
          (M.Val
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
          (Trait := ltac:(refine _)))
        v in
    let* α1 :
        ltac:(refine
          (M.Val
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
          (Trait := ltac:(refine _)))
        u in
    let* α2 :
        ltac:(refine
          (M.Val
            (core.iter.adapters.chain.Chain.t
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)))) :=
      (core.iter.traits.iterator.Iterator.chain
          (Self := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
          (Trait := ltac:(refine _)))
        α0
        α1 in
    (core.iter.traits.iterator.Iterator.cycle
        (Self :=
          core.iter.adapters.chain.Chain.t
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))
        (Trait := ltac:(refine _)))
      α2).

(*
fn combine_vecs(v: Vec<i32>, u: Vec<i32>) -> impl Iterator<Item = i32> {
    v.into_iter().chain(u.into_iter()).cycle()
}
*)
Definition combine_vecs
    (v : M.Val (alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A))
    (u : M.Val (alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A))
    : M (M.Val _ (* OpaqueTy *)) :=
  M.function_body
    (let* α0 :
        ltac:(refine
          (M.Val
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
          (Trait := ltac:(refine _)))
        v in
    let* α1 :
        ltac:(refine
          (M.Val
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
          (Trait := ltac:(refine _)))
        u in
    let* α2 :
        ltac:(refine
          (M.Val
            (core.iter.adapters.chain.Chain.t
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)))) :=
      (core.iter.traits.iterator.Iterator.chain
          (Self := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
          (Trait := ltac:(refine _)))
        α0
        α1 in
    (core.iter.traits.iterator.Iterator.cycle
        (Self :=
          core.iter.adapters.chain.Chain.t
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))
        (Trait := ltac:(refine _)))
      α2).

Error OpaqueTy.

(*
fn main() {
    let v1 = vec![1, 2, 3];
    let v2 = vec![4, 5];
    let mut v3 = combine_vecs(v1, v2);
    assert_eq!(Some(1), v3.next());
    assert_eq!(Some(2), v3.next());
    assert_eq!(Some(3), v3.next());
    assert_eq!(Some(4), v3.next());
    assert_eq!(Some(5), v3.next());
    println!("all done");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* v1 :
        ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α3 : ltac:(refine (M.Val (array i32.t))) := M.alloc [ α0; α1; α2 ] in
      let* α4 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α4 in
      let* α6 :
          ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
        (slice i32.t)::["into_vec"] α5 in
      M.copy α6 in
    let* v2 :
        ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 4 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
      let* α2 : ltac:(refine (M.Val (array i32.t))) := M.alloc [ α0; α1 ] in
      let* α3 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α2 in
      let* α4 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α3 in
      let* α5 :
          ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
        (slice i32.t)::["into_vec"] α4 in
      M.copy α5 in
    let* v3 : ltac:(refine (M.Val type not implemented)) :=
      let* α0 : ltac:(refine (M.Val type not implemented)) :=
        impl_trait_as_return_type.combine_vecs v1 v2 in
      M.copy α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        M.alloc (core.option.Option.Some α1) in
      let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val (mut_ref type not implemented))) :=
        borrow_mut v3 in
      let* α6 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        (core.iter.traits.iterator.Iterator.next
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α5 in
      let* α7 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α6 in
      let* α8 := M.read α7 in
      let* α9 :
          ltac:(refine
            (M.Val
              ((ref (core.option.Option.t i32.t))
              *
              (ref (core.option.Option.t i32.t))))) :=
        M.alloc (α4, α8) in
      let* α10 := M.read α9 in
      match α10 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := core.option.Option.t i32.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref left_val in
            let* α1 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref right_val in
            let* α3 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        M.alloc (core.option.Option.Some α1) in
      let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val (mut_ref type not implemented))) :=
        borrow_mut v3 in
      let* α6 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        (core.iter.traits.iterator.Iterator.next
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α5 in
      let* α7 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α6 in
      let* α8 := M.read α7 in
      let* α9 :
          ltac:(refine
            (M.Val
              ((ref (core.option.Option.t i32.t))
              *
              (ref (core.option.Option.t i32.t))))) :=
        M.alloc (α4, α8) in
      let* α10 := M.read α9 in
      match α10 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := core.option.Option.t i32.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref left_val in
            let* α1 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref right_val in
            let* α3 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        M.alloc (core.option.Option.Some α1) in
      let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val (mut_ref type not implemented))) :=
        borrow_mut v3 in
      let* α6 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        (core.iter.traits.iterator.Iterator.next
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α5 in
      let* α7 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α6 in
      let* α8 := M.read α7 in
      let* α9 :
          ltac:(refine
            (M.Val
              ((ref (core.option.Option.t i32.t))
              *
              (ref (core.option.Option.t i32.t))))) :=
        M.alloc (α4, α8) in
      let* α10 := M.read α9 in
      match α10 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := core.option.Option.t i32.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref left_val in
            let* α1 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref right_val in
            let* α3 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 4 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        M.alloc (core.option.Option.Some α1) in
      let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val (mut_ref type not implemented))) :=
        borrow_mut v3 in
      let* α6 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        (core.iter.traits.iterator.Iterator.next
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α5 in
      let* α7 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α6 in
      let* α8 := M.read α7 in
      let* α9 :
          ltac:(refine
            (M.Val
              ((ref (core.option.Option.t i32.t))
              *
              (ref (core.option.Option.t i32.t))))) :=
        M.alloc (α4, α8) in
      let* α10 := M.read α9 in
      match α10 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := core.option.Option.t i32.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref left_val in
            let* α1 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref right_val in
            let* α3 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        M.alloc (core.option.Option.Some α1) in
      let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val (mut_ref type not implemented))) :=
        borrow_mut v3 in
      let* α6 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
        (core.iter.traits.iterator.Iterator.next
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α5 in
      let* α7 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
        borrow α6 in
      let* α8 := M.read α7 in
      let* α9 :
          ltac:(refine
            (M.Val
              ((ref (core.option.Option.t i32.t))
              *
              (ref (core.option.Option.t i32.t))))) :=
        M.alloc (α4, α8) in
      let* α10 := M.read α9 in
      match α10 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α2 in
        let* α4 : ltac:(refine (M.Val bool.t)) :=
          (core.cmp.PartialEq.eq
              (Self := core.option.Option.t i32.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := UnOp.not α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := use α5 in
        let* α7 := M.read α6 in
        if (α7 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref left_val in
            let* α1 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
              deref right_val in
            let* α3 :
                ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            core.panicking.assert_failed kind α1 α3 α4 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "all done
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    M.alloc tt).
