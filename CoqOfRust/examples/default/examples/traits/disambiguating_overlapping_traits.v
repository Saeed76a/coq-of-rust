(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  UsernameWidget.
Section UsernameWidget.
  Class Trait (Self : Set) : Type := {
    get : (ref ltac:(Self)) -> M alloc.string.String.t;
  }.
  
End UsernameWidget.
End UsernameWidget.

Module  AgeWidget.
Section AgeWidget.
  Class Trait (Self : Set) : Type := {
    get : (ref ltac:(Self)) -> M u8.t;
  }.
  
End AgeWidget.
End AgeWidget.

Module  Form.
Section Form.
  Record t : Set := {
    username : alloc.string.String.t;
    age : u8.t;
  }.
  
  Global Instance Get_username : Notations.Dot "username" := {
    Notations.dot :=
      Ref.map (fun x => x.(username)) (fun v x => x <| username := v |>);
  }.
  Global Instance Get_AF_username : Notations.DoubleColon t "username" := {
    Notations.double_colon (x : M.Val t) := x.["username"];
  }.
  Global Instance Get_age : Notations.Dot "age" := {
    Notations.dot := Ref.map (fun x => x.(age)) (fun v x => x <| age := v |>);
  }.
  Global Instance Get_AF_age : Notations.DoubleColon t "age" := {
    Notations.double_colon (x : M.Val t) := x.["age"];
  }.
End Form.
End Form.

Module  Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
Section Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
  Ltac Self := exact disambiguating_overlapping_traits.Form.t.
  
  (*
      fn get(&self) -> String {
          self.username.clone()
      }
  *)
  Definition get (self : ref ltac:(Self)) : M alloc.string.String.t :=
    let* self := M.alloc self in
    M.function_body
      (let* α0 : M.Val disambiguating_overlapping_traits.Form.t := deref self in
      let* α1 : M.Val (ref alloc.string.String.t) := borrow α0.["username"] in
      let* α2 := M.read α1 in
      let* α3 :=
        (core.clone.Clone.clone
            (Self := alloc.string.String.t)
            (Trait := ltac:(refine _)))
          α2 in
      M.alloc α3).
  
  Global Instance AssociatedFunction_get :
    Notations.DoubleColon ltac:(Self) "get" := {
    Notations.double_colon := get;
  }.
  
  Global Instance ℐ :
    disambiguating_overlapping_traits.UsernameWidget.Trait ltac:(Self) := {
    disambiguating_overlapping_traits.UsernameWidget.get := get;
  }.
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.

Module  Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
Section Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
  Ltac Self := exact disambiguating_overlapping_traits.Form.t.
  
  (*
      fn get(&self) -> u8 {
          self.age
      }
  *)
  Definition get (self : ref ltac:(Self)) : M u8.t :=
    let* self := M.alloc self in
    M.function_body
      (let* α0 : M.Val disambiguating_overlapping_traits.Form.t := deref self in
      M.pure α0.["age"]).
  
  Global Instance AssociatedFunction_get :
    Notations.DoubleColon ltac:(Self) "get" := {
    Notations.double_colon := get;
  }.
  
  Global Instance ℐ :
    disambiguating_overlapping_traits.AgeWidget.Trait ltac:(Self) := {
    disambiguating_overlapping_traits.AgeWidget.get := get;
  }.
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.

(*
fn main() {
    let form = Form {
        username: "rustacean".to_owned(),
        age: 28,
    };

    // If you uncomment this line, you'll get an error saying
    // "multiple `get` found". Because, after all, there are multiple methods
    // named `get`.
    // println!("{}", form.get());

    let username = <Form as UsernameWidget>::get(&form);
    assert_eq!(("rustacean".to_string()), username);
    let age = <Form as AgeWidget>::get(&form);
    assert_eq!(28, age);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* form : M.Val disambiguating_overlapping_traits.Form.t :=
      let* α0 : M.Val str.t := deref (mk_str "rustacean") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 :=
        (alloc.borrow.ToOwned.to_owned
            (Self := str.t)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 : M.Val u8.t := M.alloc 28 in
      let* α5 := M.read α4 in
      M.alloc
        {|
          disambiguating_overlapping_traits.Form.username := α3;
          disambiguating_overlapping_traits.Form.age := α5;
        |} in
    let* username : M.Val alloc.string.String.t :=
      let* α0 : M.Val (ref disambiguating_overlapping_traits.Form.t) :=
        borrow form in
      let* α1 := M.read α0 in
      let* α2 :=
        (disambiguating_overlapping_traits.UsernameWidget.get
            (Self := disambiguating_overlapping_traits.Form.t)
            (Trait := ltac:(refine _)))
          α1 in
      M.alloc α2 in
    let* _ : M.Val unit :=
      let* α0 : M.Val str.t := deref (mk_str "rustacean") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 :=
        (alloc.string.ToString.to_string
            (Self := str.t)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 : M.Val alloc.string.String.t := M.alloc α3 in
      let* α5 : M.Val (ref alloc.string.String.t) := borrow α4 in
      let* α6 := M.read α5 in
      let* α7 : M.Val (ref alloc.string.String.t) := borrow username in
      let* α8 := M.read α7 in
      let* α9 :
          M.Val ((ref alloc.string.String.t) * (ref alloc.string.String.t)) :=
        M.alloc (α6, α8) in
      let* α10 := M.read α9 in
      match α10 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : M.Val alloc.string.String.t := deref left_val in
        let* α1 : M.Val (ref alloc.string.String.t) := borrow α0 in
        let* α2 := M.read α1 in
        let* α3 : M.Val alloc.string.String.t := deref right_val in
        let* α4 : M.Val (ref alloc.string.String.t) := borrow α3 in
        let* α5 := M.read α4 in
        let* α6 :=
          (core.cmp.PartialEq.eq
              (Self := alloc.string.String.t)
              (Trait := ltac:(refine _)))
            α2
            α5 in
        let* α7 : M.Val bool.t := M.alloc α6 in
        let* α8 : M.Val bool.t := UnOp.not α7 in
        let* α9 : M.Val bool.t := use α8 in
        let* α10 := M.read α9 in
        if (α10 : bool) then
          let* kind : M.Val core.panicking.AssertKind.t :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : M.Val never.t :=
            let* α0 := M.read kind in
            let* α1 : M.Val alloc.string.String.t := deref left_val in
            let* α2 : M.Val (ref alloc.string.String.t) := borrow α1 in
            let* α3 := M.read α2 in
            let* α4 : M.Val alloc.string.String.t := deref right_val in
            let* α5 : M.Val (ref alloc.string.String.t) := borrow α4 in
            let* α6 := M.read α5 in
            let* α7 :=
              core.panicking.assert_failed α0 α3 α6 core.option.Option.None in
            M.alloc α7 in
          let* α0 : M.Val unit := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* age : M.Val u8.t :=
      let* α0 : M.Val (ref disambiguating_overlapping_traits.Form.t) :=
        borrow form in
      let* α1 := M.read α0 in
      let* α2 :=
        (disambiguating_overlapping_traits.AgeWidget.get
            (Self := disambiguating_overlapping_traits.Form.t)
            (Trait := ltac:(refine _)))
          α1 in
      M.alloc α2 in
    let* _ : M.Val unit :=
      let* α0 : M.Val u8.t := M.alloc 28 in
      let* α1 : M.Val (ref u8.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 : M.Val (ref u8.t) := borrow age in
      let* α4 := M.read α3 in
      let* α5 : M.Val ((ref u8.t) * (ref u8.t)) := M.alloc (α2, α4) in
      let* α6 := M.read α5 in
      match α6 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : M.Val u8.t := deref left_val in
        let* α1 : M.Val u8.t := deref right_val in
        let* α2 : M.Val bool.t := BinOp.eq α0 α1 in
        let* α3 : M.Val bool.t := UnOp.not α2 in
        let* α4 : M.Val bool.t := use α3 in
        let* α5 := M.read α4 in
        if (α5 : bool) then
          let* kind : M.Val core.panicking.AssertKind.t :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : M.Val never.t :=
            let* α0 := M.read kind in
            let* α1 : M.Val u8.t := deref left_val in
            let* α2 : M.Val (ref u8.t) := borrow α1 in
            let* α3 := M.read α2 in
            let* α4 : M.Val u8.t := deref right_val in
            let* α5 : M.Val (ref u8.t) := borrow α4 in
            let* α6 := M.read α5 in
            let* α7 :=
              core.panicking.assert_failed α0 α3 α6 core.option.Option.None in
            M.alloc α7 in
          let* α0 : M.Val unit := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    M.alloc tt).
