(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Require Import CoqOfRust.examples.default.examples.ink_contracts.Lib.

Module Mapping := Mapping.

(* Module  Mapping. (*
Section Mapping.
  Context (K V : Set).
  
  Record t : Set := {
    _key : core.marker.PhantomData.t K;
    _value : core.marker.PhantomData.t V;
  }.
  
  Global Instance Get__key : Notations.Dot "_key" := {
    Notations.dot := Ref.map (fun x => x.(_key)) (fun v x => x <| _key := v |>);
  }.
  Global Instance Get_AF__key : Notations.DoubleColon t "_key" := {
    Notations.double_colon (x : M.Val t) := x.["_key"];
  }.
  Global Instance Get__value : Notations.Dot "_value" := {
    Notations.dot :=
      Ref.map (fun x => x.(_value)) (fun v x => x <| _value := v |>);
  }.
  Global Instance Get_AF__value : Notations.DoubleColon t "_value" := {
    Notations.double_colon (x : M.Val t) := x.["_value"];
  }.
End Mapping.
End Mapping.

Module  Impl_core_default_Default_for_erc20_Mapping_t_K_V.
Section Impl_core_default_Default_for_erc20_Mapping_t_K_V.
  Context {K V : Set}.
  
  Context
    {ℋ_0 : core.default.Default.Trait K}
    {ℋ_1 : core.default.Default.Trait V}.
  
  Ltac Self := exact (erc20.Mapping.t K V).
  
  (*
  Default
  *)
  Definition default : M (erc20.Mapping.t K V) :=
    M.function_body
      (let* α0 : core.marker.PhantomData.t K :=
        core.default.Default.default
          (Self := core.marker.PhantomData.t K)
          (Trait := ltac:(refine _)) in
      let* α1 : core.marker.PhantomData.t V :=
        core.default.Default.default
          (Self := core.marker.PhantomData.t V)
          (Trait := ltac:(refine _)) in
      M.alloc {| erc20.Mapping._key := α0; erc20.Mapping._value := α1; |}).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon ltac:(Self) "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait ltac:(Self) := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc20_Mapping_t_K_V.
End Impl_core_default_Default_for_erc20_Mapping_t_K_V.

Module  Impl_erc20_Mapping_t_K_V.
Section Impl_erc20_Mapping_t_K_V.
  Context {K V : Set}.
  
  Ltac Self := exact (erc20.Mapping.t K V).
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get
      (self : ref ltac:(Self))
      (_key : ref K)
      : M (core.option.Option.t V) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* _key : M.Val (ref K) := M.alloc _key in
    M.function_body
      (let* α0 := M.read (mk_str "not implemented") in
      let* α1 : never.t := core.panicking.panic α0 in
      let* α2 : M.Val never.t := M.alloc α1 in
      never_to_any α2).
  
  Global Instance AssociatedFunction_get :
    Notations.DoubleColon ltac:(Self) "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Definition insert
      (self : mut_ref ltac:(Self))
      (_key : K)
      (_value : V)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* _key : M.Val K := M.alloc _key in
    let* _value : M.Val V := M.alloc _value in
    M.function_body
      (let* α0 := M.read (mk_str "not implemented") in
      let* α1 : never.t := core.panicking.panic α0 in
      let* α2 : M.Val never.t := M.alloc α1 in
      never_to_any α2).
  
  Global Instance AssociatedFunction_insert :
    Notations.DoubleColon ltac:(Self) "insert" := {
    Notations.double_colon := insert;
  }.
End Impl_erc20_Mapping_t_K_V. *)
End Impl_erc20_Mapping_t_K_V. *)

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_erc20_AccountId_t.
Section Impl_core_default_Default_for_erc20_AccountId_t.
  Ltac Self := exact erc20.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M erc20.AccountId.t :=
    M.function_body
      (let* α0 : u128.t :=
        core.default.Default.default
          (Self := u128.t)
          (Trait := ltac:(refine _)) in
      M.alloc (erc20.AccountId.Build_t α0)).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon ltac:(Self) "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait ltac:(Self) := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc20_AccountId_t.
End Impl_core_default_Default_for_erc20_AccountId_t.

Module  Impl_core_clone_Clone_for_erc20_AccountId_t.
Section Impl_core_clone_Clone_for_erc20_AccountId_t.
  Ltac Self := exact erc20.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref ltac:(Self)) : M erc20.AccountId.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* _ : M.Val unit := M.alloc tt in
      let* α0 := M.read self in
      deref α0).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_erc20_AccountId_t.
End Impl_core_clone_Clone_for_erc20_AccountId_t.

Module  Impl_core_marker_Copy_for_erc20_AccountId_t.
Section Impl_core_marker_Copy_for_erc20_AccountId_t.
  Ltac Self := exact erc20.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_erc20_AccountId_t.
End Impl_core_marker_Copy_for_erc20_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : erc20.AccountId.t;
  }.
  
  Global Instance Get_caller : Notations.Dot "caller" := {
    Notations.dot :=
      Ref.map (fun x => x.(caller)) (fun v x => x <| caller := v |>);
  }.
  Global Instance Get_AF_caller : Notations.DoubleColon t "caller" := {
    Notations.double_colon (x : M.Val t) := x.["caller"];
  }.
End Env.
End Env.

Module  Event.
Section Event.
  Record t : Set := {
    x0 : alloc.string.String.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
End Event.
End Event.

Module  Erc20.
Section Erc20.
  Record t : Set := {
    total_supply : ltac:(erc20.Balance);
    balances : erc20.Mapping.t erc20.AccountId.t ltac:(erc20.Balance);
    allowances :
      erc20.Mapping.t
        (erc20.AccountId.t * erc20.AccountId.t)
        ltac:(erc20.Balance);
  }.
  
  Global Instance Get_total_supply : Notations.Dot "total_supply" := {
    Notations.dot :=
      Ref.map
        (fun x => x.(total_supply))
        (fun v x => x <| total_supply := v |>);
  }.
  Global Instance Get_AF_total_supply :
    Notations.DoubleColon t "total_supply" := {
    Notations.double_colon (x : M.Val t) := x.["total_supply"];
  }.
  Global Instance Get_balances : Notations.Dot "balances" := {
    Notations.dot :=
      Ref.map (fun x => x.(balances)) (fun v x => x <| balances := v |>);
  }.
  Global Instance Get_AF_balances : Notations.DoubleColon t "balances" := {
    Notations.double_colon (x : M.Val t) := x.["balances"];
  }.
  Global Instance Get_allowances : Notations.Dot "allowances" := {
    Notations.dot :=
      Ref.map (fun x => x.(allowances)) (fun v x => x <| allowances := v |>);
  }.
  Global Instance Get_AF_allowances : Notations.DoubleColon t "allowances" := {
    Notations.double_colon (x : M.Val t) := x.["allowances"];
  }.
End Erc20.
End Erc20.

Module  Impl_core_default_Default_for_erc20_Erc20_t.
Section Impl_core_default_Default_for_erc20_Erc20_t.
  Ltac Self := exact erc20.Erc20.t.
  
  (*
  Default
  *)
  Definition default : M erc20.Erc20.t :=
    M.function_body
      (let* α0 : u128.t :=
        core.default.Default.default
          (Self := u128.t)
          (Trait := ltac:(refine _)) in
      let* α1 : erc20.Mapping.t erc20.AccountId.t u128.t :=
        core.default.Default.default
          (Self := erc20.Mapping.t erc20.AccountId.t u128.t)
          (Trait := ltac:(refine _)) in
      let* α2 :
          erc20.Mapping.t (erc20.AccountId.t * erc20.AccountId.t) u128.t :=
        core.default.Default.default
          (Self :=
            erc20.Mapping.t (erc20.AccountId.t * erc20.AccountId.t) u128.t)
          (Trait := ltac:(refine _)) in
      M.alloc
        {|
          erc20.Erc20.total_supply := α0;
          erc20.Erc20.balances := α1;
          erc20.Erc20.allowances := α2;
        |}).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon ltac:(Self) "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait ltac:(Self) := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc20_Erc20_t.
End Impl_core_default_Default_for_erc20_Erc20_t.

Module  Transfer.
Section Transfer.
  Record t : Set := {
    from : core.option.Option.t erc20.AccountId.t;
    to : core.option.Option.t erc20.AccountId.t;
    value : ltac:(erc20.Balance);
  }.
  
  Global Instance Get_from : Notations.Dot "from" := {
    Notations.dot := Ref.map (fun x => x.(from)) (fun v x => x <| from := v |>);
  }.
  Global Instance Get_AF_from : Notations.DoubleColon t "from" := {
    Notations.double_colon (x : M.Val t) := x.["from"];
  }.
  Global Instance Get_to : Notations.Dot "to" := {
    Notations.dot := Ref.map (fun x => x.(to)) (fun v x => x <| to := v |>);
  }.
  Global Instance Get_AF_to : Notations.DoubleColon t "to" := {
    Notations.double_colon (x : M.Val t) := x.["to"];
  }.
  Global Instance Get_value : Notations.Dot "value" := {
    Notations.dot :=
      Ref.map (fun x => x.(value)) (fun v x => x <| value := v |>);
  }.
  Global Instance Get_AF_value : Notations.DoubleColon t "value" := {
    Notations.double_colon (x : M.Val t) := x.["value"];
  }.
End Transfer.
End Transfer.

Module  Impl_core_convert_Into_erc20_Event_t_for_erc20_Transfer_t.
Section Impl_core_convert_Into_erc20_Event_t_for_erc20_Transfer_t.
  Ltac Self := exact erc20.Transfer.t.
  
  (*
      fn into(self) -> Event {
          unimplemented!()
      }
  *)
  Definition into (self : ltac:(Self)) : M erc20.Event.t :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    M.function_body
      (let* α0 := M.read (mk_str "not implemented") in
      let* α1 : never.t := core.panicking.panic α0 in
      let* α2 : M.Val never.t := M.alloc α1 in
      never_to_any α2).
  
  Global Instance AssociatedFunction_into :
    Notations.DoubleColon ltac:(Self) "into" := {
    Notations.double_colon := into;
  }.
  
  Global Instance ℐ :
    core.convert.Into.Trait ltac:(Self) (T := erc20.Event.t) := {
    core.convert.Into.into := into;
  }.
End Impl_core_convert_Into_erc20_Event_t_for_erc20_Transfer_t.
End Impl_core_convert_Into_erc20_Event_t_for_erc20_Transfer_t.

Module  Approval.
Section Approval.
  Record t : Set := {
    owner : erc20.AccountId.t;
    spender : erc20.AccountId.t;
    value : ltac:(erc20.Balance);
  }.
  
  Global Instance Get_owner : Notations.Dot "owner" := {
    Notations.dot :=
      Ref.map (fun x => x.(owner)) (fun v x => x <| owner := v |>);
  }.
  Global Instance Get_AF_owner : Notations.DoubleColon t "owner" := {
    Notations.double_colon (x : M.Val t) := x.["owner"];
  }.
  Global Instance Get_spender : Notations.Dot "spender" := {
    Notations.dot :=
      Ref.map (fun x => x.(spender)) (fun v x => x <| spender := v |>);
  }.
  Global Instance Get_AF_spender : Notations.DoubleColon t "spender" := {
    Notations.double_colon (x : M.Val t) := x.["spender"];
  }.
  Global Instance Get_value : Notations.Dot "value" := {
    Notations.dot :=
      Ref.map (fun x => x.(value)) (fun v x => x <| value := v |>);
  }.
  Global Instance Get_AF_value : Notations.DoubleColon t "value" := {
    Notations.double_colon (x : M.Val t) := x.["value"];
  }.
End Approval.
End Approval.

Module  Impl_core_convert_Into_erc20_Event_t_for_erc20_Approval_t.
Section Impl_core_convert_Into_erc20_Event_t_for_erc20_Approval_t.
  Ltac Self := exact erc20.Approval.t.
  
  (*
      fn into(self) -> Event {
          unimplemented!()
      }
  *)
  Definition into (self : ltac:(Self)) : M erc20.Event.t :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    M.function_body
      (let* α0 := M.read (mk_str "not implemented") in
      let* α1 : never.t := core.panicking.panic α0 in
      let* α2 : M.Val never.t := M.alloc α1 in
      never_to_any α2).
  
  Global Instance AssociatedFunction_into :
    Notations.DoubleColon ltac:(Self) "into" := {
    Notations.double_colon := into;
  }.
  
  Global Instance ℐ :
    core.convert.Into.Trait ltac:(Self) (T := erc20.Event.t) := {
    core.convert.Into.into := into;
  }.
End Impl_core_convert_Into_erc20_Event_t_for_erc20_Approval_t.
End Impl_core_convert_Into_erc20_Event_t_for_erc20_Approval_t.

Module Error.
  Inductive t : Set :=
  | InsufficientBalance
  | InsufficientAllowance.
End Error.

Ltac Result T := exact (core.result.Result.t T erc20.Error.t).

Module  Impl_erc20_Env_t.
Section Impl_erc20_Env_t.
  Ltac Self := exact erc20.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (self : ref ltac:(Self)) : M erc20.AccountId.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val erc20.Env.t := deref α0 in
      M.pure α1.["caller"]).
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon ltac:(Self) "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event<E: Into<Event>>(&self, _event: E) {}
  *)
  Definition emit_event
      {E : Set}
      {ℋ_0 : core.convert.Into.Trait E (T := erc20.Event.t)}
      (self : ref ltac:(Self))
      (_event : E)
      : M unit :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* _event : M.Val E := M.alloc _event in
    M.function_body (M.alloc tt).
  
  Global Instance AssociatedFunction_emit_event
      {E : Set}
      {ℋ_0 : core.convert.Into.Trait E (T := erc20.Event.t)} :
    Notations.DoubleColon ltac:(Self) "emit_event" := {
    Notations.double_colon := emit_event (E := E);
  }.
End Impl_erc20_Env_t.
End Impl_erc20_Env_t.

Module  Impl_erc20_Erc20_t.
Section Impl_erc20_Erc20_t.
  Ltac Self := exact erc20.Erc20.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M erc20.Env.t :=
    M.read_env.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon ltac:(Self) "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref ltac:(Self)) : M erc20.Env.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* α0 : erc20.Env.t := erc20.Erc20.t::["init_env"] in
      M.alloc α0).
  
  Global Instance AssociatedFunction_env :
    Notations.DoubleColon ltac:(Self) "env" := {
    Notations.double_colon := env;
  }.
End Impl_erc20_Erc20_t.
End Impl_erc20_Erc20_t.

Module  Impl_erc20_Erc20_t_2.
Section Impl_erc20_Erc20_t_2.
  Ltac Self := exact erc20.Erc20.t.
  
  (*
      fn new(total_supply: Balance) -> Self {
          let mut balances = Mapping::default();
          let caller = Self::init_env().caller();
          balances.insert(caller, total_supply);
          Self::init_env().emit_event(Transfer {
              from: None,
              to: Some(caller),
              value: total_supply,
          });
          Self {
              total_supply,
              balances,
              allowances: Default::default(),
          }
      }
  *)
  Definition new (total_supply : ltac:(erc20.Balance)) : M ltac:(Self) :=
    let* total_supply : M.Val ltac:(erc20.Balance) := M.alloc total_supply in
    M.function_body
      (let* balances : M.Val (erc20.Mapping.t erc20.AccountId.t u128.t) :=
        let* α0 : erc20.Mapping.t erc20.AccountId.t u128.t :=
          core.default.Default.default
            (Self := erc20.Mapping.t erc20.AccountId.t u128.t)
            (Trait := ltac:(refine _)) in
        M.alloc α0 in
      let* caller : M.Val erc20.AccountId.t :=
        let* α0 : erc20.Env.t := erc20.Erc20.t::["init_env"] in
        let* α1 : M.Val erc20.Env.t := M.alloc α0 in
        let* α2 : ref erc20.Env.t := borrow α1 in
        let* α3 : erc20.AccountId.t := erc20.Env.t::["caller"] α2 in
        M.alloc α3 in
      let* _ : M.Val unit :=
        let* α0 : mut_ref (erc20.Mapping.t erc20.AccountId.t u128.t) :=
          borrow_mut balances in
        let* α1 := M.read caller in
        let* α2 := M.read total_supply in
        let* α3 : unit :=
          (erc20.Mapping.t erc20.AccountId.t u128.t)::["insert"] α0 α1 α2 in
        M.alloc α3 in
      let* _ : M.Val unit :=
        let* α0 : erc20.Env.t := erc20.Erc20.t::["init_env"] in
        let* α1 : M.Val erc20.Env.t := M.alloc α0 in
        let* α2 : ref erc20.Env.t := borrow α1 in
        let* α3 := M.read caller in
        let* α4 := M.read total_supply in
        let* α5 : unit :=
          erc20.Env.t::["emit_event"]
            α2
            {|
              erc20.Transfer.from := core.option.Option.None;
              erc20.Transfer.to := core.option.Option.Some α3;
              erc20.Transfer.value := α4;
            |} in
        M.alloc α5 in
      let* α0 := M.read total_supply in
      let* α1 := M.read balances in
      let* α2 :
          erc20.Mapping.t (erc20.AccountId.t * erc20.AccountId.t) u128.t :=
        core.default.Default.default
          (Self :=
            erc20.Mapping.t (erc20.AccountId.t * erc20.AccountId.t) u128.t)
          (Trait := ltac:(refine _)) in
      M.alloc
        {|
          erc20.Erc20.total_supply := α0;
          erc20.Erc20.balances := α1;
          erc20.Erc20.allowances := α2;
        |}).
  
  Global Instance AssociatedFunction_new :
    Notations.DoubleColon ltac:(Self) "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      fn total_supply(&self) -> Balance {
          self.total_supply
      }
  *)
  Definition total_supply (self : ref ltac:(Self)) : M ltac:(erc20.Balance) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val erc20.Erc20.t := deref α0 in
      M.pure α1.["total_supply"]).
  
  Global Instance AssociatedFunction_total_supply :
    Notations.DoubleColon ltac:(Self) "total_supply" := {
    Notations.double_colon := total_supply;
  }.
  
  (*
      fn balance_of_impl(&self, owner: &AccountId) -> Balance {
          self.balances.get(owner).unwrap_or_default()
      }
  *)
  Definition balance_of_impl
      (self : ref ltac:(Self))
      (owner : ref erc20.AccountId.t)
      : M ltac:(erc20.Balance) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* owner : M.Val (ref erc20.AccountId.t) := M.alloc owner in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val erc20.Erc20.t := deref α0 in
      let* α2 : ref (erc20.Mapping.t erc20.AccountId.t u128.t) :=
        borrow α1.["balances"] in
      let* α3 := M.read owner in
      let* α4 : M.Val erc20.AccountId.t := deref α3 in
      let* α5 : ref erc20.AccountId.t := borrow α4 in
      let* α6 : core.option.Option.t u128.t :=
        (erc20.Mapping.t erc20.AccountId.t u128.t)::["get"] α2 α5 in
      let* α7 : u128.t :=
        (core.option.Option.t u128.t)::["unwrap_or_default"] α6 in
      M.alloc α7).
  
  Global Instance AssociatedFunction_balance_of_impl :
    Notations.DoubleColon ltac:(Self) "balance_of_impl" := {
    Notations.double_colon := balance_of_impl;
  }.
  
  (*
      fn balance_of(&self, owner: AccountId) -> Balance {
          self.balance_of_impl(&owner)
      }
  *)
  Definition balance_of
      (self : ref ltac:(Self))
      (owner : erc20.AccountId.t)
      : M ltac:(erc20.Balance) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* owner : M.Val erc20.AccountId.t := M.alloc owner in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val erc20.Erc20.t := deref α0 in
      let* α2 : ref erc20.Erc20.t := borrow α1 in
      let* α3 : ref erc20.AccountId.t := borrow owner in
      let* α4 : M.Val erc20.AccountId.t := deref α3 in
      let* α5 : ref erc20.AccountId.t := borrow α4 in
      let* α6 : u128.t := erc20.Erc20.t::["balance_of_impl"] α2 α5 in
      M.alloc α6).
  
  Global Instance AssociatedFunction_balance_of :
    Notations.DoubleColon ltac:(Self) "balance_of" := {
    Notations.double_colon := balance_of;
  }.
  
  (*
      fn allowance_impl(&self, owner: &AccountId, spender: &AccountId) -> Balance {
          self.allowances.get(&( *owner, *spender)).unwrap_or_default()
      }
  *)
  Definition allowance_impl
      (self : ref ltac:(Self))
      (owner : ref erc20.AccountId.t)
      (spender : ref erc20.AccountId.t)
      : M ltac:(erc20.Balance) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* owner : M.Val (ref erc20.AccountId.t) := M.alloc owner in
    let* spender : M.Val (ref erc20.AccountId.t) := M.alloc spender in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val erc20.Erc20.t := deref α0 in
      let* α2 :
          ref
            (erc20.Mapping.t (erc20.AccountId.t * erc20.AccountId.t) u128.t) :=
        borrow α1.["allowances"] in
      let* α3 := M.read owner in
      let* α4 : M.Val erc20.AccountId.t := deref α3 in
      let* α5 := M.read α4 in
      let* α6 := M.read spender in
      let* α7 : M.Val erc20.AccountId.t := deref α6 in
      let* α8 := M.read α7 in
      let* α9 : M.Val (erc20.AccountId.t * erc20.AccountId.t) :=
        M.alloc (α5, α8) in
      let* α10 : ref (erc20.AccountId.t * erc20.AccountId.t) := borrow α9 in
      let* α11 : M.Val (erc20.AccountId.t * erc20.AccountId.t) := deref α10 in
      let* α12 : ref (erc20.AccountId.t * erc20.AccountId.t) := borrow α11 in
      let* α13 : core.option.Option.t u128.t :=
        (erc20.Mapping.t
              (erc20.AccountId.t * erc20.AccountId.t)
              u128.t)::["get"]
          α2
          α12 in
      let* α14 : u128.t :=
        (core.option.Option.t u128.t)::["unwrap_or_default"] α13 in
      M.alloc α14).
  
  Global Instance AssociatedFunction_allowance_impl :
    Notations.DoubleColon ltac:(Self) "allowance_impl" := {
    Notations.double_colon := allowance_impl;
  }.
  
  (*
      fn allowance(&self, owner: AccountId, spender: AccountId) -> Balance {
          self.allowance_impl(&owner, &spender)
      }
  *)
  Definition allowance
      (self : ref ltac:(Self))
      (owner : erc20.AccountId.t)
      (spender : erc20.AccountId.t)
      : M ltac:(erc20.Balance) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* owner : M.Val erc20.AccountId.t := M.alloc owner in
    let* spender : M.Val erc20.AccountId.t := M.alloc spender in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val erc20.Erc20.t := deref α0 in
      let* α2 : ref erc20.Erc20.t := borrow α1 in
      let* α3 : ref erc20.AccountId.t := borrow owner in
      let* α4 : M.Val erc20.AccountId.t := deref α3 in
      let* α5 : ref erc20.AccountId.t := borrow α4 in
      let* α6 : ref erc20.AccountId.t := borrow spender in
      let* α7 : M.Val erc20.AccountId.t := deref α6 in
      let* α8 : ref erc20.AccountId.t := borrow α7 in
      let* α9 : u128.t := erc20.Erc20.t::["allowance_impl"] α2 α5 α8 in
      M.alloc α9).
  
  Global Instance AssociatedFunction_allowance :
    Notations.DoubleColon ltac:(Self) "allowance" := {
    Notations.double_colon := allowance;
  }.
  
  (*
      fn transfer_from_to(&mut self, from: &AccountId, to: &AccountId, value: Balance) -> Result<()> {
          let from_balance = self.balance_of_impl(from);
          if from_balance < value {
              return Err(Error::InsufficientBalance);
          }
  
          self.balances.insert( *from, from_balance - value);
          let to_balance = self.balance_of_impl(to);
          self.balances.insert( *to, to_balance + value);
          self.env().emit_event(Transfer {
              from: Some( *from),
              to: Some( *to),
              value,
          });
          Ok(())
      }
  *)
  Definition transfer_from_to
      (self : mut_ref ltac:(Self))
      (from : ref erc20.AccountId.t)
      (to : ref erc20.AccountId.t)
      (value : ltac:(erc20.Balance))
      : M ltac:(erc20.Result unit) :=
    let return_ := M.return_ (R := ltac:(erc20.Result unit)) in
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* from : M.Val (ref erc20.AccountId.t) := M.alloc from in
    let* to : M.Val (ref erc20.AccountId.t) := M.alloc to in
    let* value : M.Val ltac:(erc20.Balance) := M.alloc value in
    M.function_body
      (let* from_balance : M.Val u128.t :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : ref erc20.Erc20.t := borrow α1 in
        let* α3 := M.read from in
        let* α4 : M.Val erc20.AccountId.t := deref α3 in
        let* α5 : ref erc20.AccountId.t := borrow α4 in
        let* α6 : u128.t := erc20.Erc20.t::["balance_of_impl"] α2 α5 in
        M.alloc α6 in
      let* _ : M.Val unit :=
        let* α0 : M.Val bool.t := BinOp.lt from_balance value in
        let* α1 : M.Val bool.t := use α0 in
        let* α2 := M.read α1 in
        if (α2 : bool) then
          let* _ : M.Val never.t :=
            return_ (core.result.Result.Err erc20.Error.InsufficientBalance) in
          let* α0 : M.Val unit := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt in
      let* _ : M.Val unit :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : mut_ref (erc20.Mapping.t erc20.AccountId.t u128.t) :=
          borrow_mut α1.["balances"] in
        let* α3 := M.read from in
        let* α4 : M.Val erc20.AccountId.t := deref α3 in
        let* α5 := M.read α4 in
        let* α6 : M.Val u128.t := BinOp.sub from_balance value in
        let* α7 := M.read α6 in
        let* α8 : unit :=
          (erc20.Mapping.t erc20.AccountId.t u128.t)::["insert"] α2 α5 α7 in
        M.alloc α8 in
      let* to_balance : M.Val u128.t :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : ref erc20.Erc20.t := borrow α1 in
        let* α3 := M.read to in
        let* α4 : M.Val erc20.AccountId.t := deref α3 in
        let* α5 : ref erc20.AccountId.t := borrow α4 in
        let* α6 : u128.t := erc20.Erc20.t::["balance_of_impl"] α2 α5 in
        M.alloc α6 in
      let* _ : M.Val unit :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : mut_ref (erc20.Mapping.t erc20.AccountId.t u128.t) :=
          borrow_mut α1.["balances"] in
        let* α3 := M.read to in
        let* α4 : M.Val erc20.AccountId.t := deref α3 in
        let* α5 := M.read α4 in
        let* α6 : M.Val u128.t := BinOp.add to_balance value in
        let* α7 := M.read α6 in
        let* α8 : unit :=
          (erc20.Mapping.t erc20.AccountId.t u128.t)::["insert"] α2 α5 α7 in
        M.alloc α8 in
      let* _ : M.Val unit :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : ref erc20.Erc20.t := borrow α1 in
        let* α3 : erc20.Env.t := erc20.Erc20.t::["env"] α2 in
        let* α4 : M.Val erc20.Env.t := M.alloc α3 in
        let* α5 : ref erc20.Env.t := borrow α4 in
        let* α6 := M.read from in
        let* α7 : M.Val erc20.AccountId.t := deref α6 in
        let* α8 := M.read α7 in
        let* α9 := M.read to in
        let* α10 : M.Val erc20.AccountId.t := deref α9 in
        let* α11 := M.read α10 in
        let* α12 := M.read value in
        let* α13 : unit :=
          erc20.Env.t::["emit_event"]
            α5
            {|
              erc20.Transfer.from := core.option.Option.Some α8;
              erc20.Transfer.to := core.option.Option.Some α11;
              erc20.Transfer.value := α12;
            |} in
        M.alloc α13 in
      M.alloc (core.result.Result.Ok tt)).
  
  Global Instance AssociatedFunction_transfer_from_to :
    Notations.DoubleColon ltac:(Self) "transfer_from_to" := {
    Notations.double_colon := transfer_from_to;
  }.
  
  (*
      fn transfer(&mut self, to: AccountId, value: Balance) -> Result<()> {
          let from = self.env().caller();
          self.transfer_from_to(&from, &to, value)
      }
  *)
  Definition transfer
      (self : mut_ref ltac:(Self))
      (to : erc20.AccountId.t)
      (value : ltac:(erc20.Balance))
      : M ltac:(erc20.Result unit) :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* to : M.Val erc20.AccountId.t := M.alloc to in
    let* value : M.Val ltac:(erc20.Balance) := M.alloc value in
    M.function_body
      (let* from : M.Val erc20.AccountId.t :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : ref erc20.Erc20.t := borrow α1 in
        let* α3 : erc20.Env.t := erc20.Erc20.t::["env"] α2 in
        let* α4 : M.Val erc20.Env.t := M.alloc α3 in
        let* α5 : ref erc20.Env.t := borrow α4 in
        let* α6 : erc20.AccountId.t := erc20.Env.t::["caller"] α5 in
        M.alloc α6 in
      let* α0 := M.read self in
      let* α1 : M.Val erc20.Erc20.t := deref α0 in
      let* α2 : mut_ref erc20.Erc20.t := borrow_mut α1 in
      let* α3 : ref erc20.AccountId.t := borrow from in
      let* α4 : M.Val erc20.AccountId.t := deref α3 in
      let* α5 : ref erc20.AccountId.t := borrow α4 in
      let* α6 : ref erc20.AccountId.t := borrow to in
      let* α7 : M.Val erc20.AccountId.t := deref α6 in
      let* α8 : ref erc20.AccountId.t := borrow α7 in
      let* α9 := M.read value in
      let* α10 : core.result.Result.t unit erc20.Error.t :=
        erc20.Erc20.t::["transfer_from_to"] α2 α5 α8 α9 in
      M.alloc α10).
  
  Global Instance AssociatedFunction_transfer :
    Notations.DoubleColon ltac:(Self) "transfer" := {
    Notations.double_colon := transfer;
  }.
  
  (*
      fn approve(&mut self, spender: AccountId, value: Balance) -> Result<()> {
          let owner = self.env().caller();
          self.allowances.insert((owner, spender), value);
          self.env().emit_event(Approval {
              owner,
              spender,
              value,
          });
          Ok(())
      }
  *)
  Definition approve
      (self : mut_ref ltac:(Self))
      (spender : erc20.AccountId.t)
      (value : ltac:(erc20.Balance))
      : M ltac:(erc20.Result unit) :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* spender : M.Val erc20.AccountId.t := M.alloc spender in
    let* value : M.Val ltac:(erc20.Balance) := M.alloc value in
    M.function_body
      (let* owner : M.Val erc20.AccountId.t :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : ref erc20.Erc20.t := borrow α1 in
        let* α3 : erc20.Env.t := erc20.Erc20.t::["env"] α2 in
        let* α4 : M.Val erc20.Env.t := M.alloc α3 in
        let* α5 : ref erc20.Env.t := borrow α4 in
        let* α6 : erc20.AccountId.t := erc20.Env.t::["caller"] α5 in
        M.alloc α6 in
      let* _ : M.Val unit :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 :
            mut_ref
              (erc20.Mapping.t
                (erc20.AccountId.t * erc20.AccountId.t)
                u128.t) :=
          borrow_mut α1.["allowances"] in
        let* α3 := M.read owner in
        let* α4 := M.read spender in
        let* α5 := M.read value in
        let* α6 : unit :=
          (erc20.Mapping.t
                (erc20.AccountId.t * erc20.AccountId.t)
                u128.t)::["insert"]
            α2
            (α3, α4)
            α5 in
        M.alloc α6 in
      let* _ : M.Val unit :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : ref erc20.Erc20.t := borrow α1 in
        let* α3 : erc20.Env.t := erc20.Erc20.t::["env"] α2 in
        let* α4 : M.Val erc20.Env.t := M.alloc α3 in
        let* α5 : ref erc20.Env.t := borrow α4 in
        let* α6 := M.read owner in
        let* α7 := M.read spender in
        let* α8 := M.read value in
        let* α9 : unit :=
          erc20.Env.t::["emit_event"]
            α5
            {|
              erc20.Approval.owner := α6;
              erc20.Approval.spender := α7;
              erc20.Approval.value := α8;
            |} in
        M.alloc α9 in
      M.alloc (core.result.Result.Ok tt)).
  
  Global Instance AssociatedFunction_approve :
    Notations.DoubleColon ltac:(Self) "approve" := {
    Notations.double_colon := approve;
  }.
  
  (*
      fn transfer_from(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<()> {
          let caller = self.env().caller();
          let allowance = self.allowance_impl(&from, &caller);
          if allowance < value {
              return Err(Error::InsufficientAllowance);
          }
          self.transfer_from_to(&from, &to, value)?;
          self.allowances.insert((from, caller), allowance - value);
          Ok(())
      }
  *)
  Definition transfer_from
      (self : mut_ref ltac:(Self))
      (from : erc20.AccountId.t)
      (to : erc20.AccountId.t)
      (value : ltac:(erc20.Balance))
      : M ltac:(erc20.Result unit) :=
    let return_ := M.return_ (R := ltac:(erc20.Result unit)) in
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* from : M.Val erc20.AccountId.t := M.alloc from in
    let* to : M.Val erc20.AccountId.t := M.alloc to in
    let* value : M.Val ltac:(erc20.Balance) := M.alloc value in
    M.function_body
      (let* caller : M.Val erc20.AccountId.t :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : ref erc20.Erc20.t := borrow α1 in
        let* α3 : erc20.Env.t := erc20.Erc20.t::["env"] α2 in
        let* α4 : M.Val erc20.Env.t := M.alloc α3 in
        let* α5 : ref erc20.Env.t := borrow α4 in
        let* α6 : erc20.AccountId.t := erc20.Env.t::["caller"] α5 in
        M.alloc α6 in
      let* allowance : M.Val u128.t :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : ref erc20.Erc20.t := borrow α1 in
        let* α3 : ref erc20.AccountId.t := borrow from in
        let* α4 : M.Val erc20.AccountId.t := deref α3 in
        let* α5 : ref erc20.AccountId.t := borrow α4 in
        let* α6 : ref erc20.AccountId.t := borrow caller in
        let* α7 : M.Val erc20.AccountId.t := deref α6 in
        let* α8 : ref erc20.AccountId.t := borrow α7 in
        let* α9 : u128.t := erc20.Erc20.t::["allowance_impl"] α2 α5 α8 in
        M.alloc α9 in
      let* _ : M.Val unit :=
        let* α0 : M.Val bool.t := BinOp.lt allowance value in
        let* α1 : M.Val bool.t := use α0 in
        let* α2 := M.read α1 in
        if (α2 : bool) then
          let* _ : M.Val never.t :=
            return_
              (core.result.Result.Err erc20.Error.InsufficientAllowance) in
          let* α0 : M.Val unit := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt in
      let* _ : M.Val unit :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 : mut_ref erc20.Erc20.t := borrow_mut α1 in
        let* α3 : ref erc20.AccountId.t := borrow from in
        let* α4 : M.Val erc20.AccountId.t := deref α3 in
        let* α5 : ref erc20.AccountId.t := borrow α4 in
        let* α6 : ref erc20.AccountId.t := borrow to in
        let* α7 : M.Val erc20.AccountId.t := deref α6 in
        let* α8 : ref erc20.AccountId.t := borrow α7 in
        let* α9 := M.read value in
        let* α10 : core.result.Result.t unit erc20.Error.t :=
          erc20.Erc20.t::["transfer_from_to"] α2 α5 α8 α9 in
        let* α11 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t erc20.Error.t)
              unit :=
          (core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit erc20.Error.t)
              (Trait := ltac:(refine _)))
            α10 in
        let* α12 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t erc20.Error.t)
                unit) :=
          M.alloc α11 in
        let* α13 := M.read α12 in
        match α13 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 := M.read residual in
          let* α1 : core.result.Result.t unit erc20.Error.t :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := core.result.Result.t unit erc20.Error.t)
                (Trait := ltac:(refine _)))
              α0 in
          let* α2 : M.Val never.t := return_ α1 in
          never_to_any α2
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      let* _ : M.Val unit :=
        let* α0 := M.read self in
        let* α1 : M.Val erc20.Erc20.t := deref α0 in
        let* α2 :
            mut_ref
              (erc20.Mapping.t
                (erc20.AccountId.t * erc20.AccountId.t)
                u128.t) :=
          borrow_mut α1.["allowances"] in
        let* α3 := M.read from in
        let* α4 := M.read caller in
        let* α5 : M.Val u128.t := BinOp.sub allowance value in
        let* α6 := M.read α5 in
        let* α7 : unit :=
          (erc20.Mapping.t
                (erc20.AccountId.t * erc20.AccountId.t)
                u128.t)::["insert"]
            α2
            (α3, α4)
            α6 in
        M.alloc α7 in
      M.alloc (core.result.Result.Ok tt)).
  
  Global Instance AssociatedFunction_transfer_from :
    Notations.DoubleColon ltac:(Self) "transfer_from" := {
    Notations.double_colon := transfer_from;
  }.
End Impl_erc20_Erc20_t_2.
End Impl_erc20_Erc20_t_2.
