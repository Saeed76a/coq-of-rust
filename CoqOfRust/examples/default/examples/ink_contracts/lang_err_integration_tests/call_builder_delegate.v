(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac Hash := exact (array u8.t).

Module LangError.
  Inductive t : Set :=
  | CouldNotReadInput.
End LangError.

Module  CallBuilderDelegateTest.
Section CallBuilderDelegateTest.
  Record t : Set := {
    value : i32.t;
  }.
  
  Global Instance Get_value : Notations.Dot "value" := {
    Notations.dot :=
      Ref.map (fun x => x.(value)) (fun v x => x <| value := v |>);
  }.
  Global Instance Get_AF_value : Notations.DoubleColon t "value" := {
    Notations.double_colon (x : M.Val t) := x.["value"];
  }.
End CallBuilderDelegateTest.
End CallBuilderDelegateTest.

Module  Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
Section Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
  Ltac Self := exact call_builder_delegate.CallBuilderDelegateTest.t.
  
  (*
  Default
  *)
  Definition default : M call_builder_delegate.CallBuilderDelegateTest.t :=
    let* α0 : i32.t :=
      M.call
        (core.default.Default.default
          (Self := i32.t)
          (Trait := ltac:(refine _))) in
    M.pure {| call_builder_delegate.CallBuilderDelegateTest.value := α0; |}.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon ltac:(Self) "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait ltac:(Self) := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
End Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.

Module  Impl_call_builder_delegate_CallBuilderDelegateTest_t.
Section Impl_call_builder_delegate_CallBuilderDelegateTest_t.
  Ltac Self := exact call_builder_delegate.CallBuilderDelegateTest.t.
  
  (*
      pub fn new(value: i32) -> Self {
          Self { value }
      }
  *)
  Definition new (value : i32.t) : M ltac:(Self) :=
    let* value : M.Val i32.t := M.alloc value in
    let* α0 : i32.t := M.read value in
    M.pure {| call_builder_delegate.CallBuilderDelegateTest.value := α0; |}.
  
  Global Instance AssociatedFunction_new :
    Notations.DoubleColon ltac:(Self) "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn delegate(&mut self, code_hash: Hash, selector: [u8; 4]) -> Option<LangError> {
          // let result = build_call::<DefaultEnvironment>()
          //     .delegate(code_hash)
          //     .exec_input(ExecutionInput::new(Selector::new(selector)))
          //     .returns::<bool>()
          //     .try_invoke()
          //     .expect("Error from the Contracts pallet.");
  
          // match result {
          //     Ok(_) => None,
          //     Err(e @ ink::LangError::CouldNotReadInput) => Some(e),
          //     Err(_) => {
          //         unimplemented!("No other `LangError` variants exist at the moment.")
          //     }
          // }
          None
      }
  *)
  Definition delegate
      (self : mut_ref ltac:(Self))
      (code_hash : ltac:(call_builder_delegate.Hash))
      (selector : array u8.t)
      : M (core.option.Option.t call_builder_delegate.LangError.t) :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* code_hash : M.Val ltac:(call_builder_delegate.Hash) :=
      M.alloc code_hash in
    let* selector : M.Val (array u8.t) := M.alloc selector in
    M.pure core.option.Option.None.
  
  Global Instance AssociatedFunction_delegate :
    Notations.DoubleColon ltac:(Self) "delegate" := {
    Notations.double_colon := delegate;
  }.
  
  (*
      pub fn invoke(&mut self, code_hash: Hash, selector: [u8; 4]) -> i32 {
          // use ink::env::call::build_call;
  
          // build_call::<DefaultEnvironment>()
          //     .delegate(code_hash)
          //     .exec_input(ExecutionInput::new(Selector::new(selector)))
          //     .returns::<i32>()
          //     .invoke()
          0
      }
  *)
  Definition invoke
      (self : mut_ref ltac:(Self))
      (code_hash : ltac:(call_builder_delegate.Hash))
      (selector : array u8.t)
      : M i32.t :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* code_hash : M.Val ltac:(call_builder_delegate.Hash) :=
      M.alloc code_hash in
    let* selector : M.Val (array u8.t) := M.alloc selector in
    M.pure (Integer.of_Z 0).
  
  Global Instance AssociatedFunction_invoke :
    Notations.DoubleColon ltac:(Self) "invoke" := {
    Notations.double_colon := invoke;
  }.
End Impl_call_builder_delegate_CallBuilderDelegateTest_t.
End Impl_call_builder_delegate_CallBuilderDelegateTest_t.
