(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_call_builder_AccountId.
Section Impl_core_default_Default_for_call_builder_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_builder::AccountId") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.function [] (Ty.path "u128") :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ℐ))) in
      let* α1 : Ty.path "u128" := M.call α0 in
      M.pure (call_builder.AccountId.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_call_builder_AccountId.
End Impl_core_default_Default_for_call_builder_AccountId.

Module  Impl_core_clone_Clone_for_call_builder_AccountId.
Section Impl_core_clone_Clone_for_call_builder_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_builder::AccountId") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.apply (Ty.path "call_builder::AccountId") [] :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun γ =>
              (let* α0 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "call_builder::AccountId") []] :=
                M.read self in
              M.pure (deref α0)) :
              Ty.apply (Ty.path "call_builder::AccountId") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_call_builder_AccountId.
End Impl_core_clone_Clone_for_call_builder_AccountId.

Module  Impl_core_marker_Copy_for_call_builder_AccountId.
Section Impl_core_marker_Copy_for_call_builder_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_builder::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_call_builder_AccountId.
End Impl_core_marker_Copy_for_call_builder_AccountId.

Axiom Balance : Ty.path "u128".

Axiom Hash : Ty.apply (Ty.path "array") [Ty.path "u8"].





Module  Impl_call_builder_Selector.
Section Impl_call_builder_Selector.
  Definition Self : Set := Ty.apply (Ty.path "call_builder::Selector") [].
  
  (*
      fn new(bytes: [u8; 4]) -> Self {
          unimplemented!()
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [bytes] =>
      let* bytes := M.alloc bytes in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
End Impl_call_builder_Selector.
End Impl_call_builder_Selector.



Module  Impl_core_default_Default_for_call_builder_CallBuilderTest.
Section Impl_core_default_Default_for_call_builder_CallBuilderTest.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "call_builder::CallBuilderTest") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] => M.pure call_builder.CallBuilderTest.Build
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_call_builder_CallBuilderTest.
End Impl_core_default_Default_for_call_builder_CallBuilderTest.

Module  Impl_call_builder_CallBuilderTest.
Section Impl_call_builder_CallBuilderTest.
  Definition Self : Set :=
    Ty.apply (Ty.path "call_builder::CallBuilderTest") [].
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :
          Ty.function
            []
            (Ty.apply (Ty.path "call_builder::CallBuilderTest") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "call_builder::CallBuilderTest") [])
            (Trait := ℐ))) in
      M.call α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn call(&mut self, address: AccountId, selector: [u8; 4]) -> Option<LangError> {
          // let result = build_call::<DefaultEnvironment>()
          //     .call(address)
          //     .exec_input(ExecutionInput::new(Selector::new(selector)))
          //     .returns::<()>()
          //     .try_invoke()
          //     .expect("Error from the Contracts pallet.");
          let result: Result<(), LangError> = todo!();
  
          match result {
              Ok(_) => None,
              Err(e @ LangError::CouldNotReadInput) => Some(e),
              Err(_) => {
                  unimplemented!("No other `LangError` variants exist at the moment.")
              }
          }
      }
  *)
  Definition call (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; address; selector] =>
      let* self := M.alloc self in
      let* address := M.alloc address in
      let* selector := M.alloc selector in
      let* result :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "call_builder::LangError") []] :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "not yet implemented") in
        let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
        let* α2 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "call_builder::LangError") []] :=
          never_to_any α1 in
        M.alloc α2 in
      let* α0 :
          Ty.apply
            (Ty.path "core::option::Option")
            [Ty.apply (Ty.path "call_builder::LangError") []] :=
        match_operator
          result
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                M.alloc core.option.Option.None
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply (Ty.path "call_builder::LangError") []];
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let* e := M.copy γ0_0 in
                let* α0 := M.read γ0_0 in
                match α0 with
                | call_builder.LangError.CouldNotReadInput =>
                  let* α0 : Ty.apply (Ty.path "call_builder::LangError") [] :=
                    M.read e in
                  M.alloc (core.option.Option.Some α0)
                | _ => M.break_match
                end
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply (Ty.path "call_builder::LangError") []];
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read
                    (mk_str
                      "not implemented: No other `LangError` variants exist at the moment.") in
                let* α1 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ α0 ] in
                let* α2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.call
                    (Ty.apply
                        (Ty.path "core::fmt::rt::Argument")
                        [])::["none"] in
                let* α3 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc α2 in
                let* α4 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α1))
                      (pointer_coercion "Unsize" (borrow α3))) in
                let* α5 : Ty.path "never" :=
                  M.call (core.panicking.panic_fmt α4) in
                let* α6 :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [Ty.apply (Ty.path "call_builder::LangError") []] :=
                  never_to_any α5 in
                M.alloc α6
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply (Ty.path "call_builder::LangError") []]
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_call : Instance.t := {
    Notations.double_colon := call;
  }.
  
  (*
      pub fn invoke(&mut self, address: AccountId, selector: [u8; 4]) {
          // use ink::env::call::build_call;
  
          // build_call::<DefaultEnvironment>()
          //     .call(address)
          //     .exec_input(ExecutionInput::new(Selector::new(selector)))
          //     .returns::<()>()
          //     .invoke()
      }
  *)
  Definition invoke (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; address; selector] =>
      let* self := M.alloc self in
      let* address := M.alloc address in
      let* selector := M.alloc selector in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_invoke : Instance.t := {
    Notations.double_colon := invoke;
  }.
  
  (*
      pub fn call_instantiate(
          &mut self,
          code_hash: Hash,
          selector: [u8; 4],
          init_value: bool,
      ) -> Option<LangError> {
          // let mut params = ConstructorsReturnValueRef::new(init_value)
          //     .code_hash(code_hash)
          //     .gas_limit(0)
          //     .endowment(0)
          //     .salt_bytes(&[0xDE, 0xAD, 0xBE, 0xEF])
          //     .params();
  
          // params.update_selector(Selector::new(selector));
  
          // let result = params
          //     .try_instantiate()
          //     .expect("Error from the Contracts pallet.");
  
          // match result {
          //     Ok(_) => None,
          //     Err(e @ LangError::CouldNotReadInput) => Some(e),
          //     Err(_) => {
          //         unimplemented!("No other `LangError` variants exist at the moment.")
          //     }
          // }
          None
      }
  *)
  Definition call_instantiate (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; code_hash; selector; init_value] =>
      let* self := M.alloc self in
      let* code_hash := M.alloc code_hash in
      let* selector := M.alloc selector in
      let* init_value := M.alloc init_value in
      M.pure core.option.Option.None
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_call_instantiate : Instance.t := {
    Notations.double_colon := call_instantiate;
  }.
  
  (*
      pub fn call_instantiate_fallible(
          &mut self,
          code_hash: Hash,
          selector: [u8; 4],
          init_value: bool,
          // ) -> Option<Result<Result<AccountId, constructors_return_value::ConstructorError>, LangError>>
      ) -> Option<()> {
          // let mut params = ConstructorsReturnValueRef::try_new(init_value)
          //     .code_hash(code_hash)
          //     .gas_limit(0)
          //     .endowment(0)
          //     .salt_bytes(&[0xDE, 0xAD, 0xBE, 0xEF])
          //     .params();
  
          // params.update_selector(Selector::new(selector));
  
          // let lang_result = params
          //     .try_instantiate()
          //     .expect("Error from the Contracts pallet.");
  
          // Some(lang_result.map(|contract_result| {
          //     contract_result.map(|inner| ink::ToAccountId::to_account_id(&inner))
          // }))
          None
      }
  *)
  Definition call_instantiate_fallible (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; code_hash; selector; init_value] =>
      let* self := M.alloc self in
      let* code_hash := M.alloc code_hash in
      let* selector := M.alloc selector in
      let* init_value := M.alloc init_value in
      M.pure core.option.Option.None
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_call_instantiate_fallible : Instance.t := {
    Notations.double_colon := call_instantiate_fallible;
  }.
End Impl_call_builder_CallBuilderTest.
End Impl_call_builder_CallBuilderTest.
