(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct AccountId *)

Module Impl_core_default_Default_for_constructors_return_value_AccountId.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α1 := M.call α0 [] in
      M.pure (constructors_return_value.AccountId.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    let Self := Ty.path "constructors_return_value::AccountId" in
    M.IsTraitInstance
      "core::default::Default"
      Self
      []
      [ ("default", InstanceField.Method default [ Self ]) ].
End Impl_core_default_Default_for_constructors_return_value_AccountId.

Module Impl_core_clone_Clone_for_constructors_return_value_AccountId.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [ Ty.path "u128" ]))
          [
            fun γ =>
              (let* α0 := M.read self in
              M.pure (deref α0)) :
              Ty.path "constructors_return_value::AccountId"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    let Self := Ty.path "constructors_return_value::AccountId" in
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      []
      [ ("clone", InstanceField.Method clone [ Self ]) ].
End Impl_core_clone_Clone_for_constructors_return_value_AccountId.

Module Impl_core_marker_Copy_for_constructors_return_value_AccountId.
  Axiom Implements :
    let Self := Ty.path "constructors_return_value::AccountId" in
    M.IsTraitInstance "core::marker::Copy" Self [] [].
End Impl_core_marker_Copy_for_constructors_return_value_AccountId.

Module Impl_core_convert_From_array_u8_for_constructors_return_value_AccountId.
  (*
      fn from(_value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ _value ] =>
      let* _value := M.alloc _value in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    let Self := Ty.path "constructors_return_value::AccountId" in
    M.IsTraitInstance
      "core::convert::From"
      Self
      [ (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ]
      [ ("from", InstanceField.Method from [ Self ]) ].
End Impl_core_convert_From_array_u8_for_constructors_return_value_AccountId.

Axiom Balance :
  (Ty.path "constructors_return_value::Balance") = (Ty.path "u128").

(* Enum ConstructorsReturnValue *)

(* Enum LangError *)

Axiom ConstructorResult :
  forall (T : Ty.t),
  (Ty.path "constructors_return_value::ConstructorResult") =
    (Ty.apply
      (Ty.path "core::result::Result")
      [ T; Ty.path "constructors_return_value::LangError" ]).

(* Struct ConstructorError *)

Module Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read f in
      let* α1 := M.read (mk_str "ConstructorError") in
      M.call (Ty.path "core::fmt::Formatter")::["write_str"] [ α0; α1 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    let Self := Ty.path "constructors_return_value::ConstructorError" in
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      []
      [ ("fmt", InstanceField.Method fmt [ Self ]) ].
End Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError.

(* Struct ReturnFlags *)

Module Impl_constructors_return_value_ReturnFlags.
  Definition Self : Ty.t := Ty.path "constructors_return_value::ReturnFlags".
  
  (*
      fn new_with_reverted(has_reverted: bool) -> Self {
          unimplemented!()
      }
  *)
  Definition new_with_reverted (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ has_reverted ] =>
      let* has_reverted := M.alloc has_reverted in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
End Impl_constructors_return_value_ReturnFlags.

(*
fn return_value<R>(return_flags: ReturnFlags, return_value: &R) -> ! {
    unimplemented!()
}
*)
Definition return_value (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [ R ], [ return_flags; return_value ] =>
    let* return_flags := M.alloc return_flags in
    let* return_value := M.alloc return_value in
    let* α0 := M.var "core::panicking::panic" in
    let* α1 := M.read (mk_str "not implemented") in
    M.call α0 [ α1 ]
  | _, _ => M.impossible
  end.

Module Impl_constructors_return_value_ConstructorsReturnValue.
  Definition Self : Ty.t :=
    Ty.path "constructors_return_value::ConstructorsReturnValue".
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ init_value ] =>
      let* init_value := M.alloc init_value in
      let* α0 := M.read init_value in
      M.pure
        (Value.StructRecord
          "constructors_return_value::ConstructorsReturnValue"
          [ ("value", α0) ])
    | _, _ => M.impossible
    end.
  
  (*
      pub fn try_new(succeed: bool) -> Result<Self, ConstructorError> {
          if succeed {
              Ok(Self::new(true))
          } else {
              Err(ConstructorError)
          }
      }
  *)
  Definition try_new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ succeed ] =>
      let* succeed := M.alloc succeed in
      let* α0 := M.read (use succeed) in
      let* α1 :=
        if α0 then
          let* α0 :=
            M.call
              (Ty.path
                  "constructors_return_value::ConstructorsReturnValue")::["new"]
              [ true ] in
          M.alloc (core.result.Result.Ok α0)
        else
          M.alloc
            (core.result.Result.Err
              constructors_return_value.ConstructorError.Build) in
      M.read α1
    | _, _ => M.impossible
    end.
  
  (*
      pub fn revert_new(_init_value: bool) -> Self {
          return_value::<ConstructorResult<AccountId>>(
              ReturnFlags::new_with_reverted(true),
              &Ok(AccountId::from([0u8; 32])),
          )
      }
  *)
  Definition revert_new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ _init_value ] =>
      let* _init_value := M.alloc _init_value in
      let* α0 := M.var "constructors_return_value::return_value" in
      let* α1 :=
        M.call
          (Ty.path
              "constructors_return_value::ReturnFlags")::["new_with_reverted"]
          [ true ] in
      let* α2 :=
        M.get_method
          "core::convert::From"
          "from"
          [
            (* Self *) Ty.path "constructors_return_value::AccountId";
            (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ]
          ] in
      let* α3 := M.call α2 [ repeat ((Integer.of_Z 0) : Ty.path "u8") 32 ] in
      let* α4 := M.alloc (core.result.Result.Ok α3) in
      let* α5 := M.call α0 [ α1; borrow α4 ] in
      never_to_any α5
    | _, _ => M.impossible
    end.
  
  (*
      pub fn try_revert_new(init_value: bool) -> Result<Self, ConstructorError> {
          let value = if init_value {
              Ok(Ok(AccountId::from([0u8; 32])))
          } else {
              Err(LangError::CouldNotReadInput)
          };
  
          return_value::<ConstructorResult<Result<AccountId, ConstructorError>>>(
              ReturnFlags::new_with_reverted(true),
              &value,
          )
      }
  *)
  Definition try_revert_new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ init_value ] =>
      let* init_value := M.alloc init_value in
      let* value :=
        let* α0 := M.read (use init_value) in
        let* α1 :=
          if α0 then
            let* α0 :=
              M.get_method
                "core::convert::From"
                "from"
                [
                  (* Self *) Ty.path "constructors_return_value::AccountId";
                  (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ]
                ] in
            let* α1 :=
              M.call α0 [ repeat ((Integer.of_Z 0) : Ty.path "u8") 32 ] in
            M.alloc (core.result.Result.Ok (core.result.Result.Ok α1))
          else
            M.alloc
              (core.result.Result.Err
                constructors_return_value.LangError.CouldNotReadInput) in
        M.copy α1 in
      let* α0 := M.var "constructors_return_value::return_value" in
      let* α1 :=
        M.call
          (Ty.path
              "constructors_return_value::ReturnFlags")::["new_with_reverted"]
          [ true ] in
      let* α2 := M.call α0 [ α1; borrow value ] in
      let* α3 := never_to_any α2 in
      let* α0 := M.alloc α3 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn get_value(&self) -> bool {
          self.value
      }
  *)
  Definition get_value (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.var "constructors_return_value::ConstructorsReturnValue::Get_value" in
      let* α1 := M.read self in
      M.read (α0 (deref α1))
    | _, _ => M.impossible
    end.
End Impl_constructors_return_value_ConstructorsReturnValue.
