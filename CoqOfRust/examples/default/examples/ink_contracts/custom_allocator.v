(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum CustomAllocator *)

Module Impl_custom_allocator_CustomAllocator.
  Definition Self : Ty.t := Ty.path "custom_allocator::CustomAllocator".
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self {
              value: vec![init_value],
          }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ init_value ] =>
      let* init_value := M.alloc init_value in
      let* α0 := M.read init_value in
      let* α1 := M.alloc [ α0 ] in
      let* α2 :=
        M.call
          (alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
          [ α1 ] in
      let* α3 := M.read α2 in
      let* α4 :=
        M.call
          (Ty.apply (Ty.path "slice") [ Ty.path "bool" ])::["into_vec"]
          [ pointer_coercion "Unsize" α3 ] in
      M.pure
        (Value.StructRecord
          "custom_allocator::CustomAllocator"
          [ ("value", α4) ])
    | _, _ => M.impossible
    end.
  
  (*
      pub fn default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "bool" ] in
      let* α1 := M.call α0 [] in
      M.call (Ty.path "custom_allocator::CustomAllocator")::["new"] [ α1 ]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn flip(&mut self) {
          self.value[0] = !self.value[0];
      }
  *)
  Definition flip (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 :=
          M.get_method
            "core::ops::index::IndexMut"
            "index_mut"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
              (* Idx *) Ty.path "usize"
            ] in
        let* α1 := M.read self in
        let* α2 :=
          M.call
            α0
            [
              borrow_mut
                ((M.var "custom_allocator::CustomAllocator::Get_value")
                  (deref α1));
              (Integer.of_Z 0) : Ty.path "usize"
            ] in
        let* α3 :=
          M.get_method
            "core::ops::index::Index"
            "index"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
              (* Idx *) Ty.path "usize"
            ] in
        let* α4 := M.read self in
        let* α5 :=
          M.call
            α3
            [
              borrow
                ((M.var "custom_allocator::CustomAllocator::Get_value")
                  (deref α4));
              (Integer.of_Z 0) : Ty.path "usize"
            ] in
        let* α6 := M.read (deref α5) in
        assign (deref α2) ((M.var "UnOp::not") α6) in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn get(&self) -> bool {
          self.value[0]
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_method
          "core::ops::index::Index"
          "index"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
            (* Idx *) Ty.path "usize"
          ] in
      let* α1 := M.read self in
      let* α2 :=
        M.call
          α0
          [
            borrow
              ((M.var "custom_allocator::CustomAllocator::Get_value")
                (deref α1));
            (Integer.of_Z 0) : Ty.path "usize"
          ] in
      M.read (deref α2)
    | _, _ => M.impossible
    end.
End Impl_custom_allocator_CustomAllocator.
