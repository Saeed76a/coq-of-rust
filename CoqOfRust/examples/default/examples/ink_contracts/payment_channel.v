(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_payment_channel_AccountId.
Section Impl_core_default_Default_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ℐ))) in
      let* α1 := M.call α0 in
      M.pure (payment_channel.AccountId.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_payment_channel_AccountId.
End Impl_core_default_Default_for_payment_channel_AccountId.

Module  Impl_core_clone_Clone_for_payment_channel_AccountId.
Section Impl_core_clone_Clone_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun γ =>
              (let* α0 := M.read self in
              M.pure (deref α0)) :
              Ty.apply (Ty.path "payment_channel::AccountId") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_payment_channel_AccountId.
End Impl_core_clone_Clone_for_payment_channel_AccountId.

Module  Impl_core_marker_Copy_for_payment_channel_AccountId.
Section Impl_core_marker_Copy_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_payment_channel_AccountId.
End Impl_core_marker_Copy_for_payment_channel_AccountId.

Module  Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId.
Section Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId.

Module  Impl_core_cmp_PartialEq_for_payment_channel_AccountId.
Section Impl_core_cmp_PartialEq_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.read self in
      let* α1 :=
        M.read ((M.var "payment_channel::AccountId::Get_0") (deref α0)) in
      let* α2 := M.read other in
      let* α3 :=
        M.read ((M.var "payment_channel::AccountId::Get_0") (deref α2)) in
      M.pure ((M.var "BinOp::Pure::eq") α1 α3)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_payment_channel_AccountId.
End Impl_core_cmp_PartialEq_for_payment_channel_AccountId.

Module  Impl_core_marker_StructuralEq_for_payment_channel_AccountId.
Section Impl_core_marker_StructuralEq_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_payment_channel_AccountId.
End Impl_core_marker_StructuralEq_for_payment_channel_AccountId.

Module  Impl_core_cmp_Eq_for_payment_channel_AccountId.
Section Impl_core_cmp_Eq_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply (Ty.path "core::cmp::AssertParamIsEq") [Ty.path "u128"]))
          [ fun γ => (M.alloc tt) : Ty.path "unit" ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_payment_channel_AccountId.
End Impl_core_cmp_Eq_for_payment_channel_AccountId.

Module  Impl_core_convert_From_array_u8_for_payment_channel_AccountId.
Section Impl_core_convert_From_array_u8_for_payment_channel_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::AccountId") [].
  
  (*
      fn from(value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [value] =>
      let* value := M.alloc value in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_array_u8_for_payment_channel_AccountId.
End Impl_core_convert_From_array_u8_for_payment_channel_AccountId.

Axiom Balance : Ty.path "u128".

Axiom Timestamp : Ty.path "u64".







Module  Impl_core_marker_StructuralPartialEq_for_payment_channel_Error.
Section Impl_core_marker_StructuralPartialEq_for_payment_channel_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_payment_channel_Error.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_Error.

Module  Impl_core_cmp_PartialEq_for_payment_channel_Error.
Section Impl_core_cmp_PartialEq_for_payment_channel_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Error") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 := M.read self in
        let* α1 := M.call ((M.var "core::intrinsics::discriminant_value") α0) in
        M.alloc α1 in
      let* __arg1_tag :=
        let* α0 := M.read other in
        let* α1 := M.call ((M.var "core::intrinsics::discriminant_value") α0) in
        M.alloc α1 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α0 := M.alloc ((M.var "BinOp::Pure::eq") α0 α1) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_payment_channel_Error.
End Impl_core_cmp_PartialEq_for_payment_channel_Error.

Module  Impl_core_marker_StructuralEq_for_payment_channel_Error.
Section Impl_core_marker_StructuralEq_for_payment_channel_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_payment_channel_Error.
End Impl_core_marker_StructuralEq_for_payment_channel_Error.

Module  Impl_core_cmp_Eq_for_payment_channel_Error.
Section Impl_core_cmp_Eq_for_payment_channel_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Error") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_payment_channel_Error.
End Impl_core_cmp_Eq_for_payment_channel_Error.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T; Ty.apply (Ty.path "payment_channel::Error") []].





Module  Impl_payment_channel_Env.
Section Impl_payment_channel_Env.
  Definition Self : Set := Ty.apply (Ty.path "payment_channel::Env") [].
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read ((M.var "payment_channel::Env::Get_caller") (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _event] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
  
  (*
      fn terminate_contract(&self, sender: AccountId) {
          unimplemented!()
      }
  *)
  Definition terminate_contract (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; sender] =>
      let* self := M.alloc self in
      let* sender := M.alloc sender in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_terminate_contract : Instance.t := {
    Notations.double_colon := terminate_contract;
  }.
  
  (*
      fn transfer(&self, recipient: AccountId, amount: Balance) -> Result<()> {
          unimplemented!()
      }
  *)
  Definition transfer (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; recipient; amount] =>
      let* self := M.alloc self in
      let* recipient := M.alloc recipient in
      let* amount := M.alloc amount in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_transfer : Instance.t := {
    Notations.double_colon := transfer;
  }.
  
  (*
      fn block_timestamp(&self) -> Timestamp {
          unimplemented!()
      }
  *)
  Definition block_timestamp (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_block_timestamp : Instance.t := {
    Notations.double_colon := block_timestamp;
  }.
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition balance (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_balance : Instance.t := {
    Notations.double_colon := balance;
  }.
  
  (*
      fn account_id(&self) -> AccountId {
          unimplemented!()
      }
  *)
  Definition account_id (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_account_id : Instance.t := {
    Notations.double_colon := account_id;
  }.
End Impl_payment_channel_Env.
End Impl_payment_channel_Env.

Module  HashOutput.
Section HashOutput.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
    ℒ_0 :: core.default.Default.Trait Type_;
  }.
  
  Definition Method_Type_ `(Trait) : Instance.t := {
    Notations.double_colon_type := Type_;
  }.
End HashOutput.
End HashOutput.

Module  CryptoHash.
Section CryptoHash.
  Class Trait (Self : Set) : Type := {
    hash :
      Ty.function
        [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "slice") [Ty.path "u8"]];
          Ty.apply (Ty.path "mut_ref") [_]]
        (Ty.path "unit");
  }.
  
End CryptoHash.
End CryptoHash.

(*
pub fn hash_encoded<H, T>(input: &T, output: &mut <H as HashOutput>::Type)
where
    H: CryptoHash,
{
    unimplemented!()
}
*)
Definition hash_encoded (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [H; T], [input; output] =>
    let* input := M.alloc input in
    let* output := M.alloc output in
    let* α0 := M.read (mk_str "not implemented") in
    let* α1 := M.call ((M.var "core::panicking::panic") α0) in
    never_to_any α1
  | _, _ => M.impossible
  end.

(*
pub fn ecdsa_recover(
    signature: &[u8; 65],
    message_hash: &[u8; 32],
    output: &mut [u8; 33],
) -> Result<()> {
    unimplemented!()
}
*)
Definition ecdsa_recover (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [signature; message_hash; output] =>
    let* signature := M.alloc signature in
    let* message_hash := M.alloc message_hash in
    let* output := M.alloc output in
    let* α0 := M.read (mk_str "not implemented") in
    let* α1 := M.call ((M.var "core::panicking::panic") α0) in
    never_to_any α1
  | _, _ => M.impossible
  end.









Module  Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256.
Section Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Sha2x256") [].
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := Ty.apply (Ty.path "array") [Ty.path "u8"].
  
  Definition ℐ : Instance.t := [("Type_", Type_)].
End Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256.
End Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Keccak256.
Section Impl_payment_channel_HashOutput_for_payment_channel_Keccak256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Keccak256") [].
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := Ty.apply (Ty.path "array") [Ty.path "u8"].
  
  Definition ℐ : Instance.t := [("Type_", Type_)].
End Impl_payment_channel_HashOutput_for_payment_channel_Keccak256.
End Impl_payment_channel_HashOutput_for_payment_channel_Keccak256.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256.
Section Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Blake2x256") [].
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := Ty.apply (Ty.path "array") [Ty.path "u8"].
  
  Definition ℐ : Instance.t := [("Type_", Type_)].
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128.
Section Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Blake2x128") [].
  
  (*
      type Type = [u8; 16];
  *)
  Definition Type_ : Set := Ty.apply (Ty.path "array") [Ty.path "u8"].
  
  Definition ℐ : Instance.t := [("Type_", Type_)].
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Sha2x256") [].
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Definition hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [input; output] =>
      let* input := M.alloc input in
      let* output := M.alloc output in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_hash : Instance.t := {
    Notations.double_colon := hash;
  }.
  
  Definition ℐ : Instance.t := [("hash", hash)].
End Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256.
End Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Keccak256") [].
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Definition hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [input; output] =>
      let* input := M.alloc input in
      let* output := M.alloc output in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_hash : Instance.t := {
    Notations.double_colon := hash;
  }.
  
  Definition ℐ : Instance.t := [("hash", hash)].
End Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256.
End Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Blake2x256") [].
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Definition hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [input; output] =>
      let* input := M.alloc input in
      let* output := M.alloc output in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_hash : Instance.t := {
    Notations.double_colon := hash;
  }.
  
  Definition ℐ : Instance.t := [("hash", hash)].
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128.
  Definition Self : Ty.t := Ty.apply (Ty.path "payment_channel::Blake2x128") [].
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Definition hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [input; output] =>
      let* input := M.alloc input in
      let* output := M.alloc output in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_hash : Instance.t := {
    Notations.double_colon := hash;
  }.
  
  Definition ℐ : Instance.t := [("hash", hash)].
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128.

Module  Impl_payment_channel_PaymentChannel.
Section Impl_payment_channel_PaymentChannel.
  Definition Self : Set :=
    Ty.apply (Ty.path "payment_channel::PaymentChannel") [].
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.call
        (Ty.apply (Ty.path "payment_channel::PaymentChannel") [])::["init_env"]
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  (*
      fn is_signature_valid(&self, amount: Balance, signature: [u8; 65]) -> bool {
          let encodable = (self.env().account_id(), amount);
          let mut message = <Sha2x256 as HashOutput>::Type::default();
          hash_encoded::<Sha2x256, _>(&encodable, &mut message);
  
          let mut pub_key = [0; 33];
          ecdsa_recover(&signature, &message, &mut pub_key)
              .unwrap_or_else(|err| panic!("recover failed: {err:?}"));
          let mut signature_account_id = [0; 32];
          <Blake2x256 as CryptoHash>::hash(&pub_key, &mut signature_account_id);
  
          self.recipient == signature_account_id.into()
      }
  *)
  Definition is_signature_valid (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; amount; signature] =>
      let* self := M.alloc self in
      let* amount := M.alloc amount in
      let* signature := M.alloc signature in
      let* encodable :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            ((Ty.apply (Ty.path "payment_channel::PaymentChannel") [])::["env"]
              α0) in
        let* α2 := M.alloc α1 in
        let* α3 :=
          M.call
            ((Ty.apply (Ty.path "payment_channel::Env") [])::["account_id"]
              (borrow α2)) in
        let* α4 := M.read amount in
        M.alloc (α3, α4) in
      let* message :=
        let* α0 :=
          ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := Ty.apply (Ty.path "array") [Ty.path "u8"])
              (Trait := ℐ))) in
        let* α1 := M.call α0 in
        M.alloc α1 in
      let* _ :=
        let* α0 :=
          M.call
            ((M.var "payment_channel::hash_encoded")
              (borrow encodable)
              (borrow_mut message)) in
        M.alloc α0 in
      let* pub_key := M.alloc (repeat ((Integer.of_Z 0) : Ty.path "u8") 33) in
      let* _ :=
        let* α0 :=
          M.call
            ((M.var "payment_channel::ecdsa_recover")
              (borrow signature)
              (borrow message)
              (borrow_mut pub_key)) in
        let* α1 :=
          M.call
            ((Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.tuple;
                    Ty.apply
                      (Ty.path "payment_channel::Error")
                      []])::["unwrap_or_else"]
              α0
              (fun (α0 : Ty.apply (Ty.path "payment_channel::Error") []) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  [
                    fun γ =>
                      (let* err := M.copy γ in
                      let* α0 := M.read (mk_str "recover failed: {err:?}") in
                      let* α1 :=
                        M.call ((M.var "std::panicking::begin_panic") α0) in
                      never_to_any α1) :
                      Ty.tuple
                  ]) :
                Ty.tuple)) in
        M.alloc α1 in
      let* signature_account_id :=
        M.alloc (repeat ((Integer.of_Z 0) : Ty.path "u8") 32) in
      let* _ :=
        let* α0 :=
          ltac:(M.get_method (fun ℐ =>
            payment_channel.CryptoHash.hash
              (Self := Ty.apply (Ty.path "payment_channel::Blake2x256") [])
              (Trait := ℐ))) in
        let* α1 :=
          M.call
            (α0
              (pointer_coercion "Unsize" (borrow pub_key))
              (borrow_mut signature_account_id)) in
        M.alloc α1 in
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "payment_channel::AccountId") [])
            (Rhs := Ty.apply (Ty.path "payment_channel::AccountId") [])
            (Trait := ℐ))) in
      let* α1 := M.read self in
      let* α2 :=
        ltac:(M.get_method (fun ℐ =>
          core.convert.Into.into
            (Self := Ty.apply (Ty.path "array") [Ty.path "u8"])
            (T := Ty.apply (Ty.path "payment_channel::AccountId") [])
            (Trait := ℐ))) in
      let* α3 := M.read signature_account_id in
      let* α4 := M.call (α2 α3) in
      let* α5 := M.alloc α4 in
      let* α6 :=
        M.call
          (α0
            (borrow
              ((M.var "payment_channel::PaymentChannel::Get_recipient")
                (deref α1)))
            (borrow α5)) in
      let* α0 := M.alloc α6 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_is_signature_valid : Instance.t := {
    Notations.double_colon := is_signature_valid;
  }.
  
  (*
      pub fn new(recipient: AccountId, close_duration: Timestamp) -> Self {
          Self {
              sender: Self::init_env().caller(),
              recipient,
              expiration: None,
              withdrawn: 0,
              close_duration,
          }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [recipient; close_duration] =>
      let* recipient := M.alloc recipient in
      let* close_duration := M.alloc close_duration in
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "payment_channel::PaymentChannel")
              [])::["init_env"] in
      let* α1 := M.alloc α0 in
      let* α2 :=
        M.call
          ((Ty.apply (Ty.path "payment_channel::Env") [])::["caller"]
            (borrow α1)) in
      let* α3 := M.read recipient in
      let* α4 := M.read close_duration in
      M.pure
        {|
          payment_channel.PaymentChannel.sender := α2;
          payment_channel.PaymentChannel.recipient := α3;
          payment_channel.PaymentChannel.expiration := core.option.Option.None;
          payment_channel.PaymentChannel.withdrawn :=
            (Integer.of_Z 0) : Ty.path "u128";
          payment_channel.PaymentChannel.close_duration := α4;
        |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      fn close_inner(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          if self.env().caller() != self.recipient {
              return Err(Error::CallerIsNotRecipient);
          }
  
          if amount < self.withdrawn {
              return Err(Error::AmountIsLessThanWithdrawn);
          }
  
          // Signature validation
          if !self.is_signature_valid(amount, signature) {
              return Err(Error::InvalidSignature);
          }
  
          self.env()
              .transfer(self.recipient, amount - self.withdrawn)
              .map_err(|_| Error::TransferFailed)?;
  
          Ok(())
      }
  *)
  Definition close_inner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; amount; signature] =>
      let* self := M.alloc self in
      let* amount := M.alloc amount in
      let* signature := M.alloc signature in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []]) in
      M.catch_return
        (let* _ :=
          let* α0 :=
            ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.ne
                (Self := Ty.apply (Ty.path "payment_channel::AccountId") [])
                (Rhs := Ty.apply (Ty.path "payment_channel::AccountId") [])
                (Trait := ℐ))) in
          let* α1 := M.read self in
          let* α2 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["env"]
                (borrow (deref α1))) in
          let* α3 := M.alloc α2 in
          let* α4 :=
            M.call
              ((Ty.apply (Ty.path "payment_channel::Env") [])::["caller"]
                (borrow α3)) in
          let* α5 := M.alloc α4 in
          let* α6 := M.read self in
          let* α7 :=
            M.call
              (α0
                (borrow α5)
                (borrow
                  ((M.var "payment_channel::PaymentChannel::Get_recipient")
                    (deref α6)))) in
          let* α8 := M.alloc α7 in
          let* α9 := M.read (use α8) in
          if α9 then
            let* α0 :=
              return_
                (core.result.Result.Err
                  payment_channel.Error.CallerIsNotRecipient) in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.read amount in
          let* α1 := M.read self in
          let* α2 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_withdrawn")
                (deref α1)) in
          let* α3 := M.alloc ((M.var "BinOp::Pure::lt") α0 α2) in
          let* α4 := M.read (use α3) in
          if α4 then
            let* α0 :=
              return_
                (core.result.Result.Err
                  payment_channel.Error.AmountIsLessThanWithdrawn) in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.read self in
          let* α1 := M.read amount in
          let* α2 := M.read signature in
          let* α3 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["is_signature_valid"]
                (borrow (deref α0))
                α1
                α2) in
          let* α4 := M.alloc ((M.var "UnOp::not") α3) in
          let* α5 := M.read (use α4) in
          if α5 then
            let* α0 :=
              return_
                (core.result.Result.Err
                  payment_channel.Error.InvalidSignature) in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        let* _ :=
          let* α0 :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []])
                (Trait := ℐ))) in
          let* α1 := M.read self in
          let* α2 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["env"]
                (borrow (deref α1))) in
          let* α3 := M.alloc α2 in
          let* α4 := M.read self in
          let* α5 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_recipient")
                (deref α4)) in
          let* α6 := M.read amount in
          let* α7 := M.read self in
          let* α8 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_withdrawn")
                (deref α7)) in
          let* α9 := (M.var "BinOp::Panic::sub") α6 α8 in
          let* α10 :=
            M.call
              ((Ty.apply (Ty.path "payment_channel::Env") [])::["transfer"]
                (borrow α3)
                α5
                α9) in
          let* α11 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.tuple;
                      Ty.apply
                        (Ty.path "payment_channel::Error")
                        []])::["map_err"]
                α10
                (fun (α0 : Ty.apply (Ty.path "payment_channel::Error") []) =>
                  (let* α0 := M.alloc α0 in
                  match_operator
                    α0
                    [
                      fun γ =>
                        (M.pure payment_channel.Error.TransferFailed) :
                        Ty.apply (Ty.path "payment_channel::Error") []
                    ]) :
                  Ty.apply (Ty.path "payment_channel::Error") [])) in
          let* α12 := M.call (α0 α11) in
          let* α13 := M.alloc α12 in
          match_operator
            α13
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.tuple;
                              Ty.apply (Ty.path "payment_channel::Error") []])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply (Ty.path "payment_channel::Error") []])
                        (Trait := ℐ))) in
                  let* α1 := M.read residual in
                  let* α2 := M.call (α0 α1) in
                  let* α3 := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                Ty.tuple;
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.tuple
            ] in
        let* α0 := M.alloc (core.result.Result.Ok tt) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_close_inner : Instance.t := {
    Notations.double_colon := close_inner;
  }.
  
  (*
      pub fn close(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          self.close_inner(amount, signature)?;
          self.env().terminate_contract(self.sender);
  
          Ok(())
      }
  *)
  Definition close (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; amount; signature] =>
      let* self := M.alloc self in
      let* amount := M.alloc amount in
      let* signature := M.alloc signature in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []]) in
      M.catch_return
        (let* _ :=
          let* α0 :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []])
                (Trait := ℐ))) in
          let* α1 := M.read self in
          let* α2 := M.read amount in
          let* α3 := M.read signature in
          let* α4 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["close_inner"]
                α1
                α2
                α3) in
          let* α5 := M.call (α0 α4) in
          let* α6 := M.alloc α5 in
          match_operator
            α6
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.tuple;
                              Ty.apply (Ty.path "payment_channel::Error") []])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply (Ty.path "payment_channel::Error") []])
                        (Trait := ℐ))) in
                  let* α1 := M.read residual in
                  let* α2 := M.call (α0 α1) in
                  let* α3 := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                Ty.tuple;
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.tuple
            ] in
        let* _ :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["env"]
                (borrow (deref α0))) in
          let* α2 := M.alloc α1 in
          let* α3 := M.read self in
          let* α4 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_sender")
                (deref α3)) in
          let* α5 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::Env")
                    [])::["terminate_contract"]
                (borrow α2)
                α4) in
          M.alloc α5 in
        let* α0 := M.alloc (core.result.Result.Ok tt) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_close : Instance.t := {
    Notations.double_colon := close;
  }.
  
  (*
      pub fn start_sender_close(&mut self) -> Result<()> {
          if self.env().caller() != self.sender {
              return Err(Error::CallerIsNotSender);
          }
  
          let now = self.env().block_timestamp();
          let expiration = now + self.close_duration;
  
          self.env()
              .emit_event(Event::SenderCloseStarted(SenderCloseStarted {
                  expiration,
                  close_duration: self.close_duration,
              }));
  
          self.expiration = Some(expiration);
  
          Ok(())
      }
  *)
  Definition start_sender_close (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []]) in
      M.catch_return
        (let* _ :=
          let* α0 :=
            ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.ne
                (Self := Ty.apply (Ty.path "payment_channel::AccountId") [])
                (Rhs := Ty.apply (Ty.path "payment_channel::AccountId") [])
                (Trait := ℐ))) in
          let* α1 := M.read self in
          let* α2 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["env"]
                (borrow (deref α1))) in
          let* α3 := M.alloc α2 in
          let* α4 :=
            M.call
              ((Ty.apply (Ty.path "payment_channel::Env") [])::["caller"]
                (borrow α3)) in
          let* α5 := M.alloc α4 in
          let* α6 := M.read self in
          let* α7 :=
            M.call
              (α0
                (borrow α5)
                (borrow
                  ((M.var "payment_channel::PaymentChannel::Get_sender")
                    (deref α6)))) in
          let* α8 := M.alloc α7 in
          let* α9 := M.read (use α8) in
          if α9 then
            let* α0 :=
              return_
                (core.result.Result.Err
                  payment_channel.Error.CallerIsNotSender) in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        let* now :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["env"]
                (borrow (deref α0))) in
          let* α2 := M.alloc α1 in
          let* α3 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::Env")
                    [])::["block_timestamp"]
                (borrow α2)) in
          M.alloc α3 in
        let* expiration :=
          let* α0 := M.read now in
          let* α1 := M.read self in
          let* α2 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_close_duration")
                (deref α1)) in
          let* α3 := (M.var "BinOp::Panic::add") α0 α2 in
          M.alloc α3 in
        let* _ :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["env"]
                (borrow (deref α0))) in
          let* α2 := M.alloc α1 in
          let* α3 := M.read expiration in
          let* α4 := M.read self in
          let* α5 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_close_duration")
                (deref α4)) in
          let* α6 :=
            M.call
              ((Ty.apply (Ty.path "payment_channel::Env") [])::["emit_event"]
                (borrow α2)
                (payment_channel.Event.SenderCloseStarted
                  {|
                    payment_channel.SenderCloseStarted.expiration := α3;
                    payment_channel.SenderCloseStarted.close_duration := α5;
                  |})) in
          M.alloc α6 in
        let* _ :=
          let* α0 := M.read self in
          let* α1 := M.read expiration in
          assign
            ((M.var "payment_channel::PaymentChannel::Get_expiration")
              (deref α0))
            (core.option.Option.Some α1) in
        let* α0 := M.alloc (core.result.Result.Ok tt) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_start_sender_close : Instance.t := {
    Notations.double_colon := start_sender_close;
  }.
  
  (*
      pub fn claim_timeout(&mut self) -> Result<()> {
          match self.expiration {
              Some(expiration) => {
                  // expiration is set. Check if it's reached and if so, release the
                  // funds and terminate the contract.
                  let now = self.env().block_timestamp();
                  if now < expiration {
                      return Err(Error::NotYetExpired);
                  }
  
                  self.env().terminate_contract(self.sender);
  
                  Ok(())
              }
  
              None => Err(Error::NotYetExpired),
          }
      }
  *)
  Definition claim_timeout (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []]) in
      M.catch_return
        (let* α0 := M.read self in
        let* α1 :=
          match_operator
            ((M.var "payment_channel::PaymentChannel::Get_expiration")
              (deref α0))
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := (M.var "core::option::Option::Get_Some_0") γ in
                  let* expiration := M.copy γ0_0 in
                  let* now :=
                    let* α0 := M.read self in
                    let* α1 :=
                      M.call
                        ((Ty.apply
                              (Ty.path "payment_channel::PaymentChannel")
                              [])::["env"]
                          (borrow (deref α0))) in
                    let* α2 := M.alloc α1 in
                    let* α3 :=
                      M.call
                        ((Ty.apply
                              (Ty.path "payment_channel::Env")
                              [])::["block_timestamp"]
                          (borrow α2)) in
                    M.alloc α3 in
                  let* _ :=
                    let* α0 := M.read now in
                    let* α1 := M.read expiration in
                    let* α2 := M.alloc ((M.var "BinOp::Pure::lt") α0 α1) in
                    let* α3 := M.read (use α2) in
                    if α3 then
                      let* α0 :=
                        return_
                          (core.result.Result.Err
                            payment_channel.Error.NotYetExpired) in
                      let* α1 := M.read α0 in
                      let* α2 := never_to_any α1 in
                      M.alloc α2
                    else
                      M.alloc tt in
                  let* _ :=
                    let* α0 := M.read self in
                    let* α1 :=
                      M.call
                        ((Ty.apply
                              (Ty.path "payment_channel::PaymentChannel")
                              [])::["env"]
                          (borrow (deref α0))) in
                    let* α2 := M.alloc α1 in
                    let* α3 := M.read self in
                    let* α4 :=
                      M.read
                        ((M.var "payment_channel::PaymentChannel::Get_sender")
                          (deref α3)) in
                    let* α5 :=
                      M.call
                        ((Ty.apply
                              (Ty.path "payment_channel::Env")
                              [])::["terminate_contract"]
                          (borrow α2)
                          α4) in
                    M.alloc α5 in
                  M.alloc (core.result.Result.Ok tt)
                | _ => M.break_match
                end) :
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []];
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  M.alloc
                    (core.result.Result.Err payment_channel.Error.NotYetExpired)
                | _ => M.break_match
                end) :
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []]
            ] in
        M.read α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_claim_timeout : Instance.t := {
    Notations.double_colon := claim_timeout;
  }.
  
  (*
      pub fn withdraw(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          if self.env().caller() != self.recipient {
              return Err(Error::CallerIsNotRecipient);
          }
  
          // Signature validation
          if !self.is_signature_valid(amount, signature) {
              return Err(Error::InvalidSignature);
          }
  
          // Make sure there's something to withdraw (guards against underflow)
          if amount < self.withdrawn {
              return Err(Error::AmountIsLessThanWithdrawn);
          }
  
          let amount_to_withdraw = amount - self.withdrawn;
          self.withdrawn += amount_to_withdraw;
  
          self.env()
              .transfer(self.recipient, amount_to_withdraw)
              .map_err(|_| Error::TransferFailed)?;
  
          Ok(())
      }
  *)
  Definition withdraw (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; amount; signature] =>
      let* self := M.alloc self in
      let* amount := M.alloc amount in
      let* signature := M.alloc signature in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []]) in
      M.catch_return
        (let* _ :=
          let* α0 :=
            ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.ne
                (Self := Ty.apply (Ty.path "payment_channel::AccountId") [])
                (Rhs := Ty.apply (Ty.path "payment_channel::AccountId") [])
                (Trait := ℐ))) in
          let* α1 := M.read self in
          let* α2 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["env"]
                (borrow (deref α1))) in
          let* α3 := M.alloc α2 in
          let* α4 :=
            M.call
              ((Ty.apply (Ty.path "payment_channel::Env") [])::["caller"]
                (borrow α3)) in
          let* α5 := M.alloc α4 in
          let* α6 := M.read self in
          let* α7 :=
            M.call
              (α0
                (borrow α5)
                (borrow
                  ((M.var "payment_channel::PaymentChannel::Get_recipient")
                    (deref α6)))) in
          let* α8 := M.alloc α7 in
          let* α9 := M.read (use α8) in
          if α9 then
            let* α0 :=
              return_
                (core.result.Result.Err
                  payment_channel.Error.CallerIsNotRecipient) in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.read self in
          let* α1 := M.read amount in
          let* α2 := M.read signature in
          let* α3 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["is_signature_valid"]
                (borrow (deref α0))
                α1
                α2) in
          let* α4 := M.alloc ((M.var "UnOp::not") α3) in
          let* α5 := M.read (use α4) in
          if α5 then
            let* α0 :=
              return_
                (core.result.Result.Err
                  payment_channel.Error.InvalidSignature) in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.read amount in
          let* α1 := M.read self in
          let* α2 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_withdrawn")
                (deref α1)) in
          let* α3 := M.alloc ((M.var "BinOp::Pure::lt") α0 α2) in
          let* α4 := M.read (use α3) in
          if α4 then
            let* α0 :=
              return_
                (core.result.Result.Err
                  payment_channel.Error.AmountIsLessThanWithdrawn) in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        let* amount_to_withdraw :=
          let* α0 := M.read amount in
          let* α1 := M.read self in
          let* α2 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_withdrawn")
                (deref α1)) in
          let* α3 := (M.var "BinOp::Panic::sub") α0 α2 in
          M.alloc α3 in
        let* _ :=
          let* β :=
            let* α0 := M.read self in
            M.pure
              ((M.var "payment_channel::PaymentChannel::Get_withdrawn")
                (deref α0)) in
          let* α0 := M.read β in
          let* α1 := M.read amount_to_withdraw in
          let* α2 := (M.var "BinOp::Panic::add") α0 α1 in
          (M.var "assign") β α2 in
        let* _ :=
          let* α0 :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.tuple; Ty.apply (Ty.path "payment_channel::Error") []])
                (Trait := ℐ))) in
          let* α1 := M.read self in
          let* α2 :=
            M.call
              ((Ty.apply
                    (Ty.path "payment_channel::PaymentChannel")
                    [])::["env"]
                (borrow (deref α1))) in
          let* α3 := M.alloc α2 in
          let* α4 := M.read self in
          let* α5 :=
            M.read
              ((M.var "payment_channel::PaymentChannel::Get_recipient")
                (deref α4)) in
          let* α6 := M.read amount_to_withdraw in
          let* α7 :=
            M.call
              ((Ty.apply (Ty.path "payment_channel::Env") [])::["transfer"]
                (borrow α3)
                α5
                α6) in
          let* α8 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.tuple;
                      Ty.apply
                        (Ty.path "payment_channel::Error")
                        []])::["map_err"]
                α7
                (fun (α0 : Ty.apply (Ty.path "payment_channel::Error") []) =>
                  (let* α0 := M.alloc α0 in
                  match_operator
                    α0
                    [
                      fun γ =>
                        (M.pure payment_channel.Error.TransferFailed) :
                        Ty.apply (Ty.path "payment_channel::Error") []
                    ]) :
                  Ty.apply (Ty.path "payment_channel::Error") [])) in
          let* α9 := M.call (α0 α8) in
          let* α10 := M.alloc α9 in
          match_operator
            α10
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.tuple;
                              Ty.apply (Ty.path "payment_channel::Error") []])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply (Ty.path "payment_channel::Error") []])
                        (Trait := ℐ))) in
                  let* α1 := M.read residual in
                  let* α2 := M.call (α0 α1) in
                  let* α3 := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                Ty.tuple;
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.tuple
            ] in
        let* α0 := M.alloc (core.result.Result.Ok tt) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_withdraw : Instance.t := {
    Notations.double_colon := withdraw;
  }.
  
  (*
      pub fn get_sender(&self) -> AccountId {
          self.sender
      }
  *)
  Definition get_sender (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read ((M.var "payment_channel::PaymentChannel::Get_sender") (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get_sender : Instance.t := {
    Notations.double_colon := get_sender;
  }.
  
  (*
      pub fn get_recipient(&self) -> AccountId {
          self.recipient
      }
  *)
  Definition get_recipient (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read
        ((M.var "payment_channel::PaymentChannel::Get_recipient") (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get_recipient : Instance.t := {
    Notations.double_colon := get_recipient;
  }.
  
  (*
      pub fn get_expiration(&self) -> Option<Timestamp> {
          self.expiration
      }
  *)
  Definition get_expiration (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read
        ((M.var "payment_channel::PaymentChannel::Get_expiration") (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get_expiration : Instance.t := {
    Notations.double_colon := get_expiration;
  }.
  
  (*
      pub fn get_withdrawn(&self) -> Balance {
          self.withdrawn
      }
  *)
  Definition get_withdrawn (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read
        ((M.var "payment_channel::PaymentChannel::Get_withdrawn") (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get_withdrawn : Instance.t := {
    Notations.double_colon := get_withdrawn;
  }.
  
  (*
      pub fn get_close_duration(&self) -> Timestamp {
          self.close_duration
      }
  *)
  Definition get_close_duration (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read
        ((M.var "payment_channel::PaymentChannel::Get_close_duration")
          (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get_close_duration : Instance.t := {
    Notations.double_colon := get_close_duration;
  }.
  
  (*
      pub fn get_balance(&self) -> Balance {
          self.env().balance()
      }
  *)
  Definition get_balance (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        M.call
          ((Ty.apply (Ty.path "payment_channel::PaymentChannel") [])::["env"]
            α0) in
      let* α2 := M.alloc α1 in
      M.call
        ((Ty.apply (Ty.path "payment_channel::Env") [])::["balance"]
          (borrow α2))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get_balance : Instance.t := {
    Notations.double_colon := get_balance;
  }.
End Impl_payment_channel_PaymentChannel.
End Impl_payment_channel_PaymentChannel.
