(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Trait *)
Module Increment.
  
End Increment.

(* Trait *)
Module Reset.
  
End Reset.

(* Enum Incrementer *)

Module Impl_trait_incrementer_Incrementer.
  Definition Self : Ty.t := Ty.path "trait_incrementer::Incrementer".
  
  (*
      pub fn new(init_value: u64) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ init_value ] =>
      let* init_value := M.alloc init_value in
      let* Œ±0 := M.read init_value in
      M.pure
        (Value.StructRecord "trait_incrementer::Incrementer" [ ("value", Œ±0) ])
    | _, _ => M.impossible
    end.
  
  (*
      pub fn inc_by(&mut self, delta: u64) {
          self.value += delta;
      }
  *)
  Definition inc_by (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; delta ] =>
      let* self := M.alloc self in
      let* delta := M.alloc delta in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure
            ((M.var "trait_incrementer::Incrementer::Get_value") (deref Œ±0)) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read delta in
        let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
        (M.var "assign") Œ≤ Œ±2 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
End Impl_trait_incrementer_Incrementer.

Module Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer.
  Definition Self : Ty.t := Ty.path "trait_incrementer::Incrementer".
  
  (*
      fn inc(&mut self) {
          self.inc_by(1)
      }
  *)
  Definition inc (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.call
        (Ty.path "trait_incrementer::Incrementer")::["inc_by"]
        [ Œ±0; (Integer.of_Z 1) : Ty.path "u64" ]
    | _, _ => M.impossible
    end.
  
  (*
      fn get(&self) -> u64 {
          self.value
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read ((M.var "trait_incrementer::Incrementer::Get_value") (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [ ("inc", InstanceField.Method inc); ("get", InstanceField.Method get) ].
End Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer.

Module Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer.
  Definition Self : Ty.t := Ty.path "trait_incrementer::Incrementer".
  
  (*
      fn reset(&mut self) {
          self.value = 0;
      }
  *)
  Definition reset (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* Œ±0 := M.read self in
        assign
          ((M.var "trait_incrementer::Incrementer::Get_value") (deref Œ±0))
          ((Integer.of_Z 0) : Ty.path "u64") in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("reset", InstanceField.Method reset) ].
End Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer.
