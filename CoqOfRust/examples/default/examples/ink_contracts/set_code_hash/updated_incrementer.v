(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct AccountId *)

Module Impl_core_default_Default_for_updated_incrementer_AccountId.
  Definition Self : Ty.t := Ty.path "updated_incrementer::AccountId".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.call Œ±0 in
      M.pure (updated_incrementer.AccountId.Build_t Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("default", InstanceField.Method default)].
End Impl_core_default_Default_for_updated_incrementer_AccountId.

Module Impl_core_clone_Clone_for_updated_incrementer_AccountId.
  Definition Self : Ty.t := Ty.path "updated_incrementer::AccountId".
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read self in
              M.pure (deref Œ±0)) :
              Ty.path "updated_incrementer::AccountId"
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("clone", InstanceField.Method clone)].
End Impl_core_clone_Clone_for_updated_incrementer_AccountId.

Module Impl_core_marker_Copy_for_updated_incrementer_AccountId.
  Definition Self : Ty.t := Ty.path "updated_incrementer::AccountId".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_updated_incrementer_AccountId.

Axiom Hash :
    (Ty.path "updated_incrementer::Hash") =
      (Ty.apply (Ty.path "array") [Ty.path "u8"]).

(* Enum Error *)

(* Enum Env *)

Module Impl_updated_incrementer_Env.
  Definition Self : Ty.t := Ty.path "updated_incrementer::Env".
  
  (*
      fn set_code_hash<E>(&self, code_hash: &E) -> Result<(), Error> {
          unimplemented!()
      }
  *)
  Definition set_code_hash (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [E], [self; code_hash] =>
      let* self := M.alloc self in
      let* code_hash := M.alloc code_hash in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
End Impl_updated_incrementer_Env.

(* Enum Incrementer *)

Module Impl_updated_incrementer_Incrementer.
  Definition Self : Ty.t := Ty.path "updated_incrementer::Incrementer".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      M.call (Ty.path "updated_incrementer::Incrementer")::["init_env"]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn new() -> Self {
          unreachable!("Constructors are not called when upgrading using `set_code_hash`.")
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        M.call
          ((M.var "core::panicking::unreachable_display")
            (borrow
              (mk_str
                "Constructors are not called when upgrading using `set_code_hash`."))) in
      never_to_any Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn inc(&mut self) {
          self.count += 4;
          println!(
              "The new count is {}, it was modified using the updated `new_incrementer` code.",
              self.count
          );
      }
  *)
  Definition inc (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure
            ((M.var "updated_incrementer::Incrementer::Get_count")
              (deref Œ±0)) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 :=
          (M.var "BinOp::Panic::add") Œ±0 ((Integer.of_Z 4) : Ty.path "u32") in
        (M.var "assign") Œ≤ Œ±1 in
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "The new count is ") in
          let* Œ±1 :=
            M.read
              (mk_str
                ", it was modified using the updated `new_incrementer` code.
") in
          let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
          let* Œ±3 := M.read self in
          let* Œ±4 :=
            M.call
              ((Ty.path "core::fmt::rt::Argument")::["new_display"]
                (borrow
                  ((M.var "updated_incrementer::Incrementer::Get_count")
                    (deref Œ±3)))) in
          let* Œ±5 := M.alloc [ Œ±4 ] in
          let* Œ±6 :=
            M.call
              ((Ty.path "core::fmt::Arguments")::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±2))
                (pointer_coercion "Unsize" (borrow Œ±5))) in
          let* Œ±7 := M.call ((M.var "std::io::stdio::_print") Œ±6) in
          M.alloc Œ±7 in
        M.alloc tt in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn get(&self) -> u32 {
          self.count
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read ((M.var "updated_incrementer::Incrementer::Get_count") (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  (*
      pub fn set_code(&mut self, code_hash: Hash) {
          self.env().set_code_hash(&code_hash).unwrap_or_else(|err| {
              panic!("Failed to `set_code_hash` to {code_hash:?} due to {err:?}")
          });
          println!("Switched code hash to {:?}.", code_hash);
      }
  *)
  Definition set_code (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; code_hash] =>
      let* self := M.alloc self in
      let* code_hash := M.alloc code_hash in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          M.call
            ((Ty.path "updated_incrementer::Incrementer")::["env"]
              (borrow (deref Œ±0))) in
        let* Œ±2 := M.alloc Œ±1 in
        let* Œ±3 :=
          M.call
            ((Ty.path "updated_incrementer::Env")::["set_code_hash"]
              (borrow Œ±2)
              (borrow code_hash)) in
        let* Œ±4 :=
          M.call
            ((Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.tuple [];
                    Ty.path "updated_incrementer::Error"])::["unwrap_or_else"]
              Œ±3
              (fun (Œ±0 : Ty.path "updated_incrementer::Error") =>
                (let* Œ±0 := M.alloc Œ±0 in
                match_operator
                  Œ±0
                  [
                    fun Œ≥ =>
                      (let* err := M.copy Œ≥ in
                      let* Œ±0 :=
                        M.read
                          (mk_str
                            "Failed to `set_code_hash` to {code_hash:?} due to {err:?}") in
                      let* Œ±1 :=
                        M.call ((M.var "std::panicking::begin_panic") Œ±0) in
                      never_to_any Œ±1) :
                      Ty.tuple []
                  ]) :
                Ty.tuple [])) in
        M.alloc Œ±4 in
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "Switched code hash to ") in
          let* Œ±1 := M.read (mk_str ".
") in
          let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
          let* Œ±3 :=
            M.call
              ((Ty.path "core::fmt::rt::Argument")::["new_debug"]
                (borrow code_hash)) in
          let* Œ±4 := M.alloc [ Œ±3 ] in
          let* Œ±5 :=
            M.call
              ((Ty.path "core::fmt::Arguments")::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±2))
                (pointer_coercion "Unsize" (borrow Œ±4))) in
          let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
          M.alloc Œ±6 in
        M.alloc tt in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
End Impl_updated_incrementer_Incrementer.
