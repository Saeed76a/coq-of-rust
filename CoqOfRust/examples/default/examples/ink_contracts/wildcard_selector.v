(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn decode_input<T>() -> Result<T, ()> {
    unimplemented!()
}
*)
Parameter decode_input : (list Ty.t) -> (list Value.t) -> M.

(* StructTuple
  {
    name := "WildcardSelector";
    ty_params := [];
  } *)

Module Impl_wildcard_selector_WildcardSelector.
  Definition Self : Ty.t := Ty.path "wildcard_selector::WildcardSelector".
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      M.pure (Value.StructTuple "wildcard_selector::WildcardSelector" [])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn wildcard(&mut self) {
          let (_selector, _message) = decode_input::<([u8; 4], String)>().unwrap();
          println!("Wildcard selector: {:?}, message: {}", _selector, _message);
      }
  *)
  Definition wildcard (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "core::result::Result")
            [
              Ty.tuple
                [
                  Ty.apply (Ty.path "array") [ Ty.path "u8" ];
                  Ty.path "alloc::string::String"
                ];
              Ty.tuple []
            ])
          "unwrap" in
      let* α1 :=
        M.get_function
          "wildcard_selector::decode_input"
          [
            Ty.tuple
              [
                Ty.apply (Ty.path "array") [ Ty.path "u8" ];
                Ty.path "alloc::string::String"
              ]
          ] in
      let* α2 := M.call_closure α1 [] in
      let* α3 := M.call_closure α0 [ α2 ] in
      let* α4 := M.alloc α3 in
      let* α5 :=
        match_operator
          α4
          [
            fun γ =>
              let* γ0_0 := M.get_tuple_field γ 0 in
              let* γ0_1 := M.get_tuple_field γ 1 in
              let* _selector := M.copy γ0_0 in
              let* _message := M.copy γ0_1 in
              let* _ :=
                let* _ :=
                  let* α0 := M.get_function "std::io::stdio::_print" [] in
                  let* α1 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::Arguments")
                      "new_v1" in
                  let* α2 := M.read (mk_str "Wildcard selector: ") in
                  let* α3 := M.read (mk_str ", message: ") in
                  let* α4 := M.read (mk_str "
") in
                  let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
                  let* α6 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::rt::Argument")
                      "new_debug" in
                  let* α7 := M.call_closure α6 [ _selector ] in
                  let* α8 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::rt::Argument")
                      "new_display" in
                  let* α9 := M.call_closure α8 [ _message ] in
                  let* α10 := M.alloc (Value.Array [ α7; α9 ]) in
                  let* α11 :=
                    M.call_closure
                      α1
                      [
                        M.pointer_coercion (* Unsize *) α5;
                        M.pointer_coercion (* Unsize *) α10
                      ] in
                  let* α12 := M.call_closure α0 [ α11 ] in
                  M.alloc α12 in
                M.alloc (Value.Tuple []) in
              M.alloc (Value.Tuple [])
          ] in
      M.read α5
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_wildcard :
    M.IsAssociatedFunction Self "wildcard" wildcard.
  
  (*
      pub fn wildcard_complement(&mut self, _message: String) {
          println!("Wildcard complement message: {}", _message);
      }
  *)
  Definition wildcard_complement (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; _message ] =>
      let* self := M.alloc self in
      let* _message := M.alloc _message in
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_v1" in
          let* α2 := M.read (mk_str "Wildcard complement message: ") in
          let* α3 := M.read (mk_str "
") in
          let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
          let* α5 :=
            M.get_associated_function
              (Ty.path "core::fmt::rt::Argument")
              "new_display" in
          let* α6 := M.call_closure α5 [ _message ] in
          let* α7 := M.alloc (Value.Array [ α6 ]) in
          let* α8 :=
            M.call_closure
              α1
              [
                M.pointer_coercion (* Unsize *) α4;
                M.pointer_coercion (* Unsize *) α7
              ] in
          let* α9 := M.call_closure α0 [ α8 ] in
          M.alloc α9 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_wildcard_complement :
    M.IsAssociatedFunction Self "wildcard_complement" wildcard_complement.
End Impl_wildcard_selector_WildcardSelector.
