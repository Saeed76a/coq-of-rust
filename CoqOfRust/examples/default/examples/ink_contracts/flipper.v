(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_flipper_Flipper.
Section Impl_flipper_Flipper.
  Definition Self : Set := Ty.apply (Ty.path "flipper::Flipper") [].
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [init_value] =>
      let* init_value := M.alloc init_value in
      let* α0 : Ty.path "bool" := M.read init_value in
      M.pure {| flipper.Flipper.value := α0; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.function [] (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.path "bool")
            (Trait := ℐ))) in
      let* α1 : Ty.path "bool" := M.call α0 in
      M.call ((Ty.apply (Ty.path "flipper::Flipper") [])::["new"] α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new_default : Instance.t := {
    Notations.double_colon := new_default;
  }.
  
  (*
      pub fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ : Ty.tuple :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "flipper::Flipper") []] :=
          M.read self in
        let* α1 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "flipper::Flipper") []] :=
          M.read self in
        let* α2 : Ty.path "bool" :=
          M.read (flipper.Flipper.Get_value (deref α1)) in
        assign (flipper.Flipper.Get_value (deref α0)) (UnOp.not α2) in
      let* α0 : Ty.path "unit" := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_flip : Instance.t := {
    Notations.double_colon := flip;
  }.
  
  (*
      pub fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "flipper::Flipper") []] :=
        M.read self in
      M.read (flipper.Flipper.Get_value (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
End Impl_flipper_Flipper.
End Impl_flipper_Flipper.
