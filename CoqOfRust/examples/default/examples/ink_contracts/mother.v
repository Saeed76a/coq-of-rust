(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Mapping *)

Module Impl_core_default_Default_for_mother_Mapping_K_V.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ K ] ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ V ] ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord "mother::Mapping" [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.apply (Ty.path "mother::Mapping") [ K; V ])
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [ K; V ].
End Impl_core_default_Default_for_mother_Mapping_K_V.

Module Impl_mother_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "mother::Mapping") [ K; V ].
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" [] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "get" get [ K; V ].
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Definition insert (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key; _value ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 := M.get_function "core::panicking::panic" [] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "insert" insert [ K; V ].
End Impl_mother_Mapping_K_V.

(* Struct AccountId *)

Module Impl_core_default_Default_for_mother_AccountId.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α1 := M.call α0 [] in
      M.pure (Value.StructTuple "mother::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_mother_AccountId.

Module Impl_core_clone_Clone_for_mother_AccountId.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator Value.DeclaredButUndefined [ fun γ => (M.read self) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_AccountId.

Module Impl_core_marker_Copy_for_mother_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_Copy_for_mother_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_mother_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId.

Module Impl_core_cmp_PartialEq_for_mother_AccountId.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.read self in
      let* α1 := M.read (M.get_struct_tuple α0 0) in
      let* α2 := M.read other in
      let* α3 := M.read (M.get_struct_tuple α2 0) in
      M.pure (BinOp.Pure.eq α1 α3)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_AccountId.

Module Impl_core_marker_StructuralEq_for_mother_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_AccountId.

Module Impl_core_cmp_Eq_for_mother_AccountId.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [ fun γ => (M.alloc (Value.Tuple [])) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_AccountId.

Axiom Balance : (Ty.path "mother::Balance") = (Ty.path "u128").

Axiom BlockNumber : (Ty.path "mother::BlockNumber") = (Ty.path "u32").

Axiom Hash :
  (Ty.path "mother::Hash") = (Ty.apply (Ty.path "array") [ Ty.path "u8" ]).

(* Struct Env *)

(* Struct Bids *)

Module Impl_core_default_Default_for_mother_Bids.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [ Ty.path "mother::AccountId"; Ty.path "u128" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α1 := M.call α0 [] in
      M.pure (Value.StructTuple "mother::Bids" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_mother_Bids.

Module Impl_core_marker_StructuralPartialEq_for_mother_Bids.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Bids.

Module Impl_core_cmp_PartialEq_for_mother_Bids.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_trait_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [ Ty.path "mother::AccountId"; Ty.path "u128" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ];
            (* Rhs *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [ Ty.path "mother::AccountId"; Ty.path "u128" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α1 := M.read self in
      let* α2 := M.read other in
      M.call α0 [ M.get_struct_tuple α1 0; M.get_struct_tuple α2 0 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Bids.

Module Impl_core_marker_StructuralEq_for_mother_Bids.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Bids.

Module Impl_core_cmp_Eq_for_mother_Bids.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [ fun γ => (M.alloc (Value.Tuple [])) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Bids.

Module Impl_core_clone_Clone_for_mother_Bids.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [ Ty.path "mother::AccountId"; Ty.path "u128" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α1 := M.read self in
      let* α2 := M.call α0 [ M.get_struct_tuple α1 0 ] in
      M.pure (Value.StructTuple "mother::Bids" [ α2 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_Bids.

(* Enum Outline *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Outline.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Outline.

Module Impl_core_cmp_PartialEq_for_mother_Outline.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 :=
          M.get_function
            "core::intrinsics::discriminant_value"
            [ Ty.path "mother::Outline" ] in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 :=
          M.get_function
            "core::intrinsics::discriminant_value"
            [ Ty.path "mother::Outline" ] in
        let* α1 := M.read other in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α0 := M.alloc (BinOp.Pure.eq α0 α1) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Outline.

Module Impl_core_marker_StructuralEq_for_mother_Outline.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Outline.

Module Impl_core_cmp_Eq_for_mother_Outline.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.pure (Value.Tuple [])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Outline.

Module Impl_core_clone_Clone_for_mother_Outline.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          self
          [
            fun γ =>
              (let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Outline::NoWinner" []));
            fun γ =>
              (let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Outline::WinnerDetected" []));
            fun γ =>
              (let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Outline::PayoutCompleted" []))
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_Outline.

(* Enum Status *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Status.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Status.

Module Impl_core_cmp_PartialEq_for_mother_Status.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 :=
          M.get_function
            "core::intrinsics::discriminant_value"
            [ Ty.path "mother::Status" ] in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 :=
          M.get_function
            "core::intrinsics::discriminant_value"
            [ Ty.path "mother::Status" ] in
        let* α1 := M.read other in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α2 :=
        LogicalOp.and
          (BinOp.Pure.eq α0 α1)
          (let* α0 := M.read self in
          let* α1 := M.read other in
          let* α2 := M.alloc (Value.Tuple [ α0; α1 ]) in
          let* α3 :=
            match_operator
              α2
              [
                fun γ =>
                  (let* γ0_0 := M.get_tuple_field_or_break_match γ 0 in
                  let* γ0_1 := M.get_tuple_field_or_break_match γ 1 in
                  let* γ0_0 := M.read γ0_0 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ0_0
                      "mother::Status::EndingPeriod"
                      0 in
                  let* __self_0 := M.alloc γ2_0 in
                  let* γ0_1 := M.read γ0_1 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ0_1
                      "mother::Status::EndingPeriod"
                      0 in
                  let* __arg1_0 := M.alloc γ2_0 in
                  let* α0 := M.read __self_0 in
                  let* α1 := M.read α0 in
                  let* α2 := M.read __arg1_0 in
                  let* α3 := M.read α2 in
                  M.alloc (BinOp.Pure.eq α1 α3));
                fun γ =>
                  (let* γ0_0 := M.get_tuple_field_or_break_match γ 0 in
                  let* γ0_1 := M.get_tuple_field_or_break_match γ 1 in
                  let* γ0_0 := M.read γ0_0 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ0_0
                      "mother::Status::Ended"
                      0 in
                  let* __self_0 := M.alloc γ2_0 in
                  let* γ0_1 := M.read γ0_1 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ0_1
                      "mother::Status::Ended"
                      0 in
                  let* __arg1_0 := M.alloc γ2_0 in
                  let* α0 :=
                    M.get_trait_method
                      "core::cmp::PartialEq"
                      "eq"
                      [
                        (* Self *) Ty.path "mother::Outline";
                        (* Rhs *) Ty.path "mother::Outline"
                      ] in
                  let* α1 := M.read __self_0 in
                  let* α2 := M.read __arg1_0 in
                  let* α3 := M.call α0 [ α1; α2 ] in
                  M.alloc α3);
                fun γ =>
                  (let* γ0_0 := M.get_tuple_field_or_break_match γ 0 in
                  let* γ0_1 := M.get_tuple_field_or_break_match γ 1 in
                  let* γ0_0 := M.read γ0_0 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ0_0
                      "mother::Status::RfDelay"
                      0 in
                  let* __self_0 := M.alloc γ2_0 in
                  let* γ0_1 := M.read γ0_1 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ0_1
                      "mother::Status::RfDelay"
                      0 in
                  let* __arg1_0 := M.alloc γ2_0 in
                  let* α0 := M.read __self_0 in
                  let* α1 := M.read α0 in
                  let* α2 := M.read __arg1_0 in
                  let* α3 := M.read α2 in
                  M.alloc (BinOp.Pure.eq α1 α3));
                fun γ => (M.alloc (Value.Bool true))
              ] in
          M.read α3) in
      let* α0 := M.alloc α2 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Status.

Module Impl_core_marker_StructuralEq_for_mother_Status.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Status.

Module Impl_core_cmp_Eq_for_mother_Status.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [
            fun γ =>
              (match_operator
                Value.DeclaredButUndefined
                [ fun γ => (M.alloc (Value.Tuple [])) ])
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Status.

Module Impl_core_clone_Clone_for_mother_Status.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          self
          [
            fun γ =>
              (let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Status::NotStarted" []));
            fun γ =>
              (let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Status::OpeningPeriod" []));
            fun γ =>
              (let* γ := M.read γ in
              let* γ1_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "mother::Status::EndingPeriod"
                  0 in
              let* __self_0 := M.alloc γ1_0 in
              let* α0 :=
                M.get_trait_method
                  "core::clone::Clone"
                  "clone"
                  [ (* Self *) Ty.path "u32" ] in
              let* α1 := M.read __self_0 in
              let* α2 := M.call α0 [ α1 ] in
              M.alloc
                (Value.StructTuple "mother::Status::EndingPeriod" [ α2 ]));
            fun γ =>
              (let* γ := M.read γ in
              let* γ1_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "mother::Status::Ended"
                  0 in
              let* __self_0 := M.alloc γ1_0 in
              let* α0 :=
                M.get_trait_method
                  "core::clone::Clone"
                  "clone"
                  [ (* Self *) Ty.path "mother::Outline" ] in
              let* α1 := M.read __self_0 in
              let* α2 := M.call α0 [ α1 ] in
              M.alloc (Value.StructTuple "mother::Status::Ended" [ α2 ]));
            fun γ =>
              (let* γ := M.read γ in
              let* γ1_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "mother::Status::RfDelay"
                  0 in
              let* __self_0 := M.alloc γ1_0 in
              let* α0 :=
                M.get_trait_method
                  "core::clone::Clone"
                  "clone"
                  [ (* Self *) Ty.path "u32" ] in
              let* α1 := M.read __self_0 in
              let* α2 := M.call α0 [ α1 ] in
              M.alloc (Value.StructTuple "mother::Status::RfDelay" [ α2 ]))
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_Status.

(* Struct Auction *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Auction.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Auction.

Module Impl_core_cmp_PartialEq_for_mother_Auction.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_trait_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.path "alloc::string::String";
            (* Rhs *) Ty.path "alloc::string::String"
          ] in
      let* α1 := M.read self in
      let* α2 := M.read other in
      let* α3 :=
        M.call
          α0
          [ M.get_struct_record α1 "name"; M.get_struct_record α2 "name" ] in
      let* α4 :=
        LogicalOp.and
          α3
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              "eq"
              [
                (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ];
                (* Rhs *) Ty.apply (Ty.path "array") [ Ty.path "u8" ]
              ] in
          let* α1 := M.read self in
          let* α2 := M.read other in
          M.call
            α0
            [ M.get_struct_record α1 "subject"; M.get_struct_record α2 "subject"
            ]) in
      let* α5 :=
        LogicalOp.and
          α4
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              "eq"
              [
                (* Self *) Ty.path "mother::Bids";
                (* Rhs *) Ty.path "mother::Bids"
              ] in
          let* α1 := M.read self in
          let* α2 := M.read other in
          M.call
            α0
            [ M.get_struct_record α1 "bids"; M.get_struct_record α2 "bids" ]) in
      let* α6 :=
        LogicalOp.and
          α5
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              "eq"
              [
                (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u32" ];
                (* Rhs *) Ty.apply (Ty.path "array") [ Ty.path "u32" ]
              ] in
          let* α1 := M.read self in
          let* α2 := M.read other in
          M.call
            α0
            [ M.get_struct_record α1 "terms"; M.get_struct_record α2 "terms"
            ]) in
      let* α7 :=
        LogicalOp.and
          α6
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              "eq"
              [
                (* Self *) Ty.path "mother::Status";
                (* Rhs *) Ty.path "mother::Status"
              ] in
          let* α1 := M.read self in
          let* α2 := M.read other in
          M.call
            α0
            [ M.get_struct_record α1 "status"; M.get_struct_record α2 "status"
            ]) in
      let* α8 :=
        LogicalOp.and
          α7
          (let* α0 := M.read self in
          let* α1 := M.read (M.get_struct_record α0 "finalized") in
          let* α2 := M.read other in
          let* α3 := M.read (M.get_struct_record α2 "finalized") in
          M.pure (BinOp.Pure.eq α1 α3)) in
      LogicalOp.and
        α8
        (let* α0 :=
          M.get_trait_method
            "core::cmp::PartialEq"
            "eq"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
              (* Rhs *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
            ] in
        let* α1 := M.read self in
        let* α2 := M.read other in
        M.call
          α0
          [ M.get_struct_record α1 "vector"; M.get_struct_record α2 "vector" ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Auction.

Module Impl_core_marker_StructuralEq_for_mother_Auction.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Auction.

Module Impl_core_cmp_Eq_for_mother_Auction.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [
            fun γ =>
              (match_operator
                Value.DeclaredButUndefined
                [
                  fun γ =>
                    (match_operator
                      Value.DeclaredButUndefined
                      [
                        fun γ =>
                          (match_operator
                            Value.DeclaredButUndefined
                            [
                              fun γ =>
                                (match_operator
                                  Value.DeclaredButUndefined
                                  [
                                    fun γ =>
                                      (match_operator
                                        Value.DeclaredButUndefined
                                        [
                                          fun γ =>
                                            (match_operator
                                              Value.DeclaredButUndefined
                                              [
                                                fun γ =>
                                                  (M.alloc (Value.Tuple []))
                                              ])
                                        ])
                                  ])
                            ])
                      ])
                ])
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Auction.

Module Impl_core_clone_Clone_for_mother_Auction.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "alloc::string::String" ] in
      let* α1 := M.read self in
      let* α2 := M.call α0 [ M.get_struct_record α1 "name" ] in
      let* α3 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ] in
      let* α4 := M.read self in
      let* α5 := M.call α3 [ M.get_struct_record α4 "subject" ] in
      let* α6 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "mother::Bids" ] in
      let* α7 := M.read self in
      let* α8 := M.call α6 [ M.get_struct_record α7 "bids" ] in
      let* α9 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u32" ] ] in
      let* α10 := M.read self in
      let* α11 := M.call α9 [ M.get_struct_record α10 "terms" ] in
      let* α12 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "mother::Status" ] in
      let* α13 := M.read self in
      let* α14 := M.call α12 [ M.get_struct_record α13 "status" ] in
      let* α15 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "bool" ] in
      let* α16 := M.read self in
      let* α17 := M.call α15 [ M.get_struct_record α16 "finalized" ] in
      let* α18 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α19 := M.read self in
      let* α20 := M.call α18 [ M.get_struct_record α19 "vector" ] in
      M.pure
        (Value.StructRecord
          "mother::Auction"
          [
            ("name", α2);
            ("subject", α5);
            ("bids", α8);
            ("terms", α11);
            ("status", α14);
            ("finalized", α17);
            ("vector", α20)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_Auction.

Module Impl_core_default_Default_for_mother_Auction.
  (*
      fn default() -> Auction {
          Auction {
              name: String::default(),
              subject: Hash::default(),
              bids: Bids::default(),
              terms: <[BlockNumber; 3]>::default(),
              status: Status::OpeningPeriod,
              finalized: false,
              vector: <Vec<u8>>::default(),
          }
      }
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "alloc::string::String" ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ] in
      let* α3 := M.call α2 [] in
      let* α4 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "mother::Bids" ] in
      let* α5 := M.call α4 [] in
      let* α6 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u32" ] ] in
      let* α7 := M.call α6 [] in
      let* α8 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α9 := M.call α8 [] in
      M.pure
        (Value.StructRecord
          "mother::Auction"
          [
            ("name", α1);
            ("subject", α3);
            ("bids", α5);
            ("terms", α7);
            ("status", Value.StructTuple "mother::Status::OpeningPeriod" []);
            ("finalized", Value.Bool false);
            ("vector", α9)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_mother_Auction.

(* Enum Failure *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Failure.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Failure")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Failure.

Module Impl_core_cmp_PartialEq_for_mother_Failure.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 :=
          M.get_function
            "core::intrinsics::discriminant_value"
            [ Ty.path "mother::Failure" ] in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 :=
          M.get_function
            "core::intrinsics::discriminant_value"
            [ Ty.path "mother::Failure" ] in
        let* α1 := M.read other in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α2 :=
        LogicalOp.and
          (BinOp.Pure.eq α0 α1)
          (let* α0 := M.read self in
          let* α1 := M.read other in
          let* α2 := M.alloc (Value.Tuple [ α0; α1 ]) in
          let* α3 :=
            match_operator
              α2
              [
                fun γ =>
                  (let* γ0_0 := M.get_tuple_field_or_break_match γ 0 in
                  let* γ0_1 := M.get_tuple_field_or_break_match γ 1 in
                  let* γ0_0 := M.read γ0_0 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ0_0
                      "mother::Failure::Revert"
                      0 in
                  let* __self_0 := M.alloc γ2_0 in
                  let* γ0_1 := M.read γ0_1 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ0_1
                      "mother::Failure::Revert"
                      0 in
                  let* __arg1_0 := M.alloc γ2_0 in
                  let* α0 :=
                    M.get_trait_method
                      "core::cmp::PartialEq"
                      "eq"
                      [
                        (* Self *) Ty.path "alloc::string::String";
                        (* Rhs *) Ty.path "alloc::string::String"
                      ] in
                  let* α1 := M.read __self_0 in
                  let* α2 := M.read __arg1_0 in
                  let* α3 := M.call α0 [ α1; α2 ] in
                  M.alloc α3);
                fun γ => (M.alloc (Value.Bool true))
              ] in
          M.read α3) in
      let* α0 := M.alloc α2 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Failure")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Failure.

Module Impl_core_marker_StructuralEq_for_mother_Failure.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Failure")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Failure.

Module Impl_core_cmp_Eq_for_mother_Failure.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [ fun γ => (M.alloc (Value.Tuple [])) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Failure")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Failure.

(* Struct AuctionEchoed *)

(* Enum Event *)

Module Impl_mother_Env.
  Definition Self : Ty.t := Ty.path "mother::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record α0 "caller")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller :
    M.IsAssociatedFunction Self "caller" caller [].
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.get_function "core::panicking::panic" [] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_emit_event :
    M.IsAssociatedFunction Self "emit_event" emit_event [].
End Impl_mother_Env.

(* Struct Mother *)

Module Impl_core_default_Default_for_mother_Mother.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "mother::Auction" ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "mother::Mapping")
                [ Ty.path "mother::AccountId"; Ty.path "u128" ]
          ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord
          "mother::Mother"
          [ ("auction", α1); ("balances", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "mother::Mother")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_mother_Mother.

Module Impl_mother_Mother.
  Definition Self : Ty.t := Ty.path "mother::Mother".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 := M.get_function "core::panicking::panic" [] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env :
    M.IsAssociatedFunction Self "init_env" init_env [].
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_associated_function (Ty.path "mother::Mother") "init_env" in
      M.call α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env [].
  
  (*
      pub fn new(auction: Auction) -> Self {
          Self {
              balances: Default::default(),
              auction,
          }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ auction ] =>
      let* auction := M.alloc auction in
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "mother::Mapping")
                [ Ty.path "mother::AccountId"; Ty.path "u128" ]
          ] in
      let* α1 := M.call α0 [] in
      let* α2 := M.read auction in
      M.pure
        (Value.StructRecord
          "mother::Mother"
          [ ("balances", α1); ("auction", α2) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new [].
  
  (*
      pub fn new_default() -> Self {
          Default::default()
      }
  *)
  Definition new_default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "mother::Mother" ] in
      M.call α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new_default :
    M.IsAssociatedFunction Self "new_default" new_default [].
  
  (*
      pub fn failed_new(fail: bool) -> Result<Self, Failure> {
          if fail {
              Err(Failure::Revert("Reverting instantiation".to_string()))
          } else {
              Ok(Default::default())
          }
      }
  *)
  Definition failed_new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ fail ] =>
      let* fail := M.alloc fail in
      let* α0 := M.read (M.use fail) in
      let* α1 :=
        if Value.is_true α0 then
          let* α0 :=
            M.get_trait_method
              "alloc::string::ToString"
              "to_string"
              [ (* Self *) Ty.path "str" ] in
          let* α1 := M.read (mk_str "Reverting instantiation") in
          let* α2 := M.call α0 [ α1 ] in
          M.alloc
            (Value.StructTuple
              "core::result::Result::Err"
              [ Value.StructTuple "mother::Failure::Revert" [ α2 ] ])
        else
          let* α0 :=
            M.get_trait_method
              "core::default::Default"
              "default"
              [ (* Self *) Ty.path "mother::Mother" ] in
          let* α1 := M.call α0 [] in
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ α1 ]) in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_failed_new :
    M.IsAssociatedFunction Self "failed_new" failed_new [].
  
  (*
      pub fn echo_auction(&mut self, auction: Auction) -> Auction {
          self.env().emit_event(Event::AuctionEchoed(AuctionEchoed {
              auction: auction.clone(),
          }));
          auction
      }
  *)
  Definition echo_auction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; auction ] =>
      let* self := M.alloc self in
      let* auction := M.alloc auction in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "mother::Env") "emit_event" in
        let* α1 := M.get_associated_function (Ty.path "mother::Mother") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.get_trait_method
            "core::clone::Clone"
            "clone"
            [ (* Self *) Ty.path "mother::Auction" ] in
        let* α6 := M.call α5 [ auction ] in
        let* α7 :=
          M.call
            α0
            [
              α4;
              Value.StructTuple
                "mother::Event::AuctionEchoed"
                [ Value.StructRecord "mother::AuctionEchoed" [ ("auction", α6) ]
                ]
            ] in
        M.alloc α7 in
      M.read auction
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_echo_auction :
    M.IsAssociatedFunction Self "echo_auction" echo_auction [].
  
  (*
      pub fn revert_or_trap(&mut self, fail: Option<Failure>) -> Result<(), Failure> {
          match fail {
              Some(Failure::Revert(_)) => {
                  Err(Failure::Revert("Reverting on user demand!".to_string()))
              }
              Some(Failure::Panic) => {
                  panic!("Trapping on user demand!")
              }
              None => Ok(()),
          }
      }
  *)
  Definition revert_or_trap (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; fail ] =>
      let* self := M.alloc self in
      let* fail := M.alloc fail in
      let* α0 :=
        match_operator
          fail
          [
            fun γ =>
              (let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::option::Option::Some"
                  0 in
              let* γ1_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ0_0
                  "mother::Failure::Revert"
                  0 in
              let* α0 :=
                M.get_trait_method
                  "alloc::string::ToString"
                  "to_string"
                  [ (* Self *) Ty.path "str" ] in
              let* α1 := M.read (mk_str "Reverting on user demand!") in
              let* α2 := M.call α0 [ α1 ] in
              M.alloc
                (Value.StructTuple
                  "core::result::Result::Err"
                  [ Value.StructTuple "mother::Failure::Revert" [ α2 ] ]));
            fun γ =>
              (let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::option::Option::Some"
                  0 in
              let* α0 :=
                M.get_function
                  "std::panicking::begin_panic"
                  [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ] in
              let* α1 := M.read (mk_str "Trapping on user demand!") in
              let* α2 := M.call α0 [ α1 ] in
              let* α3 := M.never_to_any α2 in
              M.alloc α3);
            fun γ =>
              (M.alloc
                (Value.StructTuple
                  "core::result::Result::Ok"
                  [ Value.Tuple [] ]))
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_revert_or_trap :
    M.IsAssociatedFunction Self "revert_or_trap" revert_or_trap [].
  
  (*
      pub fn debug_log(&mut self, _message: String) {
          println!("debug_log: {}", _message);
      }
  *)
  Definition debug_log (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _message ] =>
      let* self := M.alloc self in
      let* _message := M.alloc _message in
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_v1" in
          let* α2 := M.read (mk_str "debug_log: ") in
          let* α3 := M.read (mk_str "
") in
          let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
          let* α5 :=
            M.get_associated_function
              (Ty.path "core::fmt::rt::Argument")
              "new_display" in
          let* α6 := M.call α5 [ _message ] in
          let* α7 := M.alloc (Value.Array [ α6 ]) in
          let* α8 :=
            M.call
              α1
              [
                M.pointer_coercion (* Unsize *) α4;
                M.pointer_coercion (* Unsize *) α7
              ] in
          let* α9 := M.call α0 [ α8 ] in
          M.alloc α9 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_debug_log :
    M.IsAssociatedFunction Self "debug_log" debug_log [].
End Impl_mother_Mother.
