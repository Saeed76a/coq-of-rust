(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Mapping *)

Module Impl_core_default_Default_for_mother_Mapping_K_V.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ K ] ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ V ] ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord "mother::Mapping" [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.apply (Ty.path "mother::Mapping") [ K; V ])
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [ K; V ].
End Impl_core_default_Default_for_mother_Mapping_K_V.

Module Impl_mother_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "mother::Mapping") [ K; V ].
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "get" get [ K; V ].
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Definition insert (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key; _value ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "insert" insert [ K; V ].
End Impl_mother_Mapping_K_V.

(* Struct AccountId *)

Module Impl_core_default_Default_for_mother_AccountId.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α1 := M.call α0 [] in
      M.pure (Value.StructTuple "mother::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_mother_AccountId.

Module Impl_core_clone_Clone_for_mother_AccountId.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator Value.DeclaredButUndefined [ fun γ => (M.read self) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_AccountId.

Module Impl_core_marker_Copy_for_mother_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_Copy_for_mother_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_mother_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId.

Module Impl_core_cmp_PartialEq_for_mother_AccountId.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.var "BinOp::Pure::eq" in
      let* α1 := M.var "mother::AccountId::Get_0" in
      let* α2 := M.read self in
      let* α3 := M.read (α1 α2) in
      let* α4 := M.var "mother::AccountId::Get_0" in
      let* α5 := M.read other in
      let* α6 := M.read (α4 α5) in
      M.pure (α0 α3 α6)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_AccountId.

Module Impl_core_marker_StructuralEq_for_mother_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_AccountId.

Module Impl_core_cmp_Eq_for_mother_AccountId.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator Value.DeclaredButUndefined [ fun γ => (M.alloc tt) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_AccountId.

Axiom Balance : (Ty.path "mother::Balance") = (Ty.path "u128").

Axiom BlockNumber : (Ty.path "mother::BlockNumber") = (Ty.path "u32").

Axiom Hash :
  (Ty.path "mother::Hash") = (Ty.apply (Ty.path "array") [ Ty.path "u8" ]).

(* Struct Env *)

(* Struct Bids *)

Module Impl_core_default_Default_for_mother_Bids.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [ Ty.path "mother::AccountId"; Ty.path "u128" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α1 := M.call α0 [] in
      M.pure (Value.StructTuple "mother::Bids" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_mother_Bids.

Module Impl_core_marker_StructuralPartialEq_for_mother_Bids.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Bids.

Module Impl_core_cmp_PartialEq_for_mother_Bids.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [ Ty.path "mother::AccountId"; Ty.path "u128" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ];
            (* Rhs *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [ Ty.path "mother::AccountId"; Ty.path "u128" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α1 := M.var "mother::Bids::Get_0" in
      let* α2 := M.read self in
      let* α3 := M.var "mother::Bids::Get_0" in
      let* α4 := M.read other in
      M.call α0 [ α1 α2; α3 α4 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Bids.

Module Impl_core_marker_StructuralEq_for_mother_Bids.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Bids.

Module Impl_core_cmp_Eq_for_mother_Bids.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator Value.DeclaredButUndefined [ fun γ => (M.alloc tt) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Bids.

Module Impl_core_clone_Clone_for_mother_Bids.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_method
          "core::clone::Clone"
          "clone"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [ Ty.path "mother::AccountId"; Ty.path "u128" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α1 := M.var "mother::Bids::Get_0" in
      let* α2 := M.read self in
      let* α3 := M.call α0 [ α1 α2 ] in
      M.pure (Value.StructTuple "mother::Bids" [ α3 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::Bids")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_Bids.

(* Enum Outline *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Outline.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Outline.

Module Impl_core_cmp_PartialEq_for_mother_Outline.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 := M.var "core::intrinsics::discriminant_value" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 := M.var "core::intrinsics::discriminant_value" in
        let* α1 := M.read other in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.var "BinOp::Pure::eq" in
      let* α1 := M.read __self_tag in
      let* α2 := M.read __arg1_tag in
      let* α0 := M.alloc (α0 α1 α2) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Outline.

Module Impl_core_marker_StructuralEq_for_mother_Outline.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Outline.

Module Impl_core_cmp_Eq_for_mother_Outline.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Outline.

Module Impl_core_clone_Clone_for_mother_Outline.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Outline.NoWinner => M.alloc mother.Outline.NoWinner
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Outline.WinnerDetected =>
                M.alloc mother.Outline.WinnerDetected
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Outline.PayoutCompleted =>
                M.alloc mother.Outline.PayoutCompleted
              | _ => M.break_match 
              end)
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::Outline")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_Outline.

(* Enum Status *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Status.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Status.

Module Impl_core_cmp_PartialEq_for_mother_Status.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 := M.var "core::intrinsics::discriminant_value" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 := M.var "core::intrinsics::discriminant_value" in
        let* α1 := M.read other in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.var "BinOp::Pure::and" in
      let* α1 := M.var "BinOp::Pure::eq" in
      let* α2 := M.read __self_tag in
      let* α3 := M.read __arg1_tag in
      let* α4 := M.read self in
      let* α5 := M.read other in
      let* α6 := M.alloc (α4, α5) in
      let* α7 :=
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* γ0_0 :=
                  let* α0 := M.read γ0_0 in
                  M.pure (deref α0) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Status.EndingPeriod _ =>
                  let* γ2_0 :=
                    let* α0 := M.var "mother::Status::Get_EndingPeriod_0" in
                    M.pure (α0 γ0_0) in
                  let* __self_0 := M.alloc (borrow γ2_0) in
                  let* γ0_1 :=
                    let* α0 := M.read γ0_1 in
                    M.pure (deref α0) in
                  let* α0 := M.read γ0_1 in
                  match α0 with
                  | mother.Status.EndingPeriod _ =>
                    let* γ2_0 :=
                      let* α0 := M.var "mother::Status::Get_EndingPeriod_0" in
                      M.pure (α0 γ0_1) in
                    let* __arg1_0 := M.alloc (borrow γ2_0) in
                    let* α0 := M.var "BinOp::Pure::eq" in
                    let* α1 := M.read __self_0 in
                    let* α2 := M.read α1 in
                    let* α3 := M.read __arg1_0 in
                    let* α4 := M.read α3 in
                    M.alloc (α0 α2 α4)
                  | _ => M.break_match 
                  end
                | _ => M.break_match 
                end
              end);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* γ0_0 :=
                  let* α0 := M.read γ0_0 in
                  M.pure (deref α0) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Status.Ended _ =>
                  let* γ2_0 :=
                    let* α0 := M.var "mother::Status::Get_Ended_0" in
                    M.pure (α0 γ0_0) in
                  let* __self_0 := M.alloc (borrow γ2_0) in
                  let* γ0_1 :=
                    let* α0 := M.read γ0_1 in
                    M.pure (deref α0) in
                  let* α0 := M.read γ0_1 in
                  match α0 with
                  | mother.Status.Ended _ =>
                    let* γ2_0 :=
                      let* α0 := M.var "mother::Status::Get_Ended_0" in
                      M.pure (α0 γ0_1) in
                    let* __arg1_0 := M.alloc (borrow γ2_0) in
                    let* α0 :=
                      M.get_method
                        "core::cmp::PartialEq"
                        "eq"
                        [
                          (* Self *) Ty.path "mother::Outline";
                          (* Rhs *) Ty.path "mother::Outline"
                        ] in
                    let* α1 := M.read __self_0 in
                    let* α2 := M.read __arg1_0 in
                    let* α3 := M.call α0 [ α1; α2 ] in
                    M.alloc α3
                  | _ => M.break_match 
                  end
                | _ => M.break_match 
                end
              end);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* γ0_0 :=
                  let* α0 := M.read γ0_0 in
                  M.pure (deref α0) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Status.RfDelay _ =>
                  let* γ2_0 :=
                    let* α0 := M.var "mother::Status::Get_RfDelay_0" in
                    M.pure (α0 γ0_0) in
                  let* __self_0 := M.alloc (borrow γ2_0) in
                  let* γ0_1 :=
                    let* α0 := M.read γ0_1 in
                    M.pure (deref α0) in
                  let* α0 := M.read γ0_1 in
                  match α0 with
                  | mother.Status.RfDelay _ =>
                    let* γ2_0 :=
                      let* α0 := M.var "mother::Status::Get_RfDelay_0" in
                      M.pure (α0 γ0_1) in
                    let* __arg1_0 := M.alloc (borrow γ2_0) in
                    let* α0 := M.var "BinOp::Pure::eq" in
                    let* α1 := M.read __self_0 in
                    let* α2 := M.read α1 in
                    let* α3 := M.read __arg1_0 in
                    let* α4 := M.read α3 in
                    M.alloc (α0 α2 α4)
                  | _ => M.break_match 
                  end
                | _ => M.break_match 
                end
              end);
            fun γ => (M.alloc true)
          ] in
      let* α8 := M.read α7 in
      let* α0 := M.alloc (α0 (α1 α2 α3) α8) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Status.

Module Impl_core_marker_StructuralEq_for_mother_Status.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Status.

Module Impl_core_cmp_Eq_for_mother_Status.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [
            fun γ =>
              (match_operator
                Value.DeclaredButUndefined
                [ fun γ => (M.alloc tt) ])
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Status.

Module Impl_core_clone_Clone_for_mother_Status.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.NotStarted => M.alloc mother.Status.NotStarted
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.OpeningPeriod =>
                M.alloc mother.Status.OpeningPeriod
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.EndingPeriod _ =>
                let* γ1_0 :=
                  let* α0 := M.var "mother::Status::Get_EndingPeriod_0" in
                  M.pure (α0 γ) in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :=
                  M.get_method
                    "core::clone::Clone"
                    "clone"
                    [ (* Self *) Ty.path "u32" ] in
                let* α1 := M.read __self_0 in
                let* α2 := M.call α0 [ α1 ] in
                M.alloc
                  (Value.StructTuple "mother::Status::EndingPeriod" [ α2 ])
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.Ended _ =>
                let* γ1_0 :=
                  let* α0 := M.var "mother::Status::Get_Ended_0" in
                  M.pure (α0 γ) in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :=
                  M.get_method
                    "core::clone::Clone"
                    "clone"
                    [ (* Self *) Ty.path "mother::Outline" ] in
                let* α1 := M.read __self_0 in
                let* α2 := M.call α0 [ α1 ] in
                M.alloc (Value.StructTuple "mother::Status::Ended" [ α2 ])
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.RfDelay _ =>
                let* γ1_0 :=
                  let* α0 := M.var "mother::Status::Get_RfDelay_0" in
                  M.pure (α0 γ) in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :=
                  M.get_method
                    "core::clone::Clone"
                    "clone"
                    [ (* Self *) Ty.path "u32" ] in
                let* α1 := M.read __self_0 in
                let* α2 := M.call α0 [ α1 ] in
                M.alloc (Value.StructTuple "mother::Status::RfDelay" [ α2 ])
              | _ => M.break_match 
              end)
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::Status")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_Status.

(* Struct Auction *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Auction.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Auction.

Module Impl_core_cmp_PartialEq_for_mother_Auction.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.var "BinOp::Pure::and" in
      let* α1 := M.var "BinOp::Pure::and" in
      let* α2 := M.var "BinOp::Pure::and" in
      let* α3 := M.var "BinOp::Pure::and" in
      let* α4 := M.var "BinOp::Pure::and" in
      let* α5 := M.var "BinOp::Pure::and" in
      let* α6 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.path "alloc::string::String";
            (* Rhs *) Ty.path "alloc::string::String"
          ] in
      let* α7 := M.var "mother::Auction::Get_name" in
      let* α8 := M.read self in
      let* α9 := M.var "mother::Auction::Get_name" in
      let* α10 := M.read other in
      let* α11 := M.call α6 [ α7 α8; α9 α10 ] in
      let* α12 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ];
            (* Rhs *) Ty.apply (Ty.path "array") [ Ty.path "u8" ]
          ] in
      let* α13 := M.var "mother::Auction::Get_subject" in
      let* α14 := M.read self in
      let* α15 := M.var "mother::Auction::Get_subject" in
      let* α16 := M.read other in
      let* α17 := M.call α12 [ α13 α14; α15 α16 ] in
      let* α18 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [ (* Self *) Ty.path "mother::Bids"; (* Rhs *) Ty.path "mother::Bids"
          ] in
      let* α19 := M.var "mother::Auction::Get_bids" in
      let* α20 := M.read self in
      let* α21 := M.var "mother::Auction::Get_bids" in
      let* α22 := M.read other in
      let* α23 := M.call α18 [ α19 α20; α21 α22 ] in
      let* α24 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u32" ];
            (* Rhs *) Ty.apply (Ty.path "array") [ Ty.path "u32" ]
          ] in
      let* α25 := M.var "mother::Auction::Get_terms" in
      let* α26 := M.read self in
      let* α27 := M.var "mother::Auction::Get_terms" in
      let* α28 := M.read other in
      let* α29 := M.call α24 [ α25 α26; α27 α28 ] in
      let* α30 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.path "mother::Status";
            (* Rhs *) Ty.path "mother::Status"
          ] in
      let* α31 := M.var "mother::Auction::Get_status" in
      let* α32 := M.read self in
      let* α33 := M.var "mother::Auction::Get_status" in
      let* α34 := M.read other in
      let* α35 := M.call α30 [ α31 α32; α33 α34 ] in
      let* α36 := M.var "BinOp::Pure::eq" in
      let* α37 := M.var "mother::Auction::Get_finalized" in
      let* α38 := M.read self in
      let* α39 := M.read (α37 α38) in
      let* α40 := M.var "mother::Auction::Get_finalized" in
      let* α41 := M.read other in
      let* α42 := M.read (α40 α41) in
      let* α43 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
            (* Rhs *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α44 := M.var "mother::Auction::Get_vector" in
      let* α45 := M.read self in
      let* α46 := M.var "mother::Auction::Get_vector" in
      let* α47 := M.read other in
      let* α48 := M.call α43 [ α44 α45; α46 α47 ] in
      M.pure (α0 (α1 (α2 (α3 (α4 (α5 α11 α17) α23) α29) α35) (α36 α39 α42)) α48)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Auction.

Module Impl_core_marker_StructuralEq_for_mother_Auction.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Auction.

Module Impl_core_cmp_Eq_for_mother_Auction.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [
            fun γ =>
              (match_operator
                Value.DeclaredButUndefined
                [
                  fun γ =>
                    (match_operator
                      Value.DeclaredButUndefined
                      [
                        fun γ =>
                          (match_operator
                            Value.DeclaredButUndefined
                            [
                              fun γ =>
                                (match_operator
                                  Value.DeclaredButUndefined
                                  [
                                    fun γ =>
                                      (match_operator
                                        Value.DeclaredButUndefined
                                        [
                                          fun γ =>
                                            (match_operator
                                              Value.DeclaredButUndefined
                                              [ fun γ => (M.alloc tt) ])
                                        ])
                                  ])
                            ])
                      ])
                ])
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Auction.

Module Impl_core_clone_Clone_for_mother_Auction.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "alloc::string::String" ] in
      let* α1 := M.var "mother::Auction::Get_name" in
      let* α2 := M.read self in
      let* α3 := M.call α0 [ α1 α2 ] in
      let* α4 :=
        M.get_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ] in
      let* α5 := M.var "mother::Auction::Get_subject" in
      let* α6 := M.read self in
      let* α7 := M.call α4 [ α5 α6 ] in
      let* α8 :=
        M.get_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "mother::Bids" ] in
      let* α9 := M.var "mother::Auction::Get_bids" in
      let* α10 := M.read self in
      let* α11 := M.call α8 [ α9 α10 ] in
      let* α12 :=
        M.get_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u32" ] ] in
      let* α13 := M.var "mother::Auction::Get_terms" in
      let* α14 := M.read self in
      let* α15 := M.call α12 [ α13 α14 ] in
      let* α16 :=
        M.get_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "mother::Status" ] in
      let* α17 := M.var "mother::Auction::Get_status" in
      let* α18 := M.read self in
      let* α19 := M.call α16 [ α17 α18 ] in
      let* α20 :=
        M.get_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "bool" ] in
      let* α21 := M.var "mother::Auction::Get_finalized" in
      let* α22 := M.read self in
      let* α23 := M.call α20 [ α21 α22 ] in
      let* α24 :=
        M.get_method
          "core::clone::Clone"
          "clone"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α25 := M.var "mother::Auction::Get_vector" in
      let* α26 := M.read self in
      let* α27 := M.call α24 [ α25 α26 ] in
      M.pure
        (Value.StructRecord
          "mother::Auction"
          [
            ("name", α3);
            ("subject", α7);
            ("bids", α11);
            ("terms", α15);
            ("status", α19);
            ("finalized", α23);
            ("vector", α27)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_mother_Auction.

Module Impl_core_default_Default_for_mother_Auction.
  (*
      fn default() -> Auction {
          Auction {
              name: String::default(),
              subject: Hash::default(),
              bids: Bids::default(),
              terms: <[BlockNumber; 3]>::default(),
              status: Status::OpeningPeriod,
              finalized: false,
              vector: <Vec<u8>>::default(),
          }
      }
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "alloc::string::String" ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ] in
      let* α3 := M.call α2 [] in
      let* α4 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "mother::Bids" ] in
      let* α5 := M.call α4 [] in
      let* α6 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u32" ] ] in
      let* α7 := M.call α6 [] in
      let* α8 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α9 := M.call α8 [] in
      M.pure
        (Value.StructRecord
          "mother::Auction"
          [
            ("name", α1);
            ("subject", α3);
            ("bids", α5);
            ("terms", α7);
            ("status", mother.Status.OpeningPeriod);
            ("finalized", false);
            ("vector", α9)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "mother::Auction")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_mother_Auction.

(* Enum Failure *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Failure.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "mother::Failure")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Failure.

Module Impl_core_cmp_PartialEq_for_mother_Failure.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 := M.var "core::intrinsics::discriminant_value" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 := M.var "core::intrinsics::discriminant_value" in
        let* α1 := M.read other in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.var "BinOp::Pure::and" in
      let* α1 := M.var "BinOp::Pure::eq" in
      let* α2 := M.read __self_tag in
      let* α3 := M.read __arg1_tag in
      let* α4 := M.read self in
      let* α5 := M.read other in
      let* α6 := M.alloc (α4, α5) in
      let* α7 :=
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* γ0_0 :=
                  let* α0 := M.read γ0_0 in
                  M.pure (deref α0) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Failure.Revert _ =>
                  let* γ2_0 :=
                    let* α0 := M.var "mother::Failure::Get_Revert_0" in
                    M.pure (α0 γ0_0) in
                  let* __self_0 := M.alloc (borrow γ2_0) in
                  let* γ0_1 :=
                    let* α0 := M.read γ0_1 in
                    M.pure (deref α0) in
                  let* α0 := M.read γ0_1 in
                  match α0 with
                  | mother.Failure.Revert _ =>
                    let* γ2_0 :=
                      let* α0 := M.var "mother::Failure::Get_Revert_0" in
                      M.pure (α0 γ0_1) in
                    let* __arg1_0 := M.alloc (borrow γ2_0) in
                    let* α0 :=
                      M.get_method
                        "core::cmp::PartialEq"
                        "eq"
                        [
                          (* Self *) Ty.path "alloc::string::String";
                          (* Rhs *) Ty.path "alloc::string::String"
                        ] in
                    let* α1 := M.read __self_0 in
                    let* α2 := M.read __arg1_0 in
                    let* α3 := M.call α0 [ α1; α2 ] in
                    M.alloc α3
                  | _ => M.break_match 
                  end
                | _ => M.break_match 
                end
              end);
            fun γ => (M.alloc true)
          ] in
      let* α8 := M.read α7 in
      let* α0 := M.alloc (α0 (α1 α2 α3) α8) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "mother::Failure")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_mother_Failure.

Module Impl_core_marker_StructuralEq_for_mother_Failure.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "mother::Failure")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_mother_Failure.

Module Impl_core_cmp_Eq_for_mother_Failure.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator Value.DeclaredButUndefined [ fun γ => (M.alloc tt) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "mother::Failure")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_mother_Failure.

(* Struct AuctionEchoed *)

(* Enum Event *)

Module Impl_mother_Env.
  Definition Self : Ty.t := Ty.path "mother::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.var "mother::Env::Get_caller" in
      let* α1 := M.read self in
      M.read (α0 α1)
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller :
    M.IsAssociatedFunction Self "caller" caller [].
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_emit_event :
    M.IsAssociatedFunction Self "emit_event" emit_event [].
End Impl_mother_Env.

(* Struct Mother *)

Module Impl_core_default_Default_for_mother_Mother.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "mother::Auction" ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "mother::Mapping")
                [ Ty.path "mother::AccountId"; Ty.path "u128" ]
          ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord
          "mother::Mother"
          [ ("auction", α1); ("balances", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "mother::Mother")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_mother_Mother.

Module Impl_mother_Mother.
  Definition Self : Ty.t := Ty.path "mother::Mother".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env :
    M.IsAssociatedFunction Self "init_env" init_env [].
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.call (Ty.path "mother::Mother")::["init_env"] []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env [].
  
  (*
      pub fn new(auction: Auction) -> Self {
          Self {
              balances: Default::default(),
              auction,
          }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ auction ] =>
      let* auction := M.alloc auction in
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "mother::Mapping")
                [ Ty.path "mother::AccountId"; Ty.path "u128" ]
          ] in
      let* α1 := M.call α0 [] in
      let* α2 := M.read auction in
      M.pure
        (Value.StructRecord
          "mother::Mother"
          [ ("balances", α1); ("auction", α2) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new [].
  
  (*
      pub fn new_default() -> Self {
          Default::default()
      }
  *)
  Definition new_default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "mother::Mother" ] in
      M.call α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new_default :
    M.IsAssociatedFunction Self "new_default" new_default [].
  
  (*
      pub fn failed_new(fail: bool) -> Result<Self, Failure> {
          if fail {
              Err(Failure::Revert("Reverting instantiation".to_string()))
          } else {
              Ok(Default::default())
          }
      }
  *)
  Definition failed_new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ fail ] =>
      let* fail := M.alloc fail in
      let* α0 := M.read (use fail) in
      let* α1 :=
        if α0 then
          let* α0 :=
            M.get_method
              "alloc::string::ToString"
              "to_string"
              [ (* Self *) Ty.path "str" ] in
          let* α1 := M.read (mk_str "Reverting instantiation") in
          let* α2 := M.call α0 [ α1 ] in
          M.alloc
            (Value.StructTuple
              "core::result::Result::Err"
              [ Value.StructTuple "mother::Failure::Revert" [ α2 ] ])
        else
          let* α0 :=
            M.get_method
              "core::default::Default"
              "default"
              [ (* Self *) Ty.path "mother::Mother" ] in
          let* α1 := M.call α0 [] in
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ α1 ]) in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_failed_new :
    M.IsAssociatedFunction Self "failed_new" failed_new [].
  
  (*
      pub fn echo_auction(&mut self, auction: Auction) -> Auction {
          self.env().emit_event(Event::AuctionEchoed(AuctionEchoed {
              auction: auction.clone(),
          }));
          auction
      }
  *)
  Definition echo_auction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; auction ] =>
      let* self := M.alloc self in
      let* auction := M.alloc auction in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.call (Ty.path "mother::Mother")::["env"] [ α0 ] in
        let* α2 := M.alloc α1 in
        let* α3 :=
          M.get_method
            "core::clone::Clone"
            "clone"
            [ (* Self *) Ty.path "mother::Auction" ] in
        let* α4 := M.call α3 [ auction ] in
        let* α5 :=
          M.call
            (Ty.path "mother::Env")::["emit_event"]
            [
              α2;
              Value.StructTuple
                "mother::Event::AuctionEchoed"
                [ Value.StructRecord "mother::AuctionEchoed" [ ("auction", α4) ]
                ]
            ] in
        M.alloc α5 in
      M.read auction
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_echo_auction :
    M.IsAssociatedFunction Self "echo_auction" echo_auction [].
  
  (*
      pub fn revert_or_trap(&mut self, fail: Option<Failure>) -> Result<(), Failure> {
          match fail {
              Some(Failure::Revert(_)) => {
                  Err(Failure::Revert("Reverting on user demand!".to_string()))
              }
              Some(Failure::Panic) => {
                  panic!("Trapping on user demand!")
              }
              None => Ok(()),
          }
      }
  *)
  Definition revert_or_trap (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; fail ] =>
      let* self := M.alloc self in
      let* fail := M.alloc fail in
      let* α0 :=
        match_operator
          fail
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.option.Option.Some _ =>
                let* γ0_0 :=
                  let* α0 := M.var "core::option::Option::Get_Some_0" in
                  M.pure (α0 γ) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Failure.Revert _ =>
                  let* γ1_0 :=
                    let* α0 := M.var "mother::Failure::Get_Revert_0" in
                    M.pure (α0 γ0_0) in
                  let* α0 :=
                    M.get_method
                      "alloc::string::ToString"
                      "to_string"
                      [ (* Self *) Ty.path "str" ] in
                  let* α1 := M.read (mk_str "Reverting on user demand!") in
                  let* α2 := M.call α0 [ α1 ] in
                  M.alloc
                    (Value.StructTuple
                      "core::result::Result::Err"
                      [ Value.StructTuple "mother::Failure::Revert" [ α2 ] ])
                | _ => M.break_match 
                end
              | _ => M.break_match 
              end);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.option.Option.Some _ =>
                let* γ0_0 :=
                  let* α0 := M.var "core::option::Option::Get_Some_0" in
                  M.pure (α0 γ) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Failure.Panic =>
                  let* α0 := M.var "std::panicking::begin_panic" in
                  let* α1 := M.read (mk_str "Trapping on user demand!") in
                  let* α2 := M.call α0 [ α1 ] in
                  let* α3 := never_to_any α2 in
                  M.alloc α3
                | _ => M.break_match 
                end
              | _ => M.break_match 
              end);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.option.Option.None =>
                M.alloc (Value.StructTuple "core::result::Result::Ok" [ tt ])
              | _ => M.break_match 
              end)
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_revert_or_trap :
    M.IsAssociatedFunction Self "revert_or_trap" revert_or_trap [].
  
  (*
      pub fn debug_log(&mut self, _message: String) {
          println!("debug_log: {}", _message);
      }
  *)
  Definition debug_log (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _message ] =>
      let* self := M.alloc self in
      let* _message := M.alloc _message in
      let* _ :=
        let* _ :=
          let* α0 := M.var "std::io::stdio::_print" in
          let* α1 := M.read (mk_str "debug_log: ") in
          let* α2 := M.read (mk_str "
") in
          let* α3 := M.alloc [ α1; α2 ] in
          let* α4 :=
            M.call
              (Ty.path "core::fmt::rt::Argument")::["new_display"]
              [ _message ] in
          let* α5 := M.alloc [ α4 ] in
          let* α6 :=
            M.call
              (Ty.path "core::fmt::Arguments")::["new_v1"]
              [ pointer_coercion "Unsize" α3; pointer_coercion "Unsize" α5 ] in
          let* α7 := M.call α0 [ α6 ] in
          M.alloc α7 in
        M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_debug_log :
    M.IsAssociatedFunction Self "debug_log" debug_log [].
End Impl_mother_Mother.
