(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_mother_Mapping_K_V.
Section Impl_core_default_Default_for_mother_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Mapping") [K; V].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :
          Ty.function [] (Ty.apply (Ty.path "core::marker::PhantomData") [K]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [K])
            (Trait := ℐ))) in
      let* α1 : Ty.apply (Ty.path "core::marker::PhantomData") [K] :=
        M.call α0 in
      let* α2 :
          Ty.function [] (Ty.apply (Ty.path "core::marker::PhantomData") [V]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [V])
            (Trait := ℐ))) in
      let* α3 : Ty.apply (Ty.path "core::marker::PhantomData") [V] :=
        M.call α2 in
      M.pure {| mother.Mapping._key := α1; mother.Mapping._value := α3; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_mother_Mapping_K_V.
End Impl_core_default_Default_for_mother_Mapping_K_V.

Module  Impl_mother_Mapping_K_V.
Section Impl_mother_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := Ty.apply (Ty.path "mother::Mapping") [K; V].
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Definition insert (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _key; _value] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_insert : Instance.t := {
    Notations.double_colon := insert;
  }.
End Impl_mother_Mapping_K_V.
End Impl_mother_Mapping_K_V.



Module  Impl_core_default_Default_for_mother_AccountId.
Section Impl_core_default_Default_for_mother_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::AccountId") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.function [] (Ty.path "u128") :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ℐ))) in
      let* α1 : Ty.path "u128" := M.call α0 in
      M.pure (mother.AccountId.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_mother_AccountId.
End Impl_core_default_Default_for_mother_AccountId.

Module  Impl_core_clone_Clone_for_mother_AccountId.
Section Impl_core_clone_Clone_for_mother_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::AccountId") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.apply (Ty.path "mother::AccountId") [] :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun γ =>
              (let* α0 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "mother::AccountId") []] :=
                M.read self in
              M.pure (deref α0)) :
              Ty.apply (Ty.path "mother::AccountId") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_mother_AccountId.
End Impl_core_clone_Clone_for_mother_AccountId.

Module  Impl_core_marker_Copy_for_mother_AccountId.
Section Impl_core_marker_Copy_for_mother_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_mother_AccountId.
End Impl_core_marker_Copy_for_mother_AccountId.

Module  Impl_core_marker_StructuralPartialEq_for_mother_AccountId.
Section Impl_core_marker_StructuralPartialEq_for_mother_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId.
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId.

Module  Impl_core_cmp_PartialEq_for_mother_AccountId.
Section Impl_core_cmp_PartialEq_for_mother_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::AccountId") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "mother::AccountId") []] :=
        M.read self in
      let* α1 : Ty.path "u128" := M.read (mother.AccountId.Get_0 (deref α0)) in
      let* α2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "mother::AccountId") []] :=
        M.read other in
      let* α3 : Ty.path "u128" := M.read (mother.AccountId.Get_0 (deref α2)) in
      M.pure (BinOp.Pure.eq α1 α3)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_mother_AccountId.
End Impl_core_cmp_PartialEq_for_mother_AccountId.

Module  Impl_core_marker_StructuralEq_for_mother_AccountId.
Section Impl_core_marker_StructuralEq_for_mother_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_mother_AccountId.
End Impl_core_marker_StructuralEq_for_mother_AccountId.

Module  Impl_core_cmp_Eq_for_mother_AccountId.
Section Impl_core_cmp_Eq_for_mother_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::AccountId") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.tuple :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply (Ty.path "core::cmp::AssertParamIsEq") [Ty.path "u128"]))
          [ fun γ => (M.alloc tt) : Ty.path "unit" ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_mother_AccountId.
End Impl_core_cmp_Eq_for_mother_AccountId.

Axiom Balance : Ty.path "u128".

Axiom BlockNumber : Ty.path "u32".

Axiom Hash : Ty.apply (Ty.path "array") [Ty.path "u8"].





Module  Impl_core_default_Default_for_mother_Bids.
Section Impl_core_default_Default_for_mother_Bids.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Bids") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :
          Ty.function
            []
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply
                      (Ty.path "core::option::Option")
                      [Ty.tuple
                          (Ty.apply (Ty.path "mother::AccountId") [])
                          (Ty.path "u128")];
                    Ty.apply (Ty.path "alloc::alloc::Global") []];
                Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.tuple
                            (Ty.apply (Ty.path "mother::AccountId") [])
                            (Ty.path "u128")];
                      Ty.apply (Ty.path "alloc::alloc::Global") []];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply
                    (Ty.path "core::option::Option")
                    [Ty.tuple
                        (Ty.apply (Ty.path "mother::AccountId") [])
                        (Ty.path "u128")];
                  Ty.apply (Ty.path "alloc::alloc::Global") []];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call α0 in
      M.pure (mother.Bids.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_mother_Bids.
End Impl_core_default_Default_for_mother_Bids.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Bids.
Section Impl_core_marker_StructuralPartialEq_for_mother_Bids.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Bids") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_mother_Bids.
End Impl_core_marker_StructuralPartialEq_for_mother_Bids.

Module  Impl_core_cmp_PartialEq_for_mother_Bids.
Section Impl_core_cmp_PartialEq_for_mother_Bids.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Bids") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.tuple
                                (Ty.apply (Ty.path "mother::AccountId") [])
                                (Ty.path "u128")];
                          Ty.apply (Ty.path "alloc::alloc::Global") []];
                      Ty.apply (Ty.path "alloc::alloc::Global") []]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.tuple
                                (Ty.apply (Ty.path "mother::AccountId") [])
                                (Ty.path "u128")];
                          Ty.apply (Ty.path "alloc::alloc::Global") []];
                      Ty.apply (Ty.path "alloc::alloc::Global") []]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.tuple
                            (Ty.apply (Ty.path "mother::AccountId") [])
                            (Ty.path "u128")];
                      Ty.apply (Ty.path "alloc::alloc::Global") []];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Rhs :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.tuple
                            (Ty.apply (Ty.path "mother::AccountId") [])
                            (Ty.path "u128")];
                      Ty.apply (Ty.path "alloc::alloc::Global") []];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Bids") []] :=
        M.read self in
      let* α2 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Bids") []] :=
        M.read other in
      M.call
        (α0
          (borrow (mother.Bids.Get_0 (deref α1)))
          (borrow (mother.Bids.Get_0 (deref α2))))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_mother_Bids.
End Impl_core_cmp_PartialEq_for_mother_Bids.

Module  Impl_core_marker_StructuralEq_for_mother_Bids.
Section Impl_core_marker_StructuralEq_for_mother_Bids.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Bids") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_mother_Bids.
End Impl_core_marker_StructuralEq_for_mother_Bids.

Module  Impl_core_cmp_Eq_for_mother_Bids.
Section Impl_core_cmp_Eq_for_mother_Bids.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Bids") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.tuple :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::cmp::AssertParamIsEq")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.tuple
                                (Ty.apply (Ty.path "mother::AccountId") [])
                                (Ty.path "u128")];
                          Ty.apply (Ty.path "alloc::alloc::Global") []];
                      Ty.apply (Ty.path "alloc::alloc::Global") []]]))
          [ fun γ => (M.alloc tt) : Ty.path "unit" ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_mother_Bids.
End Impl_core_cmp_Eq_for_mother_Bids.

Module  Impl_core_clone_Clone_for_mother_Bids.
Section Impl_core_clone_Clone_for_mother_Bids.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Bids") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.tuple
                                (Ty.apply (Ty.path "mother::AccountId") [])
                                (Ty.path "u128")];
                          Ty.apply (Ty.path "alloc::alloc::Global") []];
                      Ty.apply (Ty.path "alloc::alloc::Global") []]]]
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply
                      (Ty.path "core::option::Option")
                      [Ty.tuple
                          (Ty.apply (Ty.path "mother::AccountId") [])
                          (Ty.path "u128")];
                    Ty.apply (Ty.path "alloc::alloc::Global") []];
                Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.tuple
                            (Ty.apply (Ty.path "mother::AccountId") [])
                            (Ty.path "u128")];
                      Ty.apply (Ty.path "alloc::alloc::Global") []];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Bids") []] :=
        M.read self in
      let* α2 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply
                    (Ty.path "core::option::Option")
                    [Ty.tuple
                        (Ty.apply (Ty.path "mother::AccountId") [])
                        (Ty.path "u128")];
                  Ty.apply (Ty.path "alloc::alloc::Global") []];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (α0 (borrow (mother.Bids.Get_0 (deref α1)))) in
      M.pure (mother.Bids.Build_t α2)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_mother_Bids.
End Impl_core_clone_Clone_for_mother_Bids.



Module  Impl_core_marker_StructuralPartialEq_for_mother_Outline.
Section Impl_core_marker_StructuralPartialEq_for_mother_Outline.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Outline") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_mother_Outline.
End Impl_core_marker_StructuralPartialEq_for_mother_Outline.

Module  Impl_core_cmp_PartialEq_for_mother_Outline.
Section Impl_core_cmp_PartialEq_for_mother_Outline.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Outline") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag : Ty.path "isize" :=
        let* α0 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "mother::Outline") []] :=
          M.read self in
        let* α1 : Ty.path "isize" :=
          M.call (core.intrinsics.discriminant_value α0) in
        M.alloc α1 in
      let* __arg1_tag : Ty.path "isize" :=
        let* α0 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "mother::Outline") []] :=
          M.read other in
        let* α1 : Ty.path "isize" :=
          M.call (core.intrinsics.discriminant_value α0) in
        M.alloc α1 in
      let* α0 : Ty.path "isize" := M.read __self_tag in
      let* α1 : Ty.path "isize" := M.read __arg1_tag in
      let* α0 : Ty.path "bool" := M.alloc (BinOp.Pure.eq α0 α1) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_mother_Outline.
End Impl_core_cmp_PartialEq_for_mother_Outline.

Module  Impl_core_marker_StructuralEq_for_mother_Outline.
Section Impl_core_marker_StructuralEq_for_mother_Outline.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Outline") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_mother_Outline.
End Impl_core_marker_StructuralEq_for_mother_Outline.

Module  Impl_core_cmp_Eq_for_mother_Outline.
Section Impl_core_cmp_Eq_for_mother_Outline.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Outline") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_mother_Outline.
End Impl_core_cmp_Eq_for_mother_Outline.

Module  Impl_core_clone_Clone_for_mother_Outline.
Section Impl_core_clone_Clone_for_mother_Outline.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Outline") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.apply (Ty.path "mother::Outline") [] :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Outline.NoWinner => M.alloc mother.Outline.NoWinner
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "mother::Outline") [];
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Outline.WinnerDetected =>
                M.alloc mother.Outline.WinnerDetected
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "mother::Outline") [];
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Outline.PayoutCompleted =>
                M.alloc mother.Outline.PayoutCompleted
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "mother::Outline") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_mother_Outline.
End Impl_core_clone_Clone_for_mother_Outline.



Module  Impl_core_marker_StructuralPartialEq_for_mother_Status.
Section Impl_core_marker_StructuralPartialEq_for_mother_Status.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Status") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_mother_Status.
End Impl_core_marker_StructuralPartialEq_for_mother_Status.

Module  Impl_core_cmp_PartialEq_for_mother_Status.
Section Impl_core_cmp_PartialEq_for_mother_Status.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Status") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag : Ty.path "isize" :=
        let* α0 :
            Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Status") []] :=
          M.read self in
        let* α1 : Ty.path "isize" :=
          M.call (core.intrinsics.discriminant_value α0) in
        M.alloc α1 in
      let* __arg1_tag : Ty.path "isize" :=
        let* α0 :
            Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Status") []] :=
          M.read other in
        let* α1 : Ty.path "isize" :=
          M.call (core.intrinsics.discriminant_value α0) in
        M.alloc α1 in
      let* α0 : Ty.path "isize" := M.read __self_tag in
      let* α1 : Ty.path "isize" := M.read __arg1_tag in
      let* α2 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Status") []] :=
        M.read self in
      let* α3 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Status") []] :=
        M.read other in
      let* α4 :
          Ty.tuple
            (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Status") []])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "mother::Status") []]) :=
        M.alloc (α2, α3) in
      let* α5 : Ty.path "bool" :=
        match_operator
          α4
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* γ0_0 :=
                  let* α0 := M.read γ0_0 in
                  M.pure (deref α0) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Status.EndingPeriod _ =>
                  let γ2_0 := mother.Status.Get_EndingPeriod_0 γ0_0 in
                  let* __self_0 := M.alloc (borrow γ2_0) in
                  let* γ0_1 :=
                    let* α0 := M.read γ0_1 in
                    M.pure (deref α0) in
                  let* α0 := M.read γ0_1 in
                  match α0 with
                  | mother.Status.EndingPeriod _ =>
                    let γ2_0 := mother.Status.Get_EndingPeriod_0 γ0_1 in
                    let* __arg1_0 := M.alloc (borrow γ2_0) in
                    let* α0 : Ty.apply (Ty.path "ref") [Ty.path "u32"] :=
                      M.read __self_0 in
                    let* α1 : Ty.path "u32" := M.read (deref α0) in
                    let* α2 : Ty.apply (Ty.path "ref") [Ty.path "u32"] :=
                      M.read __arg1_0 in
                    let* α3 : Ty.path "u32" := M.read (deref α2) in
                    M.alloc (BinOp.Pure.eq α1 α3)
                  | _ => M.break_match
                  end
                | _ => M.break_match
                end
              end) :
              Ty.path "bool";
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* γ0_0 :=
                  let* α0 := M.read γ0_0 in
                  M.pure (deref α0) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Status.Ended _ =>
                  let γ2_0 := mother.Status.Get_Ended_0 γ0_0 in
                  let* __self_0 := M.alloc (borrow γ2_0) in
                  let* γ0_1 :=
                    let* α0 := M.read γ0_1 in
                    M.pure (deref α0) in
                  let* α0 := M.read γ0_1 in
                  match α0 with
                  | mother.Status.Ended _ =>
                    let γ2_0 := mother.Status.Get_Ended_0 γ0_1 in
                    let* __arg1_0 := M.alloc (borrow γ2_0) in
                    let* α0 :
                        Ty.function
                          [Ty.apply
                              (Ty.path "ref")
                              [Ty.apply (Ty.path "mother::Outline") []];
                            Ty.apply
                              (Ty.path "ref")
                              [Ty.apply (Ty.path "mother::Outline") []]]
                          (Ty.path "bool") :=
                      ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialEq.eq
                          (Self := Ty.apply (Ty.path "mother::Outline") [])
                          (Rhs := Ty.apply (Ty.path "mother::Outline") [])
                          (Trait := ℐ))) in
                    let* α1 :
                        Ty.apply
                          (Ty.path "ref")
                          [Ty.apply (Ty.path "mother::Outline") []] :=
                      M.read __self_0 in
                    let* α2 :
                        Ty.apply
                          (Ty.path "ref")
                          [Ty.apply (Ty.path "mother::Outline") []] :=
                      M.read __arg1_0 in
                    let* α3 : Ty.path "bool" := M.call (α0 α1 α2) in
                    M.alloc α3
                  | _ => M.break_match
                  end
                | _ => M.break_match
                end
              end) :
              Ty.path "bool";
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* γ0_0 :=
                  let* α0 := M.read γ0_0 in
                  M.pure (deref α0) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Status.RfDelay _ =>
                  let γ2_0 := mother.Status.Get_RfDelay_0 γ0_0 in
                  let* __self_0 := M.alloc (borrow γ2_0) in
                  let* γ0_1 :=
                    let* α0 := M.read γ0_1 in
                    M.pure (deref α0) in
                  let* α0 := M.read γ0_1 in
                  match α0 with
                  | mother.Status.RfDelay _ =>
                    let γ2_0 := mother.Status.Get_RfDelay_0 γ0_1 in
                    let* __arg1_0 := M.alloc (borrow γ2_0) in
                    let* α0 : Ty.apply (Ty.path "ref") [Ty.path "u32"] :=
                      M.read __self_0 in
                    let* α1 : Ty.path "u32" := M.read (deref α0) in
                    let* α2 : Ty.apply (Ty.path "ref") [Ty.path "u32"] :=
                      M.read __arg1_0 in
                    let* α3 : Ty.path "u32" := M.read (deref α2) in
                    M.alloc (BinOp.Pure.eq α1 α3)
                  | _ => M.break_match
                  end
                | _ => M.break_match
                end
              end) :
              Ty.path "bool";
            fun γ => (M.alloc true) : Ty.path "bool"
          ] in
      let* α6 : Ty.path "bool" := M.read α5 in
      let* α0 : Ty.path "bool" :=
        M.alloc (BinOp.Pure.and (BinOp.Pure.eq α0 α1) α6) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_mother_Status.
End Impl_core_cmp_PartialEq_for_mother_Status.

Module  Impl_core_marker_StructuralEq_for_mother_Status.
Section Impl_core_marker_StructuralEq_for_mother_Status.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Status") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_mother_Status.
End Impl_core_marker_StructuralEq_for_mother_Status.

Module  Impl_core_cmp_Eq_for_mother_Status.
Section Impl_core_cmp_Eq_for_mother_Status.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Status") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.tuple :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply (Ty.path "core::cmp::AssertParamIsEq") [Ty.path "u32"]))
          [
            fun γ =>
              (match_operator
                (DeclaredButUndefinedVariable
                  (A :=
                    Ty.apply
                      (Ty.path "core::cmp::AssertParamIsEq")
                      [Ty.apply (Ty.path "mother::Outline") []]))
                [ fun γ => (M.alloc tt) : Ty.path "unit" ]) :
              Ty.path "unit"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_mother_Status.
End Impl_core_cmp_Eq_for_mother_Status.

Module  Impl_core_clone_Clone_for_mother_Status.
Section Impl_core_clone_Clone_for_mother_Status.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Status") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.apply (Ty.path "mother::Status") [] :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.NotStarted => M.alloc mother.Status.NotStarted
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "mother::Status") [];
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.OpeningPeriod =>
                M.alloc mother.Status.OpeningPeriod
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "mother::Status") [];
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.EndingPeriod _ =>
                let γ1_0 := mother.Status.Get_EndingPeriod_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :
                    Ty.function
                      [Ty.apply (Ty.path "ref") [Ty.path "u32"]]
                      (Ty.path "u32") :=
                  ltac:(M.get_method (fun ℐ =>
                    core.clone.Clone.clone
                      (Self := Ty.path "u32")
                      (Trait := ℐ))) in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "u32"] :=
                  M.read __self_0 in
                let* α2 : Ty.path "u32" := M.call (α0 α1) in
                M.alloc (mother.Status.EndingPeriod α2)
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "mother::Status") [];
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.Ended _ =>
                let γ1_0 := mother.Status.Get_Ended_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "ref")
                          [Ty.apply (Ty.path "mother::Outline") []]]
                      (Ty.apply (Ty.path "mother::Outline") []) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.clone.Clone.clone
                      (Self := Ty.apply (Ty.path "mother::Outline") [])
                      (Trait := ℐ))) in
                let* α1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "mother::Outline") []] :=
                  M.read __self_0 in
                let* α2 : Ty.apply (Ty.path "mother::Outline") [] :=
                  M.call (α0 α1) in
                M.alloc (mother.Status.Ended α2)
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "mother::Status") [];
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | mother.Status.RfDelay _ =>
                let γ1_0 := mother.Status.Get_RfDelay_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :
                    Ty.function
                      [Ty.apply (Ty.path "ref") [Ty.path "u32"]]
                      (Ty.path "u32") :=
                  ltac:(M.get_method (fun ℐ =>
                    core.clone.Clone.clone
                      (Self := Ty.path "u32")
                      (Trait := ℐ))) in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "u32"] :=
                  M.read __self_0 in
                let* α2 : Ty.path "u32" := M.call (α0 α1) in
                M.alloc (mother.Status.RfDelay α2)
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "mother::Status") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_mother_Status.
End Impl_core_clone_Clone_for_mother_Status.



Module  Impl_core_marker_StructuralPartialEq_for_mother_Auction.
Section Impl_core_marker_StructuralPartialEq_for_mother_Auction.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Auction") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_mother_Auction.
End Impl_core_marker_StructuralPartialEq_for_mother_Auction.

Module  Impl_core_cmp_PartialEq_for_mother_Auction.
Section Impl_core_cmp_PartialEq_for_mother_Auction.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Auction") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "alloc::string::String") []];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "alloc::string::String") []]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "alloc::string::String") [])
            (Rhs := Ty.apply (Ty.path "alloc::string::String") [])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α2 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read other in
      let* α3 : Ty.path "bool" :=
        M.call
          (α0
            (borrow (mother.Auction.Get_name (deref α1)))
            (borrow (mother.Auction.Get_name (deref α2)))) in
      let* α4 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "array") [Ty.path "u8"]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "array") [Ty.path "u8"]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "array") [Ty.path "u8"])
            (Rhs := Ty.apply (Ty.path "array") [Ty.path "u8"])
            (Trait := ℐ))) in
      let* α5 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α6 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read other in
      let* α7 : Ty.path "bool" :=
        M.call
          (α4
            (borrow (mother.Auction.Get_subject (deref α5)))
            (borrow (mother.Auction.Get_subject (deref α6)))) in
      let* α8 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Bids") []];
              Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Bids") []]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "mother::Bids") [])
            (Rhs := Ty.apply (Ty.path "mother::Bids") [])
            (Trait := ℐ))) in
      let* α9 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α10 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read other in
      let* α11 : Ty.path "bool" :=
        M.call
          (α8
            (borrow (mother.Auction.Get_bids (deref α9)))
            (borrow (mother.Auction.Get_bids (deref α10)))) in
      let* α12 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "array") [Ty.path "u32"]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "array") [Ty.path "u32"]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "array") [Ty.path "u32"])
            (Rhs := Ty.apply (Ty.path "array") [Ty.path "u32"])
            (Trait := ℐ))) in
      let* α13 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α14 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read other in
      let* α15 : Ty.path "bool" :=
        M.call
          (α12
            (borrow (mother.Auction.Get_terms (deref α13)))
            (borrow (mother.Auction.Get_terms (deref α14)))) in
      let* α16 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Status") []];
              Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Status") []]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "mother::Status") [])
            (Rhs := Ty.apply (Ty.path "mother::Status") [])
            (Trait := ℐ))) in
      let* α17 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α18 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read other in
      let* α19 : Ty.path "bool" :=
        M.call
          (α16
            (borrow (mother.Auction.Get_status (deref α17)))
            (borrow (mother.Auction.Get_status (deref α18)))) in
      let* α20 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α21 : Ty.path "bool" :=
        M.read (mother.Auction.Get_finalized (deref α20)) in
      let* α22 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read other in
      let* α23 : Ty.path "bool" :=
        M.read (mother.Auction.Get_finalized (deref α22)) in
      let* α24 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u8";
                      Ty.apply (Ty.path "alloc::alloc::Global") []]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u8";
                      Ty.apply (Ty.path "alloc::alloc::Global") []]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Rhs :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α25 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α26 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read other in
      let* α27 : Ty.path "bool" :=
        M.call
          (α24
            (borrow (mother.Auction.Get_vector (deref α25)))
            (borrow (mother.Auction.Get_vector (deref α26)))) in
      M.pure
        (BinOp.Pure.and
          (BinOp.Pure.and
            (BinOp.Pure.and
              (BinOp.Pure.and (BinOp.Pure.and (BinOp.Pure.and α3 α7) α11) α15)
              α19)
            (BinOp.Pure.eq α21 α23))
          α27)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_mother_Auction.
End Impl_core_cmp_PartialEq_for_mother_Auction.

Module  Impl_core_marker_StructuralEq_for_mother_Auction.
Section Impl_core_marker_StructuralEq_for_mother_Auction.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Auction") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_mother_Auction.
End Impl_core_marker_StructuralEq_for_mother_Auction.

Module  Impl_core_cmp_Eq_for_mother_Auction.
Section Impl_core_cmp_Eq_for_mother_Auction.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Auction") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.tuple :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::cmp::AssertParamIsEq")
                [Ty.apply (Ty.path "alloc::string::String") []]))
          [
            fun γ =>
              (match_operator
                (DeclaredButUndefinedVariable
                  (A :=
                    Ty.apply
                      (Ty.path "core::cmp::AssertParamIsEq")
                      [Ty.apply (Ty.path "array") [Ty.path "u8"]]))
                [
                  fun γ =>
                    (match_operator
                      (DeclaredButUndefinedVariable
                        (A :=
                          Ty.apply
                            (Ty.path "core::cmp::AssertParamIsEq")
                            [Ty.apply (Ty.path "mother::Bids") []]))
                      [
                        fun γ =>
                          (match_operator
                            (DeclaredButUndefinedVariable
                              (A :=
                                Ty.apply
                                  (Ty.path "core::cmp::AssertParamIsEq")
                                  [Ty.apply (Ty.path "array") [Ty.path "u32"]]))
                            [
                              fun γ =>
                                (match_operator
                                  (DeclaredButUndefinedVariable
                                    (A :=
                                      Ty.apply
                                        (Ty.path "core::cmp::AssertParamIsEq")
                                        [Ty.apply
                                            (Ty.path "mother::Status")
                                            []]))
                                  [
                                    fun γ =>
                                      (match_operator
                                        (DeclaredButUndefinedVariable
                                          (A :=
                                            Ty.apply
                                              (Ty.path
                                                "core::cmp::AssertParamIsEq")
                                              [Ty.path "bool"]))
                                        [
                                          fun γ =>
                                            (match_operator
                                              (DeclaredButUndefinedVariable
                                                (A :=
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::cmp::AssertParamIsEq")
                                                    [Ty.apply
                                                        (Ty.path
                                                          "alloc::vec::Vec")
                                                        [Ty.path "u8";
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::alloc::Global")
                                                            []]]))
                                              [
                                                fun γ =>
                                                  (M.alloc tt) : Ty.path "unit"
                                              ]) :
                                            Ty.path "unit"
                                        ]) :
                                      Ty.path "unit"
                                  ]) :
                                Ty.path "unit"
                            ]) :
                          Ty.path "unit"
                      ]) :
                    Ty.path "unit"
                ]) :
              Ty.path "unit"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_mother_Auction.
End Impl_core_cmp_Eq_for_mother_Auction.

Module  Impl_core_clone_Clone_for_mother_Auction.
Section Impl_core_clone_Clone_for_mother_Auction.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Auction") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "alloc::string::String") []]]
            (Ty.apply (Ty.path "alloc::string::String") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self := Ty.apply (Ty.path "alloc::string::String") [])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α2 : Ty.apply (Ty.path "alloc::string::String") [] :=
        M.call (α0 (borrow (mother.Auction.Get_name (deref α1)))) in
      let* α3 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "array") [Ty.path "u8"]]]
            (Ty.apply (Ty.path "array") [Ty.path "u8"]) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self := Ty.apply (Ty.path "array") [Ty.path "u8"])
            (Trait := ℐ))) in
      let* α4 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α5 : Ty.apply (Ty.path "array") [Ty.path "u8"] :=
        M.call (α3 (borrow (mother.Auction.Get_subject (deref α4)))) in
      let* α6 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Bids") []]]
            (Ty.apply (Ty.path "mother::Bids") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self := Ty.apply (Ty.path "mother::Bids") [])
            (Trait := ℐ))) in
      let* α7 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α8 : Ty.apply (Ty.path "mother::Bids") [] :=
        M.call (α6 (borrow (mother.Auction.Get_bids (deref α7)))) in
      let* α9 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "array") [Ty.path "u32"]]]
            (Ty.apply (Ty.path "array") [Ty.path "u32"]) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self := Ty.apply (Ty.path "array") [Ty.path "u32"])
            (Trait := ℐ))) in
      let* α10 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α11 : Ty.apply (Ty.path "array") [Ty.path "u32"] :=
        M.call (α9 (borrow (mother.Auction.Get_terms (deref α10)))) in
      let* α12 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Status") []]]
            (Ty.apply (Ty.path "mother::Status") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self := Ty.apply (Ty.path "mother::Status") [])
            (Trait := ℐ))) in
      let* α13 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α14 : Ty.apply (Ty.path "mother::Status") [] :=
        M.call (α12 (borrow (mother.Auction.Get_status (deref α13)))) in
      let* α15 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.path "bool"]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone (Self := Ty.path "bool") (Trait := ℐ))) in
      let* α16 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α17 : Ty.path "bool" :=
        M.call (α15 (borrow (mother.Auction.Get_finalized (deref α16)))) in
      let* α18 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u8";
                      Ty.apply (Ty.path "alloc::alloc::Global") []]]]
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α19 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Auction") []] :=
        M.read self in
      let* α20 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (α18 (borrow (mother.Auction.Get_vector (deref α19)))) in
      M.pure
        {|
          mother.Auction.name := α2;
          mother.Auction.subject := α5;
          mother.Auction.bids := α8;
          mother.Auction.terms := α11;
          mother.Auction.status := α14;
          mother.Auction.finalized := α17;
          mother.Auction.vector := α20;
        |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_mother_Auction.
End Impl_core_clone_Clone_for_mother_Auction.

Module  Impl_core_default_Default_for_mother_Auction.
Section Impl_core_default_Default_for_mother_Auction.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Auction") [].
  
  (*
      fn default() -> Auction {
          Auction {
              name: String::default(),
              subject: Hash::default(),
              bids: Bids::default(),
              terms: <[BlockNumber; 3]>::default(),
              status: Status::OpeningPeriod,
              finalized: false,
              vector: <Vec<u8>>::default(),
          }
      }
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :
          Ty.function [] (Ty.apply (Ty.path "alloc::string::String") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "alloc::string::String") [])
            (Trait := ℐ))) in
      let* α1 : Ty.apply (Ty.path "alloc::string::String") [] := M.call α0 in
      let* α2 : Ty.function [] (Ty.apply (Ty.path "array") [Ty.path "u8"]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "array") [Ty.path "u8"])
            (Trait := ℐ))) in
      let* α3 : Ty.apply (Ty.path "array") [Ty.path "u8"] := M.call α2 in
      let* α4 : Ty.function [] (Ty.apply (Ty.path "mother::Bids") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "mother::Bids") [])
            (Trait := ℐ))) in
      let* α5 : Ty.apply (Ty.path "mother::Bids") [] := M.call α4 in
      let* α6 : Ty.function [] (Ty.apply (Ty.path "array") [Ty.path "u32"]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "array") [Ty.path "u32"])
            (Trait := ℐ))) in
      let* α7 : Ty.apply (Ty.path "array") [Ty.path "u32"] := M.call α6 in
      let* α8 :
          Ty.function
            []
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α9 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call α8 in
      M.pure
        {|
          mother.Auction.name := α1;
          mother.Auction.subject := α3;
          mother.Auction.bids := α5;
          mother.Auction.terms := α7;
          mother.Auction.status := mother.Status.OpeningPeriod;
          mother.Auction.finalized := false;
          mother.Auction.vector := α9;
        |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_mother_Auction.
End Impl_core_default_Default_for_mother_Auction.



Module  Impl_core_marker_StructuralPartialEq_for_mother_Failure.
Section Impl_core_marker_StructuralPartialEq_for_mother_Failure.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Failure") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_mother_Failure.
End Impl_core_marker_StructuralPartialEq_for_mother_Failure.

Module  Impl_core_cmp_PartialEq_for_mother_Failure.
Section Impl_core_cmp_PartialEq_for_mother_Failure.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Failure") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag : Ty.path "isize" :=
        let* α0 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "mother::Failure") []] :=
          M.read self in
        let* α1 : Ty.path "isize" :=
          M.call (core.intrinsics.discriminant_value α0) in
        M.alloc α1 in
      let* __arg1_tag : Ty.path "isize" :=
        let* α0 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "mother::Failure") []] :=
          M.read other in
        let* α1 : Ty.path "isize" :=
          M.call (core.intrinsics.discriminant_value α0) in
        M.alloc α1 in
      let* α0 : Ty.path "isize" := M.read __self_tag in
      let* α1 : Ty.path "isize" := M.read __arg1_tag in
      let* α2 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Failure") []] :=
        M.read self in
      let* α3 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Failure") []] :=
        M.read other in
      let* α4 :
          Ty.tuple
            (Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Failure") []])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "mother::Failure") []]) :=
        M.alloc (α2, α3) in
      let* α5 : Ty.path "bool" :=
        match_operator
          α4
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* γ0_0 :=
                  let* α0 := M.read γ0_0 in
                  M.pure (deref α0) in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Failure.Revert _ =>
                  let γ2_0 := mother.Failure.Get_Revert_0 γ0_0 in
                  let* __self_0 := M.alloc (borrow γ2_0) in
                  let* γ0_1 :=
                    let* α0 := M.read γ0_1 in
                    M.pure (deref α0) in
                  let* α0 := M.read γ0_1 in
                  match α0 with
                  | mother.Failure.Revert _ =>
                    let γ2_0 := mother.Failure.Get_Revert_0 γ0_1 in
                    let* __arg1_0 := M.alloc (borrow γ2_0) in
                    let* α0 :
                        Ty.function
                          [Ty.apply
                              (Ty.path "ref")
                              [Ty.apply (Ty.path "alloc::string::String") []];
                            Ty.apply
                              (Ty.path "ref")
                              [Ty.apply (Ty.path "alloc::string::String") []]]
                          (Ty.path "bool") :=
                      ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialEq.eq
                          (Self :=
                            Ty.apply (Ty.path "alloc::string::String") [])
                          (Rhs := Ty.apply (Ty.path "alloc::string::String") [])
                          (Trait := ℐ))) in
                    let* α1 :
                        Ty.apply
                          (Ty.path "ref")
                          [Ty.apply (Ty.path "alloc::string::String") []] :=
                      M.read __self_0 in
                    let* α2 :
                        Ty.apply
                          (Ty.path "ref")
                          [Ty.apply (Ty.path "alloc::string::String") []] :=
                      M.read __arg1_0 in
                    let* α3 : Ty.path "bool" := M.call (α0 α1 α2) in
                    M.alloc α3
                  | _ => M.break_match
                  end
                | _ => M.break_match
                end
              end) :
              Ty.path "bool";
            fun γ => (M.alloc true) : Ty.path "bool"
          ] in
      let* α6 : Ty.path "bool" := M.read α5 in
      let* α0 : Ty.path "bool" :=
        M.alloc (BinOp.Pure.and (BinOp.Pure.eq α0 α1) α6) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_mother_Failure.
End Impl_core_cmp_PartialEq_for_mother_Failure.

Module  Impl_core_marker_StructuralEq_for_mother_Failure.
Section Impl_core_marker_StructuralEq_for_mother_Failure.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Failure") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_mother_Failure.
End Impl_core_marker_StructuralEq_for_mother_Failure.

Module  Impl_core_cmp_Eq_for_mother_Failure.
Section Impl_core_cmp_Eq_for_mother_Failure.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Failure") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.tuple :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::cmp::AssertParamIsEq")
                [Ty.apply (Ty.path "alloc::string::String") []]))
          [ fun γ => (M.alloc tt) : Ty.path "unit" ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_mother_Failure.
End Impl_core_cmp_Eq_for_mother_Failure.





Module  Impl_mother_Env.
Section Impl_mother_Env.
  Definition Self : Set := Ty.apply (Ty.path "mother::Env") [].
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "mother::Env") []] :=
        M.read self in
      M.read (mother.Env.Get_caller (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _event] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
End Impl_mother_Env.
End Impl_mother_Env.



Module  Impl_core_default_Default_for_mother_Mother.
Section Impl_core_default_Default_for_mother_Mother.
  Definition Self : Ty.t := Ty.apply (Ty.path "mother::Mother") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.function [] (Ty.apply (Ty.path "mother::Auction") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "mother::Auction") [])
            (Trait := ℐ))) in
      let* α1 : Ty.apply (Ty.path "mother::Auction") [] := M.call α0 in
      let* α2 :
          Ty.function
            []
            (Ty.apply
              (Ty.path "mother::Mapping")
              [Ty.apply (Ty.path "mother::AccountId") []; Ty.path "u128"]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "mother::Mapping")
                [Ty.apply (Ty.path "mother::AccountId") []; Ty.path "u128"])
            (Trait := ℐ))) in
      let* α3 :
          Ty.apply
            (Ty.path "mother::Mapping")
            [Ty.apply (Ty.path "mother::AccountId") []; Ty.path "u128"] :=
        M.call α2 in
      M.pure {| mother.Mother.auction := α1; mother.Mother.balances := α3; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_mother_Mother.
End Impl_core_default_Default_for_mother_Mother.

Module  Impl_mother_Mother.
Section Impl_mother_Mother.
  Definition Self : Set := Ty.apply (Ty.path "mother::Mother") [].
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.call (Ty.apply (Ty.path "mother::Mother") [])::["init_env"]
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new(auction: Auction) -> Self {
          Self {
              balances: Default::default(),
              auction,
          }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [auction] =>
      let* auction := M.alloc auction in
      let* α0 :
          Ty.function
            []
            (Ty.apply
              (Ty.path "mother::Mapping")
              [Ty.apply (Ty.path "mother::AccountId") []; Ty.path "u128"]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "mother::Mapping")
                [Ty.apply (Ty.path "mother::AccountId") []; Ty.path "u128"])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply
            (Ty.path "mother::Mapping")
            [Ty.apply (Ty.path "mother::AccountId") []; Ty.path "u128"] :=
        M.call α0 in
      let* α2 : Ty.apply (Ty.path "mother::Auction") [] := M.read auction in
      M.pure {| mother.Mother.balances := α1; mother.Mother.auction := α2; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_default() -> Self {
          Default::default()
      }
  *)
  Definition new_default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.function [] (Ty.apply (Ty.path "mother::Mother") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "mother::Mother") [])
            (Trait := ℐ))) in
      M.call α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new_default : Instance.t := {
    Notations.double_colon := new_default;
  }.
  
  (*
      pub fn failed_new(fail: bool) -> Result<Self, Failure> {
          if fail {
              Err(Failure::Revert("Reverting instantiation".to_string()))
          } else {
              Ok(Default::default())
          }
      }
  *)
  Definition failed_new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [fail] =>
      let* fail := M.alloc fail in
      let* α0 : Ty.path "bool" := M.read (use fail) in
      let* α1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "mother::Mother") [];
              Ty.apply (Ty.path "mother::Failure") []] :=
        if α0 then
          let* α0 :
              Ty.function
                [Ty.apply (Ty.path "ref") [Ty.path "str"]]
                (Ty.apply (Ty.path "alloc::string::String") []) :=
            ltac:(M.get_method (fun ℐ =>
              alloc.string.ToString.to_string
                (Self := Ty.path "str")
                (Trait := ℐ))) in
          let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "Reverting instantiation") in
          let* α2 : Ty.apply (Ty.path "alloc::string::String") [] :=
            M.call (α0 α1) in
          M.alloc (core.result.Result.Err (mother.Failure.Revert α2))
        else
          let* α0 : Ty.function [] (Ty.apply (Ty.path "mother::Mother") []) :=
            ltac:(M.get_method (fun ℐ =>
              core.default.Default.default
                (Self := Ty.apply (Ty.path "mother::Mother") [])
                (Trait := ℐ))) in
          let* α1 : Ty.apply (Ty.path "mother::Mother") [] := M.call α0 in
          M.alloc (core.result.Result.Ok α1) in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_failed_new : Instance.t := {
    Notations.double_colon := failed_new;
  }.
  
  (*
      pub fn echo_auction(&mut self, auction: Auction) -> Auction {
          self.env().emit_event(Event::AuctionEchoed(AuctionEchoed {
              auction: auction.clone(),
          }));
          auction
      }
  *)
  Definition echo_auction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; auction] =>
      let* self := M.alloc self in
      let* auction := M.alloc auction in
      let* _ : Ty.tuple :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "mother::Mother") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "mother::Env") [] :=
          M.call
            ((Ty.apply (Ty.path "mother::Mother") [])::["env"]
              (borrow (deref α0))) in
        let* α2 : Ty.apply (Ty.path "mother::Env") [] := M.alloc α1 in
        let* α3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "mother::Auction") []]]
              (Ty.apply (Ty.path "mother::Auction") []) :=
          ltac:(M.get_method (fun ℐ =>
            core.clone.Clone.clone
              (Self := Ty.apply (Ty.path "mother::Auction") [])
              (Trait := ℐ))) in
        let* α4 : Ty.apply (Ty.path "mother::Auction") [] :=
          M.call (α3 (borrow auction)) in
        let* α5 : Ty.tuple :=
          M.call
            ((Ty.apply (Ty.path "mother::Env") [])::["emit_event"]
              (borrow α2)
              (mother.Event.AuctionEchoed
                {| mother.AuctionEchoed.auction := α4; |})) in
        M.alloc α5 in
      M.read auction
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_echo_auction : Instance.t := {
    Notations.double_colon := echo_auction;
  }.
  
  (*
      pub fn revert_or_trap(&mut self, fail: Option<Failure>) -> Result<(), Failure> {
          match fail {
              Some(Failure::Revert(_)) => {
                  Err(Failure::Revert("Reverting on user demand!".to_string()))
              }
              Some(Failure::Panic) => {
                  panic!("Trapping on user demand!")
              }
              None => Ok(()),
          }
      }
  *)
  Definition revert_or_trap (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; fail] =>
      let* self := M.alloc self in
      let* fail := M.alloc fail in
      let* α0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "mother::Failure") []] :=
        match_operator
          fail
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.option.Option.Some _ =>
                let γ0_0 := core.option.Option.Get_Some_0 γ in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Failure.Revert _ =>
                  let γ1_0 := mother.Failure.Get_Revert_0 γ0_0 in
                  let* α0 :
                      Ty.function
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]]
                        (Ty.apply (Ty.path "alloc::string::String") []) :=
                    ltac:(M.get_method (fun ℐ =>
                      alloc.string.ToString.to_string
                        (Self := Ty.path "str")
                        (Trait := ℐ))) in
                  let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "Reverting on user demand!") in
                  let* α2 : Ty.apply (Ty.path "alloc::string::String") [] :=
                    M.call (α0 α1) in
                  M.alloc (core.result.Result.Err (mother.Failure.Revert α2))
                | _ => M.break_match
                end
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "mother::Failure") []];
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.option.Option.Some _ =>
                let γ0_0 := core.option.Option.Get_Some_0 γ in
                let* α0 := M.read γ0_0 in
                match α0 with
                | mother.Failure.Panic =>
                  let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "Trapping on user demand!") in
                  let* α1 : Ty.path "never" :=
                    M.call (std.panicking.begin_panic α0) in
                  let* α2 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.tuple; Ty.apply (Ty.path "mother::Failure") []] :=
                    never_to_any α1 in
                  M.alloc α2
                | _ => M.break_match
                end
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "mother::Failure") []];
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.option.Option.None => M.alloc (core.result.Result.Ok tt)
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "mother::Failure") []]
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_revert_or_trap : Instance.t := {
    Notations.double_colon := revert_or_trap;
  }.
  
  (*
      pub fn debug_log(&mut self, _message: String) {
          println!("debug_log: {}", _message);
      }
  *)
  Definition debug_log (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _message] =>
      let* self := M.alloc self in
      let* _message := M.alloc _message in
      let* _ : Ty.tuple :=
        let* _ : Ty.tuple :=
          let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "debug_log: ") in
          let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "
") in
          let* α2 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
            M.alloc [ α0; α1 ] in
          let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow _message)) in
          let* α4 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
            M.alloc [ α3 ] in
          let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow α2))
                (pointer_coercion "Unsize" (borrow α4))) in
          let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
          M.alloc α6 in
        M.alloc tt in
      let* α0 : Ty.path "unit" := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_debug_log : Instance.t := {
    Notations.double_colon := debug_log;
  }.
End Impl_mother_Mother.
End Impl_mother_Mother.
