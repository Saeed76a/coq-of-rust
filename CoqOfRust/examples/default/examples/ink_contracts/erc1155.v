(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_erc1155_Mapping_K_V.
Section Impl_core_default_Default_for_erc1155_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Mapping") [K; V].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :
          Ty.function [] (Ty.apply (Ty.path "core::marker::PhantomData") [K]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [K])
            (Trait := ℐ))) in
      let* α1 : Ty.apply (Ty.path "core::marker::PhantomData") [K] :=
        M.call α0 in
      let* α2 :
          Ty.function [] (Ty.apply (Ty.path "core::marker::PhantomData") [V]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [V])
            (Trait := ℐ))) in
      let* α3 : Ty.apply (Ty.path "core::marker::PhantomData") [V] :=
        M.call α2 in
      M.pure {| erc1155.Mapping._key := α1; erc1155.Mapping._value := α3; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc1155_Mapping_K_V.
End Impl_core_default_Default_for_erc1155_Mapping_K_V.

Module  Impl_erc1155_Mapping_K_V.
Section Impl_erc1155_Mapping_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := Ty.apply (Ty.path "erc1155::Mapping") [K; V].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Definition contains (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_contains : Instance.t := {
    Notations.double_colon := contains;
  }.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition insert (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _key; _value] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_insert : Instance.t := {
    Notations.double_colon := insert;
  }.
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Definition remove (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_remove : Instance.t := {
    Notations.double_colon := remove;
  }.
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition size (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_size : Instance.t := {
    Notations.double_colon := size;
  }.
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition take (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_take : Instance.t := {
    Notations.double_colon := take;
  }.
End Impl_erc1155_Mapping_K_V.
End Impl_erc1155_Mapping_K_V.



Module  Impl_core_default_Default_for_erc1155_AccountId.
Section Impl_core_default_Default_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.function [] (Ty.path "u128") :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ℐ))) in
      let* α1 : Ty.path "u128" := M.call α0 in
      M.pure (erc1155.AccountId.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc1155_AccountId.
End Impl_core_default_Default_for_erc1155_AccountId.

Module  Impl_core_clone_Clone_for_erc1155_AccountId.
Section Impl_core_clone_Clone_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun γ =>
              (let* α0 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []] :=
                M.read self in
              M.pure (deref α0)) :
              Ty.apply (Ty.path "erc1155::AccountId") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_erc1155_AccountId.
End Impl_core_clone_Clone_for_erc1155_AccountId.

Module  Impl_core_marker_Copy_for_erc1155_AccountId.
Section Impl_core_marker_Copy_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_erc1155_AccountId.
End Impl_core_marker_Copy_for_erc1155_AccountId.

Module  Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
Section Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.

Module  Impl_core_cmp_PartialEq_for_erc1155_AccountId.
Section Impl_core_cmp_PartialEq_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "erc1155::AccountId") []] :=
        M.read self in
      let* α1 : Ty.path "u128" := M.read (erc1155.AccountId.Get_0 (deref α0)) in
      let* α2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "erc1155::AccountId") []] :=
        M.read other in
      let* α3 : Ty.path "u128" := M.read (erc1155.AccountId.Get_0 (deref α2)) in
      M.pure (BinOp.Pure.eq α1 α3)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_erc1155_AccountId.
End Impl_core_cmp_PartialEq_for_erc1155_AccountId.

Module  Impl_core_convert_From_array_u8_for_erc1155_AccountId.
Section Impl_core_convert_From_array_u8_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::AccountId") [].
  
  (*
      fn from(_v: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [_v] =>
      let* _v := M.alloc _v in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_array_u8_for_erc1155_AccountId.
End Impl_core_convert_From_array_u8_for_erc1155_AccountId.

Axiom Balance : Ty.path "u128".



(*
fn zero_address() -> AccountId {
    [0u8; 32].into()
}
*)
Definition zero_address (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* α0 :
        Ty.function
          [Ty.apply (Ty.path "array") [Ty.path "u8"]]
          (Ty.apply (Ty.path "erc1155::AccountId") []) :=
      ltac:(M.get_method (fun ℐ =>
        core.convert.Into.into
          (Self := Ty.apply (Ty.path "array") [Ty.path "u8"])
          (T := Ty.apply (Ty.path "erc1155::AccountId") [])
          (Trait := ℐ))) in
    M.call (α0 (repeat ((Integer.of_Z 0) : Ty.path "u8") 32))
  | _, _ => M.impossible
  end.

Definition ON_ERC_1155_RECEIVED_SELECTOR
    : Ty.apply (Ty.path "array") [Ty.path "u8"] :=
  M.run
    (M.alloc
      [
        (Integer.of_Z 242) : Ty.path "u8";
        (Integer.of_Z 58) : Ty.path "u8";
        (Integer.of_Z 110) : Ty.path "u8";
        (Integer.of_Z 97) : Ty.path "u8"
      ]).

Definition _ON_ERC_1155_BATCH_RECEIVED_SELECTOR
    : Ty.apply (Ty.path "array") [Ty.path "u8"] :=
  M.run
    (M.alloc
      [
        (Integer.of_Z 188) : Ty.path "u8";
        (Integer.of_Z 25) : Ty.path "u8";
        (Integer.of_Z 124) : Ty.path "u8";
        (Integer.of_Z 129) : Ty.path "u8"
      ]).

Axiom TokenId : Ty.path "u128".



Module  Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
Section Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error.

Module  Impl_core_cmp_PartialEq_for_erc1155_Error.
Section Impl_core_cmp_PartialEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Error") [].
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag : Ty.path "isize" :=
        let* α0 :
            Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Error") []] :=
          M.read self in
        let* α1 : Ty.path "isize" :=
          M.call (core.intrinsics.discriminant_value α0) in
        M.alloc α1 in
      let* __arg1_tag : Ty.path "isize" :=
        let* α0 :
            Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Error") []] :=
          M.read other in
        let* α1 : Ty.path "isize" :=
          M.call (core.intrinsics.discriminant_value α0) in
        M.alloc α1 in
      let* α0 : Ty.path "isize" := M.read __self_tag in
      let* α1 : Ty.path "isize" := M.read __arg1_tag in
      let* α0 : Ty.path "bool" := M.alloc (BinOp.Pure.eq α0 α1) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ℐ : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_erc1155_Error.
End Impl_core_cmp_PartialEq_for_erc1155_Error.

Module  Impl_core_marker_StructuralEq_for_erc1155_Error.
Section Impl_core_marker_StructuralEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Error") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_erc1155_Error.
End Impl_core_marker_StructuralEq_for_erc1155_Error.

Module  Impl_core_cmp_Eq_for_erc1155_Error.
Section Impl_core_cmp_Eq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Error") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ℐ : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_erc1155_Error.
End Impl_core_cmp_Eq_for_erc1155_Error.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T; Ty.apply (Ty.path "erc1155::Error") []].

Module  Erc1155.
Section Erc1155.
  Class Trait (Self : Set) : Type := {
    safe_transfer_from :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.path "u128";
          Ty.path "u128";
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]);
    safe_batch_transfer_from :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]);
    balance_of :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.path "u128"]
        (Ty.path "u128");
    balance_of_batch :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "erc1155::AccountId") [];
              Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []]);
    set_approval_for_all :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.path "bool"]
        (Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]);
    is_approved_for_all :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") []]
        (Ty.path "bool");
  }.
  
End Erc1155.
End Erc1155.

Module  Erc1155TokenReceiver.
Section Erc1155TokenReceiver.
  Class Trait (Self : Set) : Type := {
    on_received :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.path "u128";
          Ty.path "u128";
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]);
    on_batch_received :
      Ty.function
        [Ty.apply (Ty.path "mut_ref") [Self];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply (Ty.path "erc1155::AccountId") [];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]);
  }.
  
End Erc1155TokenReceiver.
End Erc1155TokenReceiver.

Axiom Owner : Ty.apply (Ty.path "erc1155::AccountId") [].

Axiom Operator : Ty.apply (Ty.path "erc1155::AccountId") [].









Module  Impl_erc1155_Env.
Section Impl_erc1155_Env.
  Definition Self : Set := Ty.apply (Ty.path "erc1155::Env") [].
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "erc1155::Env") []] :=
        M.read self in
      M.read (erc1155.Env.Get_caller (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _event] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_emit_event : Instance.t := {
    Notations.double_colon := emit_event;
  }.
End Impl_erc1155_Env.
End Impl_erc1155_Env.



Module  Impl_core_default_Default_for_erc1155_Contract.
Section Impl_core_default_Default_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Contract") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :
          Ty.function
            []
            (Ty.apply
              (Ty.path "erc1155::Mapping")
              [Ty.tuple
                  (Ty.apply (Ty.path "erc1155::AccountId") [])
                  (Ty.path "u128");
                Ty.path "u128"]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "erc1155::Mapping")
                [Ty.tuple
                    (Ty.apply (Ty.path "erc1155::AccountId") [])
                    (Ty.path "u128");
                  Ty.path "u128"])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply
            (Ty.path "erc1155::Mapping")
            [Ty.tuple
                (Ty.apply (Ty.path "erc1155::AccountId") [])
                (Ty.path "u128");
              Ty.path "u128"] :=
        M.call α0 in
      let* α2 :
          Ty.function
            []
            (Ty.apply
              (Ty.path "erc1155::Mapping")
              [Ty.tuple
                  (Ty.apply (Ty.path "erc1155::AccountId") [])
                  (Ty.apply (Ty.path "erc1155::AccountId") []);
                Ty.tuple]) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "erc1155::Mapping")
                [Ty.tuple
                    (Ty.apply (Ty.path "erc1155::AccountId") [])
                    (Ty.apply (Ty.path "erc1155::AccountId") []);
                  Ty.tuple])
            (Trait := ℐ))) in
      let* α3 :
          Ty.apply
            (Ty.path "erc1155::Mapping")
            [Ty.tuple
                (Ty.apply (Ty.path "erc1155::AccountId") [])
                (Ty.apply (Ty.path "erc1155::AccountId") []);
              Ty.tuple] :=
        M.call α2 in
      let* α4 : Ty.function [] (Ty.path "u128") :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ℐ))) in
      let* α5 : Ty.path "u128" := M.call α4 in
      M.pure
        {|
          erc1155.Contract.balances := α1;
          erc1155.Contract.approvals := α3;
          erc1155.Contract.token_id_nonce := α5;
        |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_erc1155_Contract.
End Impl_core_default_Default_for_erc1155_Contract.

Module  Impl_erc1155_Contract.
Section Impl_erc1155_Contract.
  Definition Self : Set := Ty.apply (Ty.path "erc1155::Contract") [].
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.call (Ty.apply (Ty.path "erc1155::Contract") [])::["init_env"]
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.function [] (Ty.apply (Ty.path "erc1155::Contract") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "erc1155::Contract") [])
            (Trait := ℐ))) in
      M.call α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn create(&mut self, value: Balance) -> TokenId {
          let caller = self.env().caller();
  
          // Given that TokenId is a `u128` the likelihood of this overflowing is pretty
          // slim.
          self.token_id_nonce += 1;
          self.balances.insert((caller, self.token_id_nonce), value);
  
          // Emit transfer event but with mint semantics
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: None,
              to: if value == 0 { None } else { Some(caller) },
              token_id: self.token_id_nonce,
              value,
          }));
  
          self.token_id_nonce
      }
  *)
  Definition create (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; value] =>
      let* self := M.alloc self in
      let* value := M.alloc value in
      let* caller : Ty.apply (Ty.path "erc1155::AccountId") [] :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
          M.call
            ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
              (borrow (deref α0))) in
        let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
        let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
          M.call
            ((Ty.apply (Ty.path "erc1155::Env") [])::["caller"] (borrow α2)) in
        M.alloc α3 in
      let* _ : Ty.tuple :=
        let* β : Ty.path "u128" :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          M.pure (erc1155.Contract.Get_token_id_nonce (deref α0)) in
        let* α0 := M.read β in
        let* α1 := BinOp.Panic.add α0 ((Integer.of_Z 1) : Ty.path "u128") in
        assign β α1 in
      let* _ : Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read caller in
        let* α2 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α3 : Ty.path "u128" :=
          M.read (erc1155.Contract.Get_token_id_nonce (deref α2)) in
        let* α4 : Ty.path "u128" := M.read value in
        let* α5 : Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple
                      (Ty.apply (Ty.path "erc1155::AccountId") [])
                      (Ty.path "u128");
                    Ty.path "u128"])::["insert"]
              (borrow_mut (erc1155.Contract.Get_balances (deref α0)))
              (α1, α3)
              α4) in
        M.alloc α5 in
      let* _ : Ty.tuple :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
          M.call
            ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
              (borrow (deref α0))) in
        let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
        let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read caller in
        let* α4 : Ty.path "u128" := M.read value in
        let* α5 : Ty.path "bool" :=
          M.alloc (BinOp.Pure.eq α4 ((Integer.of_Z 0) : Ty.path "u128")) in
        let* α6 : Ty.path "bool" := M.read (use α5) in
        let* α7 :
            Ty.apply
              (Ty.path "core::option::Option")
              [Ty.apply (Ty.path "erc1155::AccountId") []] :=
          if α6 then
            M.alloc core.option.Option.None
          else
            let* α0 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
              M.read caller in
            M.alloc (core.option.Option.Some α0) in
        let* α8 :
            Ty.apply
              (Ty.path "core::option::Option")
              [Ty.apply (Ty.path "erc1155::AccountId") []] :=
          M.read α7 in
        let* α9 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α10 : Ty.path "u128" :=
          M.read (erc1155.Contract.Get_token_id_nonce (deref α9)) in
        let* α11 : Ty.path "u128" := M.read value in
        let* α12 : Ty.tuple :=
          M.call
            ((Ty.apply (Ty.path "erc1155::Env") [])::["emit_event"]
              (borrow α2)
              (erc1155.Event.TransferSingle
                {|
                  erc1155.TransferSingle.operator := core.option.Option.Some α3;
                  erc1155.TransferSingle.from := core.option.Option.None;
                  erc1155.TransferSingle.to := α8;
                  erc1155.TransferSingle.token_id := α10;
                  erc1155.TransferSingle.value := α11;
                |})) in
        M.alloc α12 in
      let* α0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "erc1155::Contract") []] :=
        M.read self in
      M.read (erc1155.Contract.Get_token_id_nonce (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_create : Instance.t := {
    Notations.double_colon := create;
  }.
  
  (*
      pub fn mint(&mut self, token_id: TokenId, value: Balance) -> Result<()> {
          ensure!(token_id <= self.token_id_nonce, Error::UnexistentToken);
  
          let caller = self.env().caller();
          self.balances.insert((caller, token_id), value);
  
          // Emit transfer event but with mint semantics
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: None,
              to: Some(caller),
              token_id,
              value,
          }));
  
          Ok(())
      }
  *)
  Definition mint (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; token_id; value] =>
      let* self := M.alloc self in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]) in
      M.catch_return
        (let* _ : Ty.tuple :=
          let* α0 : Ty.path "u128" := M.read token_id in
          let* α1 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α2 : Ty.path "u128" :=
            M.read (erc1155.Contract.Get_token_id_nonce (deref α1)) in
          let* α3 : Ty.path "bool" :=
            M.alloc (UnOp.not (BinOp.Pure.le α0 α2)) in
          let* α4 : Ty.path "bool" := M.read (use α3) in
          if α4 then
            let* α0 :
                Ty.function
                  [Ty.apply (Ty.path "erc1155::Error") []]
                  (Ty.apply (Ty.path "erc1155::Error") []) :=
              ltac:(M.get_method (fun ℐ =>
                core.convert.Into.into
                  (Self := Ty.apply (Ty.path "erc1155::Error") [])
                  (T := Ty.apply (Ty.path "erc1155::Error") [])
                  (Trait := ℐ))) in
            let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
              M.call (α0 erc1155.Error.UnexistentToken) in
            let* α2 : Ty.path "never" := return_ (core.result.Result.Err α1) in
            let* α3 : Ty.path "never" := M.read α2 in
            let* α4 : Ty.tuple := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* caller : Ty.apply (Ty.path "erc1155::AccountId") [] :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
                (borrow (deref α0))) in
          let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
          let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Env") [])::["caller"]
                (borrow α2)) in
          M.alloc α3 in
        let* _ : Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.read caller in
          let* α2 : Ty.path "u128" := M.read token_id in
          let* α3 : Ty.path "u128" := M.read value in
          let* α4 : Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
            M.call
              ((Ty.apply
                    (Ty.path "erc1155::Mapping")
                    [Ty.tuple
                        (Ty.apply (Ty.path "erc1155::AccountId") [])
                        (Ty.path "u128");
                      Ty.path "u128"])::["insert"]
                (borrow_mut (erc1155.Contract.Get_balances (deref α0)))
                (α1, α2)
                α3) in
          M.alloc α4 in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
                (borrow (deref α0))) in
          let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
          let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.read caller in
          let* α4 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.read caller in
          let* α5 : Ty.path "u128" := M.read token_id in
          let* α6 : Ty.path "u128" := M.read value in
          let* α7 : Ty.tuple :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Env") [])::["emit_event"]
                (borrow α2)
                (erc1155.Event.TransferSingle
                  {|
                    erc1155.TransferSingle.operator :=
                      core.option.Option.Some α3;
                    erc1155.TransferSingle.from := core.option.Option.None;
                    erc1155.TransferSingle.to := core.option.Option.Some α4;
                    erc1155.TransferSingle.token_id := α5;
                    erc1155.TransferSingle.value := α6;
                  |})) in
          M.alloc α7 in
        let* α0 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []] :=
          M.alloc (core.result.Result.Ok tt) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_mint : Instance.t := {
    Notations.double_colon := mint;
  }.
  
  (*
      fn perform_transfer(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
      ) {
          let mut sender_balance = self
              .balances
              .get(&(from, token_id))
              .expect("Caller should have ensured that `from` holds `token_id`.");
          sender_balance -= value;
          self.balances.insert((from, token_id), sender_balance);
  
          let mut recipient_balance = self.balances.get(&(to, token_id)).unwrap_or(0 as u128);
          recipient_balance += value;
          self.balances.insert((to, token_id), recipient_balance);
  
          let caller = self.env().caller();
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: Some(from),
              to: Some(to),
              token_id,
              value,
          }));
      }
  *)
  Definition perform_transfer (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; from; to; token_id; value] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* sender_balance : Ty.path "u128" :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read from in
        let* α2 : Ty.path "u128" := M.read token_id in
        let* α3 :
            Ty.tuple
              (Ty.apply (Ty.path "erc1155::AccountId") [])
              (Ty.path "u128") :=
          M.alloc (α1, α2) in
        let* α4 : Ty.apply (Ty.path "core::option::Option") [Ty.path "u128"] :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple
                      (Ty.apply (Ty.path "erc1155::AccountId") [])
                      (Ty.path "u128");
                    Ty.path "u128"])::["get"]
              (borrow (erc1155.Contract.Get_balances (deref α0)))
              (borrow α3)) in
        let* α5 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read
            (mk_str
              "Caller should have ensured that `from` holds `token_id`.") in
        let* α6 : Ty.path "u128" :=
          M.call
            ((Ty.apply
                  (Ty.path "core::option::Option")
                  [Ty.path "u128"])::["expect"]
              α4
              α5) in
        M.alloc α6 in
      let* _ : Ty.tuple :=
        let β : Ty.path "u128" := sender_balance in
        let* α0 := M.read β in
        let* α1 : Ty.path "u128" := M.read value in
        let* α2 := BinOp.Panic.sub α0 α1 in
        assign β α2 in
      let* _ : Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read from in
        let* α2 : Ty.path "u128" := M.read token_id in
        let* α3 : Ty.path "u128" := M.read sender_balance in
        let* α4 : Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple
                      (Ty.apply (Ty.path "erc1155::AccountId") [])
                      (Ty.path "u128");
                    Ty.path "u128"])::["insert"]
              (borrow_mut (erc1155.Contract.Get_balances (deref α0)))
              (α1, α2)
              α3) in
        M.alloc α4 in
      let* recipient_balance : Ty.path "u128" :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read to in
        let* α2 : Ty.path "u128" := M.read token_id in
        let* α3 :
            Ty.tuple
              (Ty.apply (Ty.path "erc1155::AccountId") [])
              (Ty.path "u128") :=
          M.alloc (α1, α2) in
        let* α4 : Ty.apply (Ty.path "core::option::Option") [Ty.path "u128"] :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple
                      (Ty.apply (Ty.path "erc1155::AccountId") [])
                      (Ty.path "u128");
                    Ty.path "u128"])::["get"]
              (borrow (erc1155.Contract.Get_balances (deref α0)))
              (borrow α3)) in
        let* α5 : Ty.path "u128" :=
          M.alloc ((Integer.of_Z 0) : Ty.path "u128") in
        let* α6 : Ty.path "u128" := M.read (use α5) in
        let* α7 : Ty.path "u128" :=
          M.call
            ((Ty.apply
                  (Ty.path "core::option::Option")
                  [Ty.path "u128"])::["unwrap_or"]
              α4
              α6) in
        M.alloc α7 in
      let* _ : Ty.tuple :=
        let β : Ty.path "u128" := recipient_balance in
        let* α0 := M.read β in
        let* α1 : Ty.path "u128" := M.read value in
        let* α2 := BinOp.Panic.add α0 α1 in
        assign β α2 in
      let* _ : Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read to in
        let* α2 : Ty.path "u128" := M.read token_id in
        let* α3 : Ty.path "u128" := M.read recipient_balance in
        let* α4 : Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple
                      (Ty.apply (Ty.path "erc1155::AccountId") [])
                      (Ty.path "u128");
                    Ty.path "u128"])::["insert"]
              (borrow_mut (erc1155.Contract.Get_balances (deref α0)))
              (α1, α2)
              α3) in
        M.alloc α4 in
      let* caller : Ty.apply (Ty.path "erc1155::AccountId") [] :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
          M.call
            ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
              (borrow (deref α0))) in
        let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
        let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
          M.call
            ((Ty.apply (Ty.path "erc1155::Env") [])::["caller"] (borrow α2)) in
        M.alloc α3 in
      let* _ : Ty.tuple :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "erc1155::Contract") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
          M.call
            ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
              (borrow (deref α0))) in
        let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
        let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read caller in
        let* α4 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read from in
        let* α5 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read to in
        let* α6 : Ty.path "u128" := M.read token_id in
        let* α7 : Ty.path "u128" := M.read value in
        let* α8 : Ty.tuple :=
          M.call
            ((Ty.apply (Ty.path "erc1155::Env") [])::["emit_event"]
              (borrow α2)
              (erc1155.Event.TransferSingle
                {|
                  erc1155.TransferSingle.operator := core.option.Option.Some α3;
                  erc1155.TransferSingle.from := core.option.Option.Some α4;
                  erc1155.TransferSingle.to := core.option.Option.Some α5;
                  erc1155.TransferSingle.token_id := α6;
                  erc1155.TransferSingle.value := α7;
                |})) in
        M.alloc α8 in
      let* α0 : Ty.path "unit" := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_perform_transfer : Instance.t := {
    Notations.double_colon := perform_transfer;
  }.
  
  (*
      fn transfer_acceptance_check(
          &mut self,
          caller: AccountId,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
          data: Vec<u8>,
      ) {
          // This is disabled during tests due to the use of `invoke_contract()` not
          // being supported (tests end up panicking).
          #[cfg(not(test))]
          {
              use ink::env::call::{build_call, ExecutionInput, Selector};
  
              // If our recipient is a smart contract we need to see if they accept or
              // reject this transfer. If they reject it we need to revert the call.
              let result = build_call::<Environment>()
                  .call(to)
                  .gas_limit(5000)
                  .exec_input(
                      ExecutionInput::new(Selector::new(ON_ERC_1155_RECEIVED_SELECTOR))
                          .push_arg(caller)
                          .push_arg(from)
                          .push_arg(token_id)
                          .push_arg(value)
                          .push_arg(data),
                  )
                  .returns::<Vec<u8>>()
                  .params()
                  .try_invoke();
  
              match result {
                  Ok(v) => {
                      ink::env::debug_println!(
                          "Received return value \"{:?}\" from contract {:?}",
                          v.clone()
                              .expect("Call should be valid, don't expect a `LangError`."),
                          from
                      );
                      assert_eq!(
                          v.clone()
                              .expect("Call should be valid, don't expect a `LangError`."),
                          &ON_ERC_1155_RECEIVED_SELECTOR[..],
                          "The recipient contract at {to:?} does not accept token transfers.\n
                              Expected: {ON_ERC_1155_RECEIVED_SELECTOR:?}, Got {v:?}"
                      )
                  }
                  Err(e) => {
                      match e {
                          ink::env::Error::CodeNotFound | ink::env::Error::NotCallable => {
                              // Our recipient wasn't a smart contract, so there's
                              // nothing more for
                              // us to do
                              ink::env::debug_println!(
                                  "Recipient at {:?} from is not a smart contract ({:?})",
                                  from,
                                  e
                              );
                          }
                          _ => {
                              // We got some sort of error from the call to our
                              // recipient smart
                              // contract, and as such we must revert this call
                              panic!("Got error \"{e:?}\" while trying to call {from:?}")
                          }
                      }
                  }
              }
          }
      }
  *)
  Definition transfer_acceptance_check (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; caller; from; to; token_id; value; data] =>
      let* self := M.alloc self in
      let* caller := M.alloc caller in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* data := M.alloc data in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_transfer_acceptance_check : Instance.t := {
    Notations.double_colon := transfer_acceptance_check;
  }.
End Impl_erc1155_Contract.
End Impl_erc1155_Contract.

Module  Impl_erc1155_Erc1155_for_erc1155_Contract.
Section Impl_erc1155_Erc1155_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Contract") [].
  
  (*
      fn is_approved_for_all(&self, owner: AccountId, operator: AccountId) -> bool {
          self.approvals.contains(&(owner, operator))
      }
  *)
  Definition is_approved_for_all (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; owner; operator] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* operator := M.alloc operator in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "erc1155::Contract") []] :=
        M.read self in
      let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read owner in
      let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read operator in
      let* α3 :
          Ty.tuple
            (Ty.apply (Ty.path "erc1155::AccountId") [])
            (Ty.apply (Ty.path "erc1155::AccountId") []) :=
        M.alloc (α1, α2) in
      M.call
        ((Ty.apply
              (Ty.path "erc1155::Mapping")
              [Ty.tuple
                  (Ty.apply (Ty.path "erc1155::AccountId") [])
                  (Ty.apply (Ty.path "erc1155::AccountId") []);
                Ty.tuple])::["contains"]
          (borrow (erc1155.Contract.Get_approvals (deref α0)))
          (borrow α3))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_is_approved_for_all : Instance.t := {
    Notations.double_colon := is_approved_for_all;
  }.
  
  (*
      fn balance_of(&self, owner: AccountId, token_id: TokenId) -> Balance {
          self.balances.get(&(owner, token_id)).unwrap_or(0 as u128)
      }
  *)
  Definition balance_of (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; owner; token_id] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* token_id := M.alloc token_id in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "erc1155::Contract") []] :=
        M.read self in
      let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read owner in
      let* α2 : Ty.path "u128" := M.read token_id in
      let* α3 :
          Ty.tuple
            (Ty.apply (Ty.path "erc1155::AccountId") [])
            (Ty.path "u128") :=
        M.alloc (α1, α2) in
      let* α4 : Ty.apply (Ty.path "core::option::Option") [Ty.path "u128"] :=
        M.call
          ((Ty.apply
                (Ty.path "erc1155::Mapping")
                [Ty.tuple
                    (Ty.apply (Ty.path "erc1155::AccountId") [])
                    (Ty.path "u128");
                  Ty.path "u128"])::["get"]
            (borrow (erc1155.Contract.Get_balances (deref α0)))
            (borrow α3)) in
      let* α5 : Ty.path "u128" := M.alloc ((Integer.of_Z 0) : Ty.path "u128") in
      let* α6 : Ty.path "u128" := M.read (use α5) in
      M.call
        ((Ty.apply
              (Ty.path "core::option::Option")
              [Ty.path "u128"])::["unwrap_or"]
          α4
          α6)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_balance_of : Instance.t := {
    Notations.double_colon := balance_of;
  }.
  
  (*
      fn safe_transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
          data: Vec<u8>,
      ) -> Result<()> {
          let caller = self.env().caller();
          if caller != from {
              ensure!(self.is_approved_for_all(from, caller), Error::NotApproved);
          }
  
          ensure!(to != zero_address(), Error::ZeroAddressTransfer);
  
          let balance = self.balance_of(from, token_id);
          ensure!(balance >= value, Error::InsufficientBalance);
  
          self.perform_transfer(from, to, token_id, value);
          self.transfer_acceptance_check(caller, from, to, token_id, value, data);
  
          Ok(())
      }
  *)
  Definition safe_transfer_from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; from; to; token_id; value; data] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* data := M.alloc data in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]) in
      M.catch_return
        (let* caller : Ty.apply (Ty.path "erc1155::AccountId") [] :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
                (borrow (deref α0))) in
          let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
          let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Env") [])::["caller"]
                (borrow α2)) in
          M.alloc α3 in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []];
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []]]
                (Ty.path "bool") :=
            ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.ne
                (Self := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Rhs := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Trait := ℐ))) in
          let* α1 : Ty.path "bool" :=
            M.call (α0 (borrow caller) (borrow from)) in
          let* α2 : Ty.path "bool" := M.alloc α1 in
          let* α3 : Ty.path "bool" := M.read (use α2) in
          if α3 then
            let* _ : Ty.tuple :=
              let* α0 :
                  Ty.apply
                    (Ty.path "mut_ref")
                    [Ty.apply (Ty.path "erc1155::Contract") []] :=
                M.read self in
              let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
                M.read from in
              let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
                M.read caller in
              let* α3 : Ty.path "bool" :=
                M.call (is_approved_for_all (borrow (deref α0)) α1 α2) in
              let* α4 : Ty.path "bool" := M.alloc (UnOp.not α3) in
              let* α5 : Ty.path "bool" := M.read (use α4) in
              if α5 then
                let* α0 :
                    Ty.function
                      [Ty.apply (Ty.path "erc1155::Error") []]
                      (Ty.apply (Ty.path "erc1155::Error") []) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.convert.Into.into
                      (Self := Ty.apply (Ty.path "erc1155::Error") [])
                      (T := Ty.apply (Ty.path "erc1155::Error") [])
                      (Trait := ℐ))) in
                let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
                  M.call (α0 erc1155.Error.NotApproved) in
                let* α2 : Ty.path "never" :=
                  return_ (core.result.Result.Err α1) in
                let* α3 : Ty.path "never" := M.read α2 in
                let* α4 : Ty.tuple := never_to_any α3 in
                M.alloc α4
              else
                M.alloc tt in
            M.alloc tt
          else
            M.alloc tt in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []];
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []]]
                (Ty.path "bool") :=
            ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.ne
                (Self := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Rhs := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Trait := ℐ))) in
          let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.call erc1155.zero_address in
          let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.alloc α1 in
          let* α3 : Ty.path "bool" := M.call (α0 (borrow to) (borrow α2)) in
          let* α4 : Ty.path "bool" := M.alloc (UnOp.not α3) in
          let* α5 : Ty.path "bool" := M.read (use α4) in
          if α5 then
            let* α0 :
                Ty.function
                  [Ty.apply (Ty.path "erc1155::Error") []]
                  (Ty.apply (Ty.path "erc1155::Error") []) :=
              ltac:(M.get_method (fun ℐ =>
                core.convert.Into.into
                  (Self := Ty.apply (Ty.path "erc1155::Error") [])
                  (T := Ty.apply (Ty.path "erc1155::Error") [])
                  (Trait := ℐ))) in
            let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
              M.call (α0 erc1155.Error.ZeroAddressTransfer) in
            let* α2 : Ty.path "never" := return_ (core.result.Result.Err α1) in
            let* α3 : Ty.path "never" := M.read α2 in
            let* α4 : Ty.tuple := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* balance : Ty.path "u128" :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read from in
          let* α2 : Ty.path "u128" := M.read token_id in
          let* α3 : Ty.path "u128" :=
            M.call (balance_of (borrow (deref α0)) α1 α2) in
          M.alloc α3 in
        let* _ : Ty.tuple :=
          let* α0 : Ty.path "u128" := M.read balance in
          let* α1 : Ty.path "u128" := M.read value in
          let* α2 : Ty.path "bool" :=
            M.alloc (UnOp.not (BinOp.Pure.ge α0 α1)) in
          let* α3 : Ty.path "bool" := M.read (use α2) in
          if α3 then
            let* α0 :
                Ty.function
                  [Ty.apply (Ty.path "erc1155::Error") []]
                  (Ty.apply (Ty.path "erc1155::Error") []) :=
              ltac:(M.get_method (fun ℐ =>
                core.convert.Into.into
                  (Self := Ty.apply (Ty.path "erc1155::Error") [])
                  (T := Ty.apply (Ty.path "erc1155::Error") [])
                  (Trait := ℐ))) in
            let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
              M.call (α0 erc1155.Error.InsufficientBalance) in
            let* α2 : Ty.path "never" := return_ (core.result.Result.Err α1) in
            let* α3 : Ty.path "never" := M.read α2 in
            let* α4 : Ty.tuple := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read from in
          let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read to in
          let* α3 : Ty.path "u128" := M.read token_id in
          let* α4 : Ty.path "u128" := M.read value in
          let* α5 : Ty.tuple :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Contract") [])::["perform_transfer"]
                α0
                α1
                α2
                α3
                α4) in
          M.alloc α5 in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.read caller in
          let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read from in
          let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read to in
          let* α4 : Ty.path "u128" := M.read token_id in
          let* α5 : Ty.path "u128" := M.read value in
          let* α6 :
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
            M.read data in
          let* α7 : Ty.tuple :=
            M.call
              ((Ty.apply
                    (Ty.path "erc1155::Contract")
                    [])::["transfer_acceptance_check"]
                α0
                α1
                α2
                α3
                α4
                α5
                α6) in
          M.alloc α7 in
        let* α0 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []] :=
          M.alloc (core.result.Result.Ok tt) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_safe_transfer_from : Instance.t := {
    Notations.double_colon := safe_transfer_from;
  }.
  
  (*
      fn safe_batch_transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_ids: Vec<TokenId>,
          values: Vec<Balance>,
          data: Vec<u8>,
      ) -> Result<()> {
          let caller = self.env().caller();
          if caller != from {
              ensure!(self.is_approved_for_all(from, caller), Error::NotApproved);
          }
  
          ensure!(to != zero_address(), Error::ZeroAddressTransfer);
          ensure!(!token_ids.is_empty(), Error::BatchTransferMismatch);
          ensure!(
              token_ids.len() == values.len(),
              Error::BatchTransferMismatch,
          );
  
          let transfers = token_ids.iter().zip(values.iter());
          for (&id, &v) in transfers.clone() {
              let balance = self.balance_of(from, id);
              ensure!(balance >= v, Error::InsufficientBalance);
          }
  
          for (&id, &v) in transfers {
              self.perform_transfer(from, to, id, v);
          }
  
          // Can use the any token ID/value here, we really just care about knowing if
          // `to` is a smart contract which accepts transfers
          self.transfer_acceptance_check(caller, from, to, token_ids[0], values[0], data);
  
          Ok(())
      }
  *)
  Definition safe_batch_transfer_from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; from; to; token_ids; values; data] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_ids := M.alloc token_ids in
      let* values := M.alloc values in
      let* data := M.alloc data in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]) in
      M.catch_return
        (let* caller : Ty.apply (Ty.path "erc1155::AccountId") [] :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
                (borrow (deref α0))) in
          let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
          let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Env") [])::["caller"]
                (borrow α2)) in
          M.alloc α3 in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []];
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []]]
                (Ty.path "bool") :=
            ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.ne
                (Self := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Rhs := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Trait := ℐ))) in
          let* α1 : Ty.path "bool" :=
            M.call (α0 (borrow caller) (borrow from)) in
          let* α2 : Ty.path "bool" := M.alloc α1 in
          let* α3 : Ty.path "bool" := M.read (use α2) in
          if α3 then
            let* _ : Ty.tuple :=
              let* α0 :
                  Ty.apply
                    (Ty.path "mut_ref")
                    [Ty.apply (Ty.path "erc1155::Contract") []] :=
                M.read self in
              let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
                M.read from in
              let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
                M.read caller in
              let* α3 : Ty.path "bool" :=
                M.call (is_approved_for_all (borrow (deref α0)) α1 α2) in
              let* α4 : Ty.path "bool" := M.alloc (UnOp.not α3) in
              let* α5 : Ty.path "bool" := M.read (use α4) in
              if α5 then
                let* α0 :
                    Ty.function
                      [Ty.apply (Ty.path "erc1155::Error") []]
                      (Ty.apply (Ty.path "erc1155::Error") []) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.convert.Into.into
                      (Self := Ty.apply (Ty.path "erc1155::Error") [])
                      (T := Ty.apply (Ty.path "erc1155::Error") [])
                      (Trait := ℐ))) in
                let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
                  M.call (α0 erc1155.Error.NotApproved) in
                let* α2 : Ty.path "never" :=
                  return_ (core.result.Result.Err α1) in
                let* α3 : Ty.path "never" := M.read α2 in
                let* α4 : Ty.tuple := never_to_any α3 in
                M.alloc α4
              else
                M.alloc tt in
            M.alloc tt
          else
            M.alloc tt in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []];
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []]]
                (Ty.path "bool") :=
            ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.ne
                (Self := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Rhs := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Trait := ℐ))) in
          let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.call erc1155.zero_address in
          let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.alloc α1 in
          let* α3 : Ty.path "bool" := M.call (α0 (borrow to) (borrow α2)) in
          let* α4 : Ty.path "bool" := M.alloc (UnOp.not α3) in
          let* α5 : Ty.path "bool" := M.read (use α4) in
          if α5 then
            let* α0 :
                Ty.function
                  [Ty.apply (Ty.path "erc1155::Error") []]
                  (Ty.apply (Ty.path "erc1155::Error") []) :=
              ltac:(M.get_method (fun ℐ =>
                core.convert.Into.into
                  (Self := Ty.apply (Ty.path "erc1155::Error") [])
                  (T := Ty.apply (Ty.path "erc1155::Error") [])
                  (Trait := ℐ))) in
            let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
              M.call (α0 erc1155.Error.ZeroAddressTransfer) in
            let* α2 : Ty.path "never" := return_ (core.result.Result.Err α1) in
            let* α3 : Ty.path "never" := M.read α2 in
            let* α4 : Ty.tuple := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* _ : Ty.tuple :=
          let* α0 : Ty.path "bool" :=
            M.call
              ((Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128";
                      Ty.apply
                        (Ty.path "alloc::alloc::Global")
                        []])::["is_empty"]
                (borrow token_ids)) in
          let* α1 : Ty.path "bool" := M.alloc (UnOp.not (UnOp.not α0)) in
          let* α2 : Ty.path "bool" := M.read (use α1) in
          if α2 then
            let* α0 :
                Ty.function
                  [Ty.apply (Ty.path "erc1155::Error") []]
                  (Ty.apply (Ty.path "erc1155::Error") []) :=
              ltac:(M.get_method (fun ℐ =>
                core.convert.Into.into
                  (Self := Ty.apply (Ty.path "erc1155::Error") [])
                  (T := Ty.apply (Ty.path "erc1155::Error") [])
                  (Trait := ℐ))) in
            let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
              M.call (α0 erc1155.Error.BatchTransferMismatch) in
            let* α2 : Ty.path "never" := return_ (core.result.Result.Err α1) in
            let* α3 : Ty.path "never" := M.read α2 in
            let* α4 : Ty.tuple := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* _ : Ty.tuple :=
          let* α0 : Ty.path "usize" :=
            M.call
              ((Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128";
                      Ty.apply (Ty.path "alloc::alloc::Global") []])::["len"]
                (borrow token_ids)) in
          let* α1 : Ty.path "usize" :=
            M.call
              ((Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128";
                      Ty.apply (Ty.path "alloc::alloc::Global") []])::["len"]
                (borrow values)) in
          let* α2 : Ty.path "bool" :=
            M.alloc (UnOp.not (BinOp.Pure.eq α0 α1)) in
          let* α3 : Ty.path "bool" := M.read (use α2) in
          if α3 then
            let* α0 :
                Ty.function
                  [Ty.apply (Ty.path "erc1155::Error") []]
                  (Ty.apply (Ty.path "erc1155::Error") []) :=
              ltac:(M.get_method (fun ℐ =>
                core.convert.Into.into
                  (Self := Ty.apply (Ty.path "erc1155::Error") [])
                  (T := Ty.apply (Ty.path "erc1155::Error") [])
                  (Trait := ℐ))) in
            let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
              M.call (α0 erc1155.Error.BatchTransferMismatch) in
            let* α2 : Ty.path "never" := return_ (core.result.Result.Err α1) in
            let* α3 : Ty.path "never" := M.read α2 in
            let* α4 : Ty.tuple := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* transfers :
            Ty.apply
              (Ty.path "core::iter::adapters::zip::Zip")
              [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                Ty.apply
                  (Ty.path "core::slice::iter::Iter")
                  [Ty.path "u128"]] :=
          let* α0 :
              Ty.function
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                  Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"]]
                (Ty.apply
                  (Ty.path "core::iter::adapters::zip::Zip")
                  [Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      [Ty.path "u128"];
                    _]) :=
            ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.zip
                (Self :=
                  Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"])
                (U :=
                  Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"])
                (Trait := ℐ))) in
          let* α1 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.path "u128";
                          Ty.apply (Ty.path "alloc::alloc::Global") []]]]
                (Ty.apply (Ty.path "ref") [_]) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.deref.Deref.deref
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128";
                      Ty.apply (Ty.path "alloc::alloc::Global") []])
                (Trait := ℐ))) in
          let* α2 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "slice") [Ty.path "u128"]] :=
            M.call (α1 (borrow token_ids)) in
          let* α3 :
              Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"] :=
            M.call
              ((Ty.apply (Ty.path "slice") [Ty.path "u128"])::["iter"] α2) in
          let* α4 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.path "u128";
                          Ty.apply (Ty.path "alloc::alloc::Global") []]]]
                (Ty.apply (Ty.path "ref") [_]) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.deref.Deref.deref
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128";
                      Ty.apply (Ty.path "alloc::alloc::Global") []])
                (Trait := ℐ))) in
          let* α5 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "slice") [Ty.path "u128"]] :=
            M.call (α4 (borrow values)) in
          let* α6 :
              Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"] :=
            M.call
              ((Ty.apply (Ty.path "slice") [Ty.path "u128"])::["iter"] α5) in
          let* α7 :
              Ty.apply
                (Ty.path "core::iter::adapters::zip::Zip")
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [Ty.path "u128"]] :=
            M.call (α0 α3 α6) in
          M.alloc α7 in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.function
                [Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"]]]
                _ :=
            ltac:(M.get_method (fun ℐ =>
              core.iter.traits.collect.IntoIterator.into_iter
                (Self :=
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"]])
                (Trait := ℐ))) in
          let* α1 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        [Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [Ty.path "u128"];
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [Ty.path "u128"]]]]
                (Ty.apply
                  (Ty.path "core::iter::adapters::zip::Zip")
                  [Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      [Ty.path "u128"];
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      [Ty.path "u128"]]) :=
            ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone
                (Self :=
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"]])
                (Trait := ℐ))) in
          let* α2 :
              Ty.apply
                (Ty.path "core::iter::adapters::zip::Zip")
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [Ty.path "u128"]] :=
            M.call (α1 (borrow transfers)) in
          let* α3 :
              Ty.apply
                (Ty.path "core::iter::adapters::zip::Zip")
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [Ty.path "u128"]] :=
            M.call (α0 α2) in
          let* α4 :
              Ty.apply
                (Ty.path "core::iter::adapters::zip::Zip")
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [Ty.path "u128"]] :=
            M.alloc α3 in
          let* α5 : Ty.tuple :=
            match_operator
              α4
              [
                fun γ =>
                  (let* iter := M.copy γ in
                  M.loop
                    (let* _ : Ty.tuple :=
                      let* α0 :
                          Ty.function
                            [Ty.apply
                                (Ty.path "mut_ref")
                                [Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [Ty.path "u128"];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [Ty.path "u128"]]]]
                            (Ty.apply (Ty.path "core::option::Option") [_]) :=
                        ltac:(M.get_method (fun ℐ =>
                          core.iter.traits.iterator.Iterator.next
                            (Self :=
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [Ty.path "u128"];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [Ty.path "u128"]])
                            (Trait := ℐ))) in
                      let* α1 :
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.tuple
                                (Ty.apply (Ty.path "ref") [Ty.path "u128"])
                                (Ty.apply (Ty.path "ref") [Ty.path "u128"])] :=
                        M.call (α0 (borrow_mut iter)) in
                      let* α2 :
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.tuple
                                (Ty.apply (Ty.path "ref") [Ty.path "u128"])
                                (Ty.apply (Ty.path "ref") [Ty.path "u128"])] :=
                        M.alloc α1 in
                      match_operator
                        α2
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.None =>
                              let* α0 : Ty.path "never" := M.break in
                              let* α1 : Ty.path "never" := M.read α0 in
                              let* α2 : Ty.tuple := never_to_any α1 in
                              M.alloc α2
                            | _ => M.break_match
                            end) :
                            Ty.tuple;
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let* α0 := M.read γ0_0 in
                              match α0 with
                              | (_, _) =>
                                let γ1_0 := Tuple.Access.left γ0_0 in
                                let γ1_1 := Tuple.Access.right γ0_0 in
                                let* γ1_0 :=
                                  let* α0 := M.read γ1_0 in
                                  M.pure (deref α0) in
                                let* id := M.copy γ1_0 in
                                let* γ1_1 :=
                                  let* α0 := M.read γ1_1 in
                                  M.pure (deref α0) in
                                let* v := M.copy γ1_1 in
                                let* balance : Ty.path "u128" :=
                                  let* α0 :
                                      Ty.apply
                                        (Ty.path "mut_ref")
                                        [Ty.apply
                                            (Ty.path "erc1155::Contract")
                                            []] :=
                                    M.read self in
                                  let* α1 :
                                      Ty.apply
                                        (Ty.path "erc1155::AccountId")
                                        [] :=
                                    M.read from in
                                  let* α2 : Ty.path "u128" := M.read id in
                                  let* α3 : Ty.path "u128" :=
                                    M.call
                                      (balance_of (borrow (deref α0)) α1 α2) in
                                  M.alloc α3 in
                                let* _ : Ty.tuple :=
                                  let* α0 : Ty.path "u128" := M.read balance in
                                  let* α1 : Ty.path "u128" := M.read v in
                                  let* α2 : Ty.path "bool" :=
                                    M.alloc (UnOp.not (BinOp.Pure.ge α0 α1)) in
                                  let* α3 : Ty.path "bool" := M.read (use α2) in
                                  if α3 then
                                    let* α0 :
                                        Ty.function
                                          [Ty.apply
                                              (Ty.path "erc1155::Error")
                                              []]
                                          (Ty.apply
                                            (Ty.path "erc1155::Error")
                                            []) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.convert.Into.into
                                          (Self :=
                                            Ty.apply
                                              (Ty.path "erc1155::Error")
                                              [])
                                          (T :=
                                            Ty.apply
                                              (Ty.path "erc1155::Error")
                                              [])
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        Ty.apply
                                          (Ty.path "erc1155::Error")
                                          [] :=
                                      M.call
                                        (α0
                                          erc1155.Error.InsufficientBalance) in
                                    let* α2 : Ty.path "never" :=
                                      return_ (core.result.Result.Err α1) in
                                    let* α3 : Ty.path "never" := M.read α2 in
                                    let* α4 : Ty.tuple := never_to_any α3 in
                                    M.alloc α4
                                  else
                                    M.alloc tt in
                                M.alloc tt
                              end
                            | _ => M.break_match
                            end) :
                            Ty.tuple
                        ] in
                    M.alloc tt)) :
                  Ty.tuple
              ] in
          M.pure (use α5) in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.function
                [Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"]]]
                _ :=
            ltac:(M.get_method (fun ℐ =>
              core.iter.traits.collect.IntoIterator.into_iter
                (Self :=
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"]])
                (Trait := ℐ))) in
          let* α1 :
              Ty.apply
                (Ty.path "core::iter::adapters::zip::Zip")
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [Ty.path "u128"]] :=
            M.read transfers in
          let* α2 :
              Ty.apply
                (Ty.path "core::iter::adapters::zip::Zip")
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [Ty.path "u128"]] :=
            M.call (α0 α1) in
          let* α3 :
              Ty.apply
                (Ty.path "core::iter::adapters::zip::Zip")
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"];
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [Ty.path "u128"]] :=
            M.alloc α2 in
          let* α4 : Ty.tuple :=
            match_operator
              α3
              [
                fun γ =>
                  (let* iter := M.copy γ in
                  M.loop
                    (let* _ : Ty.tuple :=
                      let* α0 :
                          Ty.function
                            [Ty.apply
                                (Ty.path "mut_ref")
                                [Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [Ty.path "u128"];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [Ty.path "u128"]]]]
                            (Ty.apply (Ty.path "core::option::Option") [_]) :=
                        ltac:(M.get_method (fun ℐ =>
                          core.iter.traits.iterator.Iterator.next
                            (Self :=
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [Ty.path "u128"];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [Ty.path "u128"]])
                            (Trait := ℐ))) in
                      let* α1 :
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.tuple
                                (Ty.apply (Ty.path "ref") [Ty.path "u128"])
                                (Ty.apply (Ty.path "ref") [Ty.path "u128"])] :=
                        M.call (α0 (borrow_mut iter)) in
                      let* α2 :
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.tuple
                                (Ty.apply (Ty.path "ref") [Ty.path "u128"])
                                (Ty.apply (Ty.path "ref") [Ty.path "u128"])] :=
                        M.alloc α1 in
                      match_operator
                        α2
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.None =>
                              let* α0 : Ty.path "never" := M.break in
                              let* α1 : Ty.path "never" := M.read α0 in
                              let* α2 : Ty.tuple := never_to_any α1 in
                              M.alloc α2
                            | _ => M.break_match
                            end) :
                            Ty.tuple;
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let* α0 := M.read γ0_0 in
                              match α0 with
                              | (_, _) =>
                                let γ1_0 := Tuple.Access.left γ0_0 in
                                let γ1_1 := Tuple.Access.right γ0_0 in
                                let* γ1_0 :=
                                  let* α0 := M.read γ1_0 in
                                  M.pure (deref α0) in
                                let* id := M.copy γ1_0 in
                                let* γ1_1 :=
                                  let* α0 := M.read γ1_1 in
                                  M.pure (deref α0) in
                                let* v := M.copy γ1_1 in
                                let* _ : Ty.tuple :=
                                  let* α0 :
                                      Ty.apply
                                        (Ty.path "mut_ref")
                                        [Ty.apply
                                            (Ty.path "erc1155::Contract")
                                            []] :=
                                    M.read self in
                                  let* α1 :
                                      Ty.apply
                                        (Ty.path "erc1155::AccountId")
                                        [] :=
                                    M.read from in
                                  let* α2 :
                                      Ty.apply
                                        (Ty.path "erc1155::AccountId")
                                        [] :=
                                    M.read to in
                                  let* α3 : Ty.path "u128" := M.read id in
                                  let* α4 : Ty.path "u128" := M.read v in
                                  let* α5 : Ty.tuple :=
                                    M.call
                                      ((Ty.apply
                                            (Ty.path "erc1155::Contract")
                                            [])::["perform_transfer"]
                                        α0
                                        α1
                                        α2
                                        α3
                                        α4) in
                                  M.alloc α5 in
                                M.alloc tt
                              end
                            | _ => M.break_match
                            end) :
                            Ty.tuple
                        ] in
                    M.alloc tt)) :
                  Ty.tuple
              ] in
          M.pure (use α4) in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.read caller in
          let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read from in
          let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] := M.read to in
          let* α4 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.path "u128";
                          Ty.apply (Ty.path "alloc::alloc::Global") []]];
                  Ty.path "usize"]
                (Ty.apply (Ty.path "ref") [_]) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.index.Index.index
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128";
                      Ty.apply (Ty.path "alloc::alloc::Global") []])
                (Idx := Ty.path "usize")
                (Trait := ℐ))) in
          let* α5 : Ty.apply (Ty.path "ref") [Ty.path "u128"] :=
            M.call
              (α4 (borrow token_ids) ((Integer.of_Z 0) : Ty.path "usize")) in
          let* α6 : Ty.path "u128" := M.read (deref α5) in
          let* α7 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.path "u128";
                          Ty.apply (Ty.path "alloc::alloc::Global") []]];
                  Ty.path "usize"]
                (Ty.apply (Ty.path "ref") [_]) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.index.Index.index
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128";
                      Ty.apply (Ty.path "alloc::alloc::Global") []])
                (Idx := Ty.path "usize")
                (Trait := ℐ))) in
          let* α8 : Ty.apply (Ty.path "ref") [Ty.path "u128"] :=
            M.call (α7 (borrow values) ((Integer.of_Z 0) : Ty.path "usize")) in
          let* α9 : Ty.path "u128" := M.read (deref α8) in
          let* α10 :
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
            M.read data in
          let* α11 : Ty.tuple :=
            M.call
              ((Ty.apply
                    (Ty.path "erc1155::Contract")
                    [])::["transfer_acceptance_check"]
                α0
                α1
                α2
                α3
                α6
                α9
                α10) in
          M.alloc α11 in
        let* α0 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []] :=
          M.alloc (core.result.Result.Ok tt) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_safe_batch_transfer_from : Instance.t := {
    Notations.double_colon := safe_batch_transfer_from;
  }.
  
  (*
      fn balance_of_batch(&self, owners: Vec<AccountId>, token_ids: Vec<TokenId>) -> Vec<Balance> {
          let mut output = Vec::new();
          for o in &owners {
              for t in &token_ids {
                  let amount = self.balance_of( *o, *t);
                  output.push(amount);
              }
          }
          output
      }
  *)
  Definition balance_of_batch (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; owners; token_ids] =>
      let* self := M.alloc self in
      let* owners := M.alloc owners in
      let* token_ids := M.alloc token_ids in
      let* output :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        let* α0 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.path "u128"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u128";
                  Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"] in
        M.alloc α0 in
      let* _ : Ty.tuple :=
        let* α0 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "erc1155::AccountId") [];
                        Ty.apply (Ty.path "alloc::alloc::Global") []]]]
              _ :=
          ltac:(M.get_method (fun ℐ =>
            core.iter.traits.collect.IntoIterator.into_iter
              (Self :=
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "erc1155::AccountId") [];
                        Ty.apply (Ty.path "alloc::alloc::Global") []]])
              (Trait := ℐ))) in
        let* α1 :
            Ty.apply
              (Ty.path "core::slice::iter::Iter")
              [Ty.apply (Ty.path "erc1155::AccountId") []] :=
          M.call (α0 (borrow owners)) in
        let* α2 :
            Ty.apply
              (Ty.path "core::slice::iter::Iter")
              [Ty.apply (Ty.path "erc1155::AccountId") []] :=
          M.alloc α1 in
        let* α3 : Ty.tuple :=
          match_operator
            α2
            [
              fun γ =>
                (let* iter := M.copy γ in
                M.loop
                  (let* _ : Ty.tuple :=
                    let* α0 :
                        Ty.function
                          [Ty.apply
                              (Ty.path "mut_ref")
                              [Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [Ty.apply (Ty.path "erc1155::AccountId") []]]]
                          (Ty.apply (Ty.path "core::option::Option") [_]) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.iter.traits.iterator.Iterator.next
                          (Self :=
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [Ty.apply (Ty.path "erc1155::AccountId") []])
                          (Trait := ℐ))) in
                    let* α1 :
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [Ty.apply
                              (Ty.path "ref")
                              [Ty.apply (Ty.path "erc1155::AccountId") []]] :=
                      M.call (α0 (borrow_mut iter)) in
                    let* α2 :
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [Ty.apply
                              (Ty.path "ref")
                              [Ty.apply (Ty.path "erc1155::AccountId") []]] :=
                      M.alloc α1 in
                    match_operator
                      α2
                      [
                        fun γ =>
                          (let* α0 := M.read γ in
                          match α0 with
                          | core.option.Option.None =>
                            let* α0 : Ty.path "never" := M.break in
                            let* α1 : Ty.path "never" := M.read α0 in
                            let* α2 : Ty.tuple := never_to_any α1 in
                            M.alloc α2
                          | _ => M.break_match
                          end) :
                          Ty.tuple;
                        fun γ =>
                          (let* α0 := M.read γ in
                          match α0 with
                          | core.option.Option.Some _ =>
                            let γ0_0 := core.option.Option.Get_Some_0 γ in
                            let* o := M.copy γ0_0 in
                            let* α0 :
                                Ty.function
                                  [Ty.apply
                                      (Ty.path "ref")
                                      [Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [Ty.path "u128";
                                            Ty.apply
                                              (Ty.path "alloc::alloc::Global")
                                              []]]]
                                  _ :=
                              ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.collect.IntoIterator.into_iter
                                  (Self :=
                                    Ty.apply
                                      (Ty.path "ref")
                                      [Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [Ty.path "u128";
                                            Ty.apply
                                              (Ty.path "alloc::alloc::Global")
                                              []]])
                                  (Trait := ℐ))) in
                            let* α1 :
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [Ty.path "u128"] :=
                              M.call (α0 (borrow token_ids)) in
                            let* α2 :
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [Ty.path "u128"] :=
                              M.alloc α1 in
                            let* α3 : Ty.tuple :=
                              match_operator
                                α2
                                [
                                  fun γ =>
                                    (let* iter := M.copy γ in
                                    M.loop
                                      (let* _ : Ty.tuple :=
                                        let* α0 :
                                            Ty.function
                                              [Ty.apply
                                                  (Ty.path "mut_ref")
                                                  [Ty.apply
                                                      (Ty.path
                                                        "core::slice::iter::Iter")
                                                      [Ty.path "u128"]]]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [_]) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.next
                                              (Self :=
                                                Ty.apply
                                                  (Ty.path
                                                    "core::slice::iter::Iter")
                                                  [Ty.path "u128"])
                                              (Trait := ℐ))) in
                                        let* α1 :
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [Ty.apply
                                                  (Ty.path "ref")
                                                  [Ty.path "u128"]] :=
                                          M.call (α0 (borrow_mut iter)) in
                                        let* α2 :
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [Ty.apply
                                                  (Ty.path "ref")
                                                  [Ty.path "u128"]] :=
                                          M.alloc α1 in
                                        match_operator
                                          α2
                                          [
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.option.Option.None =>
                                                let* α0 : Ty.path "never" :=
                                                  M.break in
                                                let* α1 : Ty.path "never" :=
                                                  M.read α0 in
                                                let* α2 : Ty.tuple :=
                                                  never_to_any α1 in
                                                M.alloc α2
                                              | _ => M.break_match
                                              end) :
                                              Ty.tuple;
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.option.Option.Some _ =>
                                                let γ0_0 :=
                                                  core.option.Option.Get_Some_0
                                                    γ in
                                                let* t := M.copy γ0_0 in
                                                let* amount : Ty.path "u128" :=
                                                  let* α0 :
                                                      Ty.apply
                                                        (Ty.path "ref")
                                                        [Ty.apply
                                                            (Ty.path
                                                              "erc1155::Contract")
                                                            []] :=
                                                    M.read self in
                                                  let* α1 :
                                                      Ty.apply
                                                        (Ty.path "ref")
                                                        [Ty.apply
                                                            (Ty.path
                                                              "erc1155::AccountId")
                                                            []] :=
                                                    M.read o in
                                                  let* α2 :
                                                      Ty.apply
                                                        (Ty.path
                                                          "erc1155::AccountId")
                                                        [] :=
                                                    M.read (deref α1) in
                                                  let* α3 :
                                                      Ty.apply
                                                        (Ty.path "ref")
                                                        [Ty.path "u128"] :=
                                                    M.read t in
                                                  let* α4 : Ty.path "u128" :=
                                                    M.read (deref α3) in
                                                  let* α5 : Ty.path "u128" :=
                                                    M.call
                                                      (balance_of α0 α2 α4) in
                                                  M.alloc α5 in
                                                let* _ : Ty.tuple :=
                                                  let* α0 : Ty.path "u128" :=
                                                    M.read amount in
                                                  let* α1 : Ty.tuple :=
                                                    M.call
                                                      ((Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::Vec")
                                                            [Ty.path "u128";
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::alloc::Global")
                                                                []])::["push"]
                                                        (borrow_mut output)
                                                        α0) in
                                                  M.alloc α1 in
                                                M.alloc tt
                                              | _ => M.break_match
                                              end) :
                                              Ty.tuple
                                          ] in
                                      M.alloc tt)) :
                                    Ty.tuple
                                ] in
                            M.pure (use α3)
                          | _ => M.break_match
                          end) :
                          Ty.tuple
                      ] in
                  M.alloc tt)) :
                Ty.tuple
            ] in
        M.pure (use α3) in
      M.read output
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_balance_of_batch : Instance.t := {
    Notations.double_colon := balance_of_batch;
  }.
  
  (*
      fn set_approval_for_all(&mut self, operator: AccountId, approved: bool) -> Result<()> {
          let caller = self.env().caller();
          ensure!(operator != caller, Error::SelfApproval);
  
          if approved {
              self.approvals.insert((caller, operator), ());
          } else {
              self.approvals.remove((caller, operator));
          }
  
          self.env().emit_event(Event::ApprovalForAll(ApprovalForAll {
              owner: caller,
              operator,
              approved,
          }));
  
          Ok(())
      }
  *)
  Definition set_approval_for_all (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; operator; approved] =>
      let* self := M.alloc self in
      let* operator := M.alloc operator in
      let* approved := M.alloc approved in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []]) in
      M.catch_return
        (let* caller : Ty.apply (Ty.path "erc1155::AccountId") [] :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
                (borrow (deref α0))) in
          let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
          let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Env") [])::["caller"]
                (borrow α2)) in
          M.alloc α3 in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.function
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []];
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "erc1155::AccountId") []]]
                (Ty.path "bool") :=
            ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.ne
                (Self := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Rhs := Ty.apply (Ty.path "erc1155::AccountId") [])
                (Trait := ℐ))) in
          let* α1 : Ty.path "bool" :=
            M.call (α0 (borrow operator) (borrow caller)) in
          let* α2 : Ty.path "bool" := M.alloc (UnOp.not α1) in
          let* α3 : Ty.path "bool" := M.read (use α2) in
          if α3 then
            let* α0 :
                Ty.function
                  [Ty.apply (Ty.path "erc1155::Error") []]
                  (Ty.apply (Ty.path "erc1155::Error") []) :=
              ltac:(M.get_method (fun ℐ =>
                core.convert.Into.into
                  (Self := Ty.apply (Ty.path "erc1155::Error") [])
                  (T := Ty.apply (Ty.path "erc1155::Error") [])
                  (Trait := ℐ))) in
            let* α1 : Ty.apply (Ty.path "erc1155::Error") [] :=
              M.call (α0 erc1155.Error.SelfApproval) in
            let* α2 : Ty.path "never" := return_ (core.result.Result.Err α1) in
            let* α3 : Ty.path "never" := M.read α2 in
            let* α4 : Ty.tuple := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* _ : Ty.tuple :=
          let* α0 : Ty.path "bool" := M.read (use approved) in
          if α0 then
            let* _ :
                Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
              let* α0 :
                  Ty.apply
                    (Ty.path "mut_ref")
                    [Ty.apply (Ty.path "erc1155::Contract") []] :=
                M.read self in
              let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
                M.read caller in
              let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
                M.read operator in
              let* α3 :
                  Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
                M.call
                  ((Ty.apply
                        (Ty.path "erc1155::Mapping")
                        [Ty.tuple
                            (Ty.apply (Ty.path "erc1155::AccountId") [])
                            (Ty.apply (Ty.path "erc1155::AccountId") []);
                          Ty.tuple])::["insert"]
                    (borrow_mut (erc1155.Contract.Get_approvals (deref α0)))
                    (α1, α2)
                    tt) in
              M.alloc α3 in
            M.alloc tt
          else
            let* _ : Ty.tuple :=
              let* α0 :
                  Ty.apply
                    (Ty.path "mut_ref")
                    [Ty.apply (Ty.path "erc1155::Contract") []] :=
                M.read self in
              let* α1 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
                M.read caller in
              let* α2 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
                M.read operator in
              let* α3 : Ty.tuple :=
                M.call
                  ((Ty.apply
                        (Ty.path "erc1155::Mapping")
                        [Ty.tuple
                            (Ty.apply (Ty.path "erc1155::AccountId") [])
                            (Ty.apply (Ty.path "erc1155::AccountId") []);
                          Ty.tuple])::["remove"]
                    (borrow (erc1155.Contract.Get_approvals (deref α0)))
                    (α1, α2)) in
              M.alloc α3 in
            M.alloc tt in
        let* _ : Ty.tuple :=
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "erc1155::Contract") []] :=
            M.read self in
          let* α1 : Ty.apply (Ty.path "erc1155::Env") [] :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Contract") [])::["env"]
                (borrow (deref α0))) in
          let* α2 : Ty.apply (Ty.path "erc1155::Env") [] := M.alloc α1 in
          let* α3 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.read caller in
          let* α4 : Ty.apply (Ty.path "erc1155::AccountId") [] :=
            M.read operator in
          let* α5 : Ty.path "bool" := M.read approved in
          let* α6 : Ty.tuple :=
            M.call
              ((Ty.apply (Ty.path "erc1155::Env") [])::["emit_event"]
                (borrow α2)
                (erc1155.Event.ApprovalForAll
                  {|
                    erc1155.ApprovalForAll.owner := α3;
                    erc1155.ApprovalForAll.operator := α4;
                    erc1155.ApprovalForAll.approved := α5;
                  |})) in
          M.alloc α6 in
        let* α0 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "erc1155::Error") []] :=
          M.alloc (core.result.Result.Ok tt) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_set_approval_for_all : Instance.t := {
    Notations.double_colon := set_approval_for_all;
  }.
  
  Definition ℐ : Instance.t := [("is_approved_for_all", is_approved_for_all);
    ("balance_of", balance_of);
    ("safe_transfer_from", safe_transfer_from);
    ("safe_batch_transfer_from", safe_batch_transfer_from);
    ("balance_of_batch", balance_of_batch);
    ("set_approval_for_all", set_approval_for_all)].
End Impl_erc1155_Erc1155_for_erc1155_Contract.
End Impl_erc1155_Erc1155_for_erc1155_Contract.

Module  Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
Section Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.apply (Ty.path "erc1155::Contract") [].
  
  (*
      fn on_received(
          &mut self,
          _operator: AccountId,
          _from: AccountId,
          _token_id: TokenId,
          _value: Balance,
          _data: Vec<u8>,
      ) -> Vec<u8> {
          // The ERC-1155 standard dictates that if a contract does not accept token
          // transfers directly to the contract, then the contract must
          // revert.
          //
          // This prevents a user from unintentionally transferring tokens to a smart
          // contract and getting their funds stuck without any sort of
          // recovery mechanism.
          //
          // Note that the choice of whether or not to accept tokens is implementation
          // specific, and we've decided to not accept them in this
          // implementation.
          unimplemented!("This smart contract does not accept token transfer.")
      }
  *)
  Definition on_received (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _operator; _from; _token_id; _value; _data] =>
      let* self := M.alloc self in
      let* _operator := M.alloc _operator in
      let* _from := M.alloc _from in
      let* _token_id := M.alloc _token_id in
      let* _value := M.alloc _value in
      let* _data := M.alloc _data in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read
          (mk_str
            "not implemented: This smart contract does not accept token transfer.") in
      let* α1 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ α0 ] in
      let* α2 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
        M.call (Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["none"] in
      let* α3 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
        M.alloc α2 in
      let* α4 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
        M.call
          ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
            (pointer_coercion "Unsize" (borrow α1))
            (pointer_coercion "Unsize" (borrow α3))) in
      let* α5 : Ty.path "never" := M.call (core.panicking.panic_fmt α4) in
      never_to_any α5
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_on_received : Instance.t := {
    Notations.double_colon := on_received;
  }.
  
  (*
      fn on_batch_received(
          &mut self,
          _operator: AccountId,
          _from: AccountId,
          _token_ids: Vec<TokenId>,
          _values: Vec<Balance>,
          _data: Vec<u8>,
      ) -> Vec<u8> {
          // The ERC-1155 standard dictates that if a contract does not accept token
          // transfers directly to the contract, then the contract must
          // revert.
          //
          // This prevents a user from unintentionally transferring tokens to a smart
          // contract and getting their funds stuck without any sort of
          // recovery mechanism.
          //
          // Note that the choice of whether or not to accept tokens is implementation
          // specific, and we've decided to not accept them in this
          // implementation.
          unimplemented!("This smart contract does not accept batch token transfers.")
      }
  *)
  Definition on_batch_received (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _operator; _from; _token_ids; _values; _data] =>
      let* self := M.alloc self in
      let* _operator := M.alloc _operator in
      let* _from := M.alloc _from in
      let* _token_ids := M.alloc _token_ids in
      let* _values := M.alloc _values in
      let* _data := M.alloc _data in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read
          (mk_str
            "not implemented: This smart contract does not accept batch token transfers.") in
      let* α1 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ α0 ] in
      let* α2 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
        M.call (Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["none"] in
      let* α3 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
        M.alloc α2 in
      let* α4 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
        M.call
          ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
            (pointer_coercion "Unsize" (borrow α1))
            (pointer_coercion "Unsize" (borrow α3))) in
      let* α5 : Ty.path "never" := M.call (core.panicking.panic_fmt α4) in
      never_to_any α5
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_on_batch_received : Instance.t := {
    Notations.double_colon := on_batch_received;
  }.
  
  Definition ℐ : Instance.t := [("on_received", on_received);
    ("on_batch_received", on_batch_received)].
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
