(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Mapping *)

Module Impl_core_default_Default_for_erc1155_Mapping_K_V.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ K ] ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ V ] ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord "erc1155::Mapping" [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.apply (Ty.path "erc1155::Mapping") [ K; V ])
      []
      [ ("default", InstanceField.Method default [ K; V ]) ].
End Impl_core_default_Default_for_erc1155_Mapping_K_V.

Module Impl_erc1155_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "erc1155::Mapping") [ K; V ].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Definition contains (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_contains :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "contains" contains [ K; V ].
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "get" get [ K; V ].
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition insert (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key; _value ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "insert" insert [ K; V ].
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Definition remove (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_remove :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "remove" remove [ K; V ].
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition size (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_size :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "size" size [ K; V ].
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition take (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_take :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "take" take [ K; V ].
End Impl_erc1155_Mapping_K_V.

(* Struct AccountId *)

Module Impl_core_default_Default_for_erc1155_AccountId.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α1 := M.call α0 [] in
      M.pure (Value.StructTuple "erc1155::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "erc1155::AccountId")
      []
      [ ("default", InstanceField.Method default []) ].
End Impl_core_default_Default_for_erc1155_AccountId.

Module Impl_core_clone_Clone_for_erc1155_AccountId.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [
            fun γ =>
              (let* α0 := M.read self in
              M.pure (deref α0)) :
              Ty.path "erc1155::AccountId"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "erc1155::AccountId")
      []
      [ ("clone", InstanceField.Method clone []) ].
End Impl_core_clone_Clone_for_erc1155_AccountId.

Module Impl_core_marker_Copy_for_erc1155_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.path "erc1155::AccountId")
      []
      [].
End Impl_core_marker_Copy_for_erc1155_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "erc1155::AccountId")
      []
      [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.

Module Impl_core_cmp_PartialEq_for_erc1155_AccountId.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.var "BinOp::Pure::eq" in
      let* α1 := M.var "erc1155::AccountId::Get_0" in
      let* α2 := M.read self in
      let* α3 := M.read (α1 (deref α2)) in
      let* α4 := M.var "erc1155::AccountId::Get_0" in
      let* α5 := M.read other in
      let* α6 := M.read (α4 (deref α5)) in
      M.pure (α0 α3 α6)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "erc1155::AccountId")
      []
      [ ("eq", InstanceField.Method eq []) ].
End Impl_core_cmp_PartialEq_for_erc1155_AccountId.

Module Impl_core_convert_From_array_u8_for_erc1155_AccountId.
  (*
      fn from(_v: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ _v ] =>
      let* _v := M.alloc _v in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::From"
      (* Self *) (Ty.path "erc1155::AccountId")
      [ (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ]
      [ ("from", InstanceField.Method from []) ].
End Impl_core_convert_From_array_u8_for_erc1155_AccountId.

Axiom Balance : (Ty.path "erc1155::Balance") = (Ty.path "u128").

(* Enum Env *)

(*
fn zero_address() -> AccountId {
    [0u8; 32].into()
}
*)
Definition zero_address (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* α0 :=
      M.get_method
        "core::convert::Into"
        "into"
        [
          (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ];
          (* T *) Ty.path "erc1155::AccountId"
        ] in
    M.call α0 [ repeat ((Integer.of_Z 0) : Ty.path "u8") 32 ]
  | _, _ => M.impossible
  end.

Definition ON_ERC_1155_RECEIVED_SELECTOR
    : Ty.apply (Ty.path "array") [ Ty.path "u8" ] :=
  M.run
    (M.alloc
      [
        (Integer.of_Z 242) : Ty.path "u8";
        (Integer.of_Z 58) : Ty.path "u8";
        (Integer.of_Z 110) : Ty.path "u8";
        (Integer.of_Z 97) : Ty.path "u8"
      ]).

Definition _ON_ERC_1155_BATCH_RECEIVED_SELECTOR
    : Ty.apply (Ty.path "array") [ Ty.path "u8" ] :=
  M.run
    (M.alloc
      [
        (Integer.of_Z 188) : Ty.path "u8";
        (Integer.of_Z 25) : Ty.path "u8";
        (Integer.of_Z 124) : Ty.path "u8";
        (Integer.of_Z 129) : Ty.path "u8"
      ]).

Axiom TokenId : (Ty.path "erc1155::TokenId") = (Ty.path "u128").

(* Enum Error *)

Module Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "erc1155::Error")
      []
      [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error.

Module Impl_core_cmp_PartialEq_for_erc1155_Error.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 := M.var "core::intrinsics::discriminant_value" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 := M.var "core::intrinsics::discriminant_value" in
        let* α1 := M.read other in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.var "BinOp::Pure::eq" in
      let* α1 := M.read __self_tag in
      let* α2 := M.read __arg1_tag in
      let* α0 := M.alloc (α0 α1 α2) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "erc1155::Error")
      []
      [ ("eq", InstanceField.Method eq []) ].
End Impl_core_cmp_PartialEq_for_erc1155_Error.

Module Impl_core_marker_StructuralEq_for_erc1155_Error.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "erc1155::Error")
      []
      [].
End Impl_core_marker_StructuralEq_for_erc1155_Error.

Module Impl_core_cmp_Eq_for_erc1155_Error.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "erc1155::Error")
      []
      [
        ("assert_receiver_is_total_eq",
          InstanceField.Method assert_receiver_is_total_eq [])
      ].
End Impl_core_cmp_Eq_for_erc1155_Error.

Axiom Result :
  forall (T : Ty.t),
  (Ty.path "erc1155::Result") =
    (Ty.apply (Ty.path "core::result::Result") [ T; Ty.path "erc1155::Error" ]).

(* Trait *)
Module Erc1155.
  
End Erc1155.

(* Trait *)
Module Erc1155TokenReceiver.
  
End Erc1155TokenReceiver.

Axiom Owner : (Ty.path "erc1155::Owner") = (Ty.path "erc1155::AccountId").

Axiom Operator : (Ty.path "erc1155::Operator") = (Ty.path "erc1155::AccountId").

(* Enum TransferSingle *)

(* Enum ApprovalForAll *)

(* Enum Uri *)

(* Enum Event *)

Module Impl_erc1155_Env.
  Definition Self : Ty.t := Ty.path "erc1155::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.var "erc1155::Env::Get_caller" in
      let* α1 := M.read self in
      M.read (α0 (deref α1))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller :
    M.IsAssociatedFunction Self "caller" caller [].
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_emit_event :
    M.IsAssociatedFunction Self "emit_event" emit_event [].
End Impl_erc1155_Env.

(* Enum Contract *)

Module Impl_core_default_Default_for_erc1155_Contract.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "erc1155::Mapping")
                [
                  Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ];
                  Ty.path "u128"
                ]
          ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "erc1155::Mapping")
                [
                  Ty.tuple
                    [ Ty.path "erc1155::AccountId"; Ty.path "erc1155::AccountId"
                    ];
                  Ty.tuple []
                ]
          ] in
      let* α3 := M.call α2 [] in
      let* α4 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α5 := M.call α4 [] in
      M.pure
        (Value.StructRecord
          "erc1155::Contract"
          [ ("balances", α1); ("approvals", α3); ("token_id_nonce", α5) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "erc1155::Contract")
      []
      [ ("default", InstanceField.Method default []) ].
End Impl_core_default_Default_for_erc1155_Contract.

Module Impl_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 := M.var "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env :
    M.IsAssociatedFunction Self "init_env" init_env [].
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.call (Ty.path "erc1155::Contract")::["init_env"] []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env [].
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "erc1155::Contract" ] in
      M.call α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new [].
  
  (*
      pub fn create(&mut self, value: Balance) -> TokenId {
          let caller = self.env().caller();
  
          // Given that TokenId is a `u128` the likelihood of this overflowing is pretty
          // slim.
          self.token_id_nonce += 1;
          self.balances.insert((caller, self.token_id_nonce), value);
  
          // Emit transfer event but with mint semantics
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: None,
              to: if value == 0 { None } else { Some(caller) },
              token_id: self.token_id_nonce,
              value,
          }));
  
          self.token_id_nonce
      }
  *)
  Definition create (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; value ] =>
      let* self := M.alloc self in
      let* value := M.alloc value in
      let* caller :=
        let* α0 := M.read self in
        let* α1 :=
          M.call (Ty.path "erc1155::Contract")::["env"] [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.call (Ty.path "erc1155::Env")::["caller"] [ borrow α2 ] in
        M.alloc α3 in
      let* _ :=
        let* β :=
          let* α0 := M.var "erc1155::Contract::Get_token_id_nonce" in
          let* α1 := M.read self in
          M.pure (α0 (deref α1)) in
        let* α0 := M.var "assign" in
        let* α1 := M.var "BinOp::Panic::add" in
        let* α2 := M.read β in
        let* α3 := α1 α2 ((Integer.of_Z 1) : Ty.path "u128") in
        α0 β α3 in
      let* _ :=
        let* α0 := M.var "erc1155::Contract::Get_balances" in
        let* α1 := M.read self in
        let* α2 := M.read caller in
        let* α3 := M.var "erc1155::Contract::Get_token_id_nonce" in
        let* α4 := M.read self in
        let* α5 := M.read (α3 (deref α4)) in
        let* α6 := M.read value in
        let* α7 :=
          M.call
            (Ty.apply
                (Ty.path "erc1155::Mapping")
                [
                  Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ];
                  Ty.path "u128"
                ])::["insert"]
            [ borrow_mut (α0 (deref α1)); (α2, α5); α6 ] in
        M.alloc α7 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call (Ty.path "erc1155::Contract")::["env"] [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read caller in
        let* α4 := M.var "BinOp::Pure::eq" in
        let* α5 := M.read value in
        let* α6 := M.alloc (α4 α5 ((Integer.of_Z 0) : Ty.path "u128")) in
        let* α7 := M.read (use α6) in
        let* α8 :=
          if α7 then
            M.alloc core.option.Option.None
          else
            let* α0 := M.read caller in
            M.alloc (Value.StructTuple "core::option::Option::Some" [ α0 ]) in
        let* α9 := M.read α8 in
        let* α10 := M.var "erc1155::Contract::Get_token_id_nonce" in
        let* α11 := M.read self in
        let* α12 := M.read (α10 (deref α11)) in
        let* α13 := M.read value in
        let* α14 :=
          M.call
            (Ty.path "erc1155::Env")::["emit_event"]
            [
              borrow α2;
              Value.StructTuple
                "erc1155::Event::TransferSingle"
                [
                  Value.StructRecord
                    "erc1155::TransferSingle"
                    [
                      ("operator",
                        Value.StructTuple "core::option::Option::Some" [ α3 ]);
                      ("from", core.option.Option.None);
                      ("to", α9);
                      ("token_id", α12);
                      ("value", α13)
                    ]
                ]
            ] in
        M.alloc α14 in
      let* α0 := M.var "erc1155::Contract::Get_token_id_nonce" in
      let* α1 := M.read self in
      M.read (α0 (deref α1))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_create :
    M.IsAssociatedFunction Self "create" create [].
  
  (*
      pub fn mint(&mut self, token_id: TokenId, value: Balance) -> Result<()> {
          ensure!(token_id <= self.token_id_nonce, Error::UnexistentToken);
  
          let caller = self.env().caller();
          self.balances.insert((caller, token_id), value);
  
          // Emit transfer event but with mint semantics
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: None,
              to: Some(caller),
              token_id,
              value,
          }));
  
          Ok(())
      }
  *)
  Definition mint (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; token_id; value ] =>
      let* self := M.alloc self in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc1155::Error" ]) in
      M.catch_return
        (let* _ :=
          let* α0 := M.var "UnOp::not" in
          let* α1 := M.var "BinOp::Pure::le" in
          let* α2 := M.read token_id in
          let* α3 := M.var "erc1155::Contract::Get_token_id_nonce" in
          let* α4 := M.read self in
          let* α5 := M.read (α3 (deref α4)) in
          let* α6 := M.alloc (α0 (α1 α2 α5)) in
          let* α7 := M.read (use α6) in
          if α7 then
            let* α0 :=
              M.get_method
                "core::convert::Into"
                "into"
                [
                  (* Self *) Ty.path "erc1155::Error";
                  (* T *) Ty.path "erc1155::Error"
                ] in
            let* α1 := M.call α0 [ erc1155.Error.UnexistentToken ] in
            let* α2 :=
              return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
            let* α3 := M.read α2 in
            let* α4 := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* caller :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              (Ty.path "erc1155::Contract")::["env"]
              [ borrow (deref α0) ] in
          let* α2 := M.alloc α1 in
          let* α3 :=
            M.call (Ty.path "erc1155::Env")::["caller"] [ borrow α2 ] in
          M.alloc α3 in
        let* _ :=
          let* α0 := M.var "erc1155::Contract::Get_balances" in
          let* α1 := M.read self in
          let* α2 := M.read caller in
          let* α3 := M.read token_id in
          let* α4 := M.read value in
          let* α5 :=
            M.call
              (Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [
                    Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ];
                    Ty.path "u128"
                  ])::["insert"]
              [ borrow_mut (α0 (deref α1)); (α2, α3); α4 ] in
          M.alloc α5 in
        let* _ :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              (Ty.path "erc1155::Contract")::["env"]
              [ borrow (deref α0) ] in
          let* α2 := M.alloc α1 in
          let* α3 := M.read caller in
          let* α4 := M.read caller in
          let* α5 := M.read token_id in
          let* α6 := M.read value in
          let* α7 :=
            M.call
              (Ty.path "erc1155::Env")::["emit_event"]
              [
                borrow α2;
                Value.StructTuple
                  "erc1155::Event::TransferSingle"
                  [
                    Value.StructRecord
                      "erc1155::TransferSingle"
                      [
                        ("operator",
                          Value.StructTuple
                            "core::option::Option::Some"
                            [ α3 ]);
                        ("from", core.option.Option.None);
                        ("to",
                          Value.StructTuple
                            "core::option::Option::Some"
                            [ α4 ]);
                        ("token_id", α5);
                        ("value", α6)
                      ]
                  ]
              ] in
          M.alloc α7 in
        let* α0 :=
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ tt ]) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_mint : M.IsAssociatedFunction Self "mint" mint [].
  
  (*
      fn perform_transfer(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
      ) {
          let mut sender_balance = self
              .balances
              .get(&(from, token_id))
              .expect("Caller should have ensured that `from` holds `token_id`.");
          sender_balance -= value;
          self.balances.insert((from, token_id), sender_balance);
  
          let mut recipient_balance = self.balances.get(&(to, token_id)).unwrap_or(0 as u128);
          recipient_balance += value;
          self.balances.insert((to, token_id), recipient_balance);
  
          let caller = self.env().caller();
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: Some(from),
              to: Some(to),
              token_id,
              value,
          }));
      }
  *)
  Definition perform_transfer (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; from; to; token_id; value ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* sender_balance :=
        let* α0 := M.var "erc1155::Contract::Get_balances" in
        let* α1 := M.read self in
        let* α2 := M.read from in
        let* α3 := M.read token_id in
        let* α4 := M.alloc (α2, α3) in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "erc1155::Mapping")
                [
                  Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ];
                  Ty.path "u128"
                ])::["get"]
            [ borrow (α0 (deref α1)); borrow α4 ] in
        let* α6 :=
          M.read
            (mk_str
              "Caller should have ensured that `from` holds `token_id`.") in
        let* α7 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "u128" ])::["expect"]
            [ α5; α6 ] in
        M.alloc α7 in
      let* _ :=
        let β := sender_balance in
        let* α0 := M.var "assign" in
        let* α1 := M.var "BinOp::Panic::sub" in
        let* α2 := M.read β in
        let* α3 := M.read value in
        let* α4 := α1 α2 α3 in
        α0 β α4 in
      let* _ :=
        let* α0 := M.var "erc1155::Contract::Get_balances" in
        let* α1 := M.read self in
        let* α2 := M.read from in
        let* α3 := M.read token_id in
        let* α4 := M.read sender_balance in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "erc1155::Mapping")
                [
                  Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ];
                  Ty.path "u128"
                ])::["insert"]
            [ borrow_mut (α0 (deref α1)); (α2, α3); α4 ] in
        M.alloc α5 in
      let* recipient_balance :=
        let* α0 := M.var "erc1155::Contract::Get_balances" in
        let* α1 := M.read self in
        let* α2 := M.read to in
        let* α3 := M.read token_id in
        let* α4 := M.alloc (α2, α3) in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "erc1155::Mapping")
                [
                  Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ];
                  Ty.path "u128"
                ])::["get"]
            [ borrow (α0 (deref α1)); borrow α4 ] in
        let* α6 := M.alloc ((Integer.of_Z 0) : Ty.path "u128") in
        let* α7 := M.read (use α6) in
        let* α8 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "u128" ])::["unwrap_or"]
            [ α5; α7 ] in
        M.alloc α8 in
      let* _ :=
        let β := recipient_balance in
        let* α0 := M.var "assign" in
        let* α1 := M.var "BinOp::Panic::add" in
        let* α2 := M.read β in
        let* α3 := M.read value in
        let* α4 := α1 α2 α3 in
        α0 β α4 in
      let* _ :=
        let* α0 := M.var "erc1155::Contract::Get_balances" in
        let* α1 := M.read self in
        let* α2 := M.read to in
        let* α3 := M.read token_id in
        let* α4 := M.read recipient_balance in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "erc1155::Mapping")
                [
                  Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ];
                  Ty.path "u128"
                ])::["insert"]
            [ borrow_mut (α0 (deref α1)); (α2, α3); α4 ] in
        M.alloc α5 in
      let* caller :=
        let* α0 := M.read self in
        let* α1 :=
          M.call (Ty.path "erc1155::Contract")::["env"] [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.call (Ty.path "erc1155::Env")::["caller"] [ borrow α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call (Ty.path "erc1155::Contract")::["env"] [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read caller in
        let* α4 := M.read from in
        let* α5 := M.read to in
        let* α6 := M.read token_id in
        let* α7 := M.read value in
        let* α8 :=
          M.call
            (Ty.path "erc1155::Env")::["emit_event"]
            [
              borrow α2;
              Value.StructTuple
                "erc1155::Event::TransferSingle"
                [
                  Value.StructRecord
                    "erc1155::TransferSingle"
                    [
                      ("operator",
                        Value.StructTuple "core::option::Option::Some" [ α3 ]);
                      ("from",
                        Value.StructTuple "core::option::Option::Some" [ α4 ]);
                      ("to",
                        Value.StructTuple "core::option::Option::Some" [ α5 ]);
                      ("token_id", α6);
                      ("value", α7)
                    ]
                ]
            ] in
        M.alloc α8 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_perform_transfer :
    M.IsAssociatedFunction Self "perform_transfer" perform_transfer [].
  
  (*
      fn transfer_acceptance_check(
          &mut self,
          caller: AccountId,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
          data: Vec<u8>,
      ) {
          // This is disabled during tests due to the use of `invoke_contract()` not
          // being supported (tests end up panicking).
          #[cfg(not(test))]
          {
              use ink::env::call::{build_call, ExecutionInput, Selector};
  
              // If our recipient is a smart contract we need to see if they accept or
              // reject this transfer. If they reject it we need to revert the call.
              let result = build_call::<Environment>()
                  .call(to)
                  .gas_limit(5000)
                  .exec_input(
                      ExecutionInput::new(Selector::new(ON_ERC_1155_RECEIVED_SELECTOR))
                          .push_arg(caller)
                          .push_arg(from)
                          .push_arg(token_id)
                          .push_arg(value)
                          .push_arg(data),
                  )
                  .returns::<Vec<u8>>()
                  .params()
                  .try_invoke();
  
              match result {
                  Ok(v) => {
                      ink::env::debug_println!(
                          "Received return value \"{:?}\" from contract {:?}",
                          v.clone()
                              .expect("Call should be valid, don't expect a `LangError`."),
                          from
                      );
                      assert_eq!(
                          v.clone()
                              .expect("Call should be valid, don't expect a `LangError`."),
                          &ON_ERC_1155_RECEIVED_SELECTOR[..],
                          "The recipient contract at {to:?} does not accept token transfers.\n
                              Expected: {ON_ERC_1155_RECEIVED_SELECTOR:?}, Got {v:?}"
                      )
                  }
                  Err(e) => {
                      match e {
                          ink::env::Error::CodeNotFound | ink::env::Error::NotCallable => {
                              // Our recipient wasn't a smart contract, so there's
                              // nothing more for
                              // us to do
                              ink::env::debug_println!(
                                  "Recipient at {:?} from is not a smart contract ({:?})",
                                  from,
                                  e
                              );
                          }
                          _ => {
                              // We got some sort of error from the call to our
                              // recipient smart
                              // contract, and as such we must revert this call
                              panic!("Got error \"{e:?}\" while trying to call {from:?}")
                          }
                      }
                  }
              }
          }
      }
  *)
  Definition transfer_acceptance_check (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; caller; from; to; token_id; value; data ] =>
      let* self := M.alloc self in
      let* caller := M.alloc caller in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* data := M.alloc data in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_transfer_acceptance_check :
    M.IsAssociatedFunction
      Self
      "transfer_acceptance_check"
      transfer_acceptance_check
      [].
End Impl_erc1155_Contract.

Module Impl_erc1155_Erc1155_for_erc1155_Contract.
  (*
      fn is_approved_for_all(&self, owner: AccountId, operator: AccountId) -> bool {
          self.approvals.contains(&(owner, operator))
      }
  *)
  Definition is_approved_for_all (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; owner; operator ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* operator := M.alloc operator in
      let* α0 := M.var "erc1155::Contract::Get_approvals" in
      let* α1 := M.read self in
      let* α2 := M.read owner in
      let* α3 := M.read operator in
      let* α4 := M.alloc (α2, α3) in
      M.call
        (Ty.apply
            (Ty.path "erc1155::Mapping")
            [
              Ty.tuple
                [ Ty.path "erc1155::AccountId"; Ty.path "erc1155::AccountId" ];
              Ty.tuple []
            ])::["contains"]
        [ borrow (α0 (deref α1)); borrow α4 ]
    | _, _ => M.impossible
    end.
  
  (*
      fn balance_of(&self, owner: AccountId, token_id: TokenId) -> Balance {
          self.balances.get(&(owner, token_id)).unwrap_or(0 as u128)
      }
  *)
  Definition balance_of (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; owner; token_id ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* token_id := M.alloc token_id in
      let* α0 := M.var "erc1155::Contract::Get_balances" in
      let* α1 := M.read self in
      let* α2 := M.read owner in
      let* α3 := M.read token_id in
      let* α4 := M.alloc (α2, α3) in
      let* α5 :=
        M.call
          (Ty.apply
              (Ty.path "erc1155::Mapping")
              [
                Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ];
                Ty.path "u128"
              ])::["get"]
          [ borrow (α0 (deref α1)); borrow α4 ] in
      let* α6 := M.alloc ((Integer.of_Z 0) : Ty.path "u128") in
      let* α7 := M.read (use α6) in
      M.call
        (Ty.apply
            (Ty.path "core::option::Option")
            [ Ty.path "u128" ])::["unwrap_or"]
        [ α5; α7 ]
    | _, _ => M.impossible
    end.
  
  (*
      fn safe_transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
          data: Vec<u8>,
      ) -> Result<()> {
          let caller = self.env().caller();
          if caller != from {
              ensure!(self.is_approved_for_all(from, caller), Error::NotApproved);
          }
  
          ensure!(to != zero_address(), Error::ZeroAddressTransfer);
  
          let balance = self.balance_of(from, token_id);
          ensure!(balance >= value, Error::InsufficientBalance);
  
          self.perform_transfer(from, to, token_id, value);
          self.transfer_acceptance_check(caller, from, to, token_id, value, data);
  
          Ok(())
      }
  *)
  Definition safe_transfer_from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; from; to; token_id; value; data ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* data := M.alloc data in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc1155::Error" ]) in
      M.catch_return
        (let* caller :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              (Ty.path "erc1155::Contract")::["env"]
              [ borrow (deref α0) ] in
          let* α2 := M.alloc α1 in
          let* α3 :=
            M.call (Ty.path "erc1155::Env")::["caller"] [ borrow α2 ] in
          M.alloc α3 in
        let* _ :=
          let* α0 :=
            M.get_method
              "core::cmp::PartialEq"
              "ne"
              [
                (* Self *) Ty.path "erc1155::AccountId";
                (* Rhs *) Ty.path "erc1155::AccountId"
              ] in
          let* α1 := M.call α0 [ borrow caller; borrow from ] in
          let* α2 := M.alloc α1 in
          let* α3 := M.read (use α2) in
          if α3 then
            let* _ :=
              let* α0 := M.var "UnOp::not" in
              let* α1 :=
                M.get_method
                  "erc1155::Erc1155"
                  "is_approved_for_all"
                  [ (* Self *) Ty.path "erc1155::Contract" ] in
              let* α2 := M.read self in
              let* α3 := M.read from in
              let* α4 := M.read caller in
              let* α5 := M.call α1 [ borrow (deref α2); α3; α4 ] in
              let* α6 := M.alloc (α0 α5) in
              let* α7 := M.read (use α6) in
              if α7 then
                let* α0 :=
                  M.get_method
                    "core::convert::Into"
                    "into"
                    [
                      (* Self *) Ty.path "erc1155::Error";
                      (* T *) Ty.path "erc1155::Error"
                    ] in
                let* α1 := M.call α0 [ erc1155.Error.NotApproved ] in
                let* α2 :=
                  return_
                    (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
                let* α3 := M.read α2 in
                let* α4 := never_to_any α3 in
                M.alloc α4
              else
                M.alloc tt in
            M.alloc tt
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.var "UnOp::not" in
          let* α1 :=
            M.get_method
              "core::cmp::PartialEq"
              "ne"
              [
                (* Self *) Ty.path "erc1155::AccountId";
                (* Rhs *) Ty.path "erc1155::AccountId"
              ] in
          let* α2 := M.var "erc1155::zero_address" in
          let* α3 := M.call α2 [] in
          let* α4 := M.alloc α3 in
          let* α5 := M.call α1 [ borrow to; borrow α4 ] in
          let* α6 := M.alloc (α0 α5) in
          let* α7 := M.read (use α6) in
          if α7 then
            let* α0 :=
              M.get_method
                "core::convert::Into"
                "into"
                [
                  (* Self *) Ty.path "erc1155::Error";
                  (* T *) Ty.path "erc1155::Error"
                ] in
            let* α1 := M.call α0 [ erc1155.Error.ZeroAddressTransfer ] in
            let* α2 :=
              return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
            let* α3 := M.read α2 in
            let* α4 := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* balance :=
          let* α0 :=
            M.get_method
              "erc1155::Erc1155"
              "balance_of"
              [ (* Self *) Ty.path "erc1155::Contract" ] in
          let* α1 := M.read self in
          let* α2 := M.read from in
          let* α3 := M.read token_id in
          let* α4 := M.call α0 [ borrow (deref α1); α2; α3 ] in
          M.alloc α4 in
        let* _ :=
          let* α0 := M.var "UnOp::not" in
          let* α1 := M.var "BinOp::Pure::ge" in
          let* α2 := M.read balance in
          let* α3 := M.read value in
          let* α4 := M.alloc (α0 (α1 α2 α3)) in
          let* α5 := M.read (use α4) in
          if α5 then
            let* α0 :=
              M.get_method
                "core::convert::Into"
                "into"
                [
                  (* Self *) Ty.path "erc1155::Error";
                  (* T *) Ty.path "erc1155::Error"
                ] in
            let* α1 := M.call α0 [ erc1155.Error.InsufficientBalance ] in
            let* α2 :=
              return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
            let* α3 := M.read α2 in
            let* α4 := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.read self in
          let* α1 := M.read from in
          let* α2 := M.read to in
          let* α3 := M.read token_id in
          let* α4 := M.read value in
          let* α5 :=
            M.call
              (Ty.path "erc1155::Contract")::["perform_transfer"]
              [ α0; α1; α2; α3; α4 ] in
          M.alloc α5 in
        let* _ :=
          let* α0 := M.read self in
          let* α1 := M.read caller in
          let* α2 := M.read from in
          let* α3 := M.read to in
          let* α4 := M.read token_id in
          let* α5 := M.read value in
          let* α6 := M.read data in
          let* α7 :=
            M.call
              (Ty.path "erc1155::Contract")::["transfer_acceptance_check"]
              [ α0; α1; α2; α3; α4; α5; α6 ] in
          M.alloc α7 in
        let* α0 :=
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ tt ]) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  (*
      fn safe_batch_transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_ids: Vec<TokenId>,
          values: Vec<Balance>,
          data: Vec<u8>,
      ) -> Result<()> {
          let caller = self.env().caller();
          if caller != from {
              ensure!(self.is_approved_for_all(from, caller), Error::NotApproved);
          }
  
          ensure!(to != zero_address(), Error::ZeroAddressTransfer);
          ensure!(!token_ids.is_empty(), Error::BatchTransferMismatch);
          ensure!(
              token_ids.len() == values.len(),
              Error::BatchTransferMismatch,
          );
  
          let transfers = token_ids.iter().zip(values.iter());
          for (&id, &v) in transfers.clone() {
              let balance = self.balance_of(from, id);
              ensure!(balance >= v, Error::InsufficientBalance);
          }
  
          for (&id, &v) in transfers {
              self.perform_transfer(from, to, id, v);
          }
  
          // Can use the any token ID/value here, we really just care about knowing if
          // `to` is a smart contract which accepts transfers
          self.transfer_acceptance_check(caller, from, to, token_ids[0], values[0], data);
  
          Ok(())
      }
  *)
  Definition safe_batch_transfer_from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; from; to; token_ids; values; data ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_ids := M.alloc token_ids in
      let* values := M.alloc values in
      let* data := M.alloc data in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc1155::Error" ]) in
      M.catch_return
        (let* caller :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              (Ty.path "erc1155::Contract")::["env"]
              [ borrow (deref α0) ] in
          let* α2 := M.alloc α1 in
          let* α3 :=
            M.call (Ty.path "erc1155::Env")::["caller"] [ borrow α2 ] in
          M.alloc α3 in
        let* _ :=
          let* α0 :=
            M.get_method
              "core::cmp::PartialEq"
              "ne"
              [
                (* Self *) Ty.path "erc1155::AccountId";
                (* Rhs *) Ty.path "erc1155::AccountId"
              ] in
          let* α1 := M.call α0 [ borrow caller; borrow from ] in
          let* α2 := M.alloc α1 in
          let* α3 := M.read (use α2) in
          if α3 then
            let* _ :=
              let* α0 := M.var "UnOp::not" in
              let* α1 :=
                M.get_method
                  "erc1155::Erc1155"
                  "is_approved_for_all"
                  [ (* Self *) Ty.path "erc1155::Contract" ] in
              let* α2 := M.read self in
              let* α3 := M.read from in
              let* α4 := M.read caller in
              let* α5 := M.call α1 [ borrow (deref α2); α3; α4 ] in
              let* α6 := M.alloc (α0 α5) in
              let* α7 := M.read (use α6) in
              if α7 then
                let* α0 :=
                  M.get_method
                    "core::convert::Into"
                    "into"
                    [
                      (* Self *) Ty.path "erc1155::Error";
                      (* T *) Ty.path "erc1155::Error"
                    ] in
                let* α1 := M.call α0 [ erc1155.Error.NotApproved ] in
                let* α2 :=
                  return_
                    (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
                let* α3 := M.read α2 in
                let* α4 := never_to_any α3 in
                M.alloc α4
              else
                M.alloc tt in
            M.alloc tt
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.var "UnOp::not" in
          let* α1 :=
            M.get_method
              "core::cmp::PartialEq"
              "ne"
              [
                (* Self *) Ty.path "erc1155::AccountId";
                (* Rhs *) Ty.path "erc1155::AccountId"
              ] in
          let* α2 := M.var "erc1155::zero_address" in
          let* α3 := M.call α2 [] in
          let* α4 := M.alloc α3 in
          let* α5 := M.call α1 [ borrow to; borrow α4 ] in
          let* α6 := M.alloc (α0 α5) in
          let* α7 := M.read (use α6) in
          if α7 then
            let* α0 :=
              M.get_method
                "core::convert::Into"
                "into"
                [
                  (* Self *) Ty.path "erc1155::Error";
                  (* T *) Ty.path "erc1155::Error"
                ] in
            let* α1 := M.call α0 [ erc1155.Error.ZeroAddressTransfer ] in
            let* α2 :=
              return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
            let* α3 := M.read α2 in
            let* α4 := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.var "UnOp::not" in
          let* α1 := M.var "UnOp::not" in
          let* α2 :=
            M.call
              (Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u128"; Ty.path "alloc::alloc::Global"
                  ])::["is_empty"]
              [ borrow token_ids ] in
          let* α3 := M.alloc (α0 (α1 α2)) in
          let* α4 := M.read (use α3) in
          if α4 then
            let* α0 :=
              M.get_method
                "core::convert::Into"
                "into"
                [
                  (* Self *) Ty.path "erc1155::Error";
                  (* T *) Ty.path "erc1155::Error"
                ] in
            let* α1 := M.call α0 [ erc1155.Error.BatchTransferMismatch ] in
            let* α2 :=
              return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
            let* α3 := M.read α2 in
            let* α4 := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.var "UnOp::not" in
          let* α1 := M.var "BinOp::Pure::eq" in
          let* α2 :=
            M.call
              (Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])::["len"]
              [ borrow token_ids ] in
          let* α3 :=
            M.call
              (Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])::["len"]
              [ borrow values ] in
          let* α4 := M.alloc (α0 (α1 α2 α3)) in
          let* α5 := M.read (use α4) in
          if α5 then
            let* α0 :=
              M.get_method
                "core::convert::Into"
                "into"
                [
                  (* Self *) Ty.path "erc1155::Error";
                  (* T *) Ty.path "erc1155::Error"
                ] in
            let* α1 := M.call α0 [ erc1155.Error.BatchTransferMismatch ] in
            let* α2 :=
              return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
            let* α3 := M.read α2 in
            let* α4 := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* transfers :=
          let* α0 :=
            M.get_method
              "core::iter::traits::iterator::Iterator"
              "zip"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [ Ty.path "u128" ];
                (* U *)
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [ Ty.path "u128" ]
              ] in
          let* α1 :=
            M.get_method
              "core::ops::deref::Deref"
              "deref"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ]
              ] in
          let* α2 := M.call α1 [ borrow token_ids ] in
          let* α3 :=
            M.call
              (Ty.apply (Ty.path "slice") [ Ty.path "u128" ])::["iter"]
              [ α2 ] in
          let* α4 :=
            M.get_method
              "core::ops::deref::Deref"
              "deref"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ]
              ] in
          let* α5 := M.call α4 [ borrow values ] in
          let* α6 :=
            M.call
              (Ty.apply (Ty.path "slice") [ Ty.path "u128" ])::["iter"]
              [ α5 ] in
          let* α7 := M.call α0 [ α3; α6 ] in
          M.alloc α7 in
        let* _ :=
          let* α0 :=
            M.get_method
              "core::iter::traits::collect::IntoIterator"
              "into_iter"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [ Ty.path "u128" ];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [ Ty.path "u128" ]
                    ]
              ] in
          let* α1 :=
            M.get_method
              "core::clone::Clone"
              "clone"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [ Ty.path "u128" ];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [ Ty.path "u128" ]
                    ]
              ] in
          let* α2 := M.call α1 [ borrow transfers ] in
          let* α3 := M.call α0 [ α2 ] in
          let* α4 := M.alloc α3 in
          let* α5 :=
            match_operator
              α4
              [
                fun γ =>
                  (let* iter := M.copy γ in
                  M.loop
                    (let* _ :=
                      let* α0 :=
                        M.get_method
                          "core::iter::traits::iterator::Iterator"
                          "next"
                          [
                            (* Self *)
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [ Ty.path "u128" ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [ Ty.path "u128" ]
                                ]
                          ] in
                      let* α1 := M.call α0 [ borrow_mut iter ] in
                      let* α2 := M.alloc α1 in
                      match_operator
                        α2
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.None =>
                              let* α0 := M.break in
                              let* α1 := M.read α0 in
                              let* α2 := never_to_any α1 in
                              M.alloc α2
                            | _ => M.break_match 
                            end) :
                            Ty.tuple [];
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.Some _ =>
                              let* γ0_0 :=
                                let* α0 :=
                                  M.var "core::option::Option::Get_Some_0" in
                                M.pure (α0 γ) in
                              let* α0 := M.read γ0_0 in
                              match α0 with
                              | (_, _) =>
                                let γ1_0 := Tuple.Access.left γ0_0 in
                                let γ1_1 := Tuple.Access.right γ0_0 in
                                let* γ1_0 :=
                                  let* α0 := M.read γ1_0 in
                                  M.pure (deref α0) in
                                let* id := M.copy γ1_0 in
                                let* γ1_1 :=
                                  let* α0 := M.read γ1_1 in
                                  M.pure (deref α0) in
                                let* v := M.copy γ1_1 in
                                let* balance :=
                                  let* α0 :=
                                    M.get_method
                                      "erc1155::Erc1155"
                                      "balance_of"
                                      [ (* Self *) Ty.path "erc1155::Contract"
                                      ] in
                                  let* α1 := M.read self in
                                  let* α2 := M.read from in
                                  let* α3 := M.read id in
                                  let* α4 :=
                                    M.call α0 [ borrow (deref α1); α2; α3 ] in
                                  M.alloc α4 in
                                let* _ :=
                                  let* α0 := M.var "UnOp::not" in
                                  let* α1 := M.var "BinOp::Pure::ge" in
                                  let* α2 := M.read balance in
                                  let* α3 := M.read v in
                                  let* α4 := M.alloc (α0 (α1 α2 α3)) in
                                  let* α5 := M.read (use α4) in
                                  if α5 then
                                    let* α0 :=
                                      M.get_method
                                        "core::convert::Into"
                                        "into"
                                        [
                                          (* Self *) Ty.path "erc1155::Error";
                                          (* T *) Ty.path "erc1155::Error"
                                        ] in
                                    let* α1 :=
                                      M.call
                                        α0
                                        [ erc1155.Error.InsufficientBalance ] in
                                    let* α2 :=
                                      return_
                                        (Value.StructTuple
                                          "core::result::Result::Err"
                                          [ α1 ]) in
                                    let* α3 := M.read α2 in
                                    let* α4 := never_to_any α3 in
                                    M.alloc α4
                                  else
                                    M.alloc tt in
                                M.alloc tt
                              end
                            | _ => M.break_match 
                            end) :
                            Ty.tuple []
                        ] in
                    M.alloc tt)) :
                  Ty.tuple []
              ] in
          M.pure (use α5) in
        let* _ :=
          let* α0 :=
            M.get_method
              "core::iter::traits::collect::IntoIterator"
              "into_iter"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [ Ty.path "u128" ];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [ Ty.path "u128" ]
                    ]
              ] in
          let* α1 := M.read transfers in
          let* α2 := M.call α0 [ α1 ] in
          let* α3 := M.alloc α2 in
          let* α4 :=
            match_operator
              α3
              [
                fun γ =>
                  (let* iter := M.copy γ in
                  M.loop
                    (let* _ :=
                      let* α0 :=
                        M.get_method
                          "core::iter::traits::iterator::Iterator"
                          "next"
                          [
                            (* Self *)
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [ Ty.path "u128" ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [ Ty.path "u128" ]
                                ]
                          ] in
                      let* α1 := M.call α0 [ borrow_mut iter ] in
                      let* α2 := M.alloc α1 in
                      match_operator
                        α2
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.None =>
                              let* α0 := M.break in
                              let* α1 := M.read α0 in
                              let* α2 := never_to_any α1 in
                              M.alloc α2
                            | _ => M.break_match 
                            end) :
                            Ty.tuple [];
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.Some _ =>
                              let* γ0_0 :=
                                let* α0 :=
                                  M.var "core::option::Option::Get_Some_0" in
                                M.pure (α0 γ) in
                              let* α0 := M.read γ0_0 in
                              match α0 with
                              | (_, _) =>
                                let γ1_0 := Tuple.Access.left γ0_0 in
                                let γ1_1 := Tuple.Access.right γ0_0 in
                                let* γ1_0 :=
                                  let* α0 := M.read γ1_0 in
                                  M.pure (deref α0) in
                                let* id := M.copy γ1_0 in
                                let* γ1_1 :=
                                  let* α0 := M.read γ1_1 in
                                  M.pure (deref α0) in
                                let* v := M.copy γ1_1 in
                                let* _ :=
                                  let* α0 := M.read self in
                                  let* α1 := M.read from in
                                  let* α2 := M.read to in
                                  let* α3 := M.read id in
                                  let* α4 := M.read v in
                                  let* α5 :=
                                    M.call
                                      (Ty.path
                                          "erc1155::Contract")::["perform_transfer"]
                                      [ α0; α1; α2; α3; α4 ] in
                                  M.alloc α5 in
                                M.alloc tt
                              end
                            | _ => M.break_match 
                            end) :
                            Ty.tuple []
                        ] in
                    M.alloc tt)) :
                  Ty.tuple []
              ] in
          M.pure (use α4) in
        let* _ :=
          let* α0 := M.read self in
          let* α1 := M.read caller in
          let* α2 := M.read from in
          let* α3 := M.read to in
          let* α4 :=
            M.get_method
              "core::ops::index::Index"
              "index"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ];
                (* Idx *) Ty.path "usize"
              ] in
          let* α5 :=
            M.call
              α4
              [ borrow token_ids; (Integer.of_Z 0) : Ty.path "usize" ] in
          let* α6 := M.read (deref α5) in
          let* α7 :=
            M.get_method
              "core::ops::index::Index"
              "index"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ];
                (* Idx *) Ty.path "usize"
              ] in
          let* α8 :=
            M.call α7 [ borrow values; (Integer.of_Z 0) : Ty.path "usize" ] in
          let* α9 := M.read (deref α8) in
          let* α10 := M.read data in
          let* α11 :=
            M.call
              (Ty.path "erc1155::Contract")::["transfer_acceptance_check"]
              [ α0; α1; α2; α3; α6; α9; α10 ] in
          M.alloc α11 in
        let* α0 :=
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ tt ]) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  (*
      fn balance_of_batch(&self, owners: Vec<AccountId>, token_ids: Vec<TokenId>) -> Vec<Balance> {
          let mut output = Vec::new();
          for o in &owners {
              for t in &token_ids {
                  let amount = self.balance_of( *o, *t);
                  output.push(amount);
              }
          }
          output
      }
  *)
  Definition balance_of_batch (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; owners; token_ids ] =>
      let* self := M.alloc self in
      let* owners := M.alloc owners in
      let* token_ids := M.alloc token_ids in
      let* output :=
        let* α0 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])::["new"]
            [] in
        M.alloc α0 in
      let* _ :=
        let* α0 :=
          M.get_method
            "core::iter::traits::collect::IntoIterator"
            "into_iter"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "ref")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.path "erc1155::AccountId";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
            ] in
        let* α1 := M.call α0 [ borrow owners ] in
        let* α2 := M.alloc α1 in
        let* α3 :=
          match_operator
            α2
            [
              fun γ =>
                (let* iter := M.copy γ in
                M.loop
                  (let* _ :=
                    let* α0 :=
                      M.get_method
                        "core::iter::traits::iterator::Iterator"
                        "next"
                        [
                          (* Self *)
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [ Ty.path "erc1155::AccountId" ]
                        ] in
                    let* α1 := M.call α0 [ borrow_mut iter ] in
                    let* α2 := M.alloc α1 in
                    match_operator
                      α2
                      [
                        fun γ =>
                          (let* α0 := M.read γ in
                          match α0 with
                          | core.option.Option.None =>
                            let* α0 := M.break in
                            let* α1 := M.read α0 in
                            let* α2 := never_to_any α1 in
                            M.alloc α2
                          | _ => M.break_match 
                          end) :
                          Ty.tuple [];
                        fun γ =>
                          (let* α0 := M.read γ in
                          match α0 with
                          | core.option.Option.Some _ =>
                            let* γ0_0 :=
                              let* α0 :=
                                M.var "core::option::Option::Get_Some_0" in
                              M.pure (α0 γ) in
                            let* o := M.copy γ0_0 in
                            let* α0 :=
                              M.get_method
                                "core::iter::traits::collect::IntoIterator"
                                "into_iter"
                                [
                                  (* Self *)
                                    Ty.apply
                                      (Ty.path "ref")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path "u128";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                ] in
                            let* α1 := M.call α0 [ borrow token_ids ] in
                            let* α2 := M.alloc α1 in
                            let* α3 :=
                              match_operator
                                α2
                                [
                                  fun γ =>
                                    (let* iter := M.copy γ in
                                    M.loop
                                      (let* _ :=
                                        let* α0 :=
                                          M.get_method
                                            "core::iter::traits::iterator::Iterator"
                                            "next"
                                            [
                                              (* Self *)
                                                Ty.apply
                                                  (Ty.path
                                                    "core::slice::iter::Iter")
                                                  [ Ty.path "u128" ]
                                            ] in
                                        let* α1 :=
                                          M.call α0 [ borrow_mut iter ] in
                                        let* α2 := M.alloc α1 in
                                        match_operator
                                          α2
                                          [
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.option.Option.None =>
                                                let* α0 := M.break in
                                                let* α1 := M.read α0 in
                                                let* α2 := never_to_any α1 in
                                                M.alloc α2
                                              | _ => M.break_match 
                                              end) :
                                              Ty.tuple [];
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.option.Option.Some _ =>
                                                let* γ0_0 :=
                                                  let* α0 :=
                                                    M.var
                                                      "core::option::Option::Get_Some_0" in
                                                  M.pure (α0 γ) in
                                                let* t := M.copy γ0_0 in
                                                let* amount :=
                                                  let* α0 :=
                                                    M.get_method
                                                      "erc1155::Erc1155"
                                                      "balance_of"
                                                      [
                                                        (* Self *)
                                                          Ty.path
                                                            "erc1155::Contract"
                                                      ] in
                                                  let* α1 := M.read self in
                                                  let* α2 := M.read o in
                                                  let* α3 :=
                                                    M.read (deref α2) in
                                                  let* α4 := M.read t in
                                                  let* α5 :=
                                                    M.read (deref α4) in
                                                  let* α6 :=
                                                    M.call α0 [ α1; α3; α5 ] in
                                                  M.alloc α6 in
                                                let* _ :=
                                                  let* α0 := M.read amount in
                                                  let* α1 :=
                                                    M.call
                                                      (Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::Vec")
                                                          [
                                                            Ty.path "u128";
                                                            Ty.path
                                                              "alloc::alloc::Global"
                                                          ])::["push"]
                                                      [ borrow_mut output; α0
                                                      ] in
                                                  M.alloc α1 in
                                                M.alloc tt
                                              | _ => M.break_match 
                                              end) :
                                              Ty.tuple []
                                          ] in
                                      M.alloc tt)) :
                                    Ty.tuple []
                                ] in
                            M.pure (use α3)
                          | _ => M.break_match 
                          end) :
                          Ty.tuple []
                      ] in
                  M.alloc tt)) :
                Ty.tuple []
            ] in
        M.pure (use α3) in
      M.read output
    | _, _ => M.impossible
    end.
  
  (*
      fn set_approval_for_all(&mut self, operator: AccountId, approved: bool) -> Result<()> {
          let caller = self.env().caller();
          ensure!(operator != caller, Error::SelfApproval);
  
          if approved {
              self.approvals.insert((caller, operator), ());
          } else {
              self.approvals.remove((caller, operator));
          }
  
          self.env().emit_event(Event::ApprovalForAll(ApprovalForAll {
              owner: caller,
              operator,
              approved,
          }));
  
          Ok(())
      }
  *)
  Definition set_approval_for_all (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; operator; approved ] =>
      let* self := M.alloc self in
      let* operator := M.alloc operator in
      let* approved := M.alloc approved in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc1155::Error" ]) in
      M.catch_return
        (let* caller :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              (Ty.path "erc1155::Contract")::["env"]
              [ borrow (deref α0) ] in
          let* α2 := M.alloc α1 in
          let* α3 :=
            M.call (Ty.path "erc1155::Env")::["caller"] [ borrow α2 ] in
          M.alloc α3 in
        let* _ :=
          let* α0 := M.var "UnOp::not" in
          let* α1 :=
            M.get_method
              "core::cmp::PartialEq"
              "ne"
              [
                (* Self *) Ty.path "erc1155::AccountId";
                (* Rhs *) Ty.path "erc1155::AccountId"
              ] in
          let* α2 := M.call α1 [ borrow operator; borrow caller ] in
          let* α3 := M.alloc (α0 α2) in
          let* α4 := M.read (use α3) in
          if α4 then
            let* α0 :=
              M.get_method
                "core::convert::Into"
                "into"
                [
                  (* Self *) Ty.path "erc1155::Error";
                  (* T *) Ty.path "erc1155::Error"
                ] in
            let* α1 := M.call α0 [ erc1155.Error.SelfApproval ] in
            let* α2 :=
              return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
            let* α3 := M.read α2 in
            let* α4 := never_to_any α3 in
            M.alloc α4
          else
            M.alloc tt in
        let* _ :=
          let* α0 := M.read (use approved) in
          if α0 then
            let* _ :=
              let* α0 := M.var "erc1155::Contract::Get_approvals" in
              let* α1 := M.read self in
              let* α2 := M.read caller in
              let* α3 := M.read operator in
              let* α4 :=
                M.call
                  (Ty.apply
                      (Ty.path "erc1155::Mapping")
                      [
                        Ty.tuple
                          [
                            Ty.path "erc1155::AccountId";
                            Ty.path "erc1155::AccountId"
                          ];
                        Ty.tuple []
                      ])::["insert"]
                  [ borrow_mut (α0 (deref α1)); (α2, α3); tt ] in
              M.alloc α4 in
            M.alloc tt
          else
            let* _ :=
              let* α0 := M.var "erc1155::Contract::Get_approvals" in
              let* α1 := M.read self in
              let* α2 := M.read caller in
              let* α3 := M.read operator in
              let* α4 :=
                M.call
                  (Ty.apply
                      (Ty.path "erc1155::Mapping")
                      [
                        Ty.tuple
                          [
                            Ty.path "erc1155::AccountId";
                            Ty.path "erc1155::AccountId"
                          ];
                        Ty.tuple []
                      ])::["remove"]
                  [ borrow (α0 (deref α1)); (α2, α3) ] in
              M.alloc α4 in
            M.alloc tt in
        let* _ :=
          let* α0 := M.read self in
          let* α1 :=
            M.call
              (Ty.path "erc1155::Contract")::["env"]
              [ borrow (deref α0) ] in
          let* α2 := M.alloc α1 in
          let* α3 := M.read caller in
          let* α4 := M.read operator in
          let* α5 := M.read approved in
          let* α6 :=
            M.call
              (Ty.path "erc1155::Env")::["emit_event"]
              [
                borrow α2;
                Value.StructTuple
                  "erc1155::Event::ApprovalForAll"
                  [
                    Value.StructRecord
                      "erc1155::ApprovalForAll"
                      [ ("owner", α3); ("operator", α4); ("approved", α5) ]
                  ]
              ] in
          M.alloc α6 in
        let* α0 :=
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ tt ]) in
        M.read α0)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "erc1155::Erc1155"
      (* Self *) (Ty.path "erc1155::Contract")
      []
      [
        ("is_approved_for_all", InstanceField.Method is_approved_for_all []);
        ("balance_of", InstanceField.Method balance_of []);
        ("safe_transfer_from", InstanceField.Method safe_transfer_from []);
        ("safe_batch_transfer_from",
          InstanceField.Method safe_batch_transfer_from []);
        ("balance_of_batch", InstanceField.Method balance_of_batch []);
        ("set_approval_for_all", InstanceField.Method set_approval_for_all [])
      ].
End Impl_erc1155_Erc1155_for_erc1155_Contract.

Module Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
  (*
      fn on_received(
          &mut self,
          _operator: AccountId,
          _from: AccountId,
          _token_id: TokenId,
          _value: Balance,
          _data: Vec<u8>,
      ) -> Vec<u8> {
          // The ERC-1155 standard dictates that if a contract does not accept token
          // transfers directly to the contract, then the contract must
          // revert.
          //
          // This prevents a user from unintentionally transferring tokens to a smart
          // contract and getting their funds stuck without any sort of
          // recovery mechanism.
          //
          // Note that the choice of whether or not to accept tokens is implementation
          // specific, and we've decided to not accept them in this
          // implementation.
          unimplemented!("This smart contract does not accept token transfer.")
      }
  *)
  Definition on_received (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _operator; _from; _token_id; _value; _data ] =>
      let* self := M.alloc self in
      let* _operator := M.alloc _operator in
      let* _from := M.alloc _from in
      let* _token_id := M.alloc _token_id in
      let* _value := M.alloc _value in
      let* _data := M.alloc _data in
      let* α0 := M.var "core::panicking::panic_fmt" in
      let* α1 :=
        M.read
          (mk_str
            "not implemented: This smart contract does not accept token transfer.") in
      let* α2 := M.alloc [ α1 ] in
      let* α3 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] [] in
      let* α4 := M.alloc α3 in
      let* α5 :=
        M.call
          (Ty.path "core::fmt::Arguments")::["new_v1"]
          [
            pointer_coercion "Unsize" (borrow α2);
            pointer_coercion "Unsize" (borrow α4)
          ] in
      let* α6 := M.call α0 [ α5 ] in
      never_to_any α6
    | _, _ => M.impossible
    end.
  
  (*
      fn on_batch_received(
          &mut self,
          _operator: AccountId,
          _from: AccountId,
          _token_ids: Vec<TokenId>,
          _values: Vec<Balance>,
          _data: Vec<u8>,
      ) -> Vec<u8> {
          // The ERC-1155 standard dictates that if a contract does not accept token
          // transfers directly to the contract, then the contract must
          // revert.
          //
          // This prevents a user from unintentionally transferring tokens to a smart
          // contract and getting their funds stuck without any sort of
          // recovery mechanism.
          //
          // Note that the choice of whether or not to accept tokens is implementation
          // specific, and we've decided to not accept them in this
          // implementation.
          unimplemented!("This smart contract does not accept batch token transfers.")
      }
  *)
  Definition on_batch_received (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _operator; _from; _token_ids; _values; _data ] =>
      let* self := M.alloc self in
      let* _operator := M.alloc _operator in
      let* _from := M.alloc _from in
      let* _token_ids := M.alloc _token_ids in
      let* _values := M.alloc _values in
      let* _data := M.alloc _data in
      let* α0 := M.var "core::panicking::panic_fmt" in
      let* α1 :=
        M.read
          (mk_str
            "not implemented: This smart contract does not accept batch token transfers.") in
      let* α2 := M.alloc [ α1 ] in
      let* α3 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] [] in
      let* α4 := M.alloc α3 in
      let* α5 :=
        M.call
          (Ty.path "core::fmt::Arguments")::["new_v1"]
          [
            pointer_coercion "Unsize" (borrow α2);
            pointer_coercion "Unsize" (borrow α4)
          ] in
      let* α6 := M.call α0 [ α5 ] in
      never_to_any α6
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "erc1155::Erc1155TokenReceiver"
      (* Self *) (Ty.path "erc1155::Contract")
      []
      [
        ("on_received", InstanceField.Method on_received []);
        ("on_batch_received", InstanceField.Method on_batch_received [])
      ].
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
