(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Mapping *)

Module Impl_core_default_Default_for_erc1155_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "erc1155::Mapping") [K; V].
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [K])
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.call Œ±0 in
      let* Œ±2 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [V])
            (Trait := ‚Ñê))) in
      let* Œ±3 := M.call Œ±2 in
      M.pure {| erc1155.Mapping._key := Œ±1; erc1155.Mapping._value := Œ±3; |}
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (K V : Ty.t) : Instance.t :=
    [("default", InstanceField.Method (default K V))].
End Impl_core_default_Default_for_erc1155_Mapping_K_V.

Module Impl_erc1155_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "erc1155::Mapping") [K; V].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Definition contains (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition insert (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key; _value] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Definition remove (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition size (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition take (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
End Impl_erc1155_Mapping_K_V.

(* Struct AccountId *)

Module Impl_core_default_Default_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.call Œ±0 in
      M.pure (erc1155.AccountId.Build_t Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("default", InstanceField.Method default)].
End Impl_core_default_Default_for_erc1155_AccountId.

Module Impl_core_clone_Clone_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read self in
              M.pure (deref Œ±0)) :
              Ty.path "erc1155::AccountId"
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("clone", InstanceField.Method clone)].
End Impl_core_clone_Clone_for_erc1155_AccountId.

Module Impl_core_marker_Copy_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_erc1155_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.

Module Impl_core_cmp_PartialEq_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read ((M.var "erc1155::AccountId::Get_0") (deref Œ±0)) in
      let* Œ±2 := M.read other in
      let* Œ±3 := M.read ((M.var "erc1155::AccountId::Get_0") (deref Œ±2)) in
      M.pure ((M.var "BinOp::Pure::eq") Œ±1 Œ±3)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("eq", InstanceField.Method eq)].
End Impl_core_cmp_PartialEq_for_erc1155_AccountId.

Module Impl_core_convert_From_array_u8_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  (*
      fn from(_v: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [_v] =>
      let* _v := M.alloc _v in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("from", InstanceField.Method from)].
End Impl_core_convert_From_array_u8_for_erc1155_AccountId.

Axiom Balance : (Ty.path "erc1155::Balance") = (Ty.path "u128").

(* Enum Env *)

(*
fn zero_address() -> AccountId {
    [0u8; 32].into()
}
*)
Definition zero_address (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* Œ±0 :=
      ltac:(M.get_method (fun ‚Ñê =>
        core.convert.Into.into
          (Self := Ty.apply (Ty.path "array") [Ty.path "u8"])
          (T := Ty.path "erc1155::AccountId")
          (Trait := ‚Ñê))) in
    M.call (Œ±0 (repeat ((Integer.of_Z 0) : Ty.path "u8") 32))
  | _, _ => M.impossible
  end.

Definition ON_ERC_1155_RECEIVED_SELECTOR
    : Ty.apply (Ty.path "array") [Ty.path "u8"] :=
  M.run
    (M.alloc
      [
        (Integer.of_Z 242) : Ty.path "u8";
        (Integer.of_Z 58) : Ty.path "u8";
        (Integer.of_Z 110) : Ty.path "u8";
        (Integer.of_Z 97) : Ty.path "u8"
      ]).

Definition _ON_ERC_1155_BATCH_RECEIVED_SELECTOR
    : Ty.apply (Ty.path "array") [Ty.path "u8"] :=
  M.run
    (M.alloc
      [
        (Integer.of_Z 188) : Ty.path "u8";
        (Integer.of_Z 25) : Ty.path "u8";
        (Integer.of_Z 124) : Ty.path "u8";
        (Integer.of_Z 129) : Ty.path "u8"
      ]).

Axiom TokenId : (Ty.path "erc1155::TokenId") = (Ty.path "u128").

(* Enum Error *)

Module Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.path "erc1155::Error".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error.

Module Impl_core_cmp_PartialEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.path "erc1155::Error".
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.call ((M.var "core::intrinsics::discriminant_value") Œ±0) in
        M.alloc Œ±1 in
      let* __arg1_tag :=
        let* Œ±0 := M.read other in
        let* Œ±1 := M.call ((M.var "core::intrinsics::discriminant_value") Œ±0) in
        M.alloc Œ±1 in
      let* Œ±0 := M.read __self_tag in
      let* Œ±1 := M.read __arg1_tag in
      let* Œ±0 := M.alloc ((M.var "BinOp::Pure::eq") Œ±0 Œ±1) in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("eq", InstanceField.Method eq)].
End Impl_core_cmp_PartialEq_for_erc1155_Error.

Module Impl_core_marker_StructuralEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.path "erc1155::Error".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralEq_for_erc1155_Error.

Module Impl_core_cmp_Eq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.path "erc1155::Error".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (ùúè : list Ty.t)
      (Œ± : list Value.t)
      : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("assert_receiver_is_total_eq",
        InstanceField.Method assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_erc1155_Error.

Axiom Result :
  forall (T : Ty.t),
  (Ty.path "erc1155::Result") =
    (Ty.apply (Ty.path "core::result::Result") [T; Ty.path "erc1155::Error"]).

(* Trait *)
Module Erc1155.
  
End Erc1155.

(* Trait *)
Module Erc1155TokenReceiver.
  
End Erc1155TokenReceiver.

Axiom Owner : (Ty.path "erc1155::Owner") = (Ty.path "erc1155::AccountId").

Axiom Operator : (Ty.path "erc1155::Operator") = (Ty.path "erc1155::AccountId").

(* Enum TransferSingle *)

(* Enum ApprovalForAll *)

(* Enum Uri *)

(* Enum Event *)

Module Impl_erc1155_Env.
  Definition Self : Ty.t := Ty.path "erc1155::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read ((M.var "erc1155::Env::Get_caller") (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _event] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
End Impl_erc1155_Env.

(* Enum Contract *)

Module Impl_core_default_Default_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "erc1155::Mapping")
                [Ty.tuple [Ty.path "erc1155::AccountId"; Ty.path "u128"];
                  Ty.path "u128"])
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.call Œ±0 in
      let* Œ±2 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "erc1155::Mapping")
                [Ty.tuple
                    [Ty.path "erc1155::AccountId";
                      Ty.path "erc1155::AccountId"];
                  Ty.tuple []])
            (Trait := ‚Ñê))) in
      let* Œ±3 := M.call Œ±2 in
      let* Œ±4 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ‚Ñê))) in
      let* Œ±5 := M.call Œ±4 in
      M.pure
        {|
          erc1155.Contract.balances := Œ±1;
          erc1155.Contract.approvals := Œ±3;
          erc1155.Contract.token_id_nonce := Œ±5;
        |}
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("default", InstanceField.Method default)].
End Impl_core_default_Default_for_erc1155_Contract.

Module Impl_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      M.call (Ty.path "erc1155::Contract")::["init_env"]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.path "erc1155::Contract")
            (Trait := ‚Ñê))) in
      M.call Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn create(&mut self, value: Balance) -> TokenId {
          let caller = self.env().caller();
  
          // Given that TokenId is a `u128` the likelihood of this overflowing is pretty
          // slim.
          self.token_id_nonce += 1;
          self.balances.insert((caller, self.token_id_nonce), value);
  
          // Emit transfer event but with mint semantics
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: None,
              to: if value == 0 { None } else { Some(caller) },
              token_id: self.token_id_nonce,
              value,
          }));
  
          self.token_id_nonce
      }
  *)
  Definition create (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; value] =>
      let* self := M.alloc self in
      let* value := M.alloc value in
      let* caller :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          M.call ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
        let* Œ±2 := M.alloc Œ±1 in
        let* Œ±3 := M.call ((Ty.path "erc1155::Env")::["caller"] (borrow Œ±2)) in
        M.alloc Œ±3 in
      let* _ :=
        let* Œ≤ :=
          let* Œ±0 := M.read self in
          M.pure ((M.var "erc1155::Contract::Get_token_id_nonce") (deref Œ±0)) in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 :=
          (M.var "BinOp::Panic::add") Œ±0 ((Integer.of_Z 1) : Ty.path "u128") in
        (M.var "assign") Œ≤ Œ±1 in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read caller in
        let* Œ±2 := M.read self in
        let* Œ±3 :=
          M.read ((M.var "erc1155::Contract::Get_token_id_nonce") (deref Œ±2)) in
        let* Œ±4 := M.read value in
        let* Œ±5 :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple [Ty.path "erc1155::AccountId"; Ty.path "u128"];
                    Ty.path "u128"])::["insert"]
              (borrow_mut
                ((M.var "erc1155::Contract::Get_balances") (deref Œ±0)))
              (Œ±1, Œ±3)
              Œ±4) in
        M.alloc Œ±5 in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          M.call ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
        let* Œ±2 := M.alloc Œ±1 in
        let* Œ±3 := M.read caller in
        let* Œ±4 := M.read value in
        let* Œ±5 :=
          M.alloc
            ((M.var "BinOp::Pure::eq")
              Œ±4
              ((Integer.of_Z 0) : Ty.path "u128")) in
        let* Œ±6 := M.read (use Œ±5) in
        let* Œ±7 :=
          if Œ±6 then
            M.alloc core.option.Option.None
          else
            let* Œ±0 := M.read caller in
            M.alloc (core.option.Option.Some Œ±0) in
        let* Œ±8 := M.read Œ±7 in
        let* Œ±9 := M.read self in
        let* Œ±10 :=
          M.read ((M.var "erc1155::Contract::Get_token_id_nonce") (deref Œ±9)) in
        let* Œ±11 := M.read value in
        let* Œ±12 :=
          M.call
            ((Ty.path "erc1155::Env")::["emit_event"]
              (borrow Œ±2)
              (erc1155.Event.TransferSingle
                {|
                  erc1155.TransferSingle.operator := core.option.Option.Some Œ±3;
                  erc1155.TransferSingle.from := core.option.Option.None;
                  erc1155.TransferSingle.to := Œ±8;
                  erc1155.TransferSingle.token_id := Œ±10;
                  erc1155.TransferSingle.value := Œ±11;
                |})) in
        M.alloc Œ±12 in
      let* Œ±0 := M.read self in
      M.read ((M.var "erc1155::Contract::Get_token_id_nonce") (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  (*
      pub fn mint(&mut self, token_id: TokenId, value: Balance) -> Result<()> {
          ensure!(token_id <= self.token_id_nonce, Error::UnexistentToken);
  
          let caller = self.env().caller();
          self.balances.insert((caller, token_id), value);
  
          // Emit transfer event but with mint semantics
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: None,
              to: Some(caller),
              token_id,
              value,
          }));
  
          Ok(())
      }
  *)
  Definition mint (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; token_id; value] =>
      let* self := M.alloc self in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple []; Ty.path "erc1155::Error"]) in
      M.catch_return
        (let* _ :=
          let* Œ±0 := M.read token_id in
          let* Œ±1 := M.read self in
          let* Œ±2 :=
            M.read
              ((M.var "erc1155::Contract::Get_token_id_nonce") (deref Œ±1)) in
          let* Œ±3 :=
            M.alloc ((M.var "UnOp::not") ((M.var "BinOp::Pure::le") Œ±0 Œ±2)) in
          let* Œ±4 := M.read (use Œ±3) in
          if Œ±4 then
            let* Œ±0 :=
              ltac:(M.get_method (fun ‚Ñê =>
                core.convert.Into.into
                  (Self := Ty.path "erc1155::Error")
                  (T := Ty.path "erc1155::Error")
                  (Trait := ‚Ñê))) in
            let* Œ±1 := M.call (Œ±0 erc1155.Error.UnexistentToken) in
            let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
            let* Œ±3 := M.read Œ±2 in
            let* Œ±4 := never_to_any Œ±3 in
            M.alloc Œ±4
          else
            M.alloc tt in
        let* caller :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call
              ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 :=
            M.call ((Ty.path "erc1155::Env")::["caller"] (borrow Œ±2)) in
          M.alloc Œ±3 in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 := M.read caller in
          let* Œ±2 := M.read token_id in
          let* Œ±3 := M.read value in
          let* Œ±4 :=
            M.call
              ((Ty.apply
                    (Ty.path "erc1155::Mapping")
                    [Ty.tuple [Ty.path "erc1155::AccountId"; Ty.path "u128"];
                      Ty.path "u128"])::["insert"]
                (borrow_mut
                  ((M.var "erc1155::Contract::Get_balances") (deref Œ±0)))
                (Œ±1, Œ±2)
                Œ±3) in
          M.alloc Œ±4 in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call
              ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.read caller in
          let* Œ±4 := M.read caller in
          let* Œ±5 := M.read token_id in
          let* Œ±6 := M.read value in
          let* Œ±7 :=
            M.call
              ((Ty.path "erc1155::Env")::["emit_event"]
                (borrow Œ±2)
                (erc1155.Event.TransferSingle
                  {|
                    erc1155.TransferSingle.operator :=
                      core.option.Option.Some Œ±3;
                    erc1155.TransferSingle.from := core.option.Option.None;
                    erc1155.TransferSingle.to := core.option.Option.Some Œ±4;
                    erc1155.TransferSingle.token_id := Œ±5;
                    erc1155.TransferSingle.value := Œ±6;
                  |})) in
          M.alloc Œ±7 in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      fn perform_transfer(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
      ) {
          let mut sender_balance = self
              .balances
              .get(&(from, token_id))
              .expect("Caller should have ensured that `from` holds `token_id`.");
          sender_balance -= value;
          self.balances.insert((from, token_id), sender_balance);
  
          let mut recipient_balance = self.balances.get(&(to, token_id)).unwrap_or(0 as u128);
          recipient_balance += value;
          self.balances.insert((to, token_id), recipient_balance);
  
          let caller = self.env().caller();
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: Some(from),
              to: Some(to),
              token_id,
              value,
          }));
      }
  *)
  Definition perform_transfer (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; from; to; token_id; value] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* sender_balance :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read from in
        let* Œ±2 := M.read token_id in
        let* Œ±3 := M.alloc (Œ±1, Œ±2) in
        let* Œ±4 :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple [Ty.path "erc1155::AccountId"; Ty.path "u128"];
                    Ty.path "u128"])::["get"]
              (borrow ((M.var "erc1155::Contract::Get_balances") (deref Œ±0)))
              (borrow Œ±3)) in
        let* Œ±5 :=
          M.read
            (mk_str
              "Caller should have ensured that `from` holds `token_id`.") in
        let* Œ±6 :=
          M.call
            ((Ty.apply
                  (Ty.path "core::option::Option")
                  [Ty.path "u128"])::["expect"]
              Œ±4
              Œ±5) in
        M.alloc Œ±6 in
      let* _ :=
        let Œ≤ := sender_balance in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read value in
        let* Œ±2 := (M.var "BinOp::Panic::sub") Œ±0 Œ±1 in
        (M.var "assign") Œ≤ Œ±2 in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read from in
        let* Œ±2 := M.read token_id in
        let* Œ±3 := M.read sender_balance in
        let* Œ±4 :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple [Ty.path "erc1155::AccountId"; Ty.path "u128"];
                    Ty.path "u128"])::["insert"]
              (borrow_mut
                ((M.var "erc1155::Contract::Get_balances") (deref Œ±0)))
              (Œ±1, Œ±2)
              Œ±3) in
        M.alloc Œ±4 in
      let* recipient_balance :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read to in
        let* Œ±2 := M.read token_id in
        let* Œ±3 := M.alloc (Œ±1, Œ±2) in
        let* Œ±4 :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple [Ty.path "erc1155::AccountId"; Ty.path "u128"];
                    Ty.path "u128"])::["get"]
              (borrow ((M.var "erc1155::Contract::Get_balances") (deref Œ±0)))
              (borrow Œ±3)) in
        let* Œ±5 := M.alloc ((Integer.of_Z 0) : Ty.path "u128") in
        let* Œ±6 := M.read (use Œ±5) in
        let* Œ±7 :=
          M.call
            ((Ty.apply
                  (Ty.path "core::option::Option")
                  [Ty.path "u128"])::["unwrap_or"]
              Œ±4
              Œ±6) in
        M.alloc Œ±7 in
      let* _ :=
        let Œ≤ := recipient_balance in
        let* Œ±0 := M.read Œ≤ in
        let* Œ±1 := M.read value in
        let* Œ±2 := (M.var "BinOp::Panic::add") Œ±0 Œ±1 in
        (M.var "assign") Œ≤ Œ±2 in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read to in
        let* Œ±2 := M.read token_id in
        let* Œ±3 := M.read recipient_balance in
        let* Œ±4 :=
          M.call
            ((Ty.apply
                  (Ty.path "erc1155::Mapping")
                  [Ty.tuple [Ty.path "erc1155::AccountId"; Ty.path "u128"];
                    Ty.path "u128"])::["insert"]
              (borrow_mut
                ((M.var "erc1155::Contract::Get_balances") (deref Œ±0)))
              (Œ±1, Œ±2)
              Œ±3) in
        M.alloc Œ±4 in
      let* caller :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          M.call ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
        let* Œ±2 := M.alloc Œ±1 in
        let* Œ±3 := M.call ((Ty.path "erc1155::Env")::["caller"] (borrow Œ±2)) in
        M.alloc Œ±3 in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          M.call ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
        let* Œ±2 := M.alloc Œ±1 in
        let* Œ±3 := M.read caller in
        let* Œ±4 := M.read from in
        let* Œ±5 := M.read to in
        let* Œ±6 := M.read token_id in
        let* Œ±7 := M.read value in
        let* Œ±8 :=
          M.call
            ((Ty.path "erc1155::Env")::["emit_event"]
              (borrow Œ±2)
              (erc1155.Event.TransferSingle
                {|
                  erc1155.TransferSingle.operator := core.option.Option.Some Œ±3;
                  erc1155.TransferSingle.from := core.option.Option.Some Œ±4;
                  erc1155.TransferSingle.to := core.option.Option.Some Œ±5;
                  erc1155.TransferSingle.token_id := Œ±6;
                  erc1155.TransferSingle.value := Œ±7;
                |})) in
        M.alloc Œ±8 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      fn transfer_acceptance_check(
          &mut self,
          caller: AccountId,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
          data: Vec<u8>,
      ) {
          // This is disabled during tests due to the use of `invoke_contract()` not
          // being supported (tests end up panicking).
          #[cfg(not(test))]
          {
              use ink::env::call::{build_call, ExecutionInput, Selector};
  
              // If our recipient is a smart contract we need to see if they accept or
              // reject this transfer. If they reject it we need to revert the call.
              let result = build_call::<Environment>()
                  .call(to)
                  .gas_limit(5000)
                  .exec_input(
                      ExecutionInput::new(Selector::new(ON_ERC_1155_RECEIVED_SELECTOR))
                          .push_arg(caller)
                          .push_arg(from)
                          .push_arg(token_id)
                          .push_arg(value)
                          .push_arg(data),
                  )
                  .returns::<Vec<u8>>()
                  .params()
                  .try_invoke();
  
              match result {
                  Ok(v) => {
                      ink::env::debug_println!(
                          "Received return value \"{:?}\" from contract {:?}",
                          v.clone()
                              .expect("Call should be valid, don't expect a `LangError`."),
                          from
                      );
                      assert_eq!(
                          v.clone()
                              .expect("Call should be valid, don't expect a `LangError`."),
                          &ON_ERC_1155_RECEIVED_SELECTOR[..],
                          "The recipient contract at {to:?} does not accept token transfers.\n
                              Expected: {ON_ERC_1155_RECEIVED_SELECTOR:?}, Got {v:?}"
                      )
                  }
                  Err(e) => {
                      match e {
                          ink::env::Error::CodeNotFound | ink::env::Error::NotCallable => {
                              // Our recipient wasn't a smart contract, so there's
                              // nothing more for
                              // us to do
                              ink::env::debug_println!(
                                  "Recipient at {:?} from is not a smart contract ({:?})",
                                  from,
                                  e
                              );
                          }
                          _ => {
                              // We got some sort of error from the call to our
                              // recipient smart
                              // contract, and as such we must revert this call
                              panic!("Got error \"{e:?}\" while trying to call {from:?}")
                          }
                      }
                  }
              }
          }
      }
  *)
  Definition transfer_acceptance_check (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; caller; from; to; token_id; value; data] =>
      let* self := M.alloc self in
      let* caller := M.alloc caller in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* data := M.alloc data in
      M.pure tt
    | _, _ => M.impossible
    end.
End Impl_erc1155_Contract.

Module Impl_erc1155_Erc1155_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (*
      fn is_approved_for_all(&self, owner: AccountId, operator: AccountId) -> bool {
          self.approvals.contains(&(owner, operator))
      }
  *)
  Definition is_approved_for_all (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; owner; operator] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* operator := M.alloc operator in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read owner in
      let* Œ±2 := M.read operator in
      let* Œ±3 := M.alloc (Œ±1, Œ±2) in
      M.call
        ((Ty.apply
              (Ty.path "erc1155::Mapping")
              [Ty.tuple
                  [Ty.path "erc1155::AccountId"; Ty.path "erc1155::AccountId"];
                Ty.tuple []])::["contains"]
          (borrow ((M.var "erc1155::Contract::Get_approvals") (deref Œ±0)))
          (borrow Œ±3))
    | _, _ => M.impossible
    end.
  
  (*
      fn balance_of(&self, owner: AccountId, token_id: TokenId) -> Balance {
          self.balances.get(&(owner, token_id)).unwrap_or(0 as u128)
      }
  *)
  Definition balance_of (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; owner; token_id] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* token_id := M.alloc token_id in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read owner in
      let* Œ±2 := M.read token_id in
      let* Œ±3 := M.alloc (Œ±1, Œ±2) in
      let* Œ±4 :=
        M.call
          ((Ty.apply
                (Ty.path "erc1155::Mapping")
                [Ty.tuple [Ty.path "erc1155::AccountId"; Ty.path "u128"];
                  Ty.path "u128"])::["get"]
            (borrow ((M.var "erc1155::Contract::Get_balances") (deref Œ±0)))
            (borrow Œ±3)) in
      let* Œ±5 := M.alloc ((Integer.of_Z 0) : Ty.path "u128") in
      let* Œ±6 := M.read (use Œ±5) in
      M.call
        ((Ty.apply
              (Ty.path "core::option::Option")
              [Ty.path "u128"])::["unwrap_or"]
          Œ±4
          Œ±6)
    | _, _ => M.impossible
    end.
  
  (*
      fn safe_transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
          data: Vec<u8>,
      ) -> Result<()> {
          let caller = self.env().caller();
          if caller != from {
              ensure!(self.is_approved_for_all(from, caller), Error::NotApproved);
          }
  
          ensure!(to != zero_address(), Error::ZeroAddressTransfer);
  
          let balance = self.balance_of(from, token_id);
          ensure!(balance >= value, Error::InsufficientBalance);
  
          self.perform_transfer(from, to, token_id, value);
          self.transfer_acceptance_check(caller, from, to, token_id, value, data);
  
          Ok(())
      }
  *)
  Definition safe_transfer_from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; from; to; token_id; value; data] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* data := M.alloc data in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple []; Ty.path "erc1155::Error"]) in
      M.catch_return
        (let* caller :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call
              ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 :=
            M.call ((Ty.path "erc1155::Env")::["caller"] (borrow Œ±2)) in
          M.alloc Œ±3 in
        let* _ :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.cmp.PartialEq.ne
                (Self := Ty.path "erc1155::AccountId")
                (Rhs := Ty.path "erc1155::AccountId")
                (Trait := ‚Ñê))) in
          let* Œ±1 := M.call (Œ±0 (borrow caller) (borrow from)) in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.read (use Œ±2) in
          if Œ±3 then
            let* _ :=
              let* Œ±0 := M.read self in
              let* Œ±1 := M.read from in
              let* Œ±2 := M.read caller in
              let* Œ±3 :=
                M.call (is_approved_for_all (borrow (deref Œ±0)) Œ±1 Œ±2) in
              let* Œ±4 := M.alloc ((M.var "UnOp::not") Œ±3) in
              let* Œ±5 := M.read (use Œ±4) in
              if Œ±5 then
                let* Œ±0 :=
                  ltac:(M.get_method (fun ‚Ñê =>
                    core.convert.Into.into
                      (Self := Ty.path "erc1155::Error")
                      (T := Ty.path "erc1155::Error")
                      (Trait := ‚Ñê))) in
                let* Œ±1 := M.call (Œ±0 erc1155.Error.NotApproved) in
                let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
                let* Œ±3 := M.read Œ±2 in
                let* Œ±4 := never_to_any Œ±3 in
                M.alloc Œ±4
              else
                M.alloc tt in
            M.alloc tt
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.cmp.PartialEq.ne
                (Self := Ty.path "erc1155::AccountId")
                (Rhs := Ty.path "erc1155::AccountId")
                (Trait := ‚Ñê))) in
          let* Œ±1 := M.call (M.var "erc1155::zero_address") in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.call (Œ±0 (borrow to) (borrow Œ±2)) in
          let* Œ±4 := M.alloc ((M.var "UnOp::not") Œ±3) in
          let* Œ±5 := M.read (use Œ±4) in
          if Œ±5 then
            let* Œ±0 :=
              ltac:(M.get_method (fun ‚Ñê =>
                core.convert.Into.into
                  (Self := Ty.path "erc1155::Error")
                  (T := Ty.path "erc1155::Error")
                  (Trait := ‚Ñê))) in
            let* Œ±1 := M.call (Œ±0 erc1155.Error.ZeroAddressTransfer) in
            let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
            let* Œ±3 := M.read Œ±2 in
            let* Œ±4 := never_to_any Œ±3 in
            M.alloc Œ±4
          else
            M.alloc tt in
        let* balance :=
          let* Œ±0 := M.read self in
          let* Œ±1 := M.read from in
          let* Œ±2 := M.read token_id in
          let* Œ±3 := M.call (balance_of (borrow (deref Œ±0)) Œ±1 Œ±2) in
          M.alloc Œ±3 in
        let* _ :=
          let* Œ±0 := M.read balance in
          let* Œ±1 := M.read value in
          let* Œ±2 :=
            M.alloc ((M.var "UnOp::not") ((M.var "BinOp::Pure::ge") Œ±0 Œ±1)) in
          let* Œ±3 := M.read (use Œ±2) in
          if Œ±3 then
            let* Œ±0 :=
              ltac:(M.get_method (fun ‚Ñê =>
                core.convert.Into.into
                  (Self := Ty.path "erc1155::Error")
                  (T := Ty.path "erc1155::Error")
                  (Trait := ‚Ñê))) in
            let* Œ±1 := M.call (Œ±0 erc1155.Error.InsufficientBalance) in
            let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
            let* Œ±3 := M.read Œ±2 in
            let* Œ±4 := never_to_any Œ±3 in
            M.alloc Œ±4
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 := M.read from in
          let* Œ±2 := M.read to in
          let* Œ±3 := M.read token_id in
          let* Œ±4 := M.read value in
          let* Œ±5 :=
            M.call
              ((Ty.path "erc1155::Contract")::["perform_transfer"]
                Œ±0
                Œ±1
                Œ±2
                Œ±3
                Œ±4) in
          M.alloc Œ±5 in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 := M.read caller in
          let* Œ±2 := M.read from in
          let* Œ±3 := M.read to in
          let* Œ±4 := M.read token_id in
          let* Œ±5 := M.read value in
          let* Œ±6 := M.read data in
          let* Œ±7 :=
            M.call
              ((Ty.path "erc1155::Contract")::["transfer_acceptance_check"]
                Œ±0
                Œ±1
                Œ±2
                Œ±3
                Œ±4
                Œ±5
                Œ±6) in
          M.alloc Œ±7 in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      fn safe_batch_transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_ids: Vec<TokenId>,
          values: Vec<Balance>,
          data: Vec<u8>,
      ) -> Result<()> {
          let caller = self.env().caller();
          if caller != from {
              ensure!(self.is_approved_for_all(from, caller), Error::NotApproved);
          }
  
          ensure!(to != zero_address(), Error::ZeroAddressTransfer);
          ensure!(!token_ids.is_empty(), Error::BatchTransferMismatch);
          ensure!(
              token_ids.len() == values.len(),
              Error::BatchTransferMismatch,
          );
  
          let transfers = token_ids.iter().zip(values.iter());
          for (&id, &v) in transfers.clone() {
              let balance = self.balance_of(from, id);
              ensure!(balance >= v, Error::InsufficientBalance);
          }
  
          for (&id, &v) in transfers {
              self.perform_transfer(from, to, id, v);
          }
  
          // Can use the any token ID/value here, we really just care about knowing if
          // `to` is a smart contract which accepts transfers
          self.transfer_acceptance_check(caller, from, to, token_ids[0], values[0], data);
  
          Ok(())
      }
  *)
  Definition safe_batch_transfer_from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; from; to; token_ids; values; data] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_ids := M.alloc token_ids in
      let* values := M.alloc values in
      let* data := M.alloc data in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple []; Ty.path "erc1155::Error"]) in
      M.catch_return
        (let* caller :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call
              ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 :=
            M.call ((Ty.path "erc1155::Env")::["caller"] (borrow Œ±2)) in
          M.alloc Œ±3 in
        let* _ :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.cmp.PartialEq.ne
                (Self := Ty.path "erc1155::AccountId")
                (Rhs := Ty.path "erc1155::AccountId")
                (Trait := ‚Ñê))) in
          let* Œ±1 := M.call (Œ±0 (borrow caller) (borrow from)) in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.read (use Œ±2) in
          if Œ±3 then
            let* _ :=
              let* Œ±0 := M.read self in
              let* Œ±1 := M.read from in
              let* Œ±2 := M.read caller in
              let* Œ±3 :=
                M.call (is_approved_for_all (borrow (deref Œ±0)) Œ±1 Œ±2) in
              let* Œ±4 := M.alloc ((M.var "UnOp::not") Œ±3) in
              let* Œ±5 := M.read (use Œ±4) in
              if Œ±5 then
                let* Œ±0 :=
                  ltac:(M.get_method (fun ‚Ñê =>
                    core.convert.Into.into
                      (Self := Ty.path "erc1155::Error")
                      (T := Ty.path "erc1155::Error")
                      (Trait := ‚Ñê))) in
                let* Œ±1 := M.call (Œ±0 erc1155.Error.NotApproved) in
                let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
                let* Œ±3 := M.read Œ±2 in
                let* Œ±4 := never_to_any Œ±3 in
                M.alloc Œ±4
              else
                M.alloc tt in
            M.alloc tt
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.cmp.PartialEq.ne
                (Self := Ty.path "erc1155::AccountId")
                (Rhs := Ty.path "erc1155::AccountId")
                (Trait := ‚Ñê))) in
          let* Œ±1 := M.call (M.var "erc1155::zero_address") in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.call (Œ±0 (borrow to) (borrow Œ±2)) in
          let* Œ±4 := M.alloc ((M.var "UnOp::not") Œ±3) in
          let* Œ±5 := M.read (use Œ±4) in
          if Œ±5 then
            let* Œ±0 :=
              ltac:(M.get_method (fun ‚Ñê =>
                core.convert.Into.into
                  (Self := Ty.path "erc1155::Error")
                  (T := Ty.path "erc1155::Error")
                  (Trait := ‚Ñê))) in
            let* Œ±1 := M.call (Œ±0 erc1155.Error.ZeroAddressTransfer) in
            let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
            let* Œ±3 := M.read Œ±2 in
            let* Œ±4 := never_to_any Œ±3 in
            M.alloc Œ±4
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 :=
            M.call
              ((Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128";
                      Ty.path "alloc::alloc::Global"])::["is_empty"]
                (borrow token_ids)) in
          let* Œ±1 := M.alloc ((M.var "UnOp::not") ((M.var "UnOp::not") Œ±0)) in
          let* Œ±2 := M.read (use Œ±1) in
          if Œ±2 then
            let* Œ±0 :=
              ltac:(M.get_method (fun ‚Ñê =>
                core.convert.Into.into
                  (Self := Ty.path "erc1155::Error")
                  (T := Ty.path "erc1155::Error")
                  (Trait := ‚Ñê))) in
            let* Œ±1 := M.call (Œ±0 erc1155.Error.BatchTransferMismatch) in
            let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
            let* Œ±3 := M.read Œ±2 in
            let* Œ±4 := never_to_any Œ±3 in
            M.alloc Œ±4
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 :=
            M.call
              ((Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128"; Ty.path "alloc::alloc::Global"])::["len"]
                (borrow token_ids)) in
          let* Œ±1 :=
            M.call
              ((Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128"; Ty.path "alloc::alloc::Global"])::["len"]
                (borrow values)) in
          let* Œ±2 :=
            M.alloc ((M.var "UnOp::not") ((M.var "BinOp::Pure::eq") Œ±0 Œ±1)) in
          let* Œ±3 := M.read (use Œ±2) in
          if Œ±3 then
            let* Œ±0 :=
              ltac:(M.get_method (fun ‚Ñê =>
                core.convert.Into.into
                  (Self := Ty.path "erc1155::Error")
                  (T := Ty.path "erc1155::Error")
                  (Trait := ‚Ñê))) in
            let* Œ±1 := M.call (Œ±0 erc1155.Error.BatchTransferMismatch) in
            let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
            let* Œ±3 := M.read Œ±2 in
            let* Œ±4 := never_to_any Œ±3 in
            M.alloc Œ±4
          else
            M.alloc tt in
        let* transfers :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.iter.traits.iterator.Iterator.zip
                (Self :=
                  Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"])
                (U :=
                  Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "u128"])
                (Trait := ‚Ñê))) in
          let* Œ±1 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.ops.deref.Deref.deref
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128"; Ty.path "alloc::alloc::Global"])
                (Trait := ‚Ñê))) in
          let* Œ±2 := M.call (Œ±1 (borrow token_ids)) in
          let* Œ±3 :=
            M.call
              ((Ty.apply (Ty.path "slice") [Ty.path "u128"])::["iter"] Œ±2) in
          let* Œ±4 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.ops.deref.Deref.deref
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128"; Ty.path "alloc::alloc::Global"])
                (Trait := ‚Ñê))) in
          let* Œ±5 := M.call (Œ±4 (borrow values)) in
          let* Œ±6 :=
            M.call
              ((Ty.apply (Ty.path "slice") [Ty.path "u128"])::["iter"] Œ±5) in
          let* Œ±7 := M.call (Œ±0 Œ±3 Œ±6) in
          M.alloc Œ±7 in
        let* _ :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.iter.traits.collect.IntoIterator.into_iter
                (Self :=
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"]])
                (Trait := ‚Ñê))) in
          let* Œ±1 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.clone.Clone.clone
                (Self :=
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"]])
                (Trait := ‚Ñê))) in
          let* Œ±2 := M.call (Œ±1 (borrow transfers)) in
          let* Œ±3 := M.call (Œ±0 Œ±2) in
          let* Œ±4 := M.alloc Œ±3 in
          let* Œ±5 :=
            match_operator
              Œ±4
              [
                fun Œ≥ =>
                  (let* iter := M.copy Œ≥ in
                  M.loop
                    (let* _ :=
                      let* Œ±0 :=
                        ltac:(M.get_method (fun ‚Ñê =>
                          core.iter.traits.iterator.Iterator.next
                            (Self :=
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [Ty.path "u128"];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [Ty.path "u128"]])
                            (Trait := ‚Ñê))) in
                      let* Œ±1 := M.call (Œ±0 (borrow_mut iter)) in
                      let* Œ±2 := M.alloc Œ±1 in
                      match_operator
                        Œ±2
                        [
                          fun Œ≥ =>
                            (let* Œ±0 := M.read Œ≥ in
                            match Œ±0 with
                            | core.option.Option.None =>
                              let* Œ±0 := M.break in
                              let* Œ±1 := M.read Œ±0 in
                              let* Œ±2 := never_to_any Œ±1 in
                              M.alloc Œ±2
                            | _ => M.break_match
                            end) :
                            Ty.tuple [];
                          fun Œ≥ =>
                            (let* Œ±0 := M.read Œ≥ in
                            match Œ±0 with
                            | core.option.Option.Some _ =>
                              let Œ≥0_0 :=
                                (M.var "core::option::Option::Get_Some_0") Œ≥ in
                              let* Œ±0 := M.read Œ≥0_0 in
                              match Œ±0 with
                              | (_, _) =>
                                let Œ≥1_0 := Tuple.Access.left Œ≥0_0 in
                                let Œ≥1_1 := Tuple.Access.right Œ≥0_0 in
                                let* Œ≥1_0 :=
                                  let* Œ±0 := M.read Œ≥1_0 in
                                  M.pure (deref Œ±0) in
                                let* id := M.copy Œ≥1_0 in
                                let* Œ≥1_1 :=
                                  let* Œ±0 := M.read Œ≥1_1 in
                                  M.pure (deref Œ±0) in
                                let* v := M.copy Œ≥1_1 in
                                let* balance :=
                                  let* Œ±0 := M.read self in
                                  let* Œ±1 := M.read from in
                                  let* Œ±2 := M.read id in
                                  let* Œ±3 :=
                                    M.call
                                      (balance_of (borrow (deref Œ±0)) Œ±1 Œ±2) in
                                  M.alloc Œ±3 in
                                let* _ :=
                                  let* Œ±0 := M.read balance in
                                  let* Œ±1 := M.read v in
                                  let* Œ±2 :=
                                    M.alloc
                                      ((M.var "UnOp::not")
                                        ((M.var "BinOp::Pure::ge") Œ±0 Œ±1)) in
                                  let* Œ±3 := M.read (use Œ±2) in
                                  if Œ±3 then
                                    let* Œ±0 :=
                                      ltac:(M.get_method (fun ‚Ñê =>
                                        core.convert.Into.into
                                          (Self := Ty.path "erc1155::Error")
                                          (T := Ty.path "erc1155::Error")
                                          (Trait := ‚Ñê))) in
                                    let* Œ±1 :=
                                      M.call
                                        (Œ±0
                                          erc1155.Error.InsufficientBalance) in
                                    let* Œ±2 :=
                                      return_ (core.result.Result.Err Œ±1) in
                                    let* Œ±3 := M.read Œ±2 in
                                    let* Œ±4 := never_to_any Œ±3 in
                                    M.alloc Œ±4
                                  else
                                    M.alloc tt in
                                M.alloc tt
                              end
                            | _ => M.break_match
                            end) :
                            Ty.tuple []
                        ] in
                    M.alloc tt)) :
                  Ty.tuple []
              ] in
          M.pure (use Œ±5) in
        let* _ :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.iter.traits.collect.IntoIterator.into_iter
                (Self :=
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"];
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [Ty.path "u128"]])
                (Trait := ‚Ñê))) in
          let* Œ±1 := M.read transfers in
          let* Œ±2 := M.call (Œ±0 Œ±1) in
          let* Œ±3 := M.alloc Œ±2 in
          let* Œ±4 :=
            match_operator
              Œ±3
              [
                fun Œ≥ =>
                  (let* iter := M.copy Œ≥ in
                  M.loop
                    (let* _ :=
                      let* Œ±0 :=
                        ltac:(M.get_method (fun ‚Ñê =>
                          core.iter.traits.iterator.Iterator.next
                            (Self :=
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [Ty.path "u128"];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [Ty.path "u128"]])
                            (Trait := ‚Ñê))) in
                      let* Œ±1 := M.call (Œ±0 (borrow_mut iter)) in
                      let* Œ±2 := M.alloc Œ±1 in
                      match_operator
                        Œ±2
                        [
                          fun Œ≥ =>
                            (let* Œ±0 := M.read Œ≥ in
                            match Œ±0 with
                            | core.option.Option.None =>
                              let* Œ±0 := M.break in
                              let* Œ±1 := M.read Œ±0 in
                              let* Œ±2 := never_to_any Œ±1 in
                              M.alloc Œ±2
                            | _ => M.break_match
                            end) :
                            Ty.tuple [];
                          fun Œ≥ =>
                            (let* Œ±0 := M.read Œ≥ in
                            match Œ±0 with
                            | core.option.Option.Some _ =>
                              let Œ≥0_0 :=
                                (M.var "core::option::Option::Get_Some_0") Œ≥ in
                              let* Œ±0 := M.read Œ≥0_0 in
                              match Œ±0 with
                              | (_, _) =>
                                let Œ≥1_0 := Tuple.Access.left Œ≥0_0 in
                                let Œ≥1_1 := Tuple.Access.right Œ≥0_0 in
                                let* Œ≥1_0 :=
                                  let* Œ±0 := M.read Œ≥1_0 in
                                  M.pure (deref Œ±0) in
                                let* id := M.copy Œ≥1_0 in
                                let* Œ≥1_1 :=
                                  let* Œ±0 := M.read Œ≥1_1 in
                                  M.pure (deref Œ±0) in
                                let* v := M.copy Œ≥1_1 in
                                let* _ :=
                                  let* Œ±0 := M.read self in
                                  let* Œ±1 := M.read from in
                                  let* Œ±2 := M.read to in
                                  let* Œ±3 := M.read id in
                                  let* Œ±4 := M.read v in
                                  let* Œ±5 :=
                                    M.call
                                      ((Ty.path
                                            "erc1155::Contract")::["perform_transfer"]
                                        Œ±0
                                        Œ±1
                                        Œ±2
                                        Œ±3
                                        Œ±4) in
                                  M.alloc Œ±5 in
                                M.alloc tt
                              end
                            | _ => M.break_match
                            end) :
                            Ty.tuple []
                        ] in
                    M.alloc tt)) :
                  Ty.tuple []
              ] in
          M.pure (use Œ±4) in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 := M.read caller in
          let* Œ±2 := M.read from in
          let* Œ±3 := M.read to in
          let* Œ±4 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.ops.index.Index.index
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128"; Ty.path "alloc::alloc::Global"])
                (Idx := Ty.path "usize")
                (Trait := ‚Ñê))) in
          let* Œ±5 :=
            M.call
              (Œ±4 (borrow token_ids) ((Integer.of_Z 0) : Ty.path "usize")) in
          let* Œ±6 := M.read (deref Œ±5) in
          let* Œ±7 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.ops.index.Index.index
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "u128"; Ty.path "alloc::alloc::Global"])
                (Idx := Ty.path "usize")
                (Trait := ‚Ñê))) in
          let* Œ±8 :=
            M.call (Œ±7 (borrow values) ((Integer.of_Z 0) : Ty.path "usize")) in
          let* Œ±9 := M.read (deref Œ±8) in
          let* Œ±10 := M.read data in
          let* Œ±11 :=
            M.call
              ((Ty.path "erc1155::Contract")::["transfer_acceptance_check"]
                Œ±0
                Œ±1
                Œ±2
                Œ±3
                Œ±6
                Œ±9
                Œ±10) in
          M.alloc Œ±11 in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      fn balance_of_batch(&self, owners: Vec<AccountId>, token_ids: Vec<TokenId>) -> Vec<Balance> {
          let mut output = Vec::new();
          for o in &owners {
              for t in &token_ids {
                  let amount = self.balance_of( *o, *t);
                  output.push(amount);
              }
          }
          output
      }
  *)
  Definition balance_of_batch (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; owners; token_ids] =>
      let* self := M.alloc self in
      let* owners := M.alloc owners in
      let* token_ids := M.alloc token_ids in
      let* output :=
        let* Œ±0 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u128"; Ty.path "alloc::alloc::Global"])::["new"] in
        M.alloc Œ±0 in
      let* _ :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.iter.traits.collect.IntoIterator.into_iter
              (Self :=
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.path "erc1155::AccountId";
                        Ty.path "alloc::alloc::Global"]])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.call (Œ±0 (borrow owners)) in
        let* Œ±2 := M.alloc Œ±1 in
        let* Œ±3 :=
          match_operator
            Œ±2
            [
              fun Œ≥ =>
                (let* iter := M.copy Œ≥ in
                M.loop
                  (let* _ :=
                    let* Œ±0 :=
                      ltac:(M.get_method (fun ‚Ñê =>
                        core.iter.traits.iterator.Iterator.next
                          (Self :=
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [Ty.path "erc1155::AccountId"])
                          (Trait := ‚Ñê))) in
                    let* Œ±1 := M.call (Œ±0 (borrow_mut iter)) in
                    let* Œ±2 := M.alloc Œ±1 in
                    match_operator
                      Œ±2
                      [
                        fun Œ≥ =>
                          (let* Œ±0 := M.read Œ≥ in
                          match Œ±0 with
                          | core.option.Option.None =>
                            let* Œ±0 := M.break in
                            let* Œ±1 := M.read Œ±0 in
                            let* Œ±2 := never_to_any Œ±1 in
                            M.alloc Œ±2
                          | _ => M.break_match
                          end) :
                          Ty.tuple [];
                        fun Œ≥ =>
                          (let* Œ±0 := M.read Œ≥ in
                          match Œ±0 with
                          | core.option.Option.Some _ =>
                            let Œ≥0_0 :=
                              (M.var "core::option::Option::Get_Some_0") Œ≥ in
                            let* o := M.copy Œ≥0_0 in
                            let* Œ±0 :=
                              ltac:(M.get_method (fun ‚Ñê =>
                                core.iter.traits.collect.IntoIterator.into_iter
                                  (Self :=
                                    Ty.apply
                                      (Ty.path "ref")
                                      [Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [Ty.path "u128";
                                            Ty.path "alloc::alloc::Global"]])
                                  (Trait := ‚Ñê))) in
                            let* Œ±1 := M.call (Œ±0 (borrow token_ids)) in
                            let* Œ±2 := M.alloc Œ±1 in
                            let* Œ±3 :=
                              match_operator
                                Œ±2
                                [
                                  fun Œ≥ =>
                                    (let* iter := M.copy Œ≥ in
                                    M.loop
                                      (let* _ :=
                                        let* Œ±0 :=
                                          ltac:(M.get_method (fun ‚Ñê =>
                                            core.iter.traits.iterator.Iterator.next
                                              (Self :=
                                                Ty.apply
                                                  (Ty.path
                                                    "core::slice::iter::Iter")
                                                  [Ty.path "u128"])
                                              (Trait := ‚Ñê))) in
                                        let* Œ±1 :=
                                          M.call (Œ±0 (borrow_mut iter)) in
                                        let* Œ±2 := M.alloc Œ±1 in
                                        match_operator
                                          Œ±2
                                          [
                                            fun Œ≥ =>
                                              (let* Œ±0 := M.read Œ≥ in
                                              match Œ±0 with
                                              | core.option.Option.None =>
                                                let* Œ±0 := M.break in
                                                let* Œ±1 := M.read Œ±0 in
                                                let* Œ±2 := never_to_any Œ±1 in
                                                M.alloc Œ±2
                                              | _ => M.break_match
                                              end) :
                                              Ty.tuple [];
                                            fun Œ≥ =>
                                              (let* Œ±0 := M.read Œ≥ in
                                              match Œ±0 with
                                              | core.option.Option.Some _ =>
                                                let Œ≥0_0 :=
                                                  (M.var
                                                      "core::option::Option::Get_Some_0")
                                                    Œ≥ in
                                                let* t := M.copy Œ≥0_0 in
                                                let* amount :=
                                                  let* Œ±0 := M.read self in
                                                  let* Œ±1 := M.read o in
                                                  let* Œ±2 :=
                                                    M.read (deref Œ±1) in
                                                  let* Œ±3 := M.read t in
                                                  let* Œ±4 :=
                                                    M.read (deref Œ±3) in
                                                  let* Œ±5 :=
                                                    M.call
                                                      (balance_of Œ±0 Œ±2 Œ±4) in
                                                  M.alloc Œ±5 in
                                                let* _ :=
                                                  let* Œ±0 := M.read amount in
                                                  let* Œ±1 :=
                                                    M.call
                                                      ((Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::Vec")
                                                            [Ty.path "u128";
                                                              Ty.path
                                                                "alloc::alloc::Global"])::["push"]
                                                        (borrow_mut output)
                                                        Œ±0) in
                                                  M.alloc Œ±1 in
                                                M.alloc tt
                                              | _ => M.break_match
                                              end) :
                                              Ty.tuple []
                                          ] in
                                      M.alloc tt)) :
                                    Ty.tuple []
                                ] in
                            M.pure (use Œ±3)
                          | _ => M.break_match
                          end) :
                          Ty.tuple []
                      ] in
                  M.alloc tt)) :
                Ty.tuple []
            ] in
        M.pure (use Œ±3) in
      M.read output
    | _, _ => M.impossible
    end.
  
  (*
      fn set_approval_for_all(&mut self, operator: AccountId, approved: bool) -> Result<()> {
          let caller = self.env().caller();
          ensure!(operator != caller, Error::SelfApproval);
  
          if approved {
              self.approvals.insert((caller, operator), ());
          } else {
              self.approvals.remove((caller, operator));
          }
  
          self.env().emit_event(Event::ApprovalForAll(ApprovalForAll {
              owner: caller,
              operator,
              approved,
          }));
  
          Ok(())
      }
  *)
  Definition set_approval_for_all (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; operator; approved] =>
      let* self := M.alloc self in
      let* operator := M.alloc operator in
      let* approved := M.alloc approved in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple []; Ty.path "erc1155::Error"]) in
      M.catch_return
        (let* caller :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call
              ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 :=
            M.call ((Ty.path "erc1155::Env")::["caller"] (borrow Œ±2)) in
          M.alloc Œ±3 in
        let* _ :=
          let* Œ±0 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.cmp.PartialEq.ne
                (Self := Ty.path "erc1155::AccountId")
                (Rhs := Ty.path "erc1155::AccountId")
                (Trait := ‚Ñê))) in
          let* Œ±1 := M.call (Œ±0 (borrow operator) (borrow caller)) in
          let* Œ±2 := M.alloc ((M.var "UnOp::not") Œ±1) in
          let* Œ±3 := M.read (use Œ±2) in
          if Œ±3 then
            let* Œ±0 :=
              ltac:(M.get_method (fun ‚Ñê =>
                core.convert.Into.into
                  (Self := Ty.path "erc1155::Error")
                  (T := Ty.path "erc1155::Error")
                  (Trait := ‚Ñê))) in
            let* Œ±1 := M.call (Œ±0 erc1155.Error.SelfApproval) in
            let* Œ±2 := return_ (core.result.Result.Err Œ±1) in
            let* Œ±3 := M.read Œ±2 in
            let* Œ±4 := never_to_any Œ±3 in
            M.alloc Œ±4
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 := M.read (use approved) in
          if Œ±0 then
            let* _ :=
              let* Œ±0 := M.read self in
              let* Œ±1 := M.read caller in
              let* Œ±2 := M.read operator in
              let* Œ±3 :=
                M.call
                  ((Ty.apply
                        (Ty.path "erc1155::Mapping")
                        [Ty.tuple
                            [Ty.path "erc1155::AccountId";
                              Ty.path "erc1155::AccountId"];
                          Ty.tuple []])::["insert"]
                    (borrow_mut
                      ((M.var "erc1155::Contract::Get_approvals") (deref Œ±0)))
                    (Œ±1, Œ±2)
                    tt) in
              M.alloc Œ±3 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.read self in
              let* Œ±1 := M.read caller in
              let* Œ±2 := M.read operator in
              let* Œ±3 :=
                M.call
                  ((Ty.apply
                        (Ty.path "erc1155::Mapping")
                        [Ty.tuple
                            [Ty.path "erc1155::AccountId";
                              Ty.path "erc1155::AccountId"];
                          Ty.tuple []])::["remove"]
                    (borrow
                      ((M.var "erc1155::Contract::Get_approvals") (deref Œ±0)))
                    (Œ±1, Œ±2)) in
              M.alloc Œ±3 in
            M.alloc tt in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call
              ((Ty.path "erc1155::Contract")::["env"] (borrow (deref Œ±0))) in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.read caller in
          let* Œ±4 := M.read operator in
          let* Œ±5 := M.read approved in
          let* Œ±6 :=
            M.call
              ((Ty.path "erc1155::Env")::["emit_event"]
                (borrow Œ±2)
                (erc1155.Event.ApprovalForAll
                  {|
                    erc1155.ApprovalForAll.owner := Œ±3;
                    erc1155.ApprovalForAll.operator := Œ±4;
                    erc1155.ApprovalForAll.approved := Œ±5;
                  |})) in
          M.alloc Œ±6 in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("is_approved_for_all", InstanceField.Method is_approved_for_all);
      ("balance_of", InstanceField.Method balance_of);
      ("safe_transfer_from", InstanceField.Method safe_transfer_from);
      ("safe_batch_transfer_from",
        InstanceField.Method safe_batch_transfer_from);
      ("balance_of_batch", InstanceField.Method balance_of_batch);
      ("set_approval_for_all", InstanceField.Method set_approval_for_all)].
End Impl_erc1155_Erc1155_for_erc1155_Contract.

Module Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (*
      fn on_received(
          &mut self,
          _operator: AccountId,
          _from: AccountId,
          _token_id: TokenId,
          _value: Balance,
          _data: Vec<u8>,
      ) -> Vec<u8> {
          // The ERC-1155 standard dictates that if a contract does not accept token
          // transfers directly to the contract, then the contract must
          // revert.
          //
          // This prevents a user from unintentionally transferring tokens to a smart
          // contract and getting their funds stuck without any sort of
          // recovery mechanism.
          //
          // Note that the choice of whether or not to accept tokens is implementation
          // specific, and we've decided to not accept them in this
          // implementation.
          unimplemented!("This smart contract does not accept token transfer.")
      }
  *)
  Definition on_received (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _operator; _from; _token_id; _value; _data] =>
      let* self := M.alloc self in
      let* _operator := M.alloc _operator in
      let* _from := M.alloc _from in
      let* _token_id := M.alloc _token_id in
      let* _value := M.alloc _value in
      let* _data := M.alloc _data in
      let* Œ±0 :=
        M.read
          (mk_str
            "not implemented: This smart contract does not accept token transfer.") in
      let* Œ±1 := M.alloc [ Œ±0 ] in
      let* Œ±2 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] in
      let* Œ±3 := M.alloc Œ±2 in
      let* Œ±4 :=
        M.call
          ((Ty.path "core::fmt::Arguments")::["new_v1"]
            (pointer_coercion "Unsize" (borrow Œ±1))
            (pointer_coercion "Unsize" (borrow Œ±3))) in
      let* Œ±5 := M.call ((M.var "core::panicking::panic_fmt") Œ±4) in
      never_to_any Œ±5
    | _, _ => M.impossible
    end.
  
  (*
      fn on_batch_received(
          &mut self,
          _operator: AccountId,
          _from: AccountId,
          _token_ids: Vec<TokenId>,
          _values: Vec<Balance>,
          _data: Vec<u8>,
      ) -> Vec<u8> {
          // The ERC-1155 standard dictates that if a contract does not accept token
          // transfers directly to the contract, then the contract must
          // revert.
          //
          // This prevents a user from unintentionally transferring tokens to a smart
          // contract and getting their funds stuck without any sort of
          // recovery mechanism.
          //
          // Note that the choice of whether or not to accept tokens is implementation
          // specific, and we've decided to not accept them in this
          // implementation.
          unimplemented!("This smart contract does not accept batch token transfers.")
      }
  *)
  Definition on_batch_received (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _operator; _from; _token_ids; _values; _data] =>
      let* self := M.alloc self in
      let* _operator := M.alloc _operator in
      let* _from := M.alloc _from in
      let* _token_ids := M.alloc _token_ids in
      let* _values := M.alloc _values in
      let* _data := M.alloc _data in
      let* Œ±0 :=
        M.read
          (mk_str
            "not implemented: This smart contract does not accept batch token transfers.") in
      let* Œ±1 := M.alloc [ Œ±0 ] in
      let* Œ±2 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] in
      let* Œ±3 := M.alloc Œ±2 in
      let* Œ±4 :=
        M.call
          ((Ty.path "core::fmt::Arguments")::["new_v1"]
            (pointer_coercion "Unsize" (borrow Œ±1))
            (pointer_coercion "Unsize" (borrow Œ±3))) in
      let* Œ±5 := M.call ((M.var "core::panicking::panic_fmt") Œ±4) in
      never_to_any Œ±5
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("on_received", InstanceField.Method on_received);
      ("on_batch_received", InstanceField.Method on_batch_received)].
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
