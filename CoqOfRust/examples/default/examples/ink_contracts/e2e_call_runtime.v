(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_e2e_call_runtime_AccountId.
Section Impl_core_default_Default_for_e2e_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "e2e_call_runtime::AccountId") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ℐ))) in
      let* α1 := M.call α0 in
      M.pure (e2e_call_runtime.AccountId.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_e2e_call_runtime_AccountId.
End Impl_core_default_Default_for_e2e_call_runtime_AccountId.

Module  Impl_core_clone_Clone_for_e2e_call_runtime_AccountId.
Section Impl_core_clone_Clone_for_e2e_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "e2e_call_runtime::AccountId") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun γ =>
              (let* α0 := M.read self in
              M.pure (deref α0)) :
              Ty.apply (Ty.path "e2e_call_runtime::AccountId") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_e2e_call_runtime_AccountId.
End Impl_core_clone_Clone_for_e2e_call_runtime_AccountId.

Module  Impl_core_marker_Copy_for_e2e_call_runtime_AccountId.
Section Impl_core_marker_Copy_for_e2e_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "e2e_call_runtime::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_e2e_call_runtime_AccountId.
End Impl_core_marker_Copy_for_e2e_call_runtime_AccountId.

Axiom Balance : Ty.path "u128".



Module  Impl_e2e_call_runtime_Env.
Section Impl_e2e_call_runtime_Env.
  Definition Self : Set := Ty.apply (Ty.path "e2e_call_runtime::Env") [].
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition balance (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_balance : Instance.t := {
    Notations.double_colon := balance;
  }.
End Impl_e2e_call_runtime_Env.
End Impl_e2e_call_runtime_Env.



Module  Impl_core_default_Default_for_e2e_call_runtime_Contract.
Section Impl_core_default_Default_for_e2e_call_runtime_Contract.
  Definition Self : Ty.t := Ty.apply (Ty.path "e2e_call_runtime::Contract") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] => M.pure e2e_call_runtime.Contract.Build
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_e2e_call_runtime_Contract.
End Impl_core_default_Default_for_e2e_call_runtime_Contract.

Module  Impl_e2e_call_runtime_Contract.
Section Impl_e2e_call_runtime_Contract.
  Definition Self : Set := Ty.apply (Ty.path "e2e_call_runtime::Contract") [].
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call ((M.var "core::panicking::panic") α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.call (Ty.apply (Ty.path "e2e_call_runtime::Contract") [])::["init_env"]
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] => M.pure e2e_call_runtime.Contract.Build
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn get_contract_balance(&self) -> Balance {
          self.env().balance()
      }
  *)
  Definition get_contract_balance (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        M.call
          ((Ty.apply (Ty.path "e2e_call_runtime::Contract") [])::["env"] α0) in
      let* α2 := M.alloc α1 in
      M.call
        ((Ty.apply (Ty.path "e2e_call_runtime::Env") [])::["balance"]
          (borrow α2))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get_contract_balance : Instance.t := {
    Notations.double_colon := get_contract_balance;
  }.
End Impl_e2e_call_runtime_Contract.
End Impl_e2e_call_runtime_Contract.
