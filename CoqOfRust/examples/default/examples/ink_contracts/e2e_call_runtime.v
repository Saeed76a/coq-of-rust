(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot :=
      Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>));
  }.
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_e2e_call_runtime_AccountId_t.
Section Impl_core_default_Default_for_e2e_call_runtime_AccountId_t.
  Definition Self : Set := e2e_call_runtime.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M e2e_call_runtime.AccountId.t :=
    let* α0 : u128.t :=
      M.call
        (core.default.Default.default
          (Self := u128.t)
          (Trait := ltac:(refine _))) in
    M.pure (e2e_call_runtime.AccountId.Build_t α0).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_e2e_call_runtime_AccountId_t.
End Impl_core_default_Default_for_e2e_call_runtime_AccountId_t.

Module  Impl_core_clone_Clone_for_e2e_call_runtime_AccountId_t.
Section Impl_core_clone_Clone_for_e2e_call_runtime_AccountId_t.
  Definition Self : Set := e2e_call_runtime.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M e2e_call_runtime.AccountId.t :=
    let* self := M.alloc self in
    let _ : unit := tt in
    let* α0 : ref e2e_call_runtime.AccountId.t := M.read self in
    M.read (deref α0).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_e2e_call_runtime_AccountId_t.
End Impl_core_clone_Clone_for_e2e_call_runtime_AccountId_t.

Module  Impl_core_marker_Copy_for_e2e_call_runtime_AccountId_t.
Section Impl_core_marker_Copy_for_e2e_call_runtime_AccountId_t.
  Definition Self : Set := e2e_call_runtime.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_e2e_call_runtime_AccountId_t.
End Impl_core_marker_Copy_for_e2e_call_runtime_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : e2e_call_runtime.AccountId.t;
  }.
  
  Global Instance Get_caller : Notations.Dot "caller" := {
    Notations.dot :=
      Ref.map
        (fun α => Some α.(caller))
        (fun β α => Some (α <| caller := β |>));
  }.
  Global Instance Get_AF_caller : Notations.DoubleColon t "caller" := {
    Notations.double_colon (α : M.Val t) := α.["caller"];
  }.
End Env.
End Env.

Module  Impl_e2e_call_runtime_Env_t.
Section Impl_e2e_call_runtime_Env_t.
  Definition Self : Set := e2e_call_runtime.Env.t.
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition balance (self : ref Self) : M ltac:(e2e_call_runtime.Balance) :=
    let* self := M.alloc self in
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Global Instance AssociatedFunction_balance :
    Notations.DoubleColon Self "balance" := {
    Notations.double_colon := balance;
  }.
End Impl_e2e_call_runtime_Env_t.
End Impl_e2e_call_runtime_Env_t.

Module  Contract.
Section Contract.
  Inductive t : Set := Build.
End Contract.
End Contract.

Module  Impl_core_default_Default_for_e2e_call_runtime_Contract_t.
Section Impl_core_default_Default_for_e2e_call_runtime_Contract_t.
  Definition Self : Set := e2e_call_runtime.Contract.t.
  
  (*
  Default
  *)
  Definition default : M e2e_call_runtime.Contract.t :=
    M.pure e2e_call_runtime.Contract.Build.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_e2e_call_runtime_Contract_t.
End Impl_core_default_Default_for_e2e_call_runtime_Contract_t.

Module  Impl_e2e_call_runtime_Contract_t.
Section Impl_e2e_call_runtime_Contract_t.
  Definition Self : Set := e2e_call_runtime.Contract.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M e2e_call_runtime.Env.t :=
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M e2e_call_runtime.Env.t :=
    let* self := M.alloc self in
    M.call e2e_call_runtime.Contract.t::["init_env"].
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new : M Self := M.pure e2e_call_runtime.Contract.Build.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn get_contract_balance(&self) -> Balance {
          self.env().balance()
      }
  *)
  Definition get_contract_balance
      (self : ref Self)
      : M ltac:(e2e_call_runtime.Balance) :=
    let* self := M.alloc self in
    let* α0 : ref e2e_call_runtime.Contract.t := M.read self in
    let* α1 : e2e_call_runtime.Env.t :=
      M.call (e2e_call_runtime.Contract.t::["env"] α0) in
    let* α2 : M.Val e2e_call_runtime.Env.t := M.alloc α1 in
    M.call (e2e_call_runtime.Env.t::["balance"] (borrow α2)).
  
  Global Instance AssociatedFunction_get_contract_balance :
    Notations.DoubleColon Self "get_contract_balance" := {
    Notations.double_colon := get_contract_balance;
  }.
End Impl_e2e_call_runtime_Contract_t.
End Impl_e2e_call_runtime_Contract_t.
