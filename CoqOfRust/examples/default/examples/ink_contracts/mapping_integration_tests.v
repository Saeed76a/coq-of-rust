(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Mapping *)

Module Impl_core_default_Default_for_mapping_integration_tests_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "mapping_integration_tests::Mapping") [K; V].
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [K])
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.call Œ±0 in
      let* Œ±2 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [V])
            (Trait := ‚Ñê))) in
      let* Œ±3 := M.call Œ±2 in
      M.pure
        {|
          mapping_integration_tests.Mapping._key := Œ±1;
          mapping_integration_tests.Mapping._value := Œ±3;
        |}
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (K V : Ty.t) : Instance.t :=
    [("default", InstanceField.Method (default K V))].
End Impl_core_default_Default_for_mapping_integration_tests_Mapping_K_V.

Module Impl_mapping_integration_tests_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "mapping_integration_tests::Mapping") [K; V].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Definition contains (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition insert (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key; _value] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn new() -> Mapping<K, V> {
          unimplemented!()
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Definition remove (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition size (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition take (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; _key] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
End Impl_mapping_integration_tests_Mapping_K_V.

(* Struct AccountId *)

Module Impl_core_default_Default_for_mapping_integration_tests_AccountId.
  Definition Self : Ty.t := Ty.path "mapping_integration_tests::AccountId".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.call Œ±0 in
      M.pure (mapping_integration_tests.AccountId.Build_t Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("default", InstanceField.Method default)].
End Impl_core_default_Default_for_mapping_integration_tests_AccountId.

Module Impl_core_clone_Clone_for_mapping_integration_tests_AccountId.
  Definition Self : Ty.t := Ty.path "mapping_integration_tests::AccountId".
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read self in
              M.pure (deref Œ±0)) :
              Ty.path "mapping_integration_tests::AccountId"
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("clone", InstanceField.Method clone)].
End Impl_core_clone_Clone_for_mapping_integration_tests_AccountId.

Module Impl_core_marker_Copy_for_mapping_integration_tests_AccountId.
  Definition Self : Ty.t := Ty.path "mapping_integration_tests::AccountId".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_mapping_integration_tests_AccountId.

Axiom Balance :
  (Ty.path "mapping_integration_tests::Balance") = (Ty.path "u128").

(* Enum Env *)

Module Impl_mapping_integration_tests_Env.
  Definition Self : Ty.t := Ty.path "mapping_integration_tests::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read ((M.var "mapping_integration_tests::Env::Get_caller") (deref Œ±0))
    | _, _ => M.impossible
    end.
End Impl_mapping_integration_tests_Env.

(* Enum Mappings *)

Module Impl_core_default_Default_for_mapping_integration_tests_Mappings.
  Definition Self : Ty.t := Ty.path "mapping_integration_tests::Mappings".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self :=
              Ty.apply
                (Ty.path "mapping_integration_tests::Mapping")
                [Ty.path "mapping_integration_tests::AccountId";
                  Ty.path "u128"])
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.call Œ±0 in
      M.pure {| mapping_integration_tests.Mappings.balances := Œ±1; |}
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("default", InstanceField.Method default)].
End Impl_core_default_Default_for_mapping_integration_tests_Mappings.

Module Impl_mapping_integration_tests_Mappings.
  Definition Self : Ty.t := Ty.path "mapping_integration_tests::Mappings".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn env() -> Env {
          unimplemented!()
      }
  *)
  Definition env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call ((M.var "core::panicking::panic") Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      pub fn new() -> Self {
          let balances = Mapping::default();
          Self { balances }
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* balances :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.default.Default.default
              (Self :=
                Ty.apply
                  (Ty.path "mapping_integration_tests::Mapping")
                  [Ty.path "mapping_integration_tests::AccountId";
                    Ty.path "u128"])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.call Œ±0 in
        M.alloc Œ±1 in
      let* Œ±0 := M.read balances in
      let* Œ±0 :=
        M.alloc {| mapping_integration_tests.Mappings.balances := Œ±0; |} in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn get_balance(&self) -> Option<Balance> {
          let caller = Self::env().caller();
          self.balances.get(&caller)
      }
  *)
  Definition get_balance (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* caller :=
        let* Œ±0 :=
          M.call (Ty.path "mapping_integration_tests::Mappings")::["env"] in
        let* Œ±1 := M.alloc Œ±0 in
        let* Œ±2 :=
          M.call
            ((Ty.path "mapping_integration_tests::Env")::["caller"]
              (borrow Œ±1)) in
        M.alloc Œ±2 in
      let* Œ±0 := M.read self in
      let* Œ±1 :=
        M.call
          ((Ty.apply
                (Ty.path "mapping_integration_tests::Mapping")
                [Ty.path "mapping_integration_tests::AccountId";
                  Ty.path "u128"])::["get"]
            (borrow
              ((M.var "mapping_integration_tests::Mappings::Get_balances")
                (deref Œ±0)))
            (borrow caller)) in
      let* Œ±0 := M.alloc Œ±1 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn insert_balance(&mut self, value: Balance) -> Option<u32> {
          let caller = Self::env().caller();
          self.balances.insert(caller, value)
      }
  *)
  Definition insert_balance (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; value] =>
      let* self := M.alloc self in
      let* value := M.alloc value in
      let* caller :=
        let* Œ±0 :=
          M.call (Ty.path "mapping_integration_tests::Mappings")::["env"] in
        let* Œ±1 := M.alloc Œ±0 in
        let* Œ±2 :=
          M.call
            ((Ty.path "mapping_integration_tests::Env")::["caller"]
              (borrow Œ±1)) in
        M.alloc Œ±2 in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read caller in
      let* Œ±2 := M.read value in
      let* Œ±3 :=
        M.call
          ((Ty.apply
                (Ty.path "mapping_integration_tests::Mapping")
                [Ty.path "mapping_integration_tests::AccountId";
                  Ty.path "u128"])::["insert"]
            (borrow_mut
              ((M.var "mapping_integration_tests::Mappings::Get_balances")
                (deref Œ±0)))
            Œ±1
            Œ±2) in
      let* Œ±0 := M.alloc Œ±3 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn size_balance(&mut self) -> Option<u32> {
          let caller = Self::env().caller();
          self.balances.size(caller)
      }
  *)
  Definition size_balance (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* caller :=
        let* Œ±0 :=
          M.call (Ty.path "mapping_integration_tests::Mappings")::["env"] in
        let* Œ±1 := M.alloc Œ±0 in
        let* Œ±2 :=
          M.call
            ((Ty.path "mapping_integration_tests::Env")::["caller"]
              (borrow Œ±1)) in
        M.alloc Œ±2 in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read caller in
      let* Œ±2 :=
        M.call
          ((Ty.apply
                (Ty.path "mapping_integration_tests::Mapping")
                [Ty.path "mapping_integration_tests::AccountId";
                  Ty.path "u128"])::["size"]
            (borrow
              ((M.var "mapping_integration_tests::Mappings::Get_balances")
                (deref Œ±0)))
            Œ±1) in
      let* Œ±0 := M.alloc Œ±2 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn contains_balance(&self) -> bool {
          let caller = Self::env().caller();
          self.balances.contains(&caller)
      }
  *)
  Definition contains_balance (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* caller :=
        let* Œ±0 :=
          M.call (Ty.path "mapping_integration_tests::Mappings")::["env"] in
        let* Œ±1 := M.alloc Œ±0 in
        let* Œ±2 :=
          M.call
            ((Ty.path "mapping_integration_tests::Env")::["caller"]
              (borrow Œ±1)) in
        M.alloc Œ±2 in
      let* Œ±0 := M.read self in
      let* Œ±1 :=
        M.call
          ((Ty.apply
                (Ty.path "mapping_integration_tests::Mapping")
                [Ty.path "mapping_integration_tests::AccountId";
                  Ty.path "u128"])::["contains"]
            (borrow
              ((M.var "mapping_integration_tests::Mappings::Get_balances")
                (deref Œ±0)))
            (borrow caller)) in
      let* Œ±0 := M.alloc Œ±1 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn remove_balance(&mut self) {
          let caller = Self::env().caller();
          self.balances.remove(caller);
      }
  *)
  Definition remove_balance (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* caller :=
        let* Œ±0 :=
          M.call (Ty.path "mapping_integration_tests::Mappings")::["env"] in
        let* Œ±1 := M.alloc Œ±0 in
        let* Œ±2 :=
          M.call
            ((Ty.path "mapping_integration_tests::Env")::["caller"]
              (borrow Œ±1)) in
        M.alloc Œ±2 in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read caller in
        let* Œ±2 :=
          M.call
            ((Ty.apply
                  (Ty.path "mapping_integration_tests::Mapping")
                  [Ty.path "mapping_integration_tests::AccountId";
                    Ty.path "u128"])::["remove"]
              (borrow
                ((M.var "mapping_integration_tests::Mappings::Get_balances")
                  (deref Œ±0)))
              Œ±1) in
        M.alloc Œ±2 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn take_balance(&mut self) -> Option<Balance> {
          let caller = Self::env().caller();
          self.balances.take(caller)
      }
  *)
  Definition take_balance (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* caller :=
        let* Œ±0 :=
          M.call (Ty.path "mapping_integration_tests::Mappings")::["env"] in
        let* Œ±1 := M.alloc Œ±0 in
        let* Œ±2 :=
          M.call
            ((Ty.path "mapping_integration_tests::Env")::["caller"]
              (borrow Œ±1)) in
        M.alloc Œ±2 in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read caller in
      let* Œ±2 :=
        M.call
          ((Ty.apply
                (Ty.path "mapping_integration_tests::Mapping")
                [Ty.path "mapping_integration_tests::AccountId";
                  Ty.path "u128"])::["take"]
            (borrow
              ((M.var "mapping_integration_tests::Mappings::Get_balances")
                (deref Œ±0)))
            Œ±1) in
      let* Œ±0 := M.alloc Œ±2 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
End Impl_mapping_integration_tests_Mappings.
