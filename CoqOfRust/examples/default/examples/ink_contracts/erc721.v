(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Mapping *)

Module Impl_core_default_Default_for_erc721_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "erc721::Mapping") [ K; V ].
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ K; V ], [] =>
      let* Œ±0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ K ] ] in
      let* Œ±1 := M.call Œ±0 [] in
      let* Œ±2 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ V ] ] in
      let* Œ±3 := M.call Œ±2 [] in
      M.pure
        (Value.StructRecord "erc721::Mapping" [ ("_key", Œ±1); ("_value", Œ±3) ])
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (K V : Ty.t) : Instance.t :=
    [ ("default", InstanceField.Method (default K V)) ].
End Impl_core_default_Default_for_erc721_Mapping_K_V.

Module Impl_erc721_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "erc721::Mapping") [ K; V ].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Definition contains (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition insert (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ K; V ], [ self; _key; _value ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Definition remove (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition size (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition take (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
End Impl_erc721_Mapping_K_V.

(* Struct AccountId *)

Module Impl_core_default_Default_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* Œ±1 := M.call Œ±0 [] in
      M.pure (erc721.AccountId.Build_t Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_erc721_AccountId.

Module Impl_core_clone_Clone_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [ Ty.path "u128" ]))
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read self in
              M.pure (deref Œ±0)) :
              Ty.path "erc721::AccountId"
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_erc721_AccountId.

Module Impl_core_marker_Copy_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_erc721_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc721_AccountId.

Module Impl_core_cmp_PartialEq_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read ((M.var "erc721::AccountId::Get_0") (deref Œ±0)) in
      let* Œ±2 := M.read other in
      let* Œ±3 := M.read ((M.var "erc721::AccountId::Get_0") (deref Œ±2)) in
      M.pure ((M.var "BinOp::Pure::eq") Œ±1 Œ±3)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_erc721_AccountId.

Module Impl_core_convert_From_array_u8_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  (*
      fn from(_value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ _value ] =>
      let* _value := M.alloc _value in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("from", InstanceField.Method from) ].
End Impl_core_convert_From_array_u8_for_erc721_AccountId.

Axiom Balance : (Ty.path "erc721::Balance") = (Ty.path "u128").

(* Enum Env *)

Axiom TokenId : (Ty.path "erc721::TokenId") = (Ty.path "u32").

(* Enum Erc721 *)

Module Impl_core_default_Default_for_erc721_Erc721.
  Definition Self : Ty.t := Ty.path "erc721::Erc721".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "erc721::Mapping")
                [ Ty.path "u32"; Ty.path "erc721::AccountId" ]
          ] in
      let* Œ±1 := M.call Œ±0 [] in
      let* Œ±2 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "erc721::Mapping")
                [ Ty.path "u32"; Ty.path "erc721::AccountId" ]
          ] in
      let* Œ±3 := M.call Œ±2 [] in
      let* Œ±4 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "erc721::Mapping")
                [ Ty.path "erc721::AccountId"; Ty.path "u32" ]
          ] in
      let* Œ±5 := M.call Œ±4 [] in
      let* Œ±6 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "erc721::Mapping")
                [
                  Ty.tuple
                    [ Ty.path "erc721::AccountId"; Ty.path "erc721::AccountId"
                    ];
                  Ty.tuple []
                ]
          ] in
      let* Œ±7 := M.call Œ±6 [] in
      M.pure
        (Value.StructRecord
          "erc721::Erc721"
          [
            ("token_owner", Œ±1);
            ("token_approvals", Œ±3);
            ("owned_tokens_count", Œ±5);
            ("operator_approvals", Œ±7)
          ])
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_erc721_Erc721.

(* Enum Error *)

Module Impl_core_marker_StructuralPartialEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_erc721_Error.

Module Impl_core_cmp_PartialEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* Œ±0 := M.read self in
        let* Œ±1 :=
          M.call (M.var "core::intrinsics::discriminant_value") [ Œ±0 ] in
        M.alloc Œ±1 in
      let* __arg1_tag :=
        let* Œ±0 := M.read other in
        let* Œ±1 :=
          M.call (M.var "core::intrinsics::discriminant_value") [ Œ±0 ] in
        M.alloc Œ±1 in
      let* Œ±0 := M.read __self_tag in
      let* Œ±1 := M.read __arg1_tag in
      let* Œ±0 := M.alloc ((M.var "BinOp::Pure::eq") Œ±0 Œ±1) in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_erc721_Error.

Module Impl_core_marker_StructuralEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralEq_for_erc721_Error.

Module Impl_core_cmp_Eq_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (ùúè : list Ty.t)
      (Œ± : list Value.t)
      : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [
      ("assert_receiver_is_total_eq",
        InstanceField.Method assert_receiver_is_total_eq)
    ].
End Impl_core_cmp_Eq_for_erc721_Error.

Module Impl_core_clone_Clone_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read (deref Œ±0)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_erc721_Error.

Module Impl_core_marker_Copy_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_erc721_Error.

(* Enum Transfer *)

(* Enum Approval *)

(* Enum ApprovalForAll *)

(* Enum Event *)

Module Impl_erc721_Env.
  Definition Self : Ty.t := Ty.path "erc721::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read ((M.var "erc721::Env::Get_caller") (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
End Impl_erc721_Env.

Module Impl_erc721_Erc721.
  Definition Self : Ty.t := Ty.path "erc721::Erc721".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.call (Ty.path "erc721::Erc721")::["init_env"] []
    | _, _ => M.impossible
    end.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "erc721::Erc721" ] in
      M.call Œ±0 []
    | _, _ => M.impossible
    end.
  
  (*
      fn balance_of_or_zero(&self, of: &AccountId) -> u32 {
          self.owned_tokens_count.get(of).unwrap_or(0 as u32)
      }
  *)
  Definition balance_of_or_zero (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; of ] =>
      let* self := M.alloc self in
      let* of := M.alloc of in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read of in
      let* Œ±2 :=
        M.call
          (Ty.apply
              (Ty.path "erc721::Mapping")
              [ Ty.path "erc721::AccountId"; Ty.path "u32" ])::["get"]
          [
            borrow
              ((M.var "erc721::Erc721::Get_owned_tokens_count") (deref Œ±0));
            Œ±1
          ] in
      let* Œ±3 := M.alloc ((Integer.of_Z 0) : Ty.path "u32") in
      let* Œ±4 := M.read (use Œ±3) in
      M.call
        (Ty.apply
            (Ty.path "core::option::Option")
            [ Ty.path "u32" ])::["unwrap_or"]
        [ Œ±2; Œ±4 ]
    | _, _ => M.impossible
    end.
  
  (*
      fn clear_approval(&mut self, id: TokenId) {
          self.token_approvals.remove(id);
      }
  *)
  Definition clear_approval (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read id in
        let* Œ±2 :=
          M.call
            (Ty.apply
                (Ty.path "erc721::Mapping")
                [ Ty.path "u32"; Ty.path "erc721::AccountId" ])::["remove"]
            [
              borrow ((M.var "erc721::Erc721::Get_token_approvals") (deref Œ±0));
              Œ±1
            ] in
        M.alloc Œ±2 in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      fn approved_for_all(&self, owner: AccountId, operator: AccountId) -> bool {
          self.operator_approvals.contains(&(owner, operator))
      }
  *)
  Definition approved_for_all (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; owner; operator ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* operator := M.alloc operator in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read owner in
      let* Œ±2 := M.read operator in
      let* Œ±3 := M.alloc (Œ±1, Œ±2) in
      M.call
        (Ty.apply
            (Ty.path "erc721::Mapping")
            [
              Ty.tuple
                [ Ty.path "erc721::AccountId"; Ty.path "erc721::AccountId" ];
              Ty.tuple []
            ])::["contains"]
        [
          borrow ((M.var "erc721::Erc721::Get_operator_approvals") (deref Œ±0));
          borrow Œ±3
        ]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn owner_of(&self, id: TokenId) -> Option<AccountId> {
          self.token_owner.get(&id)
      }
  *)
  Definition owner_of (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* Œ±0 := M.read self in
      M.call
        (Ty.apply
            (Ty.path "erc721::Mapping")
            [ Ty.path "u32"; Ty.path "erc721::AccountId" ])::["get"]
        [
          borrow ((M.var "erc721::Erc721::Get_token_owner") (deref Œ±0));
          borrow id
        ]
    | _, _ => M.impossible
    end.
  
  (*
      fn approved_or_owner(&self, from: Option<AccountId>, id: TokenId) -> bool {
          let owner = self.owner_of(id);
          from != Some(AccountId::from([0x0; 32]))
              && (from == owner
                  || from == self.token_approvals.get(&id)
                  || self.approved_for_all(
                      owner.expect("Error with AccountId"),
                      from.expect("Error with AccountId"),
                  ))
      }
  *)
  Definition approved_or_owner (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; from; id ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* id := M.alloc id in
      let* owner :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read id in
        let* Œ±2 := M.call (Ty.path "erc721::Erc721")::["owner_of"] [ Œ±0; Œ±1 ] in
        M.alloc Œ±2 in
      let* Œ±0 :=
        M.get_method
          "core::cmp::PartialEq"
          "ne"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "erc721::AccountId" ];
            (* Rhs *)
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "erc721::AccountId" ]
          ] in
      let* Œ±1 :=
        M.get_method
          "core::convert::From"
          "from"
          [
            (* Self *) Ty.path "erc721::AccountId";
            (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ]
          ] in
      let* Œ±2 := M.call Œ±1 [ repeat ((Integer.of_Z 0) : Ty.path "u8") 32 ] in
      let* Œ±3 := M.alloc (core.option.Option.Some Œ±2) in
      let* Œ±4 := M.call Œ±0 [ borrow from; borrow Œ±3 ] in
      let* Œ±5 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "erc721::AccountId" ];
            (* Rhs *)
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "erc721::AccountId" ]
          ] in
      let* Œ±6 := M.call Œ±5 [ borrow from; borrow owner ] in
      let* Œ±7 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "erc721::AccountId" ];
            (* Rhs *)
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "erc721::AccountId" ]
          ] in
      let* Œ±8 := M.read self in
      let* Œ±9 :=
        M.call
          (Ty.apply
              (Ty.path "erc721::Mapping")
              [ Ty.path "u32"; Ty.path "erc721::AccountId" ])::["get"]
          [
            borrow ((M.var "erc721::Erc721::Get_token_approvals") (deref Œ±8));
            borrow id
          ] in
      let* Œ±10 := M.alloc Œ±9 in
      let* Œ±11 := M.call Œ±7 [ borrow from; borrow Œ±10 ] in
      let* Œ±12 := M.read self in
      let* Œ±13 := M.read owner in
      let* Œ±14 := M.read (mk_str "Error with AccountId") in
      let* Œ±15 :=
        M.call
          (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "erc721::AccountId" ])::["expect"]
          [ Œ±13; Œ±14 ] in
      let* Œ±16 := M.read from in
      let* Œ±17 := M.read (mk_str "Error with AccountId") in
      let* Œ±18 :=
        M.call
          (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "erc721::AccountId" ])::["expect"]
          [ Œ±16; Œ±17 ] in
      let* Œ±19 :=
        M.call
          (Ty.path "erc721::Erc721")::["approved_for_all"]
          [ Œ±12; Œ±15; Œ±18 ] in
      let* Œ±0 :=
        M.alloc
          ((M.var "BinOp::Pure::and")
            Œ±4
            ((M.var "BinOp::Pure::or")
              ((M.var "BinOp::Pure::or") Œ±6 Œ±11)
              Œ±19)) in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      fn exists(&self, id: TokenId) -> bool {
          self.token_owner.contains(&id)
      }
  *)
  Definition exists_ (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* Œ±0 := M.read self in
      M.call
        (Ty.apply
            (Ty.path "erc721::Mapping")
            [ Ty.path "u32"; Ty.path "erc721::AccountId" ])::["contains"]
        [
          borrow ((M.var "erc721::Erc721::Get_token_owner") (deref Œ±0));
          borrow id
        ]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn balance_of(&self, owner: AccountId) -> u32 {
          self.balance_of_or_zero(&owner)
      }
  *)
  Definition balance_of (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* Œ±0 := M.read self in
      M.call
        (Ty.path "erc721::Erc721")::["balance_of_or_zero"]
        [ Œ±0; borrow owner ]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn get_approved(&self, id: TokenId) -> Option<AccountId> {
          self.token_approvals.get(&id)
      }
  *)
  Definition get_approved (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* Œ±0 := M.read self in
      M.call
        (Ty.apply
            (Ty.path "erc721::Mapping")
            [ Ty.path "u32"; Ty.path "erc721::AccountId" ])::["get"]
        [
          borrow ((M.var "erc721::Erc721::Get_token_approvals") (deref Œ±0));
          borrow id
        ]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn is_approved_for_all(&self, owner: AccountId, operator: AccountId) -> bool {
          self.approved_for_all(owner, operator)
      }
  *)
  Definition is_approved_for_all (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; owner; operator ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* operator := M.alloc operator in
      let* Œ±0 := M.read self in
      let* Œ±1 := M.read owner in
      let* Œ±2 := M.read operator in
      M.call (Ty.path "erc721::Erc721")::["approved_for_all"] [ Œ±0; Œ±1; Œ±2 ]
    | _, _ => M.impossible
    end.
  
  (*
      fn approve_for_all(&mut self, to: AccountId, approved: bool) -> Result<(), Error> {
          let caller = self.env().caller();
          if to == caller {
              return Err(Error::NotAllowed);
          }
          self.env().emit_event(Event::ApprovalForAll(ApprovalForAll {
              owner: caller,
              operator: to,
              approved,
          }));
  
          if approved {
              self.operator_approvals.insert((caller, to), ());
          } else {
              self.operator_approvals.remove((caller, to));
          }
  
          Ok(())
      }
  *)
  Definition approve_for_all (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; to; approved ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* approved := M.alloc approved in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc721::Error" ]) in
      M.catch_return
        (let* caller :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call (Ty.path "erc721::Erc721")::["env"] [ borrow (deref Œ±0) ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.call (Ty.path "erc721::Env")::["caller"] [ borrow Œ±2 ] in
          M.alloc Œ±3 in
        let* _ :=
          let* Œ±0 :=
            M.get_method
              "core::cmp::PartialEq"
              "eq"
              [
                (* Self *) Ty.path "erc721::AccountId";
                (* Rhs *) Ty.path "erc721::AccountId"
              ] in
          let* Œ±1 := M.call Œ±0 [ borrow to; borrow caller ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.read (use Œ±2) in
          if Œ±3 then
            let* Œ±0 :=
              return_ (core.result.Result.Err erc721.Error.NotAllowed) in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call (Ty.path "erc721::Erc721")::["env"] [ borrow (deref Œ±0) ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.read caller in
          let* Œ±4 := M.read to in
          let* Œ±5 := M.read approved in
          let* Œ±6 :=
            M.call
              (Ty.path "erc721::Env")::["emit_event"]
              [
                borrow Œ±2;
                erc721.Event.ApprovalForAll
                  (Value.StructRecord
                    "erc721::ApprovalForAll"
                    [ ("owner", Œ±3); ("operator", Œ±4); ("approved", Œ±5) ])
              ] in
          M.alloc Œ±6 in
        let* _ :=
          let* Œ±0 := M.read (use approved) in
          if Œ±0 then
            let* _ :=
              let* Œ±0 := M.read self in
              let* Œ±1 := M.read caller in
              let* Œ±2 := M.read to in
              let* Œ±3 :=
                M.call
                  (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [
                        Ty.tuple
                          [
                            Ty.path "erc721::AccountId";
                            Ty.path "erc721::AccountId"
                          ];
                        Ty.tuple []
                      ])::["insert"]
                  [
                    borrow_mut
                      ((M.var "erc721::Erc721::Get_operator_approvals")
                        (deref Œ±0));
                    (Œ±1, Œ±2);
                    tt
                  ] in
              M.alloc Œ±3 in
            M.alloc tt
          else
            let* _ :=
              let* Œ±0 := M.read self in
              let* Œ±1 := M.read caller in
              let* Œ±2 := M.read to in
              let* Œ±3 :=
                M.call
                  (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [
                        Ty.tuple
                          [
                            Ty.path "erc721::AccountId";
                            Ty.path "erc721::AccountId"
                          ];
                        Ty.tuple []
                      ])::["remove"]
                  [
                    borrow
                      ((M.var "erc721::Erc721::Get_operator_approvals")
                        (deref Œ±0));
                    (Œ±1, Œ±2)
                  ] in
              M.alloc Œ±3 in
            M.alloc tt in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn set_approval_for_all(&mut self, to: AccountId, approved: bool) -> Result<(), Error> {
          self.approve_for_all(to, approved)?;
          Ok(())
      }
  *)
  Definition set_approval_for_all (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; to; approved ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* approved := M.alloc approved in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc721::Error" ]) in
      M.catch_return
        (let* _ :=
          let* Œ±0 :=
            M.get_method
              "core::ops::try_trait::Try"
              "branch"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
              ] in
          let* Œ±1 := M.read self in
          let* Œ±2 := M.read to in
          let* Œ±3 := M.read approved in
          let* Œ±4 :=
            M.call
              (Ty.path "erc721::Erc721")::["approve_for_all"]
              [ Œ±1; Œ±2; Œ±3 ] in
          let* Œ±5 := M.call Œ±0 [ Œ±4 ] in
          let* Œ±6 := M.alloc Œ±5 in
          match_operator
            Œ±6
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "erc721::Error" ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "erc721::Error"
                            ]
                      ] in
                  let* Œ±1 := M.read residual in
                  let* Œ±2 := M.call Œ±0 [ Œ±1 ] in
                  let* Œ±3 := return_ Œ±2 in
                  let* Œ±4 := M.read Œ±3 in
                  let* Œ±5 := never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match 
                end) :
                Ty.tuple [];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match 
                end) :
                Ty.tuple []
            ] in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      fn approve_for(&mut self, to: &AccountId, id: TokenId) -> Result<(), Error> {
          let caller = self.env().caller();
          let owner = self.owner_of(id);
          if !(owner == Some(caller)
              || self.approved_for_all(owner.expect("Error with AccountId"), caller))
          {
              return Err(Error::NotAllowed);
          };
  
          if *to == AccountId::from([0x0; 32]) {
              return Err(Error::NotAllowed);
          };
  
          if self.token_approvals.contains(&id) {
              return Err(Error::CannotInsert);
          } else {
              self.token_approvals.insert(id, *to);
          }
  
          self.env().emit_event(Event::Approval(Approval {
              from: caller,
              to: *to,
              id,
          }));
  
          Ok(())
      }
  *)
  Definition approve_for (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; to; id ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* id := M.alloc id in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc721::Error" ]) in
      M.catch_return
        (let* caller :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call (Ty.path "erc721::Erc721")::["env"] [ borrow (deref Œ±0) ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.call (Ty.path "erc721::Env")::["caller"] [ borrow Œ±2 ] in
          M.alloc Œ±3 in
        let* owner :=
          let* Œ±0 := M.read self in
          let* Œ±1 := M.read id in
          let* Œ±2 :=
            M.call
              (Ty.path "erc721::Erc721")::["owner_of"]
              [ borrow (deref Œ±0); Œ±1 ] in
          M.alloc Œ±2 in
        let* _ :=
          let* Œ±0 :=
            M.get_method
              "core::cmp::PartialEq"
              "eq"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.path "erc721::AccountId" ];
                (* Rhs *)
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.path "erc721::AccountId" ]
              ] in
          let* Œ±1 := M.read caller in
          let* Œ±2 := M.alloc (core.option.Option.Some Œ±1) in
          let* Œ±3 := M.call Œ±0 [ borrow owner; borrow Œ±2 ] in
          let* Œ±4 := M.read self in
          let* Œ±5 := M.read owner in
          let* Œ±6 := M.read (mk_str "Error with AccountId") in
          let* Œ±7 :=
            M.call
              (Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "erc721::AccountId" ])::["expect"]
              [ Œ±5; Œ±6 ] in
          let* Œ±8 := M.read caller in
          let* Œ±9 :=
            M.call
              (Ty.path "erc721::Erc721")::["approved_for_all"]
              [ borrow (deref Œ±4); Œ±7; Œ±8 ] in
          let* Œ±10 :=
            M.alloc ((M.var "UnOp::not") ((M.var "BinOp::Pure::or") Œ±3 Œ±9)) in
          let* Œ±11 := M.read (use Œ±10) in
          if Œ±11 then
            let* Œ±0 :=
              return_ (core.result.Result.Err erc721.Error.NotAllowed) in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 :=
            M.get_method
              "core::cmp::PartialEq"
              "eq"
              [
                (* Self *) Ty.path "erc721::AccountId";
                (* Rhs *) Ty.path "erc721::AccountId"
              ] in
          let* Œ±1 := M.read to in
          let* Œ±2 :=
            M.get_method
              "core::convert::From"
              "from"
              [
                (* Self *) Ty.path "erc721::AccountId";
                (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ]
              ] in
          let* Œ±3 :=
            M.call Œ±2 [ repeat ((Integer.of_Z 0) : Ty.path "u8") 32 ] in
          let* Œ±4 := M.alloc Œ±3 in
          let* Œ±5 := M.call Œ±0 [ Œ±1; borrow Œ±4 ] in
          let* Œ±6 := M.alloc Œ±5 in
          let* Œ±7 := M.read (use Œ±6) in
          if Œ±7 then
            let* Œ±0 :=
              return_ (core.result.Result.Err erc721.Error.NotAllowed) in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2
          else
            M.alloc tt in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call
              (Ty.apply
                  (Ty.path "erc721::Mapping")
                  [ Ty.path "u32"; Ty.path "erc721::AccountId" ])::["contains"]
              [
                borrow
                  ((M.var "erc721::Erc721::Get_token_approvals") (deref Œ±0));
                borrow id
              ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.read (use Œ±2) in
          if Œ±3 then
            let* Œ±0 :=
              return_ (core.result.Result.Err erc721.Error.CannotInsert) in
            let* Œ±1 := M.read Œ±0 in
            let* Œ±2 := never_to_any Œ±1 in
            M.alloc Œ±2
          else
            let* _ :=
              let* Œ±0 := M.read self in
              let* Œ±1 := M.read id in
              let* Œ±2 := M.read to in
              let* Œ±3 := M.read (deref Œ±2) in
              let* Œ±4 :=
                M.call
                  (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [ Ty.path "u32"; Ty.path "erc721::AccountId"
                      ])::["insert"]
                  [
                    borrow_mut
                      ((M.var "erc721::Erc721::Get_token_approvals")
                        (deref Œ±0));
                    Œ±1;
                    Œ±3
                  ] in
              M.alloc Œ±4 in
            M.alloc tt in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call (Ty.path "erc721::Erc721")::["env"] [ borrow (deref Œ±0) ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.read caller in
          let* Œ±4 := M.read to in
          let* Œ±5 := M.read (deref Œ±4) in
          let* Œ±6 := M.read id in
          let* Œ±7 :=
            M.call
              (Ty.path "erc721::Env")::["emit_event"]
              [
                borrow Œ±2;
                erc721.Event.Approval
                  (Value.StructRecord
                    "erc721::Approval"
                    [ ("from", Œ±3); ("to", Œ±5); ("id", Œ±6) ])
              ] in
          M.alloc Œ±7 in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn approve(&mut self, to: AccountId, id: TokenId) -> Result<(), Error> {
          self.approve_for(&to, id)?;
          Ok(())
      }
  *)
  Definition approve (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; to; id ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* id := M.alloc id in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc721::Error" ]) in
      M.catch_return
        (let* _ :=
          let* Œ±0 :=
            M.get_method
              "core::ops::try_trait::Try"
              "branch"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
              ] in
          let* Œ±1 := M.read self in
          let* Œ±2 := M.read id in
          let* Œ±3 :=
            M.call
              (Ty.path "erc721::Erc721")::["approve_for"]
              [ Œ±1; borrow to; Œ±2 ] in
          let* Œ±4 := M.call Œ±0 [ Œ±3 ] in
          let* Œ±5 := M.alloc Œ±4 in
          match_operator
            Œ±5
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "erc721::Error" ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "erc721::Error"
                            ]
                      ] in
                  let* Œ±1 := M.read residual in
                  let* Œ±2 := M.call Œ±0 [ Œ±1 ] in
                  let* Œ±3 := return_ Œ±2 in
                  let* Œ±4 := M.read Œ±3 in
                  let* Œ±5 := never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match 
                end) :
                Ty.tuple [];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match 
                end) :
                Ty.tuple []
            ] in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      fn remove_token_from(&mut self, from: &AccountId, id: TokenId) -> Result<(), Error> {
          let Self {
              token_owner,
              owned_tokens_count,
              ..
          } = self;
  
          if !token_owner.contains(&id) {
              return Err(Error::TokenNotFound);
          }
  
          let count = owned_tokens_count
              .get(from)
              .map(|c| c - (1 as u32))
              .ok_or(Error::CannotFetchValue)?;
          owned_tokens_count.insert( *from, count);
          token_owner.remove(id);
  
          Ok(())
      }
  *)
  Definition remove_token_from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; from; id ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* id := M.alloc id in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc721::Error" ]) in
      M.catch_return
        (let* Œ±0 :=
          match_operator
            self
            [
              fun Œ≥ =>
                (let* Œ≥ :=
                  let* Œ±0 := M.read Œ≥ in
                  M.pure (deref Œ±0) in
                let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                |
                    {|
                      erc721.Erc721.token_owner := _;
                      erc721.Erc721.owned_tokens_count := _;
                    |}
                    =>
                  let Œ≥1_0 := (M.var "erc721::Erc721::Get_token_owner") Œ≥ in
                  let Œ≥1_1 :=
                    (M.var "erc721::Erc721::Get_owned_tokens_count") Œ≥ in
                  let* token_owner := M.alloc (borrow_mut Œ≥1_0) in
                  let* owned_tokens_count := M.alloc (borrow_mut Œ≥1_1) in
                  let* _ :=
                    let* Œ±0 := M.read token_owner in
                    let* Œ±1 :=
                      M.call
                        (Ty.apply
                            (Ty.path "erc721::Mapping")
                            [ Ty.path "u32"; Ty.path "erc721::AccountId"
                            ])::["contains"]
                        [ borrow (deref Œ±0); borrow id ] in
                    let* Œ±2 := M.alloc ((M.var "UnOp::not") Œ±1) in
                    let* Œ±3 := M.read (use Œ±2) in
                    if Œ±3 then
                      let* Œ±0 :=
                        return_
                          (core.result.Result.Err erc721.Error.TokenNotFound) in
                      let* Œ±1 := M.read Œ±0 in
                      let* Œ±2 := never_to_any Œ±1 in
                      M.alloc Œ±2
                    else
                      M.alloc tt in
                  let* count :=
                    let* Œ±0 :=
                      M.get_method
                        "core::ops::try_trait::Try"
                        "branch"
                        [
                          (* Self *)
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "erc721::Error" ]
                        ] in
                    let* Œ±1 := M.read owned_tokens_count in
                    let* Œ±2 := M.read from in
                    let* Œ±3 :=
                      M.call
                        (Ty.apply
                            (Ty.path "erc721::Mapping")
                            [ Ty.path "erc721::AccountId"; Ty.path "u32"
                            ])::["get"]
                        [ borrow (deref Œ±1); Œ±2 ] in
                    let* Œ±4 :=
                      M.call
                        (Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.path "u32" ])::["map"]
                        [
                          Œ±3;
                          fun (Œ±0 : Ty.path "u32") =>
                            (let* Œ±0 := M.alloc Œ±0 in
                            match_operator
                              Œ±0
                              [
                                fun Œ≥ =>
                                  (let* c := M.copy Œ≥ in
                                  let* Œ±0 := M.read c in
                                  let* Œ±1 :=
                                    M.alloc
                                      ((Integer.of_Z 1) : Ty.path "u32") in
                                  let* Œ±2 := M.read (use Œ±1) in
                                  (M.var "BinOp::Panic::sub") Œ±0 Œ±2) :
                                  Ty.path "u32"
                              ]) :
                            Ty.path "u32"
                        ] in
                    let* Œ±5 :=
                      M.call
                        (Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.path "u32" ])::["ok_or"]
                        [ Œ±4; erc721.Error.CannotFetchValue ] in
                    let* Œ±6 := M.call Œ±0 [ Œ±5 ] in
                    let* Œ±7 := M.alloc Œ±6 in
                    let* Œ±8 :=
                      match_operator
                        Œ±7
                        [
                          fun Œ≥ =>
                            (let* Œ±0 := M.read Œ≥ in
                            match Œ±0 with
                            | core.ops.control_flow.ControlFlow.Break _ =>
                              let Œ≥0_0 :=
                                (M.var
                                    "core::ops::control_flow::ControlFlow::Get_Break_0")
                                  Œ≥ in
                              let* residual := M.copy Œ≥0_0 in
                              let* Œ±0 :=
                                M.get_method
                                  "core::ops::try_trait::FromResidual"
                                  "from_residual"
                                  [
                                    (* Self *)
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "erc721::Error"
                                        ];
                                    (* R *)
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "erc721::Error"
                                        ]
                                  ] in
                              let* Œ±1 := M.read residual in
                              let* Œ±2 := M.call Œ±0 [ Œ±1 ] in
                              let* Œ±3 := return_ Œ±2 in
                              let* Œ±4 := M.read Œ±3 in
                              let* Œ±5 := never_to_any Œ±4 in
                              M.alloc Œ±5
                            | _ => M.break_match 
                            end) :
                            Ty.path "u32";
                          fun Œ≥ =>
                            (let* Œ±0 := M.read Œ≥ in
                            match Œ±0 with
                            | core.ops.control_flow.ControlFlow.Continue _ =>
                              let Œ≥0_0 :=
                                (M.var
                                    "core::ops::control_flow::ControlFlow::Get_Continue_0")
                                  Œ≥ in
                              let* val := M.copy Œ≥0_0 in
                              M.pure val
                            | _ => M.break_match 
                            end) :
                            Ty.path "u32"
                        ] in
                    M.copy Œ±8 in
                  let* _ :=
                    let* Œ±0 := M.read owned_tokens_count in
                    let* Œ±1 := M.read from in
                    let* Œ±2 := M.read (deref Œ±1) in
                    let* Œ±3 := M.read count in
                    let* Œ±4 :=
                      M.call
                        (Ty.apply
                            (Ty.path "erc721::Mapping")
                            [ Ty.path "erc721::AccountId"; Ty.path "u32"
                            ])::["insert"]
                        [ Œ±0; Œ±2; Œ±3 ] in
                    M.alloc Œ±4 in
                  let* _ :=
                    let* Œ±0 := M.read token_owner in
                    let* Œ±1 := M.read id in
                    let* Œ±2 :=
                      M.call
                        (Ty.apply
                            (Ty.path "erc721::Mapping")
                            [ Ty.path "u32"; Ty.path "erc721::AccountId"
                            ])::["remove"]
                        [ borrow (deref Œ±0); Œ±1 ] in
                    M.alloc Œ±2 in
                  M.alloc (core.result.Result.Ok tt)
                end) :
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.tuple []; Ty.path "erc721::Error" ]
            ] in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      fn add_token_to(&mut self, to: &AccountId, id: TokenId) -> Result<(), Error> {
          let Self {
              token_owner,
              owned_tokens_count,
              ..
          } = self;
  
          if token_owner.contains(&id) {
              return Err(Error::TokenExists);
          }
  
          if *to == AccountId::from([0x0; 32]) {
              return Err(Error::NotAllowed);
          };
  
          let count = owned_tokens_count
              .get(to)
              .map(|c| c + (1 as u32))
              .unwrap_or(1);
  
          owned_tokens_count.insert( *to, count);
          token_owner.insert(id, *to);
  
          Ok(())
      }
  *)
  Parameter add_token_to : (list Ty.t) -> (list Value.t) -> M.
  
  (*
      fn transfer_token_from(
          &mut self,
          from: &AccountId,
          to: &AccountId,
          id: TokenId,
      ) -> Result<(), Error> {
          let caller = self.env().caller();
          if !self.exists(id) {
              return Err(Error::TokenNotFound);
          };
          if !self.approved_or_owner(Some(caller), id) {
              return Err(Error::NotApproved);
          };
          self.clear_approval(id);
          self.remove_token_from(from, id)?;
          self.add_token_to(to, id)?;
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some( *from),
              to: Some( *to),
              id,
          }));
          Ok(())
      }
  *)
  Parameter transfer_token_from : (list Ty.t) -> (list Value.t) -> M.
  
  (*
      pub fn transfer(&mut self, destination: AccountId, id: TokenId) -> Result<(), Error> {
          let caller = self.env().caller();
          self.transfer_token_from(&caller, &destination, id)?;
          Ok(())
      }
  *)
  Definition transfer (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; destination; id ] =>
      let* self := M.alloc self in
      let* destination := M.alloc destination in
      let* id := M.alloc id in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc721::Error" ]) in
      M.catch_return
        (let* caller :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call (Ty.path "erc721::Erc721")::["env"] [ borrow (deref Œ±0) ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.call (Ty.path "erc721::Env")::["caller"] [ borrow Œ±2 ] in
          M.alloc Œ±3 in
        let* _ :=
          let* Œ±0 :=
            M.get_method
              "core::ops::try_trait::Try"
              "branch"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
              ] in
          let* Œ±1 := M.read self in
          let* Œ±2 := M.read id in
          let* Œ±3 :=
            M.call
              (Ty.path "erc721::Erc721")::["transfer_token_from"]
              [ Œ±1; borrow caller; borrow destination; Œ±2 ] in
          let* Œ±4 := M.call Œ±0 [ Œ±3 ] in
          let* Œ±5 := M.alloc Œ±4 in
          match_operator
            Œ±5
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "erc721::Error" ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "erc721::Error"
                            ]
                      ] in
                  let* Œ±1 := M.read residual in
                  let* Œ±2 := M.call Œ±0 [ Œ±1 ] in
                  let* Œ±3 := return_ Œ±2 in
                  let* Œ±4 := M.read Œ±3 in
                  let* Œ±5 := never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match 
                end) :
                Ty.tuple [];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match 
                end) :
                Ty.tuple []
            ] in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          id: TokenId,
      ) -> Result<(), Error> {
          self.transfer_token_from(&from, &to, id)?;
          Ok(())
      }
  *)
  Definition transfer_from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; from; to; id ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* id := M.alloc id in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc721::Error" ]) in
      M.catch_return
        (let* _ :=
          let* Œ±0 :=
            M.get_method
              "core::ops::try_trait::Try"
              "branch"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
              ] in
          let* Œ±1 := M.read self in
          let* Œ±2 := M.read id in
          let* Œ±3 :=
            M.call
              (Ty.path "erc721::Erc721")::["transfer_token_from"]
              [ Œ±1; borrow from; borrow to; Œ±2 ] in
          let* Œ±4 := M.call Œ±0 [ Œ±3 ] in
          let* Œ±5 := M.alloc Œ±4 in
          match_operator
            Œ±5
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "erc721::Error" ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "erc721::Error"
                            ]
                      ] in
                  let* Œ±1 := M.read residual in
                  let* Œ±2 := M.call Œ±0 [ Œ±1 ] in
                  let* Œ±3 := return_ Œ±2 in
                  let* Œ±4 := M.read Œ±3 in
                  let* Œ±5 := never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match 
                end) :
                Ty.tuple [];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match 
                end) :
                Ty.tuple []
            ] in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn mint(&mut self, id: TokenId) -> Result<(), Error> {
          let caller = self.env().caller();
          self.add_token_to(&caller, id)?;
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some(AccountId::from([0x0; 32])),
              to: Some(caller),
              id,
          }));
          Ok(())
      }
  *)
  Definition mint (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let return_ :=
        M.return_
          (R :=
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "erc721::Error" ]) in
      M.catch_return
        (let* caller :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call (Ty.path "erc721::Erc721")::["env"] [ borrow (deref Œ±0) ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 := M.call (Ty.path "erc721::Env")::["caller"] [ borrow Œ±2 ] in
          M.alloc Œ±3 in
        let* _ :=
          let* Œ±0 :=
            M.get_method
              "core::ops::try_trait::Try"
              "branch"
              [
                (* Self *)
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
              ] in
          let* Œ±1 := M.read self in
          let* Œ±2 := M.read id in
          let* Œ±3 :=
            M.call
              (Ty.path "erc721::Erc721")::["add_token_to"]
              [ Œ±1; borrow caller; Œ±2 ] in
          let* Œ±4 := M.call Œ±0 [ Œ±3 ] in
          let* Œ±5 := M.alloc Œ±4 in
          match_operator
            Œ±5
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "erc721::Error" ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "erc721::Error"
                            ]
                      ] in
                  let* Œ±1 := M.read residual in
                  let* Œ±2 := M.call Œ±0 [ Œ±1 ] in
                  let* Œ±3 := return_ Œ±2 in
                  let* Œ±4 := M.read Œ±3 in
                  let* Œ±5 := never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match 
                end) :
                Ty.tuple [];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match 
                end) :
                Ty.tuple []
            ] in
        let* _ :=
          let* Œ±0 := M.read self in
          let* Œ±1 :=
            M.call (Ty.path "erc721::Erc721")::["env"] [ borrow (deref Œ±0) ] in
          let* Œ±2 := M.alloc Œ±1 in
          let* Œ±3 :=
            M.get_method
              "core::convert::From"
              "from"
              [
                (* Self *) Ty.path "erc721::AccountId";
                (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ]
              ] in
          let* Œ±4 :=
            M.call Œ±3 [ repeat ((Integer.of_Z 0) : Ty.path "u8") 32 ] in
          let* Œ±5 := M.read caller in
          let* Œ±6 := M.read id in
          let* Œ±7 :=
            M.call
              (Ty.path "erc721::Env")::["emit_event"]
              [
                borrow Œ±2;
                erc721.Event.Transfer
                  (Value.StructRecord
                    "erc721::Transfer"
                    [
                      ("from", core.option.Option.Some Œ±4);
                      ("to", core.option.Option.Some Œ±5);
                      ("id", Œ±6)
                    ])
              ] in
          M.alloc Œ±7 in
        let* Œ±0 := M.alloc (core.result.Result.Ok tt) in
        M.read Œ±0)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn burn(&mut self, id: TokenId) -> Result<(), Error> {
          let caller = self.env().caller();
          let Self {
              token_owner,
              owned_tokens_count,
              ..
          } = self;
  
          let owner = token_owner.get(&id).ok_or(Error::TokenNotFound)?;
          if owner != caller {
              return Err(Error::NotOwner);
          };
  
          let count = owned_tokens_count
              .get(&caller)
              .map(|c| c - 1)
              .ok_or(Error::CannotFetchValue)?;
          owned_tokens_count.insert(caller, count);
          token_owner.remove(id);
  
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some(caller),
              to: Some(AccountId::from([0x0; 32])),
              id,
          }));
  
          Ok(())
      }
  *)
  Parameter burn : (list Ty.t) -> (list Value.t) -> M.
End Impl_erc721_Erc721.
