(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Mapping *)

Module Impl_core_default_Default_for_multisig_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "multisig::Mapping") [ K; V ].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ K; V ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ K ] ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ V ] ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord
          "multisig::Mapping"
          [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Definition ℐ (K V : Ty.t) : Instance.t :=
    [ ("default", InstanceField.Method (default K V)) ].
End Impl_core_default_Default_for_multisig_Mapping_K_V.

Module Impl_multisig_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "multisig::Mapping") [ K; V ].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Definition contains (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition insert (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ K; V ], [ self; _key; _value ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Definition remove (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition size (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition take (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
End Impl_multisig_Mapping_K_V.

(* Struct AccountId *)

Module Impl_core_default_Default_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α1 := M.call α0 [] in
      M.pure (multisig.AccountId.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_multisig_AccountId.

Module Impl_core_fmt_Debug_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read f in
      let* α1 := M.read (mk_str "AccountId") in
      let* α2 := M.read self in
      let* α3 :=
        M.alloc (borrow ((M.var "multisig::AccountId::Get_0") (deref α2))) in
      M.call
        (Ty.path "core::fmt::Formatter")::["debug_tuple_field1_finish"]
        [ α0; α1; pointer_coercion "Unsize" (borrow α3) ]
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_multisig_AccountId.

Module Impl_core_clone_Clone_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [ Ty.path "u128" ]))
          [
            fun γ =>
              (let* α0 := M.read self in
              M.pure (deref α0)) :
              Ty.path "multisig::AccountId"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_multisig_AccountId.

Module Impl_core_marker_Copy_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_multisig_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.

Module Impl_core_cmp_PartialEq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.read self in
      let* α1 := M.read ((M.var "multisig::AccountId::Get_0") (deref α0)) in
      let* α2 := M.read other in
      let* α3 := M.read ((M.var "multisig::AccountId::Get_0") (deref α2)) in
      M.pure ((M.var "BinOp::Pure::eq") α1 α3)
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_multisig_AccountId.

Module Impl_core_marker_StructuralEq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_multisig_AccountId.

Module Impl_core_cmp_Eq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::cmp::AssertParamIsEq")
                [ Ty.path "u128" ]))
          [ fun γ => (M.alloc tt) : Ty.path "unit" ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t :=
    [
      ("assert_receiver_is_total_eq",
        InstanceField.Method assert_receiver_is_total_eq)
    ].
End Impl_core_cmp_Eq_for_multisig_AccountId.

Module Impl_core_cmp_PartialOrd_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  (*
  PartialOrd
  *)
  Definition partial_cmp (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_method
          "core::cmp::PartialOrd"
          "partial_cmp"
          [ (* Self *) Ty.path "u128"; (* Rhs *) Ty.path "u128" ] in
      let* α1 := M.read self in
      let* α2 := M.read other in
      M.call
        α0
        [
          borrow ((M.var "multisig::AccountId::Get_0") (deref α1));
          borrow ((M.var "multisig::AccountId::Get_0") (deref α2))
        ]
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t :=
    [ ("partial_cmp", InstanceField.Method partial_cmp) ].
End Impl_core_cmp_PartialOrd_for_multisig_AccountId.

Module Impl_core_cmp_Ord_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  (*
  Ord
  *)
  Definition cmp (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_method "core::cmp::Ord" "cmp" [ (* Self *) Ty.path "u128" ] in
      let* α1 := M.read self in
      let* α2 := M.read other in
      M.call
        α0
        [
          borrow ((M.var "multisig::AccountId::Get_0") (deref α1));
          borrow ((M.var "multisig::AccountId::Get_0") (deref α2))
        ]
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("cmp", InstanceField.Method cmp) ].
End Impl_core_cmp_Ord_for_multisig_AccountId.

Axiom Balance : (Ty.path "multisig::Balance") = (Ty.path "u128").

(* Enum Env *)

Definition MAX_OWNERS : Ty.path "u32" :=
  M.run (M.alloc ((Integer.of_Z 50) : Ty.path "u32")).

Axiom TransactionId : (Ty.path "multisig::TransactionId") = (Ty.path "u32").

Definition WRONG_TRANSACTION_ID : Ty.apply (Ty.path "ref") [ Ty.path "str" ] :=
  M.run
    (M.pure (mk_str "The user specified an invalid transaction id. Abort.")).

(* Struct CallInput *)

(* Enum ConfirmationStatus *)

Module Impl_core_clone_Clone_for_multisig_ConfirmationStatus.
  Definition Self : Ty.t := Ty.path "multisig::ConfirmationStatus".
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [ Ty.path "u32" ]))
          [
            fun γ =>
              (let* α0 := M.read self in
              M.pure (deref α0)) :
              Ty.path "multisig::ConfirmationStatus"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_multisig_ConfirmationStatus.

Module Impl_core_marker_Copy_for_multisig_ConfirmationStatus.
  Definition Self : Ty.t := Ty.path "multisig::ConfirmationStatus".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_multisig_ConfirmationStatus.

(* Enum Transaction *)

Module Impl_core_default_Default_for_multisig_Transaction.
  Definition Self : Ty.t := Ty.path "multisig::Transaction".
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "multisig::AccountId" ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ] in
      let* α3 := M.call α2 [] in
      let* α4 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α5 := M.call α4 [] in
      let* α6 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α7 := M.call α6 [] in
      let* α8 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u64" ] in
      let* α9 := M.call α8 [] in
      let* α10 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "bool" ] in
      let* α11 := M.call α10 [] in
      M.pure
        (Value.StructRecord
          "multisig::Transaction"
          [
            ("callee", α1);
            ("selector", α3);
            ("input", α5);
            ("transferred_value", α7);
            ("gas_limit", α9);
            ("allow_reentry", α11)
          ])
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_multisig_Transaction.

(* Enum Error *)

Module Impl_core_clone_Clone_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (deref α0)
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_multisig_Error.

Module Impl_core_marker_Copy_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_multisig_Error.

Module Impl_core_marker_StructuralPartialEq_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_multisig_Error.

Module Impl_core_cmp_PartialEq_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      M.pure true
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_multisig_Error.

Module Impl_core_marker_StructuralEq_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_StructuralEq_for_multisig_Error.

Module Impl_core_cmp_Eq_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t :=
    [
      ("assert_receiver_is_total_eq",
        InstanceField.Method assert_receiver_is_total_eq)
    ].
End Impl_core_cmp_Eq_for_multisig_Error.

(* Enum Transactions *)

Module Impl_core_default_Default_for_multisig_Transactions.
  Definition Self : Ty.t := Ty.path "multisig::Transactions".
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u32" ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord
          "multisig::Transactions"
          [ ("transactions", α1); ("next_id", α3) ])
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_multisig_Transactions.

(* Enum Confirmation *)

(* Enum Revocation *)

(* Enum Submission *)

(* Enum Cancellation *)

(* Enum Execution *)

(* Enum OwnerAddition *)

(* Enum OwnerRemoval *)

(* Enum RequirementChange *)

(* Enum Event *)

Module Impl_multisig_Env.
  Definition Self : Ty.t := Ty.path "multisig::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read ((M.var "multisig::Env::Get_caller") (deref α0))
    | _, _ => M.impossible
    end.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  (*
      fn transferred_value(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition transferred_value (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  (*
      fn account_id(&self) -> AccountId {
          unimplemented!()
      }
  *)
  Definition account_id (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
End Impl_multisig_Env.

(* Enum Multisig *)

Module Impl_core_default_Default_for_multisig_Multisig.
  Definition Self : Ty.t := Ty.path "multisig::Multisig".
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "multisig::Mapping")
                [
                  Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                  Ty.tuple []
                ]
          ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "u32" ]
          ] in
      let* α3 := M.call α2 [] in
      let* α4 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "multisig::Transaction" ]
          ] in
      let* α5 := M.call α4 [] in
      let* α6 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "multisig::Transactions" ] in
      let* α7 := M.call α6 [] in
      let* α8 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α9 := M.call α8 [] in
      let* α10 :=
        M.get_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "multisig::AccountId"; Ty.tuple [] ]
          ] in
      let* α11 := M.call α10 [] in
      let* α12 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u32" ] in
      let* α13 := M.call α12 [] in
      M.pure
        (Value.StructRecord
          "multisig::Multisig"
          [
            ("confirmations", α1);
            ("confirmation_count", α3);
            ("transactions", α5);
            ("transaction_list", α7);
            ("owners", α9);
            ("is_owner", α11);
            ("requirement", α13)
          ])
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_multisig_Multisig.

(*
fn ensure_requirement_is_valid(owners: u32, requirement: u32) {
    assert!(0 < requirement && requirement <= owners && owners <= MAX_OWNERS);
}
*)
Definition ensure_requirement_is_valid (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ owners; requirement ] =>
    let* owners := M.alloc owners in
    let* requirement := M.alloc requirement in
    let* _ :=
      let* α0 := M.read requirement in
      let* α1 := M.read requirement in
      let* α2 := M.read owners in
      let* α3 := M.read owners in
      let* α4 := M.read (M.var "multisig::MAX_OWNERS") in
      let* α5 :=
        M.alloc
          ((M.var "UnOp::not")
            ((M.var "BinOp::Pure::and")
              ((M.var "BinOp::Pure::and")
                ((M.var "BinOp::Pure::lt")
                  ((Integer.of_Z 0) : Ty.path "u32")
                  α0)
                ((M.var "BinOp::Pure::le") α1 α2))
              ((M.var "BinOp::Pure::le") α3 α4))) in
      let* α6 := M.read (use α5) in
      if α6 then
        let* α0 :=
          M.read
            (mk_str
              "assertion failed: 0 < requirement && requirement <= owners && owners <= MAX_OWNERS") in
        let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
        let* α2 := never_to_any α1 in
        M.alloc α2
      else
        M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

Module Impl_multisig_Multisig.
  Definition Self : Ty.t := Ty.path "multisig::Multisig".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 := M.read (mk_str "not implemented") in
      let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.call (Ty.path "multisig::Multisig")::["init_env"] []
    | _, _ => M.impossible
    end.
  
  (*
      pub fn new(requirement: u32, mut owners: Vec<AccountId>) -> Self {
          let mut contract = Multisig::default();
          owners.sort_unstable();
          owners.dedup();
          ensure_requirement_is_valid(owners.len() as u32, requirement);
  
          for owner in &owners {
              contract.is_owner.insert( *owner, ());
          }
  
          contract.owners = owners;
          contract.transaction_list = Default::default();
          contract.requirement = requirement;
          contract
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ requirement; owners ] =>
      let* requirement := M.alloc requirement in
      let* owners := M.alloc owners in
      let* contract :=
        let* α0 :=
          M.get_method
            "core::default::Default"
            "default"
            [ (* Self *) Ty.path "multisig::Multisig" ] in
        let* α1 := M.call α0 [] in
        M.alloc α1 in
      let* _ :=
        let* α0 :=
          M.get_method
            "core::ops::deref::DerefMut"
            "deref_mut"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.path "multisig::AccountId";
                    Ty.path "alloc::alloc::Global"
                  ]
            ] in
        let* α1 := M.call α0 [ borrow_mut owners ] in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "slice")
                [ Ty.path "multisig::AccountId" ])::["sort_unstable"]
            [ α1 ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ])::["dedup"]
            [ borrow_mut owners ] in
        M.alloc α0 in
      let* _ :=
        let* α0 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ])::["len"]
            [ borrow owners ] in
        let* α1 := M.read requirement in
        let* α2 :=
          M.call
            (M.var "multisig::ensure_requirement_is_valid")
            [ rust_cast α0; α1 ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_method
            "core::iter::traits::collect::IntoIterator"
            "into_iter"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "ref")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.path "multisig::AccountId";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
            ] in
        let* α1 := M.call α0 [ borrow owners ] in
        let* α2 := M.alloc α1 in
        let* α3 :=
          match_operator
            α2
            [
              fun γ =>
                (let* iter := M.copy γ in
                M.loop
                  (let* _ :=
                    let* α0 :=
                      M.get_method
                        "core::iter::traits::iterator::Iterator"
                        "next"
                        [
                          (* Self *)
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [ Ty.path "multisig::AccountId" ]
                        ] in
                    let* α1 := M.call α0 [ borrow_mut iter ] in
                    let* α2 := M.alloc α1 in
                    match_operator
                      α2
                      [
                        fun γ =>
                          (let* α0 := M.read γ in
                          match α0 with
                          | core.option.Option.None =>
                            let* α0 := M.break in
                            let* α1 := M.read α0 in
                            let* α2 := never_to_any α1 in
                            M.alloc α2
                          | _ => M.break_match 
                          end) :
                          Ty.tuple [];
                        fun γ =>
                          (let* α0 := M.read γ in
                          match α0 with
                          | core.option.Option.Some _ =>
                            let γ0_0 :=
                              (M.var "core::option::Option::Get_Some_0") γ in
                            let* owner := M.copy γ0_0 in
                            let* _ :=
                              let* α0 := M.read owner in
                              let* α1 := M.read (deref α0) in
                              let* α2 :=
                                M.call
                                  (Ty.apply
                                      (Ty.path "multisig::Mapping")
                                      [
                                        Ty.path "multisig::AccountId";
                                        Ty.tuple []
                                      ])::["insert"]
                                  [
                                    borrow_mut
                                      ((M.var
                                          "multisig::Multisig::Get_is_owner")
                                        contract);
                                    α1;
                                    tt
                                  ] in
                              M.alloc α2 in
                            M.alloc tt
                          | _ => M.break_match 
                          end) :
                          Ty.tuple []
                      ] in
                  M.alloc tt)) :
                Ty.tuple []
            ] in
        M.pure (use α3) in
      let* _ :=
        let* α0 := M.read owners in
        assign ((M.var "multisig::Multisig::Get_owners") contract) α0 in
      let* _ :=
        let* α0 :=
          M.get_method
            "core::default::Default"
            "default"
            [ (* Self *) Ty.path "multisig::Transactions" ] in
        let* α1 := M.call α0 [] in
        assign
          ((M.var "multisig::Multisig::Get_transaction_list") contract)
          α1 in
      let* _ :=
        let* α0 := M.read requirement in
        assign ((M.var "multisig::Multisig::Get_requirement") contract) α0 in
      M.read contract
    | _, _ => M.impossible
    end.
  
  (*
      fn ensure_confirmed(&self, trans_id: TransactionId) {
          assert!(
              self.confirmation_count
                  .get(&trans_id)
                  .expect(WRONG_TRANSACTION_ID)
                  >= self.requirement
          );
      }
  *)
  Definition ensure_confirmed (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "u32" ])::["get"]
            [
              borrow
                ((M.var "multisig::Multisig::Get_confirmation_count")
                  (deref α0));
              borrow trans_id
            ] in
        let* α2 := M.read (M.var "multisig::WRONG_TRANSACTION_ID") in
        let* α3 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "u32" ])::["expect"]
            [ α1; α2 ] in
        let* α4 := M.read self in
        let* α5 :=
          M.read ((M.var "multisig::Multisig::Get_requirement") (deref α4)) in
        let* α6 :=
          M.alloc ((M.var "UnOp::not") ((M.var "BinOp::Pure::ge") α3 α5)) in
        let* α7 := M.read (use α6) in
        if α7 then
          let* α0 :=
            M.read
              (mk_str
                "assertion failed: self.confirmation_count.get(&trans_id).expect(WRONG_TRANSACTION_ID) >=
    self.requirement") in
          let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
          let* α2 := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn ensure_transaction_exists(&self, trans_id: TransactionId) {
          self.transactions
              .get(&trans_id)
              .expect(WRONG_TRANSACTION_ID);
      }
  *)
  Definition ensure_transaction_exists (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "multisig::Transaction" ])::["get"]
            [
              borrow
                ((M.var "multisig::Multisig::Get_transactions") (deref α0));
              borrow trans_id
            ] in
        let* α2 := M.read (M.var "multisig::WRONG_TRANSACTION_ID") in
        let* α3 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "multisig::Transaction" ])::["expect"]
            [ α1; α2 ] in
        M.alloc α3 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn ensure_owner(&self, owner: &AccountId) {
          assert!(self.is_owner.contains(owner));
      }
  *)
  Definition ensure_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read owner in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "multisig::AccountId"; Ty.tuple [] ])::["contains"]
            [ borrow ((M.var "multisig::Multisig::Get_is_owner") (deref α0)); α1
            ] in
        let* α3 := M.alloc ((M.var "UnOp::not") α2) in
        let* α4 := M.read (use α3) in
        if α4 then
          let* α0 :=
            M.read (mk_str "assertion failed: self.is_owner.contains(owner)") in
          let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
          let* α2 := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn ensure_caller_is_owner(&self) {
          self.ensure_owner(&self.env().caller());
      }
  *)
  Definition ensure_caller_is_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read self in
        let* α2 := M.call (Ty.path "multisig::Multisig")::["env"] [ α1 ] in
        let* α3 := M.alloc α2 in
        let* α4 := M.call (Ty.path "multisig::Env")::["caller"] [ borrow α3 ] in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_owner"]
            [ α0; borrow α5 ] in
        M.alloc α6 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn ensure_from_wallet(&self) {
          assert_eq!(self.env().caller(), self.env().account_id());
      }
  *)
  Definition ensure_from_wallet (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.call (Ty.path "multisig::Multisig")::["env"] [ α0 ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.call (Ty.path "multisig::Env")::["caller"] [ borrow α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read self in
        let* α6 := M.call (Ty.path "multisig::Multisig")::["env"] [ α5 ] in
        let* α7 := M.alloc α6 in
        let* α8 :=
          M.call (Ty.path "multisig::Env")::["account_id"] [ borrow α7 ] in
        let* α9 := M.alloc α8 in
        let* α10 := M.alloc (borrow α4, borrow α9) in
        match_operator
          α10
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let* left_val := M.copy γ0_0 in
                let* right_val := M.copy γ0_1 in
                let* α0 :=
                  M.get_method
                    "core::cmp::PartialEq"
                    "eq"
                    [
                      (* Self *) Ty.path "multisig::AccountId";
                      (* Rhs *) Ty.path "multisig::AccountId"
                    ] in
                let* α1 := M.read left_val in
                let* α2 := M.read right_val in
                let* α3 := M.call α0 [ α1; α2 ] in
                let* α4 := M.alloc ((M.var "UnOp::not") α3) in
                let* α5 := M.read (use α4) in
                if α5 then
                  let* kind := M.alloc core.panicking.AssertKind.Eq in
                  let* α0 := M.read kind in
                  let* α1 := M.read left_val in
                  let* α2 := M.read right_val in
                  let* α3 :=
                    M.call
                      (M.var "core::panicking::assert_failed")
                      [ α0; α1; α2; core.option.Option.None ] in
                  let* α0 := M.alloc α3 in
                  let* α1 := M.read α0 in
                  let* α2 := never_to_any α1 in
                  M.alloc α2
                else
                  M.alloc tt
              end) :
              Ty.tuple []
          ] in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn ensure_no_owner(&self, owner: &AccountId) {
          assert!(!self.is_owner.contains(owner));
      }
  *)
  Definition ensure_no_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read owner in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "multisig::AccountId"; Ty.tuple [] ])::["contains"]
            [ borrow ((M.var "multisig::Multisig::Get_is_owner") (deref α0)); α1
            ] in
        let* α3 := M.alloc ((M.var "UnOp::not") ((M.var "UnOp::not") α2)) in
        let* α4 := M.read (use α3) in
        if α4 then
          let* α0 :=
            M.read
              (mk_str "assertion failed: !self.is_owner.contains(owner)") in
          let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
          let* α2 := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn add_owner(&mut self, new_owner: AccountId) {
          self.ensure_from_wallet();
          self.ensure_no_owner(&new_owner);
          ensure_requirement_is_valid(self.owners.len() as u32 + 1, self.requirement);
          self.is_owner.insert(new_owner, ());
          self.owners.push(new_owner);
          self.env()
              .emit_event(Event::OwnerAddition(OwnerAddition { owner: new_owner }));
      }
  *)
  Definition add_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; new_owner ] =>
      let* self := M.alloc self in
      let* new_owner := M.alloc new_owner in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_from_wallet"]
            [ borrow (deref α0) ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_no_owner"]
            [ borrow (deref α0); borrow new_owner ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ])::["len"]
            [ borrow ((M.var "multisig::Multisig::Get_owners") (deref α0)) ] in
        let* α2 :=
          (M.var "BinOp::Panic::add")
            (rust_cast α1)
            ((Integer.of_Z 1) : Ty.path "u32") in
        let* α3 := M.read self in
        let* α4 :=
          M.read ((M.var "multisig::Multisig::Get_requirement") (deref α3)) in
        let* α5 :=
          M.call (M.var "multisig::ensure_requirement_is_valid") [ α2; α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read new_owner in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "multisig::AccountId"; Ty.tuple [] ])::["insert"]
            [
              borrow_mut
                ((M.var "multisig::Multisig::Get_is_owner") (deref α0));
              α1;
              tt
            ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read new_owner in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ])::["push"]
            [
              borrow_mut ((M.var "multisig::Multisig::Get_owners") (deref α0));
              α1
            ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read new_owner in
        let* α4 :=
          M.call
            (Ty.path "multisig::Env")::["emit_event"]
            [
              borrow α2;
              multisig.Event.OwnerAddition
                (Value.StructRecord "multisig::OwnerAddition" [ ("owner", α3) ])
            ] in
        M.alloc α4 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn owner_index(&self, owner: &AccountId) -> u32 {
          self.owners.iter().position(|x| *x == *owner).expect(
              "This is only called after it was already verified that the id is
                 actually an owner.",
          ) as u32
      }
  *)
  Definition owner_index (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* α0 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "position"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::slice::iter::Iter")
                [ Ty.path "multisig::AccountId" ];
            (* P *)
              Ty.function
                [
                  Ty.tuple
                    [ Ty.apply (Ty.path "ref") [ Ty.path "multisig::AccountId" ]
                    ]
                ]
                (Ty.path "bool")
          ] in
      let* α1 :=
        M.get_method
          "core::ops::deref::Deref"
          "deref"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α2 := M.read self in
      let* α3 :=
        M.call
          α1
          [ borrow ((M.var "multisig::Multisig::Get_owners") (deref α2)) ] in
      let* α4 :=
        M.call
          (Ty.apply
              (Ty.path "slice")
              [ Ty.path "multisig::AccountId" ])::["iter"]
          [ α3 ] in
      let* α5 := M.alloc α4 in
      let* α6 :=
        M.call
          α0
          [
            borrow_mut α5;
            fun
                (α0 :
                  Ty.apply (Ty.path "ref") [ Ty.path "multisig::AccountId" ]) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* x := M.copy γ in
                    let* α0 :=
                      M.get_method
                        "core::cmp::PartialEq"
                        "eq"
                        [
                          (* Self *) Ty.path "multisig::AccountId";
                          (* Rhs *) Ty.path "multisig::AccountId"
                        ] in
                    let* α1 := M.read x in
                    let* α2 := M.read owner in
                    M.call α0 [ α1; α2 ]) :
                    Ty.path "bool"
                ]) :
              Ty.path "bool"
          ] in
      let* α7 :=
        M.read
          (mk_str
            "This is only called after it was already verified that the id is
               actually an owner.") in
      let* α8 :=
        M.call
          (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "usize" ])::["expect"]
          [ α6; α7 ] in
      M.pure (rust_cast α8)
    | _, _ => M.impossible
    end.
  
  (*
      fn clean_owner_confirmations(&mut self, owner: &AccountId) {
          for trans_id in &self.transaction_list.transactions {
              let key = ( *trans_id, *owner);
              if self.confirmations.contains(&key) {
                  self.confirmations.remove(key);
                  let mut count = self.confirmation_count.get(trans_id).unwrap_or(0 as u32);
                  count -= 1;
                  self.confirmation_count.insert( *trans_id, count);
              }
          }
      }
  *)
  Definition clean_owner_confirmations (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* α0 :=
        M.get_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply
                (Ty.path "ref")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]
                ]
          ] in
      let* α1 := M.read self in
      let* α2 :=
        M.call
          α0
          [
            borrow
              ((M.var "multisig::Transactions::Get_transactions")
                ((M.var "multisig::Multisig::Get_transaction_list") (deref α1)))
          ] in
      let* α3 := M.alloc α2 in
      let* α4 :=
        match_operator
          α3
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ :=
                  let* α0 :=
                    M.get_method
                      "core::iter::traits::iterator::Iterator"
                      "next"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [ Ty.path "u32" ]
                      ] in
                  let* α1 := M.call α0 [ borrow_mut iter ] in
                  let* α2 := M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match 
                        end) :
                        Ty.tuple [];
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let γ0_0 :=
                            (M.var "core::option::Option::Get_Some_0") γ in
                          let* trans_id := M.copy γ0_0 in
                          let* key :=
                            let* α0 := M.read trans_id in
                            let* α1 := M.read (deref α0) in
                            let* α2 := M.read owner in
                            let* α3 := M.read (deref α2) in
                            M.alloc (α1, α3) in
                          let* α0 := M.read self in
                          let* α1 :=
                            M.call
                              (Ty.apply
                                  (Ty.path "multisig::Mapping")
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "u32";
                                        Ty.path "multisig::AccountId"
                                      ];
                                    Ty.tuple []
                                  ])::["contains"]
                              [
                                borrow
                                  ((M.var
                                      "multisig::Multisig::Get_confirmations")
                                    (deref α0));
                                borrow key
                              ] in
                          let* α2 := M.alloc α1 in
                          let* α3 := M.read (use α2) in
                          if α3 then
                            let* _ :=
                              let* α0 := M.read self in
                              let* α1 := M.read key in
                              let* α2 :=
                                M.call
                                  (Ty.apply
                                      (Ty.path "multisig::Mapping")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "u32";
                                            Ty.path "multisig::AccountId"
                                          ];
                                        Ty.tuple []
                                      ])::["remove"]
                                  [
                                    borrow
                                      ((M.var
                                          "multisig::Multisig::Get_confirmations")
                                        (deref α0));
                                    α1
                                  ] in
                              M.alloc α2 in
                            let* count :=
                              let* α0 := M.read self in
                              let* α1 := M.read trans_id in
                              let* α2 :=
                                M.call
                                  (Ty.apply
                                      (Ty.path "multisig::Mapping")
                                      [ Ty.path "u32"; Ty.path "u32" ])::["get"]
                                  [
                                    borrow
                                      ((M.var
                                          "multisig::Multisig::Get_confirmation_count")
                                        (deref α0));
                                    α1
                                  ] in
                              let* α3 :=
                                M.alloc ((Integer.of_Z 0) : Ty.path "u32") in
                              let* α4 := M.read (use α3) in
                              let* α5 :=
                                M.call
                                  (Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "u32" ])::["unwrap_or"]
                                  [ α2; α4 ] in
                              M.alloc α5 in
                            let* _ :=
                              let β := count in
                              let* α0 := M.read β in
                              let* α1 :=
                                (M.var "BinOp::Panic::sub")
                                  α0
                                  ((Integer.of_Z 1) : Ty.path "u32") in
                              (M.var "assign") β α1 in
                            let* _ :=
                              let* α0 := M.read self in
                              let* α1 := M.read trans_id in
                              let* α2 := M.read (deref α1) in
                              let* α3 := M.read count in
                              let* α4 :=
                                M.call
                                  (Ty.apply
                                      (Ty.path "multisig::Mapping")
                                      [ Ty.path "u32"; Ty.path "u32"
                                      ])::["insert"]
                                  [
                                    borrow_mut
                                      ((M.var
                                          "multisig::Multisig::Get_confirmation_count")
                                        (deref α0));
                                    α2;
                                    α3
                                  ] in
                              M.alloc α4 in
                            M.alloc tt
                          else
                            M.alloc tt
                        | _ => M.break_match 
                        end) :
                        Ty.tuple []
                    ] in
                M.alloc tt)) :
              Ty.tuple []
          ] in
      M.read (use α4)
    | _, _ => M.impossible
    end.
  
  (*
      pub fn remove_owner(&mut self, owner: AccountId) {
          self.ensure_from_wallet();
          self.ensure_owner(&owner);
          let len = self.owners.len() as u32 - 1;
          let requirement = u32::min(len, self.requirement);
          ensure_requirement_is_valid(len, requirement);
          let owner_index = self.owner_index(&owner) as usize;
          self.owners.swap_remove(owner_index);
          self.is_owner.remove(owner);
          self.requirement = requirement;
          self.clean_owner_confirmations(&owner);
          self.env()
              .emit_event(Event::OwnerRemoval(OwnerRemoval { owner }));
      }
  *)
  Definition remove_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_from_wallet"]
            [ borrow (deref α0) ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_owner"]
            [ borrow (deref α0); borrow owner ] in
        M.alloc α1 in
      let* len :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ])::["len"]
            [ borrow ((M.var "multisig::Multisig::Get_owners") (deref α0)) ] in
        let* α2 :=
          (M.var "BinOp::Panic::sub")
            (rust_cast α1)
            ((Integer.of_Z 1) : Ty.path "u32") in
        M.alloc α2 in
      let* requirement :=
        let* α0 :=
          M.get_method "core::cmp::Ord" "min" [ (* Self *) Ty.path "u32" ] in
        let* α1 := M.read len in
        let* α2 := M.read self in
        let* α3 :=
          M.read ((M.var "multisig::Multisig::Get_requirement") (deref α2)) in
        let* α4 := M.call α0 [ α1; α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 := M.read len in
        let* α1 := M.read requirement in
        let* α2 :=
          M.call (M.var "multisig::ensure_requirement_is_valid") [ α0; α1 ] in
        M.alloc α2 in
      let* owner_index :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["owner_index"]
            [ borrow (deref α0); borrow owner ] in
        M.alloc (rust_cast α1) in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read owner_index in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ])::["swap_remove"]
            [
              borrow_mut ((M.var "multisig::Multisig::Get_owners") (deref α0));
              α1
            ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read owner in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "multisig::AccountId"; Ty.tuple [] ])::["remove"]
            [ borrow ((M.var "multisig::Multisig::Get_is_owner") (deref α0)); α1
            ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read requirement in
        assign ((M.var "multisig::Multisig::Get_requirement") (deref α0)) α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["clean_owner_confirmations"]
            [ α0; borrow owner ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read owner in
        let* α4 :=
          M.call
            (Ty.path "multisig::Env")::["emit_event"]
            [
              borrow α2;
              multisig.Event.OwnerRemoval
                (Value.StructRecord "multisig::OwnerRemoval" [ ("owner", α3) ])
            ] in
        M.alloc α4 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn replace_owner(&mut self, old_owner: AccountId, new_owner: AccountId) {
          self.ensure_from_wallet();
          self.ensure_owner(&old_owner);
          self.ensure_no_owner(&new_owner);
          let owner_index = self.owner_index(&old_owner);
          self.owners[owner_index as usize] = new_owner;
          self.is_owner.remove(old_owner);
          self.is_owner.insert(new_owner, ());
          self.clean_owner_confirmations(&old_owner);
          self.env()
              .emit_event(Event::OwnerRemoval(OwnerRemoval { owner: old_owner }));
          self.env()
              .emit_event(Event::OwnerAddition(OwnerAddition { owner: new_owner }));
      }
  *)
  Definition replace_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; old_owner; new_owner ] =>
      let* self := M.alloc self in
      let* old_owner := M.alloc old_owner in
      let* new_owner := M.alloc new_owner in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_from_wallet"]
            [ borrow (deref α0) ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_owner"]
            [ borrow (deref α0); borrow old_owner ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_no_owner"]
            [ borrow (deref α0); borrow new_owner ] in
        M.alloc α1 in
      let* owner_index :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["owner_index"]
            [ borrow (deref α0); borrow old_owner ] in
        M.alloc α1 in
      let* _ :=
        let* α0 :=
          M.get_method
            "core::ops::index::IndexMut"
            "index_mut"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.path "multisig::AccountId";
                    Ty.path "alloc::alloc::Global"
                  ];
              (* Idx *) Ty.path "usize"
            ] in
        let* α1 := M.read self in
        let* α2 := M.read owner_index in
        let* α3 :=
          M.call
            α0
            [
              borrow_mut ((M.var "multisig::Multisig::Get_owners") (deref α1));
              rust_cast α2
            ] in
        let* α4 := M.read new_owner in
        assign (deref α3) α4 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read old_owner in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "multisig::AccountId"; Ty.tuple [] ])::["remove"]
            [ borrow ((M.var "multisig::Multisig::Get_is_owner") (deref α0)); α1
            ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read new_owner in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "multisig::AccountId"; Ty.tuple [] ])::["insert"]
            [
              borrow_mut
                ((M.var "multisig::Multisig::Get_is_owner") (deref α0));
              α1;
              tt
            ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["clean_owner_confirmations"]
            [ α0; borrow old_owner ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read old_owner in
        let* α4 :=
          M.call
            (Ty.path "multisig::Env")::["emit_event"]
            [
              borrow α2;
              multisig.Event.OwnerRemoval
                (Value.StructRecord "multisig::OwnerRemoval" [ ("owner", α3) ])
            ] in
        M.alloc α4 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read new_owner in
        let* α4 :=
          M.call
            (Ty.path "multisig::Env")::["emit_event"]
            [
              borrow α2;
              multisig.Event.OwnerAddition
                (Value.StructRecord "multisig::OwnerAddition" [ ("owner", α3) ])
            ] in
        M.alloc α4 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn change_requirement(&mut self, new_requirement: u32) {
          self.ensure_from_wallet();
          ensure_requirement_is_valid(self.owners.len() as u32, new_requirement);
          self.requirement = new_requirement;
          self.env()
              .emit_event(Event::RequirementChange(RequirementChange {
                  new_requirement,
              }));
      }
  *)
  Definition change_requirement (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; new_requirement ] =>
      let* self := M.alloc self in
      let* new_requirement := M.alloc new_requirement in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_from_wallet"]
            [ borrow (deref α0) ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ])::["len"]
            [ borrow ((M.var "multisig::Multisig::Get_owners") (deref α0)) ] in
        let* α2 := M.read new_requirement in
        let* α3 :=
          M.call
            (M.var "multisig::ensure_requirement_is_valid")
            [ rust_cast α1; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read new_requirement in
        assign ((M.var "multisig::Multisig::Get_requirement") (deref α0)) α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read new_requirement in
        let* α4 :=
          M.call
            (Ty.path "multisig::Env")::["emit_event"]
            [
              borrow α2;
              multisig.Event.RequirementChange
                (Value.StructRecord
                  "multisig::RequirementChange"
                  [ ("new_requirement", α3) ])
            ] in
        M.alloc α4 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn confirm_by_caller(
          &mut self,
          confirmer: AccountId,
          transaction: TransactionId,
      ) -> ConfirmationStatus {
          let mut count = self
              .confirmation_count
              .get(&transaction)
              .unwrap_or(0 as u32);
          let key = (transaction, confirmer);
          let new_confirmation = !self.confirmations.contains(&key);
          if new_confirmation {
              count += 1;
              self.confirmations.insert(key, ());
              self.confirmation_count.insert(transaction, count);
          }
          let status = {
              if count >= self.requirement {
                  ConfirmationStatus::Confirmed
              } else {
                  ConfirmationStatus::ConfirmationsNeeded(self.requirement - count)
              }
          };
          if new_confirmation {
              self.env().emit_event(Event::Confirmation(Confirmation {
                  transaction,
                  from: confirmer,
                  status,
              }));
          }
          status
      }
  *)
  Definition confirm_by_caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; confirmer; transaction ] =>
      let* self := M.alloc self in
      let* confirmer := M.alloc confirmer in
      let* transaction := M.alloc transaction in
      let* count :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "u32" ])::["get"]
            [
              borrow
                ((M.var "multisig::Multisig::Get_confirmation_count")
                  (deref α0));
              borrow transaction
            ] in
        let* α2 := M.alloc ((Integer.of_Z 0) : Ty.path "u32") in
        let* α3 := M.read (use α2) in
        let* α4 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "u32" ])::["unwrap_or"]
            [ α1; α3 ] in
        M.alloc α4 in
      let* key :=
        let* α0 := M.read transaction in
        let* α1 := M.read confirmer in
        M.alloc (α0, α1) in
      let* new_confirmation :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [
                  Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                  Ty.tuple []
                ])::["contains"]
            [
              borrow
                ((M.var "multisig::Multisig::Get_confirmations") (deref α0));
              borrow key
            ] in
        M.alloc ((M.var "UnOp::not") α1) in
      let* _ :=
        let* α0 := M.read (use new_confirmation) in
        if α0 then
          let* _ :=
            let β := count in
            let* α0 := M.read β in
            let* α1 :=
              (M.var "BinOp::Panic::add")
                α0
                ((Integer.of_Z 1) : Ty.path "u32") in
            (M.var "assign") β α1 in
          let* _ :=
            let* α0 := M.read self in
            let* α1 := M.read key in
            let* α2 :=
              M.call
                (Ty.apply
                    (Ty.path "multisig::Mapping")
                    [
                      Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                      Ty.tuple []
                    ])::["insert"]
                [
                  borrow_mut
                    ((M.var "multisig::Multisig::Get_confirmations")
                      (deref α0));
                  α1;
                  tt
                ] in
            M.alloc α2 in
          let* _ :=
            let* α0 := M.read self in
            let* α1 := M.read transaction in
            let* α2 := M.read count in
            let* α3 :=
              M.call
                (Ty.apply
                    (Ty.path "multisig::Mapping")
                    [ Ty.path "u32"; Ty.path "u32" ])::["insert"]
                [
                  borrow_mut
                    ((M.var "multisig::Multisig::Get_confirmation_count")
                      (deref α0));
                  α1;
                  α2
                ] in
            M.alloc α3 in
          M.alloc tt
        else
          M.alloc tt in
      let* status :=
        let* α0 := M.read count in
        let* α1 := M.read self in
        let* α2 :=
          M.read ((M.var "multisig::Multisig::Get_requirement") (deref α1)) in
        let* α3 := M.alloc ((M.var "BinOp::Pure::ge") α0 α2) in
        let* α4 := M.read (use α3) in
        let* α5 :=
          if α4 then
            M.alloc multisig.ConfirmationStatus.Confirmed
          else
            let* α0 := M.read self in
            let* α1 :=
              M.read
                ((M.var "multisig::Multisig::Get_requirement") (deref α0)) in
            let* α2 := M.read count in
            let* α3 := (M.var "BinOp::Panic::sub") α1 α2 in
            M.alloc (multisig.ConfirmationStatus.ConfirmationsNeeded α3) in
        M.copy α5 in
      let* _ :=
        let* α0 := M.read (use new_confirmation) in
        if α0 then
          let* _ :=
            let* α0 := M.read self in
            let* α1 :=
              M.call
                (Ty.path "multisig::Multisig")::["env"]
                [ borrow (deref α0) ] in
            let* α2 := M.alloc α1 in
            let* α3 := M.read transaction in
            let* α4 := M.read confirmer in
            let* α5 := M.read status in
            let* α6 :=
              M.call
                (Ty.path "multisig::Env")::["emit_event"]
                [
                  borrow α2;
                  multisig.Event.Confirmation
                    (Value.StructRecord
                      "multisig::Confirmation"
                      [ ("transaction", α3); ("from", α4); ("status", α5) ])
                ] in
            M.alloc α6 in
          M.alloc tt
        else
          M.alloc tt in
      M.read status
    | _, _ => M.impossible
    end.
  
  (*
      pub fn submit_transaction(
          &mut self,
          transaction: Transaction,
      ) -> (TransactionId, ConfirmationStatus) {
          self.ensure_caller_is_owner();
          let trans_id = self.transaction_list.next_id;
          self.transaction_list.next_id = trans_id
              .checked_add(1 as u32)
              .expect("Transaction ids exhausted.");
          self.transactions.insert(trans_id, transaction);
          self.transaction_list.transactions.push(trans_id);
          self.env().emit_event(Event::Submission(Submission {
              transaction: trans_id,
          }));
          (
              trans_id,
              self.confirm_by_caller(self.env().caller(), trans_id),
          )
      }
  *)
  Definition submit_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; transaction ] =>
      let* self := M.alloc self in
      let* transaction := M.alloc transaction in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_caller_is_owner"]
            [ borrow (deref α0) ] in
        M.alloc α1 in
      let* trans_id :=
        let* α0 := M.read self in
        M.copy
          ((M.var "multisig::Transactions::Get_next_id")
            ((M.var "multisig::Multisig::Get_transaction_list") (deref α0))) in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read trans_id in
        let* α2 := M.alloc ((Integer.of_Z 1) : Ty.path "u32") in
        let* α3 := M.read (use α2) in
        let* α4 := M.call (Ty.path "u32")::["checked_add"] [ α1; α3 ] in
        let* α5 := M.read (mk_str "Transaction ids exhausted.") in
        let* α6 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "u32" ])::["expect"]
            [ α4; α5 ] in
        assign
          ((M.var "multisig::Transactions::Get_next_id")
            ((M.var "multisig::Multisig::Get_transaction_list") (deref α0)))
          α6 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read trans_id in
        let* α2 := M.read transaction in
        let* α3 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "multisig::Transaction" ])::["insert"]
            [
              borrow_mut
                ((M.var "multisig::Multisig::Get_transactions") (deref α0));
              α1;
              α2
            ] in
        M.alloc α3 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read trans_id in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ])::["push"]
            [
              borrow_mut
                ((M.var "multisig::Transactions::Get_transactions")
                  ((M.var "multisig::Multisig::Get_transaction_list")
                    (deref α0)));
              α1
            ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read trans_id in
        let* α4 :=
          M.call
            (Ty.path "multisig::Env")::["emit_event"]
            [
              borrow α2;
              multisig.Event.Submission
                (Value.StructRecord
                  "multisig::Submission"
                  [ ("transaction", α3) ])
            ] in
        M.alloc α4 in
      let* α0 := M.read trans_id in
      let* α1 := M.read self in
      let* α2 := M.read self in
      let* α3 :=
        M.call (Ty.path "multisig::Multisig")::["env"] [ borrow (deref α2) ] in
      let* α4 := M.alloc α3 in
      let* α5 := M.call (Ty.path "multisig::Env")::["caller"] [ borrow α4 ] in
      let* α6 := M.read trans_id in
      let* α7 :=
        M.call
          (Ty.path "multisig::Multisig")::["confirm_by_caller"]
          [ α1; α5; α6 ] in
      let* α0 := M.alloc (α0, α7) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn take_transaction(&mut self, trans_id: TransactionId) -> Option<Transaction> {
          let transaction = self.transactions.get(&trans_id);
          if transaction.is_some() {
              self.transactions.remove(trans_id);
              let pos = self
                  .transaction_list
                  .transactions
                  .iter()
                  .position(|t| t == &trans_id)
                  .expect("The transaction exists hence it must also be in the list.");
              self.transaction_list.transactions.swap_remove(pos);
              for owner in self.owners.iter() {
                  self.confirmations.remove((trans_id, *owner));
              }
              self.confirmation_count.remove(trans_id);
          }
          transaction
      }
  *)
  Definition take_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* transaction :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "multisig::Transaction" ])::["get"]
            [
              borrow
                ((M.var "multisig::Multisig::Get_transactions") (deref α0));
              borrow trans_id
            ] in
        M.alloc α1 in
      let* _ :=
        let* α0 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "multisig::Transaction" ])::["is_some"]
            [ borrow transaction ] in
        let* α1 := M.alloc α0 in
        let* α2 := M.read (use α1) in
        if α2 then
          let* _ :=
            let* α0 := M.read self in
            let* α1 := M.read trans_id in
            let* α2 :=
              M.call
                (Ty.apply
                    (Ty.path "multisig::Mapping")
                    [ Ty.path "u32"; Ty.path "multisig::Transaction"
                    ])::["remove"]
                [
                  borrow
                    ((M.var "multisig::Multisig::Get_transactions") (deref α0));
                  α1
                ] in
            M.alloc α2 in
          let* pos :=
            let* α0 :=
              M.get_method
                "core::iter::traits::iterator::Iterator"
                "position"
                [
                  (* Self *)
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      [ Ty.path "u32" ];
                  (* P *)
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "ref") [ Ty.path "u32" ] ]
                      ]
                      (Ty.path "bool")
                ] in
            let* α1 :=
              M.get_method
                "core::ops::deref::Deref"
                "deref"
                [
                  (* Self *)
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]
                ] in
            let* α2 := M.read self in
            let* α3 :=
              M.call
                α1
                [
                  borrow
                    ((M.var "multisig::Transactions::Get_transactions")
                      ((M.var "multisig::Multisig::Get_transaction_list")
                        (deref α2)))
                ] in
            let* α4 :=
              M.call
                (Ty.apply (Ty.path "slice") [ Ty.path "u32" ])::["iter"]
                [ α3 ] in
            let* α5 := M.alloc α4 in
            let* α6 :=
              M.call
                α0
                [
                  borrow_mut α5;
                  fun (α0 : Ty.apply (Ty.path "ref") [ Ty.path "u32" ]) =>
                    (let* α0 := M.alloc α0 in
                    match_operator
                      α0
                      [
                        fun γ =>
                          (let* t := M.copy γ in
                          let* α0 :=
                            M.get_method
                              "core::cmp::PartialEq"
                              "eq"
                              [
                                (* Self *)
                                  Ty.apply (Ty.path "ref") [ Ty.path "u32" ];
                                (* Rhs *)
                                  Ty.apply (Ty.path "ref") [ Ty.path "u32" ]
                              ] in
                          let* α1 := M.alloc (borrow trans_id) in
                          M.call α0 [ borrow t; borrow α1 ]) :
                          Ty.path "bool"
                      ]) :
                    Ty.path "bool"
                ] in
            let* α7 :=
              M.read
                (mk_str
                  "The transaction exists hence it must also be in the list.") in
            let* α8 :=
              M.call
                (Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.path "usize" ])::["expect"]
                [ α6; α7 ] in
            M.alloc α8 in
          let* _ :=
            let* α0 := M.read self in
            let* α1 := M.read pos in
            let* α2 :=
              M.call
                (Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global"
                    ])::["swap_remove"]
                [
                  borrow_mut
                    ((M.var "multisig::Transactions::Get_transactions")
                      ((M.var "multisig::Multisig::Get_transaction_list")
                        (deref α0)));
                  α1
                ] in
            M.alloc α2 in
          let* _ :=
            let* α0 :=
              M.get_method
                "core::iter::traits::collect::IntoIterator"
                "into_iter"
                [
                  (* Self *)
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      [ Ty.path "multisig::AccountId" ]
                ] in
            let* α1 :=
              M.get_method
                "core::ops::deref::Deref"
                "deref"
                [
                  (* Self *)
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.path "multisig::AccountId";
                        Ty.path "alloc::alloc::Global"
                      ]
                ] in
            let* α2 := M.read self in
            let* α3 :=
              M.call
                α1
                [ borrow ((M.var "multisig::Multisig::Get_owners") (deref α2))
                ] in
            let* α4 :=
              M.call
                (Ty.apply
                    (Ty.path "slice")
                    [ Ty.path "multisig::AccountId" ])::["iter"]
                [ α3 ] in
            let* α5 := M.call α0 [ α4 ] in
            let* α6 := M.alloc α5 in
            let* α7 :=
              match_operator
                α6
                [
                  fun γ =>
                    (let* iter := M.copy γ in
                    M.loop
                      (let* _ :=
                        let* α0 :=
                          M.get_method
                            "core::iter::traits::iterator::Iterator"
                            "next"
                            [
                              (* Self *)
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [ Ty.path "multisig::AccountId" ]
                            ] in
                        let* α1 := M.call α0 [ borrow_mut iter ] in
                        let* α2 := M.alloc α1 in
                        match_operator
                          α2
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.option.Option.None =>
                                let* α0 := M.break in
                                let* α1 := M.read α0 in
                                let* α2 := never_to_any α1 in
                                M.alloc α2
                              | _ => M.break_match 
                              end) :
                              Ty.tuple [];
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.option.Option.Some _ =>
                                let γ0_0 :=
                                  (M.var "core::option::Option::Get_Some_0")
                                    γ in
                                let* owner := M.copy γ0_0 in
                                let* _ :=
                                  let* α0 := M.read self in
                                  let* α1 := M.read trans_id in
                                  let* α2 := M.read owner in
                                  let* α3 := M.read (deref α2) in
                                  let* α4 :=
                                    M.call
                                      (Ty.apply
                                          (Ty.path "multisig::Mapping")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "u32";
                                                Ty.path "multisig::AccountId"
                                              ];
                                            Ty.tuple []
                                          ])::["remove"]
                                      [
                                        borrow
                                          ((M.var
                                              "multisig::Multisig::Get_confirmations")
                                            (deref α0));
                                        (α1, α3)
                                      ] in
                                  M.alloc α4 in
                                M.alloc tt
                              | _ => M.break_match 
                              end) :
                              Ty.tuple []
                          ] in
                      M.alloc tt)) :
                    Ty.tuple []
                ] in
            M.pure (use α7) in
          let* _ :=
            let* α0 := M.read self in
            let* α1 := M.read trans_id in
            let* α2 :=
              M.call
                (Ty.apply
                    (Ty.path "multisig::Mapping")
                    [ Ty.path "u32"; Ty.path "u32" ])::["remove"]
                [
                  borrow
                    ((M.var "multisig::Multisig::Get_confirmation_count")
                      (deref α0));
                  α1
                ] in
            M.alloc α2 in
          M.alloc tt
        else
          M.alloc tt in
      M.read transaction
    | _, _ => M.impossible
    end.
  
  (*
      pub fn cancel_transaction(&mut self, trans_id: TransactionId) {
          self.ensure_from_wallet();
          if self.take_transaction(trans_id).is_some() {
              self.env().emit_event(Event::Cancellation(Cancellation {
                  transaction: trans_id,
              }));
          }
      }
  *)
  Definition cancel_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_from_wallet"]
            [ borrow (deref α0) ] in
        M.alloc α1 in
      let* α0 := M.read self in
      let* α1 := M.read trans_id in
      let* α2 :=
        M.call
          (Ty.path "multisig::Multisig")::["take_transaction"]
          [ α0; α1 ] in
      let* α3 := M.alloc α2 in
      let* α4 :=
        M.call
          (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "multisig::Transaction" ])::["is_some"]
          [ borrow α3 ] in
      let* α5 := M.alloc α4 in
      let* α6 := M.read (use α5) in
      let* α0 :=
        if α6 then
          let* _ :=
            let* α0 := M.read self in
            let* α1 :=
              M.call
                (Ty.path "multisig::Multisig")::["env"]
                [ borrow (deref α0) ] in
            let* α2 := M.alloc α1 in
            let* α3 := M.read trans_id in
            let* α4 :=
              M.call
                (Ty.path "multisig::Env")::["emit_event"]
                [
                  borrow α2;
                  multisig.Event.Cancellation
                    (Value.StructRecord
                      "multisig::Cancellation"
                      [ ("transaction", α3) ])
                ] in
            M.alloc α4 in
          M.alloc tt
        else
          M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn confirm_transaction(&mut self, trans_id: TransactionId) -> ConfirmationStatus {
          self.ensure_caller_is_owner();
          self.ensure_transaction_exists(trans_id);
          self.confirm_by_caller(self.env().caller(), trans_id)
      }
  *)
  Definition confirm_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_caller_is_owner"]
            [ borrow (deref α0) ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read trans_id in
        let* α2 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_transaction_exists"]
            [ borrow (deref α0); α1 ] in
        M.alloc α2 in
      let* α0 := M.read self in
      let* α1 := M.read self in
      let* α2 :=
        M.call (Ty.path "multisig::Multisig")::["env"] [ borrow (deref α1) ] in
      let* α3 := M.alloc α2 in
      let* α4 := M.call (Ty.path "multisig::Env")::["caller"] [ borrow α3 ] in
      let* α5 := M.read trans_id in
      let* α6 :=
        M.call
          (Ty.path "multisig::Multisig")::["confirm_by_caller"]
          [ α0; α4; α5 ] in
      let* α0 := M.alloc α6 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn revoke_confirmation(&mut self, trans_id: TransactionId) {
          self.ensure_caller_is_owner();
          let caller = self.env().caller();
          if self.confirmations.contains(&(trans_id, caller)) {
              self.confirmations.remove((trans_id, caller));
              let mut confirmation_count = self
                  .confirmation_count
                  .get(&trans_id)
                  .expect("There is a entry in `self.confirmations`. Hence a count must exit.");
              // Will not underflow as there is at least one confirmation
              confirmation_count -= 1;
              self.confirmation_count.insert(trans_id, confirmation_count);
              self.env().emit_event(Event::Revocation(Revocation {
                  transaction: trans_id,
                  from: caller,
              }));
          }
      }
  *)
  Definition revoke_confirmation (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_caller_is_owner"]
            [ borrow (deref α0) ] in
        M.alloc α1 in
      let* caller :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.call (Ty.path "multisig::Env")::["caller"] [ borrow α2 ] in
        M.alloc α3 in
      let* α0 := M.read self in
      let* α1 := M.read trans_id in
      let* α2 := M.read caller in
      let* α3 := M.alloc (α1, α2) in
      let* α4 :=
        M.call
          (Ty.apply
              (Ty.path "multisig::Mapping")
              [
                Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                Ty.tuple []
              ])::["contains"]
          [
            borrow ((M.var "multisig::Multisig::Get_confirmations") (deref α0));
            borrow α3
          ] in
      let* α5 := M.alloc α4 in
      let* α6 := M.read (use α5) in
      let* α0 :=
        if α6 then
          let* _ :=
            let* α0 := M.read self in
            let* α1 := M.read trans_id in
            let* α2 := M.read caller in
            let* α3 :=
              M.call
                (Ty.apply
                    (Ty.path "multisig::Mapping")
                    [
                      Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                      Ty.tuple []
                    ])::["remove"]
                [
                  borrow
                    ((M.var "multisig::Multisig::Get_confirmations")
                      (deref α0));
                  (α1, α2)
                ] in
            M.alloc α3 in
          let* confirmation_count :=
            let* α0 := M.read self in
            let* α1 :=
              M.call
                (Ty.apply
                    (Ty.path "multisig::Mapping")
                    [ Ty.path "u32"; Ty.path "u32" ])::["get"]
                [
                  borrow
                    ((M.var "multisig::Multisig::Get_confirmation_count")
                      (deref α0));
                  borrow trans_id
                ] in
            let* α2 :=
              M.read
                (mk_str
                  "There is a entry in `self.confirmations`. Hence a count must exit.") in
            let* α3 :=
              M.call
                (Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.path "u32" ])::["expect"]
                [ α1; α2 ] in
            M.alloc α3 in
          let* _ :=
            let β := confirmation_count in
            let* α0 := M.read β in
            let* α1 :=
              (M.var "BinOp::Panic::sub")
                α0
                ((Integer.of_Z 1) : Ty.path "u32") in
            (M.var "assign") β α1 in
          let* _ :=
            let* α0 := M.read self in
            let* α1 := M.read trans_id in
            let* α2 := M.read confirmation_count in
            let* α3 :=
              M.call
                (Ty.apply
                    (Ty.path "multisig::Mapping")
                    [ Ty.path "u32"; Ty.path "u32" ])::["insert"]
                [
                  borrow_mut
                    ((M.var "multisig::Multisig::Get_confirmation_count")
                      (deref α0));
                  α1;
                  α2
                ] in
            M.alloc α3 in
          let* _ :=
            let* α0 := M.read self in
            let* α1 :=
              M.call
                (Ty.path "multisig::Multisig")::["env"]
                [ borrow (deref α0) ] in
            let* α2 := M.alloc α1 in
            let* α3 := M.read trans_id in
            let* α4 := M.read caller in
            let* α5 :=
              M.call
                (Ty.path "multisig::Env")::["emit_event"]
                [
                  borrow α2;
                  multisig.Event.Revocation
                    (Value.StructRecord
                      "multisig::Revocation"
                      [ ("transaction", α3); ("from", α4) ])
                ] in
            M.alloc α5 in
          M.alloc tt
        else
          M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn invoke_transaction(&mut self, trans_id: TransactionId) -> Result<(), Error> {
          self.ensure_confirmed(trans_id);
          let t = self.take_transaction(trans_id).expect(WRONG_TRANSACTION_ID);
          assert!(self.env().transferred_value() == t.transferred_value);
          // let result = build_call()
          //     .call(t.callee)
          //     .gas_limit(t.gas_limit)
          //     .transferred_value(t.transferred_value)
          //     .call_flags(CallFlags::default().set_allow_reentry(t.allow_reentry))
          //     .exec_input(ExecutionInput::new(t.selector.into()).push_arg(CallInput(&t.input)))
          //     .returns::<()>()
          //     .try_invoke();
          let result: Result<Result<Vec<u8>, ()>, ()> = todo!();
  
          let result = match result {
              Ok(Ok(_)) => Ok(()),
              _ => Err(Error::TransactionFailed),
          };
  
          self.env().emit_event(Event::Execution(Execution {
              transaction: trans_id,
              result: result.map(|_| None),
          }));
          result
      }
  *)
  Definition invoke_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read trans_id in
        let* α2 :=
          M.call
            (Ty.path "multisig::Multisig")::["ensure_confirmed"]
            [ borrow (deref α0); α1 ] in
        M.alloc α2 in
      let* t :=
        let* α0 := M.read self in
        let* α1 := M.read trans_id in
        let* α2 :=
          M.call
            (Ty.path "multisig::Multisig")::["take_transaction"]
            [ α0; α1 ] in
        let* α3 := M.read (M.var "multisig::WRONG_TRANSACTION_ID") in
        let* α4 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "multisig::Transaction" ])::["expect"]
            [ α2; α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 :=
          M.call
            (Ty.path "multisig::Env")::["transferred_value"]
            [ borrow α2 ] in
        let* α4 :=
          M.read ((M.var "multisig::Transaction::Get_transferred_value") t) in
        let* α5 :=
          M.alloc ((M.var "UnOp::not") ((M.var "BinOp::Pure::eq") α3 α4)) in
        let* α6 := M.read (use α5) in
        if α6 then
          let* α0 :=
            M.read
              (mk_str
                "assertion failed: self.env().transferred_value() == t.transferred_value") in
          let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
          let* α2 := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt in
      let* result :=
        let* α0 := M.read (mk_str "not yet implemented") in
        let* α1 := M.call (M.var "core::panicking::panic") [ α0 ] in
        let* α2 := never_to_any α1 in
        M.alloc α2 in
      let* result :=
        let* α0 :=
          match_operator
            result
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.result.Result.Ok _ =>
                  let γ0_0 := (M.var "core::result::Result::Get_Ok_0") γ in
                  let* α0 := M.read γ0_0 in
                  match α0 with
                  | core.result.Result.Ok _ =>
                    let γ1_0 := (M.var "core::result::Result::Get_Ok_0") γ0_0 in
                    M.alloc (core.result.Result.Ok tt)
                  | _ => M.break_match 
                  end
                | _ => M.break_match 
                end) :
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.tuple []; Ty.path "multisig::Error" ];
              fun γ =>
                (M.alloc
                  (core.result.Result.Err multisig.Error.TransactionFailed)) :
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.tuple []; Ty.path "multisig::Error" ]
            ] in
        M.copy α0 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call
            (Ty.path "multisig::Multisig")::["env"]
            [ borrow (deref α0) ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read trans_id in
        let* α4 := M.read result in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "core::result::Result")
                [ Ty.tuple []; Ty.path "multisig::Error" ])::["map"]
            [
              α4;
              fun (α0 : Ty.tuple []) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  [
                    fun γ =>
                      (M.pure core.option.Option.None) :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                        ]
                  ]) :
                Ty.apply
                  (Ty.path "core::option::Option")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                  ]
            ] in
        let* α6 :=
          M.call
            (Ty.path "multisig::Env")::["emit_event"]
            [
              borrow α2;
              multisig.Event.Execution
                (Value.StructRecord
                  "multisig::Execution"
                  [ ("transaction", α3); ("result", α5) ])
            ] in
        M.alloc α6 in
      M.read result
    | _, _ => M.impossible
    end.
  
  (*
      pub fn eval_transaction(&mut self, trans_id: TransactionId) -> Result<Vec<u8>, Error> {
          self.ensure_confirmed(trans_id);
          let t = self.take_transaction(trans_id).expect(WRONG_TRANSACTION_ID);
          // let result = build_call()
          //     .call(t.callee)
          //     .gas_limit(t.gas_limit)
          //     .transferred_value(t.transferred_value)
          //     .call_flags(CallFlags::default().set_allow_reentry(t.allow_reentry))
          //     .exec_input(ExecutionInput::new(t.selector.into()).push_arg(CallInput(&t.input)))
          //     .returns::<Vec<u8>>()
          //     .try_invoke();
          let result: Result<Result<Vec<u8>, ()>, ()> = todo!();
  
          let result = match result {
              Ok(Ok(v)) => Ok(v),
              _ => Err(Error::TransactionFailed),
          };
  
          self.env().emit_event(Event::Execution(Execution {
              transaction: trans_id,
              result: result.clone().map(Some),
          }));
          result
      }
  *)
  Parameter eval_transaction : (list Ty.t) -> (list Value.t) -> M.
End Impl_multisig_Multisig.
