(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Mapping *)

Module Impl_core_default_Default_for_multisig_Mapping_K_V.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ K ] ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ V ] ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord
          "multisig::Mapping"
          [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.apply (Ty.path "multisig::Mapping") [ K; V ])
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [ K; V ].
End Impl_core_default_Default_for_multisig_Mapping_K_V.

Module Impl_multisig_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "multisig::Mapping") [ K; V ].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Definition contains (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_contains :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "contains" contains [ K; V ].
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "get" get [ K; V ].
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition insert (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key; _value ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "insert" insert [ K; V ].
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Definition remove (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_remove :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "remove" remove [ K; V ].
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition size (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_size :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "size" size [ K; V ].
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition take (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; K; V ], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_take :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "take" take [ K; V ].
End Impl_multisig_Mapping_K_V.

(* Struct AccountId *)

Module Impl_core_default_Default_for_multisig_AccountId.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α1 := M.call α0 [] in
      M.pure (Value.StructTuple "multisig::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_multisig_AccountId.

Module Impl_core_fmt_Debug_for_multisig_AccountId.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function
          (Ty.path "core::fmt::Formatter")
          "debug_tuple_field1_finish" in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "AccountId") in
      let* α3 := M.read self in
      let* α4 := M.alloc (M.get_struct_tuple α3 0) in
      M.call α0 [ α1; α2; M.pointer_coercion (* Unsize *) α4 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_multisig_AccountId.

Module Impl_core_clone_Clone_for_multisig_AccountId.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          (Value.Array [ fun γ => (M.read self) ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_multisig_AccountId.

Module Impl_core_marker_Copy_for_multisig_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_Copy_for_multisig_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.

Module Impl_core_cmp_PartialEq_for_multisig_AccountId.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.read self in
      let* α1 := M.read (M.get_struct_tuple α0 0) in
      let* α2 := M.read other in
      let* α3 := M.read (M.get_struct_tuple α2 0) in
      M.pure (BinOp.Pure.eq α1 α3)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_multisig_AccountId.

Module Impl_core_marker_StructuralEq_for_multisig_AccountId.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_multisig_AccountId.

Module Impl_core_cmp_Eq_for_multisig_AccountId.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          (Value.Array [ fun γ => (M.alloc (Value.Tuple [])) ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_multisig_AccountId.

Module Impl_core_cmp_PartialOrd_for_multisig_AccountId.
  (*
  PartialOrd
  *)
  Definition partial_cmp (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_trait_method
          "core::cmp::PartialOrd"
          "partial_cmp"
          [ (* Self *) Ty.path "u128"; (* Rhs *) Ty.path "u128" ] in
      let* α1 := M.read self in
      let* α2 := M.read other in
      M.call α0 [ M.get_struct_tuple α1 0; M.get_struct_tuple α2 0 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialOrd"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialOrd_for_multisig_AccountId.

Module Impl_core_cmp_Ord_for_multisig_AccountId.
  (*
  Ord
  *)
  Definition cmp (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_trait_method
          "core::cmp::Ord"
          "cmp"
          [ (* Self *) Ty.path "u128" ] in
      let* α1 := M.read self in
      let* α2 := M.read other in
      M.call α0 [ M.get_struct_tuple α1 0; M.get_struct_tuple α2 0 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Ord"
      (* Self *) (Ty.path "multisig::AccountId")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("cmp", InstanceField.Method cmp) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Ord_for_multisig_AccountId.

Axiom Balance : (Ty.path "multisig::Balance") = (Ty.path "u128").

(* Struct Env *)

Definition MAX_OWNERS : Ty.path "u32" :=
  M.run (M.alloc (Value.Integer Integer.U32 50)).

Axiom TransactionId : (Ty.path "multisig::TransactionId") = (Ty.path "u32").

Definition WRONG_TRANSACTION_ID : Ty.apply (Ty.path "&") [ Ty.path "str" ] :=
  M.run
    (M.pure (mk_str "The user specified an invalid transaction id. Abort.")).

(* Struct CallInput *)

(* Enum ConfirmationStatus *)

Module Impl_core_clone_Clone_for_multisig_ConfirmationStatus.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          (Value.Array [ fun γ => (M.read self) ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "multisig::ConfirmationStatus")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_multisig_ConfirmationStatus.

Module Impl_core_marker_Copy_for_multisig_ConfirmationStatus.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.path "multisig::ConfirmationStatus")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_Copy_for_multisig_ConfirmationStatus.

(* Struct Transaction *)

Module Impl_core_default_Default_for_multisig_Transaction.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "multisig::AccountId" ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ] in
      let* α3 := M.call α2 [] in
      let* α4 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α5 := M.call α4 [] in
      let* α6 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* α7 := M.call α6 [] in
      let* α8 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u64" ] in
      let* α9 := M.call α8 [] in
      let* α10 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "bool" ] in
      let* α11 := M.call α10 [] in
      M.pure
        (Value.StructRecord
          "multisig::Transaction"
          [
            ("callee", α1);
            ("selector", α3);
            ("input", α5);
            ("transferred_value", α7);
            ("gas_limit", α9);
            ("allow_reentry", α11)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "multisig::Transaction")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_multisig_Transaction.

(* Enum Error *)

Module Impl_core_clone_Clone_for_multisig_Error.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "multisig::Error")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ]
      (* Instance polymorphic types *) [].
End Impl_core_clone_Clone_for_multisig_Error.

Module Impl_core_marker_Copy_for_multisig_Error.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.path "multisig::Error")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_Copy_for_multisig_Error.

Module Impl_core_marker_StructuralPartialEq_for_multisig_Error.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *) (Ty.path "multisig::Error")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralPartialEq_for_multisig_Error.

Module Impl_core_cmp_PartialEq_for_multisig_Error.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      M.pure (Value.Bool true)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *) (Ty.path "multisig::Error")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_PartialEq_for_multisig_Error.

Module Impl_core_marker_StructuralEq_for_multisig_Error.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      (* Self *) (Ty.path "multisig::Error")
      (* Trait polymorphic types *) []
      (* Instance *) []
      (* Instance polymorphic types *) [].
End Impl_core_marker_StructuralEq_for_multisig_Error.

Module Impl_core_cmp_Eq_for_multisig_Error.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.pure (Value.Tuple [])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Self *) (Ty.path "multisig::Error")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method assert_receiver_is_total_eq)
        ]
      (* Instance polymorphic types *) [].
End Impl_core_cmp_Eq_for_multisig_Error.

(* Struct Transactions *)

Module Impl_core_default_Default_for_multisig_Transactions.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u32" ] in
      let* α3 := M.call α2 [] in
      M.pure
        (Value.StructRecord
          "multisig::Transactions"
          [ ("transactions", α1); ("next_id", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "multisig::Transactions")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_multisig_Transactions.

(* Struct Confirmation *)

(* Struct Revocation *)

(* Struct Submission *)

(* Struct Cancellation *)

(* Struct Execution *)

(* Struct OwnerAddition *)

(* Struct OwnerRemoval *)

(* Struct RequirementChange *)

(* Enum Event *)

Module Impl_multisig_Env.
  Definition Self : Ty.t := Ty.path "multisig::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record α0 "caller")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller :
    M.IsAssociatedFunction Self "caller" caller [].
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_emit_event :
    M.IsAssociatedFunction Self "emit_event" emit_event [].
  
  (*
      fn transferred_value(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition transferred_value (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_transferred_value :
    M.IsAssociatedFunction Self "transferred_value" transferred_value [].
  
  (*
      fn account_id(&self) -> AccountId {
          unimplemented!()
      }
  *)
  Definition account_id (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_account_id :
    M.IsAssociatedFunction Self "account_id" account_id [].
End Impl_multisig_Env.

(* Struct Multisig *)

Module Impl_core_default_Default_for_multisig_Multisig.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "multisig::Mapping")
                [
                  Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                  Ty.tuple []
                ]
          ] in
      let* α1 := M.call α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "u32" ]
          ] in
      let* α3 := M.call α2 [] in
      let* α4 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "u32"; Ty.path "multisig::Transaction" ]
          ] in
      let* α5 := M.call α4 [] in
      let* α6 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "multisig::Transactions" ] in
      let* α7 := M.call α6 [] in
      let* α8 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α9 := M.call α8 [] in
      let* α10 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [
            (* Self *)
              Ty.apply
                (Ty.path "multisig::Mapping")
                [ Ty.path "multisig::AccountId"; Ty.tuple [] ]
          ] in
      let* α11 := M.call α10 [] in
      let* α12 :=
        M.get_trait_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u32" ] in
      let* α13 := M.call α12 [] in
      M.pure
        (Value.StructRecord
          "multisig::Multisig"
          [
            ("confirmations", α1);
            ("confirmation_count", α3);
            ("transactions", α5);
            ("transaction_list", α7);
            ("owners", α9);
            ("is_owner", α11);
            ("requirement", α13)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "multisig::Multisig")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ]
      (* Instance polymorphic types *) [].
End Impl_core_default_Default_for_multisig_Multisig.

(*
fn ensure_requirement_is_valid(owners: u32, requirement: u32) {
    assert!(0 < requirement && requirement <= owners && owners <= MAX_OWNERS);
}
*)
Definition ensure_requirement_is_valid (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ owners; requirement ] =>
    let* owners := M.alloc owners in
    let* requirement := M.alloc requirement in
    let* _ :=
      let* α0 := M.read requirement in
      let* α1 :=
        LogicalOp.and
          (BinOp.Pure.lt (Value.Integer Integer.U32 0) α0)
          (let* α0 := M.read requirement in
          let* α1 := M.read owners in
          M.pure (BinOp.Pure.le α0 α1)) in
      let* α2 :=
        LogicalOp.and
          α1
          (let* α0 := M.read owners in
          let* α1 := M.var "multisig::MAX_OWNERS" in
          let* α2 := M.read α1 in
          M.pure (BinOp.Pure.le α0 α2)) in
      let* α3 := M.alloc (UnOp.not α2) in
      let* α4 := M.read (M.use α3) in
      if Value.is_true α4 then
        let* α0 := M.get_function "core::panicking::panic" in
        let* α1 :=
          M.read
            (mk_str
              "assertion failed: 0 < requirement && requirement <= owners && owners <= MAX_OWNERS") in
        let* α2 := M.call α0 [ α1 ] in
        let* α3 := M.never_to_any α2 in
        M.alloc α3
      else
        M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.

Module Impl_multisig_Multisig.
  Definition Self : Ty.t := Ty.path "multisig::Multisig".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 := M.get_function "core::panicking::panic" in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env :
    M.IsAssociatedFunction Self "init_env" init_env [].
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_associated_function (Ty.path "multisig::Multisig") "init_env" in
      M.call α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env [].
  
  (*
      pub fn new(requirement: u32, mut owners: Vec<AccountId>) -> Self {
          let mut contract = Multisig::default();
          owners.sort_unstable();
          owners.dedup();
          ensure_requirement_is_valid(owners.len() as u32, requirement);
  
          for owner in &owners {
              contract.is_owner.insert( *owner, ());
          }
  
          contract.owners = owners;
          contract.transaction_list = Default::default();
          contract.requirement = requirement;
          contract
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ requirement; owners ] =>
      let* requirement := M.alloc requirement in
      let* owners := M.alloc owners in
      let* contract :=
        let* α0 :=
          M.get_trait_method
            "core::default::Default"
            "default"
            [ (* Self *) Ty.path "multisig::Multisig" ] in
        let* α1 := M.call α0 [] in
        M.alloc α1 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "slice") [ Ty.path "multisig::AccountId" ])
            "sort_unstable" in
        let* α1 :=
          M.get_trait_method
            "core::ops::deref::DerefMut"
            "deref_mut"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.path "multisig::AccountId";
                    Ty.path "alloc::alloc::Global"
                  ]
            ] in
        let* α2 := M.call α1 [ owners ] in
        let* α3 := M.call α0 [ α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global" ])
            "dedup" in
        let* α1 := M.call α0 [ owners ] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.get_function "multisig::ensure_requirement_is_valid" in
        let* α1 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global" ])
            "len" in
        let* α2 := M.call α1 [ owners ] in
        let* α3 := M.read requirement in
        let* α4 := M.call α0 [ M.rust_cast α2; α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::iter::traits::collect::IntoIterator"
            "into_iter"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "&")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.path "multisig::AccountId";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
            ] in
        let* α1 := M.call α0 [ owners ] in
        let* α2 := M.alloc α1 in
        let* α3 :=
          match_operator
            α2
            (Value.Array
              [
                fun γ =>
                  (let* iter := M.copy γ in
                  M.loop
                    (let* _ :=
                      let* α0 :=
                        M.get_trait_method
                          "core::iter::traits::iterator::Iterator"
                          "next"
                          [
                            (* Self *)
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [ Ty.path "multisig::AccountId" ]
                          ] in
                      let* α1 := M.call α0 [ iter ] in
                      let* α2 := M.alloc α1 in
                      match_operator
                        α2
                        (Value.Array
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.option.Option.None =>
                                let* α0 := M.break in
                                let* α1 := M.read α0 in
                                let* α2 := M.never_to_any α1 in
                                M.alloc α2
                              | _ => M.break_match
                              end);
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.option.Option.Some _ =>
                                let* γ0_0 :=
                                  let* α0 :=
                                    M.var "core::option::Option::Get_Some_0" in
                                  M.pure (α0 γ) in
                                let* owner := M.copy γ0_0 in
                                let* _ :=
                                  let* α0 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "multisig::Mapping")
                                        [
                                          Ty.path "multisig::AccountId";
                                          Ty.tuple []
                                        ])
                                      "insert" in
                                  let* α1 := M.read owner in
                                  let* α2 := M.read α1 in
                                  let* α3 :=
                                    M.call
                                      α0
                                      [
                                        M.get_struct_record contract "is_owner";
                                        α2;
                                        Value.Tuple []
                                      ] in
                                  M.alloc α3 in
                                M.alloc (Value.Tuple [])
                              | _ => M.break_match
                              end)
                          ]) in
                    M.alloc (Value.Tuple [])))
              ]) in
        M.pure (M.use α3) in
      let* _ :=
        let* α0 := M.read owners in
        M.assign (M.get_struct_record contract "owners") α0 in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::default::Default"
            "default"
            [ (* Self *) Ty.path "multisig::Transactions" ] in
        let* α1 := M.call α0 [] in
        M.assign (M.get_struct_record contract "transaction_list") α1 in
      let* _ :=
        let* α0 := M.read requirement in
        M.assign (M.get_struct_record contract "requirement") α0 in
      M.read contract
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new [].
  
  (*
      fn ensure_confirmed(&self, trans_id: TransactionId) {
          assert!(
              self.confirmation_count
                  .get(&trans_id)
                  .expect(WRONG_TRANSACTION_ID)
                  >= self.requirement
          );
      }
  *)
  Definition ensure_confirmed (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ])
            "expect" in
        let* α1 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "u32"; Ty.path "u32" ])
            "get" in
        let* α2 := M.read self in
        let* α3 :=
          M.call α1 [ M.get_struct_record α2 "confirmation_count"; trans_id ] in
        let* α4 := M.var "multisig::WRONG_TRANSACTION_ID" in
        let* α5 := M.read α4 in
        let* α6 := M.call α0 [ α3; α5 ] in
        let* α7 := M.read self in
        let* α8 := M.read (M.get_struct_record α7 "requirement") in
        let* α9 := M.alloc (UnOp.not (BinOp.Pure.ge α6 α8)) in
        let* α10 := M.read (M.use α9) in
        if Value.is_true α10 then
          let* α0 := M.get_function "core::panicking::panic" in
          let* α1 :=
            M.read
              (mk_str
                "assertion failed: self.confirmation_count.get(&trans_id).expect(WRONG_TRANSACTION_ID) >=
    self.requirement") in
          let* α2 := M.call α0 [ α1 ] in
          let* α3 := M.never_to_any α2 in
          M.alloc α3
        else
          M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_ensure_confirmed :
    M.IsAssociatedFunction Self "ensure_confirmed" ensure_confirmed [].
  
  (*
      fn ensure_transaction_exists(&self, trans_id: TransactionId) {
          self.transactions
              .get(&trans_id)
              .expect(WRONG_TRANSACTION_ID);
      }
  *)
  Definition ensure_transaction_exists (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "multisig::Transaction" ])
            "expect" in
        let* α1 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "u32"; Ty.path "multisig::Transaction" ])
            "get" in
        let* α2 := M.read self in
        let* α3 :=
          M.call α1 [ M.get_struct_record α2 "transactions"; trans_id ] in
        let* α4 := M.var "multisig::WRONG_TRANSACTION_ID" in
        let* α5 := M.read α4 in
        let* α6 := M.call α0 [ α3; α5 ] in
        M.alloc α6 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_ensure_transaction_exists :
    M.IsAssociatedFunction
      Self
      "ensure_transaction_exists"
      ensure_transaction_exists
      [].
  
  (*
      fn ensure_owner(&self, owner: &AccountId) {
          assert!(self.is_owner.contains(owner));
      }
  *)
  Definition ensure_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "multisig::AccountId"; Ty.tuple [] ])
            "contains" in
        let* α1 := M.read self in
        let* α2 := M.read owner in
        let* α3 := M.call α0 [ M.get_struct_record α1 "is_owner"; α2 ] in
        let* α4 := M.alloc (UnOp.not α3) in
        let* α5 := M.read (M.use α4) in
        if Value.is_true α5 then
          let* α0 := M.get_function "core::panicking::panic" in
          let* α1 :=
            M.read (mk_str "assertion failed: self.is_owner.contains(owner)") in
          let* α2 := M.call α0 [ α1 ] in
          let* α3 := M.never_to_any α2 in
          M.alloc α3
        else
          M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_ensure_owner :
    M.IsAssociatedFunction Self "ensure_owner" ensure_owner [].
  
  (*
      fn ensure_caller_is_owner(&self) {
          self.ensure_owner(&self.env().caller());
      }
  *)
  Definition ensure_caller_is_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_owner" in
        let* α1 := M.read self in
        let* α2 :=
          M.get_associated_function (Ty.path "multisig::Env") "caller" in
        let* α3 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α4 := M.read self in
        let* α5 := M.call α3 [ α4 ] in
        let* α6 := M.alloc α5 in
        let* α7 := M.call α2 [ α6 ] in
        let* α8 := M.alloc α7 in
        let* α9 := M.call α0 [ α1; α8 ] in
        M.alloc α9 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_ensure_caller_is_owner :
    M.IsAssociatedFunction
      Self
      "ensure_caller_is_owner"
      ensure_caller_is_owner
      [].
  
  (*
      fn ensure_from_wallet(&self) {
          assert_eq!(self.env().caller(), self.env().account_id());
      }
  *)
  Definition ensure_from_wallet (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "caller" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call α0 [ α4 ] in
        let* α6 := M.alloc α5 in
        let* α7 :=
          M.get_associated_function (Ty.path "multisig::Env") "account_id" in
        let* α8 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α9 := M.read self in
        let* α10 := M.call α8 [ α9 ] in
        let* α11 := M.alloc α10 in
        let* α12 := M.call α7 [ α11 ] in
        let* α13 := M.alloc α12 in
        let* α14 := M.alloc (Value.Tuple [ α6; α13 ]) in
        match_operator
          α14
          (Value.Array
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let* left_val := M.copy γ0_0 in
                  let* right_val := M.copy γ0_1 in
                  let* α0 :=
                    M.get_trait_method
                      "core::cmp::PartialEq"
                      "eq"
                      [
                        (* Self *) Ty.path "multisig::AccountId";
                        (* Rhs *) Ty.path "multisig::AccountId"
                      ] in
                  let* α1 := M.read left_val in
                  let* α2 := M.read right_val in
                  let* α3 := M.call α0 [ α1; α2 ] in
                  let* α4 := M.alloc (UnOp.not α3) in
                  let* α5 := M.read (M.use α4) in
                  if Value.is_true α5 then
                    let* kind :=
                      M.alloc
                        (Value.StructTuple
                          "core::panicking::AssertKind::Eq"
                          []) in
                    let* α0 :=
                      M.get_function "core::panicking::assert_failed" in
                    let* α1 := M.read kind in
                    let* α2 := M.read left_val in
                    let* α3 := M.read right_val in
                    let* α4 :=
                      M.call
                        α0
                        [
                          α1;
                          α2;
                          α3;
                          Value.StructTuple "core::option::Option::None" []
                        ] in
                    let* α0 := M.alloc α4 in
                    let* α1 := M.read α0 in
                    let* α2 := M.never_to_any α1 in
                    M.alloc α2
                  else
                    M.alloc (Value.Tuple [])
                end)
            ]) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_ensure_from_wallet :
    M.IsAssociatedFunction Self "ensure_from_wallet" ensure_from_wallet [].
  
  (*
      fn ensure_no_owner(&self, owner: &AccountId) {
          assert!(!self.is_owner.contains(owner));
      }
  *)
  Definition ensure_no_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "multisig::AccountId"; Ty.tuple [] ])
            "contains" in
        let* α1 := M.read self in
        let* α2 := M.read owner in
        let* α3 := M.call α0 [ M.get_struct_record α1 "is_owner"; α2 ] in
        let* α4 := M.alloc (UnOp.not (UnOp.not α3)) in
        let* α5 := M.read (M.use α4) in
        if Value.is_true α5 then
          let* α0 := M.get_function "core::panicking::panic" in
          let* α1 :=
            M.read
              (mk_str "assertion failed: !self.is_owner.contains(owner)") in
          let* α2 := M.call α0 [ α1 ] in
          let* α3 := M.never_to_any α2 in
          M.alloc α3
        else
          M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_ensure_no_owner :
    M.IsAssociatedFunction Self "ensure_no_owner" ensure_no_owner [].
  
  (*
      pub fn add_owner(&mut self, new_owner: AccountId) {
          self.ensure_from_wallet();
          self.ensure_no_owner(&new_owner);
          ensure_requirement_is_valid(self.owners.len() as u32 + 1, self.requirement);
          self.is_owner.insert(new_owner, ());
          self.owners.push(new_owner);
          self.env()
              .emit_event(Event::OwnerAddition(OwnerAddition { owner: new_owner }));
      }
  *)
  Definition add_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; new_owner ] =>
      let* self := M.alloc self in
      let* new_owner := M.alloc new_owner in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_from_wallet" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_no_owner" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1; new_owner ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.get_function "multisig::ensure_requirement_is_valid" in
        let* α1 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global" ])
            "len" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ M.get_struct_record α2 "owners" ] in
        let* α4 :=
          BinOp.Panic.add (M.rust_cast α3) (Value.Integer Integer.U32 1) in
        let* α5 := M.read self in
        let* α6 := M.read (M.get_struct_record α5 "requirement") in
        let* α7 := M.call α0 [ α4; α6 ] in
        M.alloc α7 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "multisig::AccountId"; Ty.tuple [] ])
            "insert" in
        let* α1 := M.read self in
        let* α2 := M.read new_owner in
        let* α3 :=
          M.call α0 [ M.get_struct_record α1 "is_owner"; α2; Value.Tuple [] ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global" ])
            "push" in
        let* α1 := M.read self in
        let* α2 := M.read new_owner in
        let* α3 := M.call α0 [ M.get_struct_record α1 "owners"; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "emit_event" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read new_owner in
        let* α6 :=
          M.call
            α0
            [
              α4;
              Value.StructTuple
                "multisig::Event::OwnerAddition"
                [ Value.StructRecord "multisig::OwnerAddition" [ ("owner", α5) ]
                ]
            ] in
        M.alloc α6 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_add_owner :
    M.IsAssociatedFunction Self "add_owner" add_owner [].
  
  (*
      fn owner_index(&self, owner: &AccountId) -> u32 {
          self.owners.iter().position(|x| *x == *owner).expect(
              "This is only called after it was already verified that the id is
                 actually an owner.",
          ) as u32
      }
  *)
  Definition owner_index (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ])
          "expect" in
      let* α1 :=
        M.get_trait_method
          "core::iter::traits::iterator::Iterator"
          "position"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::slice::iter::Iter")
                [ Ty.path "multisig::AccountId" ];
            (* P *)
              Ty.function
                [
                  Ty.tuple
                    [ Ty.apply (Ty.path "&") [ Ty.path "multisig::AccountId" ] ]
                ]
                (Ty.path "bool")
          ] in
      let* α2 :=
        M.get_associated_function
          (Ty.apply (Ty.path "slice") [ Ty.path "multisig::AccountId" ])
          "iter" in
      let* α3 :=
        M.get_trait_method
          "core::ops::deref::Deref"
          "deref"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α4 := M.read self in
      let* α5 := M.call α3 [ M.get_struct_record α4 "owners" ] in
      let* α6 := M.call α2 [ α5 ] in
      let* α7 := M.alloc α6 in
      let* α8 :=
        M.call
          α1
          [
            α7;
            fun
                (α0 :
                  Ty.apply (Ty.path "&") [ Ty.path "multisig::AccountId" ]) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                (Value.Array
                  [
                    fun γ =>
                      (let* x := M.copy γ in
                      let* α0 :=
                        M.get_trait_method
                          "core::cmp::PartialEq"
                          "eq"
                          [
                            (* Self *) Ty.path "multisig::AccountId";
                            (* Rhs *) Ty.path "multisig::AccountId"
                          ] in
                      let* α1 := M.read x in
                      let* α2 := M.read owner in
                      M.call α0 [ α1; α2 ])
                  ]))
          ] in
      let* α9 :=
        M.read
          (mk_str
            "This is only called after it was already verified that the id is
               actually an owner.") in
      let* α10 := M.call α0 [ α8; α9 ] in
      M.pure (M.rust_cast α10)
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_owner_index :
    M.IsAssociatedFunction Self "owner_index" owner_index [].
  
  (*
      fn clean_owner_confirmations(&mut self, owner: &AccountId) {
          for trans_id in &self.transaction_list.transactions {
              let key = ( *trans_id, *owner);
              if self.confirmations.contains(&key) {
                  self.confirmations.remove(key);
                  let mut count = self.confirmation_count.get(trans_id).unwrap_or(0 as u32);
                  count -= 1;
                  self.confirmation_count.insert( *trans_id, count);
              }
          }
      }
  *)
  Definition clean_owner_confirmations (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply
                (Ty.path "&")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]
                ]
          ] in
      let* α1 := M.read self in
      let* α2 :=
        M.call
          α0
          [
            M.get_struct_record
              (M.get_struct_record α1 "transaction_list")
              "transactions"
          ] in
      let* α3 := M.alloc α2 in
      let* α4 :=
        match_operator
          α3
          (Value.Array
            [
              fun γ =>
                (let* iter := M.copy γ in
                M.loop
                  (let* _ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::iter::traits::iterator::Iterator"
                        "next"
                        [
                          (* Self *)
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [ Ty.path "u32" ]
                        ] in
                    let* α1 := M.call α0 [ iter ] in
                    let* α2 := M.alloc α1 in
                    match_operator
                      α2
                      (Value.Array
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.None =>
                              let* α0 := M.break in
                              let* α1 := M.read α0 in
                              let* α2 := M.never_to_any α1 in
                              M.alloc α2
                            | _ => M.break_match
                            end);
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.Some _ =>
                              let* γ0_0 :=
                                let* α0 :=
                                  M.var "core::option::Option::Get_Some_0" in
                                M.pure (α0 γ) in
                              let* trans_id := M.copy γ0_0 in
                              let* key :=
                                let* α0 := M.read trans_id in
                                let* α1 := M.read α0 in
                                let* α2 := M.read owner in
                                let* α3 := M.read α2 in
                                M.alloc (Value.Tuple [ α1; α3 ]) in
                              let* α0 :=
                                M.get_associated_function
                                  (Ty.apply
                                    (Ty.path "multisig::Mapping")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "u32";
                                          Ty.path "multisig::AccountId"
                                        ];
                                      Ty.tuple []
                                    ])
                                  "contains" in
                              let* α1 := M.read self in
                              let* α2 :=
                                M.call
                                  α0
                                  [ M.get_struct_record α1 "confirmations"; key
                                  ] in
                              let* α3 := M.alloc α2 in
                              let* α4 := M.read (M.use α3) in
                              if Value.is_true α4 then
                                let* _ :=
                                  let* α0 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "multisig::Mapping")
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "u32";
                                              Ty.path "multisig::AccountId"
                                            ];
                                          Ty.tuple []
                                        ])
                                      "remove" in
                                  let* α1 := M.read self in
                                  let* α2 := M.read key in
                                  let* α3 :=
                                    M.call
                                      α0
                                      [
                                        M.get_struct_record α1 "confirmations";
                                        α2
                                      ] in
                                  M.alloc α3 in
                                let* count :=
                                  let* α0 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "core::option::Option")
                                        [ Ty.path "u32" ])
                                      "unwrap_or" in
                                  let* α1 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "multisig::Mapping")
                                        [ Ty.path "u32"; Ty.path "u32" ])
                                      "get" in
                                  let* α2 := M.read self in
                                  let* α3 := M.read trans_id in
                                  let* α4 :=
                                    M.call
                                      α1
                                      [
                                        M.get_struct_record
                                          α2
                                          "confirmation_count";
                                        α3
                                      ] in
                                  let* α5 :=
                                    M.alloc (Value.Integer Integer.U32 0) in
                                  let* α6 := M.read (M.use α5) in
                                  let* α7 := M.call α0 [ α4; α6 ] in
                                  M.alloc α7 in
                                let* _ :=
                                  let β := count in
                                  let* α0 := M.read β in
                                  let* α1 :=
                                    BinOp.Panic.sub
                                      α0
                                      (Value.Integer Integer.U32 1) in
                                  M.assign β α1 in
                                let* _ :=
                                  let* α0 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "multisig::Mapping")
                                        [ Ty.path "u32"; Ty.path "u32" ])
                                      "insert" in
                                  let* α1 := M.read self in
                                  let* α2 := M.read trans_id in
                                  let* α3 := M.read α2 in
                                  let* α4 := M.read count in
                                  let* α5 :=
                                    M.call
                                      α0
                                      [
                                        M.get_struct_record
                                          α1
                                          "confirmation_count";
                                        α3;
                                        α4
                                      ] in
                                  M.alloc α5 in
                                M.alloc (Value.Tuple [])
                              else
                                M.alloc (Value.Tuple [])
                            | _ => M.break_match
                            end)
                        ]) in
                  M.alloc (Value.Tuple [])))
            ]) in
      M.read (M.use α4)
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_clean_owner_confirmations :
    M.IsAssociatedFunction
      Self
      "clean_owner_confirmations"
      clean_owner_confirmations
      [].
  
  (*
      pub fn remove_owner(&mut self, owner: AccountId) {
          self.ensure_from_wallet();
          self.ensure_owner(&owner);
          let len = self.owners.len() as u32 - 1;
          let requirement = u32::min(len, self.requirement);
          ensure_requirement_is_valid(len, requirement);
          let owner_index = self.owner_index(&owner) as usize;
          self.owners.swap_remove(owner_index);
          self.is_owner.remove(owner);
          self.requirement = requirement;
          self.clean_owner_confirmations(&owner);
          self.env()
              .emit_event(Event::OwnerRemoval(OwnerRemoval { owner }));
      }
  *)
  Definition remove_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_from_wallet" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_owner" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1; owner ] in
        M.alloc α2 in
      let* len :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global" ])
            "len" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ M.get_struct_record α1 "owners" ] in
        let* α3 :=
          BinOp.Panic.sub (M.rust_cast α2) (Value.Integer Integer.U32 1) in
        M.alloc α3 in
      let* requirement :=
        let* α0 :=
          M.get_trait_method
            "core::cmp::Ord"
            "min"
            [ (* Self *) Ty.path "u32" ] in
        let* α1 := M.read len in
        let* α2 := M.read self in
        let* α3 := M.read (M.get_struct_record α2 "requirement") in
        let* α4 := M.call α0 [ α1; α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 := M.get_function "multisig::ensure_requirement_is_valid" in
        let* α1 := M.read len in
        let* α2 := M.read requirement in
        let* α3 := M.call α0 [ α1; α2 ] in
        M.alloc α3 in
      let* owner_index :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "owner_index" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1; owner ] in
        M.alloc (M.rust_cast α2) in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global" ])
            "swap_remove" in
        let* α1 := M.read self in
        let* α2 := M.read owner_index in
        let* α3 := M.call α0 [ M.get_struct_record α1 "owners"; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "multisig::AccountId"; Ty.tuple [] ])
            "remove" in
        let* α1 := M.read self in
        let* α2 := M.read owner in
        let* α3 := M.call α0 [ M.get_struct_record α1 "is_owner"; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read requirement in
        M.assign (M.get_struct_record α0 "requirement") α1 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "clean_owner_confirmations" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1; owner ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "emit_event" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read owner in
        let* α6 :=
          M.call
            α0
            [
              α4;
              Value.StructTuple
                "multisig::Event::OwnerRemoval"
                [ Value.StructRecord "multisig::OwnerRemoval" [ ("owner", α5) ]
                ]
            ] in
        M.alloc α6 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_remove_owner :
    M.IsAssociatedFunction Self "remove_owner" remove_owner [].
  
  (*
      pub fn replace_owner(&mut self, old_owner: AccountId, new_owner: AccountId) {
          self.ensure_from_wallet();
          self.ensure_owner(&old_owner);
          self.ensure_no_owner(&new_owner);
          let owner_index = self.owner_index(&old_owner);
          self.owners[owner_index as usize] = new_owner;
          self.is_owner.remove(old_owner);
          self.is_owner.insert(new_owner, ());
          self.clean_owner_confirmations(&old_owner);
          self.env()
              .emit_event(Event::OwnerRemoval(OwnerRemoval { owner: old_owner }));
          self.env()
              .emit_event(Event::OwnerAddition(OwnerAddition { owner: new_owner }));
      }
  *)
  Definition replace_owner (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; old_owner; new_owner ] =>
      let* self := M.alloc self in
      let* old_owner := M.alloc old_owner in
      let* new_owner := M.alloc new_owner in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_from_wallet" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_owner" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1; old_owner ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_no_owner" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1; new_owner ] in
        M.alloc α2 in
      let* owner_index :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "owner_index" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1; old_owner ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::ops::index::IndexMut"
            "index_mut"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.path "multisig::AccountId";
                    Ty.path "alloc::alloc::Global"
                  ];
              (* Idx *) Ty.path "usize"
            ] in
        let* α1 := M.read self in
        let* α2 := M.read owner_index in
        let* α3 :=
          M.call α0 [ M.get_struct_record α1 "owners"; M.rust_cast α2 ] in
        let* α4 := M.read new_owner in
        M.assign α3 α4 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "multisig::AccountId"; Ty.tuple [] ])
            "remove" in
        let* α1 := M.read self in
        let* α2 := M.read old_owner in
        let* α3 := M.call α0 [ M.get_struct_record α1 "is_owner"; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "multisig::AccountId"; Ty.tuple [] ])
            "insert" in
        let* α1 := M.read self in
        let* α2 := M.read new_owner in
        let* α3 :=
          M.call α0 [ M.get_struct_record α1 "is_owner"; α2; Value.Tuple [] ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "clean_owner_confirmations" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1; old_owner ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "emit_event" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read old_owner in
        let* α6 :=
          M.call
            α0
            [
              α4;
              Value.StructTuple
                "multisig::Event::OwnerRemoval"
                [ Value.StructRecord "multisig::OwnerRemoval" [ ("owner", α5) ]
                ]
            ] in
        M.alloc α6 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "emit_event" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read new_owner in
        let* α6 :=
          M.call
            α0
            [
              α4;
              Value.StructTuple
                "multisig::Event::OwnerAddition"
                [ Value.StructRecord "multisig::OwnerAddition" [ ("owner", α5) ]
                ]
            ] in
        M.alloc α6 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_replace_owner :
    M.IsAssociatedFunction Self "replace_owner" replace_owner [].
  
  (*
      pub fn change_requirement(&mut self, new_requirement: u32) {
          self.ensure_from_wallet();
          ensure_requirement_is_valid(self.owners.len() as u32, new_requirement);
          self.requirement = new_requirement;
          self.env()
              .emit_event(Event::RequirementChange(RequirementChange {
                  new_requirement,
              }));
      }
  *)
  Definition change_requirement (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; new_requirement ] =>
      let* self := M.alloc self in
      let* new_requirement := M.alloc new_requirement in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_from_wallet" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.get_function "multisig::ensure_requirement_is_valid" in
        let* α1 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global" ])
            "len" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ M.get_struct_record α2 "owners" ] in
        let* α4 := M.read new_requirement in
        let* α5 := M.call α0 [ M.rust_cast α3; α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read new_requirement in
        M.assign (M.get_struct_record α0 "requirement") α1 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "emit_event" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read new_requirement in
        let* α6 :=
          M.call
            α0
            [
              α4;
              Value.StructTuple
                "multisig::Event::RequirementChange"
                [
                  Value.StructRecord
                    "multisig::RequirementChange"
                    [ ("new_requirement", α5) ]
                ]
            ] in
        M.alloc α6 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_change_requirement :
    M.IsAssociatedFunction Self "change_requirement" change_requirement [].
  
  (*
      fn confirm_by_caller(
          &mut self,
          confirmer: AccountId,
          transaction: TransactionId,
      ) -> ConfirmationStatus {
          let mut count = self
              .confirmation_count
              .get(&transaction)
              .unwrap_or(0 as u32);
          let key = (transaction, confirmer);
          let new_confirmation = !self.confirmations.contains(&key);
          if new_confirmation {
              count += 1;
              self.confirmations.insert(key, ());
              self.confirmation_count.insert(transaction, count);
          }
          let status = {
              if count >= self.requirement {
                  ConfirmationStatus::Confirmed
              } else {
                  ConfirmationStatus::ConfirmationsNeeded(self.requirement - count)
              }
          };
          if new_confirmation {
              self.env().emit_event(Event::Confirmation(Confirmation {
                  transaction,
                  from: confirmer,
                  status,
              }));
          }
          status
      }
  *)
  Definition confirm_by_caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; confirmer; transaction ] =>
      let* self := M.alloc self in
      let* confirmer := M.alloc confirmer in
      let* transaction := M.alloc transaction in
      let* count :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ])
            "unwrap_or" in
        let* α1 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "u32"; Ty.path "u32" ])
            "get" in
        let* α2 := M.read self in
        let* α3 :=
          M.call
            α1
            [ M.get_struct_record α2 "confirmation_count"; transaction ] in
        let* α4 := M.alloc (Value.Integer Integer.U32 0) in
        let* α5 := M.read (M.use α4) in
        let* α6 := M.call α0 [ α3; α5 ] in
        M.alloc α6 in
      let* key :=
        let* α0 := M.read transaction in
        let* α1 := M.read confirmer in
        M.alloc (Value.Tuple [ α0; α1 ]) in
      let* new_confirmation :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [
                Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                Ty.tuple []
              ])
            "contains" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ M.get_struct_record α1 "confirmations"; key ] in
        M.alloc (UnOp.not α2) in
      let* _ :=
        let* α0 := M.read (M.use new_confirmation) in
        if Value.is_true α0 then
          let* _ :=
            let β := count in
            let* α0 := M.read β in
            let* α1 := BinOp.Panic.add α0 (Value.Integer Integer.U32 1) in
            M.assign β α1 in
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply
                  (Ty.path "multisig::Mapping")
                  [
                    Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                    Ty.tuple []
                  ])
                "insert" in
            let* α1 := M.read self in
            let* α2 := M.read key in
            let* α3 :=
              M.call
                α0
                [ M.get_struct_record α1 "confirmations"; α2; Value.Tuple []
                ] in
            M.alloc α3 in
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply
                  (Ty.path "multisig::Mapping")
                  [ Ty.path "u32"; Ty.path "u32" ])
                "insert" in
            let* α1 := M.read self in
            let* α2 := M.read transaction in
            let* α3 := M.read count in
            let* α4 :=
              M.call
                α0
                [ M.get_struct_record α1 "confirmation_count"; α2; α3 ] in
            M.alloc α4 in
          M.alloc (Value.Tuple [])
        else
          M.alloc (Value.Tuple []) in
      let* status :=
        let* α0 := M.read count in
        let* α1 := M.read self in
        let* α2 := M.read (M.get_struct_record α1 "requirement") in
        let* α3 := M.alloc (BinOp.Pure.ge α0 α2) in
        let* α4 := M.read (M.use α3) in
        let* α5 :=
          if Value.is_true α4 then
            M.alloc
              (Value.StructTuple "multisig::ConfirmationStatus::Confirmed" [])
          else
            let* α0 := M.read self in
            let* α1 := M.read (M.get_struct_record α0 "requirement") in
            let* α2 := M.read count in
            let* α3 := BinOp.Panic.sub α1 α2 in
            M.alloc
              (Value.StructTuple
                "multisig::ConfirmationStatus::ConfirmationsNeeded"
                [ α3 ]) in
        M.copy α5 in
      let* _ :=
        let* α0 := M.read (M.use new_confirmation) in
        if Value.is_true α0 then
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.path "multisig::Env")
                "emit_event" in
            let* α1 :=
              M.get_associated_function (Ty.path "multisig::Multisig") "env" in
            let* α2 := M.read self in
            let* α3 := M.call α1 [ α2 ] in
            let* α4 := M.alloc α3 in
            let* α5 := M.read transaction in
            let* α6 := M.read confirmer in
            let* α7 := M.read status in
            let* α8 :=
              M.call
                α0
                [
                  α4;
                  Value.StructTuple
                    "multisig::Event::Confirmation"
                    [
                      Value.StructRecord
                        "multisig::Confirmation"
                        [ ("transaction", α5); ("from", α6); ("status", α7) ]
                    ]
                ] in
            M.alloc α8 in
          M.alloc (Value.Tuple [])
        else
          M.alloc (Value.Tuple []) in
      M.read status
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_confirm_by_caller :
    M.IsAssociatedFunction Self "confirm_by_caller" confirm_by_caller [].
  
  (*
      pub fn submit_transaction(
          &mut self,
          transaction: Transaction,
      ) -> (TransactionId, ConfirmationStatus) {
          self.ensure_caller_is_owner();
          let trans_id = self.transaction_list.next_id;
          self.transaction_list.next_id = trans_id
              .checked_add(1 as u32)
              .expect("Transaction ids exhausted.");
          self.transactions.insert(trans_id, transaction);
          self.transaction_list.transactions.push(trans_id);
          self.env().emit_event(Event::Submission(Submission {
              transaction: trans_id,
          }));
          (
              trans_id,
              self.confirm_by_caller(self.env().caller(), trans_id),
          )
      }
  *)
  Definition submit_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; transaction ] =>
      let* self := M.alloc self in
      let* transaction := M.alloc transaction in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_caller_is_owner" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* trans_id :=
        let* α0 := M.read self in
        M.copy
          (M.get_struct_record
            (M.get_struct_record α0 "transaction_list")
            "next_id") in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.get_associated_function
            (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ])
            "expect" in
        let* α2 := M.get_associated_function (Ty.path "u32") "checked_add" in
        let* α3 := M.read trans_id in
        let* α4 := M.alloc (Value.Integer Integer.U32 1) in
        let* α5 := M.read (M.use α4) in
        let* α6 := M.call α2 [ α3; α5 ] in
        let* α7 := M.read (mk_str "Transaction ids exhausted.") in
        let* α8 := M.call α1 [ α6; α7 ] in
        M.assign
          (M.get_struct_record
            (M.get_struct_record α0 "transaction_list")
            "next_id")
          α8 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "u32"; Ty.path "multisig::Transaction" ])
            "insert" in
        let* α1 := M.read self in
        let* α2 := M.read trans_id in
        let* α3 := M.read transaction in
        let* α4 :=
          M.call α0 [ M.get_struct_record α1 "transactions"; α2; α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ])
            "push" in
        let* α1 := M.read self in
        let* α2 := M.read trans_id in
        let* α3 :=
          M.call
            α0
            [
              M.get_struct_record
                (M.get_struct_record α1 "transaction_list")
                "transactions";
              α2
            ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "emit_event" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read trans_id in
        let* α6 :=
          M.call
            α0
            [
              α4;
              Value.StructTuple
                "multisig::Event::Submission"
                [
                  Value.StructRecord
                    "multisig::Submission"
                    [ ("transaction", α5) ]
                ]
            ] in
        M.alloc α6 in
      let* α0 := M.read trans_id in
      let* α1 :=
        M.get_associated_function
          (Ty.path "multisig::Multisig")
          "confirm_by_caller" in
      let* α2 := M.read self in
      let* α3 := M.get_associated_function (Ty.path "multisig::Env") "caller" in
      let* α4 :=
        M.get_associated_function (Ty.path "multisig::Multisig") "env" in
      let* α5 := M.read self in
      let* α6 := M.call α4 [ α5 ] in
      let* α7 := M.alloc α6 in
      let* α8 := M.call α3 [ α7 ] in
      let* α9 := M.read trans_id in
      let* α10 := M.call α1 [ α2; α8; α9 ] in
      let* α0 := M.alloc (Value.Tuple [ α0; α10 ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_submit_transaction :
    M.IsAssociatedFunction Self "submit_transaction" submit_transaction [].
  
  (*
      fn take_transaction(&mut self, trans_id: TransactionId) -> Option<Transaction> {
          let transaction = self.transactions.get(&trans_id);
          if transaction.is_some() {
              self.transactions.remove(trans_id);
              let pos = self
                  .transaction_list
                  .transactions
                  .iter()
                  .position(|t| t == &trans_id)
                  .expect("The transaction exists hence it must also be in the list.");
              self.transaction_list.transactions.swap_remove(pos);
              for owner in self.owners.iter() {
                  self.confirmations.remove((trans_id, *owner));
              }
              self.confirmation_count.remove(trans_id);
          }
          transaction
      }
  *)
  Definition take_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* transaction :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "multisig::Mapping")
              [ Ty.path "u32"; Ty.path "multisig::Transaction" ])
            "get" in
        let* α1 := M.read self in
        let* α2 :=
          M.call α0 [ M.get_struct_record α1 "transactions"; trans_id ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "multisig::Transaction" ])
            "is_some" in
        let* α1 := M.call α0 [ transaction ] in
        let* α2 := M.alloc α1 in
        let* α3 := M.read (M.use α2) in
        if Value.is_true α3 then
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply
                  (Ty.path "multisig::Mapping")
                  [ Ty.path "u32"; Ty.path "multisig::Transaction" ])
                "remove" in
            let* α1 := M.read self in
            let* α2 := M.read trans_id in
            let* α3 :=
              M.call α0 [ M.get_struct_record α1 "transactions"; α2 ] in
            M.alloc α3 in
          let* pos :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ])
                "expect" in
            let* α1 :=
              M.get_trait_method
                "core::iter::traits::iterator::Iterator"
                "position"
                [
                  (* Self *)
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      [ Ty.path "u32" ];
                  (* P *)
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ] ]
                      (Ty.path "bool")
                ] in
            let* α2 :=
              M.get_associated_function
                (Ty.apply (Ty.path "slice") [ Ty.path "u32" ])
                "iter" in
            let* α3 :=
              M.get_trait_method
                "core::ops::deref::Deref"
                "deref"
                [
                  (* Self *)
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]
                ] in
            let* α4 := M.read self in
            let* α5 :=
              M.call
                α3
                [
                  M.get_struct_record
                    (M.get_struct_record α4 "transaction_list")
                    "transactions"
                ] in
            let* α6 := M.call α2 [ α5 ] in
            let* α7 := M.alloc α6 in
            let* α8 :=
              M.call
                α1
                [
                  α7;
                  fun (α0 : Ty.apply (Ty.path "&") [ Ty.path "u32" ]) =>
                    (let* α0 := M.alloc α0 in
                    match_operator
                      α0
                      (Value.Array
                        [
                          fun γ =>
                            (let* t := M.copy γ in
                            let* α0 :=
                              M.get_trait_method
                                "core::cmp::PartialEq"
                                "eq"
                                [
                                  (* Self *)
                                    Ty.apply (Ty.path "&") [ Ty.path "u32" ];
                                  (* Rhs *)
                                    Ty.apply (Ty.path "&") [ Ty.path "u32" ]
                                ] in
                            let* α1 := M.alloc trans_id in
                            M.call α0 [ t; α1 ])
                        ]))
                ] in
            let* α9 :=
              M.read
                (mk_str
                  "The transaction exists hence it must also be in the list.") in
            let* α10 := M.call α0 [ α8; α9 ] in
            M.alloc α10 in
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ])
                "swap_remove" in
            let* α1 := M.read self in
            let* α2 := M.read pos in
            let* α3 :=
              M.call
                α0
                [
                  M.get_struct_record
                    (M.get_struct_record α1 "transaction_list")
                    "transactions";
                  α2
                ] in
            M.alloc α3 in
          let* _ :=
            let* α0 :=
              M.get_trait_method
                "core::iter::traits::collect::IntoIterator"
                "into_iter"
                [
                  (* Self *)
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      [ Ty.path "multisig::AccountId" ]
                ] in
            let* α1 :=
              M.get_associated_function
                (Ty.apply (Ty.path "slice") [ Ty.path "multisig::AccountId" ])
                "iter" in
            let* α2 :=
              M.get_trait_method
                "core::ops::deref::Deref"
                "deref"
                [
                  (* Self *)
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.path "multisig::AccountId";
                        Ty.path "alloc::alloc::Global"
                      ]
                ] in
            let* α3 := M.read self in
            let* α4 := M.call α2 [ M.get_struct_record α3 "owners" ] in
            let* α5 := M.call α1 [ α4 ] in
            let* α6 := M.call α0 [ α5 ] in
            let* α7 := M.alloc α6 in
            let* α8 :=
              match_operator
                α7
                (Value.Array
                  [
                    fun γ =>
                      (let* iter := M.copy γ in
                      M.loop
                        (let* _ :=
                          let* α0 :=
                            M.get_trait_method
                              "core::iter::traits::iterator::Iterator"
                              "next"
                              [
                                (* Self *)
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [ Ty.path "multisig::AccountId" ]
                              ] in
                          let* α1 := M.call α0 [ iter ] in
                          let* α2 := M.alloc α1 in
                          match_operator
                            α2
                            (Value.Array
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.option.Option.None =>
                                    let* α0 := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 := M.never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.option.Option.Some _ =>
                                    let* γ0_0 :=
                                      let* α0 :=
                                        M.var
                                          "core::option::Option::Get_Some_0" in
                                      M.pure (α0 γ) in
                                    let* owner := M.copy γ0_0 in
                                    let* _ :=
                                      let* α0 :=
                                        M.get_associated_function
                                          (Ty.apply
                                            (Ty.path "multisig::Mapping")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "u32";
                                                  Ty.path "multisig::AccountId"
                                                ];
                                              Ty.tuple []
                                            ])
                                          "remove" in
                                      let* α1 := M.read self in
                                      let* α2 := M.read trans_id in
                                      let* α3 := M.read owner in
                                      let* α4 := M.read α3 in
                                      let* α5 :=
                                        M.call
                                          α0
                                          [
                                            M.get_struct_record
                                              α1
                                              "confirmations";
                                            Value.Tuple [ α2; α4 ]
                                          ] in
                                      M.alloc α5 in
                                    M.alloc (Value.Tuple [])
                                  | _ => M.break_match
                                  end)
                              ]) in
                        M.alloc (Value.Tuple [])))
                  ]) in
            M.pure (M.use α8) in
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply
                  (Ty.path "multisig::Mapping")
                  [ Ty.path "u32"; Ty.path "u32" ])
                "remove" in
            let* α1 := M.read self in
            let* α2 := M.read trans_id in
            let* α3 :=
              M.call α0 [ M.get_struct_record α1 "confirmation_count"; α2 ] in
            M.alloc α3 in
          M.alloc (Value.Tuple [])
        else
          M.alloc (Value.Tuple []) in
      M.read transaction
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_take_transaction :
    M.IsAssociatedFunction Self "take_transaction" take_transaction [].
  
  (*
      pub fn cancel_transaction(&mut self, trans_id: TransactionId) {
          self.ensure_from_wallet();
          if self.take_transaction(trans_id).is_some() {
              self.env().emit_event(Event::Cancellation(Cancellation {
                  transaction: trans_id,
              }));
          }
      }
  *)
  Definition cancel_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_from_wallet" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "core::option::Option")
            [ Ty.path "multisig::Transaction" ])
          "is_some" in
      let* α1 :=
        M.get_associated_function
          (Ty.path "multisig::Multisig")
          "take_transaction" in
      let* α2 := M.read self in
      let* α3 := M.read trans_id in
      let* α4 := M.call α1 [ α2; α3 ] in
      let* α5 := M.alloc α4 in
      let* α6 := M.call α0 [ α5 ] in
      let* α7 := M.alloc α6 in
      let* α8 := M.read (M.use α7) in
      let* α0 :=
        if Value.is_true α8 then
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.path "multisig::Env")
                "emit_event" in
            let* α1 :=
              M.get_associated_function (Ty.path "multisig::Multisig") "env" in
            let* α2 := M.read self in
            let* α3 := M.call α1 [ α2 ] in
            let* α4 := M.alloc α3 in
            let* α5 := M.read trans_id in
            let* α6 :=
              M.call
                α0
                [
                  α4;
                  Value.StructTuple
                    "multisig::Event::Cancellation"
                    [
                      Value.StructRecord
                        "multisig::Cancellation"
                        [ ("transaction", α5) ]
                    ]
                ] in
            M.alloc α6 in
          M.alloc (Value.Tuple [])
        else
          M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_cancel_transaction :
    M.IsAssociatedFunction Self "cancel_transaction" cancel_transaction [].
  
  (*
      pub fn confirm_transaction(&mut self, trans_id: TransactionId) -> ConfirmationStatus {
          self.ensure_caller_is_owner();
          self.ensure_transaction_exists(trans_id);
          self.confirm_by_caller(self.env().caller(), trans_id)
      }
  *)
  Definition confirm_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_caller_is_owner" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_transaction_exists" in
        let* α1 := M.read self in
        let* α2 := M.read trans_id in
        let* α3 := M.call α0 [ α1; α2 ] in
        M.alloc α3 in
      let* α0 :=
        M.get_associated_function
          (Ty.path "multisig::Multisig")
          "confirm_by_caller" in
      let* α1 := M.read self in
      let* α2 := M.get_associated_function (Ty.path "multisig::Env") "caller" in
      let* α3 :=
        M.get_associated_function (Ty.path "multisig::Multisig") "env" in
      let* α4 := M.read self in
      let* α5 := M.call α3 [ α4 ] in
      let* α6 := M.alloc α5 in
      let* α7 := M.call α2 [ α6 ] in
      let* α8 := M.read trans_id in
      let* α9 := M.call α0 [ α1; α7; α8 ] in
      let* α0 := M.alloc α9 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_confirm_transaction :
    M.IsAssociatedFunction Self "confirm_transaction" confirm_transaction [].
  
  (*
      pub fn revoke_confirmation(&mut self, trans_id: TransactionId) {
          self.ensure_caller_is_owner();
          let caller = self.env().caller();
          if self.confirmations.contains(&(trans_id, caller)) {
              self.confirmations.remove((trans_id, caller));
              let mut confirmation_count = self
                  .confirmation_count
                  .get(&trans_id)
                  .expect("There is a entry in `self.confirmations`. Hence a count must exit.");
              // Will not underflow as there is at least one confirmation
              confirmation_count -= 1;
              self.confirmation_count.insert(trans_id, confirmation_count);
              self.env().emit_event(Event::Revocation(Revocation {
                  transaction: trans_id,
                  from: caller,
              }));
          }
      }
  *)
  Definition revoke_confirmation (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_caller_is_owner" in
        let* α1 := M.read self in
        let* α2 := M.call α0 [ α1 ] in
        M.alloc α2 in
      let* caller :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "caller" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "multisig::Mapping")
            [
              Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
              Ty.tuple []
            ])
          "contains" in
      let* α1 := M.read self in
      let* α2 := M.read trans_id in
      let* α3 := M.read caller in
      let* α4 := M.alloc (Value.Tuple [ α2; α3 ]) in
      let* α5 := M.call α0 [ M.get_struct_record α1 "confirmations"; α4 ] in
      let* α6 := M.alloc α5 in
      let* α7 := M.read (M.use α6) in
      let* α0 :=
        if Value.is_true α7 then
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply
                  (Ty.path "multisig::Mapping")
                  [
                    Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ];
                    Ty.tuple []
                  ])
                "remove" in
            let* α1 := M.read self in
            let* α2 := M.read trans_id in
            let* α3 := M.read caller in
            let* α4 :=
              M.call
                α0
                [ M.get_struct_record α1 "confirmations"; Value.Tuple [ α2; α3 ]
                ] in
            M.alloc α4 in
          let* confirmation_count :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ])
                "expect" in
            let* α1 :=
              M.get_associated_function
                (Ty.apply
                  (Ty.path "multisig::Mapping")
                  [ Ty.path "u32"; Ty.path "u32" ])
                "get" in
            let* α2 := M.read self in
            let* α3 :=
              M.call
                α1
                [ M.get_struct_record α2 "confirmation_count"; trans_id ] in
            let* α4 :=
              M.read
                (mk_str
                  "There is a entry in `self.confirmations`. Hence a count must exit.") in
            let* α5 := M.call α0 [ α3; α4 ] in
            M.alloc α5 in
          let* _ :=
            let β := confirmation_count in
            let* α0 := M.read β in
            let* α1 := BinOp.Panic.sub α0 (Value.Integer Integer.U32 1) in
            M.assign β α1 in
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.apply
                  (Ty.path "multisig::Mapping")
                  [ Ty.path "u32"; Ty.path "u32" ])
                "insert" in
            let* α1 := M.read self in
            let* α2 := M.read trans_id in
            let* α3 := M.read confirmation_count in
            let* α4 :=
              M.call
                α0
                [ M.get_struct_record α1 "confirmation_count"; α2; α3 ] in
            M.alloc α4 in
          let* _ :=
            let* α0 :=
              M.get_associated_function
                (Ty.path "multisig::Env")
                "emit_event" in
            let* α1 :=
              M.get_associated_function (Ty.path "multisig::Multisig") "env" in
            let* α2 := M.read self in
            let* α3 := M.call α1 [ α2 ] in
            let* α4 := M.alloc α3 in
            let* α5 := M.read trans_id in
            let* α6 := M.read caller in
            let* α7 :=
              M.call
                α0
                [
                  α4;
                  Value.StructTuple
                    "multisig::Event::Revocation"
                    [
                      Value.StructRecord
                        "multisig::Revocation"
                        [ ("transaction", α5); ("from", α6) ]
                    ]
                ] in
            M.alloc α7 in
          M.alloc (Value.Tuple [])
        else
          M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_revoke_confirmation :
    M.IsAssociatedFunction Self "revoke_confirmation" revoke_confirmation [].
  
  (*
      pub fn invoke_transaction(&mut self, trans_id: TransactionId) -> Result<(), Error> {
          self.ensure_confirmed(trans_id);
          let t = self.take_transaction(trans_id).expect(WRONG_TRANSACTION_ID);
          assert!(self.env().transferred_value() == t.transferred_value);
          // let result = build_call()
          //     .call(t.callee)
          //     .gas_limit(t.gas_limit)
          //     .transferred_value(t.transferred_value)
          //     .call_flags(CallFlags::default().set_allow_reentry(t.allow_reentry))
          //     .exec_input(ExecutionInput::new(t.selector.into()).push_arg(CallInput(&t.input)))
          //     .returns::<()>()
          //     .try_invoke();
          let result: Result<Result<Vec<u8>, ()>, ()> = todo!();
  
          let result = match result {
              Ok(Ok(_)) => Ok(()),
              _ => Err(Error::TransactionFailed),
          };
  
          self.env().emit_event(Event::Execution(Execution {
              transaction: trans_id,
              result: result.map(|_| None),
          }));
          result
      }
  *)
  Definition invoke_transaction (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; trans_id ] =>
      let* self := M.alloc self in
      let* trans_id := M.alloc trans_id in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "ensure_confirmed" in
        let* α1 := M.read self in
        let* α2 := M.read trans_id in
        let* α3 := M.call α0 [ α1; α2 ] in
        M.alloc α3 in
      let* t :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "multisig::Transaction" ])
            "expect" in
        let* α1 :=
          M.get_associated_function
            (Ty.path "multisig::Multisig")
            "take_transaction" in
        let* α2 := M.read self in
        let* α3 := M.read trans_id in
        let* α4 := M.call α1 [ α2; α3 ] in
        let* α5 := M.var "multisig::WRONG_TRANSACTION_ID" in
        let* α6 := M.read α5 in
        let* α7 := M.call α0 [ α4; α6 ] in
        M.alloc α7 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.path "multisig::Env")
            "transferred_value" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call α0 [ α4 ] in
        let* α6 := M.read (M.get_struct_record t "transferred_value") in
        let* α7 := M.alloc (UnOp.not (BinOp.Pure.eq α5 α6)) in
        let* α8 := M.read (M.use α7) in
        if Value.is_true α8 then
          let* α0 := M.get_function "core::panicking::panic" in
          let* α1 :=
            M.read
              (mk_str
                "assertion failed: self.env().transferred_value() == t.transferred_value") in
          let* α2 := M.call α0 [ α1 ] in
          let* α3 := M.never_to_any α2 in
          M.alloc α3
        else
          M.alloc (Value.Tuple []) in
      let* result :=
        let* α0 := M.get_function "core::panicking::panic" in
        let* α1 := M.read (mk_str "not yet implemented") in
        let* α2 := M.call α0 [ α1 ] in
        let* α3 := M.never_to_any α2 in
        M.alloc α3 in
      let* result :=
        let* α0 :=
          match_operator
            result
            (Value.Array
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.result.Result.Ok _ =>
                    let* γ0_0 :=
                      let* α0 := M.var "core::result::Result::Get_Ok_0" in
                      M.pure (α0 γ) in
                    let* α0 := M.read γ0_0 in
                    match α0 with
                    | core.result.Result.Ok _ =>
                      let* γ1_0 :=
                        let* α0 := M.var "core::result::Result::Get_Ok_0" in
                        M.pure (α0 γ0_0) in
                      M.alloc
                        (Value.StructTuple
                          "core::result::Result::Ok"
                          [ Value.Tuple [] ])
                    | _ => M.break_match
                    end
                  | _ => M.break_match
                  end);
                fun γ =>
                  (M.alloc
                    (Value.StructTuple
                      "core::result::Result::Err"
                      [
                        Value.StructTuple
                          "multisig::Error::TransactionFailed"
                          []
                      ]))
              ]) in
        M.copy α0 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "multisig::Env") "emit_event" in
        let* α1 :=
          M.get_associated_function (Ty.path "multisig::Multisig") "env" in
        let* α2 := M.read self in
        let* α3 := M.call α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read trans_id in
        let* α6 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "multisig::Error" ])
            "map" in
        let* α7 := M.read result in
        let* α8 :=
          M.call
            α6
            [
              α7;
              fun (α0 : Ty.tuple []) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  (Value.Array
                    [
                      fun γ =>
                        (M.pure
                          (Value.StructTuple "core::option::Option::None" []))
                    ]))
            ] in
        let* α9 :=
          M.call
            α0
            [
              α4;
              Value.StructTuple
                "multisig::Event::Execution"
                [
                  Value.StructRecord
                    "multisig::Execution"
                    [ ("transaction", α5); ("result", α8) ]
                ]
            ] in
        M.alloc α9 in
      M.read result
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_invoke_transaction :
    M.IsAssociatedFunction Self "invoke_transaction" invoke_transaction [].
  
  (*
      pub fn eval_transaction(&mut self, trans_id: TransactionId) -> Result<Vec<u8>, Error> {
          self.ensure_confirmed(trans_id);
          let t = self.take_transaction(trans_id).expect(WRONG_TRANSACTION_ID);
          // let result = build_call()
          //     .call(t.callee)
          //     .gas_limit(t.gas_limit)
          //     .transferred_value(t.transferred_value)
          //     .call_flags(CallFlags::default().set_allow_reentry(t.allow_reentry))
          //     .exec_input(ExecutionInput::new(t.selector.into()).push_arg(CallInput(&t.input)))
          //     .returns::<Vec<u8>>()
          //     .try_invoke();
          let result: Result<Result<Vec<u8>, ()>, ()> = todo!();
  
          let result = match result {
              Ok(Ok(v)) => Ok(v),
              _ => Err(Error::TransactionFailed),
          };
  
          self.env().emit_event(Event::Execution(Execution {
              transaction: trans_id,
              result: result.clone().map(Some),
          }));
          result
      }
  *)
  Parameter eval_transaction : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_eval_transaction :
    M.IsAssociatedFunction Self "eval_transaction" eval_transaction [].
End Impl_multisig_Multisig.
