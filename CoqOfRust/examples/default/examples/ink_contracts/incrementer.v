(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Incrementer *)

Module Impl_incrementer_Incrementer.
  Definition Self : Ty.t := Ty.path "incrementer::Incrementer".
  
  (*
      pub fn new(init_value: i32) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ init_value ] =>
      let* init_value := M.alloc init_value in
      let* α0 := M.read init_value in
      M.pure (Value.StructRecord "incrementer::Incrementer" [ ("value", α0) ])
    | _, _ => M.impossible
    end.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "i32" ] in
      let* α1 := M.call α0 [] in
      M.call (Ty.path "incrementer::Incrementer")::["new"] [ α1 ]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn inc(&mut self, by: i32) {
          self.value += by;
      }
  *)
  Definition inc (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; by_ ] =>
      let* self := M.alloc self in
      let* by_ := M.alloc by_ in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure ((M.var "incrementer::Incrementer::Get_value") (deref α0)) in
        let* α0 := M.read β in
        let* α1 := M.read by_ in
        let* α2 := (M.var "BinOp::Panic::add") α0 α1 in
        (M.var "assign") β α2 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn get(&self) -> i32 {
          self.value
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read ((M.var "incrementer::Incrementer::Get_value") (deref α0))
    | _, _ => M.impossible
    end.
End Impl_incrementer_Incrementer.
