(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_contract_terminate_AccountId.
Section Impl_core_default_Default_for_contract_terminate_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "contract_terminate::AccountId") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.function [] (Ty.path "u128") :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ℐ))) in
      let* α1 : Ty.path "u128" := M.call α0 in
      M.pure (contract_terminate.AccountId.Build_t α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_contract_terminate_AccountId.
End Impl_core_default_Default_for_contract_terminate_AccountId.

Module  Impl_core_clone_Clone_for_contract_terminate_AccountId.
Section Impl_core_clone_Clone_for_contract_terminate_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "contract_terminate::AccountId") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.apply (Ty.path "contract_terminate::AccountId") [] :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun γ =>
              (let* α0 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "contract_terminate::AccountId") []] :=
                M.read self in
              M.pure (deref α0)) :
              Ty.apply (Ty.path "contract_terminate::AccountId") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_contract_terminate_AccountId.
End Impl_core_clone_Clone_for_contract_terminate_AccountId.

Module  Impl_core_marker_Copy_for_contract_terminate_AccountId.
Section Impl_core_marker_Copy_for_contract_terminate_AccountId.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "contract_terminate::AccountId") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_contract_terminate_AccountId.
End Impl_core_marker_Copy_for_contract_terminate_AccountId.



Module  Impl_contract_terminate_Env.
Section Impl_contract_terminate_Env.
  Definition Self : Set := Ty.apply (Ty.path "contract_terminate::Env") [].
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "contract_terminate::Env") []] :=
        M.read self in
      M.read (contract_terminate.Env.Get_caller (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_caller : Instance.t := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn terminate_contract(&self, _account: AccountId) {
          unimplemented!()
      }
  *)
  Definition terminate_contract (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; _account] =>
      let* self := M.alloc self in
      let* _account := M.alloc _account in
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_terminate_contract : Instance.t := {
    Notations.double_colon := terminate_contract;
  }.
End Impl_contract_terminate_Env.
End Impl_contract_terminate_Env.



Module  Impl_contract_terminate_JustTerminate.
Section Impl_contract_terminate_JustTerminate.
  Definition Self : Set :=
    Ty.apply (Ty.path "contract_terminate::JustTerminate") [].
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* α1 : Ty.path "never" := M.call (core.panicking.panic α0) in
      never_to_any α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.call
        (Ty.apply
            (Ty.path "contract_terminate::JustTerminate")
            [])::["init_env"]
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] => M.pure contract_terminate.JustTerminate.Build
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn terminate_me(&mut self) {
          self.env().terminate_contract(self.env().caller());
      }
  *)
  Definition terminate_me (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ : Ty.tuple :=
        let* α0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "contract_terminate::JustTerminate") []] :=
          M.read self in
        let* α1 : Ty.apply (Ty.path "contract_terminate::Env") [] :=
          M.call
            ((Ty.apply
                  (Ty.path "contract_terminate::JustTerminate")
                  [])::["env"]
              (borrow (deref α0))) in
        let* α2 : Ty.apply (Ty.path "contract_terminate::Env") [] :=
          M.alloc α1 in
        let* α3 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "contract_terminate::JustTerminate") []] :=
          M.read self in
        let* α4 : Ty.apply (Ty.path "contract_terminate::Env") [] :=
          M.call
            ((Ty.apply
                  (Ty.path "contract_terminate::JustTerminate")
                  [])::["env"]
              (borrow (deref α3))) in
        let* α5 : Ty.apply (Ty.path "contract_terminate::Env") [] :=
          M.alloc α4 in
        let* α6 : Ty.apply (Ty.path "contract_terminate::AccountId") [] :=
          M.call
            ((Ty.apply (Ty.path "contract_terminate::Env") [])::["caller"]
              (borrow α5)) in
        let* α7 : Ty.tuple :=
          M.call
            ((Ty.apply
                  (Ty.path "contract_terminate::Env")
                  [])::["terminate_contract"]
              (borrow α2)
              α6) in
        M.alloc α7 in
      let* α0 : Ty.path "unit" := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_terminate_me : Instance.t := {
    Notations.double_colon := terminate_me;
  }.
End Impl_contract_terminate_JustTerminate.
End Impl_contract_terminate_JustTerminate.
