(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Error *)

(*
fn set_code_hash<E>(code_hash: &E) -> Result<(), Error> {
    unimplemented!()
}
*)
Definition set_code_hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [ E ], [ code_hash ] =>
    let* code_hash := M.alloc code_hash in
    let* α0 := M.var "core::panicking::panic" in
    let* α1 := M.read (mk_str "not implemented") in
    let* α2 := M.call α0 [ α1 ] in
    never_to_any α2
  | _, _ => M.impossible
  end.

(* Enum Incrementer *)

Module Impl_core_default_Default_for_set_code_hash_Incrementer.
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u32" ] in
      let* α1 := M.call α0 [] in
      M.pure (Value.StructRecord "set_code_hash::Incrementer" [ ("count", α1) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Self *) (Ty.path "set_code_hash::Incrementer")
      []
      [ ("default", InstanceField.Method default []) ].
End Impl_core_default_Default_for_set_code_hash_Incrementer.

Module Impl_set_code_hash_Incrementer.
  Definition Self : Ty.t := Ty.path "set_code_hash::Incrementer".
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "set_code_hash::Incrementer" ] in
      M.call α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new [].
  
  (*
      pub fn inc(&mut self) {
          self.count += 1;
          println!(
              "The new count is {}, it was modified using the original contract code.",
              self.count
          );
      }
  *)
  Definition inc (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* β :=
          let* α0 := M.var "set_code_hash::Incrementer::Get_count" in
          let* α1 := M.read self in
          M.pure (α0 (deref α1)) in
        let* α0 := M.var "assign" in
        let* α1 := M.var "BinOp::Panic::add" in
        let* α2 := M.read β in
        let* α3 := α1 α2 ((Integer.of_Z 1) : Ty.path "u32") in
        α0 β α3 in
      let* _ :=
        let* _ :=
          let* α0 := M.var "std::io::stdio::_print" in
          let* α1 := M.read (mk_str "The new count is ") in
          let* α2 :=
            M.read
              (mk_str ", it was modified using the original contract code.
") in
          let* α3 := M.alloc [ α1; α2 ] in
          let* α4 := M.var "set_code_hash::Incrementer::Get_count" in
          let* α5 := M.read self in
          let* α6 :=
            M.call
              (Ty.path "core::fmt::rt::Argument")::["new_display"]
              [ borrow (α4 (deref α5)) ] in
          let* α7 := M.alloc [ α6 ] in
          let* α8 :=
            M.call
              (Ty.path "core::fmt::Arguments")::["new_v1"]
              [
                pointer_coercion "Unsize" (borrow α3);
                pointer_coercion "Unsize" (borrow α7)
              ] in
          let* α9 := M.call α0 [ α8 ] in
          M.alloc α9 in
        M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_inc : M.IsAssociatedFunction Self "inc" inc [].
  
  (*
      pub fn get(&self) -> u32 {
          self.count
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.var "set_code_hash::Incrementer::Get_count" in
      let* α1 := M.read self in
      M.read (α0 (deref α1))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get : M.IsAssociatedFunction Self "get" get [].
  
  (*
      pub fn set_code(&mut self, code_hash: [u8; 32]) {
          set_code_hash(&code_hash).unwrap_or_else(|err| {
              panic!("Failed to `set_code_hash` to {code_hash:?} due to {err:?}")
          });
          println!("Switched code hash to {:?}.", code_hash);
      }
  *)
  Definition set_code (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; code_hash ] =>
      let* self := M.alloc self in
      let* code_hash := M.alloc code_hash in
      let* _ :=
        let* α0 := M.var "set_code_hash::set_code_hash" in
        let* α1 := M.call α0 [ borrow code_hash ] in
        let* α2 :=
          M.call
            (Ty.apply
                (Ty.path "core::result::Result")
                [ Ty.tuple []; Ty.path "set_code_hash::Error"
                ])::["unwrap_or_else"]
            [
              α1;
              fun (α0 : Ty.path "set_code_hash::Error") =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  [
                    fun γ =>
                      (let* err := M.copy γ in
                      let* α0 := M.var "std::panicking::begin_panic" in
                      let* α1 :=
                        M.read
                          (mk_str
                            "Failed to `set_code_hash` to {code_hash:?} due to {err:?}") in
                      let* α2 := M.call α0 [ α1 ] in
                      never_to_any α2) :
                      Ty.tuple []
                  ]) :
                Ty.tuple []
            ] in
        M.alloc α2 in
      let* _ :=
        let* _ :=
          let* α0 := M.var "std::io::stdio::_print" in
          let* α1 := M.read (mk_str "Switched code hash to ") in
          let* α2 := M.read (mk_str ".
") in
          let* α3 := M.alloc [ α1; α2 ] in
          let* α4 :=
            M.call
              (Ty.path "core::fmt::rt::Argument")::["new_debug"]
              [ borrow code_hash ] in
          let* α5 := M.alloc [ α4 ] in
          let* α6 :=
            M.call
              (Ty.path "core::fmt::Arguments")::["new_v1"]
              [
                pointer_coercion "Unsize" (borrow α3);
                pointer_coercion "Unsize" (borrow α5)
              ] in
          let* α7 := M.call α0 [ α6 ] in
          M.alloc α7 in
        M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_set_code :
    M.IsAssociatedFunction Self "set_code" set_code [].
End Impl_set_code_hash_Incrementer.
