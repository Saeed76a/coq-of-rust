(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



(*
fn set_code_hash<E>(code_hash: &E) -> Result<(), Error> {
    unimplemented!()
}
*)
Definition set_code_hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [E], [code_hash] =>
    let* code_hash := M.alloc code_hash in
    let* α0 := M.read (mk_str "not implemented") in
    let* α1 := M.call ((M.var "core::panicking::panic") α0) in
    never_to_any α1
  | _, _ => M.impossible
  end.



Module  Impl_core_default_Default_for_set_code_hash_Incrementer.
Section Impl_core_default_Default_for_set_code_hash_Incrementer.
  Definition Self : Ty.t := Ty.apply (Ty.path "set_code_hash::Incrementer") [].
  
  (*
  Default
  *)
  Definition default (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := Ty.path "u32") (Trait := ℐ))) in
      let* α1 := M.call α0 in
      M.pure {| set_code_hash.Incrementer.count := α1; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ℐ : Instance.t := [("default", default)].
End Impl_core_default_Default_for_set_code_hash_Incrementer.
End Impl_core_default_Default_for_set_code_hash_Incrementer.

Module  Impl_set_code_hash_Incrementer.
Section Impl_set_code_hash_Incrementer.
  Definition Self : Set := Ty.apply (Ty.path "set_code_hash::Incrementer") [].
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "set_code_hash::Incrementer") [])
            (Trait := ℐ))) in
      M.call α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn inc(&mut self) {
          self.count += 1;
          println!(
              "The new count is {}, it was modified using the original contract code.",
              self.count
          );
      }
  *)
  Definition inc (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure ((M.var "set_code_hash::Incrementer::Get_count") (deref α0)) in
        let* α0 := M.read β in
        let* α1 :=
          (M.var "BinOp::Panic::add") α0 ((Integer.of_Z 1) : Ty.path "u32") in
        (M.var "assign") β α1 in
      let* _ :=
        let* _ :=
          let* α0 := M.read (mk_str "The new count is ") in
          let* α1 :=
            M.read
              (mk_str ", it was modified using the original contract code.
") in
          let* α2 := M.alloc [ α0; α1 ] in
          let* α3 := M.read self in
          let* α4 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow
                  ((M.var "set_code_hash::Incrementer::Get_count")
                    (deref α3)))) in
          let* α5 := M.alloc [ α4 ] in
          let* α6 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow α2))
                (pointer_coercion "Unsize" (borrow α5))) in
          let* α7 := M.call ((M.var "std::io::stdio::_print") α6) in
          M.alloc α7 in
        M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_inc : Instance.t := {
    Notations.double_colon := inc;
  }.
  
  (*
      pub fn get(&self) -> u32 {
          self.count
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read ((M.var "set_code_hash::Incrementer::Get_count") (deref α0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  (*
      pub fn set_code(&mut self, code_hash: [u8; 32]) {
          set_code_hash(&code_hash).unwrap_or_else(|err| {
              panic!("Failed to `set_code_hash` to {code_hash:?} due to {err:?}")
          });
          println!("Switched code hash to {:?}.", code_hash);
      }
  *)
  Definition set_code (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; code_hash] =>
      let* self := M.alloc self in
      let* code_hash := M.alloc code_hash in
      let* _ :=
        let* α0 :=
          M.call ((M.var "set_code_hash::set_code_hash") (borrow code_hash)) in
        let* α1 :=
          M.call
            ((Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.tuple;
                    Ty.apply
                      (Ty.path "set_code_hash::Error")
                      []])::["unwrap_or_else"]
              α0
              (fun (α0 : Ty.apply (Ty.path "set_code_hash::Error") []) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  [
                    fun γ =>
                      (let* err := M.copy γ in
                      let* α0 :=
                        M.read
                          (mk_str
                            "Failed to `set_code_hash` to {code_hash:?} due to {err:?}") in
                      let* α1 :=
                        M.call ((M.var "std::panicking::begin_panic") α0) in
                      never_to_any α1) :
                      Ty.tuple
                  ]) :
                Ty.tuple)) in
        M.alloc α1 in
      let* _ :=
        let* _ :=
          let* α0 := M.read (mk_str "Switched code hash to ") in
          let* α1 := M.read (mk_str ".
") in
          let* α2 := M.alloc [ α0; α1 ] in
          let* α3 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
                (borrow code_hash)) in
          let* α4 := M.alloc [ α3 ] in
          let* α5 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow α2))
                (pointer_coercion "Unsize" (borrow α4))) in
          let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
          M.alloc α6 in
        M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_set_code : Instance.t := {
    Notations.double_colon := set_code;
  }.
End Impl_set_code_hash_Incrementer.
End Impl_set_code_hash_Incrementer.
