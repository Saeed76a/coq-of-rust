(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Flip.
Section Flip.
  Class Trait (Self : Set) : Type := {
    flip : Ty.function [Ty.apply (Ty.path "mut_ref") [Self]] (Ty.path "unit");
    get : Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "bool");
  }.
  
End Flip.
End Flip.



Module  Impl_trait_flipper_Flipper.
Section Impl_trait_flipper_Flipper.
  Definition Self : Set := Ty.apply (Ty.path "trait_flipper::Flipper") [].
  
  (*
      pub fn new() -> Self {
          Self {
              value: Default::default(),
          }
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 : Ty.function [] (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.path "bool")
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.path "bool" := M.call Œ±0 in
      M.pure {| trait_flipper.Flipper.value := Œ±1; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
End Impl_trait_flipper_Flipper.
End Impl_trait_flipper_Flipper.

Module  Impl_trait_flipper_Flip_for_trait_flipper_Flipper.
Section Impl_trait_flipper_Flip_for_trait_flipper_Flipper.
  Definition Self : Ty.t := Ty.apply (Ty.path "trait_flipper::Flipper") [].
  
  (*
      fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ : Ty.tuple :=
        let* Œ±0 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "trait_flipper::Flipper") []] :=
          M.read self in
        let* Œ±1 :
            Ty.apply
              (Ty.path "mut_ref")
              [Ty.apply (Ty.path "trait_flipper::Flipper") []] :=
          M.read self in
        let* Œ±2 : Ty.path "bool" :=
          M.read (trait_flipper.Flipper.Get_value (deref Œ±1)) in
        assign (trait_flipper.Flipper.Get_value (deref Œ±0)) (UnOp.not Œ±2) in
      let* Œ±0 : Ty.path "unit" := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_flip : Instance.t := {
    Notations.double_colon := flip;
  }.
  
  (*
      fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "trait_flipper::Flipper") []] :=
        M.read self in
      M.read (trait_flipper.Flipper.Get_value (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  Definition ‚Ñê : Instance.t := [("flip", flip); ("get", get)].
End Impl_trait_flipper_Flip_for_trait_flipper_Flipper.
End Impl_trait_flipper_Flip_for_trait_flipper_Flipper.
