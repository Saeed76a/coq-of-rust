(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Trait *)
Module Flip.
  
End Flip.

(* Enum Flipper *)

Module Impl_trait_flipper_Flipper.
  Definition Self : Ty.t := Ty.path "trait_flipper::Flipper".
  
  (*
      pub fn new() -> Self {
          Self {
              value: Default::default(),
          }
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.path "bool")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.call Œ±0 in
      M.pure {| trait_flipper.Flipper.value := Œ±1; |}
    | _, _ => M.impossible
    end.
End Impl_trait_flipper_Flipper.

Module Impl_trait_flipper_Flip_for_trait_flipper_Flipper.
  Definition Self : Ty.t := Ty.path "trait_flipper::Flipper".
  
  (*
      fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ :=
        let* Œ±0 := M.read self in
        let* Œ±1 := M.read self in
        let* Œ±2 :=
          M.read ((M.var "trait_flipper::Flipper::Get_value") (deref Œ±1)) in
        assign
          ((M.var "trait_flipper::Flipper::Get_value") (deref Œ±0))
          ((M.var "UnOp::not") Œ±2) in
      let* Œ±0 := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  (*
      fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      M.read ((M.var "trait_flipper::Flipper::Get_value") (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [("flip", InstanceField.Method flip); ("get", InstanceField.Method get)].
End Impl_trait_flipper_Flip_for_trait_flipper_Flipper.
