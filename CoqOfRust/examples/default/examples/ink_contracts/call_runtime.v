(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct AccountId *)

Module Impl_core_default_Default_for_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.path "call_runtime::AccountId".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "u128" ] in
      let* Œ±1 := M.call Œ±0 [] in
      M.pure (call_runtime.AccountId.Build_t Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_call_runtime_AccountId.

Module Impl_core_clone_Clone_for_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.path "call_runtime::AccountId".
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [ Ty.path "u128" ]))
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read self in
              M.pure (deref Œ±0)) :
              Ty.path "call_runtime::AccountId"
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_call_runtime_AccountId.

Module Impl_core_marker_Copy_for_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.path "call_runtime::AccountId".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_call_runtime_AccountId.

Axiom Balance : (Ty.path "call_runtime::Balance") = (Ty.path "u128").

(* Enum Env *)

(* Enum MultiAddress *)

Module Impl_core_convert_From_call_runtime_AccountId_for_call_runtime_MultiAddress_call_runtime_AccountId_Tuple_.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "call_runtime::MultiAddress")
      [ Ty.path "call_runtime::AccountId"; Ty.tuple [] ].
  
  (*
      fn from(_value: AccountId) -> Self {
          unimplemented!()
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ _value ] =>
      let* _value := M.alloc _value in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("from", InstanceField.Method from) ].
End Impl_core_convert_From_call_runtime_AccountId_for_call_runtime_MultiAddress_call_runtime_AccountId_Tuple_.

(* Enum BalancesCall *)

(* Enum RuntimeCall *)

(* Struct RuntimeCaller *)

Module Impl_core_default_Default_for_call_runtime_RuntimeCaller.
  Definition Self : Ty.t := Ty.path "call_runtime::RuntimeCaller".
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] => M.pure call_runtime.RuntimeCaller.Build
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_call_runtime_RuntimeCaller.

(* Enum RuntimeError *)

Module Impl_core_fmt_Debug_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.path "call_runtime::RuntimeError".
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 := M.read (mk_str "CallRuntimeFailed") in
      M.call (Ty.path "core::fmt::Formatter")::["write_str"] [ Œ±0; Œ±1 ]
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError.

Module Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.path "call_runtime::RuntimeError".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError.

Module Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.path "call_runtime::RuntimeError".
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      M.pure true
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError.

Module Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.path "call_runtime::RuntimeError".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError.

Module Impl_core_cmp_Eq_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.path "call_runtime::RuntimeError".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (ùúè : list Ty.t)
      (Œ± : list Value.t)
      : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t :=
    [
      ("assert_receiver_is_total_eq",
        InstanceField.Method assert_receiver_is_total_eq)
    ].
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError.

(* Enum EnvError *)

Module Impl_core_convert_From_call_runtime_EnvError_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.path "call_runtime::RuntimeError".
  
  (*
      fn from(e: EnvError) -> Self {
          match e {
              EnvError::CallRuntimeFailed => RuntimeError::CallRuntimeFailed,
              _ => panic!("Unexpected error from `pallet-contracts`."),
          }
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ e ] =>
      let* e := M.alloc e in
      let* Œ±0 :=
        match_operator
          e
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | call_runtime.EnvError.CallRuntimeFailed =>
                M.alloc call_runtime.RuntimeError.CallRuntimeFailed
              | _ => M.break_match 
              end) :
              Ty.path "call_runtime::RuntimeError";
            fun Œ≥ =>
              (let* Œ±0 :=
                M.read (mk_str "Unexpected error from `pallet-contracts`.") in
              let* Œ±1 := M.call (M.var "std::panicking::begin_panic") [ Œ±0 ] in
              let* Œ±2 := never_to_any Œ±1 in
              M.alloc Œ±2) :
              Ty.path "call_runtime::RuntimeError"
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("from", InstanceField.Method from) ].
End Impl_core_convert_From_call_runtime_EnvError_for_call_runtime_RuntimeError.

Module Impl_call_runtime_Env.
  Definition Self : Ty.t := Ty.path "call_runtime::Env".
  
  (*
      fn call_runtime<Call>(&self, _call: &Call) -> Result<(), EnvError> {
          unimplemented!()
      }
  *)
  Definition call_runtime (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ Call ], [ self; _call ] =>
      let* self := M.alloc self in
      let* _call := M.alloc _call in
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
End Impl_call_runtime_Env.

Module Impl_call_runtime_RuntimeCaller.
  Definition Self : Ty.t := Ty.path "call_runtime::RuntimeCaller".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 := M.read (mk_str "not implemented") in
      let* Œ±1 := M.call (M.var "core::panicking::panic") [ Œ±0 ] in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.call (Ty.path "call_runtime::RuntimeCaller")::["init_env"] []
    | _, _ => M.impossible
    end.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :=
        M.get_method
          "core::default::Default"
          "default"
          [ (* Self *) Ty.path "call_runtime::RuntimeCaller" ] in
      M.call Œ±0 []
    | _, _ => M.impossible
    end.
  
  (*
      pub fn transfer_through_runtime(
          &mut self,
          receiver: AccountId,
          value: Balance,
      ) -> Result<(), RuntimeError> {
          self.env()
              .call_runtime(&RuntimeCall::Balances(BalancesCall::Transfer {
                  dest: receiver.into(),
                  value,
              }))
              .map_err(Into::into)
      }
  *)
  Definition transfer_through_runtime (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; receiver; value ] =>
      let* self := M.alloc self in
      let* receiver := M.alloc receiver in
      let* value := M.alloc value in
      let* Œ±0 := M.read self in
      let* Œ±1 :=
        M.call
          (Ty.path "call_runtime::RuntimeCaller")::["env"]
          [ borrow (deref Œ±0) ] in
      let* Œ±2 := M.alloc Œ±1 in
      let* Œ±3 :=
        M.get_method
          "core::convert::Into"
          "into"
          [
            (* Self *) Ty.path "call_runtime::AccountId";
            (* T *)
              Ty.apply
                (Ty.path "call_runtime::MultiAddress")
                [ Ty.path "call_runtime::AccountId"; Ty.tuple [] ]
          ] in
      let* Œ±4 := M.read receiver in
      let* Œ±5 := M.call Œ±3 [ Œ±4 ] in
      let* Œ±6 := M.read value in
      let* Œ±7 :=
        M.alloc
          (call_runtime.RuntimeCall.Balances
            (Value.StructRecord
              "call_runtime::BalancesCall::Transfer"
              [ ("dest", Œ±5); ("value", Œ±6) ])) in
      let* Œ±8 :=
        M.call
          (Ty.path "call_runtime::Env")::["call_runtime"]
          [ borrow Œ±2; borrow Œ±7 ] in
      let* Œ±9 :=
        M.get_method
          "core::convert::Into"
          "into"
          [
            (* Self *) Ty.path "call_runtime::EnvError";
            (* T *) Ty.path "call_runtime::RuntimeError"
          ] in
      M.call
        (Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.tuple []; Ty.path "call_runtime::EnvError" ])::["map_err"]
        [ Œ±8; Œ±9 ]
    | _, _ => M.impossible
    end.
  
  (*
      pub fn call_nonexistent_extrinsic(&mut self) -> Result<(), RuntimeError> {
          self.env().call_runtime(&()).map_err(Into::into)
      }
  *)
  Definition call_nonexistent_extrinsic
      (ùúè : list Ty.t)
      (Œ± : list Value.t)
      : M :=
    match ùúè, Œ± with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      let* Œ±1 :=
        M.call
          (Ty.path "call_runtime::RuntimeCaller")::["env"]
          [ borrow (deref Œ±0) ] in
      let* Œ±2 := M.alloc Œ±1 in
      let* Œ±3 := M.alloc tt in
      let* Œ±4 :=
        M.call
          (Ty.path "call_runtime::Env")::["call_runtime"]
          [ borrow Œ±2; borrow Œ±3 ] in
      let* Œ±5 :=
        M.get_method
          "core::convert::Into"
          "into"
          [
            (* Self *) Ty.path "call_runtime::EnvError";
            (* T *) Ty.path "call_runtime::RuntimeError"
          ] in
      M.call
        (Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.tuple []; Ty.path "call_runtime::EnvError" ])::["map_err"]
        [ Œ±4; Œ±5 ]
    | _, _ => M.impossible
    end.
End Impl_call_runtime_RuntimeCaller.
