(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_default_Default_for_call_runtime_AccountId.
Section Impl_core_default_Default_for_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::AccountId") [].
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 : Ty.function [] (Ty.path "u128") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.path "u128")
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.path "u128" := M.call Œ±0 in
      M.pure (call_runtime.AccountId.Build_t Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ‚Ñê : Instance.t := [("default", default)].
End Impl_core_default_Default_for_call_runtime_AccountId.
End Impl_core_default_Default_for_call_runtime_AccountId.

Module  Impl_core_clone_Clone_for_call_runtime_AccountId.
Section Impl_core_clone_Clone_for_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::AccountId") [].
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 : Ty.apply (Ty.path "call_runtime::AccountId") [] :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "u128"]))
          [
            fun Œ≥ =>
              (let* Œ±0 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "call_runtime::AccountId") []] :=
                M.read self in
              M.pure (deref Œ±0)) :
              Ty.apply (Ty.path "call_runtime::AccountId") []
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ‚Ñê : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_call_runtime_AccountId.
End Impl_core_clone_Clone_for_call_runtime_AccountId.

Module  Impl_core_marker_Copy_for_call_runtime_AccountId.
Section Impl_core_marker_Copy_for_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::AccountId") [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_call_runtime_AccountId.
End Impl_core_marker_Copy_for_call_runtime_AccountId.

Axiom Balance : Ty.path "u128".





Module  Impl_core_convert_From_call_runtime_AccountId_for_call_runtime_MultiAddress_call_runtime_AccountId_Tuple_.
Section Impl_core_convert_From_call_runtime_AccountId_for_call_runtime_MultiAddress_call_runtime_AccountId_Tuple_.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "call_runtime::MultiAddress")
      [Ty.apply (Ty.path "call_runtime::AccountId") []; Ty.tuple].
  
  (*
      fn from(_value: AccountId) -> Self {
          unimplemented!()
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [_value] =>
      let* _value := M.alloc _value in
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* Œ±1 : Ty.path "never" := M.call (core.panicking.panic Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ‚Ñê : Instance.t := [("from", from)].
End Impl_core_convert_From_call_runtime_AccountId_for_call_runtime_MultiAddress_call_runtime_AccountId_Tuple_.
End Impl_core_convert_From_call_runtime_AccountId_for_call_runtime_MultiAddress_call_runtime_AccountId_Tuple_.







Module  Impl_core_default_Default_for_call_runtime_RuntimeCaller.
Section Impl_core_default_Default_for_call_runtime_RuntimeCaller.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::RuntimeCaller") [].
  
  (*
  Default
  *)
  Definition default (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] => M.pure call_runtime.RuntimeCaller.Build
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_default : Instance.t := {
    Notations.double_colon := default;
  }.
  
  Definition ‚Ñê : Instance.t := [("default", default)].
End Impl_core_default_Default_for_call_runtime_RuntimeCaller.
End Impl_core_default_Default_for_call_runtime_RuntimeCaller.



Module  Impl_core_fmt_Debug_for_call_runtime_RuntimeError.
Section Impl_core_fmt_Debug_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::RuntimeError") [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "CallRuntimeFailed") in
      M.call
        ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_str"] Œ±0 Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError.
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError.

Module  Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError.
Section Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::RuntimeError") [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError.
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError.

Module  Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError.
Section Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::RuntimeError") [].
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      M.pure true
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ‚Ñê : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError.
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError.

Module  Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError.
Section Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::RuntimeError") [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError.
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError.

Module  Impl_core_cmp_Eq_for_call_runtime_RuntimeError.
Section Impl_core_cmp_Eq_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::RuntimeError") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (ùúè : list Ty.t)
      (Œ± : list Value.t)
      : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ‚Ñê : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError.
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError.



Module  Impl_core_convert_From_call_runtime_EnvError_for_call_runtime_RuntimeError.
Section Impl_core_convert_From_call_runtime_EnvError_for_call_runtime_RuntimeError.
  Definition Self : Ty.t := Ty.apply (Ty.path "call_runtime::RuntimeError") [].
  
  (*
      fn from(e: EnvError) -> Self {
          match e {
              EnvError::CallRuntimeFailed => RuntimeError::CallRuntimeFailed,
              _ => panic!("Unexpected error from `pallet-contracts`."),
          }
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [e] =>
      let* e := M.alloc e in
      let* Œ±0 : Ty.apply (Ty.path "call_runtime::RuntimeError") [] :=
        match_operator
          e
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | call_runtime.EnvError.CallRuntimeFailed =>
                M.alloc call_runtime.RuntimeError.CallRuntimeFailed
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "call_runtime::RuntimeError") [];
            fun Œ≥ =>
              (let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.read (mk_str "Unexpected error from `pallet-contracts`.") in
              let* Œ±1 : Ty.path "never" :=
                M.call (std.panicking.begin_panic Œ±0) in
              let* Œ±2 : Ty.apply (Ty.path "call_runtime::RuntimeError") [] :=
                never_to_any Œ±1 in
              M.alloc Œ±2) :
              Ty.apply (Ty.path "call_runtime::RuntimeError") []
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ‚Ñê : Instance.t := [("from", from)].
End Impl_core_convert_From_call_runtime_EnvError_for_call_runtime_RuntimeError.
End Impl_core_convert_From_call_runtime_EnvError_for_call_runtime_RuntimeError.

Module  Impl_call_runtime_Env.
Section Impl_call_runtime_Env.
  Definition Self : Set := Ty.apply (Ty.path "call_runtime::Env") [].
  
  (*
      fn call_runtime<Call>(&self, _call: &Call) -> Result<(), EnvError> {
          unimplemented!()
      }
  *)
  Definition call_runtime (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [Call], [self; _call] =>
      let* self := M.alloc self in
      let* _call := M.alloc _call in
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* Œ±1 : Ty.path "never" := M.call (core.panicking.panic Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_call_runtime {Call : Set} : Instance.t := {
    Notations.double_colon := call_runtime (Call := Call);
  }.
End Impl_call_runtime_Env.
End Impl_call_runtime_Env.

Module  Impl_call_runtime_RuntimeCaller.
Section Impl_call_runtime_RuntimeCaller.
  Definition Self : Set := Ty.apply (Ty.path "call_runtime::RuntimeCaller") [].
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "not implemented") in
      let* Œ±1 : Ty.path "never" := M.call (core.panicking.panic Œ±0) in
      never_to_any Œ±1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_init_env : Instance.t := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      M.call (Ty.apply (Ty.path "call_runtime::RuntimeCaller") [])::["init_env"]
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_env : Instance.t := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [] =>
      let* Œ±0 :
          Ty.function
            []
            (Ty.apply (Ty.path "call_runtime::RuntimeCaller") []) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.default.Default.default
            (Self := Ty.apply (Ty.path "call_runtime::RuntimeCaller") [])
            (Trait := ‚Ñê))) in
      M.call Œ±0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn transfer_through_runtime(
          &mut self,
          receiver: AccountId,
          value: Balance,
      ) -> Result<(), RuntimeError> {
          self.env()
              .call_runtime(&RuntimeCall::Balances(BalancesCall::Transfer {
                  dest: receiver.into(),
                  value,
              }))
              .map_err(Into::into)
      }
  *)
  Definition transfer_through_runtime (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; receiver; value] =>
      let* self := M.alloc self in
      let* receiver := M.alloc receiver in
      let* value := M.alloc value in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "call_runtime::RuntimeCaller") []] :=
        M.read self in
      let* Œ±1 : Ty.apply (Ty.path "call_runtime::Env") [] :=
        M.call
          ((Ty.apply (Ty.path "call_runtime::RuntimeCaller") [])::["env"]
            (borrow (deref Œ±0))) in
      let* Œ±2 : Ty.apply (Ty.path "call_runtime::Env") [] := M.alloc Œ±1 in
      let* Œ±3 :
          Ty.function
            [Ty.apply (Ty.path "call_runtime::AccountId") []]
            (Ty.apply
              (Ty.path "call_runtime::MultiAddress")
              [Ty.apply (Ty.path "call_runtime::AccountId") []; Ty.tuple]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.apply (Ty.path "call_runtime::AccountId") [])
            (T :=
              Ty.apply
                (Ty.path "call_runtime::MultiAddress")
                [Ty.apply (Ty.path "call_runtime::AccountId") []; Ty.tuple])
            (Trait := ‚Ñê))) in
      let* Œ±4 : Ty.apply (Ty.path "call_runtime::AccountId") [] :=
        M.read receiver in
      let* Œ±5 :
          Ty.apply
            (Ty.path "call_runtime::MultiAddress")
            [Ty.apply (Ty.path "call_runtime::AccountId") []; Ty.tuple] :=
        M.call (Œ±3 Œ±4) in
      let* Œ±6 : Ty.path "u128" := M.read value in
      let* Œ±7 : Ty.apply (Ty.path "call_runtime::RuntimeCall") [] :=
        M.alloc
          (call_runtime.RuntimeCall.Balances
            (call_runtime.BalancesCall.Transfer
              {|
              call_runtime.BalancesCall.Transfer.dest := Œ±5;
              call_runtime.BalancesCall.Transfer.value := Œ±6;
            |})) in
      let* Œ±8 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "call_runtime::EnvError") []] :=
        M.call
          ((Ty.apply (Ty.path "call_runtime::Env") [])::["call_runtime"]
            (borrow Œ±2)
            (borrow Œ±7)) in
      let* Œ±9 :
          Ty.function
            [Ty.apply (Ty.path "call_runtime::EnvError") []]
            (Ty.apply (Ty.path "call_runtime::RuntimeError") []) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.apply (Ty.path "call_runtime::EnvError") [])
            (T := Ty.apply (Ty.path "call_runtime::RuntimeError") [])
            (Trait := ‚Ñê))) in
      M.call
        ((Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple;
                Ty.apply (Ty.path "call_runtime::EnvError") []])::["map_err"]
          Œ±8
          Œ±9)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_transfer_through_runtime : Instance.t := {
    Notations.double_colon := transfer_through_runtime;
  }.
  
  (*
      pub fn call_nonexistent_extrinsic(&mut self) -> Result<(), RuntimeError> {
          self.env().call_runtime(&()).map_err(Into::into)
      }
  *)
  Definition call_nonexistent_extrinsic
      (ùúè : list Ty.t)
      (Œ± : list Value.t)
      : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "call_runtime::RuntimeCaller") []] :=
        M.read self in
      let* Œ±1 : Ty.apply (Ty.path "call_runtime::Env") [] :=
        M.call
          ((Ty.apply (Ty.path "call_runtime::RuntimeCaller") [])::["env"]
            (borrow (deref Œ±0))) in
      let* Œ±2 : Ty.apply (Ty.path "call_runtime::Env") [] := M.alloc Œ±1 in
      let* Œ±3 : Ty.tuple := M.alloc tt in
      let* Œ±4 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "call_runtime::EnvError") []] :=
        M.call
          ((Ty.apply (Ty.path "call_runtime::Env") [])::["call_runtime"]
            (borrow Œ±2)
            (borrow Œ±3)) in
      let* Œ±5 :
          Ty.function
            [Ty.apply (Ty.path "call_runtime::EnvError") []]
            (Ty.apply (Ty.path "call_runtime::RuntimeError") []) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.apply (Ty.path "call_runtime::EnvError") [])
            (T := Ty.apply (Ty.path "call_runtime::RuntimeError") [])
            (Trait := ‚Ñê))) in
      M.call
        ((Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple;
                Ty.apply (Ty.path "call_runtime::EnvError") []])::["map_err"]
          Œ±4
          Œ±5)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_call_nonexistent_extrinsic : Instance.t := {
    Notations.double_colon := call_nonexistent_extrinsic;
  }.
End Impl_call_runtime_RuntimeCaller.
End Impl_call_runtime_RuntimeCaller.
