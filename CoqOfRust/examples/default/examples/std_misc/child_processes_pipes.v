(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition PANGRAM : ref str.t :=
  M.run (M.pure (mk_str "the quick brown fox jumped over the lazy dog
")).

(*
fn main() {
    // Spawn the `wc` command
    let process = match Command::new("wc")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
    {
        Err(why) => panic!("couldn't spawn wc: {}", why),
        Ok(process) => process,
    };

    // Write a string to the `stdin` of `wc`.
    //
    // `stdin` has type `Option<ChildStdin>`, but since we know this instance
    // must have one, we can directly `unwrap` it.
    match process.stdin.unwrap().write_all(PANGRAM.as_bytes()) {
        Err(why) => panic!("couldn't write to wc stdin: {}", why),
        Ok(_) => println!("sent pangram to wc"),
    }

    // Because `stdin` does not live after the above calls, it is `drop`ed,
    // and the pipe is closed.
    //
    // This is very important, otherwise `wc` wouldn't start processing the
    // input we just sent.

    // The `stdout` field also has type `Option<ChildStdout>` so must be unwrapped.
    let mut s = String::new();
    match process.stdout.unwrap().read_to_string(&mut s) {
        Err(why) => panic!("couldn't read wc stdout: {}", why),
        Ok(_) => print!("wc responded with:\n{}", s),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* process : M.Val std.process.Child.t :=
      let* α0 : ref str.t := M.read (mk_str "wc") in
      let* α1 : std.process.Command.t := std.process.Command.t::["new"] α0 in
      let* α2 : M.Val std.process.Command.t := M.alloc α1 in
      let* α3 : mut_ref std.process.Command.t := borrow_mut α2 in
      let* α4 : std.process.Stdio.t := std.process.Stdio.t::["piped"] in
      let* α5 : mut_ref std.process.Command.t :=
        std.process.Command.t::["stdin"] α3 α4 in
      let* α6 : M.Val std.process.Command.t := deref α5 in
      let* α7 : mut_ref std.process.Command.t := borrow_mut α6 in
      let* α8 : std.process.Stdio.t := std.process.Stdio.t::["piped"] in
      let* α9 : mut_ref std.process.Command.t :=
        std.process.Command.t::["stdout"] α7 α8 in
      let* α10 : M.Val std.process.Command.t := deref α9 in
      let* α11 : mut_ref std.process.Command.t := borrow_mut α10 in
      let* α12 :
          core.result.Result.t std.process.Child.t std.io.error.Error.t :=
        std.process.Command.t::["spawn"] α11 in
      let* α13 :
          M.Val
            (core.result.Result.t std.process.Child.t std.io.error.Error.t) :=
        M.alloc α12 in
      let* α14 := M.read α13 in
      let* α15 : M.Val std.process.Child.t :=
        match α14 with
        | core.result.Result.Err why =>
          let* why := M.alloc why in
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "couldn't spawn wc: " ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : ref std.io.error.Error.t := borrow why in
          let* α8 : M.Val std.io.error.Error.t := deref α7 in
          let* α9 : ref std.io.error.Error.t := borrow α8 in
          let* α10 : core.fmt.rt.Argument.t :=
            core.fmt.rt.Argument.t::["new_display"] α9 in
          let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
          let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
          let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
          let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
          let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
          let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
            M.alloc α15 in
          let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α16 in
          let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
          let* α19 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_v1"] α6 α18 in
          let* α20 : never.t := core.panicking.panic_fmt α19 in
          let* α21 : M.Val never.t := M.alloc α20 in
          never_to_any α21
        | core.result.Result.Ok process =>
          let* process := M.alloc process in
          M.pure process
        end in
      M.copy α15 in
    let* _ : M.Val unit :=
      let* α0 : core.option.Option.t std.process.ChildStdin.t :=
        M.read process.["stdin"] in
      let* α1 : std.process.ChildStdin.t :=
        (core.option.Option.t std.process.ChildStdin.t)::["unwrap"] α0 in
      let* α2 : M.Val std.process.ChildStdin.t := M.alloc α1 in
      let* α3 : mut_ref std.process.ChildStdin.t := borrow_mut α2 in
      let* α4 : ref (ref str.t) := M.read child_processes_pipes.PANGRAM in
      let* α5 : M.Val (ref str.t) := deref α4 in
      let* α6 : ref str.t := M.read α5 in
      let* α7 : M.Val str.t := deref α6 in
      let* α8 : ref str.t := borrow α7 in
      let* α9 : ref (slice u8.t) := str.t::["as_bytes"] α8 in
      let* α10 : M.Val (slice u8.t) := deref α9 in
      let* α11 : ref (slice u8.t) := borrow α10 in
      let* α12 : core.result.Result.t unit std.io.error.Error.t :=
        (std.io.Write.write_all
            (Self := std.process.ChildStdin.t)
            (Trait := ltac:(refine _)))
          α3
          α11 in
      let* α13 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
        M.alloc α12 in
      let* α14 := M.read α13 in
      match α14 with
      | core.result.Result.Err why =>
        let* why := M.alloc why in
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "couldn't write to wc stdin: " ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref std.io.error.Error.t := borrow why in
        let* α8 : M.Val std.io.error.Error.t := deref α7 in
        let* α9 : ref std.io.error.Error.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
        let* α19 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α18 in
        let* α20 : never.t := core.panicking.panic_fmt α19 in
        let* α21 : M.Val never.t := M.alloc α20 in
        never_to_any α21
      | core.result.Result.Ok _ =>
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "sent pangram to wc
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_const"] α6 in
          let* α8 : unit := std.io.stdio._print α7 in
          M.alloc α8 in
        M.alloc tt
      end in
    let* s : M.Val alloc.string.String.t :=
      let* α0 : alloc.string.String.t := alloc.string.String.t::["new"] in
      M.alloc α0 in
    let* α0 : core.option.Option.t std.process.ChildStdout.t :=
      M.read process.["stdout"] in
    let* α1 : std.process.ChildStdout.t :=
      (core.option.Option.t std.process.ChildStdout.t)::["unwrap"] α0 in
    let* α2 : M.Val std.process.ChildStdout.t := M.alloc α1 in
    let* α3 : mut_ref std.process.ChildStdout.t := borrow_mut α2 in
    let* α4 : mut_ref alloc.string.String.t := borrow_mut s in
    let* α5 : M.Val alloc.string.String.t := deref α4 in
    let* α6 : mut_ref alloc.string.String.t := borrow_mut α5 in
    let* α7 : core.result.Result.t usize.t std.io.error.Error.t :=
      (std.io.Read.read_to_string
          (Self := std.process.ChildStdout.t)
          (Trait := ltac:(refine _)))
        α3
        α6 in
    let* α8 : M.Val (core.result.Result.t usize.t std.io.error.Error.t) :=
      M.alloc α7 in
    let* α9 := M.read α8 in
    match α9 with
    | core.result.Result.Err why =>
      let* why := M.alloc why in
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "couldn't read wc stdout: " ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (array (ref str.t)) := deref α1 in
      let* α3 : ref (array (ref str.t)) := borrow α2 in
      let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
      let* α5 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α4 in
      let* α6 : ref (slice (ref str.t)) := M.read α5 in
      let* α7 : ref std.io.error.Error.t := borrow why in
      let* α8 : M.Val std.io.error.Error.t := deref α7 in
      let* α9 : ref std.io.error.Error.t := borrow α8 in
      let* α10 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α9 in
      let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
      let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
      let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
      let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
      let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
      let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
      let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α16 in
      let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
      let* α19 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α6 α18 in
      let* α20 : never.t := core.panicking.panic_fmt α19 in
      let* α21 : M.Val never.t := M.alloc α20 in
      never_to_any α21
    | core.result.Result.Ok _ =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "wc responded with:
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref alloc.string.String.t := borrow s in
        let* α8 : M.Val alloc.string.String.t := deref α7 in
        let* α9 : ref alloc.string.String.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
        let* α19 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α18 in
        let* α20 : unit := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt
    end).
