(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition PANGRAM : ref str.t :=
  M.run (M.pure (mk_str "the quick brown fox jumped over the lazy dog
")).

(*
fn main() {
    // Spawn the `wc` command
    let process = match Command::new("wc")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
    {
        Err(why) => panic!("couldn't spawn wc: {}", why),
        Ok(process) => process,
    };

    // Write a string to the `stdin` of `wc`.
    //
    // `stdin` has type `Option<ChildStdin>`, but since we know this instance
    // must have one, we can directly `unwrap` it.
    match process.stdin.unwrap().write_all(PANGRAM.as_bytes()) {
        Err(why) => panic!("couldn't write to wc stdin: {}", why),
        Ok(_) => println!("sent pangram to wc"),
    }

    // Because `stdin` does not live after the above calls, it is `drop`ed,
    // and the pipe is closed.
    //
    // This is very important, otherwise `wc` wouldn't start processing the
    // input we just sent.

    // The `stdout` field also has type `Option<ChildStdout>` so must be unwrapped.
    let mut s = String::new();
    match process.stdout.unwrap().read_to_string(&mut s) {
        Err(why) => panic!("couldn't read wc stdout: {}", why),
        Ok(_) => print!("wc responded with:\n{}", s),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* process : M.Val std.process.Child.t :=
      let* α0 := M.read (mk_str "wc") in
      let* α1 := std.process.Command.t::["new"] α0 in
      let* α2 : M.Val std.process.Command.t := M.alloc α1 in
      let* α3 : M.Val (mut_ref std.process.Command.t) := borrow_mut α2 in
      let* α4 := M.read α3 in
      let* α5 := std.process.Stdio.t::["piped"] in
      let* α6 := std.process.Command.t::["stdin"] α4 α5 in
      let* α7 : M.Val (mut_ref std.process.Command.t) := M.alloc α6 in
      let* α8 : M.Val std.process.Command.t := deref α7 in
      let* α9 : M.Val (mut_ref std.process.Command.t) := borrow_mut α8 in
      let* α10 := M.read α9 in
      let* α11 := std.process.Stdio.t::["piped"] in
      let* α12 := std.process.Command.t::["stdout"] α10 α11 in
      let* α13 : M.Val (mut_ref std.process.Command.t) := M.alloc α12 in
      let* α14 : M.Val std.process.Command.t := deref α13 in
      let* α15 : M.Val (mut_ref std.process.Command.t) := borrow_mut α14 in
      let* α16 := M.read α15 in
      let* α17 := std.process.Command.t::["spawn"] α16 in
      let* α18 :
          M.Val
            (core.result.Result.t std.process.Child.t std.io.error.Error.t) :=
        M.alloc α17 in
      let* α19 := M.read α18 in
      let* α20 : M.Val std.process.Child.t :=
        match α19 with
        | core.result.Result.Err why =>
          let* why := M.alloc why in
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "couldn't spawn wc: " ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val (ref std.io.error.Error.t) := borrow why in
          let* α5 := M.read α4 in
          let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
          let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
          let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
          let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
          let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α9 in
          let* α11 := M.read α10 in
          let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          let* α14 : M.Val never.t := M.alloc α13 in
          never_to_any α14
        | core.result.Result.Ok process =>
          let* process := M.alloc process in
          M.pure process
        end in
      M.copy α20 in
    let* _ : M.Val unit :=
      let* α0 := M.read process.["stdin"] in
      let* α1 :=
        (core.option.Option.t std.process.ChildStdin.t)::["unwrap"] α0 in
      let* α2 : M.Val std.process.ChildStdin.t := M.alloc α1 in
      let* α3 : M.Val (mut_ref std.process.ChildStdin.t) := borrow_mut α2 in
      let* α4 := M.read α3 in
      let* α5 : M.Val (ref str.t) := deref child_processes_pipes.PANGRAM in
      let* α6 : M.Val str.t := deref α5 in
      let* α7 : M.Val (ref str.t) := borrow α6 in
      let* α8 := M.read α7 in
      let* α9 := str.t::["as_bytes"] α8 in
      let* α10 : M.Val (ref (slice u8.t)) := M.alloc α9 in
      let* α11 : M.Val (slice u8.t) := deref α10 in
      let* α12 : M.Val (ref (slice u8.t)) := borrow α11 in
      let* α13 := M.read α12 in
      let* α14 :=
        (std.io.Write.write_all
            (Self := std.process.ChildStdin.t)
            (Trait := ltac:(refine _)))
          α4
          α13 in
      let* α15 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
        M.alloc α14 in
      let* α16 := M.read α15 in
      match α16 with
      | core.result.Result.Err why =>
        let* why := M.alloc why in
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "couldn't write to wc stdin: " ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref std.io.error.Error.t) := borrow why in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        let* α14 : M.Val never.t := M.alloc α13 in
        never_to_any α14
      | core.result.Result.Ok _ =>
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "sent pangram to wc
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
          let* α5 := std.io.stdio._print α4 in
          M.alloc α5 in
        M.alloc tt
      end in
    let* s : M.Val alloc.string.String.t :=
      let* α0 := alloc.string.String.t::["new"] in
      M.alloc α0 in
    let* α0 := M.read process.["stdout"] in
    let* α1 :=
      (core.option.Option.t std.process.ChildStdout.t)::["unwrap"] α0 in
    let* α2 : M.Val std.process.ChildStdout.t := M.alloc α1 in
    let* α3 : M.Val (mut_ref std.process.ChildStdout.t) := borrow_mut α2 in
    let* α4 := M.read α3 in
    let* α5 : M.Val (mut_ref alloc.string.String.t) := borrow_mut s in
    let* α6 := M.read α5 in
    let* α7 :=
      (std.io.Read.read_to_string
          (Self := std.process.ChildStdout.t)
          (Trait := ltac:(refine _)))
        α4
        α6 in
    let* α8 : M.Val (core.result.Result.t usize.t std.io.error.Error.t) :=
      M.alloc α7 in
    let* α9 := M.read α8 in
    match α9 with
    | core.result.Result.Err why =>
      let* why := M.alloc why in
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "couldn't read wc stdout: " ] in
      let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
      let* α2 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α1 in
      let* α3 := M.read α2 in
      let* α4 : M.Val (ref std.io.error.Error.t) := borrow why in
      let* α5 := M.read α4 in
      let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
      let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α9 in
      let* α11 := M.read α10 in
      let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
      let* α13 := core.panicking.panic_fmt α12 in
      let* α14 : M.Val never.t := M.alloc α13 in
      never_to_any α14
    | core.result.Result.Ok _ =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "wc responded with:
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref alloc.string.String.t) := borrow s in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt
    end).
