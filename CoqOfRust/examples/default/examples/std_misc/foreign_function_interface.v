(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Error ForeignMod.

(*
fn cos(z: Complex) -> Complex {
    unsafe { ccosf(z) }
}
*)
Definition cos
    (z : foreign_function_interface.Complex.t)
    : M foreign_function_interface.Complex.t :=
  let* z := M.alloc z in
  M.function_body
    (let* α0 := M.read z in
    let* α1 := "unimplemented parent_kind" α0 in
    M.alloc α1).

(*
fn main() {
    // z = -1 + 0i
    let z = Complex { re: -1., im: 0. };

    // calling a foreign function is an unsafe operation
    let z_sqrt = unsafe { csqrtf(z) };

    println!("the square root of {:?} is {:?}", z, z_sqrt);

    // calling safe API wrapped around unsafe operation
    println!("cos({:?}) = {:?}", z, cos(z));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* z : M.Val foreign_function_interface.Complex.t :=
      let* α0 : M.Val f32.t := M.alloc (- 1 (* 1. *)) in
      let* α1 := M.read α0 in
      let* α2 : M.Val f32.t := M.alloc 0 (* 0. *) in
      let* α3 := M.read α2 in
      M.alloc
        {|
          foreign_function_interface.Complex.re := α1;
          foreign_function_interface.Complex.im := α3;
        |} in
    let* z_sqrt : M.Val foreign_function_interface.Complex.t :=
      let* α0 := M.read z in
      let* α1 := "unimplemented parent_kind" α0 in
      let* α0 : M.Val foreign_function_interface.Complex.t := M.alloc α1 in
      M.copy α0 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "the square root of "; mk_str " is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref foreign_function_interface.Complex.t) :=
          borrow z in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (ref foreign_function_interface.Complex.t) :=
          borrow z_sqrt in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_debug"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α7; α11 ] in
        let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α12 in
        let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α13 in
        let* α15 := M.read α14 in
        let* α16 := core.fmt.Arguments.t::["new_v1"] α3 α15 in
        let* α17 := std.io.stdio._print α16 in
        M.alloc α17 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "cos("; mk_str ") = "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref foreign_function_interface.Complex.t) :=
          borrow z in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 := M.read z in
        let* α9 := foreign_function_interface.cos α8 in
        let* α10 : M.Val foreign_function_interface.Complex.t := M.alloc α9 in
        let* α11 : M.Val (ref foreign_function_interface.Complex.t) :=
          borrow α10 in
        let* α12 := M.read α11 in
        let* α13 := core.fmt.rt.Argument.t::["new_debug"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α7; α14 ] in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 := M.read α17 in
        let* α19 := core.fmt.Arguments.t::["new_v1"] α3 α18 in
        let* α20 := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    M.alloc tt).

Module  Complex.
Section Complex.
  Record t : Set := {
    re : f32.t;
    im : f32.t;
  }.
  
  Global Instance Get_re : Notations.Dot "re" := {
    Notations.dot := Ref.map (fun x => x.(re)) (fun v x => x <| re := v |>);
  }.
  Global Instance Get_AF_re : Notations.DoubleColon t "re" := {
    Notations.double_colon (x : M.Val t) := x.["re"];
  }.
  Global Instance Get_im : Notations.Dot "im" := {
    Notations.dot := Ref.map (fun x => x.(im)) (fun v x => x <| im := v |>);
  }.
  Global Instance Get_AF_im : Notations.DoubleColon t "im" := {
    Notations.double_colon (x : M.Val t) := x.["im"];
  }.
End Complex.
End Complex.

Module  Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
Section Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
  Ltac Self := exact foreign_function_interface.Complex.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref ltac:(Self))
      : M foreign_function_interface.Complex.t :=
    let* self := M.alloc self in
    M.function_body
      (let* _ : M.Val unit := M.alloc tt in
      deref self).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
End Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.

Module  Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
Section Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
  Ltac Self := exact foreign_function_interface.Complex.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
End Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.

Module  Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
Section Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
  Ltac Self := exact foreign_function_interface.Complex.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          if self.im < 0. {
              write!(f, "{}-{}i", self.re, -self.im)
          } else {
              write!(f, "{}+{}i", self.re, self.im)
          }
      }
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    M.function_body
      (let* α0 : M.Val foreign_function_interface.Complex.t := deref self in
      let* α1 : M.Val f32.t := M.alloc 0 (* 0. *) in
      let* α2 : M.Val bool.t := BinOp.lt α0.["im"] α1 in
      let* α3 : M.Val bool.t := use α2 in
      let* α4 := M.read α3 in
      if (α4 : bool) then
        let* α0 : M.Val core.fmt.Formatter.t := deref f in
        let* α1 : M.Val (mut_ref core.fmt.Formatter.t) := borrow_mut α0 in
        let* α2 := M.read α1 in
        let* α3 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "-"; mk_str "i" ] in
        let* α4 : M.Val (ref (array (ref str.t))) := borrow α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 := M.read α5 in
        let* α7 : M.Val foreign_function_interface.Complex.t := deref self in
        let* α8 : M.Val (ref f32.t) := borrow α7.["re"] in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val foreign_function_interface.Complex.t := deref self in
        let* α13 : M.Val f32.t := UnOp.neg α12.["im"] in
        let* α14 : M.Val (ref f32.t) := borrow α13 in
        let* α15 := M.read α14 in
        let* α16 := core.fmt.rt.Argument.t::["new_display"] α15 in
        let* α17 : M.Val core.fmt.rt.Argument.t := M.alloc α16 in
        let* α18 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α17 ] in
        let* α19 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α18 in
        let* α20 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α19 in
        let* α21 := M.read α20 in
        let* α22 := core.fmt.Arguments.t::["new_v1"] α6 α21 in
        let* α23 := core.fmt.Formatter.t::["write_fmt"] α2 α22 in
        M.alloc α23
      else
        let* α0 : M.Val core.fmt.Formatter.t := deref f in
        let* α1 : M.Val (mut_ref core.fmt.Formatter.t) := borrow_mut α0 in
        let* α2 := M.read α1 in
        let* α3 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "+"; mk_str "i" ] in
        let* α4 : M.Val (ref (array (ref str.t))) := borrow α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 := M.read α5 in
        let* α7 : M.Val foreign_function_interface.Complex.t := deref self in
        let* α8 : M.Val (ref f32.t) := borrow α7.["re"] in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val foreign_function_interface.Complex.t := deref self in
        let* α13 : M.Val (ref f32.t) := borrow α12.["im"] in
        let* α14 := M.read α13 in
        let* α15 := core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α16 ] in
        let* α18 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α17 in
        let* α19 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α18 in
        let* α20 := M.read α19 in
        let* α21 := core.fmt.Arguments.t::["new_v1"] α6 α20 in
        let* α22 := core.fmt.Formatter.t::["write_fmt"] α2 α21 in
        M.alloc α22).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
