(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Error ForeignMod.

(*
fn cos(z: Complex) -> Complex {
    unsafe { ccosf(z) }
}
*)
Definition cos
    (z : foreign_function_interface.Complex.t)
    : M foreign_function_interface.Complex.t :=
  let* z : M.Val foreign_function_interface.Complex.t := M.alloc z in
  let* α0 : foreign_function_interface.Complex.t := M.read z in
  M.call ("unimplemented parent_kind" α0).

(*
fn main() {
    // z = -1 + 0i
    let z = Complex { re: -1., im: 0. };

    // calling a foreign function is an unsafe operation
    let z_sqrt = unsafe { csqrtf(z) };

    println!("the square root of {:?} is {:?}", z, z_sqrt);

    // calling safe API wrapped around unsafe operation
    println!("cos({:?}) = {:?}", z, cos(z));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* z : M.Val foreign_function_interface.Complex.t :=
    let* α0 : f32.t := M.read UnsupportedLiteral in
    let* α1 : f32.t := M.read UnsupportedLiteral in
    M.alloc
      {|
        foreign_function_interface.Complex.re := α0;
        foreign_function_interface.Complex.im := α1;
      |} in
  let* z_sqrt : M.Val foreign_function_interface.Complex.t :=
    let* α0 : foreign_function_interface.Complex.t := M.read z in
    let* α1 : foreign_function_interface.Complex.t :=
      M.call ("unimplemented parent_kind" α0) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "the square root of "; mk_str " is "; mk_str "
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow z)) in
      let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
      let* α5 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow z_sqrt)) in
      let* α6 : M.Val core.fmt.rt.Argument.t := M.alloc α5 in
      let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4; α6 ] in
      let* α8 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α7) in
      let* α9 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α8) in
      let* α10 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α2 α9) in
      let* α11 : unit := M.call (std.io.stdio._print α10) in
      M.alloc α11 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "cos("; mk_str ") = "; mk_str "
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow z)) in
      let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
      let* α5 : foreign_function_interface.Complex.t := M.read z in
      let* α6 : foreign_function_interface.Complex.t :=
        M.call (foreign_function_interface.cos α5) in
      let* α7 : M.Val foreign_function_interface.Complex.t := M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow α7)) in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4; α9 ] in
      let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α10) in
      let* α12 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α11) in
      let* α13 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α2 α12) in
      let* α14 : unit := M.call (std.io.stdio._print α13) in
      M.alloc α14 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.

Module  Complex.
Section Complex.
  Record t : Set := {
    re : f32.t;
    im : f32.t;
  }.
  
  Global Instance Get_re : Notations.Dot "re" := {
    Notations.dot := Ref.map (fun x => x.(re)) (fun v x => x <| re := v |>);
  }.
  Global Instance Get_AF_re : Notations.DoubleColon t "re" := {
    Notations.double_colon (x : M.Val t) := x.["re"];
  }.
  Global Instance Get_im : Notations.Dot "im" := {
    Notations.dot := Ref.map (fun x => x.(im)) (fun v x => x <| im := v |>);
  }.
  Global Instance Get_AF_im : Notations.DoubleColon t "im" := {
    Notations.double_colon (x : M.Val t) := x.["im"];
  }.
End Complex.
End Complex.

Module  Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
Section Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
  Ltac Self := exact foreign_function_interface.Complex.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref ltac:(Self))
      : M foreign_function_interface.Complex.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* _ : M.Val unit := M.alloc tt in
    let* α0 : ref foreign_function_interface.Complex.t := M.read self in
    M.read (deref α0).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
End Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.

Module  Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
Section Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
  Ltac Self := exact foreign_function_interface.Complex.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
End Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.

Module  Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
Section Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
  Ltac Self := exact foreign_function_interface.Complex.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          if self.im < 0. {
              write!(f, "{}-{}i", self.re, -self.im)
          } else {
              write!(f, "{}+{}i", self.re, self.im)
          }
      }
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* f : M.Val (mut_ref core.fmt.Formatter.t) := M.alloc f in
    let* α0 : ref foreign_function_interface.Complex.t := M.read self in
    let* α1 : f32.t := M.read (deref α0).["im"] in
    let* α2 : f32.t := M.read UnsupportedLiteral in
    let* α3 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
      if (use (BinOp.Pure.lt α1 α2) : bool) then
        let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
        let* α1 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "-"; mk_str "i" ] in
        let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
        let* α3 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α2) in
        let* α4 : ref foreign_function_interface.Complex.t := M.read self in
        let* α5 : core.fmt.rt.Argument.t :=
          M.call
            (core.fmt.rt.Argument.t::["new_display"]
              (borrow (deref α4).["re"])) in
        let* α6 : M.Val core.fmt.rt.Argument.t := M.alloc α5 in
        let* α7 : ref foreign_function_interface.Complex.t := M.read self in
        let* α8 : f32.t := M.read (deref α7).["im"] in
        let* α9 : f32.t := UnOp.neg α8 in
        let* α10 : M.Val f32.t := M.alloc α9 in
        let* α11 : core.fmt.rt.Argument.t :=
          M.call (core.fmt.rt.Argument.t::["new_display"] (borrow α10)) in
        let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
        let* α13 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α6; α12 ] in
        let* α14 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α13) in
        let* α15 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α14) in
        let* α16 : core.fmt.Arguments.t :=
          M.call (core.fmt.Arguments.t::["new_v1"] α3 α15) in
        let* α17 : core.result.Result.t unit core.fmt.Error.t :=
          M.call (core.fmt.Formatter.t::["write_fmt"] α0 α16) in
        M.alloc α17
      else
        let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
        let* α1 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "+"; mk_str "i" ] in
        let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
        let* α3 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α2) in
        let* α4 : ref foreign_function_interface.Complex.t := M.read self in
        let* α5 : core.fmt.rt.Argument.t :=
          M.call
            (core.fmt.rt.Argument.t::["new_display"]
              (borrow (deref α4).["re"])) in
        let* α6 : M.Val core.fmt.rt.Argument.t := M.alloc α5 in
        let* α7 : ref foreign_function_interface.Complex.t := M.read self in
        let* α8 : core.fmt.rt.Argument.t :=
          M.call
            (core.fmt.rt.Argument.t::["new_display"]
              (borrow (deref α7).["im"])) in
        let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
        let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6; α9 ] in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α10) in
        let* α12 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α11) in
        let* α13 : core.fmt.Arguments.t :=
          M.call (core.fmt.Arguments.t::["new_v1"] α3 α12) in
        let* α14 : core.result.Result.t unit core.fmt.Error.t :=
          M.call (core.fmt.Formatter.t::["write_fmt"] α0 α13) in
        M.alloc α14 in
    M.read α3.
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
