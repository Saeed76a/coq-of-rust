(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn increase(number: i32) {
    println!("{}", number + 1);
}
*)
Definition increase (number : i32.t) : M unit :=
  let* number : M.Val i32.t := M.alloc number in
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 1 in
        let* α8 : M.Val i32.t := BinOp.add number α7 in
        let* α9 : ref i32.t := borrow α8 in
        let* α10 : M.Val i32.t := deref α9 in
        let* α11 : ref i32.t := borrow α10 in
        let* α12 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α11 in
        let* α13 : M.Val core.fmt.rt.Argument.t := M.alloc α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α13 ] in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (array core.fmt.rt.Argument.t) := deref α15 in
        let* α17 : ref (array core.fmt.rt.Argument.t) := borrow α16 in
        let* α18 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α17 in
        let* α19 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α18 in
        let* α20 : ref (slice core.fmt.rt.Argument.t) := M.read α19 in
        let* α21 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α20 in
        let* α22 : unit := std.io.stdio._print α21 in
        M.alloc α22 in
      M.alloc tt in
    M.alloc tt).

(*
fn decrease(number: i32) {
    println!("{}", number - 1);
}
*)
Definition decrease (number : i32.t) : M unit :=
  let* number : M.Val i32.t := M.alloc number in
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 1 in
        let* α8 : M.Val i32.t := BinOp.sub number α7 in
        let* α9 : ref i32.t := borrow α8 in
        let* α10 : M.Val i32.t := deref α9 in
        let* α11 : ref i32.t := borrow α10 in
        let* α12 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α11 in
        let* α13 : M.Val core.fmt.rt.Argument.t := M.alloc α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α13 ] in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (array core.fmt.rt.Argument.t) := deref α15 in
        let* α17 : ref (array core.fmt.rt.Argument.t) := borrow α16 in
        let* α18 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α17 in
        let* α19 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α18 in
        let* α20 : ref (slice core.fmt.rt.Argument.t) := M.read α19 in
        let* α21 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α20 in
        let* α22 : unit := std.io.stdio._print α21 in
        M.alloc α22 in
      M.alloc tt in
    M.alloc tt).

(*
fn help() {
    println!(
        "usage:
match_args <string>
    Check whether given string is the answer.
match_args {{increase|decrease}} <integer>
    Increase or decrease given integer by one."
    );
}
*)
Definition help : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [
              mk_str
                "usage:
match_args <string>
    Check whether given string is the answer.
match_args {increase|decrease} <integer>
    Increase or decrease given integer by one.
"
            ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_const"] α6 in
        let* α8 : unit := std.io.stdio._print α7 in
        M.alloc α8 in
      M.alloc tt in
    M.alloc tt).

(*
fn main() {
    let args: Vec<String> = env::args().collect();

    match args.len() {
        // no arguments passed
        1 => {
            println!("My name is 'match_args'. Try passing some arguments!");
        }
        // one argument passed
        2 => match args[1].parse() {
            Ok(42) => println!("This is the answer!"),
            _ => println!("This is not the answer."),
        },
        // one command and one argument passed
        3 => {
            let cmd = &args[1];
            let num = &args[2];
            // parse the number
            let number: i32 = match num.parse() {
                Ok(n) => n,
                Err(_) => {
                    eprintln!("error: second argument not an integer");
                    help();
                    return;
                }
            };
            // parse the command
            match &cmd[..] {
                "increase" => increase(number),
                "decrease" => decrease(number),
                _ => {
                    eprintln!("error: invalid command");
                    help();
                }
            }
        }
        // all the other cases
        _ => {
            // show a help message
            help();
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let return_ := M.return_ (R := unit) in
  M.function_body
    (let* args :
        M.Val (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
      let* α0 : std.env.Args.t := std.env.args in
      let* α1 : alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t :=
        (core.iter.traits.iterator.Iterator.collect
            (Self := std.env.Args.t)
            (Trait := ltac:(refine _)))
          α0 in
      M.alloc α1 in
    let* α0 :
        ref (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
      borrow args in
    let* α1 : usize.t :=
      (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)::["len"]
        α0 in
    let* α2 : M.Val usize.t := M.alloc α1 in
    let* α3 := M.read α2 in
    match α3 with
    | _ =>
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc
              [ mk_str "My name is 'match_args'. Try passing some arguments!
"
              ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_const"] α6 in
          let* α8 : unit := std.io.stdio._print α7 in
          M.alloc α8 in
        M.alloc tt in
      M.alloc tt
    | _ =>
      let* α0 :
          ref (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
        borrow args in
      let* α1 : M.Val usize.t := M.alloc 1 in
      let* α2 : usize.t := M.read α1 in
      let* α3 : ref alloc.string.String.t :=
        (core.ops.index.Index.index
            (Self := alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0
          α2 in
      let* α4 : M.Val alloc.string.String.t := deref α3 in
      let* α5 : ref alloc.string.String.t := borrow α4 in
      let* α6 : ref str.t :=
        (core.ops.deref.Deref.deref
            (Self := alloc.string.String.t)
            (Trait := ltac:(refine _)))
          α5 in
      let* α7 : M.Val str.t := deref α6 in
      let* α8 : ref str.t := borrow α7 in
      let* α9 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
        str.t::["parse"] α8 in
      let* α10 :
          M.Val (core.result.Result.t i32.t core.num.error.ParseIntError.t) :=
        M.alloc α9 in
      let* α11 := M.read α10 in
      match α11 with
      | core.result.Result.Ok _ =>
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "This is the answer!
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_const"] α6 in
          let* α8 : unit := std.io.stdio._print α7 in
          M.alloc α8 in
        M.alloc tt
      | _ =>
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "This is not the answer.
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_const"] α6 in
          let* α8 : unit := std.io.stdio._print α7 in
          M.alloc α8 in
        M.alloc tt
      end
    | _ =>
      let* cmd : M.Val (ref alloc.string.String.t) :=
        let* α0 :
            ref (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
          borrow args in
        let* α1 : M.Val usize.t := M.alloc 1 in
        let* α2 : usize.t := M.read α1 in
        let* α3 : ref alloc.string.String.t :=
          (core.ops.index.Index.index
              (Self :=
                alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α0
            α2 in
        let* α4 : M.Val alloc.string.String.t := deref α3 in
        let* α5 : ref alloc.string.String.t := borrow α4 in
        M.alloc α5 in
      let* num : M.Val (ref alloc.string.String.t) :=
        let* α0 :
            ref (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
          borrow args in
        let* α1 : M.Val usize.t := M.alloc 2 in
        let* α2 : usize.t := M.read α1 in
        let* α3 : ref alloc.string.String.t :=
          (core.ops.index.Index.index
              (Self :=
                alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α0
            α2 in
        let* α4 : M.Val alloc.string.String.t := deref α3 in
        let* α5 : ref alloc.string.String.t := borrow α4 in
        M.alloc α5 in
      let* number : M.Val i32.t :=
        let* α0 : ref alloc.string.String.t := M.read num in
        let* α1 : M.Val alloc.string.String.t := deref α0 in
        let* α2 : ref alloc.string.String.t := borrow α1 in
        let* α3 : ref str.t :=
          (core.ops.deref.Deref.deref
              (Self := alloc.string.String.t)
              (Trait := ltac:(refine _)))
            α2 in
        let* α4 : M.Val str.t := deref α3 in
        let* α5 : ref str.t := borrow α4 in
        let* α6 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
          str.t::["parse"] α5 in
        let* α7 :
            M.Val (core.result.Result.t i32.t core.num.error.ParseIntError.t) :=
          M.alloc α6 in
        let* α8 := M.read α7 in
        let* α9 : M.Val i32.t :=
          match α8 with
          | core.result.Result.Ok n =>
            let* n := M.alloc n in
            M.pure n
          | core.result.Result.Err _ =>
            let* _ : M.Val unit :=
              let* _ : M.Val unit :=
                let* α0 : M.Val (array (ref str.t)) :=
                  M.alloc [ mk_str "error: second argument not an integer
" ] in
                let* α1 : ref (array (ref str.t)) := borrow α0 in
                let* α2 : M.Val (array (ref str.t)) := deref α1 in
                let* α3 : ref (array (ref str.t)) := borrow α2 in
                let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
                let* α5 : M.Val (ref (slice (ref str.t))) :=
                  pointer_coercion "Unsize" α4 in
                let* α6 : ref (slice (ref str.t)) := M.read α5 in
                let* α7 : core.fmt.Arguments.t :=
                  core.fmt.Arguments.t::["new_const"] α6 in
                let* α8 : unit := std.io.stdio._eprint α7 in
                M.alloc α8 in
              M.alloc tt in
            let* _ : M.Val unit :=
              let* α0 : unit := program_arguments_parsing.help in
              M.alloc α0 in
            let* _ : M.Val never.t :=
              let* α0 : M.Val unit := M.alloc tt in
              return_ α0 in
            let* α0 : M.Val unit := M.alloc tt in
            never_to_any α0
          end in
        M.copy α9 in
      let* α0 : ref alloc.string.String.t := M.read cmd in
      let* α1 : M.Val alloc.string.String.t := deref α0 in
      let* α2 : ref alloc.string.String.t := borrow α1 in
      let* α3 : ref str.t :=
        (core.ops.index.Index.index
            (Self := alloc.string.String.t)
            (Trait := ltac:(refine _)))
          α2
          core.ops.range.RangeFull.Build_t in
      let* α4 : M.Val str.t := deref α3 in
      let* α5 : ref str.t := borrow α4 in
      let* α6 : M.Val (ref str.t) := M.alloc α5 in
      let* α7 := M.read α6 in
      match α7 with
      | _ =>
        let* α0 : i32.t := M.read number in
        let* α1 : unit := program_arguments_parsing.increase α0 in
        M.alloc α1
      | _ =>
        let* α0 : i32.t := M.read number in
        let* α1 : unit := program_arguments_parsing.decrease α0 in
        M.alloc α1
      | _ =>
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "error: invalid command
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_const"] α6 in
            let* α8 : unit := std.io.stdio._eprint α7 in
            M.alloc α8 in
          M.alloc tt in
        let* _ : M.Val unit :=
          let* α0 : unit := program_arguments_parsing.help in
          M.alloc α0 in
        M.alloc tt
      end
    | _ =>
      let* _ : M.Val unit :=
        let* α0 : unit := program_arguments_parsing.help in
        M.alloc α0 in
      M.alloc tt
    end).
