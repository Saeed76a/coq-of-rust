(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // File hosts must exist in current path before this produces output
    if let Ok(lines) = read_lines("./hosts") {
        // Consumes the iterator, returns an (Optional) String
        for line in lines {
            if let Ok(ip) = line {
                println!("{}", ip);
            }
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* α0 :
        ltac:(refine
          (M.Val
            (core.result.Result.t
              (std.io.Lines.t
                (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
              std.io.error.Error.t))) :=
      file_io_read_lines_efficient_method.read_lines (mk_str "./hosts") in
    let* α1 : ltac:(refine (M.Val bool.t)) :=
      let_if core.result.Result.Ok lines := α0 in
    let* α2 := M.read α1 in
    if (α2 : bool) then
      let* α0 :
          ltac:(refine
            (M.Val
              (std.io.Lines.t
                (std.io.buffered.bufreader.BufReader.t std.fs.File.t)))) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              std.io.Lines.t
                (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
            (Trait := ltac:(refine _)))
          lines in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val unit)) :=
        match α1 with
        | iter =>
          let* iter := M.alloc iter in
          loop
            (let* _ : ltac:(refine (M.Val unit)) :=
              let* α0 :
                  ltac:(refine
                    (M.Val
                      (mut_ref
                        (std.io.Lines.t
                          (std.io.buffered.bufreader.BufReader.t
                            std.fs.File.t))))) :=
                borrow_mut iter in
              let* α1 :
                  ltac:(refine
                    (M.Val
                      (core.option.Option.t
                        (core.result.Result.t
                          alloc.string.String.t
                          std.io.error.Error.t)))) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self :=
                      std.io.Lines.t
                        (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine (M.Val never.t)) := Break in
                never_to_any α0
              | core.option.Option.Some line =>
                let* line := M.alloc line in
                let* α0 : ltac:(refine (M.Val bool.t)) :=
                  let_if core.result.Result.Ok ip := line in
                let* α1 := M.read α0 in
                if (α1 : bool) then
                  let* _ : ltac:(refine (M.Val unit)) :=
                    let* _ : ltac:(refine (M.Val unit)) :=
                      let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
                        M.alloc [ mk_str ""; mk_str "
" ] in
                      let* α1 :
                          ltac:(refine (M.Val (ref (array (ref str.t))))) :=
                        borrow α0 in
                      let* α2 :
                          ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
                        pointer_coercion "Unsize" α1 in
                      let* α3 :
                          ltac:(refine (M.Val (ref alloc.string.String.t))) :=
                        borrow ip in
                      let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                        core.fmt.rt.Argument.t::["new_display"] α3 in
                      let* α5 :
                          ltac:(refine
                            (M.Val (array core.fmt.rt.Argument.t))) :=
                        M.alloc [ α4 ] in
                      let* α6 :
                          ltac:(refine
                            (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
                        borrow α5 in
                      let* α7 :
                          ltac:(refine
                            (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
                        pointer_coercion "Unsize" α6 in
                      let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                        core.fmt.Arguments.t::["new_v1"] α2 α7 in
                      std.io.stdio._print α8 in
                    M.alloc tt in
                  M.alloc tt
                else
                  M.alloc tt
              end in
            M.alloc tt)
        end in
      use α2
    else
      M.alloc tt).

(*
fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where
    P: AsRef<Path>,
{
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}
*)
Definition read_lines
    {P : Set}
    {ℋ_0 : core.convert.AsRef.Trait P (T := std.path.Path.t)}
    (filename : M.Val P)
    :
      M
        (M.Val
          ltac:(std.io.error.Result
            (std.io.Lines.t
              (std.io.buffered.bufreader.BufReader.t std.fs.File.t)))) :=
  M.function_body
    (let* file : ltac:(refine (M.Val std.fs.File.t)) :=
      let* α0 :
          ltac:(refine
            (M.Val
              (core.result.Result.t std.fs.File.t std.io.error.Error.t))) :=
        std.fs.File.t::["open"] filename in
      let* α1 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  std.io.error.Error.t)
                std.fs.File.t))) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result.t std.fs.File.t std.io.error.Error.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 := M.read α1 in
      match α2 with
      | core.ops.control_flow.ControlFlow.Break residual =>
        let* residual := M.alloc residual in
        let* α0 :
            ltac:(refine
              (M.Val
                (core.result.Result.t
                  (std.io.Lines.t
                    (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
                  std.io.error.Error.t))) :=
          (core.ops.try_trait.FromResidual.from_residual
              (Self :=
                core.result.Result.t
                  (std.io.Lines.t
                    (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
                  std.io.error.Error.t)
              (Trait := ltac:(refine _)))
            residual in
        let* α1 : ltac:(refine (M.Val never.t)) := M.return_ α0 in
        never_to_any α1
      | core.ops.control_flow.ControlFlow.Continue val =>
        let* val := M.alloc val in
        M.pure val
      end in
    let* α0 :
        ltac:(refine
          (M.Val (std.io.buffered.bufreader.BufReader.t std.fs.File.t))) :=
      (std.io.buffered.bufreader.BufReader.t std.fs.File.t)::["new"] file in
    let* α1 :
        ltac:(refine
          (M.Val
            (std.io.Lines.t
              (std.io.buffered.bufreader.BufReader.t std.fs.File.t)))) :=
      (std.io.BufRead.lines
          (Self := std.io.buffered.bufreader.BufReader.t std.fs.File.t)
          (Trait := ltac:(refine _)))
        α0 in
    let* α2 := M.read α1 in
    M.alloc (core.result.Result.Ok α2)).
