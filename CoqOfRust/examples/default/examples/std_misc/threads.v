(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NTHREADS : u32.t := M.run (M.alloc (Integer.of_Z 10)).

(*
fn main() {
    // Make a vector to hold the children which are spawned.
    let mut children = vec![];

    for i in 0..NTHREADS {
        // Spin up another thread
        children.push(thread::spawn(move || {
            println!("this is thread number {}", i);
        }));
    }

    for child in children {
        // Wait for the thread to finish. Returns a result.
        let _ = child.join();
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* children :
      M.Val
        (alloc.vec.Vec.t (std.thread.JoinHandle.t unit) alloc.alloc.Global.t) :=
    let* α0 :
        alloc.vec.Vec.t (std.thread.JoinHandle.t unit) alloc.alloc.Global.t :=
      M.call
        (alloc.vec.Vec.t
            (std.thread.JoinHandle.t unit)
            alloc.alloc.Global.t)::["new"] in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : u32.t := M.read threads.NTHREADS in
    let* α1 : core.ops.range.Range.t u32.t :=
      M.call
        ((core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range.t u32.t)
            (Trait := ltac:(refine _)))
          {|
            core.ops.range.Range.start := Integer.of_Z 0;
            core.ops.range.Range.end := α0;
          |}) in
    let* α2 : M.Val unit :=
      match α1 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : M.Val unit :=
            let* α0 : core.option.Option.t u32.t :=
              M.call
                ((core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range.t u32.t)
                    (Trait := ltac:(refine _)))
                  (borrow_mut iter)) in
            match α0 with
            | core.option.Option.None  =>
              let* α0 : M.Val never.t := Break in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            | core.option.Option.Some i =>
              let* i := M.alloc i in
              let* _ : M.Val unit :=
                let* α0 : type not implemented :=
                  M.read
                    (let* _ : M.Val unit :=
                      let* _ : M.Val unit :=
                        let* α0 : M.Val (array (ref str.t)) :=
                          M.alloc
                            [ mk_str "this is thread number "; mk_str "
" ] in
                        let* α1 : M.Val (ref (array (ref str.t))) :=
                          M.alloc (borrow α0) in
                        let* α2 : ref (slice (ref str.t)) :=
                          M.read (pointer_coercion "Unsize" α1) in
                        let* α3 : core.fmt.rt.Argument.t :=
                          M.call
                            (core.fmt.rt.Argument.t::["new_display"]
                              (borrow i)) in
                        let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
                        let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                          M.alloc [ α4 ] in
                        let* α6 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                          M.alloc (borrow α5) in
                        let* α7 : ref (slice core.fmt.rt.Argument.t) :=
                          M.read (pointer_coercion "Unsize" α6) in
                        let* α8 : core.fmt.Arguments.t :=
                          M.call (core.fmt.Arguments.t::["new_v1"] α2 α7) in
                        let* α9 : unit := M.call (std.io.stdio._print α8) in
                        M.alloc α9 in
                      M.alloc tt in
                    M.alloc tt) in
                let* α1 : std.thread.JoinHandle.t unit :=
                  M.call (std.thread.spawn α0) in
                let* α2 : unit :=
                  M.call
                    ((alloc.vec.Vec.t
                          (std.thread.JoinHandle.t unit)
                          alloc.alloc.Global.t)::["push"]
                      (borrow_mut children)
                      α1) in
                M.alloc α2 in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    let* α3 : unit := M.read α2 in
    M.alloc (use α3) in
  let* α0 :
      alloc.vec.Vec.t (std.thread.JoinHandle.t unit) alloc.alloc.Global.t :=
    M.read children in
  let* α1 :
      alloc.vec.into_iter.IntoIter.t
        (std.thread.JoinHandle.t unit)
        alloc.alloc.Global.t :=
    M.call
      ((core.iter.traits.collect.IntoIterator.into_iter
          (Self :=
            alloc.vec.Vec.t (std.thread.JoinHandle.t unit) alloc.alloc.Global.t)
          (Trait := ltac:(refine _)))
        α0) in
  let* α2 : M.Val unit :=
    match α1 with
    | iter =>
      let* iter := M.alloc iter in
      loop
        (let* _ : M.Val unit :=
          let* α0 : core.option.Option.t (std.thread.JoinHandle.t unit) :=
            M.call
              ((core.iter.traits.iterator.Iterator.next
                  (Self :=
                    alloc.vec.into_iter.IntoIter.t
                      (std.thread.JoinHandle.t unit)
                      alloc.alloc.Global.t)
                  (Trait := ltac:(refine _)))
                (borrow_mut iter)) in
          match α0 with
          | core.option.Option.None  =>
            let* α0 : M.Val never.t := Break in
            let* α1 := M.read α0 in
            let* α2 : unit := never_to_any α1 in
            M.alloc α2
          | core.option.Option.Some child =>
            let* child := M.alloc child in
            let* _ :
                M.Val
                  (core.result.Result.t
                    unit
                    (alloc.boxed.Box.t
                      type not implemented
                      alloc.alloc.Global.t)) :=
              let* α0 : std.thread.JoinHandle.t unit := M.read child in
              let* α1 :
                  core.result.Result.t
                    unit
                    (alloc.boxed.Box.t
                      type not implemented
                      alloc.alloc.Global.t) :=
                M.call ((std.thread.JoinHandle.t unit)::["join"] α0) in
              M.alloc α1 in
            M.alloc tt
          end in
        M.alloc tt)
    end in
  let* α3 : unit := M.read α2 in
  let* α0 : M.Val unit := M.alloc (use α3) in
  M.read α0.
