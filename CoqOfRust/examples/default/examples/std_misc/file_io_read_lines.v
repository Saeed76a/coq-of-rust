(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn read_lines(filename: String) -> io::Lines<BufReader<File>> {
    // Open the file in read-only mode.
    let file = File::open(filename).unwrap();
    // Read the file line by line, and return an iterator of the lines of the file.
    return io::BufReader::new(file).lines();
}
*)
Definition read_lines
    (filename : alloc.string.String.t)
    :
      M
        (std.io.Lines.t
          (std.io.buffered.bufreader.BufReader.t std.fs.File.t)) :=
  let return_ :=
    M.return_
      (R :=
        std.io.Lines.t (std.io.buffered.bufreader.BufReader.t std.fs.File.t)) in
  let* filename := M.alloc filename in
  M.function_body
    (let* file : M.Val std.fs.File.t :=
      let* α0 := M.read filename in
      let* α1 := std.fs.File.t::["open"] α0 in
      let* α2 :=
        (core.result.Result.t std.fs.File.t std.io.error.Error.t)::["unwrap"]
          α1 in
      M.alloc α2 in
    let* _ : M.Val never.t :=
      let* α0 := M.read file in
      let* α1 :=
        (std.io.buffered.bufreader.BufReader.t std.fs.File.t)::["new"] α0 in
      let* α2 :=
        (std.io.BufRead.lines
            (Self := std.io.buffered.bufreader.BufReader.t std.fs.File.t)
            (Trait := ltac:(refine _)))
          α1 in
      return_ α2 in
    let* α0 : M.Val unit := M.alloc tt in
    never_to_any α0).

(*
fn main() {
    // Stores the iterator of lines of the file in lines variable.
    let lines = read_lines("./hosts".to_string());
    // Iterate over the lines of the file, and in this case print them.
    for line in lines {
        println!("{}", line.unwrap());
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* lines :
        M.Val
          (std.io.Lines.t
            (std.io.buffered.bufreader.BufReader.t std.fs.File.t)) :=
      let* α0 : M.Val str.t := deref (mk_str "./hosts") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 :=
        (alloc.string.ToString.to_string
            (Self := str.t)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 := file_io_read_lines.read_lines α3 in
      M.alloc α4 in
    let* α0 := M.read lines in
    let* α1 :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self :=
            std.io.Lines.t
              (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
          (Trait := ltac:(refine _)))
        α0 in
    let* α2 :
        M.Val
          (std.io.Lines.t
            (std.io.buffered.bufreader.BufReader.t std.fs.File.t)) :=
      M.alloc α1 in
    let* α3 := M.read α2 in
    let* α4 : M.Val unit :=
      match α3 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : M.Val unit :=
            let* α0 :
                M.Val
                  (mut_ref
                    (std.io.Lines.t
                      (std.io.buffered.bufreader.BufReader.t std.fs.File.t))) :=
              borrow_mut iter in
            let* α1 := M.read α0 in
            let* α2 :=
              (core.iter.traits.iterator.Iterator.next
                  (Self :=
                    std.io.Lines.t
                      (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
                  (Trait := ltac:(refine _)))
                α1 in
            let* α3 :
                M.Val
                  (core.option.Option.t
                    (core.result.Result.t
                      alloc.string.String.t
                      std.io.error.Error.t)) :=
              M.alloc α2 in
            let* α4 := M.read α3 in
            match α4 with
            | core.option.Option.None  =>
              let* α0 : M.Val never.t := Break in
              never_to_any α0
            | core.option.Option.Some line =>
              let* line := M.alloc line in
              let* _ : M.Val unit :=
                let* _ : M.Val unit :=
                  let* α0 : M.Val (array (ref str.t)) :=
                    M.alloc [ mk_str ""; mk_str "
" ] in
                  let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
                  let* α2 : M.Val (ref (slice (ref str.t))) :=
                    pointer_coercion "Unsize" α1 in
                  let* α3 := M.read α2 in
                  let* α4 := M.read line in
                  let* α5 :=
                    (core.result.Result.t
                          alloc.string.String.t
                          std.io.error.Error.t)::["unwrap"]
                      α4 in
                  let* α6 : M.Val alloc.string.String.t := M.alloc α5 in
                  let* α7 : M.Val (ref alloc.string.String.t) := borrow α6 in
                  let* α8 := M.read α7 in
                  let* α9 := core.fmt.rt.Argument.t::["new_display"] α8 in
                  let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
                  let* α11 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α10 ] in
                  let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                    borrow α11 in
                  let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                    pointer_coercion "Unsize" α12 in
                  let* α14 := M.read α13 in
                  let* α15 := core.fmt.Arguments.t::["new_v1"] α3 α14 in
                  let* α16 := std.io.stdio._print α15 in
                  M.alloc α16 in
                M.alloc tt in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α4).
