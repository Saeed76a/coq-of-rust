(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let args: Vec<String> = env::args().collect();

    // The first argument is the path that was used to call the program.
    println!("My path is {}.", args[0]);

    // The rest of the arguments are the passed command line parameters.
    // Call the program like this:
    //   $ ./args arg1 arg2
    println!("I got {:?} arguments: {:?}.", args.len() - 1, &args[1..]);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* args :
      M.Val (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
    let* α0 : std.env.Args.t := M.call std.env.args in
    let* α1 : alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t :=
      M.call
        ((core.iter.traits.iterator.Iterator.collect
            (Self := std.env.Args.t)
            (Trait := ltac:(refine _)))
          α0) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "My path is ") in
      let* α1 : ref str.t := M.read (mk_str ".\n") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : ref alloc.string.String.t :=
        M.call
          ((core.ops.index.Index.index
              (Self :=
                alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            (borrow args)
            (Integer.of_Z 0)) in
      let* α6 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] α5) in
      let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6 ] in
      let* α8 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α7) in
      let* α9 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α8) in
      let* α10 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α4 α9) in
      let* α11 : unit := M.call (std.io.stdio._print α10) in
      M.alloc α11 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "I got ") in
      let* α1 : ref str.t := M.read (mk_str " arguments: ") in
      let* α2 : ref str.t := M.read (mk_str ".\n") in
      let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
      let* α4 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α3) in
      let* α5 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α4) in
      let* α6 : usize.t :=
        M.call
          ((alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)::["len"]
            (borrow args)) in
      let* α7 : usize.t := BinOp.Panic.sub α6 (Integer.of_Z 1) in
      let* α8 : M.Val usize.t := M.alloc α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow α8)) in
      let* α10 : ref (slice alloc.string.String.t) :=
        M.call
          ((core.ops.index.Index.index
              (Self :=
                alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            (borrow args)
            {| core.ops.range.RangeFrom.start := Integer.of_Z 1; |}) in
      let* α11 : M.Val (ref (slice alloc.string.String.t)) := M.alloc α10 in
      let* α12 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow α11)) in
      let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α9; α12 ] in
      let* α14 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α13) in
      let* α15 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α14) in
      let* α16 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α5 α15) in
      let* α17 : unit := M.call (std.io.stdio._print α16) in
      M.alloc α17 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
