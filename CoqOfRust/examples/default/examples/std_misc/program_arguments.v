(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let args: Vec<String> = env::args().collect();

    // The first argument is the path that was used to call the program.
    println!("My path is {}.", args[0]);

    // The rest of the arguments are the passed command line parameters.
    // Call the program like this:
    //   $ ./args arg1 arg2
    println!("I got {:?} arguments: {:?}.", args.len() - 1, &args[1..]);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* args :
      M.Val (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
    let* α0 : std.env.Args.t := std.env.args in
    let* α1 : alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t :=
      (core.iter.traits.iterator.Iterator.collect
          (Self := std.env.Args.t)
          (Trait := ltac:(refine _)))
        α0 in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "My path is "; mk_str ".
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : ref alloc.string.String.t :=
        (core.ops.index.Index.index
            (Self := alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          (borrow args)
          (Integer.of_Z 0) in
      let* α4 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α3 in
      let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
      let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
      let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α6) in
      let* α8 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α7) in
      let* α9 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α2 α8 in
      let* α10 : unit := std.io.stdio._print α9 in
      M.alloc α10 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "I got "; mk_str " arguments: "; mk_str ".
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : usize.t :=
        (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)::["len"]
          (borrow args) in
      let* α4 : usize.t := BinOp.Panic.sub α3 (Integer.of_Z 1) in
      let* α5 : M.Val usize.t := M.alloc α4 in
      let* α6 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_debug"] (borrow α5) in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : ref (slice alloc.string.String.t) :=
        (core.ops.index.Index.index
            (Self := alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          (borrow args)
          {| core.ops.range.RangeFrom.start := Integer.of_Z 1; |} in
      let* α9 : M.Val (ref (slice alloc.string.String.t)) := M.alloc α8 in
      let* α10 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_debug"] (borrow α9) in
      let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
      let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7; α11 ] in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α12) in
      let* α14 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α13) in
      let* α15 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α2 α14 in
      let* α16 : unit := std.io.stdio._print α15 in
      M.alloc α16 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
