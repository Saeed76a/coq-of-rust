(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn cat(path: &Path) -> io::Result<String> {
    let mut f = File::open(path)?;
    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
*)
Definition cat
    (path : M.Val (ref std.path.Path.t))
    : M ltac:(std.io.error.Result alloc.string.String.t) :=
  let return_ :=
    M.return_ (R := ltac:(std.io.error.Result alloc.string.String.t)) in
  M.function_body
    (let* f : M.Val std.fs.File.t :=
      let* α0 := std.fs.File.t::["open"] path in
      let* α1 :
          M.Val (core.result.Result.t std.fs.File.t std.io.error.Error.t) :=
        M.alloc α0 in
      let* α2 :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result.t std.fs.File.t std.io.error.Error.t)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 :
          M.Val
            (core.ops.control_flow.ControlFlow.t
              (core.result.Result.t
                core.convert.Infallible.t
                std.io.error.Error.t)
              std.fs.File.t) :=
        M.alloc α2 in
      let* α4 := M.read α3 in
      let* α5 : M.Val std.fs.File.t :=
        match α4 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result.t
                    alloc.string.String.t
                    std.io.error.Error.t)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : M.Val never.t := return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      M.copy α5 in
    let* s : M.Val alloc.string.String.t :=
      let* α0 := alloc.string.String.t::["new"] in
      M.alloc α0 in
    let* α0 : M.Val (mut_ref std.fs.File.t) := borrow_mut f in
    let* α1 : M.Val (mut_ref alloc.string.String.t) := borrow_mut s in
    let* α2 :=
      (std.io.Read.read_to_string
          (Self := std.fs.File.t)
          (Trait := ltac:(refine _)))
        α0
        α1 in
    let* α3 : M.Val (core.result.Result.t usize.t std.io.error.Error.t) :=
      M.alloc α2 in
    let* α4 := M.read α3 in
    match α4 with
    | core.result.Result.Ok _ =>
      let* α0 := M.read s in
      M.alloc (core.result.Result.Ok α0)
    | core.result.Result.Err e =>
      let* e := M.alloc e in
      let* α0 := M.read e in
      M.alloc (core.result.Result.Err α0)
    end).

(*
fn echo(s: &str, path: &Path) -> io::Result<()> {
    let mut f = File::create(path)?;

    f.write_all(s.as_bytes())
}
*)
Definition echo
    (s : M.Val (ref str.t))
    (path : M.Val (ref std.path.Path.t))
    : M ltac:(std.io.error.Result unit) :=
  let return_ := M.return_ (R := ltac:(std.io.error.Result unit)) in
  M.function_body
    (let* f : M.Val std.fs.File.t :=
      let* α0 := std.fs.File.t::["create"] path in
      let* α1 :
          M.Val (core.result.Result.t std.fs.File.t std.io.error.Error.t) :=
        M.alloc α0 in
      let* α2 :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result.t std.fs.File.t std.io.error.Error.t)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 :
          M.Val
            (core.ops.control_flow.ControlFlow.t
              (core.result.Result.t
                core.convert.Infallible.t
                std.io.error.Error.t)
              std.fs.File.t) :=
        M.alloc α2 in
      let* α4 := M.read α3 in
      let* α5 : M.Val std.fs.File.t :=
        match α4 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := core.result.Result.t unit std.io.error.Error.t)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : M.Val never.t := return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      M.copy α5 in
    let* α0 : M.Val (mut_ref std.fs.File.t) := borrow_mut f in
    let* α1 : M.Val str.t := deref s in
    let* α2 : M.Val (ref str.t) := borrow α1 in
    let* α3 := str.t::["as_bytes"] α2 in
    let* α4 : M.Val (ref (slice u8.t)) := M.alloc α3 in
    let* α5 : M.Val (slice u8.t) := deref α4 in
    let* α6 : M.Val (ref (slice u8.t)) := borrow α5 in
    let* α7 :=
      (std.io.Write.write_all
          (Self := std.fs.File.t)
          (Trait := ltac:(refine _)))
        α0
        α6 in
    M.alloc α7).

(*
fn touch(path: &Path) -> io::Result<()> {
    match OpenOptions::new().create(true).write(true).open(path) {
        Ok(_) => Ok(()),
        Err(e) => Err(e),
    }
}
*)
Definition touch
    (path : M.Val (ref std.path.Path.t))
    : M ltac:(std.io.error.Result unit) :=
  M.function_body
    (let* α0 := std.fs.OpenOptions.t::["new"] in
    let* α1 : M.Val std.fs.OpenOptions.t := M.alloc α0 in
    let* α2 : M.Val (mut_ref std.fs.OpenOptions.t) := borrow_mut α1 in
    let* α3 : M.Val bool.t := M.alloc true in
    let* α4 := std.fs.OpenOptions.t::["create"] α2 α3 in
    let* α5 : M.Val (mut_ref std.fs.OpenOptions.t) := M.alloc α4 in
    let* α6 : M.Val std.fs.OpenOptions.t := deref α5 in
    let* α7 : M.Val (mut_ref std.fs.OpenOptions.t) := borrow_mut α6 in
    let* α8 : M.Val bool.t := M.alloc true in
    let* α9 := std.fs.OpenOptions.t::["write"] α7 α8 in
    let* α10 : M.Val (mut_ref std.fs.OpenOptions.t) := M.alloc α9 in
    let* α11 : M.Val std.fs.OpenOptions.t := deref α10 in
    let* α12 : M.Val (ref std.fs.OpenOptions.t) := borrow α11 in
    let* α13 := std.fs.OpenOptions.t::["open"] α12 path in
    let* α14 :
        M.Val (core.result.Result.t std.fs.File.t std.io.error.Error.t) :=
      M.alloc α13 in
    let* α15 := M.read α14 in
    match α15 with
    | core.result.Result.Ok _ => M.alloc (core.result.Result.Ok tt)
    | core.result.Result.Err e =>
      let* e := M.alloc e in
      let* α0 := M.read e in
      M.alloc (core.result.Result.Err α0)
    end).

(*
fn main() {
    println!("`mkdir a`");
    // Create a directory, returns `io::Result<()>`
    match fs::create_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(_) => {}
    }

    println!("`echo hello > a/b.txt`");
    // The previous match can be simplified using the `unwrap_or_else` method
    echo("hello", &Path::new("a/b.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`mkdir -p a/c/d`");
    // Recursively create a directory, returns `io::Result<()>`
    fs::create_dir_all("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`touch a/c/e.txt`");
    touch(&Path::new("a/c/e.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`ln -s ../b.txt a/c/b.txt`");
    // Create a symbolic link, returns `io::Result<()>`
    if cfg!(target_family = "unix") {
        unix::fs::symlink("../b.txt", "a/c/b.txt").unwrap_or_else(|why| {
            println!("! {:?}", why.kind());
        });
    }

    println!("`cat a/c/b.txt`");
    match cat(&Path::new("a/c/b.txt")) {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(s) => println!("> {}", s),
    }

    println!("`ls a`");
    // Read the contents of a directory, returns `io::Result<Vec<Path>>`
    match fs::read_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(paths) => {
            for path in paths {
                println!("> {:?}", path.unwrap().path());
            }
        }
    }

    println!("`rm a/c/e.txt`");
    // Remove a file, returns `io::Result<()>`
    fs::remove_file("a/c/e.txt").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`rmdir a/c/d`");
    // Remove an empty directory, returns `io::Result<()>`
    fs::remove_dir("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "`mkdir a`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 := std.fs.create_dir (mk_str "a") in
      let* α1 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
        M.alloc α0 in
      let* α2 := M.read α1 in
      match α2 with
      | core.result.Result.Err why =>
        let* why := M.alloc why in
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "! "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
          let* α4 := std.io.error.Error.t::["kind"] α3 in
          let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
          let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
          let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
          let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
          let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
          let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α9 in
          let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
          let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
          let* α14 := std.io.stdio._print α13 in
          M.alloc α14 in
        M.alloc tt
      | core.result.Result.Ok _ => M.alloc tt
      end in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "`echo hello > a/b.txt`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : M.Val str.t := deref (mk_str "hello") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 : M.Val str.t := deref (mk_str "a/b.txt") in
      let* α3 : M.Val (ref str.t) := borrow α2 in
      let* α4 := std.path.Path.t::["new"] α3 in
      let* α5 : M.Val (ref std.path.Path.t) := M.alloc α4 in
      let* α6 : M.Val std.path.Path.t := deref α5 in
      let* α7 : M.Val (ref std.path.Path.t) := borrow α6 in
      let* α8 := filesystem_operations.echo α1 α7 in
      let* α9 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
        M.alloc α8 in
      let* α10 :=
        (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
          α9
          (let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "! "; mk_str "
" ] in
              let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
              let* α2 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
              let* α4 := std.io.error.Error.t::["kind"] α3 in
              let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
              let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
              let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
              let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
              let* α9 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α8 ] in
              let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                borrow α9 in
              let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                pointer_coercion "Unsize" α10 in
              let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
              let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
              let* α14 := std.io.stdio._print α13 in
              M.alloc α14 in
            M.alloc tt in
          M.alloc tt) in
      M.alloc α10 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "`mkdir -p a/c/d`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 := std.fs.create_dir_all (mk_str "a/c/d") in
      let* α1 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
        M.alloc α0 in
      let* α2 :=
        (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
          α1
          (let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "! "; mk_str "
" ] in
              let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
              let* α2 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
              let* α4 := std.io.error.Error.t::["kind"] α3 in
              let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
              let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
              let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
              let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
              let* α9 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α8 ] in
              let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                borrow α9 in
              let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                pointer_coercion "Unsize" α10 in
              let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
              let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
              let* α14 := std.io.stdio._print α13 in
              M.alloc α14 in
            M.alloc tt in
          M.alloc tt) in
      M.alloc α2 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "`touch a/c/e.txt`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : M.Val str.t := deref (mk_str "a/c/e.txt") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := std.path.Path.t::["new"] α1 in
      let* α3 : M.Val (ref std.path.Path.t) := M.alloc α2 in
      let* α4 : M.Val std.path.Path.t := deref α3 in
      let* α5 : M.Val (ref std.path.Path.t) := borrow α4 in
      let* α6 := filesystem_operations.touch α5 in
      let* α7 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
        M.alloc α6 in
      let* α8 :=
        (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
          α7
          (let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "! "; mk_str "
" ] in
              let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
              let* α2 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
              let* α4 := std.io.error.Error.t::["kind"] α3 in
              let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
              let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
              let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
              let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
              let* α9 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α8 ] in
              let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                borrow α9 in
              let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                pointer_coercion "Unsize" α10 in
              let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
              let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
              let* α14 := std.io.stdio._print α13 in
              M.alloc α14 in
            M.alloc tt in
          M.alloc tt) in
      M.alloc α8 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "`ln -s ../b.txt a/c/b.txt`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : M.Val bool.t := M.alloc true in
      let* α1 : M.Val bool.t := use α0 in
      let* α2 := M.read α1 in
      if (α2 : bool) then
        let* _ : M.Val unit :=
          let* α0 :=
            std.os.unix.fs.symlink (mk_str "../b.txt") (mk_str "a/c/b.txt") in
          let* α1 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
            M.alloc α0 in
          let* α2 :=
            (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
              α1
              (let* _ : M.Val unit :=
                let* _ : M.Val unit :=
                  let* α0 : M.Val (array (ref str.t)) :=
                    M.alloc [ mk_str "! "; mk_str "
" ] in
                  let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
                  let* α2 : M.Val (ref (slice (ref str.t))) :=
                    pointer_coercion "Unsize" α1 in
                  let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
                  let* α4 := std.io.error.Error.t::["kind"] α3 in
                  let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
                  let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
                  let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
                  let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
                  let* α9 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α8 ] in
                  let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                    borrow α9 in
                  let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                    pointer_coercion "Unsize" α10 in
                  let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
                  let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
                  let* α14 := std.io.stdio._print α13 in
                  M.alloc α14 in
                M.alloc tt in
              M.alloc tt) in
          M.alloc α2 in
        M.alloc tt
      else
        M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "`cat a/c/b.txt`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : M.Val str.t := deref (mk_str "a/c/b.txt") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := std.path.Path.t::["new"] α1 in
      let* α3 : M.Val (ref std.path.Path.t) := M.alloc α2 in
      let* α4 : M.Val std.path.Path.t := deref α3 in
      let* α5 : M.Val (ref std.path.Path.t) := borrow α4 in
      let* α6 := filesystem_operations.cat α5 in
      let* α7 :
          M.Val
            (core.result.Result.t alloc.string.String.t std.io.error.Error.t) :=
        M.alloc α6 in
      let* α8 := M.read α7 in
      match α8 with
      | core.result.Result.Err why =>
        let* why := M.alloc why in
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "! "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
          let* α4 := std.io.error.Error.t::["kind"] α3 in
          let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
          let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
          let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
          let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
          let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
          let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α9 in
          let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
          let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
          let* α14 := std.io.stdio._print α13 in
          M.alloc α14 in
        M.alloc tt
      | core.result.Result.Ok s =>
        let* s := M.alloc s in
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "> "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : M.Val (ref alloc.string.String.t) := borrow s in
          let* α4 := core.fmt.rt.Argument.t::["new_display"] α3 in
          let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
          let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
          let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α6 in
          let* α8 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α7 in
          let* α9 := core.fmt.Arguments.t::["new_v1"] α2 α8 in
          let* α10 : M.Val core.fmt.Arguments.t := M.alloc α9 in
          let* α11 := std.io.stdio._print α10 in
          M.alloc α11 in
        M.alloc tt
      end in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) := M.alloc [ mk_str "`ls a`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 := std.fs.read_dir (mk_str "a") in
      let* α1 :
          M.Val (core.result.Result.t std.fs.ReadDir.t std.io.error.Error.t) :=
        M.alloc α0 in
      let* α2 := M.read α1 in
      match α2 with
      | core.result.Result.Err why =>
        let* why := M.alloc why in
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "! "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
          let* α4 := std.io.error.Error.t::["kind"] α3 in
          let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
          let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
          let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
          let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
          let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
          let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α9 in
          let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
          let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
          let* α14 := std.io.stdio._print α13 in
          M.alloc α14 in
        M.alloc tt
      | core.result.Result.Ok paths =>
        let* paths := M.alloc paths in
        let* α0 :=
          (core.iter.traits.collect.IntoIterator.into_iter
              (Self := std.fs.ReadDir.t)
              (Trait := ltac:(refine _)))
            paths in
        let* α1 : M.Val std.fs.ReadDir.t := M.alloc α0 in
        let* α2 := M.read α1 in
        let* α3 : M.Val unit :=
          match α2 with
          | iter =>
            let* iter := M.alloc iter in
            loop
              (let* _ : M.Val unit :=
                let* α0 : M.Val (mut_ref std.fs.ReadDir.t) := borrow_mut iter in
                let* α1 :=
                  (core.iter.traits.iterator.Iterator.next
                      (Self := std.fs.ReadDir.t)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 :
                    M.Val
                      (core.option.Option.t
                        (core.result.Result.t
                          std.fs.DirEntry.t
                          std.io.error.Error.t)) :=
                  M.alloc α1 in
                let* α3 := M.read α2 in
                match α3 with
                | core.option.Option.None  =>
                  let* α0 : M.Val never.t := Break in
                  never_to_any α0
                | core.option.Option.Some path =>
                  let* path := M.alloc path in
                  let* _ : M.Val unit :=
                    let* _ : M.Val unit :=
                      let* α0 : M.Val (array (ref str.t)) :=
                        M.alloc [ mk_str "> "; mk_str "
" ] in
                      let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
                      let* α2 : M.Val (ref (slice (ref str.t))) :=
                        pointer_coercion "Unsize" α1 in
                      let* α3 :=
                        (core.result.Result.t
                              std.fs.DirEntry.t
                              std.io.error.Error.t)::["unwrap"]
                          path in
                      let* α4 : M.Val std.fs.DirEntry.t := M.alloc α3 in
                      let* α5 : M.Val (ref std.fs.DirEntry.t) := borrow α4 in
                      let* α6 := std.fs.DirEntry.t::["path"] α5 in
                      let* α7 : M.Val std.path.PathBuf.t := M.alloc α6 in
                      let* α8 : M.Val (ref std.path.PathBuf.t) := borrow α7 in
                      let* α9 := core.fmt.rt.Argument.t::["new_debug"] α8 in
                      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
                      let* α11 : M.Val (array core.fmt.rt.Argument.t) :=
                        M.alloc [ α10 ] in
                      let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                        borrow α11 in
                      let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                        pointer_coercion "Unsize" α12 in
                      let* α14 := core.fmt.Arguments.t::["new_v1"] α2 α13 in
                      let* α15 : M.Val core.fmt.Arguments.t := M.alloc α14 in
                      let* α16 := std.io.stdio._print α15 in
                      M.alloc α16 in
                    M.alloc tt in
                  M.alloc tt
                end in
              M.alloc tt)
          end in
        use α3
      end in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "`rm a/c/e.txt`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 := std.fs.remove_file (mk_str "a/c/e.txt") in
      let* α1 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
        M.alloc α0 in
      let* α2 :=
        (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
          α1
          (let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "! "; mk_str "
" ] in
              let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
              let* α2 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
              let* α4 := std.io.error.Error.t::["kind"] α3 in
              let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
              let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
              let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
              let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
              let* α9 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α8 ] in
              let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                borrow α9 in
              let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                pointer_coercion "Unsize" α10 in
              let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
              let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
              let* α14 := std.io.stdio._print α13 in
              M.alloc α14 in
            M.alloc tt in
          M.alloc tt) in
      M.alloc α2 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "`rmdir a/c/d`
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 := std.fs.remove_dir (mk_str "a/c/d") in
      let* α1 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
        M.alloc α0 in
      let* α2 :=
        (core.result.Result.t unit std.io.error.Error.t)::["unwrap_or_else"]
          α1
          (let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "! "; mk_str "
" ] in
              let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
              let* α2 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : M.Val (ref std.io.error.Error.t) := borrow why in
              let* α4 := std.io.error.Error.t::["kind"] α3 in
              let* α5 : M.Val std.io.error.ErrorKind.t := M.alloc α4 in
              let* α6 : M.Val (ref std.io.error.ErrorKind.t) := borrow α5 in
              let* α7 := core.fmt.rt.Argument.t::["new_debug"] α6 in
              let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
              let* α9 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α8 ] in
              let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                borrow α9 in
              let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                pointer_coercion "Unsize" α10 in
              let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
              let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
              let* α14 := std.io.stdio._print α13 in
              M.alloc α14 in
            M.alloc tt in
          M.alloc tt) in
      M.alloc α2 in
    M.alloc tt).
