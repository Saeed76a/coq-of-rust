(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn gen_range() -> u32 {
    todo!()
}
*)
Definition gen_range : M u32.t :=
  M.function_body
    (let* α0 : ref str.t := M.read (mk_str "not yet implemented") in
    let* α1 : never.t := core.panicking.panic α0 in
    let* α2 : M.Val never.t := M.alloc α1 in
    let* α3 : M.Val u32.t := never_to_any α2 in
    M.read α3).

(*
fn main() {
    println!("Guess the number!");
    let secret_number = gen_range();
    // println!("The secret number is: {secret_number}");
    loop {
        println!("Please input your guess.");

        let mut guess = String::new();

        io::stdin()
            .read_line(&mut guess)
            .expect("Failed to read line");

        // shadowing previous var {guess}.
        // We do shadowing when we want to convert var from one type to another
        let guess: u32 = match guess.trim().parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {guess}");

        match guess.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Guess the number!
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_const"] α6 in
        let* α8 : unit := std.io.stdio._print α7 in
        M.alloc α8 in
      M.alloc tt in
    let* secret_number : M.Val u32.t :=
      let* α0 : u32.t := guessing_game.gen_range in
      M.alloc α0 in
    let* α0 : M.Val unit :=
      loop
        (let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "Please input your guess.
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_const"] α6 in
            let* α8 : unit := std.io.stdio._print α7 in
            M.alloc α8 in
          M.alloc tt in
        let* guess : M.Val alloc.string.String.t :=
          let* α0 : alloc.string.String.t := alloc.string.String.t::["new"] in
          M.alloc α0 in
        let* _ : M.Val usize.t :=
          let* α0 : std.io.stdio.Stdin.t := std.io.stdio.stdin in
          let* α1 : M.Val std.io.stdio.Stdin.t := M.alloc α0 in
          let* α2 : ref std.io.stdio.Stdin.t := borrow α1 in
          let* α3 : mut_ref alloc.string.String.t := borrow_mut guess in
          let* α4 : M.Val alloc.string.String.t := deref α3 in
          let* α5 : mut_ref alloc.string.String.t := borrow_mut α4 in
          let* α6 : core.result.Result.t usize.t std.io.error.Error.t :=
            std.io.stdio.Stdin.t::["read_line"] α2 α5 in
          let* α7 : ref str.t := M.read (mk_str "Failed to read line") in
          let* α8 : M.Val str.t := deref α7 in
          let* α9 : ref str.t := borrow α8 in
          let* α10 : usize.t :=
            (core.result.Result.t usize.t std.io.error.Error.t)::["expect"]
              α6
              α9 in
          M.alloc α10 in
        let* guess : M.Val u32.t :=
          let* α0 : ref alloc.string.String.t := borrow guess in
          let* α1 : ref str.t :=
            (core.ops.deref.Deref.deref
                (Self := alloc.string.String.t)
                (Trait := ltac:(refine _)))
              α0 in
          let* α2 : M.Val str.t := deref α1 in
          let* α3 : ref str.t := borrow α2 in
          let* α4 : ref str.t := str.t::["trim"] α3 in
          let* α5 : M.Val str.t := deref α4 in
          let* α6 : ref str.t := borrow α5 in
          let* α7 : core.result.Result.t u32.t core.num.error.ParseIntError.t :=
            str.t::["parse"] α6 in
          let* α8 :
              M.Val
                (core.result.Result.t u32.t core.num.error.ParseIntError.t) :=
            M.alloc α7 in
          let* α9 := M.read α8 in
          let* α10 : M.Val u32.t :=
            match α9 with
            | core.result.Result.Ok num =>
              let* num := M.alloc num in
              M.pure num
            | core.result.Result.Err _ =>
              let* α0 : M.Val never.t := Continue in
              never_to_any α0
            end in
          M.copy α10 in
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "You guessed: "; mk_str "
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : ref u32.t := borrow guess in
            let* α8 : M.Val u32.t := deref α7 in
            let* α9 : ref u32.t := borrow α8 in
            let* α10 : core.fmt.rt.Argument.t :=
              core.fmt.rt.Argument.t::["new_display"] α9 in
            let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
            let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
              M.alloc [ α11 ] in
            let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
            let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
            let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
            let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
              M.alloc α15 in
            let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
              pointer_coercion "Unsize" α16 in
            let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
            let* α19 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_v1"] α6 α18 in
            let* α20 : unit := std.io.stdio._print α19 in
            M.alloc α20 in
          M.alloc tt in
        let* α0 : ref u32.t := borrow guess in
        let* α1 : ref u32.t := borrow secret_number in
        let* α2 : M.Val u32.t := deref α1 in
        let* α3 : ref u32.t := borrow α2 in
        let* α4 : core.cmp.Ordering.t :=
          (core.cmp.Ord.cmp (Self := u32.t) (Trait := ltac:(refine _))) α0 α3 in
        let* α5 : M.Val core.cmp.Ordering.t := M.alloc α4 in
        let* α6 := M.read α5 in
        match α6 with
        | core.cmp.Ordering.Less  =>
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "Too small!
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_const"] α6 in
            let* α8 : unit := std.io.stdio._print α7 in
            M.alloc α8 in
          M.alloc tt
        | core.cmp.Ordering.Greater  =>
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "Too big!
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_const"] α6 in
            let* α8 : unit := std.io.stdio._print α7 in
            M.alloc α8 in
          M.alloc tt
        | core.cmp.Ordering.Equal  =>
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "You win!
" ] in
              let* α1 : ref (array (ref str.t)) := borrow α0 in
              let* α2 : M.Val (array (ref str.t)) := deref α1 in
              let* α3 : ref (array (ref str.t)) := borrow α2 in
              let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
              let* α5 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α4 in
              let* α6 : ref (slice (ref str.t)) := M.read α5 in
              let* α7 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_const"] α6 in
              let* α8 : unit := std.io.stdio._print α7 in
              M.alloc α8 in
            M.alloc tt in
          let* _ : M.Val never.t := Break in
          let* α0 : M.Val unit := M.alloc tt in
          never_to_any α0
        end) in
    M.read α0).
