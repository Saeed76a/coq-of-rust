(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Container.
Section Container.
  Record t : Set := {
    x0 : i32.t;
    x1 : i32.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
  Global Instance Get_1 : Notations.Dot "1" := {
    Notations.dot := Ref.map (fun x => x.(x1)) (fun v x => x <| x1 := v |>);
  }.
End Container.
End Container.

Module  Contains.
Section Contains.
  Class Trait (Self : Set) {A B : Set} : Type := {
    contains : (ref ltac:(Self)) -> (ref A) -> (ref B) -> M bool.t;
    first : (ref ltac:(Self)) -> M i32.t;
    last : (ref ltac:(Self)) -> M i32.t;
  }.
  
End Contains.
End Contains.

Module  Impl_generics_associated_types_problem_Contains_i32_t_i32_t_for_generics_associated_types_problem_Container_t.
Section Impl_generics_associated_types_problem_Contains_i32_t_i32_t_for_generics_associated_types_problem_Container_t.
  Ltac Self := exact generics_associated_types_problem.Container.t.
  
  (*
      fn contains(&self, number_1: &i32, number_2: &i32) -> bool {
          (&self.0 == number_1) && (&self.1 == number_2)
      }
  *)
  Definition contains
      (self : ref ltac:(Self))
      (number_1 : ref i32.t)
      (number_2 : ref i32.t)
      : M bool.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* number_1 : M.Val (ref i32.t) := M.alloc number_1 in
    let* number_2 : M.Val (ref i32.t) := M.alloc number_2 in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val generics_associated_types_problem.Container.t :=
        deref α0 in
      let* α2 : ref i32.t := borrow α1.["0"] in
      let* α3 : M.Val (ref i32.t) := M.alloc α2 in
      let* α4 : ref (ref i32.t) := borrow α3 in
      let* α5 : ref (ref i32.t) := borrow number_1 in
      let* α6 : bool.t :=
        (core.cmp.PartialEq.eq (Self := ref i32.t) (Trait := ltac:(refine _)))
          α4
          α5 in
      let* α7 : M.Val bool.t := M.alloc α6 in
      let* α8 := M.read self in
      let* α9 : M.Val generics_associated_types_problem.Container.t :=
        deref α8 in
      let* α10 : ref i32.t := borrow α9.["1"] in
      let* α11 : M.Val (ref i32.t) := M.alloc α10 in
      let* α12 : ref (ref i32.t) := borrow α11 in
      let* α13 : ref (ref i32.t) := borrow number_2 in
      let* α14 : bool.t :=
        (core.cmp.PartialEq.eq (Self := ref i32.t) (Trait := ltac:(refine _)))
          α12
          α13 in
      let* α15 : M.Val bool.t := M.alloc α14 in
      BinOp.and α7 α15).
  
  Global Instance AssociatedFunction_contains :
    Notations.DoubleColon ltac:(Self) "contains" := {
    Notations.double_colon := contains;
  }.
  
  (*
      fn first(&self) -> i32 {
          self.0
      }
  *)
  Definition first (self : ref ltac:(Self)) : M i32.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val generics_associated_types_problem.Container.t :=
        deref α0 in
      M.pure α1.["0"]).
  
  Global Instance AssociatedFunction_first :
    Notations.DoubleColon ltac:(Self) "first" := {
    Notations.double_colon := first;
  }.
  
  (*
      fn last(&self) -> i32 {
          self.1
      }
  *)
  Definition last (self : ref ltac:(Self)) : M i32.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* α0 := M.read self in
      let* α1 : M.Val generics_associated_types_problem.Container.t :=
        deref α0 in
      M.pure α1.["1"]).
  
  Global Instance AssociatedFunction_last :
    Notations.DoubleColon ltac:(Self) "last" := {
    Notations.double_colon := last;
  }.
  
  Global Instance ℐ :
    generics_associated_types_problem.Contains.Trait ltac:(Self)
      (A := i32.t)
      (B := i32.t) := {
    generics_associated_types_problem.Contains.contains := contains;
    generics_associated_types_problem.Contains.first := first;
    generics_associated_types_problem.Contains.last := last;
  }.
End Impl_generics_associated_types_problem_Contains_i32_t_i32_t_for_generics_associated_types_problem_Container_t.
End Impl_generics_associated_types_problem_Contains_i32_t_i32_t_for_generics_associated_types_problem_Container_t.

(*
fn difference<A, B, C>(container: &C) -> i32
where
    C: Contains<A, B>,
{
    container.last() - container.first()
}
*)
Definition difference
    {A B C : Set}
    {ℋ_0 : generics_associated_types_problem.Contains.Trait C (A := A) (B := B)}
    (container : ref C)
    : M i32.t :=
  let* container : M.Val (ref C) := M.alloc container in
  M.function_body
    (let* α0 := M.read container in
    let* α1 : M.Val C := deref α0 in
    let* α2 : ref C := borrow α1 in
    let* α3 : i32.t :=
      (generics_associated_types_problem.Contains.last
          (Self := C)
          (Trait := ltac:(refine _)))
        α2 in
    let* α4 : M.Val i32.t := M.alloc α3 in
    let* α5 := M.read container in
    let* α6 : M.Val C := deref α5 in
    let* α7 : ref C := borrow α6 in
    let* α8 : i32.t :=
      (generics_associated_types_problem.Contains.first
          (Self := C)
          (Trait := ltac:(refine _)))
        α7 in
    let* α9 : M.Val i32.t := M.alloc α8 in
    BinOp.sub α4 α9).

(*
fn main() {
    let number_1 = 3;
    let number_2 = 10;

    let container = Container(number_1, number_2);

    println!(
        "Does container contain {} and {}: {}",
        &number_1,
        &number_2,
        container.contains(&number_1, &number_2)
    );
    println!("First number: {}", container.first());
    println!("Last number: {}", container.last());

    println!("The difference is: {}", difference(&container));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* number_1 : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 3 in
      M.copy α0 in
    let* number_2 : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 10 in
      M.copy α0 in
    let* container : M.Val generics_associated_types_problem.Container.t :=
      let* α0 := M.read number_1 in
      let* α1 := M.read number_2 in
      M.alloc (generics_associated_types_problem.Container.Build_t α0 α1) in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [
              mk_str "Does container contain ";
              mk_str " and ";
              mk_str ": ";
              mk_str "
"
            ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 := M.read α5 in
        let* α7 : ref i32.t := borrow number_1 in
        let* α8 : M.Val (ref i32.t) := M.alloc α7 in
        let* α9 : ref (ref i32.t) := borrow α8 in
        let* α10 : M.Val (ref i32.t) := deref α9 in
        let* α11 : ref (ref i32.t) := borrow α10 in
        let* α12 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α11 in
        let* α13 : M.Val core.fmt.rt.Argument.t := M.alloc α12 in
        let* α14 : ref i32.t := borrow number_2 in
        let* α15 : M.Val (ref i32.t) := M.alloc α14 in
        let* α16 : ref (ref i32.t) := borrow α15 in
        let* α17 : M.Val (ref i32.t) := deref α16 in
        let* α18 : ref (ref i32.t) := borrow α17 in
        let* α19 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α18 in
        let* α20 : M.Val core.fmt.rt.Argument.t := M.alloc α19 in
        let* α21 : ref generics_associated_types_problem.Container.t :=
          borrow container in
        let* α22 : ref i32.t := borrow number_1 in
        let* α23 : M.Val i32.t := deref α22 in
        let* α24 : ref i32.t := borrow α23 in
        let* α25 : ref i32.t := borrow number_2 in
        let* α26 : M.Val i32.t := deref α25 in
        let* α27 : ref i32.t := borrow α26 in
        let* α28 : bool.t :=
          (generics_associated_types_problem.Contains.contains
              (Self := generics_associated_types_problem.Container.t)
              (Trait := ltac:(refine _)))
            α21
            α24
            α27 in
        let* α29 : M.Val bool.t := M.alloc α28 in
        let* α30 : ref bool.t := borrow α29 in
        let* α31 : M.Val bool.t := deref α30 in
        let* α32 : ref bool.t := borrow α31 in
        let* α33 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α32 in
        let* α34 : M.Val core.fmt.rt.Argument.t := M.alloc α33 in
        let* α35 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α13; α20; α34 ] in
        let* α36 : ref (array core.fmt.rt.Argument.t) := borrow α35 in
        let* α37 : M.Val (array core.fmt.rt.Argument.t) := deref α36 in
        let* α38 : ref (array core.fmt.rt.Argument.t) := borrow α37 in
        let* α39 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α38 in
        let* α40 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α39 in
        let* α41 := M.read α40 in
        let* α42 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α41 in
        let* α43 : unit := std.io.stdio._print α42 in
        M.alloc α43 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "First number: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 := M.read α5 in
        let* α7 : ref generics_associated_types_problem.Container.t :=
          borrow container in
        let* α8 : i32.t :=
          (generics_associated_types_problem.Contains.first
              (Self := generics_associated_types_problem.Container.t)
              (Trait := ltac:(refine _)))
            α7 in
        let* α9 : M.Val i32.t := M.alloc α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : M.Val i32.t := deref α10 in
        let* α12 : ref i32.t := borrow α11 in
        let* α13 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α14 ] in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := deref α16 in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α18 in
        let* α20 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α19 in
        let* α21 := M.read α20 in
        let* α22 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α21 in
        let* α23 : unit := std.io.stdio._print α22 in
        M.alloc α23 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Last number: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 := M.read α5 in
        let* α7 : ref generics_associated_types_problem.Container.t :=
          borrow container in
        let* α8 : i32.t :=
          (generics_associated_types_problem.Contains.last
              (Self := generics_associated_types_problem.Container.t)
              (Trait := ltac:(refine _)))
            α7 in
        let* α9 : M.Val i32.t := M.alloc α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : M.Val i32.t := deref α10 in
        let* α12 : ref i32.t := borrow α11 in
        let* α13 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α14 ] in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := deref α16 in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α18 in
        let* α20 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α19 in
        let* α21 := M.read α20 in
        let* α22 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α21 in
        let* α23 : unit := std.io.stdio._print α22 in
        M.alloc α23 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "The difference is: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 := M.read α5 in
        let* α7 : ref generics_associated_types_problem.Container.t :=
          borrow container in
        let* α8 : M.Val generics_associated_types_problem.Container.t :=
          deref α7 in
        let* α9 : ref generics_associated_types_problem.Container.t :=
          borrow α8 in
        let* α10 : i32.t := generics_associated_types_problem.difference α9 in
        let* α11 : M.Val i32.t := M.alloc α10 in
        let* α12 : ref i32.t := borrow α11 in
        let* α13 : M.Val i32.t := deref α12 in
        let* α14 : ref i32.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α16 ] in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) := deref α18 in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α20 in
        let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α21 in
        let* α23 := M.read α22 in
        let* α24 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α23 in
        let* α25 : unit := std.io.stdio._print α24 in
        M.alloc α25 in
      M.alloc tt in
    M.alloc tt).
