(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Val.
Section Val.
  Record t : Set := {
    val : f64.t;
  }.
  
  Global Instance Get_val : Notations.Dot "val" := {
    Notations.dot := Ref.map (fun x => x.(val)) (fun v x => x <| val := v |>);
  }.
  Global Instance Get_AF_val : Notations.DoubleColon t "val" := {
    Notations.double_colon (x : M.Val t) := x.["val"];
  }.
End Val.
End Val.

Module  GenVal.
Section GenVal.
  Context (T : Set).
  
  Record t : Set := {
    gen_val : T;
  }.
  
  Global Instance Get_gen_val : Notations.Dot "gen_val" := {
    Notations.dot :=
      Ref.map (fun x => x.(gen_val)) (fun v x => x <| gen_val := v |>);
  }.
  Global Instance Get_AF_gen_val : Notations.DoubleColon t "gen_val" := {
    Notations.double_colon (x : M.Val t) := x.["gen_val"];
  }.
End GenVal.
End GenVal.

Module  Impl_generics_implementation_Val_t.
Section Impl_generics_implementation_Val_t.
  Ltac Self := exact generics_implementation.Val.t.
  
  (*
      fn value(&self) -> &f64 {
          &self.val
      }
  *)
  Definition value (self : M.Val (ref ltac:(Self))) : M (ref f64.t) :=
    M.function_body
      (let* α0 : M.Val generics_implementation.Val.t := deref self in
      borrow α0.["val"]).
  
  Global Instance AssociatedFunction_value :
    Notations.DoubleColon ltac:(Self) "value" := {
    Notations.double_colon := value;
  }.
End Impl_generics_implementation_Val_t.
End Impl_generics_implementation_Val_t.

Module  Impl_generics_implementation_GenVal_t_T.
Section Impl_generics_implementation_GenVal_t_T.
  Context {T : Set}.
  
  Ltac Self := exact (generics_implementation.GenVal.t T).
  
  (*
      fn value(&self) -> &T {
          &self.gen_val
      }
  *)
  Definition value (self : M.Val (ref ltac:(Self))) : M (ref T) :=
    M.function_body
      (let* α0 : M.Val (generics_implementation.GenVal.t T) := deref self in
      borrow α0.["gen_val"]).
  
  Global Instance AssociatedFunction_value :
    Notations.DoubleColon ltac:(Self) "value" := {
    Notations.double_colon := value;
  }.
End Impl_generics_implementation_GenVal_t_T.
End Impl_generics_implementation_GenVal_t_T.

(*
fn main() {
    let x = Val { val: 3.0 };
    let y = GenVal { gen_val: 3i32 };

    println!("{}, {}", x.value(), y.value());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* x : M.Val generics_implementation.Val.t :=
      let* α0 : M.Val f64.t := M.alloc 3 (* 3.0 *) in
      let* α1 := M.read α0 in
      M.alloc {| generics_implementation.Val.val := α1; |} in
    let* y : M.Val (generics_implementation.GenVal.t i32.t) :=
      let* α0 : M.Val i32.t := M.alloc 3 in
      let* α1 := M.read α0 in
      M.alloc {| generics_implementation.GenVal.gen_val := α1; |} in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str ", "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : M.Val (ref generics_implementation.Val.t) := borrow x in
        let* α4 := generics_implementation.Val.t::["value"] α3 in
        let* α5 : M.Val (ref f64.t) := M.alloc α4 in
        let* α6 : M.Val (ref (ref f64.t)) := borrow α5 in
        let* α7 := core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
        let* α9 : M.Val (ref (generics_implementation.GenVal.t i32.t)) :=
          borrow y in
        let* α10 := (generics_implementation.GenVal.t i32.t)::["value"] α9 in
        let* α11 : M.Val (ref i32.t) := M.alloc α10 in
        let* α12 : M.Val (ref (ref i32.t)) := borrow α11 in
        let* α13 := core.fmt.rt.Argument.t::["new_display"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α8; α14 ] in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 := core.fmt.Arguments.t::["new_v1"] α2 α17 in
        let* α19 : M.Val core.fmt.Arguments.t := M.alloc α18 in
        let* α20 := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    M.alloc tt).
