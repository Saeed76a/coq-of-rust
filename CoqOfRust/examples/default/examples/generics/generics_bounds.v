(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  HasArea.
Section HasArea.
  Class Trait (Self : Set) : Type := {
    area : (ref ltac:(Self)) -> M f64.t;
  }.
  
End HasArea.
End HasArea.

Module  Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
  Ltac Self := exact generics_bounds.Rectangle.t.
  
  (*
      fn area(&self) -> f64 {
          self.length * self.height
      }
  *)
  Definition area (self : M.Val (ref ltac:(Self))) : M f64.t :=
    M.function_body
      (let* α0 : M.Val generics_bounds.Rectangle.t := deref self in
      let* α1 : M.Val generics_bounds.Rectangle.t := deref self in
      BinOp.mul α0.["length"] α1.["height"]).
  
  Global Instance AssociatedFunction_area :
    Notations.DoubleColon ltac:(Self) "area" := {
    Notations.double_colon := area;
  }.
  
  Global Instance ℐ : generics_bounds.HasArea.Trait ltac:(Self) := {
    generics_bounds.HasArea.area := area;
  }.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Global Instance Get_length : Notations.Dot "length" := {
    Notations.dot :=
      Ref.map (fun x => x.(length)) (fun v x => x <| length := v |>);
  }.
  Global Instance Get_AF_length : Notations.DoubleColon t "length" := {
    Notations.double_colon (x : M.Val t) := x.["length"];
  }.
  Global Instance Get_height : Notations.Dot "height" := {
    Notations.dot :=
      Ref.map (fun x => x.(height)) (fun v x => x <| height := v |>);
  }.
  Global Instance Get_AF_height : Notations.DoubleColon t "height" := {
    Notations.double_colon (x : M.Val t) := x.["height"];
  }.
End Rectangle.
End Rectangle.

Module  Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
  Ltac Self := exact generics_bounds.Rectangle.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : M.Val core.fmt.Formatter.t := deref f in
      let* α1 : M.Val (mut_ref core.fmt.Formatter.t) := borrow_mut α0 in
      let* α2 : M.Val str.t := deref (mk_str "Rectangle") in
      let* α3 : M.Val (ref str.t) := borrow α2 in
      let* α4 : M.Val str.t := deref (mk_str "length") in
      let* α5 : M.Val (ref str.t) := borrow α4 in
      let* α6 : M.Val generics_bounds.Rectangle.t := deref self in
      let* α7 : M.Val (ref f64.t) := borrow α6.["length"] in
      let* α8 : M.Val (ref type not implemented) :=
        pointer_coercion "Unsize" α7 in
      let* α9 : M.Val str.t := deref (mk_str "height") in
      let* α10 : M.Val (ref str.t) := borrow α9 in
      let* α11 : M.Val generics_bounds.Rectangle.t := deref self in
      let* α12 : M.Val (ref f64.t) := borrow α11.["height"] in
      let* α13 : M.Val (ref (ref f64.t)) := borrow α12 in
      let* α14 : M.Val (ref type not implemented) :=
        pointer_coercion "Unsize" α13 in
      let* α15 :=
        core.fmt.Formatter.t::["debug_struct_field2_finish"]
          α1
          α3
          α5
          α8
          α10
          α14 in
      M.alloc α15).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Triangle.
Section Triangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Global Instance Get_length : Notations.Dot "length" := {
    Notations.dot :=
      Ref.map (fun x => x.(length)) (fun v x => x <| length := v |>);
  }.
  Global Instance Get_AF_length : Notations.DoubleColon t "length" := {
    Notations.double_colon (x : M.Val t) := x.["length"];
  }.
  Global Instance Get_height : Notations.Dot "height" := {
    Notations.dot :=
      Ref.map (fun x => x.(height)) (fun v x => x <| height := v |>);
  }.
  Global Instance Get_AF_height : Notations.DoubleColon t "height" := {
    Notations.double_colon (x : M.Val t) := x.["height"];
  }.
End Triangle.
End Triangle.

(*
fn print_debug<T: Debug>(t: &T) {
    println!("{:?}", t);
}
*)
Definition print_debug
    {T : Set}
    {ℋ_0 : core.fmt.Debug.Trait T}
    (t : M.Val (ref T))
    : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : M.Val (ref (ref T)) := borrow t in
        let* α4 := core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
        let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
        let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α6 in
        let* α8 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α7 in
        let* α9 := core.fmt.Arguments.t::["new_v1"] α2 α8 in
        let* α10 : M.Val core.fmt.Arguments.t := M.alloc α9 in
        let* α11 := std.io.stdio._print α10 in
        M.alloc α11 in
      M.alloc tt in
    M.alloc tt).

(*
fn area<T: HasArea>(t: &T) -> f64 {
    t.area()
}
*)
Definition area
    {T : Set}
    {ℋ_0 : generics_bounds.HasArea.Trait T}
    (t : M.Val (ref T))
    : M f64.t :=
  M.function_body
    (let* α0 : M.Val T := deref t in
    let* α1 : M.Val (ref T) := borrow α0 in
    let* α2 :=
      (generics_bounds.HasArea.area (Self := T) (Trait := ltac:(refine _)))
        α1 in
    M.alloc α2).

(*
fn main() {
    let rectangle = Rectangle {
        length: 3.0,
        height: 4.0,
    };
    let _triangle = Triangle {
        length: 3.0,
        height: 4.0,
    };

    print_debug(&rectangle);
    println!("Area: {}", rectangle.area());

    //print_debug(&_triangle);
    //println!("Area: {}", _triangle.area());
    // ^ TODO: Try uncommenting these.
    // | Error: Does not implement either `Debug` or `HasArea`.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* rectangle : M.Val generics_bounds.Rectangle.t :=
      let* α0 : M.Val f64.t := M.alloc 3 (* 3.0 *) in
      let* α1 := M.read α0 in
      let* α2 : M.Val f64.t := M.alloc 4 (* 4.0 *) in
      let* α3 := M.read α2 in
      M.alloc
        {|
          generics_bounds.Rectangle.length := α1;
          generics_bounds.Rectangle.height := α3;
        |} in
    let* _triangle : M.Val generics_bounds.Triangle.t :=
      let* α0 : M.Val f64.t := M.alloc 3 (* 3.0 *) in
      let* α1 := M.read α0 in
      let* α2 : M.Val f64.t := M.alloc 4 (* 4.0 *) in
      let* α3 := M.read α2 in
      M.alloc
        {|
          generics_bounds.Triangle.length := α1;
          generics_bounds.Triangle.height := α3;
        |} in
    let* _ : M.Val unit :=
      let* α0 : M.Val (ref generics_bounds.Rectangle.t) := borrow rectangle in
      let* α1 := generics_bounds.print_debug α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Area: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : M.Val (ref generics_bounds.Rectangle.t) := borrow rectangle in
        let* α4 :=
          (generics_bounds.HasArea.area
              (Self := generics_bounds.Rectangle.t)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 : M.Val f64.t := M.alloc α4 in
        let* α6 : M.Val (ref f64.t) := borrow α5 in
        let* α7 := core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
        let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α9 in
        let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α2 α11 in
        let* α13 : M.Val core.fmt.Arguments.t := M.alloc α12 in
        let* α14 := std.io.stdio._print α13 in
        M.alloc α14 in
      M.alloc tt in
    M.alloc tt).
