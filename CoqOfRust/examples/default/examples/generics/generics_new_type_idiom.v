(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Years.
Section Years.
  Record t : Set := {
    x0 : i64.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
End Years.
End Years.

Module  Days.
Section Days.
  Record t : Set := {
    x0 : i64.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
End Days.
End Days.

Module  Impl_generics_new_type_idiom_Years_t.
Section Impl_generics_new_type_idiom_Years_t.
  Ltac Self := exact generics_new_type_idiom.Years.t.
  
  (*
      pub fn to_days(&self) -> Days {
          Days(self.0 * 365)
      }
  *)
  Definition to_days
      (self : ref ltac:(Self))
      : M generics_new_type_idiom.Days.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* α0 : ref generics_new_type_idiom.Years.t := M.read self in
    let* α1 : i64.t := M.read (deref α0).["0"] in
    let* α2 : i64.t := BinOp.Panic.mul α1 (Integer.of_Z 365) in
    M.pure (generics_new_type_idiom.Days.Build_t α2).
  
  Global Instance AssociatedFunction_to_days :
    Notations.DoubleColon ltac:(Self) "to_days" := {
    Notations.double_colon := to_days;
  }.
End Impl_generics_new_type_idiom_Years_t.
End Impl_generics_new_type_idiom_Years_t.

Module  Impl_generics_new_type_idiom_Days_t.
Section Impl_generics_new_type_idiom_Days_t.
  Ltac Self := exact generics_new_type_idiom.Days.t.
  
  (*
      pub fn to_years(&self) -> Years {
          Years(self.0 / 365)
      }
  *)
  Definition to_years
      (self : ref ltac:(Self))
      : M generics_new_type_idiom.Years.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* α0 : ref generics_new_type_idiom.Days.t := M.read self in
    let* α1 : i64.t := M.read (deref α0).["0"] in
    let* α2 : i64.t := BinOp.Panic.div α1 (Integer.of_Z 365) in
    M.pure (generics_new_type_idiom.Years.Build_t α2).
  
  Global Instance AssociatedFunction_to_years :
    Notations.DoubleColon ltac:(Self) "to_years" := {
    Notations.double_colon := to_years;
  }.
End Impl_generics_new_type_idiom_Days_t.
End Impl_generics_new_type_idiom_Days_t.

(*
fn old_enough(age: &Years) -> bool {
    age.0 >= 18
}
*)
Definition old_enough (age : ref generics_new_type_idiom.Years.t) : M bool.t :=
  let* age : M.Val (ref generics_new_type_idiom.Years.t) := M.alloc age in
  let* α0 : ref generics_new_type_idiom.Years.t := M.read age in
  let* α1 : i64.t := M.read (deref α0).["0"] in
  M.pure (BinOp.Pure.ge α1 (Integer.of_Z 18)).

(*
fn main() {
    let age = Years(5);
    let age_days = age.to_days();
    println!("Old enough {}", old_enough(&age));
    println!("Old enough {}", old_enough(&age_days.to_years()));
    // println!("Old enough {}", old_enough(&age_days));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* age : M.Val generics_new_type_idiom.Years.t :=
    M.alloc (generics_new_type_idiom.Years.Build_t (Integer.of_Z 5)) in
  let* age_days : M.Val generics_new_type_idiom.Days.t :=
    let* α0 : generics_new_type_idiom.Days.t :=
      generics_new_type_idiom.Years.t::["to_days"] (borrow age) in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "Old enough "; mk_str "
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : bool.t := generics_new_type_idiom.old_enough (borrow age) in
      let* α4 : M.Val bool.t := M.alloc α3 in
      let* α5 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] (borrow α4) in
      let* α6 : M.Val core.fmt.rt.Argument.t := M.alloc α5 in
      let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6 ] in
      let* α8 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α7) in
      let* α9 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α8) in
      let* α10 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α2 α9 in
      let* α11 : unit := std.io.stdio._print α10 in
      M.alloc α11 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "Old enough "; mk_str "
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : generics_new_type_idiom.Years.t :=
        generics_new_type_idiom.Days.t::["to_years"] (borrow age_days) in
      let* α4 : M.Val generics_new_type_idiom.Years.t := M.alloc α3 in
      let* α5 : bool.t := generics_new_type_idiom.old_enough (borrow α4) in
      let* α6 : M.Val bool.t := M.alloc α5 in
      let* α7 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] (borrow α6) in
      let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α9) in
      let* α11 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α10) in
      let* α12 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α2 α11 in
      let* α13 : unit := std.io.stdio._print α12 in
      M.alloc α13 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
