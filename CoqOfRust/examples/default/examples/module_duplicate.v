(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foo.
  Module gre.
    (*
            pub fn f_foo_gre() {
                println!("foo::gre::bar");
            }
    *)
    Definition f_foo_gre : M unit :=
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : ref str.t := M.read (mk_str "foo::gre::bar
") in
          let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
          let* α2 : core.fmt.Arguments.t :=
            M.call
              (core.fmt.Arguments.t::["new_const"]
                (pointer_coercion "Unsize" (borrow α1))) in
          let* α3 : unit := M.call (std.io.stdio._print α2) in
          M.alloc α3 in
        M.alloc tt in
      let* α0 : M.Val unit := M.alloc tt in
      M.read α0.
  End gre.
  
  (*
      pub fn f_foo() {
          println!("foo::bar");
          gre::f_foo_gre();
      }
  *)
  Definition f_foo : M unit :=
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "foo::bar
") in
        let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
        let* α2 : core.fmt.Arguments.t :=
          M.call
            (core.fmt.Arguments.t::["new_const"]
              (pointer_coercion "Unsize" (borrow α1))) in
        let* α3 : unit := M.call (std.io.stdio._print α2) in
        M.alloc α3 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : unit := M.call module_duplicate.foo.gre.f_foo_gre in
      M.alloc α0 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
End foo.

(*
fn f() {
    foo::f_foo();
}
*)
Definition f : M unit :=
  let* _ : M.Val unit :=
    let* α0 : unit := M.call module_duplicate.foo.f_foo in
    M.alloc α0 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
