(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Circle.
Section Circle.
  Record t : Set := {
    radius : i32.t;
  }.
  
  Global Instance Get_radius : Notations.Dot "radius" := {
    Notations.dot :=
      Ref.map (fun x => x.(radius)) (fun v x => x <| radius := v |>);
  }.
  Global Instance Get_AF_radius : Notations.DoubleColon t "radius" := {
    Notations.double_colon (x : M.Val t) := x.["radius"];
  }.
End Circle.
End Circle.

Module  Impl_core_fmt_Display_for_converting_to_string_Circle_t.
Section Impl_core_fmt_Display_for_converting_to_string_Circle_t.
  Ltac Self := exact converting_to_string.Circle.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "Circle of radius {}", self.radius)
      }
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* f : M.Val (mut_ref core.fmt.Formatter.t) := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : M.Val (array (ref str.t)) :=
      M.alloc [ mk_str "Circle of radius " ] in
    let* α2 : ref (array (ref str.t)) := borrow α1 in
    let* α3 : M.Val (ref (array (ref str.t))) := M.alloc α2 in
    let* α4 : M.Val (ref (slice (ref str.t))) := pointer_coercion "Unsize" α3 in
    let* α5 : ref (slice (ref str.t)) := M.read α4 in
    let* α6 : ref converting_to_string.Circle.t := M.read self in
    let* α7 : M.Val converting_to_string.Circle.t := deref α6 in
    let* α8 : ref i32.t := borrow α7.["radius"] in
    let* α9 : core.fmt.rt.Argument.t :=
      core.fmt.rt.Argument.t::["new_display"] α8 in
    let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
    let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
    let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
    let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
    let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
      pointer_coercion "Unsize" α13 in
    let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
    let* α16 : core.fmt.Arguments.t :=
      core.fmt.Arguments.t::["new_v1"] α5 α15 in
    core.fmt.Formatter.t::["write_fmt"] α0 α16.
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait ltac:(Self) := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_converting_to_string_Circle_t.
End Impl_core_fmt_Display_for_converting_to_string_Circle_t.

(*
fn main() {
    let circle = Circle { radius: 6 };
    circle.to_string();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* circle : M.Val converting_to_string.Circle.t :=
    let* α0 : M.Val i32.t := M.alloc 6 in
    let* α1 : i32.t := M.read α0 in
    M.alloc {| converting_to_string.Circle.radius := α1; |} in
  let* _ : M.Val alloc.string.String.t :=
    let* α0 : ref converting_to_string.Circle.t := borrow circle in
    let* α1 : alloc.string.String.t :=
      (alloc.string.ToString.to_string
          (Self := converting_to_string.Circle.t)
          (Trait := ltac:(refine _)))
        α0 in
    M.alloc α1 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
