(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    #[derive(Debug)]
    struct Person {
        name: String,
        age: Box<u8>,
    }

    let person = Person {
        name: String::from("Alice"),
        age: Box::new(20),
    };

    // `name` is moved out of person, but `age` is referenced
    let Person { name, ref age } = person;

    println!("The person's age is {}", age);

    println!("The person's name is {}", name);

    // Error! borrow of partially moved value: `person` partial move occurs
    //println!("The person struct is {:?}", person);

    // `person` cannot be used but `person.age` can be used as it is not moved
    println!("The person's age from person struct is {}", person.age);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* person :
        M.Val scoping_rules_ownership_and_rules_partial_moves.main.Person.t :=
      let* α0 : ref str.t := M.read (mk_str "Alice") in
      let* α1 : alloc.string.String.t :=
        (core.convert.From.from
            (Self := alloc.string.String.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : M.Val u8.t := M.alloc 20 in
      let* α3 : u8.t := M.read α2 in
      let* α4 : alloc.boxed.Box.t u8.t alloc.alloc.Global.t :=
        (alloc.boxed.Box.t u8.t alloc.alloc.Global.t)::["new"] α3 in
      M.alloc
        {|
          scoping_rules_ownership_and_rules_partial_moves.main.Person.name :=
            α1;
          scoping_rules_ownership_and_rules_partial_moves.main.Person.age := α4;
        |} in
    let* '{|
          scoping_rules_ownership_and_rules_partial_moves.main.Person.name
            :=
            name;
          scoping_rules_ownership_and_rules_partial_moves.main.Person.age
            :=
            age;
        |} :
        M.Val scoping_rules_ownership_and_rules_partial_moves.main.Person.t :=
      M.copy person in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "The person's age is "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t)) :=
          borrow age in
        let* α8 : M.Val (ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t)) :=
          deref α7 in
        let* α9 : ref (ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t)) :=
          borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
        let* α19 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α18 in
        let* α20 : unit := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "The person's name is "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref alloc.string.String.t := borrow name in
        let* α8 : M.Val alloc.string.String.t := deref α7 in
        let* α9 : ref alloc.string.String.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
        let* α19 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α18 in
        let* α20 : unit := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [ mk_str "The person's age from person struct is "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t) :=
          borrow person.["age"] in
        let* α8 : M.Val (alloc.boxed.Box.t u8.t alloc.alloc.Global.t) :=
          deref α7 in
        let* α9 : ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t) :=
          borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
        let* α19 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α18 in
        let* α20 : unit := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).

Module  Person.
Section Person.
  Record t : Set := {
    name : alloc.string.String.t;
    age : alloc.boxed.Box.t u8.t alloc.boxed.Box.Default.A;
  }.
  
  Global Instance Get_name : Notations.Dot "name" := {
    Notations.dot := Ref.map (fun x => x.(name)) (fun v x => x <| name := v |>);
  }.
  Global Instance Get_AF_name : Notations.DoubleColon t "name" := {
    Notations.double_colon (x : M.Val t) := x.["name"];
  }.
  Global Instance Get_age : Notations.Dot "age" := {
    Notations.dot := Ref.map (fun x => x.(age)) (fun v x => x <| age := v |>);
  }.
  Global Instance Get_AF_age : Notations.DoubleColon t "age" := {
    Notations.double_colon (x : M.Val t) := x.["age"];
  }.
End Person.
End Person.

Module  Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person_t.
Section Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person_t.
  Ltac Self :=
    exact scoping_rules_ownership_and_rules_partial_moves.main.Person.t.
  
  (*
      Debug
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* f : M.Val (mut_ref core.fmt.Formatter.t) := M.alloc f in
    M.function_body
      (let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : M.Val core.fmt.Formatter.t := deref α0 in
      let* α2 : mut_ref core.fmt.Formatter.t := borrow_mut α1 in
      let* α3 : ref str.t := M.read (mk_str "Person") in
      let* α4 : M.Val str.t := deref α3 in
      let* α5 : ref str.t := borrow α4 in
      let* α6 : ref str.t := M.read (mk_str "name") in
      let* α7 : M.Val str.t := deref α6 in
      let* α8 : ref str.t := borrow α7 in
      let* α9 :
          ref scoping_rules_ownership_and_rules_partial_moves.main.Person.t :=
        M.read self in
      let* α10 :
          M.Val scoping_rules_ownership_and_rules_partial_moves.main.Person.t :=
        deref α9 in
      let* α11 : ref alloc.string.String.t := borrow α10.["name"] in
      let* α12 : M.Val alloc.string.String.t := deref α11 in
      let* α13 : ref alloc.string.String.t := borrow α12 in
      let* α14 : M.Val (ref alloc.string.String.t) := M.alloc α13 in
      let* α15 : M.Val (ref type not implemented) :=
        pointer_coercion "Unsize" α14 in
      let* α16 : ref type not implemented := M.read α15 in
      let* α17 : ref str.t := M.read (mk_str "age") in
      let* α18 : M.Val str.t := deref α17 in
      let* α19 : ref str.t := borrow α18 in
      let* α20 :
          ref scoping_rules_ownership_and_rules_partial_moves.main.Person.t :=
        M.read self in
      let* α21 :
          M.Val scoping_rules_ownership_and_rules_partial_moves.main.Person.t :=
        deref α20 in
      let* α22 : ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t) :=
        borrow α21.["age"] in
      let* α23 : M.Val (ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t)) :=
        M.alloc α22 in
      let* α24 : ref (ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t)) :=
        borrow α23 in
      let* α25 : M.Val (ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t)) :=
        deref α24 in
      let* α26 : ref (ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t)) :=
        borrow α25 in
      let* α27 :
          M.Val (ref (ref (alloc.boxed.Box.t u8.t alloc.alloc.Global.t))) :=
        M.alloc α26 in
      let* α28 : M.Val (ref type not implemented) :=
        pointer_coercion "Unsize" α27 in
      let* α29 : ref type not implemented := M.read α28 in
      let* α30 : core.result.Result.t unit core.fmt.Error.t :=
        core.fmt.Formatter.t::["debug_struct_field2_finish"]
          α2
          α5
          α8
          α16
          α19
          α29 in
      let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
        M.alloc α30 in
      M.read α0).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person_t.
End Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person_t.
