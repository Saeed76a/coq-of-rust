(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn create_box() {
    // Allocate an integer on the heap
    let _box1 = Box::new(3i32);

    // `_box1` is destroyed here, and memory gets freed
}
*)
Definition create_box : M (M.Val unit) :=
  M.function_body
    (let* _box1 :
        ltac:(refine (M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α1 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t))) :=
        (alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"] α0 in
      M.copy α1 in
    M.alloc tt).

(*
fn main() {
    // Allocate an integer on the heap
    let _box2 = Box::new(5i32);

    // A nested scope:
    {
        // Allocate an integer on the heap
        let _box3 = Box::new(4i32);

        // `_box3` is destroyed here, and memory gets freed
    }

    // Creating lots of boxes just for fun
    // There's no need to manually free memory!
    for _ in 0u32..1_000 {
        create_box();
    }

    // `_box2` is destroyed here, and memory gets freed
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _box2 :
        ltac:(refine (M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
      let* α1 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t))) :=
        (alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"] α0 in
      M.copy α1 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _box3 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t))) :=
        let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 4 in
        let* α1 :
            ltac:(refine
              (M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t))) :=
          (alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"] α0 in
        M.copy α1 in
      M.alloc tt in
    let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 0 in
    let* α1 := M.read α0 in
    let* α2 : ltac:(refine (M.Val u32.t)) := M.alloc 1000 in
    let* α3 := M.read α2 in
    let* α4 : ltac:(refine (M.Val (core.ops.range.Range.t u32.t))) :=
      M.alloc
        {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α3;
        |} in
    let* α5 : ltac:(refine (M.Val (core.ops.range.Range.t u32.t))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.Range.t u32.t)
          (Trait := ltac:(refine _)))
        α4 in
    let* α6 := M.read α5 in
    let* α7 : ltac:(refine (M.Val unit)) :=
      match α6 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : ltac:(refine (M.Val unit)) :=
            let* α0 :
                ltac:(refine
                  (M.Val (mut_ref (core.ops.range.Range.t u32.t)))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (M.Val (core.option.Option.t u32.t))) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.Range.t u32.t)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine (M.Val never.t)) := Break in
              never_to_any α0
            | core.option.Option.Some _ =>
              let* _ : ltac:(refine (M.Val unit)) :=
                scoping_rules_raii.create_box in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α7).
