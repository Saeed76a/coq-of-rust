(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Owner.
Section Owner.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
End Owner.
End Owner.

Module  Impl_scoping_rules_lifetimes_methods_Owner_t.
Section Impl_scoping_rules_lifetimes_methods_Owner_t.
  Ltac Self := exact scoping_rules_lifetimes_methods.Owner.t.
  
  (*
      fn add_one<'a>(&'a mut self) {
          self.0 += 1;
      }
  *)
  Definition add_one (self : mut_ref ltac:(Self)) : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* _ : M.Val unit :=
        let* α0 : mut_ref scoping_rules_lifetimes_methods.Owner.t :=
          M.read self in
        let* α1 : M.Val scoping_rules_lifetimes_methods.Owner.t := deref α0 in
        let* α2 : M.Val i32.t := M.alloc 1 in
        assign_op add α1.["0"] α2 in
      let* α0 : M.Val unit := M.alloc tt in
      M.read α0).
  
  Global Instance AssociatedFunction_add_one :
    Notations.DoubleColon ltac:(Self) "add_one" := {
    Notations.double_colon := add_one;
  }.
  
  (*
      fn print<'a>(&'a self) {
          println!("`print`: {}", self.0);
      }
  *)
  Definition print (self : ref ltac:(Self)) : M unit :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "`print`: "; mk_str "
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
          let* α3 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α2 in
          let* α4 : ref (slice (ref str.t)) := M.read α3 in
          let* α5 : ref scoping_rules_lifetimes_methods.Owner.t :=
            M.read self in
          let* α6 : M.Val scoping_rules_lifetimes_methods.Owner.t := deref α5 in
          let* α7 : ref i32.t := borrow α6.["0"] in
          let* α8 : core.fmt.rt.Argument.t :=
            core.fmt.rt.Argument.t::["new_display"] α7 in
          let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
          let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α9 ] in
          let* α11 : ref (array core.fmt.rt.Argument.t) := borrow α10 in
          let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
            M.alloc α11 in
          let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ref (slice core.fmt.rt.Argument.t) := M.read α13 in
          let* α15 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_v1"] α4 α14 in
          let* α16 : unit := std.io.stdio._print α15 in
          M.alloc α16 in
        M.alloc tt in
      let* α0 : M.Val unit := M.alloc tt in
      M.read α0).
  
  Global Instance AssociatedFunction_print :
    Notations.DoubleColon ltac:(Self) "print" := {
    Notations.double_colon := print;
  }.
End Impl_scoping_rules_lifetimes_methods_Owner_t.
End Impl_scoping_rules_lifetimes_methods_Owner_t.

(*
fn main() {
    let mut owner = Owner(18);

    owner.add_one();
    owner.print();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* owner : M.Val scoping_rules_lifetimes_methods.Owner.t :=
      let* α0 : M.Val i32.t := M.alloc 18 in
      let* α1 : i32.t := M.read α0 in
      M.alloc (scoping_rules_lifetimes_methods.Owner.Build_t α1) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref scoping_rules_lifetimes_methods.Owner.t :=
        borrow_mut owner in
      let* α1 : unit :=
        scoping_rules_lifetimes_methods.Owner.t::["add_one"] α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 : ref scoping_rules_lifetimes_methods.Owner.t := borrow owner in
      let* α1 : unit := scoping_rules_lifetimes_methods.Owner.t::["print"] α0 in
      M.alloc α1 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
