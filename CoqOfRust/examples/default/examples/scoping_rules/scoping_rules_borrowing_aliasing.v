(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Point.
Section Point.
  Record t : Set := {
    x : i32.t;
    y : i32.t;
    z : i32.t;
  }.
  
  Global Instance Get_x : Notations.Dot "x" := {
    Notations.dot := Ref.map (fun x' => x'.(x)) (fun v x' => x' <| x := v |>);
  }.
  Global Instance Get_AF_x : Notations.DoubleColon t "x" := {
    Notations.double_colon (x' : M.Val t) := x'.["x"];
  }.
  Global Instance Get_y : Notations.Dot "y" := {
    Notations.dot := Ref.map (fun x => x.(y)) (fun v x => x <| y := v |>);
  }.
  Global Instance Get_AF_y : Notations.DoubleColon t "y" := {
    Notations.double_colon (x : M.Val t) := x.["y"];
  }.
  Global Instance Get_z : Notations.Dot "z" := {
    Notations.dot := Ref.map (fun x => x.(z)) (fun v x => x <| z := v |>);
  }.
  Global Instance Get_AF_z : Notations.DoubleColon t "z" := {
    Notations.double_colon (x : M.Val t) := x.["z"];
  }.
End Point.
End Point.

(*
fn main() {
    let mut point = Point { x: 0, y: 0, z: 0 };

    let borrowed_point = &point;
    let another_borrow = &point;

    // Data can be accessed via the references and the original owner
    println!(
        "Point has coordinates: ({}, {}, {})",
        borrowed_point.x, another_borrow.y, point.z
    );

    // Error! Can't borrow `point` as mutable because it's currently
    // borrowed as immutable.
    // let mutable_borrow = &mut point;
    // TODO ^ Try uncommenting this line

    // The borrowed values are used again here
    println!(
        "Point has coordinates: ({}, {}, {})",
        borrowed_point.x, another_borrow.y, point.z
    );

    // The immutable references are no longer used for the rest of the code so
    // it is possible to reborrow with a mutable reference.
    let mutable_borrow = &mut point;

    // Change data via mutable reference
    mutable_borrow.x = 5;
    mutable_borrow.y = 2;
    mutable_borrow.z = 1;

    // Error! Can't borrow `point` as immutable because it's currently
    // borrowed as mutable.
    // let y = &point.y;
    // TODO ^ Try uncommenting this line

    // Error! Can't print because `println!` takes an immutable reference.
    // println!("Point Z coordinate is {}", point.z);
    // TODO ^ Try uncommenting this line

    // Ok! Mutable references can be passed as immutable to `println!`
    println!(
        "Point has coordinates: ({}, {}, {})",
        mutable_borrow.x, mutable_borrow.y, mutable_borrow.z
    );

    // The mutable reference is no longer used for the rest of the code so it
    // is possible to reborrow
    let new_borrowed_point = &point;
    println!(
        "Point now has coordinates: ({}, {}, {})",
        new_borrowed_point.x, new_borrowed_point.y, new_borrowed_point.z
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* point : M.Val scoping_rules_borrowing_aliasing.Point.t :=
    M.alloc
      {|
        scoping_rules_borrowing_aliasing.Point.x := Integer.of_Z 0;
        scoping_rules_borrowing_aliasing.Point.y := Integer.of_Z 0;
        scoping_rules_borrowing_aliasing.Point.z := Integer.of_Z 0;
      |} in
  let* borrowed_point : M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
    M.alloc (borrow point) in
  let* another_borrow : M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
    M.alloc (borrow point) in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "Point has coordinates: (";
            mk_str ", ";
            mk_str ", ";
            mk_str ")
"
          ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read borrowed_point in
      let* α4 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α3).["x"])) in
      let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
      let* α6 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read another_borrow in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α6).["y"])) in
      let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] (borrow point.["z"])) in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α5; α8; α10 ] in
      let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α11) in
      let* α13 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α12) in
      let* α14 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α2 α13) in
      let* α15 : unit := M.call (std.io.stdio._print α14) in
      M.alloc α15 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "Point has coordinates: (";
            mk_str ", ";
            mk_str ", ";
            mk_str ")
"
          ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read borrowed_point in
      let* α4 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α3).["x"])) in
      let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
      let* α6 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read another_borrow in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α6).["y"])) in
      let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] (borrow point.["z"])) in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α5; α8; α10 ] in
      let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α11) in
      let* α13 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α12) in
      let* α14 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α2 α13) in
      let* α15 : unit := M.call (std.io.stdio._print α14) in
      M.alloc α15 in
    M.alloc tt in
  let* mutable_borrow :
      M.Val (mut_ref scoping_rules_borrowing_aliasing.Point.t) :=
    M.alloc (borrow_mut point) in
  let* _ : M.Val unit :=
    let* α0 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
      M.read mutable_borrow in
    assign (deref α0).["x"] (Integer.of_Z 5) in
  let* _ : M.Val unit :=
    let* α0 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
      M.read mutable_borrow in
    assign (deref α0).["y"] (Integer.of_Z 2) in
  let* _ : M.Val unit :=
    let* α0 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
      M.read mutable_borrow in
    assign (deref α0).["z"] (Integer.of_Z 1) in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "Point has coordinates: (";
            mk_str ", ";
            mk_str ", ";
            mk_str ")
"
          ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read mutable_borrow in
      let* α4 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α3).["x"])) in
      let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
      let* α6 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read mutable_borrow in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α6).["y"])) in
      let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
      let* α9 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read mutable_borrow in
      let* α10 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α9).["z"])) in
      let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
      let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α5; α8; α11 ] in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α12) in
      let* α14 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α13) in
      let* α15 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α2 α14) in
      let* α16 : unit := M.call (std.io.stdio._print α15) in
      M.alloc α16 in
    M.alloc tt in
  let* new_borrowed_point :
      M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
    M.alloc (borrow point) in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "Point now has coordinates: (";
            mk_str ", ";
            mk_str ", ";
            mk_str ")
"
          ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read new_borrowed_point in
      let* α4 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α3).["x"])) in
      let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
      let* α6 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read new_borrowed_point in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α6).["y"])) in
      let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
      let* α9 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read new_borrowed_point in
      let* α10 : core.fmt.rt.Argument.t :=
        M.call
          (core.fmt.rt.Argument.t::["new_display"] (borrow (deref α9).["z"])) in
      let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
      let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α5; α8; α11 ] in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α12) in
      let* α14 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α13) in
      let* α15 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α2 α14) in
      let* α16 : unit := M.call (std.io.stdio._print α15) in
      M.alloc α16 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
