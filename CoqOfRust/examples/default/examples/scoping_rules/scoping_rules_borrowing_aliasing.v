(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Point.
Section Point.
  Record t : Set := {
    x : i32.t;
    y : i32.t;
    z : i32.t;
  }.
  
  Global Instance Get_x : Notations.Dot "x" := {
    Notations.dot := Ref.map (fun x' => x'.(x)) (fun v x' => x' <| x := v |>);
  }.
  Global Instance Get_AF_x : Notations.DoubleColon t "x" := {
    Notations.double_colon (x' : M.Val t) := x'.["x"];
  }.
  Global Instance Get_y : Notations.Dot "y" := {
    Notations.dot := Ref.map (fun x => x.(y)) (fun v x => x <| y := v |>);
  }.
  Global Instance Get_AF_y : Notations.DoubleColon t "y" := {
    Notations.double_colon (x : M.Val t) := x.["y"];
  }.
  Global Instance Get_z : Notations.Dot "z" := {
    Notations.dot := Ref.map (fun x => x.(z)) (fun v x => x <| z := v |>);
  }.
  Global Instance Get_AF_z : Notations.DoubleColon t "z" := {
    Notations.double_colon (x : M.Val t) := x.["z"];
  }.
End Point.
End Point.

(*
fn main() {
    let mut point = Point { x: 0, y: 0, z: 0 };

    let borrowed_point = &point;
    let another_borrow = &point;

    // Data can be accessed via the references and the original owner
    println!(
        "Point has coordinates: ({}, {}, {})",
        borrowed_point.x, another_borrow.y, point.z
    );

    // Error! Can't borrow `point` as mutable because it's currently
    // borrowed as immutable.
    // let mutable_borrow = &mut point;
    // TODO ^ Try uncommenting this line

    // The borrowed values are used again here
    println!(
        "Point has coordinates: ({}, {}, {})",
        borrowed_point.x, another_borrow.y, point.z
    );

    // The immutable references are no longer used for the rest of the code so
    // it is possible to reborrow with a mutable reference.
    let mutable_borrow = &mut point;

    // Change data via mutable reference
    mutable_borrow.x = 5;
    mutable_borrow.y = 2;
    mutable_borrow.z = 1;

    // Error! Can't borrow `point` as immutable because it's currently
    // borrowed as mutable.
    // let y = &point.y;
    // TODO ^ Try uncommenting this line

    // Error! Can't print because `println!` takes an immutable reference.
    // println!("Point Z coordinate is {}", point.z);
    // TODO ^ Try uncommenting this line

    // Ok! Mutable references can be passed as immutable to `println!`
    println!(
        "Point has coordinates: ({}, {}, {})",
        mutable_borrow.x, mutable_borrow.y, mutable_borrow.z
    );

    // The mutable reference is no longer used for the rest of the code so it
    // is possible to reborrow
    let new_borrowed_point = &point;
    println!(
        "Point now has coordinates: ({}, {}, {})",
        new_borrowed_point.x, new_borrowed_point.y, new_borrowed_point.z
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* point : M.Val scoping_rules_borrowing_aliasing.Point.t :=
    let* α0 : M.Val i32.t := M.alloc 0 in
    let* α1 : i32.t := M.read α0 in
    let* α2 : M.Val i32.t := M.alloc 0 in
    let* α3 : i32.t := M.read α2 in
    let* α4 : M.Val i32.t := M.alloc 0 in
    let* α5 : i32.t := M.read α4 in
    M.alloc
      {|
        scoping_rules_borrowing_aliasing.Point.x := α1;
        scoping_rules_borrowing_aliasing.Point.y := α3;
        scoping_rules_borrowing_aliasing.Point.z := α5;
      |} in
  let* borrowed_point : M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
    let* α0 : ref scoping_rules_borrowing_aliasing.Point.t := borrow point in
    M.alloc α0 in
  let* another_borrow : M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
    let* α0 : ref scoping_rules_borrowing_aliasing.Point.t := borrow point in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "Point has coordinates: (";
            mk_str ", ";
            mk_str ", ";
            mk_str ")
"
          ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read borrowed_point in
      let* α6 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α5 in
      let* α7 : ref i32.t := borrow α6.["x"] in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α7 in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read another_borrow in
      let* α11 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α10 in
      let* α12 : ref i32.t := borrow α11.["y"] in
      let* α13 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α12 in
      let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
      let* α15 : ref i32.t := borrow point.["z"] in
      let* α16 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α15 in
      let* α17 : M.Val core.fmt.rt.Argument.t := M.alloc α16 in
      let* α18 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α9; α14; α17 ] in
      let* α19 : ref (array core.fmt.rt.Argument.t) := borrow α18 in
      let* α20 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α19 in
      let* α21 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α20 in
      let* α22 : ref (slice core.fmt.rt.Argument.t) := M.read α21 in
      let* α23 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α22 in
      let* α24 : unit := std.io.stdio._print α23 in
      M.alloc α24 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "Point has coordinates: (";
            mk_str ", ";
            mk_str ", ";
            mk_str ")
"
          ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read borrowed_point in
      let* α6 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α5 in
      let* α7 : ref i32.t := borrow α6.["x"] in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α7 in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read another_borrow in
      let* α11 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α10 in
      let* α12 : ref i32.t := borrow α11.["y"] in
      let* α13 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α12 in
      let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
      let* α15 : ref i32.t := borrow point.["z"] in
      let* α16 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α15 in
      let* α17 : M.Val core.fmt.rt.Argument.t := M.alloc α16 in
      let* α18 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α9; α14; α17 ] in
      let* α19 : ref (array core.fmt.rt.Argument.t) := borrow α18 in
      let* α20 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α19 in
      let* α21 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α20 in
      let* α22 : ref (slice core.fmt.rt.Argument.t) := M.read α21 in
      let* α23 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α22 in
      let* α24 : unit := std.io.stdio._print α23 in
      M.alloc α24 in
    M.alloc tt in
  let* mutable_borrow :
      M.Val (mut_ref scoping_rules_borrowing_aliasing.Point.t) :=
    let* α0 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
      borrow_mut point in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
      M.read mutable_borrow in
    let* α1 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α0 in
    let* α2 : M.Val i32.t := M.alloc 5 in
    let* α3 : i32.t := M.read α2 in
    assign α1.["x"] α3 in
  let* _ : M.Val unit :=
    let* α0 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
      M.read mutable_borrow in
    let* α1 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α0 in
    let* α2 : M.Val i32.t := M.alloc 2 in
    let* α3 : i32.t := M.read α2 in
    assign α1.["y"] α3 in
  let* _ : M.Val unit :=
    let* α0 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
      M.read mutable_borrow in
    let* α1 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α0 in
    let* α2 : M.Val i32.t := M.alloc 1 in
    let* α3 : i32.t := M.read α2 in
    assign α1.["z"] α3 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "Point has coordinates: (";
            mk_str ", ";
            mk_str ", ";
            mk_str ")
"
          ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read mutable_borrow in
      let* α6 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α5 in
      let* α7 : ref i32.t := borrow α6.["x"] in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α7 in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read mutable_borrow in
      let* α11 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α10 in
      let* α12 : ref i32.t := borrow α11.["y"] in
      let* α13 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α12 in
      let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
      let* α15 : mut_ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read mutable_borrow in
      let* α16 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α15 in
      let* α17 : ref i32.t := borrow α16.["z"] in
      let* α18 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α17 in
      let* α19 : M.Val core.fmt.rt.Argument.t := M.alloc α18 in
      let* α20 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α9; α14; α19 ] in
      let* α21 : ref (array core.fmt.rt.Argument.t) := borrow α20 in
      let* α22 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α21 in
      let* α23 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α22 in
      let* α24 : ref (slice core.fmt.rt.Argument.t) := M.read α23 in
      let* α25 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α24 in
      let* α26 : unit := std.io.stdio._print α25 in
      M.alloc α26 in
    M.alloc tt in
  let* new_borrowed_point :
      M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
    let* α0 : ref scoping_rules_borrowing_aliasing.Point.t := borrow point in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "Point now has coordinates: (";
            mk_str ", ";
            mk_str ", ";
            mk_str ")
"
          ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read new_borrowed_point in
      let* α6 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α5 in
      let* α7 : ref i32.t := borrow α6.["x"] in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α7 in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read new_borrowed_point in
      let* α11 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α10 in
      let* α12 : ref i32.t := borrow α11.["y"] in
      let* α13 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α12 in
      let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
      let* α15 : ref scoping_rules_borrowing_aliasing.Point.t :=
        M.read new_borrowed_point in
      let* α16 : M.Val scoping_rules_borrowing_aliasing.Point.t := deref α15 in
      let* α17 : ref i32.t := borrow α16.["z"] in
      let* α18 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α17 in
      let* α19 : M.Val core.fmt.rt.Argument.t := M.alloc α18 in
      let* α20 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α9; α14; α19 ] in
      let* α21 : ref (array core.fmt.rt.Argument.t) := borrow α20 in
      let* α22 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α21 in
      let* α23 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α22 in
      let* α24 : ref (slice core.fmt.rt.Argument.t) := M.read α23 in
      let* α25 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α24 in
      let* α26 : unit := std.io.stdio._print α25 in
      M.alloc α26 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
