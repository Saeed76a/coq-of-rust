(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Borrowed.
Section Borrowed.
  Record t : Set := {
    x0 : ref i32.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
End Borrowed.
End Borrowed.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
  Ltac Self := exact scoping_rules_lifetimes_structs.Borrowed.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    M.function_body
      (let* α0 : M.Val core.fmt.Formatter.t := deref f in
      let* α1 : M.Val (mut_ref core.fmt.Formatter.t) := borrow_mut α0 in
      let* α2 := M.read α1 in
      let* α3 : M.Val str.t := deref (mk_str "Borrowed") in
      let* α4 : M.Val (ref str.t) := borrow α3 in
      let* α5 := M.read α4 in
      let* α6 : M.Val scoping_rules_lifetimes_structs.Borrowed.t :=
        deref self in
      let* α7 : M.Val (ref (ref i32.t)) := borrow α6.["0"] in
      let* α8 : M.Val (ref (ref (ref i32.t))) := borrow α7 in
      let* α9 : M.Val (ref type not implemented) :=
        pointer_coercion "Unsize" α8 in
      let* α10 := M.read α9 in
      let* α11 :=
        core.fmt.Formatter.t::["debug_tuple_field1_finish"] α2 α5 α10 in
      M.alloc α11).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.

Module  NamedBorrowed.
Section NamedBorrowed.
  Record t : Set := {
    x : ref i32.t;
    y : ref i32.t;
  }.
  
  Global Instance Get_x : Notations.Dot "x" := {
    Notations.dot := Ref.map (fun x' => x'.(x)) (fun v x' => x' <| x := v |>);
  }.
  Global Instance Get_AF_x : Notations.DoubleColon t "x" := {
    Notations.double_colon (x' : M.Val t) := x'.["x"];
  }.
  Global Instance Get_y : Notations.Dot "y" := {
    Notations.dot := Ref.map (fun x => x.(y)) (fun v x => x <| y := v |>);
  }.
  Global Instance Get_AF_y : Notations.DoubleColon t "y" := {
    Notations.double_colon (x : M.Val t) := x.["y"];
  }.
End NamedBorrowed.
End NamedBorrowed.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
  Ltac Self := exact scoping_rules_lifetimes_structs.NamedBorrowed.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    M.function_body
      (let* α0 : M.Val core.fmt.Formatter.t := deref f in
      let* α1 : M.Val (mut_ref core.fmt.Formatter.t) := borrow_mut α0 in
      let* α2 := M.read α1 in
      let* α3 : M.Val str.t := deref (mk_str "NamedBorrowed") in
      let* α4 : M.Val (ref str.t) := borrow α3 in
      let* α5 := M.read α4 in
      let* α6 : M.Val str.t := deref (mk_str "x") in
      let* α7 : M.Val (ref str.t) := borrow α6 in
      let* α8 := M.read α7 in
      let* α9 : M.Val scoping_rules_lifetimes_structs.NamedBorrowed.t :=
        deref self in
      let* α10 : M.Val (ref (ref i32.t)) := borrow α9.["x"] in
      let* α11 : M.Val (ref type not implemented) :=
        pointer_coercion "Unsize" α10 in
      let* α12 := M.read α11 in
      let* α13 : M.Val str.t := deref (mk_str "y") in
      let* α14 : M.Val (ref str.t) := borrow α13 in
      let* α15 := M.read α14 in
      let* α16 : M.Val scoping_rules_lifetimes_structs.NamedBorrowed.t :=
        deref self in
      let* α17 : M.Val (ref (ref i32.t)) := borrow α16.["y"] in
      let* α18 : M.Val (ref (ref (ref i32.t))) := borrow α17 in
      let* α19 : M.Val (ref type not implemented) :=
        pointer_coercion "Unsize" α18 in
      let* α20 := M.read α19 in
      let* α21 :=
        core.fmt.Formatter.t::["debug_struct_field2_finish"]
          α2
          α5
          α8
          α12
          α15
          α20 in
      M.alloc α21).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.

Module Either.
  Inductive t : Set :=
  | Num (_ : i32.t)
  | Ref (_ : ref i32.t).
End Either.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
  Ltac Self := exact scoping_rules_lifetimes_structs.Either.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    M.function_body
      (let* α0 := M.read self in
      match α0 with
      | scoping_rules_lifetimes_structs.Either.Num __self_0 =>
        let* __self_0 := M.alloc __self_0 in
        let* α0 : M.Val core.fmt.Formatter.t := deref f in
        let* α1 : M.Val (mut_ref core.fmt.Formatter.t) := borrow_mut α0 in
        let* α2 := M.read α1 in
        let* α3 : M.Val str.t := deref (mk_str "Num") in
        let* α4 : M.Val (ref str.t) := borrow α3 in
        let* α5 := M.read α4 in
        let* α6 : M.Val (ref (ref i32.t)) := borrow __self_0 in
        let* α7 : M.Val (ref type not implemented) :=
          pointer_coercion "Unsize" α6 in
        let* α8 := M.read α7 in
        let* α9 :=
          core.fmt.Formatter.t::["debug_tuple_field1_finish"] α2 α5 α8 in
        M.alloc α9
      | scoping_rules_lifetimes_structs.Either.Ref __self_0 =>
        let* __self_0 := M.alloc __self_0 in
        let* α0 : M.Val core.fmt.Formatter.t := deref f in
        let* α1 : M.Val (mut_ref core.fmt.Formatter.t) := borrow_mut α0 in
        let* α2 := M.read α1 in
        let* α3 : M.Val str.t := deref (mk_str "Ref") in
        let* α4 : M.Val (ref str.t) := borrow α3 in
        let* α5 := M.read α4 in
        let* α6 : M.Val (ref (ref (ref i32.t))) := borrow __self_0 in
        let* α7 : M.Val (ref type not implemented) :=
          pointer_coercion "Unsize" α6 in
        let* α8 := M.read α7 in
        let* α9 :=
          core.fmt.Formatter.t::["debug_tuple_field1_finish"] α2 α5 α8 in
        M.alloc α9
      end).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.

(*
fn main() {
    let x = 18;
    let y = 15;

    let single = Borrowed(&x);
    let double = NamedBorrowed { x: &x, y: &y };
    let reference = Either::Ref(&x);
    let number = Either::Num(y);

    println!("x is borrowed in {:?}", single);
    println!("x and y are borrowed in {:?}", double);
    println!("x is borrowed in {:?}", reference);
    println!("y is *not* borrowed in {:?}", number);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* x : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 18 in
      M.copy α0 in
    let* y : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 15 in
      M.copy α0 in
    let* single : M.Val scoping_rules_lifetimes_structs.Borrowed.t :=
      let* α0 : M.Val (ref i32.t) := borrow x in
      let* α1 := M.read α0 in
      M.alloc (scoping_rules_lifetimes_structs.Borrowed.Build_t α1) in
    let* double : M.Val scoping_rules_lifetimes_structs.NamedBorrowed.t :=
      let* α0 : M.Val (ref i32.t) := borrow x in
      let* α1 := M.read α0 in
      let* α2 : M.Val (ref i32.t) := borrow y in
      let* α3 := M.read α2 in
      M.alloc
        {|
          scoping_rules_lifetimes_structs.NamedBorrowed.x := α1;
          scoping_rules_lifetimes_structs.NamedBorrowed.y := α3;
        |} in
    let* reference : M.Val scoping_rules_lifetimes_structs.Either.t :=
      let* α0 : M.Val (ref i32.t) := borrow x in
      let* α1 := M.read α0 in
      M.alloc (scoping_rules_lifetimes_structs.Either.Ref α1) in
    let* number : M.Val scoping_rules_lifetimes_structs.Either.t :=
      let* α0 := M.read y in
      M.alloc (scoping_rules_lifetimes_structs.Either.Num α0) in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "x is borrowed in "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref scoping_rules_lifetimes_structs.Borrowed.t) :=
          borrow single in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "x and y are borrowed in "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref scoping_rules_lifetimes_structs.NamedBorrowed.t) :=
          borrow double in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "x is borrowed in "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref scoping_rules_lifetimes_structs.Either.t) :=
          borrow reference in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "y is *not* borrowed in "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref scoping_rules_lifetimes_structs.Either.t) :=
          borrow number in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt in
    M.alloc tt).
