(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Variables can be type annotated.
    let logical: bool = true;

    let a_float: f64 = 1.0;  // Regular annotation
    let an_integer   = 5i32; // Suffix annotation

    // Or a default will be used.
    let default_float   = 3.0; // `f64`
    let default_integer = 7;   // `i32`
    
    // A type can also be inferred from context 
    let mut inferred_type = 12; // Type i64 is inferred from another line
    inferred_type = 4294967296i64;
    
    // A mutable variable's value can be changed.
    let mut mutable = 12; // Mutable `i32`
    mutable = 21;
    
    // Error! The type of a variable can't be changed.
    // mutable = true;
    
    // Variables can be overwritten with shadowing.
    let mutable = true;
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* logical := M.alloc true in
    let* a_float := M.copy (UnsupportedLiteral : Ty.path "f64") in
    let* an_integer := M.alloc ((Integer.of_Z 5) : Ty.path "i32") in
    let* default_float := M.copy (UnsupportedLiteral : Ty.path "f64") in
    let* default_integer := M.alloc ((Integer.of_Z 7) : Ty.path "i32") in
    let* inferred_type := M.alloc ((Integer.of_Z 12) : Ty.path "i64") in
    let* _ :=
      assign inferred_type ((Integer.of_Z 4294967296) : Ty.path "i64") in
    let* mutable := M.alloc ((Integer.of_Z 12) : Ty.path "i32") in
    let* _ := assign mutable ((Integer.of_Z 21) : Ty.path "i32") in
    let* mutable := M.alloc true in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
