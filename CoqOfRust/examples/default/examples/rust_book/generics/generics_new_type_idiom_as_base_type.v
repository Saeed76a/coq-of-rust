(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



(*
fn main() {
    let years = Years(42);
    let years_as_primitive_1: i64 = years.0; // Tuple
    let Years(years_as_primitive_2) = years; // Destructuring
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* years :=
      M.alloc
        (generics_new_type_idiom_as_base_type.Years.Build_t
          ((Integer.of_Z 42) : Ty.path "i64")) in
    let* years_as_primitive_1 :=
      M.copy
        ((M.var "generics_new_type_idiom_as_base_type::Years::Get_0") years) in
    let* α0 :=
      match_operator
        years
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | generics_new_type_idiom_as_base_type.Years.Build_t _ =>
              let γ0_0 :=
                (M.var "generics_new_type_idiom_as_base_type::Years::Get_0")
                  γ in
              let* years_as_primitive_2 := M.copy γ0_0 in
              M.alloc tt
            end) :
            Ty.path "unit"
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
