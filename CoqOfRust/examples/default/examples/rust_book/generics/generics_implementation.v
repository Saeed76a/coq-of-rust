(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Val *)

(* Enum GenVal *)

Module Impl_generics_implementation_Val.
  Definition Self : Ty.t := Ty.path "generics_implementation::Val".
  
  (*
      fn value(&self) -> &f64 {
          &self.val
      }
  *)
  Definition value (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.var "generics_implementation::Val::Get_val" in
      let* α1 := M.read self in
      M.pure (borrow (α0 (deref α1)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_value : M.IsAssociatedFunction Self "value" value [].
End Impl_generics_implementation_Val.

Module Impl_generics_implementation_GenVal_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "generics_implementation::GenVal") [ T ].
  
  (*
      fn value(&self) -> &T {
          &self.gen_val
      }
  *)
  Definition value (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; T ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.var "generics_implementation::GenVal::Get_gen_val" in
      let* α1 := M.read self in
      M.pure (borrow (α0 (deref α1)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_value :
    forall (T : Ty.t),
    M.IsAssociatedFunction (Self T) "value" value [ T ].
End Impl_generics_implementation_GenVal_T.

(*
fn main() {
    let x = Val { val: 3.0 };
    let y = GenVal { gen_val: 3i32 };

    println!("{}, {}", x.value(), y.value());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* x :=
      let* α0 := M.read (UnsupportedLiteral : Ty.path "f64") in
      M.alloc
        (Value.StructRecord "generics_implementation::Val" [ ("val", α0) ]) in
    let* y :=
      M.alloc
        (Value.StructRecord
          "generics_implementation::GenVal"
          [ ("gen_val", (Integer.of_Z 3) : Ty.path "i32") ]) in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str ", ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc [ α1; α2; α3 ] in
        let* α5 :=
          M.call
            (Ty.path "generics_implementation::Val")::["value"]
            [ borrow x ] in
        let* α6 := M.alloc α5 in
        let* α7 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow α6 ] in
        let* α8 :=
          M.call
            (Ty.apply
                (Ty.path "generics_implementation::GenVal")
                [ Ty.path "i32" ])::["value"]
            [ borrow y ] in
        let* α9 := M.alloc α8 in
        let* α10 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow α9 ] in
        let* α11 := M.alloc [ α7; α10 ] in
        let* α12 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α4);
              pointer_coercion "Unsize" (borrow α11)
            ] in
        let* α13 := M.call α0 [ α12 ] in
        M.alloc α13 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
