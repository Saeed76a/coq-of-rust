(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.





Module  DoubleDrop.
Section DoubleDrop.
  Class Trait (Self : Set) {T : Set} : Type := {
    double_drop : Ty.function [Self; T] (Ty.path "unit");
  }.
  
End DoubleDrop.
End DoubleDrop.

Module  Impl_generics_traits_DoubleDrop_T_for_U.
Section Impl_generics_traits_DoubleDrop_T_for_U.
  Context {T U : Set}.
  
  Definition Self : Ty.t := U.
  
  (*
      fn double_drop(self, _: T) {}
  *)
  Definition double_drop (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; Pattern] =>
      let* self := M.alloc self in
      let* Pattern := M.alloc Pattern in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_double_drop : Instance.t := {
    Notations.double_colon := double_drop;
  }.
  
  Definition ℐ : Instance.t := [("double_drop", double_drop)].
End Impl_generics_traits_DoubleDrop_T_for_U.
End Impl_generics_traits_DoubleDrop_T_for_U.

(*
fn main() {
    let empty = Empty;
    let null = Null;

    // Deallocate `empty` and `null`.
    empty.double_drop(null);

    //empty;
    //null;
    // ^ TODO: Try uncommenting these lines.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* empty : Ty.apply (Ty.path "generics_traits::Empty") [] :=
      M.alloc generics_traits.Empty.Build in
    let* null : Ty.apply (Ty.path "generics_traits::Null") [] :=
      M.alloc generics_traits.Null.Build in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.function
            [Ty.apply (Ty.path "generics_traits::Empty") [];
              Ty.apply (Ty.path "generics_traits::Null") []]
            Ty.tuple :=
        ltac:(M.get_method (fun ℐ =>
          generics_traits.DoubleDrop.double_drop
            (Self := Ty.apply (Ty.path "generics_traits::Empty") [])
            (T := Ty.apply (Ty.path "generics_traits::Null") [])
            (Trait := ℐ))) in
      let* α1 : Ty.apply (Ty.path "generics_traits::Empty") [] :=
        M.read empty in
      let* α2 : Ty.apply (Ty.path "generics_traits::Null") [] := M.read null in
      let* α3 : Ty.tuple := M.call (α0 α1 α2) in
      M.alloc α3 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
