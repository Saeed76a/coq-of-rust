(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Cardinal *)

(* Struct BlueJay *)

(* Struct Turkey *)

(* Trait *)
Module Red.
  
End Red.

(* Trait *)
Module Blue.
  
End Blue.

Module Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal.
  Definition Self : Ty.t :=
    Ty.path "generics_bounds_test_case_empty_bounds::Cardinal".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal.

Module Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay.
  Definition Self : Ty.t :=
    Ty.path "generics_bounds_test_case_empty_bounds::BlueJay".
  
  Definition ‚Ñê : Instance.t := [].
End Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay.

(*
fn red<T: Red>(_: &T) -> &'static str {
    "red"
}
*)
Definition red (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [ T ], [ arg ] =>
    let* arg := M.alloc arg in
    M.read (mk_str "red")
  | _, _ => M.impossible
  end.

(*
fn blue<T: Blue>(_: &T) -> &'static str {
    "blue"
}
*)
Definition blue (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [ T ], [ arg ] =>
    let* arg := M.alloc arg in
    M.read (mk_str "blue")
  | _, _ => M.impossible
  end.

(*
fn main() {
    let cardinal = Cardinal;
    let blue_jay = BlueJay;
    let _turkey = Turkey;

    // `red()` won't work on a blue jay nor vice versa
    // because of the bounds.
    println!("A cardinal is {}", red(&cardinal));
    println!("A blue jay is {}", blue(&blue_jay));
    //println!("A turkey is {}", red(&_turkey));
    // ^ TODO: Try uncommenting this line.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* cardinal :=
      M.alloc generics_bounds_test_case_empty_bounds.Cardinal.Build in
    let* blue_jay :=
      M.alloc generics_bounds_test_case_empty_bounds.BlueJay.Build in
    let* _turkey :=
      M.alloc generics_bounds_test_case_empty_bounds.Turkey.Build in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "A cardinal is ") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            (M.var "generics_bounds_test_case_empty_bounds::red")
            [ borrow cardinal ] in
        let* Œ±4 := M.alloc Œ±3 in
        let* Œ±5 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow Œ±4 ] in
        let* Œ±6 := M.alloc [ Œ±5 ] in
        let* Œ±7 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow Œ±2);
              pointer_coercion "Unsize" (borrow Œ±6)
            ] in
        let* Œ±8 := M.call (M.var "std::io::stdio::_print") [ Œ±7 ] in
        M.alloc Œ±8 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "A blue jay is ") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            (M.var "generics_bounds_test_case_empty_bounds::blue")
            [ borrow blue_jay ] in
        let* Œ±4 := M.alloc Œ±3 in
        let* Œ±5 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow Œ±4 ] in
        let* Œ±6 := M.alloc [ Œ±5 ] in
        let* Œ±7 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow Œ±2);
              pointer_coercion "Unsize" (borrow Œ±6)
            ] in
        let* Œ±8 := M.call (M.var "std::io::stdio::_print") [ Œ±7 ] in
        M.alloc Œ±8 in
      M.alloc tt in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
