(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  PrintInOption.
Section PrintInOption.
  Class Trait (Self : Set) : Type := {
    print_in_option : Ty.function [Self] (Ty.path "unit");
  }.
  
End PrintInOption.
End PrintInOption.

Module  Impl_generics_where_clauses_PrintInOption_for_T.
Section Impl_generics_where_clauses_PrintInOption_for_T.
  Context {T : Set}.
  
  Definition Self : Ty.t := T.
  
  (*
      fn print_in_option(self) {
          println!("{:?}", Some(self));
      }
  *)
  Definition print_in_option (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ : Ty.tuple :=
        let* _ : Ty.tuple :=
          let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "") in
          let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "
") in
          let* α2 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
            M.alloc [ α0; α1 ] in
          let* α3 : T := M.read self in
          let* α4 : Ty.apply (Ty.path "core::option::Option") [T] :=
            M.alloc (core.option.Option.Some α3) in
          let* α5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
                (borrow α4)) in
          let* α6 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
            M.alloc [ α5 ] in
          let* α7 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow α2))
                (pointer_coercion "Unsize" (borrow α6))) in
          let* α8 : Ty.tuple := M.call (std.io.stdio._print α7) in
          M.alloc α8 in
        M.alloc tt in
      let* α0 : Ty.path "unit" := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_print_in_option : Instance.t := {
    Notations.double_colon := print_in_option;
  }.
  
  Definition ℐ : Instance.t := [("print_in_option", print_in_option)].
End Impl_generics_where_clauses_PrintInOption_for_T.
End Impl_generics_where_clauses_PrintInOption_for_T.

(*
fn main() {
    let vec = vec![1, 2, 3];

    vec.print_in_option();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* vec :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 : Ty.apply (Ty.path "array") [Ty.path "i32"] :=
        M.alloc
          [
            (Integer.of_Z 1) : Ty.path "i32";
            (Integer.of_Z 2) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32"
          ] in
      let* α1 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] α0) in
      let* α2 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read α1 in
      let* α3 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply (Ty.path "slice") [Ty.path "i32"])::["into_vec"]
            (pointer_coercion "Unsize" α2)) in
      M.alloc α3 in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
            Ty.tuple :=
        ltac:(M.get_method (fun ℐ =>
          generics_where_clauses.PrintInOption.print_in_option
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read vec in
      let* α2 : Ty.tuple := M.call (α0 α1) in
      M.alloc α2 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
