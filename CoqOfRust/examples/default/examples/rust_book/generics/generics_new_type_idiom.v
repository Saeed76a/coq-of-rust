(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Years *)

(* Struct Days *)

Module Impl_generics_new_type_idiom_Years.
  Definition Self : Ty.t := Ty.path "generics_new_type_idiom::Years".
  
  (*
      pub fn to_days(&self) -> Days {
          Days(self.0 * 365)
      }
  *)
  Definition to_days (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        M.read ((M.var "generics_new_type_idiom::Years::Get_0") (deref α0)) in
      let* α2 :=
        (M.var "BinOp::Panic::mul") α1 ((Integer.of_Z 365) : Ty.path "i64") in
      M.pure (generics_new_type_idiom.Days.Build_t α2)
    | _, _ => M.impossible
    end.
End Impl_generics_new_type_idiom_Years.

Module Impl_generics_new_type_idiom_Days.
  Definition Self : Ty.t := Ty.path "generics_new_type_idiom::Days".
  
  (*
      pub fn to_years(&self) -> Years {
          Years(self.0 / 365)
      }
  *)
  Definition to_years (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        M.read ((M.var "generics_new_type_idiom::Days::Get_0") (deref α0)) in
      let* α2 :=
        (M.var "BinOp::Panic::div") α1 ((Integer.of_Z 365) : Ty.path "i64") in
      M.pure (generics_new_type_idiom.Years.Build_t α2)
    | _, _ => M.impossible
    end.
End Impl_generics_new_type_idiom_Days.

(*
fn old_enough(age: &Years) -> bool {
    age.0 >= 18
}
*)
Definition old_enough (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [age] =>
    let* age := M.alloc age in
    let* α0 := M.read age in
    let* α1 :=
      M.read ((M.var "generics_new_type_idiom::Years::Get_0") (deref α0)) in
    M.pure ((M.var "BinOp::Pure::ge") α1 ((Integer.of_Z 18) : Ty.path "i64"))
  | _, _ => M.impossible
  end.

(*
fn main() {
    let age = Years(5);
    let age_days = age.to_days();
    println!("Old enough {}", old_enough(&age));
    println!("Old enough {}", old_enough(&age_days.to_years()));
    // println!("Old enough {}", old_enough(&age_days));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* age :=
      M.alloc
        (generics_new_type_idiom.Years.Build_t
          ((Integer.of_Z 5) : Ty.path "i64")) in
    let* age_days :=
      let* α0 :=
        M.call
          ((Ty.path "generics_new_type_idiom::Years")::["to_days"]
            (borrow age)) in
      M.alloc α0 in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Old enough ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 :=
          M.call ((M.var "generics_new_type_idiom::old_enough") (borrow age)) in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow α4)) in
        let* α6 := M.alloc [ α5 ] in
        let* α7 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α6))) in
        let* α8 := M.call ((M.var "std::io::stdio::_print") α7) in
        M.alloc α8 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Old enough ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 :=
          M.call
            ((Ty.path "generics_new_type_idiom::Days")::["to_years"]
              (borrow age_days)) in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.call ((M.var "generics_new_type_idiom::old_enough") (borrow α4)) in
        let* α6 := M.alloc α5 in
        let* α7 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow α6)) in
        let* α8 := M.alloc [ α7 ] in
        let* α9 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α8))) in
        let* α10 := M.call ((M.var "std::io::stdio::_print") α9) in
        M.alloc α10 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
