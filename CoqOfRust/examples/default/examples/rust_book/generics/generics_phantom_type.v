(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.
Section Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Context {A B : Set}.
  
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [A; B].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.
End Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.

Module  Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.
Section Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Context {A B : Set}.
  
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [A; B].
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :
          Ty.function
            [Ty.apply (Ty.path "ref") [A]; Ty.apply (Ty.path "ref") [A]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.cmp.PartialEq.eq (Self := A) (Rhs := A) (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [A; B]] :=
        M.read self in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [A; B]] :=
        M.read other in
      let* Œ±3 : Ty.path "bool" :=
        M.call
          (Œ±0
            (borrow (generics_phantom_type.PhantomTuple.Get_0 (deref Œ±1)))
            (borrow (generics_phantom_type.PhantomTuple.Get_0 (deref Œ±2)))) in
      let* Œ±4 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "core::marker::PhantomData") [B]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "core::marker::PhantomData") [B]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [B])
            (Rhs := Ty.apply (Ty.path "core::marker::PhantomData") [B])
            (Trait := ‚Ñê))) in
      let* Œ±5 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [A; B]] :=
        M.read self in
      let* Œ±6 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [A; B]] :=
        M.read other in
      let* Œ±7 : Ty.path "bool" :=
        M.call
          (Œ±4
            (borrow (generics_phantom_type.PhantomTuple.Get_1 (deref Œ±5)))
            (borrow (generics_phantom_type.PhantomTuple.Get_1 (deref Œ±6)))) in
      M.pure (BinOp.Pure.and Œ±3 Œ±7)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ‚Ñê : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.



Module  Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.
Section Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Context {A B : Set}.
  
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "generics_phantom_type::PhantomStruct") [A; B].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.
End Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.

Module  Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.
Section Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Context {A B : Set}.
  
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "generics_phantom_type::PhantomStruct") [A; B].
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :
          Ty.function
            [Ty.apply (Ty.path "ref") [A]; Ty.apply (Ty.path "ref") [A]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.cmp.PartialEq.eq (Self := A) (Rhs := A) (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_phantom_type::PhantomStruct")
                [A; B]] :=
        M.read self in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_phantom_type::PhantomStruct")
                [A; B]] :=
        M.read other in
      let* Œ±3 : Ty.path "bool" :=
        M.call
          (Œ±0
            (borrow (generics_phantom_type.PhantomStruct.Get_first (deref Œ±1)))
            (borrow
              (generics_phantom_type.PhantomStruct.Get_first (deref Œ±2)))) in
      let* Œ±4 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "core::marker::PhantomData") [B]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "core::marker::PhantomData") [B]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [B])
            (Rhs := Ty.apply (Ty.path "core::marker::PhantomData") [B])
            (Trait := ‚Ñê))) in
      let* Œ±5 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_phantom_type::PhantomStruct")
                [A; B]] :=
        M.read self in
      let* Œ±6 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_phantom_type::PhantomStruct")
                [A; B]] :=
        M.read other in
      let* Œ±7 : Ty.path "bool" :=
        M.call
          (Œ±4
            (borrow
              (generics_phantom_type.PhantomStruct.Get_phantom (deref Œ±5)))
            (borrow
              (generics_phantom_type.PhantomStruct.Get_phantom (deref Œ±6)))) in
      M.pure (BinOp.Pure.and Œ±3 Œ±7)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ‚Ñê : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.

(*
fn main() {
    // Here, `f32` and `f64` are the hidden parameters.
    // PhantomTuple type specified as `<char, f32>`.
    let _tuple1: PhantomTuple<char, f32> = PhantomTuple('Q', PhantomData);
    // PhantomTuple type specified as `<char, f64>`.
    let _tuple2: PhantomTuple<char, f64> = PhantomTuple('Q', PhantomData);

    // Type specified as `<char, f32>`.
    let _struct1: PhantomStruct<char, f32> = PhantomStruct {
        first: 'Q',
        phantom: PhantomData,
    };
    // Type specified as `<char, f64>`.
    let _struct2: PhantomStruct<char, f64> = PhantomStruct {
        first: 'Q',
        phantom: PhantomData,
    };

    // Compile-time Error! Type mismatch so these cannot be compared:
    // println!("_tuple1 == _tuple2 yields: {}",
    //           _tuple1 == _tuple2);

    // Compile-time Error! Type mismatch so these cannot be compared:
    // println!("_struct1 == _struct2 yields: {}",
    //           _struct1 == _struct2);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* _tuple1 :
        Ty.apply
          (Ty.path "generics_phantom_type::PhantomTuple")
          [Ty.path "char"; Ty.path "f32"] :=
      M.alloc
        (generics_phantom_type.PhantomTuple.Build_t
          "Q"%char
          core.marker.PhantomData.Build) in
    let* _tuple2 :
        Ty.apply
          (Ty.path "generics_phantom_type::PhantomTuple")
          [Ty.path "char"; Ty.path "f64"] :=
      M.alloc
        (generics_phantom_type.PhantomTuple.Build_t
          "Q"%char
          core.marker.PhantomData.Build) in
    let* _struct1 :
        Ty.apply
          (Ty.path "generics_phantom_type::PhantomStruct")
          [Ty.path "char"; Ty.path "f32"] :=
      M.alloc
        {|
          generics_phantom_type.PhantomStruct.first := "Q"%char;
          generics_phantom_type.PhantomStruct.phantom :=
            core.marker.PhantomData.Build;
        |} in
    let* _struct2 :
        Ty.apply
          (Ty.path "generics_phantom_type::PhantomStruct")
          [Ty.path "char"; Ty.path "f64"] :=
      M.alloc
        {|
          generics_phantom_type.PhantomStruct.first := "Q"%char;
          generics_phantom_type.PhantomStruct.phantom :=
            core.marker.PhantomData.Build;
        |} in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
