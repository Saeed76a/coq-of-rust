(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct PhantomTuple *)

Module Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Axiom Implements :
    forall (A B : Ty.t),
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *)
        (Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [ A; B ])
      []
      [].
End Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.

Module Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; A; B ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.var "BinOp::Pure::and" in
      let* α1 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [ (* Self *) A; (* Rhs *) A ] in
      let* α2 := M.var "generics_phantom_type::PhantomTuple::Get_0" in
      let* α3 := M.read self in
      let* α4 := M.var "generics_phantom_type::PhantomTuple::Get_0" in
      let* α5 := M.read other in
      let* α6 := M.call α1 [ borrow (α2 (deref α3)); borrow (α4 (deref α5)) ] in
      let* α7 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ B ];
            (* Rhs *) Ty.apply (Ty.path "core::marker::PhantomData") [ B ]
          ] in
      let* α8 := M.var "generics_phantom_type::PhantomTuple::Get_1" in
      let* α9 := M.read self in
      let* α10 := M.var "generics_phantom_type::PhantomTuple::Get_1" in
      let* α11 := M.read other in
      let* α12 :=
        M.call α7 [ borrow (α8 (deref α9)); borrow (α10 (deref α11)) ] in
      M.pure (α0 α6 α12)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (A B : Ty.t),
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *)
        (Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [ A; B ])
      []
      [ ("eq", InstanceField.Method eq [ A; B ]) ].
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.

(* Enum PhantomStruct *)

Module Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Axiom Implements :
    forall (A B : Ty.t),
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Self *)
        (Ty.apply (Ty.path "generics_phantom_type::PhantomStruct") [ A; B ])
      []
      [].
End Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.

Module Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; A; B ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.var "BinOp::Pure::and" in
      let* α1 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [ (* Self *) A; (* Rhs *) A ] in
      let* α2 := M.var "generics_phantom_type::PhantomStruct::Get_first" in
      let* α3 := M.read self in
      let* α4 := M.var "generics_phantom_type::PhantomStruct::Get_first" in
      let* α5 := M.read other in
      let* α6 := M.call α1 [ borrow (α2 (deref α3)); borrow (α4 (deref α5)) ] in
      let* α7 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ B ];
            (* Rhs *) Ty.apply (Ty.path "core::marker::PhantomData") [ B ]
          ] in
      let* α8 := M.var "generics_phantom_type::PhantomStruct::Get_phantom" in
      let* α9 := M.read self in
      let* α10 := M.var "generics_phantom_type::PhantomStruct::Get_phantom" in
      let* α11 := M.read other in
      let* α12 :=
        M.call α7 [ borrow (α8 (deref α9)); borrow (α10 (deref α11)) ] in
      M.pure (α0 α6 α12)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (A B : Ty.t),
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Self *)
        (Ty.apply (Ty.path "generics_phantom_type::PhantomStruct") [ A; B ])
      []
      [ ("eq", InstanceField.Method eq [ A; B ]) ].
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.

(*
fn main() {
    // Here, `f32` and `f64` are the hidden parameters.
    // PhantomTuple type specified as `<char, f32>`.
    let _tuple1: PhantomTuple<char, f32> = PhantomTuple('Q', PhantomData);
    // PhantomTuple type specified as `<char, f64>`.
    let _tuple2: PhantomTuple<char, f64> = PhantomTuple('Q', PhantomData);

    // Type specified as `<char, f32>`.
    let _struct1: PhantomStruct<char, f32> = PhantomStruct {
        first: 'Q',
        phantom: PhantomData,
    };
    // Type specified as `<char, f64>`.
    let _struct2: PhantomStruct<char, f64> = PhantomStruct {
        first: 'Q',
        phantom: PhantomData,
    };

    // Compile-time Error! Type mismatch so these cannot be compared:
    // println!("_tuple1 == _tuple2 yields: {}",
    //           _tuple1 == _tuple2);

    // Compile-time Error! Type mismatch so these cannot be compared:
    // println!("_struct1 == _struct2 yields: {}",
    //           _struct1 == _struct2);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _tuple1 :=
      M.alloc
        (Value.StructTuple
          "generics_phantom_type::PhantomTuple"
          [ "Q"%char; core.marker.PhantomData.Build ]) in
    let* _tuple2 :=
      M.alloc
        (Value.StructTuple
          "generics_phantom_type::PhantomTuple"
          [ "Q"%char; core.marker.PhantomData.Build ]) in
    let* _struct1 :=
      M.alloc
        (Value.StructRecord
          "generics_phantom_type::PhantomStruct"
          [ ("first", "Q"%char); ("phantom", core.marker.PhantomData.Build)
          ]) in
    let* _struct2 :=
      M.alloc
        (Value.StructRecord
          "generics_phantom_type::PhantomStruct"
          [ ("first", "Q"%char); ("phantom", core.marker.PhantomData.Build)
          ]) in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
