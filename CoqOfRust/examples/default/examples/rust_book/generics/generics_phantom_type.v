(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct PhantomTuple *)

Module Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Definition Self (A B : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [ A; B ].
  
  Definition ‚Ñê (A B : Ty.t) : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomTuple_A_B.

Module Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.
  Definition Self (A B : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "generics_phantom_type::PhantomTuple") [ A; B ].
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ A; B ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [ (* Self *) A; (* Rhs *) A ] in
      let* Œ±1 := M.read self in
      let* Œ±2 := M.read other in
      let* Œ±3 :=
        M.call
          Œ±0
          [
            borrow
              ((M.var "generics_phantom_type::PhantomTuple::Get_0") (deref Œ±1));
            borrow
              ((M.var "generics_phantom_type::PhantomTuple::Get_0") (deref Œ±2))
          ] in
      let* Œ±4 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ B ];
            (* Rhs *) Ty.apply (Ty.path "core::marker::PhantomData") [ B ]
          ] in
      let* Œ±5 := M.read self in
      let* Œ±6 := M.read other in
      let* Œ±7 :=
        M.call
          Œ±4
          [
            borrow
              ((M.var "generics_phantom_type::PhantomTuple::Get_1") (deref Œ±5));
            borrow
              ((M.var "generics_phantom_type::PhantomTuple::Get_1") (deref Œ±6))
          ] in
      M.pure ((M.var "BinOp::Pure::and") Œ±3 Œ±7)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (A B : Ty.t) : Instance.t :=
    [ ("eq", InstanceField.Method (eq A B)) ].
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomTuple_A_B.

(* Enum PhantomStruct *)

Module Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Definition Self (A B : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "generics_phantom_type::PhantomStruct") [ A; B ].
  
  Definition ‚Ñê (A B : Ty.t) : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_generics_phantom_type_PhantomStruct_A_B.

Module Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.
  Definition Self (A B : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "generics_phantom_type::PhantomStruct") [ A; B ].
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ A; B ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [ (* Self *) A; (* Rhs *) A ] in
      let* Œ±1 := M.read self in
      let* Œ±2 := M.read other in
      let* Œ±3 :=
        M.call
          Œ±0
          [
            borrow
              ((M.var "generics_phantom_type::PhantomStruct::Get_first")
                (deref Œ±1));
            borrow
              ((M.var "generics_phantom_type::PhantomStruct::Get_first")
                (deref Œ±2))
          ] in
      let* Œ±4 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.apply (Ty.path "core::marker::PhantomData") [ B ];
            (* Rhs *) Ty.apply (Ty.path "core::marker::PhantomData") [ B ]
          ] in
      let* Œ±5 := M.read self in
      let* Œ±6 := M.read other in
      let* Œ±7 :=
        M.call
          Œ±4
          [
            borrow
              ((M.var "generics_phantom_type::PhantomStruct::Get_phantom")
                (deref Œ±5));
            borrow
              ((M.var "generics_phantom_type::PhantomStruct::Get_phantom")
                (deref Œ±6))
          ] in
      M.pure ((M.var "BinOp::Pure::and") Œ±3 Œ±7)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (A B : Ty.t) : Instance.t :=
    [ ("eq", InstanceField.Method (eq A B)) ].
End Impl_core_cmp_PartialEq_for_generics_phantom_type_PhantomStruct_A_B.

(*
fn main() {
    // Here, `f32` and `f64` are the hidden parameters.
    // PhantomTuple type specified as `<char, f32>`.
    let _tuple1: PhantomTuple<char, f32> = PhantomTuple('Q', PhantomData);
    // PhantomTuple type specified as `<char, f64>`.
    let _tuple2: PhantomTuple<char, f64> = PhantomTuple('Q', PhantomData);

    // Type specified as `<char, f32>`.
    let _struct1: PhantomStruct<char, f32> = PhantomStruct {
        first: 'Q',
        phantom: PhantomData,
    };
    // Type specified as `<char, f64>`.
    let _struct2: PhantomStruct<char, f64> = PhantomStruct {
        first: 'Q',
        phantom: PhantomData,
    };

    // Compile-time Error! Type mismatch so these cannot be compared:
    // println!("_tuple1 == _tuple2 yields: {}",
    //           _tuple1 == _tuple2);

    // Compile-time Error! Type mismatch so these cannot be compared:
    // println!("_struct1 == _struct2 yields: {}",
    //           _struct1 == _struct2);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* _tuple1 :=
      M.alloc
        (generics_phantom_type.PhantomTuple.Build_t
          "Q"%char
          core.marker.PhantomData.Build) in
    let* _tuple2 :=
      M.alloc
        (generics_phantom_type.PhantomTuple.Build_t
          "Q"%char
          core.marker.PhantomData.Build) in
    let* _struct1 :=
      M.alloc
        (Value.StructRecord
          "generics_phantom_type::PhantomStruct"
          [ ("first", "Q"%char); ("phantom", core.marker.PhantomData.Build)
          ]) in
    let* _struct2 :=
      M.alloc
        (Value.StructRecord
          "generics_phantom_type::PhantomStruct"
          [ ("first", "Q"%char); ("phantom", core.marker.PhantomData.Build)
          ]) in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
