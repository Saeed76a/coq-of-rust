(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Inch")
      [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Inch")
                []] :=
        M.read self in
      let* Œ±1 : Ty.path "never" := match_operator (deref Œ±0) [ ] in
      let* Œ±2 : Ty.path "never" := M.read Œ±1 in
      never_to_any Œ±2
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Inch")
      [].
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Inch")
                []] :=
        M.read self in
      M.read (deref Œ±0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ‚Ñê : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Inch")
      [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch.



Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Mm")
      [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Mm")
                []] :=
        M.read self in
      let* Œ±1 : Ty.path "never" := match_operator (deref Œ±0) [ ] in
      let* Œ±2 : Ty.path "never" := M.read Œ±1 in
      never_to_any Œ±2
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Mm")
      [].
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Mm")
                []] :=
        M.read self in
      M.read (deref Œ±0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ‚Ñê : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Mm")
      [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm.



Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
  Context {Unit : Set}.
  
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
      [Unit].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "Length") in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Unit]] :=
        M.read self in
      let* Œ±3 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Unit]] :=
        M.read self in
      let* Œ±4 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "core::marker::PhantomData") [Unit]] :=
        M.alloc
          (borrow
            (generics_phantom_type_test_case_unit_clarification.Length.Get_1
              (deref Œ±3))) in
      M.call
        ((Ty.apply
              (Ty.path "core::fmt::Formatter")
              [])::["debug_tuple_field2_finish"]
          Œ±0
          Œ±1
          (pointer_coercion
            "Unsize"
            (borrow
              (generics_phantom_type_test_case_unit_clarification.Length.Get_0
                (deref Œ±2))))
          (pointer_coercion "Unsize" (borrow Œ±4)))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
  Context {Unit : Set}.
  
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
      [Unit].
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.path "f64"]]
            (Ty.path "f64") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.clone.Clone.clone (Self := Ty.path "f64") (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Unit]] :=
        M.read self in
      let* Œ±2 : Ty.path "f64" :=
        M.call
          (Œ±0
            (borrow
              (generics_phantom_type_test_case_unit_clarification.Length.Get_0
                (deref Œ±1)))) in
      let* Œ±3 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "core::marker::PhantomData") [Unit]]]
            (Ty.apply (Ty.path "core::marker::PhantomData") [Unit]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.clone.Clone.clone
            (Self := Ty.apply (Ty.path "core::marker::PhantomData") [Unit])
            (Trait := ‚Ñê))) in
      let* Œ±4 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Unit]] :=
        M.read self in
      let* Œ±5 : Ty.apply (Ty.path "core::marker::PhantomData") [Unit] :=
        M.call
          (Œ±3
            (borrow
              (generics_phantom_type_test_case_unit_clarification.Length.Get_1
                (deref Œ±4)))) in
      M.pure
        (generics_phantom_type_test_case_unit_clarification.Length.Build_t
          Œ±2
          Œ±5)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ‚Ñê : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
  Context {Unit : Set}.
  
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
      [Unit].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.

Module  Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
Section Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
  Context {Unit : Set}.
  
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
      [Unit].
  
  (*
      type Output = Length<Unit>;
  *)
  Definition Output : Set :=
    Ty.apply
        (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
        [Unit].
  
  (*
      fn add(self, rhs: Length<Unit>) -> Length<Unit> {
          // `+` calls the `Add` implementation for `f64`.
          Length(self.0 + rhs.0, PhantomData)
      }
  *)
  Definition add (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; rhs] =>
      let* self := M.alloc self in
      let* rhs := M.alloc rhs in
      let* Œ±0 : Ty.path "f64" :=
        M.read
          (generics_phantom_type_test_case_unit_clarification.Length.Get_0
            self) in
      let* Œ±1 : Ty.path "f64" :=
        M.read
          (generics_phantom_type_test_case_unit_clarification.Length.Get_0
            rhs) in
      let* Œ±2 : Ty.path "f64" := BinOp.Panic.add Œ±0 Œ±1 in
      M.pure
        (generics_phantom_type_test_case_unit_clarification.Length.Build_t
          Œ±2
          core.marker.PhantomData.Build)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_add : Instance.t := {
    Notations.double_colon := add;
  }.
  
  Definition ‚Ñê : Instance.t := [("Output", Output); ("add", add)].
End Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
End Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.

(*
fn main() {
    // Specifies `one_foot` to have phantom type parameter `Inch`.
    let one_foot: Length<Inch> = Length(12.0, PhantomData);
    // `one_meter` has phantom type parameter `Mm`.
    let one_meter: Length<Mm> = Length(1000.0, PhantomData);

    // `+` calls the `add()` method we implemented for `Length<Unit>`.
    //
    // Since `Length` implements `Copy`, `add()` does not consume
    // `one_foot` and `one_meter` but copies them into `self` and `rhs`.
    let two_feet = one_foot + one_foot;
    let two_meters = one_meter + one_meter;

    // Addition works.
    println!("one foot + one_foot = {:?} in", two_feet.0);
    println!("one meter + one_meter = {:?} mm", two_meters.0);

    // Nonsensical operations fail as they should:
    // Compile-time Error: type mismatch.
    //let one_feter = one_foot + one_meter;
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* one_foot :
        Ty.apply
          (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
          [Ty.apply
              (Ty.path
                "generics_phantom_type_test_case_unit_clarification::Inch")
              []] :=
      let* Œ±0 : Ty.path "f64" := M.read (UnsupportedLiteral : Ty.path "f64") in
      M.alloc
        (generics_phantom_type_test_case_unit_clarification.Length.Build_t
          Œ±0
          core.marker.PhantomData.Build) in
    let* one_meter :
        Ty.apply
          (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
          [Ty.apply
              (Ty.path "generics_phantom_type_test_case_unit_clarification::Mm")
              []] :=
      let* Œ±0 : Ty.path "f64" := M.read (UnsupportedLiteral : Ty.path "f64") in
      M.alloc
        (generics_phantom_type_test_case_unit_clarification.Length.Build_t
          Œ±0
          core.marker.PhantomData.Build) in
    let* two_feet :
        Ty.apply
          (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
          [Ty.apply
              (Ty.path
                "generics_phantom_type_test_case_unit_clarification::Inch")
              []] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Ty.apply
                    (Ty.path
                      "generics_phantom_type_test_case_unit_clarification::Inch")
                    []];
              Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Ty.apply
                    (Ty.path
                      "generics_phantom_type_test_case_unit_clarification::Inch")
                    []]]
            _ :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.arith.Add.add
            (Self :=
              Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Ty.apply
                    (Ty.path
                      "generics_phantom_type_test_case_unit_clarification::Inch")
                    []])
            (Rhs :=
              Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Ty.apply
                    (Ty.path
                      "generics_phantom_type_test_case_unit_clarification::Inch")
                    []])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path
              "generics_phantom_type_test_case_unit_clarification::Length")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Inch")
                []] :=
        M.read one_foot in
      let* Œ±2 :
          Ty.apply
            (Ty.path
              "generics_phantom_type_test_case_unit_clarification::Length")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Inch")
                []] :=
        M.read one_foot in
      let* Œ±3 :
          Ty.apply
            (Ty.path
              "generics_phantom_type_test_case_unit_clarification::Length")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Inch")
                []] :=
        M.call (Œ±0 Œ±1 Œ±2) in
      M.alloc Œ±3 in
    let* two_meters :
        Ty.apply
          (Ty.path "generics_phantom_type_test_case_unit_clarification::Length")
          [Ty.apply
              (Ty.path "generics_phantom_type_test_case_unit_clarification::Mm")
              []] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Ty.apply
                    (Ty.path
                      "generics_phantom_type_test_case_unit_clarification::Mm")
                    []];
              Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Ty.apply
                    (Ty.path
                      "generics_phantom_type_test_case_unit_clarification::Mm")
                    []]]
            _ :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.arith.Add.add
            (Self :=
              Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Ty.apply
                    (Ty.path
                      "generics_phantom_type_test_case_unit_clarification::Mm")
                    []])
            (Rhs :=
              Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Length")
                [Ty.apply
                    (Ty.path
                      "generics_phantom_type_test_case_unit_clarification::Mm")
                    []])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path
              "generics_phantom_type_test_case_unit_clarification::Length")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Mm")
                []] :=
        M.read one_meter in
      let* Œ±2 :
          Ty.apply
            (Ty.path
              "generics_phantom_type_test_case_unit_clarification::Length")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Mm")
                []] :=
        M.read one_meter in
      let* Œ±3 :
          Ty.apply
            (Ty.path
              "generics_phantom_type_test_case_unit_clarification::Length")
            [Ty.apply
                (Ty.path
                  "generics_phantom_type_test_case_unit_clarification::Mm")
                []] :=
        M.call (Œ±0 Œ±1 Œ±2) in
      M.alloc Œ±3 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "one foot + one_foot = ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str " in
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow
                (generics_phantom_type_test_case_unit_clarification.Length.Get_0
                  two_feet))) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "one meter + one_meter = ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str " mm
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow
                (generics_phantom_type_test_case_unit_clarification.Length.Get_0
                  two_meters))) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
