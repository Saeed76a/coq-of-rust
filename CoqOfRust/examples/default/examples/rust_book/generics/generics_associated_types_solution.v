(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Contains.
Section Contains.
  Class Trait (Self : Set) : Type := {
    A : Set;
    B : Set;
    contains :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self];
          Ty.apply (Ty.path "ref") [_];
          Ty.apply (Ty.path "ref") [_]]
        (Ty.path "bool");
    first : Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "i32");
    last : Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "i32");
    a : Ty.function [Ty.apply (Ty.path "ref") [Self]] _;
  }.
  
  Definition Method_A `(Trait) : Instance.t := {
    Notations.double_colon_type := A;
  }.
  Definition Method_B `(Trait) : Instance.t := {
    Notations.double_colon_type := B;
  }.
End Contains.
End Contains.

Module  Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.
Section Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "generics_associated_types_solution::Container") [].
  
  (*
      type A = i32;
  *)
  Definition A : Set := Ty.path "i32".
  
  (*
      type B = i32;
  *)
  Definition B : Set := Ty.path "i32".
  
  (*
      fn contains(&self, number_1: &i32, number_2: &i32) -> bool {
          (&self.0 == number_1) && (&self.1 == number_2)
      }
  *)
  Definition contains (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; number_1; number_2] =>
      let* self := M.alloc self in
      let* number_1 := M.alloc number_1 in
      let* number_2 := M.alloc number_2 in
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "i32"]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "i32"]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i32"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "i32"])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_associated_types_solution::Container")
                []] :=
        M.read self in
      let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
        M.alloc
          (borrow
            (generics_associated_types_solution.Container.Get_0 (deref Œ±1))) in
      let* Œ±3 : Ty.path "bool" := M.call (Œ±0 (borrow Œ±2) (borrow number_1)) in
      let* Œ±4 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "i32"]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "i32"]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "ref") [Ty.path "i32"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "i32"])
            (Trait := ‚Ñê))) in
      let* Œ±5 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_associated_types_solution::Container")
                []] :=
        M.read self in
      let* Œ±6 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
        M.alloc
          (borrow
            (generics_associated_types_solution.Container.Get_1 (deref Œ±5))) in
      let* Œ±7 : Ty.path "bool" := M.call (Œ±4 (borrow Œ±6) (borrow number_2)) in
      M.pure (BinOp.Pure.and Œ±3 Œ±7)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_contains : Instance.t := {
    Notations.double_colon := contains;
  }.
  
  (*
      fn first(&self) -> i32 {
          self.0
      }
  *)
  Definition first (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_associated_types_solution::Container")
                []] :=
        M.read self in
      M.read (generics_associated_types_solution.Container.Get_0 (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_first : Instance.t := {
    Notations.double_colon := first;
  }.
  
  (*
      fn last(&self) -> i32 {
          self.1
      }
  *)
  Definition last (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_associated_types_solution::Container")
                []] :=
        M.read self in
      M.read (generics_associated_types_solution.Container.Get_1 (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_last : Instance.t := {
    Notations.double_colon := last;
  }.
  
  (*
      fn a(&self) -> i32 {
          self.0
      }
  *)
  Definition a (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "generics_associated_types_solution::Container")
                []] :=
        M.read self in
      M.read (generics_associated_types_solution.Container.Get_0 (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_a : Instance.t := {
    Notations.double_colon := a;
  }.
  
  Definition ‚Ñê : Instance.t := [("A", A);
    ("B", B);
    ("contains", contains);
    ("first", first);
    ("last", last);
    ("a", a)].
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.

(*
fn difference<C: Contains>(container: &C) -> i32 {
    container.last() - container.first()
}
*)
Definition difference (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [C], [container] =>
    let* container := M.alloc container in
    let* Œ±0 : Ty.function [Ty.apply (Ty.path "ref") [C]] (Ty.path "i32") :=
      ltac:(M.get_method (fun ‚Ñê =>
        generics_associated_types_solution.Contains.last
          (Self := C)
          (Trait := ‚Ñê))) in
    let* Œ±1 : Ty.apply (Ty.path "ref") [C] := M.read container in
    let* Œ±2 : Ty.path "i32" := M.call (Œ±0 Œ±1) in
    let* Œ±3 : Ty.function [Ty.apply (Ty.path "ref") [C]] (Ty.path "i32") :=
      ltac:(M.get_method (fun ‚Ñê =>
        generics_associated_types_solution.Contains.first
          (Self := C)
          (Trait := ‚Ñê))) in
    let* Œ±4 : Ty.apply (Ty.path "ref") [C] := M.read container in
    let* Œ±5 : Ty.path "i32" := M.call (Œ±3 Œ±4) in
    BinOp.Panic.sub Œ±2 Œ±5
  | _, _ => M.impossible
  end.

(*
fn get_a<C: Contains>(container: &C) -> C::A {
    container.a()
}
*)
Definition get_a (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [C], [container] =>
    let* container := M.alloc container in
    let* Œ±0 : Ty.function [Ty.apply (Ty.path "ref") [C]] _ :=
      ltac:(M.get_method (fun ‚Ñê =>
        generics_associated_types_solution.Contains.a
          (Self := C)
          (Trait := ‚Ñê))) in
    let* Œ±1 : Ty.apply (Ty.path "ref") [C] := M.read container in
    M.call (Œ±0 Œ±1)
  | _, _ => M.impossible
  end.

(*
fn main() {
    let number_1 = 3;
    let number_2 = 10;

    let container = Container(number_1, number_2);

    println!(
        "Does container contain {} and {}: {}",
        &number_1,
        &number_2,
        container.contains(&number_1, &number_2)
    );
    println!("First number: {}", container.first());
    println!("Last number: {}", container.last());

    println!("The difference is: {}", difference(&container));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* number_1 : Ty.path "i32" :=
      M.alloc ((Integer.of_Z 3) : Ty.path "i32") in
    let* number_2 : Ty.path "i32" :=
      M.alloc ((Integer.of_Z 10) : Ty.path "i32") in
    let* container :
        Ty.apply (Ty.path "generics_associated_types_solution::Container") [] :=
      let* Œ±0 : Ty.path "i32" := M.read number_1 in
      let* Œ±1 : Ty.path "i32" := M.read number_2 in
      M.alloc (generics_associated_types_solution.Container.Build_t Œ±0 Œ±1) in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Does container contain ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str " and ") in
        let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str ": ") in
        let* Œ±3 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1; Œ±2; Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
          M.alloc (borrow number_1) in
        let* Œ±6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±5)) in
        let* Œ±7 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
          M.alloc (borrow number_2) in
        let* Œ±8 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±7)) in
        let* Œ±9 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "generics_associated_types_solution::Container")
                      []];
                Ty.apply (Ty.path "ref") [_];
                Ty.apply (Ty.path "ref") [_]]
              (Ty.path "bool") :=
          ltac:(M.get_method (fun ‚Ñê =>
            generics_associated_types_solution.Contains.contains
              (Self :=
                Ty.apply
                  (Ty.path "generics_associated_types_solution::Container")
                  [])
              (Trait := ‚Ñê))) in
        let* Œ±10 : Ty.path "bool" :=
          M.call (Œ±9 (borrow container) (borrow number_1) (borrow number_2)) in
        let* Œ±11 : Ty.path "bool" := M.alloc Œ±10 in
        let* Œ±12 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±11)) in
        let* Œ±13 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±6; Œ±8; Œ±12 ] in
        let* Œ±14 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±4))
              (pointer_coercion "Unsize" (borrow Œ±13))) in
        let* Œ±15 : Ty.tuple := M.call (std.io.stdio._print Œ±14) in
        M.alloc Œ±15 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "First number: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "generics_associated_types_solution::Container")
                      []]]
              (Ty.path "i32") :=
          ltac:(M.get_method (fun ‚Ñê =>
            generics_associated_types_solution.Contains.first
              (Self :=
                Ty.apply
                  (Ty.path "generics_associated_types_solution::Container")
                  [])
              (Trait := ‚Ñê))) in
        let* Œ±4 : Ty.path "i32" := M.call (Œ±3 (borrow container)) in
        let* Œ±5 : Ty.path "i32" := M.alloc Œ±4 in
        let* Œ±6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±5)) in
        let* Œ±7 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±6 ] in
        let* Œ±8 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±7))) in
        let* Œ±9 : Ty.tuple := M.call (std.io.stdio._print Œ±8) in
        M.alloc Œ±9 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Last number: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "generics_associated_types_solution::Container")
                      []]]
              (Ty.path "i32") :=
          ltac:(M.get_method (fun ‚Ñê =>
            generics_associated_types_solution.Contains.last
              (Self :=
                Ty.apply
                  (Ty.path "generics_associated_types_solution::Container")
                  [])
              (Trait := ‚Ñê))) in
        let* Œ±4 : Ty.path "i32" := M.call (Œ±3 (borrow container)) in
        let* Œ±5 : Ty.path "i32" := M.alloc Œ±4 in
        let* Œ±6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±5)) in
        let* Œ±7 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±6 ] in
        let* Œ±8 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±7))) in
        let* Œ±9 : Ty.tuple := M.call (std.io.stdio._print Œ±8) in
        M.alloc Œ±9 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "The difference is: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.path "i32" :=
          M.call
            (generics_associated_types_solution.difference
              (borrow container)) in
        let* Œ±4 : Ty.path "i32" := M.alloc Œ±3 in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±4)) in
        let* Œ±6 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±5 ] in
        let* Œ±7 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±6))) in
        let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
        M.alloc Œ±8 in
      M.alloc tt in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
