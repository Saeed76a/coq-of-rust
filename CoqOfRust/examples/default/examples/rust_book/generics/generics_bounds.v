(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  HasArea.
Section HasArea.
  Class Trait (Self : Set) : Type := {
    area : Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "f64");
  }.
  
End HasArea.
End HasArea.



Module  Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
  Definition Self : Ty.t := Ty.apply (Ty.path "generics_bounds::Rectangle") [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "Rectangle") in
      let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "length") in
      let* Œ±3 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "generics_bounds::Rectangle") []] :=
        M.read self in
      let* Œ±4 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "height") in
      let* Œ±5 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "generics_bounds::Rectangle") []] :=
        M.read self in
      let* Œ±6 : Ty.apply (Ty.path "ref") [Ty.path "f64"] :=
        M.alloc (borrow (generics_bounds.Rectangle.Get_height (deref Œ±5))) in
      M.call
        ((Ty.apply
              (Ty.path "core::fmt::Formatter")
              [])::["debug_struct_field2_finish"]
          Œ±0
          Œ±1
          Œ±2
          (pointer_coercion
            "Unsize"
            (borrow (generics_bounds.Rectangle.Get_length (deref Œ±3))))
          Œ±4
          (pointer_coercion "Unsize" (borrow Œ±6)))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.



Module  Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
  Definition Self : Ty.t := Ty.apply (Ty.path "generics_bounds::Rectangle") [].
  
  (*
      fn area(&self) -> f64 {
          self.length * self.height
      }
  *)
  Definition area (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "generics_bounds::Rectangle") []] :=
        M.read self in
      let* Œ±1 : Ty.path "f64" :=
        M.read (generics_bounds.Rectangle.Get_length (deref Œ±0)) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "generics_bounds::Rectangle") []] :=
        M.read self in
      let* Œ±3 : Ty.path "f64" :=
        M.read (generics_bounds.Rectangle.Get_height (deref Œ±2)) in
      BinOp.Panic.mul Œ±1 Œ±3
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_area : Instance.t := {
    Notations.double_colon := area;
  }.
  
  Definition ‚Ñê : Instance.t := [("area", area)].
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.

(*
fn print_debug<T: Debug>(t: &T) {
    println!("{:?}", t);
}
*)
Definition print_debug (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [T], [t] =>
    let* t := M.alloc t in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow t)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.

(*
fn area<T: HasArea>(t: &T) -> f64 {
    t.area()
}
*)
Definition area (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [T], [t] =>
    let* t := M.alloc t in
    let* Œ±0 : Ty.function [Ty.apply (Ty.path "ref") [T]] (Ty.path "f64") :=
      ltac:(M.get_method (fun ‚Ñê =>
        generics_bounds.HasArea.area (Self := T) (Trait := ‚Ñê))) in
    let* Œ±1 : Ty.apply (Ty.path "ref") [T] := M.read t in
    M.call (Œ±0 Œ±1)
  | _, _ => M.impossible
  end.

(*
fn main() {
    let rectangle = Rectangle {
        length: 3.0,
        height: 4.0,
    };
    let _triangle = Triangle {
        length: 3.0,
        height: 4.0,
    };

    print_debug(&rectangle);
    println!("Area: {}", rectangle.area());

    //print_debug(&_triangle);
    //println!("Area: {}", _triangle.area());
    // ^ TODO: Try uncommenting these.
    // | Error: Does not implement either `Debug` or `HasArea`.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* rectangle : Ty.apply (Ty.path "generics_bounds::Rectangle") [] :=
      let* Œ±0 : Ty.path "f64" := M.read (UnsupportedLiteral : Ty.path "f64") in
      let* Œ±1 : Ty.path "f64" := M.read (UnsupportedLiteral : Ty.path "f64") in
      M.alloc
        {|
          generics_bounds.Rectangle.length := Œ±0;
          generics_bounds.Rectangle.height := Œ±1;
        |} in
    let* _triangle : Ty.apply (Ty.path "generics_bounds::Triangle") [] :=
      let* Œ±0 : Ty.path "f64" := M.read (UnsupportedLiteral : Ty.path "f64") in
      let* Œ±1 : Ty.path "f64" := M.read (UnsupportedLiteral : Ty.path "f64") in
      M.alloc
        {|
          generics_bounds.Triangle.length := Œ±0;
          generics_bounds.Triangle.height := Œ±1;
        |} in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.tuple :=
        M.call (generics_bounds.print_debug (borrow rectangle)) in
      M.alloc Œ±0 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Area: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "generics_bounds::Rectangle") []]]
              (Ty.path "f64") :=
          ltac:(M.get_method (fun ‚Ñê =>
            generics_bounds.HasArea.area
              (Self := Ty.apply (Ty.path "generics_bounds::Rectangle") [])
              (Trait := ‚Ñê))) in
        let* Œ±4 : Ty.path "f64" := M.call (Œ±3 (borrow rectangle)) in
        let* Œ±5 : Ty.path "f64" := M.alloc Œ±4 in
        let* Œ±6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±5)) in
        let* Œ±7 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±6 ] in
        let* Œ±8 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±7))) in
        let* Œ±9 : Ty.tuple := M.call (std.io.stdio._print Œ±8) in
        M.alloc Œ±9 in
      M.alloc tt in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
