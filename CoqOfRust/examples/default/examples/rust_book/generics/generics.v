(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct A *)

(* Struct Single *)

(* Struct SingleGen *)

(*
fn main() {
    // `Single` is concrete and explicitly takes `A`.
    let _s = Single(A);

    // Create a variable `_char` of type `SingleGen<char>`
    // and give it the value `SingleGen('a')`.
    // Here, `SingleGen` has a type parameter explicitly specified.
    let _char: SingleGen<char> = SingleGen('a');

    // `SingleGen` can also have a type parameter implicitly specified:
    let _t = SingleGen(A); // Uses `A` defined at the top.
    let _i32 = SingleGen(6); // Uses `i32`.
    let _char = SingleGen('a'); // Uses `char`.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _s := M.alloc (generics.Single.Build_t generics.A.Build) in
    let* _char := M.alloc (generics.SingleGen.Build_t "a"%char) in
    let* _t := M.alloc (generics.SingleGen.Build_t generics.A.Build) in
    let* _i32 :=
      M.alloc (generics.SingleGen.Build_t ((Integer.of_Z 6) : Ty.path "i32")) in
    let* _char := M.alloc (generics.SingleGen.Build_t "a"%char) in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
