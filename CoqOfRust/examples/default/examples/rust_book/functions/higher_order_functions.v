(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn is_odd(n: u32) -> bool {
    n % 2 == 1
}
*)
Definition is_odd (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [n] =>
    let* n := M.alloc n in
    let* α0 : Ty.path "u32" := M.read n in
    let* α1 : Ty.path "u32" :=
      BinOp.Panic.rem α0 ((Integer.of_Z 2) : Ty.path "u32") in
    M.pure (BinOp.Pure.eq α1 ((Integer.of_Z 1) : Ty.path "u32"))
  | _, _ => M.impossible
  end.

(*
fn main() {
    println!("Find the sum of all the squared odd numbers under 1000");
    let upper = 1000;

    // Imperative approach
    // Declare accumulator variable
    let mut acc = 0;
    // Iterate: 0, 1, 2, ... to infinity
    for n in 0.. {
        // Square the number
        let n_squared = n * n;

        if n_squared >= upper {
            // Break loop if exceeded the upper limit
            break;
        } else if is_odd(n_squared) {
            // Accumulate value, if it's odd
            acc += n_squared;
        }
    }
    println!("imperative style: {}", acc);

    // Functional approach
    let sum_of_squared_odd_numbers: u32 = (0..)
        .map(|n| n * n) // All natural numbers squared
        .take_while(|&n_squared| n_squared < upper) // Below upper limit
        .filter(|&n_squared| is_odd(n_squared)) // That are odd
        .sum(); // Sum them
    println!("functional style: {}", sum_of_squared_odd_numbers);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read
            (mk_str
              "Find the sum of all the squared odd numbers under 1000
") in
        let* α1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0 ] in
        let* α2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow α1))) in
        let* α3 : Ty.tuple := M.call (std.io.stdio._print α2) in
        M.alloc α3 in
      M.alloc tt in
    let* upper : Ty.path "u32" :=
      M.alloc ((Integer.of_Z 1000) : Ty.path "u32") in
    let* acc : Ty.path "u32" := M.alloc ((Integer.of_Z 0) : Ty.path "u32") in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.function
            [Ty.apply (Ty.path "core::ops::range::RangeFrom") [Ty.path "u32"]]
            _ :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              Ty.apply (Ty.path "core::ops::range::RangeFrom") [Ty.path "u32"])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply (Ty.path "core::ops::range::RangeFrom") [Ty.path "u32"] :=
        M.call
          (α0
            {|
              core.ops.range.RangeFrom.start :=
                (Integer.of_Z 0) : Ty.path "u32";
            |}) in
      let* α2 :
          Ty.apply (Ty.path "core::ops::range::RangeFrom") [Ty.path "u32"] :=
        M.alloc α1 in
      let* α3 : Ty.tuple :=
        match_operator
          α2
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ : Ty.tuple :=
                  let* α0 :
                      Ty.function
                        [Ty.apply
                            (Ty.path "mut_ref")
                            [Ty.apply
                                (Ty.path "core::ops::range::RangeFrom")
                                [Ty.path "u32"]]]
                        (Ty.apply (Ty.path "core::option::Option") [_]) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.iter.traits.iterator.Iterator.next
                        (Self :=
                          Ty.apply
                            (Ty.path "core::ops::range::RangeFrom")
                            [Ty.path "u32"])
                        (Trait := ℐ))) in
                  let* α1 :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "u32"] :=
                    M.call (α0 (borrow_mut iter)) in
                  let* α2 :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "u32"] :=
                    M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 : Ty.path "never" := M.break in
                          let* α1 : Ty.path "never" := M.read α0 in
                          let* α2 : Ty.tuple := never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match
                        end) :
                        Ty.tuple;
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let γ0_0 := core.option.Option.Get_Some_0 γ in
                          let* n := M.copy γ0_0 in
                          let* n_squared : Ty.path "u32" :=
                            let* α0 : Ty.path "u32" := M.read n in
                            let* α1 : Ty.path "u32" := M.read n in
                            let* α2 : Ty.path "u32" := BinOp.Panic.mul α0 α1 in
                            M.alloc α2 in
                          let* α0 : Ty.path "u32" := M.read n_squared in
                          let* α1 : Ty.path "u32" := M.read upper in
                          let* α2 : Ty.path "bool" :=
                            M.alloc (BinOp.Pure.ge α0 α1) in
                          let* α3 : Ty.path "bool" := M.read (use α2) in
                          if α3 then
                            let* α0 : Ty.path "never" := M.break in
                            let* α1 : Ty.path "never" := M.read α0 in
                            let* α2 : Ty.tuple := never_to_any α1 in
                            M.alloc α2
                          else
                            let* α0 : Ty.path "u32" := M.read n_squared in
                            let* α1 : Ty.path "bool" :=
                              M.call (higher_order_functions.is_odd α0) in
                            let* α2 : Ty.path "bool" := M.alloc α1 in
                            let* α3 : Ty.path "bool" := M.read (use α2) in
                            if α3 then
                              let* _ : Ty.tuple :=
                                let β : Ty.path "u32" := acc in
                                let* α0 := M.read β in
                                let* α1 : Ty.path "u32" := M.read n_squared in
                                let* α2 := BinOp.Panic.add α0 α1 in
                                assign β α2 in
                              M.alloc tt
                            else
                              M.alloc tt
                        | _ => M.break_match
                        end) :
                        Ty.tuple
                    ] in
                M.alloc tt)) :
              Ty.tuple
          ] in
      M.pure (use α3) in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "imperative style: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow acc)) in
        let* α4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α3 ] in
        let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α4))) in
        let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
        M.alloc α6 in
      M.alloc tt in
    let* sum_of_squared_odd_numbers : Ty.path "u32" :=
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "core::iter::adapters::filter::Filter")
                [Ty.apply
                    (Ty.path "core::iter::adapters::take_while::TakeWhile")
                    [Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        [Ty.apply
                            (Ty.path "core::ops::range::RangeFrom")
                            [Ty.path "u32"];
                          Ty.function
                            [Ty.tuple (Ty.path "u32")]
                            (Ty.path "u32")];
                      Ty.function
                        [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                        (Ty.path "bool")];
                  Ty.function
                    [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                    (Ty.path "bool")]]
            (Ty.path "u32") :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.iterator.Iterator.sum
            (Self :=
              Ty.apply
                (Ty.path "core::iter::adapters::filter::Filter")
                [Ty.apply
                    (Ty.path "core::iter::adapters::take_while::TakeWhile")
                    [Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        [Ty.apply
                            (Ty.path "core::ops::range::RangeFrom")
                            [Ty.path "u32"];
                          Ty.function
                            [Ty.tuple (Ty.path "u32")]
                            (Ty.path "u32")];
                      Ty.function
                        [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                        (Ty.path "bool")];
                  Ty.function
                    [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                    (Ty.path "bool")])
            (S := Ty.path "u32")
            (Trait := ℐ))) in
      let* α1 :
          Ty.function
            [Ty.apply
                (Ty.path "core::iter::adapters::take_while::TakeWhile")
                [Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [Ty.apply
                        (Ty.path "core::ops::range::RangeFrom")
                        [Ty.path "u32"];
                      Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")];
                  Ty.function
                    [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                    (Ty.path "bool")];
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                (Ty.path "bool")]
            (Ty.apply
              (Ty.path "core::iter::adapters::filter::Filter")
              [Ty.apply
                  (Ty.path "core::iter::adapters::take_while::TakeWhile")
                  [Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      [Ty.apply
                          (Ty.path "core::ops::range::RangeFrom")
                          [Ty.path "u32"];
                        Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")];
                    Ty.function
                      [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                      (Ty.path "bool")];
                Ty.function
                  [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                  (Ty.path "bool")]) :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.iterator.Iterator.filter
            (Self :=
              Ty.apply
                (Ty.path "core::iter::adapters::take_while::TakeWhile")
                [Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [Ty.apply
                        (Ty.path "core::ops::range::RangeFrom")
                        [Ty.path "u32"];
                      Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")];
                  Ty.function
                    [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                    (Ty.path "bool")])
            (P :=
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                (Ty.path "bool"))
            (Trait := ℐ))) in
      let* α2 :
          Ty.function
            [Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [Ty.apply
                    (Ty.path "core::ops::range::RangeFrom")
                    [Ty.path "u32"];
                  Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")];
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                (Ty.path "bool")]
            (Ty.apply
              (Ty.path "core::iter::adapters::take_while::TakeWhile")
              [Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  [Ty.apply
                      (Ty.path "core::ops::range::RangeFrom")
                      [Ty.path "u32"];
                    Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")];
                Ty.function
                  [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                  (Ty.path "bool")]) :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.iterator.Iterator.take_while
            (Self :=
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [Ty.apply
                    (Ty.path "core::ops::range::RangeFrom")
                    [Ty.path "u32"];
                  Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")])
            (P :=
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                (Ty.path "bool"))
            (Trait := ℐ))) in
      let* α3 :
          Ty.function
            [Ty.apply (Ty.path "core::ops::range::RangeFrom") [Ty.path "u32"];
              Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")]
            (Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              [Ty.apply (Ty.path "core::ops::range::RangeFrom") [Ty.path "u32"];
                Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")]) :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.iterator.Iterator.map
            (Self :=
              Ty.apply (Ty.path "core::ops::range::RangeFrom") [Ty.path "u32"])
            (B := Ty.path "u32")
            (F := Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32"))
            (Trait := ℐ))) in
      let* α4 :
          Ty.apply
            (Ty.path "core::iter::adapters::map::Map")
            [Ty.apply (Ty.path "core::ops::range::RangeFrom") [Ty.path "u32"];
              Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")] :=
        M.call
          (α3
            {|
              core.ops.range.RangeFrom.start :=
                (Integer.of_Z 0) : Ty.path "u32";
            |}
            (fun (α0 : Ty.path "u32") =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* n := M.copy γ in
                    let* α0 : Ty.path "u32" := M.read n in
                    let* α1 : Ty.path "u32" := M.read n in
                    BinOp.Panic.mul α0 α1) :
                    Ty.path "u32"
                ]) :
              Ty.path "u32")) in
      let* α5 :
          Ty.apply
            (Ty.path "core::iter::adapters::take_while::TakeWhile")
            [Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [Ty.apply
                    (Ty.path "core::ops::range::RangeFrom")
                    [Ty.path "u32"];
                  Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")];
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                (Ty.path "bool")] :=
        M.call
          (α2
            α4
            (fun (α0 : Ty.apply (Ty.path "ref") [Ty.path "u32"]) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* γ :=
                      let* α0 := M.read γ in
                      M.pure (deref α0) in
                    let* n_squared := M.copy γ in
                    let* α0 : Ty.path "u32" := M.read n_squared in
                    let* α1 : Ty.path "u32" := M.read upper in
                    M.pure (BinOp.Pure.lt α0 α1)) :
                    Ty.path "bool"
                ]) :
              Ty.path "bool")) in
      let* α6 :
          Ty.apply
            (Ty.path "core::iter::adapters::filter::Filter")
            [Ty.apply
                (Ty.path "core::iter::adapters::take_while::TakeWhile")
                [Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [Ty.apply
                        (Ty.path "core::ops::range::RangeFrom")
                        [Ty.path "u32"];
                      Ty.function [Ty.tuple (Ty.path "u32")] (Ty.path "u32")];
                  Ty.function
                    [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                    (Ty.path "bool")];
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "u32"])]
                (Ty.path "bool")] :=
        M.call
          (α1
            α5
            (fun (α0 : Ty.apply (Ty.path "ref") [Ty.path "u32"]) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* γ :=
                      let* α0 := M.read γ in
                      M.pure (deref α0) in
                    let* n_squared := M.copy γ in
                    let* α0 : Ty.path "u32" := M.read n_squared in
                    M.call (higher_order_functions.is_odd α0)) :
                    Ty.path "bool"
                ]) :
              Ty.path "bool")) in
      let* α7 : Ty.path "u32" := M.call (α0 α6) in
      M.alloc α7 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "functional style: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow sum_of_squared_odd_numbers)) in
        let* α4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α3 ] in
        let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α4))) in
        let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
        M.alloc α6 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
