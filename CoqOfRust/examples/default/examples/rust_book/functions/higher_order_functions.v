(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn is_odd(n: u32) -> bool {
    n % 2 == 1
}
*)
Definition is_odd (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ n ] =>
    let* n := M.alloc n in
    let* α0 := M.var "BinOp::Pure::eq" in
    let* α1 := M.var "BinOp::Panic::rem" in
    let* α2 := M.read n in
    let* α3 := α1 α2 ((Integer.of_Z 2) : Ty.path "u32") in
    M.pure (α0 α3 ((Integer.of_Z 1) : Ty.path "u32"))
  | _, _ => M.impossible
  end.

(*
fn main() {
    println!("Find the sum of all the squared odd numbers under 1000");
    let upper = 1000;

    // Imperative approach
    // Declare accumulator variable
    let mut acc = 0;
    // Iterate: 0, 1, 2, ... to infinity
    for n in 0.. {
        // Square the number
        let n_squared = n * n;

        if n_squared >= upper {
            // Break loop if exceeded the upper limit
            break;
        } else if is_odd(n_squared) {
            // Accumulate value, if it's odd
            acc += n_squared;
        }
    }
    println!("imperative style: {}", acc);

    // Functional approach
    let sum_of_squared_odd_numbers: u32 = (0..)
        .map(|n| n * n) // All natural numbers squared
        .take_while(|&n_squared| n_squared < upper) // Below upper limit
        .filter(|&n_squared| is_odd(n_squared)) // That are odd
        .sum(); // Sum them
    println!("functional style: {}", sum_of_squared_odd_numbers);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 :=
          M.read
            (mk_str
              "Find the sum of all the squared odd numbers under 1000
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" α2 ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* upper := M.alloc ((Integer.of_Z 1000) : Ty.path "u32") in
    let* acc := M.alloc ((Integer.of_Z 0) : Ty.path "u32") in
    let* _ :=
      let* α0 :=
        M.get_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply (Ty.path "core::ops::range::RangeFrom") [ Ty.path "u32" ]
          ] in
      let* α1 :=
        M.call
          α0
          [
            Value.StructRecord
              "core::ops::range::RangeFrom"
              [ ("start", (Integer.of_Z 0) : Ty.path "u32") ]
          ] in
      let* α2 := M.alloc α1 in
      let* α3 :=
        match_operator
          α2
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ :=
                  let* α0 :=
                    M.get_method
                      "core::iter::traits::iterator::Iterator"
                      "next"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::ops::range::RangeFrom")
                            [ Ty.path "u32" ]
                      ] in
                  let* α1 := M.call α0 [ iter ] in
                  let* α2 := M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match 
                        end) :
                        Ty.tuple [];
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let* γ0_0 :=
                            let* α0 :=
                              M.var "core::option::Option::Get_Some_0" in
                            M.pure (α0 γ) in
                          let* n := M.copy γ0_0 in
                          let* n_squared :=
                            let* α0 := M.var "BinOp::Panic::mul" in
                            let* α1 := M.read n in
                            let* α2 := M.read n in
                            let* α3 := α0 α1 α2 in
                            M.alloc α3 in
                          let* α0 := M.var "BinOp::Pure::ge" in
                          let* α1 := M.read n_squared in
                          let* α2 := M.read upper in
                          let* α3 := M.alloc (α0 α1 α2) in
                          let* α4 := M.read (use α3) in
                          if α4 then
                            let* α0 := M.break in
                            let* α1 := M.read α0 in
                            let* α2 := never_to_any α1 in
                            M.alloc α2
                          else
                            let* α0 := M.var "higher_order_functions::is_odd" in
                            let* α1 := M.read n_squared in
                            let* α2 := M.call α0 [ α1 ] in
                            let* α3 := M.alloc α2 in
                            let* α4 := M.read (use α3) in
                            if α4 then
                              let* _ :=
                                let β := acc in
                                let* α0 := M.var "assign" in
                                let* α1 := M.var "BinOp::Panic::add" in
                                let* α2 := M.read β in
                                let* α3 := M.read n_squared in
                                let* α4 := α1 α2 α3 in
                                α0 β α4 in
                              M.alloc tt
                            else
                              M.alloc tt
                        | _ => M.break_match 
                        end) :
                        Ty.tuple []
                    ] in
                M.alloc tt)) :
              Ty.tuple []
          ] in
      M.pure (use α3) in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "imperative style: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ acc ] in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ pointer_coercion "Unsize" α3; pointer_coercion "Unsize" α5 ] in
        let* α7 := M.call α0 [ α6 ] in
        M.alloc α7 in
      M.alloc tt in
    let* sum_of_squared_odd_numbers :=
      let* α0 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "sum"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::iter::adapters::filter::Filter")
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::take_while::TakeWhile")
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        [
                          Ty.apply
                            (Ty.path "core::ops::range::RangeFrom")
                            [ Ty.path "u32" ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "u32" ] ]
                            (Ty.path "u32")
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [ Ty.apply (Ty.path "ref") [ Ty.path "u32" ] ]
                        ]
                        (Ty.path "bool")
                    ];
                  Ty.function
                    [ Ty.tuple [ Ty.apply (Ty.path "ref") [ Ty.path "u32" ] ] ]
                    (Ty.path "bool")
                ];
            (* S *) Ty.path "u32"
          ] in
      let* α1 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "filter"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::iter::adapters::take_while::TakeWhile")
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [
                      Ty.apply
                        (Ty.path "core::ops::range::RangeFrom")
                        [ Ty.path "u32" ];
                      Ty.function [ Ty.tuple [ Ty.path "u32" ] ] (Ty.path "u32")
                    ];
                  Ty.function
                    [ Ty.tuple [ Ty.apply (Ty.path "ref") [ Ty.path "u32" ] ] ]
                    (Ty.path "bool")
                ];
            (* P *)
              Ty.function
                [ Ty.tuple [ Ty.apply (Ty.path "ref") [ Ty.path "u32" ] ] ]
                (Ty.path "bool")
          ] in
      let* α2 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "take_while"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [
                  Ty.apply
                    (Ty.path "core::ops::range::RangeFrom")
                    [ Ty.path "u32" ];
                  Ty.function [ Ty.tuple [ Ty.path "u32" ] ] (Ty.path "u32")
                ];
            (* P *)
              Ty.function
                [ Ty.tuple [ Ty.apply (Ty.path "ref") [ Ty.path "u32" ] ] ]
                (Ty.path "bool")
          ] in
      let* α3 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "map"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::ops::range::RangeFrom")
                [ Ty.path "u32" ];
            (* B *) Ty.path "u32";
            (* F *) Ty.function [ Ty.tuple [ Ty.path "u32" ] ] (Ty.path "u32")
          ] in
      let* α4 :=
        M.call
          α3
          [
            Value.StructRecord
              "core::ops::range::RangeFrom"
              [ ("start", (Integer.of_Z 0) : Ty.path "u32") ];
            fun (α0 : Ty.path "u32") =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* n := M.copy γ in
                    let* α0 := M.var "BinOp::Panic::mul" in
                    let* α1 := M.read n in
                    let* α2 := M.read n in
                    α0 α1 α2) :
                    _
                ]) :
              _
          ] in
      let* α5 :=
        M.call
          α2
          [
            α4;
            fun (α0 : Ty.apply (Ty.path "ref") [ Ty.path "u32" ]) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* γ :=
                      let* α0 := M.read γ in
                      M.pure (deref α0) in
                    let* n_squared := M.copy γ in
                    let* α0 := M.var "BinOp::Pure::lt" in
                    let* α1 := M.read n_squared in
                    let* α2 := M.read upper in
                    M.pure (α0 α1 α2)) :
                    _
                ]) :
              _
          ] in
      let* α6 :=
        M.call
          α1
          [
            α5;
            fun (α0 : Ty.apply (Ty.path "ref") [ Ty.path "u32" ]) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* γ :=
                      let* α0 := M.read γ in
                      M.pure (deref α0) in
                    let* n_squared := M.copy γ in
                    let* α0 := M.var "higher_order_functions::is_odd" in
                    let* α1 := M.read n_squared in
                    M.call α0 [ α1 ]) :
                    _
                ]) :
              _
          ] in
      let* α7 := M.call α0 [ α6 ] in
      M.alloc α7 in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "functional style: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ sum_of_squared_odd_numbers ] in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ pointer_coercion "Unsize" α3; pointer_coercion "Unsize" α5 ] in
        let* α7 := M.call α0 [ α6 ] in
        M.alloc α7 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
