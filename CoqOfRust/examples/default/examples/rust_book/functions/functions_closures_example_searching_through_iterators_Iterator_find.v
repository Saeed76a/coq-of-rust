(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let vec1 = vec![1, 2, 3];
    let vec2 = vec![4, 5, 6];

    // `iter()` for vecs yields `&i32`.
    let mut iter = vec1.iter();
    // `into_iter()` for vecs yields `i32`.
    let mut into_iter = vec2.into_iter();

    // `iter()` for vecs yields `&i32`, and we want to reference one of its
    // items, so we have to destructure `&&i32` to `i32`
    println!("Find 2 in vec1: {:?}", iter.find(|&&x| x == 2));
    // `into_iter()` for vecs yields `i32`, and we want to reference one of
    // its items, so we have to destructure `&i32` to `i32`
    println!("Find 2 in vec2: {:?}", into_iter.find(|&x| x == 2));

    let array1 = [1, 2, 3];
    let array2 = [4, 5, 6];

    // `iter()` for arrays yields `&i32`
    println!("Find 2 in array1: {:?}", array1.iter().find(|&&x| x == 2));
    // `into_iter()` for arrays yields `i32`
    println!(
        "Find 2 in array2: {:?}",
        array2.into_iter().find(|&x| *x == 2)
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* vec1 :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "slice") [ Ty.path "i32" ])
          "into_vec" in
      let* α1 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "alloc::boxed::Box")
            [
              Ty.apply (Ty.path "array") [ Ty.path "i32" ];
              Ty.path "alloc::alloc::Global"
            ])
          "new" in
      let* α2 :=
        M.alloc
          (Value.Array
            [
              Value.Integer Integer.I32 1;
              Value.Integer Integer.I32 2;
              Value.Integer Integer.I32 3
            ]) in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 := M.read α3 in
      let* α5 := M.call α0 [ M.pointer_coercion (* Unsize *) α4 ] in
      M.alloc α5 in
    let* vec2 :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "slice") [ Ty.path "i32" ])
          "into_vec" in
      let* α1 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "alloc::boxed::Box")
            [
              Ty.apply (Ty.path "array") [ Ty.path "i32" ];
              Ty.path "alloc::alloc::Global"
            ])
          "new" in
      let* α2 :=
        M.alloc
          (Value.Array
            [
              Value.Integer Integer.I32 4;
              Value.Integer Integer.I32 5;
              Value.Integer Integer.I32 6
            ]) in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 := M.read α3 in
      let* α5 := M.call α0 [ M.pointer_coercion (* Unsize *) α4 ] in
      M.alloc α5 in
    let* iter :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "slice") [ Ty.path "i32" ])
          "iter" in
      let* α1 :=
        M.get_trait_method
          "core::ops::deref::Deref"
          "deref"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α2 := M.call α1 [ vec1 ] in
      let* α3 := M.call α0 [ α2 ] in
      M.alloc α3 in
    let* into_iter :=
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α1 := M.read vec2 in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "Find 2 in vec1: ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α6 :=
          M.get_trait_method
            "core::iter::traits::iterator::Iterator"
            "find"
            [
              (* Self *)
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "i32" ];
              (* P *)
                Ty.function
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "ref")
                          [ Ty.apply (Ty.path "ref") [ Ty.path "i32" ] ]
                      ]
                  ]
                  (Ty.path "bool")
            ] in
        let* α7 :=
          M.call
            α6
            [
              iter;
              fun
                  (α0 :
                    Ty.apply
                      (Ty.path "ref")
                      [ Ty.apply (Ty.path "ref") [ Ty.path "i32" ] ]) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  (Value.Array
                    [
                      fun γ =>
                        (let* γ :=
                          let* α0 := M.read γ in
                          M.pure (deref α0) in
                        let* γ :=
                          let* α0 := M.read γ in
                          M.pure (deref α0) in
                        let* x := M.copy γ in
                        let* α0 := M.read x in
                        M.pure (BinOp.Pure.eq α0 (Value.Integer Integer.I32 2)))
                    ]))
            ] in
        let* α8 := M.alloc α7 in
        let* α9 := M.call α5 [ α8 ] in
        let* α10 := M.alloc (Value.Array [ α9 ]) in
        let* α11 :=
          M.call
            α1
            [
              M.pointer_coercion (* Unsize *) α4;
              M.pointer_coercion (* Unsize *) α10
            ] in
        let* α12 := M.call α0 [ α11 ] in
        M.alloc α12 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "Find 2 in vec2: ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α6 :=
          M.get_trait_method
            "core::iter::traits::iterator::Iterator"
            "find"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::into_iter::IntoIter")
                  [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ];
              (* P *)
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "ref") [ Ty.path "i32" ] ] ]
                  (Ty.path "bool")
            ] in
        let* α7 :=
          M.call
            α6
            [
              into_iter;
              fun (α0 : Ty.apply (Ty.path "ref") [ Ty.path "i32" ]) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  (Value.Array
                    [
                      fun γ =>
                        (let* γ :=
                          let* α0 := M.read γ in
                          M.pure (deref α0) in
                        let* x := M.copy γ in
                        let* α0 := M.read x in
                        M.pure (BinOp.Pure.eq α0 (Value.Integer Integer.I32 2)))
                    ]))
            ] in
        let* α8 := M.alloc α7 in
        let* α9 := M.call α5 [ α8 ] in
        let* α10 := M.alloc (Value.Array [ α9 ]) in
        let* α11 :=
          M.call
            α1
            [
              M.pointer_coercion (* Unsize *) α4;
              M.pointer_coercion (* Unsize *) α10
            ] in
        let* α12 := M.call α0 [ α11 ] in
        M.alloc α12 in
      M.alloc (Value.Tuple []) in
    let* array1 :=
      M.alloc
        (Value.Array
          [
            Value.Integer Integer.I32 1;
            Value.Integer Integer.I32 2;
            Value.Integer Integer.I32 3
          ]) in
    let* array2 :=
      M.alloc
        (Value.Array
          [
            Value.Integer Integer.I32 4;
            Value.Integer Integer.I32 5;
            Value.Integer Integer.I32 6
          ]) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "Find 2 in array1: ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α6 :=
          M.get_trait_method
            "core::iter::traits::iterator::Iterator"
            "find"
            [
              (* Self *)
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "i32" ];
              (* P *)
                Ty.function
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "ref")
                          [ Ty.apply (Ty.path "ref") [ Ty.path "i32" ] ]
                      ]
                  ]
                  (Ty.path "bool")
            ] in
        let* α7 :=
          M.get_associated_function
            (Ty.apply (Ty.path "slice") [ Ty.path "i32" ])
            "iter" in
        let* α8 := M.call α7 [ M.pointer_coercion (* Unsize *) array1 ] in
        let* α9 := M.alloc α8 in
        let* α10 :=
          M.call
            α6
            [
              α9;
              fun
                  (α0 :
                    Ty.apply
                      (Ty.path "ref")
                      [ Ty.apply (Ty.path "ref") [ Ty.path "i32" ] ]) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  (Value.Array
                    [
                      fun γ =>
                        (let* γ :=
                          let* α0 := M.read γ in
                          M.pure (deref α0) in
                        let* γ :=
                          let* α0 := M.read γ in
                          M.pure (deref α0) in
                        let* x := M.copy γ in
                        let* α0 := M.read x in
                        M.pure (BinOp.Pure.eq α0 (Value.Integer Integer.I32 2)))
                    ]))
            ] in
        let* α11 := M.alloc α10 in
        let* α12 := M.call α5 [ α11 ] in
        let* α13 := M.alloc (Value.Array [ α12 ]) in
        let* α14 :=
          M.call
            α1
            [
              M.pointer_coercion (* Unsize *) α4;
              M.pointer_coercion (* Unsize *) α13
            ] in
        let* α15 := M.call α0 [ α14 ] in
        M.alloc α15 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "Find 2 in array2: ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α6 :=
          M.get_trait_method
            "core::iter::traits::iterator::Iterator"
            "find"
            [
              (* Self *)
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "i32" ];
              (* P *)
                Ty.function
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "ref")
                          [ Ty.apply (Ty.path "ref") [ Ty.path "i32" ] ]
                      ]
                  ]
                  (Ty.path "bool")
            ] in
        let* α7 :=
          M.get_trait_method
            "core::iter::traits::collect::IntoIterator"
            "into_iter"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "ref")
                  [ Ty.apply (Ty.path "array") [ Ty.path "i32" ] ]
            ] in
        let* α8 := M.call α7 [ array2 ] in
        let* α9 := M.alloc α8 in
        let* α10 :=
          M.call
            α6
            [
              α9;
              fun
                  (α0 :
                    Ty.apply
                      (Ty.path "ref")
                      [ Ty.apply (Ty.path "ref") [ Ty.path "i32" ] ]) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  (Value.Array
                    [
                      fun γ =>
                        (let* γ :=
                          let* α0 := M.read γ in
                          M.pure (deref α0) in
                        let* x := M.copy γ in
                        let* α0 := M.read x in
                        let* α1 := M.read α0 in
                        M.pure (BinOp.Pure.eq α1 (Value.Integer Integer.I32 2)))
                    ]))
            ] in
        let* α11 := M.alloc α10 in
        let* α12 := M.call α5 [ α11 ] in
        let* α13 := M.alloc (Value.Array [ α12 ]) in
        let* α14 :=
          M.call
            α1
            [
              M.pointer_coercion (* Unsize *) α4;
              M.pointer_coercion (* Unsize *) α13
            ] in
        let* α15 := M.call α0 [ α14 ] in
        M.alloc α15 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
