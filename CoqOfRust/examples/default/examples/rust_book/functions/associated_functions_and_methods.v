(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Point *)

Module Impl_associated_functions_and_methods_Point.
  Definition Self : Ty.t := Ty.path "associated_functions_and_methods::Point".
  
  (*
      fn origin() -> Point {
          Point { y: 0.0, x: 1.0 }
      }
  *)
  Definition origin (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] =>
      let* α0 := M.read UnsupportedLiteral in
      let* α1 := M.read UnsupportedLiteral in
      M.pure
        (Value.StructRecord
          "associated_functions_and_methods::Point"
          [ ("y", α0); ("x", α1) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_origin :
    M.IsAssociatedFunction Self "origin" origin [].
  
  (*
      fn new(x: f64, y: f64) -> Point {
          Point { x: x, y: y }
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ x; y ] =>
      let* x := M.alloc x in
      let* y := M.alloc y in
      let* α0 := M.read x in
      let* α1 := M.read y in
      M.pure
        (Value.StructRecord
          "associated_functions_and_methods::Point"
          [ ("x", α0); ("y", α1) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new [].
End Impl_associated_functions_and_methods_Point.

(* Struct Rectangle *)

Module Impl_associated_functions_and_methods_Rectangle.
  Definition Self : Ty.t :=
    Ty.path "associated_functions_and_methods::Rectangle".
  
  (*
      fn get_p1(&self) -> Point {
          self.p1
      }
  *)
  Definition get_p1 (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record α0 "p1")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get_p1 :
    M.IsAssociatedFunction Self "get_p1" get_p1 [].
  
  (*
      fn area(&self) -> f64 {
          // `self` gives access to the struct fields via the dot operator
          let Point { x: x1, y: y1 } = self.p1;
          let Point { x: x2, y: y2 } = self.p2;
  
          // `abs` is a `f64` method that returns the absolute value of the
          // caller
          ((x1 - x2) * (y1 - y2)).abs()
      }
  *)
  Definition area (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        match_operator
          (M.get_struct_record α0 "p1")
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              |
                  {|
                    associated_functions_and_methods.Point.x := _;
                    associated_functions_and_methods.Point.y := _;
                  |}
                  =>
                let* γ0_0 :=
                  let* α0 :=
                    M.var "associated_functions_and_methods::Point::Get_x" in
                  M.pure (α0 γ) in
                let* γ0_1 :=
                  let* α0 :=
                    M.var "associated_functions_and_methods::Point::Get_y" in
                  M.pure (α0 γ) in
                let* x1 := M.copy γ0_0 in
                let* y1 := M.copy γ0_1 in
                let* α0 := M.read self in
                match_operator
                  (M.get_struct_record α0 "p2")
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      |
                          {|
                            associated_functions_and_methods.Point.x := _;
                            associated_functions_and_methods.Point.y := _;
                          |}
                          =>
                        let* γ0_0 :=
                          let* α0 :=
                            M.var
                              "associated_functions_and_methods::Point::Get_x" in
                          M.pure (α0 γ) in
                        let* γ0_1 :=
                          let* α0 :=
                            M.var
                              "associated_functions_and_methods::Point::Get_y" in
                          M.pure (α0 γ) in
                        let* x2 := M.copy γ0_0 in
                        let* y2 := M.copy γ0_1 in
                        let* α0 := M.read x1 in
                        let* α1 := M.read x2 in
                        let* α2 := BinOp.Panic.sub α0 α1 in
                        let* α3 := M.read y1 in
                        let* α4 := M.read y2 in
                        let* α5 := BinOp.Panic.sub α3 α4 in
                        let* α6 := BinOp.Panic.mul α2 α5 in
                        let* α7 := M.call (Ty.path "f64")::["abs"] [ α6 ] in
                        M.alloc α7
                      end)
                  ]
              end)
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_area : M.IsAssociatedFunction Self "area" area [].
  
  (*
      fn perimeter(&self) -> f64 {
          let Point { x: x1, y: y1 } = self.p1;
          let Point { x: x2, y: y2 } = self.p2;
  
          2.0 * ((x1 - x2).abs() + (y1 - y2).abs())
      }
  *)
  Definition perimeter (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        match_operator
          (M.get_struct_record α0 "p1")
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              |
                  {|
                    associated_functions_and_methods.Point.x := _;
                    associated_functions_and_methods.Point.y := _;
                  |}
                  =>
                let* γ0_0 :=
                  let* α0 :=
                    M.var "associated_functions_and_methods::Point::Get_x" in
                  M.pure (α0 γ) in
                let* γ0_1 :=
                  let* α0 :=
                    M.var "associated_functions_and_methods::Point::Get_y" in
                  M.pure (α0 γ) in
                let* x1 := M.copy γ0_0 in
                let* y1 := M.copy γ0_1 in
                let* α0 := M.read self in
                match_operator
                  (M.get_struct_record α0 "p2")
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      |
                          {|
                            associated_functions_and_methods.Point.x := _;
                            associated_functions_and_methods.Point.y := _;
                          |}
                          =>
                        let* γ0_0 :=
                          let* α0 :=
                            M.var
                              "associated_functions_and_methods::Point::Get_x" in
                          M.pure (α0 γ) in
                        let* γ0_1 :=
                          let* α0 :=
                            M.var
                              "associated_functions_and_methods::Point::Get_y" in
                          M.pure (α0 γ) in
                        let* x2 := M.copy γ0_0 in
                        let* y2 := M.copy γ0_1 in
                        let* α0 := M.read UnsupportedLiteral in
                        let* α1 := M.read x1 in
                        let* α2 := M.read x2 in
                        let* α3 := BinOp.Panic.sub α1 α2 in
                        let* α4 := M.call (Ty.path "f64")::["abs"] [ α3 ] in
                        let* α5 := M.read y1 in
                        let* α6 := M.read y2 in
                        let* α7 := BinOp.Panic.sub α5 α6 in
                        let* α8 := M.call (Ty.path "f64")::["abs"] [ α7 ] in
                        let* α9 := BinOp.Panic.add α4 α8 in
                        let* α10 := BinOp.Panic.mul α0 α9 in
                        M.alloc α10
                      end)
                  ]
              end)
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_perimeter :
    M.IsAssociatedFunction Self "perimeter" perimeter [].
  
  (*
      fn translate(&mut self, x: f64, y: f64) {
          self.p1.x += x;
          self.p2.x += x;
  
          self.p1.y += y;
          self.p2.y += y;
      }
  *)
  Definition translate (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; x; y ] =>
      let* self := M.alloc self in
      let* x := M.alloc x in
      let* y := M.alloc y in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure (M.get_struct_record (M.get_struct_record α0 "p1") "x") in
        let* α0 := M.read β in
        let* α1 := M.read x in
        let* α2 := BinOp.Panic.add α0 α1 in
        M.assign β α2 in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure (M.get_struct_record (M.get_struct_record α0 "p2") "x") in
        let* α0 := M.read β in
        let* α1 := M.read x in
        let* α2 := BinOp.Panic.add α0 α1 in
        M.assign β α2 in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure (M.get_struct_record (M.get_struct_record α0 "p1") "y") in
        let* α0 := M.read β in
        let* α1 := M.read y in
        let* α2 := BinOp.Panic.add α0 α1 in
        M.assign β α2 in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure (M.get_struct_record (M.get_struct_record α0 "p2") "y") in
        let* α0 := M.read β in
        let* α1 := M.read y in
        let* α2 := BinOp.Panic.add α0 α1 in
        M.assign β α2 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_translate :
    M.IsAssociatedFunction Self "translate" translate [].
End Impl_associated_functions_and_methods_Rectangle.

(* Struct Pair *)

Module Impl_associated_functions_and_methods_Pair.
  Definition Self : Ty.t := Ty.path "associated_functions_and_methods::Pair".
  
  (*
      fn destroy(self) {
          // Destructure `self`
          let Pair(first, second) = self;
  
          println!("Destroying Pair({}, {})", first, second);
  
          // `first` and `second` go out of scope and get freed
      }
  *)
  Definition destroy (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          self
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | associated_functions_and_methods.Pair.Build_t _ _ =>
                let* γ0_0 :=
                  let* α0 :=
                    M.var "associated_functions_and_methods::Pair::Get_0" in
                  M.pure (α0 γ) in
                let* γ0_1 :=
                  let* α0 :=
                    M.var "associated_functions_and_methods::Pair::Get_1" in
                  M.pure (α0 γ) in
                let* first := M.copy γ0_0 in
                let* second := M.copy γ0_1 in
                let* _ :=
                  let* _ :=
                    let* α0 := M.var "std::io::stdio::_print" in
                    let* α1 := M.read (mk_str "Destroying Pair(") in
                    let* α2 := M.read (mk_str ", ") in
                    let* α3 := M.read (mk_str ")
") in
                    let* α4 := M.alloc [ α1; α2; α3 ] in
                    let* α5 :=
                      M.call
                        (Ty.path "core::fmt::rt::Argument")::["new_display"]
                        [ first ] in
                    let* α6 :=
                      M.call
                        (Ty.path "core::fmt::rt::Argument")::["new_display"]
                        [ second ] in
                    let* α7 := M.alloc [ α5; α6 ] in
                    let* α8 :=
                      M.call
                        (Ty.path "core::fmt::Arguments")::["new_v1"]
                        [
                          M.pointer_coercion "Unsize" α4;
                          M.pointer_coercion "Unsize" α7
                        ] in
                    let* α9 := M.call α0 [ α8 ] in
                    M.alloc α9 in
                  M.alloc tt in
                M.alloc tt
              end)
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_destroy :
    M.IsAssociatedFunction Self "destroy" destroy [].
End Impl_associated_functions_and_methods_Pair.

(*
fn main() {
    let rectangle = Rectangle {
        // Associated functions are called using double colons
        p1: Point::origin(),
        p2: Point::new(3.0, 4.0),
    };

    // Methods are called using the dot operator
    // Note that the first argument `&self` is implicitly passed, i.e.
    // `rectangle.perimeter()` === `Rectangle::perimeter(&rectangle)`
    println!("Rectangle perimeter: {}", rectangle.perimeter());
    println!("Rectangle area: {}", rectangle.area());

    let mut square = Rectangle {
        p1: Point::origin(),
        p2: Point::new(1.0, 1.0),
    };

    // Error! `rectangle` is immutable, but this method requires a mutable
    // object
    //rectangle.translate(1.0, 0.0);
    // TODO ^ Try uncommenting this line

    // Okay! Mutable objects can call mutable methods
    square.translate(1.0, 1.0);

    let pair = Pair(Box::new(1), Box::new(2));

    pair.destroy();

    // Error! Previous `destroy` call "consumed" `pair`
    //pair.destroy();
    // TODO ^ Try uncommenting this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* rectangle :=
      let* α0 :=
        M.call
          (Ty.path "associated_functions_and_methods::Point")::["origin"]
          [] in
      let* α1 := M.read UnsupportedLiteral in
      let* α2 := M.read UnsupportedLiteral in
      let* α3 :=
        M.call
          (Ty.path "associated_functions_and_methods::Point")::["new"]
          [ α1; α2 ] in
      M.alloc
        (Value.StructRecord
          "associated_functions_and_methods::Rectangle"
          [ ("p1", α0); ("p2", α3) ]) in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Rectangle perimeter: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path
                "associated_functions_and_methods::Rectangle")::["perimeter"]
            [ rectangle ] in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α5 ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α7
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Rectangle area: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path "associated_functions_and_methods::Rectangle")::["area"]
            [ rectangle ] in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α5 ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α7
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc tt in
    let* square :=
      let* α0 :=
        M.call
          (Ty.path "associated_functions_and_methods::Point")::["origin"]
          [] in
      let* α1 := M.read UnsupportedLiteral in
      let* α2 := M.read UnsupportedLiteral in
      let* α3 :=
        M.call
          (Ty.path "associated_functions_and_methods::Point")::["new"]
          [ α1; α2 ] in
      M.alloc
        (Value.StructRecord
          "associated_functions_and_methods::Rectangle"
          [ ("p1", α0); ("p2", α3) ]) in
    let* _ :=
      let* α0 := M.read UnsupportedLiteral in
      let* α1 := M.read UnsupportedLiteral in
      let* α2 :=
        M.call
          (Ty.path "associated_functions_and_methods::Rectangle")::["translate"]
          [ square; α0; α1 ] in
      M.alloc α2 in
    let* pair :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::boxed::Box")
              [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ])::["new"]
          [ Value.Integer Integer.I32 1 ] in
      let* α1 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::boxed::Box")
              [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ])::["new"]
          [ Value.Integer Integer.I32 2 ] in
      M.alloc
        (Value.StructTuple
          "associated_functions_and_methods::Pair"
          [ α0; α1 ]) in
    let* _ :=
      let* α0 := M.read pair in
      let* α1 :=
        M.call
          (Ty.path "associated_functions_and_methods::Pair")::["destroy"]
          [ α0 ] in
      M.alloc α1 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
