(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn apply<F>(f: F)
where
    F: Fn(),
{
    f();
}
*)
Definition apply (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [F], [f] =>
    let* f := M.alloc f in
    let* _ : Ty.tuple :=
      let* α0 : Ty.function [Ty.apply (Ty.path "ref") [F]; Ty.tuple] _ :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.function.Fn.call
            (Self := F)
            (Args := Ty.tuple)
            (Trait := ℐ))) in
      let* α1 : Ty.tuple := M.call (α0 (borrow f) tt) in
      M.alloc α1 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let x = 7;

    // Capture `x` into an anonymous type and implement
    // `Fn` for it. Store it in `print`.
    let print = || println!("{}", x);

    apply(print);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* x : Ty.path "i32" := M.alloc ((Integer.of_Z 7) : Ty.path "i32") in
    let* print : Ty.function [Ty.tuple] Ty.tuple :=
      M.alloc
        (fun (α0 : Ty.path "unit") =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* _ : Ty.tuple :=
                  let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "") in
                  let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "
") in
                  let* α2 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ α0; α1 ] in
                  let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow x)) in
                  let* α4 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                    M.alloc [ α3 ] in
                  let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α4))) in
                  let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                  M.alloc α6 in
                let* α0 : Ty.path "unit" := M.alloc tt in
                M.read α0) :
                Ty.tuple
            ]) :
          Ty.tuple) in
    let* _ : Ty.tuple :=
      let* α0 : Ty.function [Ty.tuple] Ty.tuple := M.read print in
      let* α1 : Ty.tuple :=
        M.call (functions_closures_type_anonymity_define_and_use.apply α0) in
      M.alloc α1 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
