(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let vec = vec![1, 9, 3, 3, 13, 2];

    // `iter()` for vecs yields `&i32` and `position()` does not take a reference, so
    // we have to destructure `&i32` to `i32`
    let index_of_first_even_number = vec.iter().position(|&x| x % 2 == 0);
    assert_eq!(index_of_first_even_number, Some(5));

    // `into_iter()` for vecs yields `i32` and `position()` does not take a reference, so
    // we do not have to destructure
    let index_of_first_negative_number = vec.into_iter().position(|x| x < 0);
    assert_eq!(index_of_first_negative_number, None);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* vec :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* Œ±0 : Ty.apply (Ty.path "array") [Ty.path "i32"] :=
        M.alloc
          [
            (Integer.of_Z 1) : Ty.path "i32";
            (Integer.of_Z 9) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32";
            (Integer.of_Z 13) : Ty.path "i32";
            (Integer.of_Z 2) : Ty.path "i32"
          ] in
      let* Œ±1 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±0) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read Œ±1 in
      let* Œ±3 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply (Ty.path "slice") [Ty.path "i32"])::["into_vec"]
            (pointer_coercion "Unsize" Œ±2)) in
      M.alloc Œ±3 in
    let* index_of_first_even_number :
        Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "i32"]];
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
                (Ty.path "bool")]
            (Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.position
            (Self :=
              Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "i32"])
            (P :=
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
                (Ty.path "bool"))
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "i32";
                      Ty.apply (Ty.path "alloc::alloc::Global") []]]]
            (Ty.apply (Ty.path "ref") [_]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.ops.deref.Deref.deref
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ‚Ñê))) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "slice") [Ty.path "i32"]] :=
        M.call (Œ±1 (borrow vec)) in
      let* Œ±3 : Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "i32"] :=
        M.call ((Ty.apply (Ty.path "slice") [Ty.path "i32"])::["iter"] Œ±2) in
      let* Œ±4 : Ty.apply (Ty.path "core::slice::iter::Iter") [Ty.path "i32"] :=
        M.alloc Œ±3 in
      let* Œ±5 : Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"] :=
        M.call
          (Œ±0
            (borrow_mut Œ±4)
            (fun (Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "i32"]) =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* Œ≥ :=
                      let* Œ±0 := M.read Œ≥ in
                      M.pure (deref Œ±0) in
                    let* x := M.copy Œ≥ in
                    let* Œ±0 : Ty.path "i32" := M.read x in
                    let* Œ±1 : Ty.path "i32" :=
                      BinOp.Panic.rem Œ±0 ((Integer.of_Z 2) : Ty.path "i32") in
                    M.pure
                      (BinOp.Pure.eq Œ±1 ((Integer.of_Z 0) : Ty.path "i32"))) :
                    Ty.path "bool"
                ]) :
              Ty.path "bool")) in
      M.alloc Œ±5 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"] :=
        M.alloc
          (core.option.Option.Some ((Integer.of_Z 5) : Ty.path "usize")) in
      let* Œ±1 :
          Ty.tuple
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"]])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"]]) :=
        M.alloc (borrow index_of_first_even_number, borrow Œ±0) in
      match_operator
        Œ±1
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* left_val := M.copy Œ≥0_0 in
              let* right_val := M.copy Œ≥0_1 in
              let* Œ±0 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.path "usize"]];
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.path "usize"]]]
                    (Ty.path "bool") :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.cmp.PartialEq.eq
                    (Self :=
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "usize"])
                    (Rhs :=
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "usize"])
                    (Trait := ‚Ñê))) in
              let* Œ±1 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "usize"]] :=
                M.read left_val in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "usize"]] :=
                M.read right_val in
              let* Œ±3 : Ty.path "bool" := M.call (Œ±0 Œ±1 Œ±2) in
              let* Œ±4 : Ty.path "bool" := M.alloc (UnOp.not Œ±3) in
              let* Œ±5 : Ty.path "bool" := M.read (use Œ±4) in
              if Œ±5 then
                let* kind :
                    Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.alloc core.panicking.AssertKind.Eq in
                let* Œ±0 : Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.read kind in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::option::Option")
                          [Ty.path "usize"]] :=
                  M.read left_val in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::option::Option")
                          [Ty.path "usize"]] :=
                  M.read right_val in
                let* Œ±3 : Ty.path "never" :=
                  M.call
                    (core.panicking.assert_failed
                      Œ±0
                      Œ±1
                      Œ±2
                      core.option.Option.None) in
                let* Œ±0 : Ty.path "never" := M.alloc Œ±3 in
                let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                M.alloc Œ±2
              else
                M.alloc tt
            end) :
            Ty.tuple
        ] in
    let* index_of_first_negative_number :
        Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    [Ty.path "i32";
                      Ty.apply (Ty.path "alloc::alloc::Global") []]];
              Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "bool")]
            (Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.position
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (P := Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "bool"))
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.function
            [Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
            _ :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ‚Ñê))) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read vec in
      let* Œ±3 :
          Ty.apply
            (Ty.path "alloc::vec::into_iter::IntoIter")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (Œ±1 Œ±2) in
      let* Œ±4 :
          Ty.apply
            (Ty.path "alloc::vec::into_iter::IntoIter")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.alloc Œ±3 in
      let* Œ±5 : Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"] :=
        M.call
          (Œ±0
            (borrow_mut Œ±4)
            (fun (Œ±0 : Ty.path "i32") =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* x := M.copy Œ≥ in
                    let* Œ±0 : Ty.path "i32" := M.read x in
                    M.pure
                      (BinOp.Pure.lt Œ±0 ((Integer.of_Z 0) : Ty.path "i32"))) :
                    Ty.path "bool"
                ]) :
              Ty.path "bool")) in
      M.alloc Œ±5 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"] :=
        M.alloc core.option.Option.None in
      let* Œ±1 :
          Ty.tuple
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"]])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "core::option::Option") [Ty.path "usize"]]) :=
        M.alloc (borrow index_of_first_negative_number, borrow Œ±0) in
      match_operator
        Œ±1
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* left_val := M.copy Œ≥0_0 in
              let* right_val := M.copy Œ≥0_1 in
              let* Œ±0 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.path "usize"]];
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::option::Option")
                            [Ty.path "usize"]]]
                    (Ty.path "bool") :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.cmp.PartialEq.eq
                    (Self :=
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "usize"])
                    (Rhs :=
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "usize"])
                    (Trait := ‚Ñê))) in
              let* Œ±1 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "usize"]] :=
                M.read left_val in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "usize"]] :=
                M.read right_val in
              let* Œ±3 : Ty.path "bool" := M.call (Œ±0 Œ±1 Œ±2) in
              let* Œ±4 : Ty.path "bool" := M.alloc (UnOp.not Œ±3) in
              let* Œ±5 : Ty.path "bool" := M.read (use Œ±4) in
              if Œ±5 then
                let* kind :
                    Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.alloc core.panicking.AssertKind.Eq in
                let* Œ±0 : Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.read kind in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::option::Option")
                          [Ty.path "usize"]] :=
                  M.read left_val in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::option::Option")
                          [Ty.path "usize"]] :=
                  M.read right_val in
                let* Œ±3 : Ty.path "never" :=
                  M.call
                    (core.panicking.assert_failed
                      Œ±0
                      Œ±1
                      Œ±2
                      core.option.Option.None) in
                let* Œ±0 : Ty.path "never" := M.alloc Œ±3 in
                let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                M.alloc Œ±2
              else
                M.alloc tt
            end) :
            Ty.tuple
        ] in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
