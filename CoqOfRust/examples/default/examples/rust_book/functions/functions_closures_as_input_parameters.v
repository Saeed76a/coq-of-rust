(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn apply<F>(f: F)
where
    // The closure takes no input and returns nothing.
    F: FnOnce(),
{
    // ^ TODO: Try changing this to `Fn` or `FnMut`.

    f();
}
*)
Definition apply (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [F], [f] =>
    let* f := M.alloc f in
    let* _ : Ty.tuple :=
      let* α0 : Ty.function [F; Ty.tuple] _ :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.function.FnOnce.call_once
            (Self := F)
            (Args := Ty.tuple)
            (Trait := ℐ))) in
      let* α1 : F := M.read f in
      let* α2 : Ty.tuple := M.call (α0 α1 tt) in
      M.alloc α2 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn apply_to_3<F>(f: F) -> i32
where
    // The closure takes an `i32` and returns an `i32`.
    F: Fn(i32) -> i32,
{
    f(3)
}
*)
Definition apply_to_3 (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [F], [f] =>
    let* f := M.alloc f in
    let* α0 :
        Ty.function
          [Ty.apply (Ty.path "ref") [F]; Ty.tuple (Ty.path "i32")]
          _ :=
      ltac:(M.get_method (fun ℐ =>
        core.ops.function.Fn.call
          (Self := F)
          (Args := Ty.tuple (Ty.path "i32"))
          (Trait := ℐ))) in
    M.call (α0 (borrow f) ((Integer.of_Z 3) : Ty.path "i32"))
  | _, _ => M.impossible
  end.

(*
fn main() {
    use std::mem;

    let greeting = "hello";
    // A non-copy type.
    // `to_owned` creates owned data from borrowed one
    let mut farewell = "goodbye".to_owned();

    // Capture 2 variables: `greeting` by reference and
    // `farewell` by value.
    let diary = || {
        // `greeting` is by reference: requires `Fn`.
        println!("I said {}.", greeting);

        // Mutation forces `farewell` to be captured by
        // mutable reference. Now requires `FnMut`.
        farewell.push_str("!!!");
        println!("Then I screamed {}.", farewell);
        println!("Now I can sleep. zzzzz");

        // Manually calling drop forces `farewell` to
        // be captured by value. Now requires `FnOnce`.
        mem::drop(farewell);
    };

    // Call the function which applies the closure.
    apply(diary);

    // `double` satisfies `apply_to_3`'s trait bound
    let double = |x| 2 * x;

    println!("3 doubled: {}", apply_to_3(double));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* greeting : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
      M.copy (mk_str "hello") in
    let* farewell : Ty.apply (Ty.path "alloc::string::String") [] :=
      let* α0 : Ty.function [Ty.apply (Ty.path "ref") [Ty.path "str"]] _ :=
        ltac:(M.get_method (fun ℐ =>
          alloc.borrow.ToOwned.to_owned
            (Self := Ty.path "str")
            (Trait := ℐ))) in
      let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "goodbye") in
      let* α2 : Ty.apply (Ty.path "alloc::string::String") [] :=
        M.call (α0 α1) in
      M.alloc α2 in
    let* diary : Ty.function [Ty.tuple] Ty.tuple :=
      M.alloc
        (fun (α0 : Ty.path "unit") =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* _ : Ty.tuple :=
                  let* _ : Ty.tuple :=
                    let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                      M.read (mk_str "I said ") in
                    let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                      M.read (mk_str ".
") in
                    let* α2 :
                        Ty.apply
                          (Ty.path "array")
                          [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                      M.alloc [ α0; α1 ] in
                    let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                      M.call
                        ((Ty.apply
                              (Ty.path "core::fmt::rt::Argument")
                              [])::["new_display"]
                          (borrow greeting)) in
                    let* α4 :
                        Ty.apply
                          (Ty.path "array")
                          [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                      M.alloc [ α3 ] in
                    let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                      M.call
                        ((Ty.apply
                              (Ty.path "core::fmt::Arguments")
                              [])::["new_v1"]
                          (pointer_coercion "Unsize" (borrow α2))
                          (pointer_coercion "Unsize" (borrow α4))) in
                    let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                    M.alloc α6 in
                  M.alloc tt in
                let* _ : Ty.tuple :=
                  let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "!!!") in
                  let* α1 : Ty.tuple :=
                    M.call
                      ((Ty.apply
                            (Ty.path "alloc::string::String")
                            [])::["push_str"]
                        (borrow_mut farewell)
                        α0) in
                  M.alloc α1 in
                let* _ : Ty.tuple :=
                  let* _ : Ty.tuple :=
                    let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                      M.read (mk_str "Then I screamed ") in
                    let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                      M.read (mk_str ".
") in
                    let* α2 :
                        Ty.apply
                          (Ty.path "array")
                          [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                      M.alloc [ α0; α1 ] in
                    let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                      M.call
                        ((Ty.apply
                              (Ty.path "core::fmt::rt::Argument")
                              [])::["new_display"]
                          (borrow farewell)) in
                    let* α4 :
                        Ty.apply
                          (Ty.path "array")
                          [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                      M.alloc [ α3 ] in
                    let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                      M.call
                        ((Ty.apply
                              (Ty.path "core::fmt::Arguments")
                              [])::["new_v1"]
                          (pointer_coercion "Unsize" (borrow α2))
                          (pointer_coercion "Unsize" (borrow α4))) in
                    let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                    M.alloc α6 in
                  M.alloc tt in
                let* _ : Ty.tuple :=
                  let* _ : Ty.tuple :=
                    let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                      M.read (mk_str "Now I can sleep. zzzzz
") in
                    let* α1 :
                        Ty.apply
                          (Ty.path "array")
                          [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                      M.alloc [ α0 ] in
                    let* α2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                      M.call
                        ((Ty.apply
                              (Ty.path "core::fmt::Arguments")
                              [])::["new_const"]
                          (pointer_coercion "Unsize" (borrow α1))) in
                    let* α3 : Ty.tuple := M.call (std.io.stdio._print α2) in
                    M.alloc α3 in
                  M.alloc tt in
                let* _ : Ty.tuple :=
                  let* α0 : Ty.apply (Ty.path "alloc::string::String") [] :=
                    M.read farewell in
                  let* α1 : Ty.tuple := M.call (core.mem.drop α0) in
                  M.alloc α1 in
                let* α0 : Ty.path "unit" := M.alloc tt in
                M.read α0) :
                Ty.tuple
            ]) :
          Ty.tuple) in
    let* _ : Ty.tuple :=
      let* α0 : Ty.function [Ty.tuple] Ty.tuple := M.read diary in
      let* α1 : Ty.tuple :=
        M.call (functions_closures_as_input_parameters.apply α0) in
      M.alloc α1 in
    let* double : Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "i32") :=
      M.alloc
        (fun (α0 : Ty.path "i32") =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* x := M.copy γ in
                let* α0 : Ty.path "i32" := M.read x in
                BinOp.Panic.mul ((Integer.of_Z 2) : Ty.path "i32") α0) :
                Ty.path "i32"
            ]) :
          Ty.path "i32") in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "3 doubled: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 : Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "i32") :=
          M.read double in
        let* α4 : Ty.path "i32" :=
          M.call (functions_closures_as_input_parameters.apply_to_3 α3) in
        let* α5 : Ty.path "i32" := M.alloc α4 in
        let* α6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow α5)) in
        let* α7 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α6 ] in
        let* α8 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α7))) in
        let* α9 : Ty.tuple := M.call (std.io.stdio._print α8) in
        M.alloc α9 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
