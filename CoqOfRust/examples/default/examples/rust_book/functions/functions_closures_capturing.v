(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    use std::mem;

    let color = String::from("green");

    // A closure to print `color` which immediately borrows (`&`) `color` and
    // stores the borrow and closure in the `print` variable. It will remain
    // borrowed until `print` is used the last time.
    //
    // `println!` only requires arguments by immutable reference so it doesn't
    // impose anything more restrictive.
    let print = || println!("`color`: {}", color);

    // Call the closure using the borrow.
    print();

    // `color` can be borrowed immutably again, because the closure only holds
    // an immutable reference to `color`.
    let _reborrow = &color;
    print();

    // A move or reborrow is allowed after the final use of `print`
    let _color_moved = color;

    let mut count = 0;
    // A closure to increment `count` could take either `&mut count` or `count`
    // but `&mut count` is less restrictive so it takes that. Immediately
    // borrows `count`.
    //
    // A `mut` is required on `inc` because a `&mut` is stored inside. Thus,
    // calling the closure mutates the closure which requires a `mut`.
    let mut inc = || {
        count += 1;
        println!("`count`: {}", count);
    };

    // Call the closure using a mutable borrow.
    inc();

    // The closure still mutably borrows `count` because it is called later.
    // An attempt to reborrow will lead to an error.
    // let _reborrow = &count;
    // ^ TODO: try uncommenting this line.
    inc();

    // The closure no longer needs to borrow `&mut count`. Therefore, it is
    // possible to reborrow without an error
    let _count_reborrowed = &mut count;

    // A non-copy type.
    let movable = Box::new(3);

    // `mem::drop` requires `T` so this must take by value. A copy type
    // would copy into the closure leaving the original untouched.
    // A non-copy must move and so `movable` immediately moves into
    // the closure.
    let consume = || {
        println!("`movable`: {:?}", movable);
        mem::drop(movable);
    };

    // `consume` consumes the variable so this can only be called once.
    consume();
    // consume();
    // ^ TODO: Try uncommenting this line.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* color :=
      let* α0 :=
        M.get_trait_method
          "core::convert::From"
          "from"
          [
            (* Self *) Ty.path "alloc::string::String";
            (* T *) Ty.apply (Ty.path "&") [ Ty.path "str" ]
          ] in
      let* α1 := M.read (mk_str "green") in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* print :=
      M.alloc
        (M.closure
          (fun γ =>
            match γ with
            | [ α0 ] =>
              let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    let* _ :=
                      let* α0 := M.get_function "std::io::stdio::_print" [] in
                      let* α1 :=
                        M.get_associated_function
                          (Ty.path "core::fmt::Arguments")
                          "new_v1" in
                      let* α2 := M.read (mk_str "`color`: ") in
                      let* α3 := M.read (mk_str "
") in
                      let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                      let* α5 :=
                        M.get_associated_function
                          (Ty.path "core::fmt::rt::Argument")
                          "new_display" in
                      let* α6 := M.call α5 [ color ] in
                      let* α7 := M.alloc (Value.Array [ α6 ]) in
                      let* α8 :=
                        M.call
                          α1
                          [
                            M.pointer_coercion (* Unsize *) α4;
                            M.pointer_coercion (* Unsize *) α7
                          ] in
                      let* α9 := M.call α0 [ α8 ] in
                      M.alloc α9 in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0
                ]
            | _ => M.impossible
            end)) in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::ops::function::Fn"
          "call"
          [
            (* Self *) Ty.function [ Ty.tuple [] ] (Ty.tuple []);
            (* Args *) Ty.tuple []
          ] in
      let* α1 := M.call α0 [ print; Value.Tuple [] ] in
      M.alloc α1 in
    let* _reborrow := M.alloc color in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::ops::function::Fn"
          "call"
          [
            (* Self *) Ty.function [ Ty.tuple [] ] (Ty.tuple []);
            (* Args *) Ty.tuple []
          ] in
      let* α1 := M.call α0 [ print; Value.Tuple [] ] in
      M.alloc α1 in
    let* _color_moved := M.copy color in
    let* count := M.alloc (Value.Integer Integer.I32 0) in
    let* inc :=
      M.alloc
        (M.closure
          (fun γ =>
            match γ with
            | [ α0 ] =>
              let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    let* _ :=
                      let β := count in
                      let* α0 := M.read β in
                      let* α1 :=
                        BinOp.Panic.add α0 (Value.Integer Integer.I32 1) in
                      M.assign β α1 in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.get_function "std::io::stdio::_print" [] in
                        let* α1 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::Arguments")
                            "new_v1" in
                        let* α2 := M.read (mk_str "`count`: ") in
                        let* α3 := M.read (mk_str "
") in
                        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                        let* α5 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::rt::Argument")
                            "new_display" in
                        let* α6 := M.call α5 [ count ] in
                        let* α7 := M.alloc (Value.Array [ α6 ]) in
                        let* α8 :=
                          M.call
                            α1
                            [
                              M.pointer_coercion (* Unsize *) α4;
                              M.pointer_coercion (* Unsize *) α7
                            ] in
                        let* α9 := M.call α0 [ α8 ] in
                        M.alloc α9 in
                      M.alloc (Value.Tuple []) in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0
                ]
            | _ => M.impossible
            end)) in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::ops::function::FnMut"
          "call_mut"
          [
            (* Self *) Ty.function [ Ty.tuple [] ] (Ty.tuple []);
            (* Args *) Ty.tuple []
          ] in
      let* α1 := M.call α0 [ inc; Value.Tuple [] ] in
      M.alloc α1 in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::ops::function::FnMut"
          "call_mut"
          [
            (* Self *) Ty.function [ Ty.tuple [] ] (Ty.tuple []);
            (* Args *) Ty.tuple []
          ] in
      let* α1 := M.call α0 [ inc; Value.Tuple [] ] in
      M.alloc α1 in
    let* _count_reborrowed := M.alloc count in
    let* movable :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "alloc::boxed::Box")
            [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ])
          "new" in
      let* α1 := M.call α0 [ Value.Integer Integer.I32 3 ] in
      M.alloc α1 in
    let* consume :=
      M.alloc
        (M.closure
          (fun γ =>
            match γ with
            | [ α0 ] =>
              let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    let* _ :=
                      let* _ :=
                        let* α0 := M.get_function "std::io::stdio::_print" [] in
                        let* α1 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::Arguments")
                            "new_v1" in
                        let* α2 := M.read (mk_str "`movable`: ") in
                        let* α3 := M.read (mk_str "
") in
                        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                        let* α5 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::rt::Argument")
                            "new_debug" in
                        let* α6 := M.call α5 [ movable ] in
                        let* α7 := M.alloc (Value.Array [ α6 ]) in
                        let* α8 :=
                          M.call
                            α1
                            [
                              M.pointer_coercion (* Unsize *) α4;
                              M.pointer_coercion (* Unsize *) α7
                            ] in
                        let* α9 := M.call α0 [ α8 ] in
                        M.alloc α9 in
                      M.alloc (Value.Tuple []) in
                    let* _ :=
                      let* α0 :=
                        M.get_function
                          "core::mem::drop"
                          [
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]
                          ] in
                      let* α1 := M.read movable in
                      let* α2 := M.call α0 [ α1 ] in
                      M.alloc α2 in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0
                ]
            | _ => M.impossible
            end)) in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::ops::function::FnOnce"
          "call_once"
          [
            (* Self *) Ty.function [ Ty.tuple [] ] (Ty.tuple []);
            (* Args *) Ty.tuple []
          ] in
      let* α1 := M.read consume in
      let* α2 := M.call α0 [ α1; Value.Tuple [] ] in
      M.alloc α2 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
