(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // `Vec` has non-copy semantics.
    let haystack = vec![1, 2, 3];

    let contains = move |needle| haystack.contains(needle);

    println!("{}", contains(&1));
    println!("{}", contains(&4));

    // println!("There're {} elements in vec", haystack.len());
    // ^ Uncommenting above line will result in compile-time error
    // because borrow checker doesn't allow re-using variable after it
    // has been moved.

    // Removing `move` from closure's signature will cause closure
    // to borrow _haystack_ variable immutably, hence _haystack_ is still
    // available and uncommenting above line will not cause an error.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* haystack :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 : Ty.apply (Ty.path "array") [Ty.path "i32"] :=
        M.alloc
          [
            (Integer.of_Z 1) : Ty.path "i32";
            (Integer.of_Z 2) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32"
          ] in
      let* α1 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] α0) in
      let* α2 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read α1 in
      let* α3 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply (Ty.path "slice") [Ty.path "i32"])::["into_vec"]
            (pointer_coercion "Unsize" α2)) in
      M.alloc α3 in
    let* contains :
        Ty.function
          [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
          (Ty.path "bool") :=
      M.alloc
        (fun (α0 : Ty.apply (Ty.path "ref") [Ty.path "i32"]) =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* needle := M.copy γ in
                let* α0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "ref")
                          [Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [Ty.path "i32";
                                Ty.apply (Ty.path "alloc::alloc::Global") []]]]
                      (Ty.apply (Ty.path "ref") [_]) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self :=
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.path "i32";
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (Trait := ℐ))) in
                let* α1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "slice") [Ty.path "i32"]] :=
                  M.call (α0 (borrow haystack)) in
                let* α2 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
                  M.read needle in
                M.call
                  ((Ty.apply (Ty.path "slice") [Ty.path "i32"])::["contains"]
                    α1
                    α2)) :
                Ty.path "bool"
            ]) :
          Ty.path "bool") in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.function
                      [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
                      (Ty.path "bool")];
                Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
              _ :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.function.Fn.call
              (Self :=
                Ty.function
                  [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
                  (Ty.path "bool"))
              (Args := Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"]))
              (Trait := ℐ))) in
        let* α4 : Ty.path "i32" := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
        let* α5 : Ty.path "bool" := M.call (α3 (borrow contains) (borrow α4)) in
        let* α6 : Ty.path "bool" := M.alloc α5 in
        let* α7 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow α6)) in
        let* α8 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α7 ] in
        let* α9 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α8))) in
        let* α10 : Ty.tuple := M.call (std.io.stdio._print α9) in
        M.alloc α10 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.function
                      [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
                      (Ty.path "bool")];
                Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
              _ :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.function.Fn.call
              (Self :=
                Ty.function
                  [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"])]
                  (Ty.path "bool"))
              (Args := Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "i32"]))
              (Trait := ℐ))) in
        let* α4 : Ty.path "i32" := M.alloc ((Integer.of_Z 4) : Ty.path "i32") in
        let* α5 : Ty.path "bool" := M.call (α3 (borrow contains) (borrow α4)) in
        let* α6 : Ty.path "bool" := M.alloc α5 in
        let* α7 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow α6)) in
        let* α8 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α7 ] in
        let* α9 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α8))) in
        let* α10 : Ty.tuple := M.call (std.io.stdio._print α9) in
        M.alloc α10 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
