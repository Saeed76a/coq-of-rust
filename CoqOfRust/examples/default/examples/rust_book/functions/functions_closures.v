(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let outer_var = 42;

    // A regular function can't refer to variables in the enclosing environment
    //fn function(i: i32) -> i32 { i + outer_var }
    // TODO: uncomment the line above and see the compiler error. The compiler
    // suggests that we define a closure instead.

    // Closures are anonymous, here we are binding them to references
    // Annotation is identical to function annotation but is optional
    // as are the `{}` wrapping the body. These nameless functions
    // are assigned to appropriately named variables.
    let closure_annotated = |i: i32| -> i32 { i + outer_var };
    let closure_inferred = |i| i + outer_var;

    // Call the closures.
    println!("closure_annotated: {}", closure_annotated(1));
    println!("closure_inferred: {}", closure_inferred(1));
    // Once closure's type has been inferred, it cannot be inferred again with another type.
    //println!("cannot reuse closure_inferred with another type: {}", closure_inferred(42i64));
    // TODO: uncomment the line above and see the compiler error.

    // A closure taking no arguments which returns an `i32`.
    // The return type is inferred.
    let one = || 1;
    println!("closure returning one: {}", one());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* outer_var : Ty.path "i32" :=
      M.alloc ((Integer.of_Z 42) : Ty.path "i32") in
    let* closure_annotated :
        Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "i32") :=
      M.alloc
        (fun (α0 : Ty.path "i32") =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* i := M.copy γ in
                let* α0 : Ty.path "i32" := M.read i in
                let* α1 : Ty.path "i32" := M.read outer_var in
                BinOp.Panic.add α0 α1) :
                Ty.path "i32"
            ]) :
          Ty.path "i32") in
    let* closure_inferred :
        Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "i32") :=
      M.alloc
        (fun (α0 : Ty.path "i32") =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* i := M.copy γ in
                let* α0 : Ty.path "i32" := M.read i in
                let* α1 : Ty.path "i32" := M.read outer_var in
                BinOp.Panic.add α0 α1) :
                Ty.path "i32"
            ]) :
          Ty.path "i32") in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "closure_annotated: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "i32")];
                Ty.tuple (Ty.path "i32")]
              _ :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.function.Fn.call
              (Self := Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "i32"))
              (Args := Ty.tuple (Ty.path "i32"))
              (Trait := ℐ))) in
        let* α4 : Ty.path "i32" :=
          M.call
            (α3
              (borrow closure_annotated)
              ((Integer.of_Z 1) : Ty.path "i32")) in
        let* α5 : Ty.path "i32" := M.alloc α4 in
        let* α6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow α5)) in
        let* α7 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α6 ] in
        let* α8 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α7))) in
        let* α9 : Ty.tuple := M.call (std.io.stdio._print α8) in
        M.alloc α9 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "closure_inferred: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "i32")];
                Ty.tuple (Ty.path "i32")]
              _ :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.function.Fn.call
              (Self := Ty.function [Ty.tuple (Ty.path "i32")] (Ty.path "i32"))
              (Args := Ty.tuple (Ty.path "i32"))
              (Trait := ℐ))) in
        let* α4 : Ty.path "i32" :=
          M.call
            (α3 (borrow closure_inferred) ((Integer.of_Z 1) : Ty.path "i32")) in
        let* α5 : Ty.path "i32" := M.alloc α4 in
        let* α6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow α5)) in
        let* α7 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α6 ] in
        let* α8 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α7))) in
        let* α9 : Ty.tuple := M.call (std.io.stdio._print α8) in
        M.alloc α9 in
      M.alloc tt in
    let* one : Ty.function [Ty.tuple] (Ty.path "i32") :=
      M.alloc
        (fun (α0 : Ty.path "unit") =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (M.pure ((Integer.of_Z 1) : Ty.path "i32")) : Ty.path "i32"
            ]) :
          Ty.path "i32") in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "closure returning one: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.function [Ty.tuple] (Ty.path "i32")];
                Ty.tuple]
              _ :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.function.Fn.call
              (Self := Ty.function [Ty.tuple] (Ty.path "i32"))
              (Args := Ty.tuple)
              (Trait := ℐ))) in
        let* α4 : Ty.path "i32" := M.call (α3 (borrow one) tt) in
        let* α5 : Ty.path "i32" := M.alloc α4 in
        let* α6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow α5)) in
        let* α7 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α6 ] in
        let* α8 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α7))) in
        let* α9 : Ty.tuple := M.call (std.io.stdio._print α8) in
        M.alloc α9 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
