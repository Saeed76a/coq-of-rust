(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct SomeType *)

(* Struct OtherType *)

Module Impl_functions_order_SomeType.
  Definition Self : Ty.t := Ty.path "functions_order::SomeType".
  
  (*
      fn meth2(self) {}
  *)
  Definition meth2 (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_meth2 : M.IsAssociatedFunction Self "meth2" meth2 [].
  
  (*
      pub fn meth1(self) {
          self.meth2();
      }
  *)
  Definition meth1 (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 := M.read self in
        let* α1 :=
          M.call (Ty.path "functions_order::SomeType")::["meth2"] [ α0 ] in
        M.alloc α1 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_meth1 : M.IsAssociatedFunction Self "meth1" meth1 [].
End Impl_functions_order_SomeType.

(* Trait *)
Module SomeTrait.
  
End SomeTrait.

Module Impl_functions_order_SomeTrait_for_functions_order_SomeType.
  (*
      fn some_trait_bar(&self) {}
  *)
  Definition some_trait_bar (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  (*
      fn some_trait_foo(&self) {
          self.some_trait_bar()
      }
  *)
  Definition some_trait_foo (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_trait_method
          "functions_order::SomeTrait"
          "some_trait_bar"
          [ (* Self *) Ty.path "functions_order::SomeType" ] in
      let* α1 := M.read self in
      M.call α0 [ α1 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "functions_order::SomeTrait"
      (* Self *) (Ty.path "functions_order::SomeType")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("some_trait_bar", InstanceField.Method some_trait_bar);
          ("some_trait_foo", InstanceField.Method some_trait_foo)
        ]
      (* Instance polymorphic types *) [].
End Impl_functions_order_SomeTrait_for_functions_order_SomeType.

Module Impl_functions_order_SomeTrait_for_functions_order_OtherType.
  (*
      fn some_trait_foo(&self) {}
  *)
  Definition some_trait_foo (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Definition some_trait_bar (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "functions_order::SomeTrait"
      (* Self *) (Ty.path "functions_order::OtherType")
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("some_trait_foo", InstanceField.Method some_trait_foo);
          ("some_trait_bar", InstanceField.Method some_trait_bar)
        ]
      (* Instance polymorphic types *) [].
End Impl_functions_order_SomeTrait_for_functions_order_OtherType.

(*
fn depends_on_trait_impl(u: u32, b: bool) {
    OtherType(b).some_trait_foo();
    SomeType(u).some_trait_foo();
}
*)
Definition depends_on_trait_impl (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ u; b ] =>
    let* u := M.alloc u in
    let* b := M.alloc b in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "functions_order::SomeTrait"
          "some_trait_foo"
          [ (* Self *) Ty.path "functions_order::OtherType" ] in
      let* α1 := M.read b in
      let* α2 :=
        M.alloc (Value.StructTuple "functions_order::OtherType" [ α1 ]) in
      let* α3 := M.call α0 [ α2 ] in
      M.alloc α3 in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "functions_order::SomeTrait"
          "some_trait_foo"
          [ (* Self *) Ty.path "functions_order::SomeType" ] in
      let* α1 := M.read u in
      let* α2 :=
        M.alloc (Value.StructTuple "functions_order::SomeType" [ α1 ]) in
      let* α3 := M.call α0 [ α2 ] in
      M.alloc α3 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

Module inner_mod.
  (*
      fn tar() {}
  *)
  Definition tar (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with | [], [] => M.pure tt | _, _ => M.impossible end.
  
  (*
      pub fn bar() {
          // functions_order::inner_mod::bar
          tar();
      }
  *)
  Definition bar (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* _ :=
        let* α0 := M.var "functions_order::inner_mod::tar" in
        let* α1 := M.call α0 [] in
        M.alloc α1 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Module nested_mod.
    (*
            fn tack() {}
    *)
    Definition tack (𝜏 : list Ty.t) (α : list Value.t) : M :=
      match 𝜏, α with | [], [] => M.pure tt | _, _ => M.impossible end.
    
    (*
            pub fn tick() {
                tack();
            }
    *)
    Definition tick (𝜏 : list Ty.t) (α : list Value.t) : M :=
      match 𝜏, α with
      | [], [] =>
        let* _ :=
          let* α0 := M.var "functions_order::inner_mod::nested_mod::tack" in
          let* α1 := M.call α0 [] in
          M.alloc α1 in
        let* α0 := M.alloc tt in
        M.read α0
      | _, _ => M.impossible
      end.
  End nested_mod.
End inner_mod.

(*
fn foo() {}
*)
Definition foo (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with | [], [] => M.pure tt | _, _ => M.impossible end.

(*
fn main() {
    // functions_order::main
    foo();
    inner_mod::bar();
    SomeType(0).meth1();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* α0 := M.var "functions_order::foo" in
      let* α1 := M.call α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.var "functions_order::inner_mod::bar" in
      let* α1 := M.call α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 :=
        M.call
          (Ty.path "functions_order::SomeType")::["meth1"]
          [
            Value.StructTuple
              "functions_order::SomeType"
              [ Value.Integer Integer.U32 0 ]
          ] in
      M.alloc α0 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
