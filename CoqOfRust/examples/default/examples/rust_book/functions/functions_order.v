(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.





Module  Impl_functions_order_SomeType.
Section Impl_functions_order_SomeType.
  Definition Self : Set := Ty.apply (Ty.path "functions_order::SomeType") [].
  
  (*
      fn meth2(self) {}
  *)
  Definition meth2 (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_meth2 : Instance.t := {
    Notations.double_colon := meth2;
  }.
  
  (*
      pub fn meth1(self) {
          self.meth2();
      }
  *)
  Definition meth1 (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "functions_order::SomeType") [] :=
          M.read self in
        let* α1 : Ty.tuple :=
          M.call
            ((Ty.apply (Ty.path "functions_order::SomeType") [])::["meth2"]
              α0) in
        M.alloc α1 in
      let* α0 : Ty.path "unit" := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_meth1 : Instance.t := {
    Notations.double_colon := meth1;
  }.
End Impl_functions_order_SomeType.
End Impl_functions_order_SomeType.

Module  SomeTrait.
Section SomeTrait.
  Class Trait (Self : Set) : Type := {
    some_trait_foo :
      Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "unit");
    some_trait_bar :
      Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "unit");
  }.
  
End SomeTrait.
End SomeTrait.

Module  Impl_functions_order_SomeTrait_for_functions_order_SomeType.
Section Impl_functions_order_SomeTrait_for_functions_order_SomeType.
  Definition Self : Ty.t := Ty.apply (Ty.path "functions_order::SomeType") [].
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Definition some_trait_bar (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_some_trait_bar : Instance.t := {
    Notations.double_colon := some_trait_bar;
  }.
  
  (*
      fn some_trait_foo(&self) {
          self.some_trait_bar()
      }
  *)
  Definition some_trait_foo (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "functions_order::SomeType") []] :=
        M.read self in
      M.call (some_trait_bar α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_some_trait_foo : Instance.t := {
    Notations.double_colon := some_trait_foo;
  }.
  
  Definition ℐ : Instance.t := [("some_trait_bar", some_trait_bar);
    ("some_trait_foo", some_trait_foo)].
End Impl_functions_order_SomeTrait_for_functions_order_SomeType.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType.

Module  Impl_functions_order_SomeTrait_for_functions_order_OtherType.
Section Impl_functions_order_SomeTrait_for_functions_order_OtherType.
  Definition Self : Ty.t := Ty.apply (Ty.path "functions_order::OtherType") [].
  
  (*
      fn some_trait_foo(&self) {}
  *)
  Definition some_trait_foo (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_some_trait_foo : Instance.t := {
    Notations.double_colon := some_trait_foo;
  }.
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Definition some_trait_bar (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure tt
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_some_trait_bar : Instance.t := {
    Notations.double_colon := some_trait_bar;
  }.
  
  Definition ℐ : Instance.t := [("some_trait_foo", some_trait_foo);
    ("some_trait_bar", some_trait_bar)].
End Impl_functions_order_SomeTrait_for_functions_order_OtherType.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType.

(*
fn depends_on_trait_impl(u: u32, b: bool) {
    OtherType(b).some_trait_foo();
    SomeType(u).some_trait_foo();
}
*)
Definition depends_on_trait_impl (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [u; b] =>
    let* u := M.alloc u in
    let* b := M.alloc b in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "functions_order::OtherType") []]]
            Ty.tuple :=
        ltac:(M.get_method (fun ℐ =>
          functions_order.SomeTrait.some_trait_foo
            (Self := Ty.apply (Ty.path "functions_order::OtherType") [])
            (Trait := ℐ))) in
      let* α1 : Ty.path "bool" := M.read b in
      let* α2 : Ty.apply (Ty.path "functions_order::OtherType") [] :=
        M.alloc (functions_order.OtherType.Build_t α1) in
      let* α3 : Ty.tuple := M.call (α0 (borrow α2)) in
      M.alloc α3 in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "functions_order::SomeType") []]]
            Ty.tuple :=
        ltac:(M.get_method (fun ℐ =>
          functions_order.SomeTrait.some_trait_foo
            (Self := Ty.apply (Ty.path "functions_order::SomeType") [])
            (Trait := ℐ))) in
      let* α1 : Ty.path "u32" := M.read u in
      let* α2 : Ty.apply (Ty.path "functions_order::SomeType") [] :=
        M.alloc (functions_order.SomeType.Build_t α1) in
      let* α3 : Ty.tuple := M.call (α0 (borrow α2)) in
      M.alloc α3 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

Module inner_mod.
  (*
      fn tar() {}
  *)
  Definition tar (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with | [], [] => M.pure tt | _, _ => M.impossible end.
  
  (*
      pub fn bar() {
          // functions_order::inner_mod::bar
          tar();
      }
  *)
  Definition bar (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* _ : Ty.tuple :=
        let* α0 : Ty.tuple := M.call functions_order.inner_mod.tar in
        M.alloc α0 in
      let* α0 : Ty.path "unit" := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Module nested_mod.
    (*
            fn tack() {}
    *)
    Definition tack (𝜏 : list Ty.t) (α : list Value.t) : M :=
      match 𝜏, α with | [], [] => M.pure tt | _, _ => M.impossible end.
    
    (*
            pub fn tick() {
                tack();
            }
    *)
    Definition tick (𝜏 : list Ty.t) (α : list Value.t) : M :=
      match 𝜏, α with
      | [], [] =>
        let* _ : Ty.tuple :=
          let* α0 : Ty.tuple :=
            M.call functions_order.inner_mod.nested_mod.tack in
          M.alloc α0 in
        let* α0 : Ty.path "unit" := M.alloc tt in
        M.read α0
      | _, _ => M.impossible
      end.
  End nested_mod.
End inner_mod.

(*
fn foo() {}
*)
Definition foo (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with | [], [] => M.pure tt | _, _ => M.impossible end.

(*
fn main() {
    // functions_order::main
    foo();
    inner_mod::bar();
    SomeType(0).meth1();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ : Ty.tuple :=
      let* α0 : Ty.tuple := M.call functions_order.foo in
      M.alloc α0 in
    let* _ : Ty.tuple :=
      let* α0 : Ty.tuple := M.call functions_order.inner_mod.bar in
      M.alloc α0 in
    let* _ : Ty.tuple :=
      let* α0 : Ty.tuple :=
        M.call
          ((Ty.apply (Ty.path "functions_order::SomeType") [])::["meth1"]
            (functions_order.SomeType.Build_t
              ((Integer.of_Z 0) : Ty.path "u32"))) in
      M.alloc α0 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
