(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn is_divisible_by(lhs: u32, rhs: u32) -> bool {
    // Corner case, early return
    if rhs == 0 {
        return false;
    }

    // This is an expression, the `return` keyword is not necessary here
    lhs % rhs == 0
}
*)
Definition is_divisible_by (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [lhs; rhs] =>
    let* lhs := M.alloc lhs in
    let* rhs := M.alloc rhs in
    let return_ := M.return_ (R := Ty.path "bool") in
    M.catch_return
      (let* _ : Ty.tuple :=
        let* α0 : Ty.path "u32" := M.read rhs in
        let* α1 : Ty.path "bool" :=
          M.alloc (BinOp.Pure.eq α0 ((Integer.of_Z 0) : Ty.path "u32")) in
        let* α2 : Ty.path "bool" := M.read (use α1) in
        if α2 then
          let* α0 : Ty.path "never" := return_ false in
          let* α1 : Ty.path "never" := M.read α0 in
          let* α2 : Ty.tuple := never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt in
      let* α0 : Ty.path "u32" := M.read lhs in
      let* α1 : Ty.path "u32" := M.read rhs in
      let* α2 : Ty.path "u32" := BinOp.Panic.rem α0 α1 in
      let* α0 : Ty.path "bool" :=
        M.alloc (BinOp.Pure.eq α2 ((Integer.of_Z 0) : Ty.path "u32")) in
      M.read α0)
  | _, _ => M.impossible
  end.

(*
fn fizzbuzz(n: u32) -> () {
    if is_divisible_by(n, 15) {
        println!("fizzbuzz");
    } else if is_divisible_by(n, 3) {
        println!("fizz");
    } else if is_divisible_by(n, 5) {
        println!("buzz");
    } else {
        println!("{}", n);
    }
}
*)
Definition fizzbuzz (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [n] =>
    let* n := M.alloc n in
    let* α0 : Ty.path "u32" := M.read n in
    let* α1 : Ty.path "bool" :=
      M.call
        (functions.is_divisible_by α0 ((Integer.of_Z 15) : Ty.path "u32")) in
    let* α2 : Ty.path "bool" := M.alloc α1 in
    let* α3 : Ty.path "bool" := M.read (use α2) in
    let* α4 : Ty.tuple :=
      if α3 then
        let* _ : Ty.tuple :=
          let* _ : Ty.tuple :=
            let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
              M.read (mk_str "fizzbuzz
") in
            let* α1 :
                Ty.apply
                  (Ty.path "array")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
              M.alloc [ α0 ] in
            let* α2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
              M.call
                ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
                  (pointer_coercion "Unsize" (borrow α1))) in
            let* α3 : Ty.tuple := M.call (std.io.stdio._print α2) in
            M.alloc α3 in
          M.alloc tt in
        M.alloc tt
      else
        let* α0 : Ty.path "u32" := M.read n in
        let* α1 : Ty.path "bool" :=
          M.call
            (functions.is_divisible_by α0 ((Integer.of_Z 3) : Ty.path "u32")) in
        let* α2 : Ty.path "bool" := M.alloc α1 in
        let* α3 : Ty.path "bool" := M.read (use α2) in
        if α3 then
          let* _ : Ty.tuple :=
            let* _ : Ty.tuple :=
              let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.read (mk_str "fizz
") in
              let* α1 :
                  Ty.apply
                    (Ty.path "array")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                M.alloc [ α0 ] in
              let* α2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                M.call
                  ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
                    (pointer_coercion "Unsize" (borrow α1))) in
              let* α3 : Ty.tuple := M.call (std.io.stdio._print α2) in
              M.alloc α3 in
            M.alloc tt in
          M.alloc tt
        else
          let* α0 : Ty.path "u32" := M.read n in
          let* α1 : Ty.path "bool" :=
            M.call
              (functions.is_divisible_by
                α0
                ((Integer.of_Z 5) : Ty.path "u32")) in
          let* α2 : Ty.path "bool" := M.alloc α1 in
          let* α3 : Ty.path "bool" := M.read (use α2) in
          if α3 then
            let* _ : Ty.tuple :=
              let* _ : Ty.tuple :=
                let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "buzz
") in
                let* α1 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ α0 ] in
                let* α2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Arguments")
                          [])::["new_const"]
                      (pointer_coercion "Unsize" (borrow α1))) in
                let* α3 : Ty.tuple := M.call (std.io.stdio._print α2) in
                M.alloc α3 in
              M.alloc tt in
            M.alloc tt
          else
            let* _ : Ty.tuple :=
              let* _ : Ty.tuple :=
                let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "") in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* α2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ α0; α1 ] in
                let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow n)) in
                let* α4 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ α3 ] in
                let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                M.alloc α6 in
              M.alloc tt in
            M.alloc tt in
    M.read α4
  | _, _ => M.impossible
  end.

(*
fn fizzbuzz_to(n: u32) {
    for n in 1..=n {
        fizzbuzz(n);
    }
}
*)
Definition fizzbuzz_to (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [n] =>
    let* n := M.alloc n in
    let* α0 :
        Ty.function
          [Ty.apply
              (Ty.path "core::ops::range::RangeInclusive")
              [Ty.path "u32"]]
          _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.collect.IntoIterator.into_iter
          (Self :=
            Ty.apply
              (Ty.path "core::ops::range::RangeInclusive")
              [Ty.path "u32"])
          (Trait := ℐ))) in
    let* α1 : Ty.path "u32" := M.read n in
    let* α2 :
        Ty.apply (Ty.path "core::ops::range::RangeInclusive") [Ty.path "u32"] :=
      M.call
        ((Ty.apply
              (Ty.path "core::ops::range::RangeInclusive")
              [Ty.path "u32"])::["new"]
          ((Integer.of_Z 1) : Ty.path "u32")
          α1) in
    let* α3 :
        Ty.apply (Ty.path "core::ops::range::RangeInclusive") [Ty.path "u32"] :=
      M.call (α0 α2) in
    let* α4 :
        Ty.apply (Ty.path "core::ops::range::RangeInclusive") [Ty.path "u32"] :=
      M.alloc α3 in
    let* α5 : Ty.tuple :=
      match_operator
        α4
        [
          fun γ =>
            (let* iter := M.copy γ in
            M.loop
              (let* _ : Ty.tuple :=
                let* α0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "mut_ref")
                          [Ty.apply
                              (Ty.path "core::ops::range::RangeInclusive")
                              [Ty.path "u32"]]]
                      (Ty.apply (Ty.path "core::option::Option") [_]) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.iterator.Iterator.next
                      (Self :=
                        Ty.apply
                          (Ty.path "core::ops::range::RangeInclusive")
                          [Ty.path "u32"])
                      (Trait := ℐ))) in
                let* α1 :
                    Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
                  M.call (α0 (borrow_mut iter)) in
                let* α2 :
                    Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
                  M.alloc α1 in
                match_operator
                  α2
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.None =>
                        let* α0 : Ty.path "never" := M.break in
                        let* α1 : Ty.path "never" := M.read α0 in
                        let* α2 : Ty.tuple := never_to_any α1 in
                        M.alloc α2
                      | _ => M.break_match
                      end) :
                      Ty.tuple;
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* n := M.copy γ0_0 in
                        let* _ : Ty.tuple :=
                          let* α0 : Ty.path "u32" := M.read n in
                          let* α1 : Ty.tuple :=
                            M.call (functions.fizzbuzz α0) in
                          M.alloc α1 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      Ty.tuple
                  ] in
              M.alloc tt)) :
            Ty.tuple
        ] in
    M.read (use α5)
  | _, _ => M.impossible
  end.

(*
fn main() {
    // We can use this function here, and define it somewhere later
    fizzbuzz_to(100);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ : Ty.tuple :=
      let* α0 : Ty.tuple :=
        M.call (functions.fizzbuzz_to ((Integer.of_Z 100) : Ty.path "u32")) in
      M.alloc α0 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
