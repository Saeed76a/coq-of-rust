(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let args: Vec<String> = env::args().collect();

    // The first argument is the path that was used to call the program.
    println!("My path is {}.", args[0]);

    // The rest of the arguments are the passed command line parameters.
    // Call the program like this:
    //   $ ./args arg1 arg2
    println!("I got {:?} arguments: {:?}.", args.len() - 1, &args[1..]);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* args :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "alloc::string::String") [];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 :
          Ty.function
            [Ty.apply (Ty.path "std::env::Args") []]
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "alloc::string::String") [];
                Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.iterator.Iterator.collect
            (Self := Ty.apply (Ty.path "std::env::Args") [])
            (B :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "alloc::string::String") [];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α1 : Ty.apply (Ty.path "std::env::Args") [] := M.call std.env.args in
      let* α2 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "alloc::string::String") [];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (α0 α1) in
      M.alloc α2 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "My path is ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str ".
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "alloc::string::String") [];
                        Ty.apply (Ty.path "alloc::alloc::Global") []]];
                Ty.path "usize"]
              (Ty.apply (Ty.path "ref") [_]) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.index.Index.index
              (Self :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "alloc::string::String") [];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Idx := Ty.path "usize")
              (Trait := ℐ))) in
        let* α4 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "alloc::string::String") []] :=
          M.call (α3 (borrow args) ((Integer.of_Z 0) : Ty.path "usize")) in
        let* α5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              α4) in
        let* α6 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α5 ] in
        let* α7 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α6))) in
        let* α8 : Ty.tuple := M.call (std.io.stdio._print α7) in
        M.alloc α8 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "I got ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str " arguments: ") in
        let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str ".
") in
        let* α3 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1; α2 ] in
        let* α4 : Ty.path "usize" :=
          M.call
            ((Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "alloc::string::String") [];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])::["len"]
              (borrow args)) in
        let* α5 : Ty.path "usize" :=
          BinOp.Panic.sub α4 ((Integer.of_Z 1) : Ty.path "usize") in
        let* α6 : Ty.path "usize" := M.alloc α5 in
        let* α7 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow α6)) in
        let* α8 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "alloc::string::String") [];
                        Ty.apply (Ty.path "alloc::alloc::Global") []]];
                Ty.apply
                  (Ty.path "core::ops::range::RangeFrom")
                  [Ty.path "usize"]]
              (Ty.apply (Ty.path "ref") [_]) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.index.Index.index
              (Self :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "alloc::string::String") [];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Idx :=
                Ty.apply
                  (Ty.path "core::ops::range::RangeFrom")
                  [Ty.path "usize"])
              (Trait := ℐ))) in
        let* α9 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "slice")
                  [Ty.apply (Ty.path "alloc::string::String") []]] :=
          M.call
            (α8
              (borrow args)
              {|
                core.ops.range.RangeFrom.start :=
                  (Integer.of_Z 1) : Ty.path "usize";
              |}) in
        let* α10 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "slice")
                  [Ty.apply (Ty.path "alloc::string::String") []]] :=
          M.alloc α9 in
        let* α11 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow α10)) in
        let* α12 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α7; α11 ] in
        let* α13 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α3))
              (pointer_coercion "Unsize" (borrow α12))) in
        let* α14 : Ty.tuple := M.call (std.io.stdio._print α13) in
        M.alloc α14 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
