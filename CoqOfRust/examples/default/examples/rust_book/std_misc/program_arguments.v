(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let args: Vec<String> = env::args().collect();

    // The first argument is the path that was used to call the program.
    println!("My path is {}.", args[0]);

    // The rest of the arguments are the passed command line parameters.
    // Call the program like this:
    //   $ ./args arg1 arg2
    println!("I got {:?} arguments: {:?}.", args.len() - 1, &args[1..]);
}
*)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* args :=
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::iterator::Iterator"
          "collect"
          [
            (* Self *) Ty.path "std::env::Args";
            (* B *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.path "alloc::string::String";
                  Ty.path "alloc::alloc::Global"
                ]
          ] in
      let* α1 := M.get_function "std::env::args" [] in
      let* α2 := M.call α1 [] in
      let* α3 := M.call α0 [ α2 ] in
      M.alloc α3 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "My path is ") in
        let* α3 := M.read (mk_str ".
") in
        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_display" in
        let* α6 :=
          M.get_trait_method
            "core::ops::index::Index"
            "index"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.path "alloc::string::String";
                    Ty.path "alloc::alloc::Global"
                  ];
              (* Idx *) Ty.path "usize"
            ] in
        let* α7 := M.call α6 [ args; Value.Integer Integer.Usize 0 ] in
        let* α8 := M.call α5 [ α7 ] in
        let* α9 := M.alloc (Value.Array [ α8 ]) in
        let* α10 :=
          M.call
            α1
            [
              M.pointer_coercion (* Unsize *) α4;
              M.pointer_coercion (* Unsize *) α9
            ] in
        let* α11 := M.call α0 [ α10 ] in
        M.alloc α11 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "I got ") in
        let* α3 := M.read (mk_str " arguments: ") in
        let* α4 := M.read (mk_str ".
") in
        let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
        let* α6 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α7 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global"
              ])
            "len" in
        let* α8 := M.call α7 [ args ] in
        let* α9 := BinOp.Panic.sub α8 (Value.Integer Integer.Usize 1) in
        let* α10 := M.alloc α9 in
        let* α11 := M.call α6 [ α10 ] in
        let* α12 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α13 :=
          M.get_trait_method
            "core::ops::index::Index"
            "index"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.path "alloc::string::String";
                    Ty.path "alloc::alloc::Global"
                  ];
              (* Idx *)
                Ty.apply
                  (Ty.path "core::ops::range::RangeFrom")
                  [ Ty.path "usize" ]
            ] in
        let* α14 :=
          M.call
            α13
            [
              args;
              Value.StructRecord
                "core::ops::range::RangeFrom"
                [ ("start", Value.Integer Integer.Usize 1) ]
            ] in
        let* α15 := M.alloc α14 in
        let* α16 := M.call α12 [ α15 ] in
        let* α17 := M.alloc (Value.Array [ α11; α16 ]) in
        let* α18 :=
          M.call
            α1
            [
              M.pointer_coercion (* Unsize *) α5;
              M.pointer_coercion (* Unsize *) α17
            ] in
        let* α19 := M.call α0 [ α18 ] in
        M.alloc α19 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
