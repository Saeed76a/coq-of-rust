(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let args: Vec<String> = env::args().collect();

    // The first argument is the path that was used to call the program.
    println!("My path is {}.", args[0]);

    // The rest of the arguments are the passed command line parameters.
    // Call the program like this:
    //   $ ./args arg1 arg2
    println!("I got {:?} arguments: {:?}.", args.len() - 1, &args[1..]);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* args :=
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.iterator.Iterator.collect
            (Self := Ty.path "std::env::Args")
            (B :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "alloc::string::String";
                  Ty.path "alloc::alloc::Global"])
            (Trait := ℐ))) in
      let* α1 := M.call (M.var "std::env::args") in
      let* α2 := M.call (α0 α1) in
      M.alloc α2 in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "My path is ") in
        let* α1 := M.read (mk_str ".
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.index.Index.index
              (Self :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.path "alloc::string::String";
                    Ty.path "alloc::alloc::Global"])
              (Idx := Ty.path "usize")
              (Trait := ℐ))) in
        let* α4 :=
          M.call (α3 (borrow args) ((Integer.of_Z 0) : Ty.path "usize")) in
        let* α5 :=
          M.call ((Ty.path "core::fmt::rt::Argument")::["new_display"] α4) in
        let* α6 := M.alloc [ α5 ] in
        let* α7 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α6))) in
        let* α8 := M.call ((M.var "std::io::stdio::_print") α7) in
        M.alloc α8 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "I got ") in
        let* α1 := M.read (mk_str " arguments: ") in
        let* α2 := M.read (mk_str ".
") in
        let* α3 := M.alloc [ α0; α1; α2 ] in
        let* α4 :=
          M.call
            ((Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.path "alloc::string::String";
                    Ty.path "alloc::alloc::Global"])::["len"]
              (borrow args)) in
        let* α5 :=
          (M.var "BinOp::Panic::sub") α4 ((Integer.of_Z 1) : Ty.path "usize") in
        let* α6 := M.alloc α5 in
        let* α7 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_debug"] (borrow α6)) in
        let* α8 :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.index.Index.index
              (Self :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.path "alloc::string::String";
                    Ty.path "alloc::alloc::Global"])
              (Idx :=
                Ty.apply
                  (Ty.path "core::ops::range::RangeFrom")
                  [Ty.path "usize"])
              (Trait := ℐ))) in
        let* α9 :=
          M.call
            (α8
              (borrow args)
              {|
                core.ops.range.RangeFrom.start :=
                  (Integer.of_Z 1) : Ty.path "usize";
              |}) in
        let* α10 := M.alloc α9 in
        let* α11 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_debug"] (borrow α10)) in
        let* α12 := M.alloc [ α7; α11 ] in
        let* α13 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α3))
              (pointer_coercion "Unsize" (borrow α12))) in
        let* α14 := M.call ((M.var "std::io::stdio::_print") α13) in
        M.alloc α14 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
