(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut child = Command::new("sleep").arg("5").spawn().unwrap();
    let _result = child.wait().unwrap();

    println!("reached end of main");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* child : Ty.apply (Ty.path "std::process::Child") [] :=
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "sleep") in
      let* α1 : Ty.apply (Ty.path "std::process::Command") [] :=
        M.call ((Ty.apply (Ty.path "std::process::Command") [])::["new"] α0) in
      let* α2 : Ty.apply (Ty.path "std::process::Command") [] := M.alloc α1 in
      let* α3 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "5") in
      let* α4 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "std::process::Command") []] :=
        M.call
          ((Ty.apply (Ty.path "std::process::Command") [])::["arg"]
            (borrow_mut α2)
            α3) in
      let* α5 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "std::process::Child") [];
              Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call
          ((Ty.apply (Ty.path "std::process::Command") [])::["spawn"] α4) in
      let* α6 : Ty.apply (Ty.path "std::process::Child") [] :=
        M.call
          ((Ty.apply
                (Ty.path "core::result::Result")
                [Ty.apply (Ty.path "std::process::Child") [];
                  Ty.apply (Ty.path "std::io::error::Error") []])::["unwrap"]
            α5) in
      M.alloc α6 in
    let* _result : Ty.apply (Ty.path "std::process::ExitStatus") [] :=
      let* α0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "std::process::ExitStatus") [];
              Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call
          ((Ty.apply (Ty.path "std::process::Child") [])::["wait"]
            (borrow_mut child)) in
      let* α1 : Ty.apply (Ty.path "std::process::ExitStatus") [] :=
        M.call
          ((Ty.apply
                (Ty.path "core::result::Result")
                [Ty.apply (Ty.path "std::process::ExitStatus") [];
                  Ty.apply (Ty.path "std::io::error::Error") []])::["unwrap"]
            α0) in
      M.alloc α1 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "reached end of main
") in
        let* α1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0 ] in
        let* α2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow α1))) in
        let* α3 : Ty.tuple := M.call (std.io.stdio._print α2) in
        M.alloc α3 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
