(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn cat(path: &Path) -> io::Result<String> {
    let mut f = File::open(path)?;
    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
*)
Definition cat (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [path] =>
    let* path := M.alloc path in
    let return_ :=
      M.return_
        (R :=
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "alloc::string::String") [];
              Ty.apply (Ty.path "std::io::error::Error") []]) in
    M.catch_return
      (let* f : Ty.apply (Ty.path "std::fs::File") [] :=
        let* Œ±0 :
            Ty.function
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "std::fs::File") [];
                    Ty.apply (Ty.path "std::io::error::Error") []]]
              (Ty.apply
                (Ty.path "core::ops::control_flow::ControlFlow")
                [_; _]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.try_trait.Try.branch
              (Self :=
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "std::fs::File") [];
                    Ty.apply (Ty.path "std::io::error::Error") []])
              (Trait := ‚Ñê))) in
        let* Œ±1 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "std::path::Path") []] :=
          M.read path in
        let* Œ±2 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply (Ty.path "std::fs::File") [];
                Ty.apply (Ty.path "std::io::error::Error") []] :=
          M.call ((Ty.apply (Ty.path "std::fs::File") [])::["open"] Œ±1) in
        let* Œ±3 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "std::io::error::Error") []];
                Ty.apply (Ty.path "std::fs::File") []] :=
          M.call (Œ±0 Œ±2) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "std::io::error::Error") []];
                Ty.apply (Ty.path "std::fs::File") []] :=
          M.alloc Œ±3 in
        let* Œ±5 : Ty.apply (Ty.path "std::fs::File") [] :=
          match_operator
            Œ±4
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :
                      Ty.function
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply (Ty.path "std::io::error::Error") []]]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply (Ty.path "alloc::string::String") [];
                            Ty.apply (Ty.path "std::io::error::Error") []]) :=
                    ltac:(M.get_method (fun ‚Ñê =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "alloc::string::String") [];
                              Ty.apply (Ty.path "std::io::error::Error") []])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply (Ty.path "std::io::error::Error") []])
                        (Trait := ‚Ñê))) in
                  let* Œ±1 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply (Ty.path "core::convert::Infallible") [];
                          Ty.apply (Ty.path "std::io::error::Error") []] :=
                    M.read residual in
                  let* Œ±2 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply (Ty.path "alloc::string::String") [];
                          Ty.apply (Ty.path "std::io::error::Error") []] :=
                    M.call (Œ±0 Œ±1) in
                  let* Œ±3 : Ty.path "never" := return_ Œ±2 in
                  let* Œ±4 : Ty.path "never" := M.read Œ±3 in
                  let* Œ±5 : Ty.apply (Ty.path "std::fs::File") [] :=
                    never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match
                end) :
                Ty.apply (Ty.path "std::fs::File") [];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.apply (Ty.path "std::fs::File") []
            ] in
        M.copy Œ±5 in
      let* s : Ty.apply (Ty.path "alloc::string::String") [] :=
        let* Œ±0 : Ty.apply (Ty.path "alloc::string::String") [] :=
          M.call (Ty.apply (Ty.path "alloc::string::String") [])::["new"] in
        M.alloc Œ±0 in
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "std::fs::File") []];
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "alloc::string::String") []]]
            (Ty.apply
              (Ty.path "core::result::Result")
              [Ty.path "usize";
                Ty.apply (Ty.path "std::io::error::Error") []]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          std.io.Read.read_to_string
            (Self := Ty.apply (Ty.path "std::fs::File") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "usize"; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (Œ±0 (borrow_mut f) (borrow_mut s)) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "usize"; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.alloc Œ±1 in
      let* Œ±0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "alloc::string::String") [];
              Ty.apply (Ty.path "std::io::error::Error") []] :=
        match_operator
          Œ±2
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | core.result.Result.Ok _ =>
                let Œ≥0_0 := core.result.Result.Get_Ok_0 Œ≥ in
                let* Œ±0 : Ty.apply (Ty.path "alloc::string::String") [] :=
                  M.read s in
                M.alloc (core.result.Result.Ok Œ±0)
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.apply (Ty.path "alloc::string::String") [];
                  Ty.apply (Ty.path "std::io::error::Error") []];
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | core.result.Result.Err _ =>
                let Œ≥0_0 := core.result.Result.Get_Err_0 Œ≥ in
                let* e := M.copy Œ≥0_0 in
                let* Œ±0 : Ty.apply (Ty.path "std::io::error::Error") [] :=
                  M.read e in
                M.alloc (core.result.Result.Err Œ±0)
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.apply (Ty.path "alloc::string::String") [];
                  Ty.apply (Ty.path "std::io::error::Error") []]
          ] in
      M.read Œ±0)
  | _, _ => M.impossible
  end.

(*
fn echo(s: &str, path: &Path) -> io::Result<()> {
    let mut f = File::create(path)?;

    f.write_all(s.as_bytes())
}
*)
Definition echo (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [s; path] =>
    let* s := M.alloc s in
    let* path := M.alloc path in
    let return_ :=
      M.return_
        (R :=
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []]) in
    M.catch_return
      (let* f : Ty.apply (Ty.path "std::fs::File") [] :=
        let* Œ±0 :
            Ty.function
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "std::fs::File") [];
                    Ty.apply (Ty.path "std::io::error::Error") []]]
              (Ty.apply
                (Ty.path "core::ops::control_flow::ControlFlow")
                [_; _]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.try_trait.Try.branch
              (Self :=
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "std::fs::File") [];
                    Ty.apply (Ty.path "std::io::error::Error") []])
              (Trait := ‚Ñê))) in
        let* Œ±1 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "std::path::Path") []] :=
          M.read path in
        let* Œ±2 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply (Ty.path "std::fs::File") [];
                Ty.apply (Ty.path "std::io::error::Error") []] :=
          M.call ((Ty.apply (Ty.path "std::fs::File") [])::["create"] Œ±1) in
        let* Œ±3 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "std::io::error::Error") []];
                Ty.apply (Ty.path "std::fs::File") []] :=
          M.call (Œ±0 Œ±2) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "std::io::error::Error") []];
                Ty.apply (Ty.path "std::fs::File") []] :=
          M.alloc Œ±3 in
        let* Œ±5 : Ty.apply (Ty.path "std::fs::File") [] :=
          match_operator
            Œ±4
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :
                      Ty.function
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply (Ty.path "std::io::error::Error") []]]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.tuple;
                            Ty.apply (Ty.path "std::io::error::Error") []]) :=
                    ltac:(M.get_method (fun ‚Ñê =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.tuple;
                              Ty.apply (Ty.path "std::io::error::Error") []])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply (Ty.path "std::io::error::Error") []])
                        (Trait := ‚Ñê))) in
                  let* Œ±1 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply (Ty.path "core::convert::Infallible") [];
                          Ty.apply (Ty.path "std::io::error::Error") []] :=
                    M.read residual in
                  let* Œ±2 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.tuple;
                          Ty.apply (Ty.path "std::io::error::Error") []] :=
                    M.call (Œ±0 Œ±1) in
                  let* Œ±3 : Ty.path "never" := return_ Œ±2 in
                  let* Œ±4 : Ty.path "never" := M.read Œ±3 in
                  let* Œ±5 : Ty.apply (Ty.path "std::fs::File") [] :=
                    never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match
                end) :
                Ty.apply (Ty.path "std::fs::File") [];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.apply (Ty.path "std::fs::File") []
            ] in
        M.copy Œ±5 in
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "std::fs::File") []];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "slice") [Ty.path "u8"]]]
            (Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          std.io.Write.write_all
            (Self := Ty.apply (Ty.path "std::fs::File") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] := M.read s in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "slice") [Ty.path "u8"]] :=
        M.call ((Ty.path "str")::["as_bytes"] Œ±1) in
      let* Œ±3 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (Œ±0 (borrow_mut f) Œ±2) in
      let* Œ±0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.alloc Œ±3 in
      M.read Œ±0)
  | _, _ => M.impossible
  end.

(*
fn touch(path: &Path) -> io::Result<()> {
    match OpenOptions::new().create(true).write(true).open(path) {
        Ok(_) => Ok(()),
        Err(e) => Err(e),
    }
}
*)
Definition touch (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [path] =>
    let* path := M.alloc path in
    let* Œ±0 : Ty.apply (Ty.path "std::fs::OpenOptions") [] :=
      M.call (Ty.apply (Ty.path "std::fs::OpenOptions") [])::["new"] in
    let* Œ±1 : Ty.apply (Ty.path "std::fs::OpenOptions") [] := M.alloc Œ±0 in
    let* Œ±2 :
        Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "std::fs::OpenOptions") []] :=
      M.call
        ((Ty.apply (Ty.path "std::fs::OpenOptions") [])::["create"]
          (borrow_mut Œ±1)
          true) in
    let* Œ±3 :
        Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply (Ty.path "std::fs::OpenOptions") []] :=
      M.call
        ((Ty.apply (Ty.path "std::fs::OpenOptions") [])::["write"] Œ±2 true) in
    let* Œ±4 :
        Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
      M.read path in
    let* Œ±5 :
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.apply (Ty.path "std::fs::File") [];
            Ty.apply (Ty.path "std::io::error::Error") []] :=
      M.call
        ((Ty.apply (Ty.path "std::fs::OpenOptions") [])::["open"]
          (borrow (deref Œ±3))
          Œ±4) in
    let* Œ±6 :
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.apply (Ty.path "std::fs::File") [];
            Ty.apply (Ty.path "std::io::error::Error") []] :=
      M.alloc Œ±5 in
    let* Œ±7 :
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
      match_operator
        Œ±6
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Ok _ =>
              let Œ≥0_0 := core.result.Result.Get_Ok_0 Œ≥ in
              M.alloc (core.result.Result.Ok tt)
            | _ => M.break_match
            end) :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []];
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Err _ =>
              let Œ≥0_0 := core.result.Result.Get_Err_0 Œ≥ in
              let* e := M.copy Œ≥0_0 in
              let* Œ±0 : Ty.apply (Ty.path "std::io::error::Error") [] :=
                M.read e in
              M.alloc (core.result.Result.Err Œ±0)
            | _ => M.break_match
            end) :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []]
        ] in
    M.read Œ±7
  | _, _ => M.impossible
  end.

(*
fn main() {
    println!("`mkdir a`");
    // Create a directory, returns `io::Result<()>`
    match fs::create_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(_) => {}
    }

    println!("`echo hello > a/b.txt`");
    // The previous match can be simplified using the `unwrap_or_else` method
    echo("hello", &Path::new("a/b.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`mkdir -p a/c/d`");
    // Recursively create a directory, returns `io::Result<()>`
    fs::create_dir_all("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`touch a/c/e.txt`");
    touch(&Path::new("a/c/e.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`ln -s ../b.txt a/c/b.txt`");
    // Create a symbolic link, returns `io::Result<()>`
    if cfg!(target_family = "unix") {
        unix::fs::symlink("../b.txt", "a/c/b.txt").unwrap_or_else(|why| {
            println!("! {:?}", why.kind());
        });
    }

    println!("`cat a/c/b.txt`");
    match cat(&Path::new("a/c/b.txt")) {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(s) => println!("> {}", s),
    }

    println!("`ls a`");
    // Read the contents of a directory, returns `io::Result<Vec<Path>>`
    match fs::read_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(paths) => {
            for path in paths {
                println!("> {:?}", path.unwrap().path());
            }
        }
    }

    println!("`rm a/c/e.txt`");
    // Remove a file, returns `io::Result<()>`
    fs::remove_file("a/c/e.txt").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`rmdir a/c/d`");
    // Remove an empty directory, returns `io::Result<()>`
    fs::remove_dir("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`mkdir a`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a") in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (std.fs.create_dir Œ±0) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.alloc Œ±1 in
      match_operator
        Œ±2
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Err _ =>
              let Œ≥0_0 := core.result.Result.Get_Err_0 Œ≥ in
              let* why := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "! ") in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 : Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                  M.call
                    ((Ty.apply (Ty.path "std::io::error::Error") [])::["kind"]
                      (borrow why)) in
                let* Œ±4 : Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                  M.alloc Œ±3 in
                let* Œ±5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_debug"]
                      (borrow Œ±4)) in
                let* Œ±6 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ Œ±5 ] in
                let* Œ±7 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±6))) in
                let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                M.alloc Œ±8 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Ok _ =>
              let Œ≥0_0 := core.result.Result.Get_Ok_0 Œ≥ in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple
        ] in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`echo hello > a/b.txt`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "hello") in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a/b.txt") in
      let* Œ±2 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
        M.call ((Ty.apply (Ty.path "std::path::Path") [])::["new"] Œ±1) in
      let* Œ±3 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (filesystem_operations.echo Œ±0 Œ±2) in
      let* Œ±4 : Ty.tuple :=
        M.call
          ((Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple;
                  Ty.apply
                    (Ty.path "std::io::error::Error")
                    []])::["unwrap_or_else"]
            Œ±3
            (fun (Œ±0 : Ty.apply (Ty.path "std::io::error::Error") []) =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* why := M.copy Œ≥ in
                    let* _ : Ty.tuple :=
                      let* _ : Ty.tuple :=
                        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "! ") in
                        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "
") in
                        let* Œ±2 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                          M.alloc [ Œ±0; Œ±1 ] in
                        let* Œ±3 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "std::io::error::Error")
                                  [])::["kind"]
                              (borrow why)) in
                        let* Œ±4 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.alloc Œ±3 in
                        let* Œ±5 :
                            Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  [])::["new_debug"]
                              (borrow Œ±4)) in
                        let* Œ±6 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  []] :=
                          M.alloc [ Œ±5 ] in
                        let* Œ±7 :
                            Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::Arguments")
                                  [])::["new_v1"]
                              (pointer_coercion "Unsize" (borrow Œ±2))
                              (pointer_coercion "Unsize" (borrow Œ±6))) in
                        let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                        M.alloc Œ±8 in
                      M.alloc tt in
                    let* Œ±0 : Ty.path "unit" := M.alloc tt in
                    M.read Œ±0) :
                    Ty.tuple
                ]) :
              Ty.tuple)) in
      M.alloc Œ±4 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`mkdir -p a/c/d`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a/c/d") in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (std.fs.create_dir_all Œ±0) in
      let* Œ±2 : Ty.tuple :=
        M.call
          ((Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple;
                  Ty.apply
                    (Ty.path "std::io::error::Error")
                    []])::["unwrap_or_else"]
            Œ±1
            (fun (Œ±0 : Ty.apply (Ty.path "std::io::error::Error") []) =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* why := M.copy Œ≥ in
                    let* _ : Ty.tuple :=
                      let* _ : Ty.tuple :=
                        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "! ") in
                        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "
") in
                        let* Œ±2 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                          M.alloc [ Œ±0; Œ±1 ] in
                        let* Œ±3 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "std::io::error::Error")
                                  [])::["kind"]
                              (borrow why)) in
                        let* Œ±4 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.alloc Œ±3 in
                        let* Œ±5 :
                            Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  [])::["new_debug"]
                              (borrow Œ±4)) in
                        let* Œ±6 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  []] :=
                          M.alloc [ Œ±5 ] in
                        let* Œ±7 :
                            Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::Arguments")
                                  [])::["new_v1"]
                              (pointer_coercion "Unsize" (borrow Œ±2))
                              (pointer_coercion "Unsize" (borrow Œ±6))) in
                        let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                        M.alloc Œ±8 in
                      M.alloc tt in
                    let* Œ±0 : Ty.path "unit" := M.alloc tt in
                    M.read Œ±0) :
                    Ty.tuple
                ]) :
              Ty.tuple)) in
      M.alloc Œ±2 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`touch a/c/e.txt`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a/c/e.txt") in
      let* Œ±1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
        M.call ((Ty.apply (Ty.path "std::path::Path") [])::["new"] Œ±0) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (filesystem_operations.touch Œ±1) in
      let* Œ±3 : Ty.tuple :=
        M.call
          ((Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple;
                  Ty.apply
                    (Ty.path "std::io::error::Error")
                    []])::["unwrap_or_else"]
            Œ±2
            (fun (Œ±0 : Ty.apply (Ty.path "std::io::error::Error") []) =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* why := M.copy Œ≥ in
                    let* _ : Ty.tuple :=
                      let* _ : Ty.tuple :=
                        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "! ") in
                        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "
") in
                        let* Œ±2 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                          M.alloc [ Œ±0; Œ±1 ] in
                        let* Œ±3 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "std::io::error::Error")
                                  [])::["kind"]
                              (borrow why)) in
                        let* Œ±4 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.alloc Œ±3 in
                        let* Œ±5 :
                            Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  [])::["new_debug"]
                              (borrow Œ±4)) in
                        let* Œ±6 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  []] :=
                          M.alloc [ Œ±5 ] in
                        let* Œ±7 :
                            Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::Arguments")
                                  [])::["new_v1"]
                              (pointer_coercion "Unsize" (borrow Œ±2))
                              (pointer_coercion "Unsize" (borrow Œ±6))) in
                        let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                        M.alloc Œ±8 in
                      M.alloc tt in
                    let* Œ±0 : Ty.path "unit" := M.alloc tt in
                    M.read Œ±0) :
                    Ty.tuple
                ]) :
              Ty.tuple)) in
      M.alloc Œ±3 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`ln -s ../b.txt a/c/b.txt`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.path "bool" := M.alloc true in
      let* Œ±1 : Ty.path "bool" := M.read (use Œ±0) in
      if Œ±1 then
        let* _ : Ty.tuple :=
          let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "../b.txt") in
          let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "a/c/b.txt") in
          let* Œ±2 :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
            M.call (std.os.unix.fs.symlink Œ±0 Œ±1) in
          let* Œ±3 : Ty.tuple :=
            M.call
              ((Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.tuple;
                      Ty.apply
                        (Ty.path "std::io::error::Error")
                        []])::["unwrap_or_else"]
                Œ±2
                (fun (Œ±0 : Ty.apply (Ty.path "std::io::error::Error") []) =>
                  (let* Œ±0 := M.alloc Œ±0 in
                  match_operator
                    Œ±0
                    [
                      fun Œ≥ =>
                        (let* why := M.copy Œ≥ in
                        let* _ : Ty.tuple :=
                          let* _ : Ty.tuple :=
                            let* Œ±0 :
                                Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                              M.read (mk_str "! ") in
                            let* Œ±1 :
                                Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                              M.read (mk_str "
") in
                            let* Œ±2 :
                                Ty.apply
                                  (Ty.path "array")
                                  [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                              M.alloc [ Œ±0; Œ±1 ] in
                            let* Œ±3 :
                                Ty.apply
                                  (Ty.path "std::io::error::ErrorKind")
                                  [] :=
                              M.call
                                ((Ty.apply
                                      (Ty.path "std::io::error::Error")
                                      [])::["kind"]
                                  (borrow why)) in
                            let* Œ±4 :
                                Ty.apply
                                  (Ty.path "std::io::error::ErrorKind")
                                  [] :=
                              M.alloc Œ±3 in
                            let* Œ±5 :
                                Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  [] :=
                              M.call
                                ((Ty.apply
                                      (Ty.path "core::fmt::rt::Argument")
                                      [])::["new_debug"]
                                  (borrow Œ±4)) in
                            let* Œ±6 :
                                Ty.apply
                                  (Ty.path "array")
                                  [Ty.apply
                                      (Ty.path "core::fmt::rt::Argument")
                                      []] :=
                              M.alloc [ Œ±5 ] in
                            let* Œ±7 :
                                Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                              M.call
                                ((Ty.apply
                                      (Ty.path "core::fmt::Arguments")
                                      [])::["new_v1"]
                                  (pointer_coercion "Unsize" (borrow Œ±2))
                                  (pointer_coercion "Unsize" (borrow Œ±6))) in
                            let* Œ±8 : Ty.tuple :=
                              M.call (std.io.stdio._print Œ±7) in
                            M.alloc Œ±8 in
                          M.alloc tt in
                        let* Œ±0 : Ty.path "unit" := M.alloc tt in
                        M.read Œ±0) :
                        Ty.tuple
                    ]) :
                  Ty.tuple)) in
          M.alloc Œ±3 in
        M.alloc tt
      else
        M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`cat a/c/b.txt`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a/c/b.txt") in
      let* Œ±1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
        M.call ((Ty.apply (Ty.path "std::path::Path") [])::["new"] Œ±0) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "alloc::string::String") [];
              Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (filesystem_operations.cat Œ±1) in
      let* Œ±3 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "alloc::string::String") [];
              Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.alloc Œ±2 in
      match_operator
        Œ±3
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Err _ =>
              let Œ≥0_0 := core.result.Result.Get_Err_0 Œ≥ in
              let* why := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "! ") in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 : Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                  M.call
                    ((Ty.apply (Ty.path "std::io::error::Error") [])::["kind"]
                      (borrow why)) in
                let* Œ±4 : Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                  M.alloc Œ±3 in
                let* Œ±5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_debug"]
                      (borrow Œ±4)) in
                let* Œ±6 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ Œ±5 ] in
                let* Œ±7 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±6))) in
                let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                M.alloc Œ±8 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Ok _ =>
              let Œ≥0_0 := core.result.Result.Get_Ok_0 Œ≥ in
              let* s := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "> ") in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow s)) in
                let* Œ±4 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ Œ±3 ] in
                let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±4))) in
                let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
                M.alloc Œ±6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple
        ] in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`ls a`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a") in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "std::fs::ReadDir") [];
              Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (std.fs.read_dir Œ±0) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "std::fs::ReadDir") [];
              Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.alloc Œ±1 in
      match_operator
        Œ±2
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Err _ =>
              let Œ≥0_0 := core.result.Result.Get_Err_0 Œ≥ in
              let* why := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "! ") in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 : Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                  M.call
                    ((Ty.apply (Ty.path "std::io::error::Error") [])::["kind"]
                      (borrow why)) in
                let* Œ±4 : Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                  M.alloc Œ±3 in
                let* Œ±5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_debug"]
                      (borrow Œ±4)) in
                let* Œ±6 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ Œ±5 ] in
                let* Œ±7 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±6))) in
                let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                M.alloc Œ±8 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Ok _ =>
              let Œ≥0_0 := core.result.Result.Get_Ok_0 Œ≥ in
              let* paths := M.copy Œ≥0_0 in
              let* Œ±0 :
                  Ty.function [Ty.apply (Ty.path "std::fs::ReadDir") []] _ :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self := Ty.apply (Ty.path "std::fs::ReadDir") [])
                    (Trait := ‚Ñê))) in
              let* Œ±1 : Ty.apply (Ty.path "std::fs::ReadDir") [] :=
                M.read paths in
              let* Œ±2 : Ty.apply (Ty.path "std::fs::ReadDir") [] :=
                M.call (Œ±0 Œ±1) in
              let* Œ±3 : Ty.apply (Ty.path "std::fs::ReadDir") [] :=
                M.alloc Œ±2 in
              let* Œ±4 : Ty.tuple :=
                match_operator
                  Œ±3
                  [
                    fun Œ≥ =>
                      (let* iter := M.copy Œ≥ in
                      M.loop
                        (let* _ : Ty.tuple :=
                          let* Œ±0 :
                              Ty.function
                                [Ty.apply
                                    (Ty.path "mut_ref")
                                    [Ty.apply (Ty.path "std::fs::ReadDir") []]]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  [_]) :=
                            ltac:(M.get_method (fun ‚Ñê =>
                              core.iter.traits.iterator.Iterator.next
                                (Self :=
                                  Ty.apply (Ty.path "std::fs::ReadDir") [])
                                (Trait := ‚Ñê))) in
                          let* Œ±1 :
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [Ty.apply
                                    (Ty.path "core::result::Result")
                                    [Ty.apply (Ty.path "std::fs::DirEntry") [];
                                      Ty.apply
                                        (Ty.path "std::io::error::Error")
                                        []]] :=
                            M.call (Œ±0 (borrow_mut iter)) in
                          let* Œ±2 :
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [Ty.apply
                                    (Ty.path "core::result::Result")
                                    [Ty.apply (Ty.path "std::fs::DirEntry") [];
                                      Ty.apply
                                        (Ty.path "std::io::error::Error")
                                        []]] :=
                            M.alloc Œ±1 in
                          match_operator
                            Œ±2
                            [
                              fun Œ≥ =>
                                (let* Œ±0 := M.read Œ≥ in
                                match Œ±0 with
                                | core.option.Option.None =>
                                  let* Œ±0 : Ty.path "never" := M.break in
                                  let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                                  let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                                  M.alloc Œ±2
                                | _ => M.break_match
                                end) :
                                Ty.tuple;
                              fun Œ≥ =>
                                (let* Œ±0 := M.read Œ≥ in
                                match Œ±0 with
                                | core.option.Option.Some _ =>
                                  let Œ≥0_0 := core.option.Option.Get_Some_0 Œ≥ in
                                  let* path := M.copy Œ≥0_0 in
                                  let* _ : Ty.tuple :=
                                    let* _ : Ty.tuple :=
                                      let* Œ±0 :
                                          Ty.apply
                                            (Ty.path "ref")
                                            [Ty.path "str"] :=
                                        M.read (mk_str "> ") in
                                      let* Œ±1 :
                                          Ty.apply
                                            (Ty.path "ref")
                                            [Ty.path "str"] :=
                                        M.read (mk_str "
") in
                                      let* Œ±2 :
                                          Ty.apply
                                            (Ty.path "array")
                                            [Ty.apply
                                                (Ty.path "ref")
                                                [Ty.path "str"]] :=
                                        M.alloc [ Œ±0; Œ±1 ] in
                                      let* Œ±3 :
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [Ty.apply
                                                (Ty.path "std::fs::DirEntry")
                                                [];
                                              Ty.apply
                                                (Ty.path
                                                  "std::io::error::Error")
                                                []] :=
                                        M.read path in
                                      let* Œ±4 :
                                          Ty.apply
                                            (Ty.path "std::fs::DirEntry")
                                            [] :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path "core::result::Result")
                                                [Ty.apply
                                                    (Ty.path
                                                      "std::fs::DirEntry")
                                                    [];
                                                  Ty.apply
                                                    (Ty.path
                                                      "std::io::error::Error")
                                                    []])::["unwrap"]
                                            Œ±3) in
                                      let* Œ±5 :
                                          Ty.apply
                                            (Ty.path "std::fs::DirEntry")
                                            [] :=
                                        M.alloc Œ±4 in
                                      let* Œ±6 :
                                          Ty.apply
                                            (Ty.path "std::path::PathBuf")
                                            [] :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path "std::fs::DirEntry")
                                                [])::["path"]
                                            (borrow Œ±5)) in
                                      let* Œ±7 :
                                          Ty.apply
                                            (Ty.path "std::path::PathBuf")
                                            [] :=
                                        M.alloc Œ±6 in
                                      let* Œ±8 :
                                          Ty.apply
                                            (Ty.path "core::fmt::rt::Argument")
                                            [] :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path
                                                  "core::fmt::rt::Argument")
                                                [])::["new_debug"]
                                            (borrow Œ±7)) in
                                      let* Œ±9 :
                                          Ty.apply
                                            (Ty.path "array")
                                            [Ty.apply
                                                (Ty.path
                                                  "core::fmt::rt::Argument")
                                                []] :=
                                        M.alloc [ Œ±8 ] in
                                      let* Œ±10 :
                                          Ty.apply
                                            (Ty.path "core::fmt::Arguments")
                                            [] :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path "core::fmt::Arguments")
                                                [])::["new_v1"]
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow Œ±2))
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow Œ±9))) in
                                      let* Œ±11 : Ty.tuple :=
                                        M.call (std.io.stdio._print Œ±10) in
                                      M.alloc Œ±11 in
                                    M.alloc tt in
                                  M.alloc tt
                                | _ => M.break_match
                                end) :
                                Ty.tuple
                            ] in
                        M.alloc tt)) :
                      Ty.tuple
                  ] in
              M.pure (use Œ±4)
            | _ => M.break_match
            end) :
            Ty.tuple
        ] in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`rm a/c/e.txt`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a/c/e.txt") in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (std.fs.remove_file Œ±0) in
      let* Œ±2 : Ty.tuple :=
        M.call
          ((Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple;
                  Ty.apply
                    (Ty.path "std::io::error::Error")
                    []])::["unwrap_or_else"]
            Œ±1
            (fun (Œ±0 : Ty.apply (Ty.path "std::io::error::Error") []) =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* why := M.copy Œ≥ in
                    let* _ : Ty.tuple :=
                      let* _ : Ty.tuple :=
                        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "! ") in
                        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "
") in
                        let* Œ±2 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                          M.alloc [ Œ±0; Œ±1 ] in
                        let* Œ±3 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "std::io::error::Error")
                                  [])::["kind"]
                              (borrow why)) in
                        let* Œ±4 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.alloc Œ±3 in
                        let* Œ±5 :
                            Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  [])::["new_debug"]
                              (borrow Œ±4)) in
                        let* Œ±6 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  []] :=
                          M.alloc [ Œ±5 ] in
                        let* Œ±7 :
                            Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::Arguments")
                                  [])::["new_v1"]
                              (pointer_coercion "Unsize" (borrow Œ±2))
                              (pointer_coercion "Unsize" (borrow Œ±6))) in
                        let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                        M.alloc Œ±8 in
                      M.alloc tt in
                    let* Œ±0 : Ty.path "unit" := M.alloc tt in
                    M.read Œ±0) :
                    Ty.tuple
                ]) :
              Ty.tuple)) in
      M.alloc Œ±2 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "`rmdir a/c/d`
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a/c/d") in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "std::io::error::Error") []] :=
        M.call (std.fs.remove_dir Œ±0) in
      let* Œ±2 : Ty.tuple :=
        M.call
          ((Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple;
                  Ty.apply
                    (Ty.path "std::io::error::Error")
                    []])::["unwrap_or_else"]
            Œ±1
            (fun (Œ±0 : Ty.apply (Ty.path "std::io::error::Error") []) =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* why := M.copy Œ≥ in
                    let* _ : Ty.tuple :=
                      let* _ : Ty.tuple :=
                        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "! ") in
                        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                          M.read (mk_str "
") in
                        let* Œ±2 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                          M.alloc [ Œ±0; Œ±1 ] in
                        let* Œ±3 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "std::io::error::Error")
                                  [])::["kind"]
                              (borrow why)) in
                        let* Œ±4 :
                            Ty.apply (Ty.path "std::io::error::ErrorKind") [] :=
                          M.alloc Œ±3 in
                        let* Œ±5 :
                            Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  [])::["new_debug"]
                              (borrow Œ±4)) in
                        let* Œ±6 :
                            Ty.apply
                              (Ty.path "array")
                              [Ty.apply
                                  (Ty.path "core::fmt::rt::Argument")
                                  []] :=
                          M.alloc [ Œ±5 ] in
                        let* Œ±7 :
                            Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "core::fmt::Arguments")
                                  [])::["new_v1"]
                              (pointer_coercion "Unsize" (borrow Œ±2))
                              (pointer_coercion "Unsize" (borrow Œ±6))) in
                        let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                        M.alloc Œ±8 in
                      M.alloc tt in
                    let* Œ±0 : Ty.path "unit" := M.alloc tt in
                    M.read Œ±0) :
                    Ty.tuple
                ]) :
              Ty.tuple)) in
      M.alloc Œ±2 in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
