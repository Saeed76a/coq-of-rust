(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn cat(path: &Path) -> io::Result<String> {
    let mut f = File::open(path)?;
    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
*)
Definition cat (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ path ] =>
    let* path := M.alloc path in
    let return_ :=
      M.return_
        (R :=
          Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.path "alloc::string::String"; Ty.path "std::io::error::Error"
            ]) in
    M.catch_return
      (let* f :=
        let* α0 :=
          M.get_method
            "core::ops::try_trait::Try"
            "branch"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "std::fs::File"; Ty.path "std::io::error::Error" ]
            ] in
        let* α1 := M.read path in
        let* α2 := M.call (Ty.path "std::fs::File")::["open"] [ α1 ] in
        let* α3 := M.call α0 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let* γ0_0 :=
                    let* α0 :=
                      M.var
                        "core::ops::control_flow::ControlFlow::Get_Break_0" in
                    M.pure (α0 γ) in
                  let* residual := M.copy γ0_0 in
                  let* α0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "alloc::string::String";
                              Ty.path "std::io::error::Error"
                            ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "std::io::error::Error"
                            ]
                      ] in
                  let* α1 := M.read residual in
                  let* α2 := M.call α0 [ α1 ] in
                  let* α3 := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match 
                end) :
                Ty.path "std::fs::File";
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let* γ0_0 :=
                    let* α0 :=
                      M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0" in
                    M.pure (α0 γ) in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match 
                end) :
                Ty.path "std::fs::File"
            ] in
        M.copy α5 in
      let* s :=
        let* α0 := M.call (Ty.path "alloc::string::String")::["new"] [] in
        M.alloc α0 in
      let* α0 :=
        M.get_method
          "std::io::Read"
          "read_to_string"
          [ (* Self *) Ty.path "std::fs::File" ] in
      let* α1 := M.call α0 [ borrow_mut f; borrow_mut s ] in
      let* α2 := M.alloc α1 in
      let* α0 :=
        match_operator
          α2
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Ok _ =>
                let* γ0_0 :=
                  let* α0 := M.var "core::result::Result::Get_Ok_0" in
                  M.pure (α0 γ) in
                let* α0 := M.read s in
                M.alloc (core.result.Result.Ok α0)
              | _ => M.break_match 
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [
                  Ty.path "alloc::string::String";
                  Ty.path "std::io::error::Error"
                ];
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Err _ =>
                let* γ0_0 :=
                  let* α0 := M.var "core::result::Result::Get_Err_0" in
                  M.pure (α0 γ) in
                let* e := M.copy γ0_0 in
                let* α0 := M.read e in
                M.alloc (core.result.Result.Err α0)
              | _ => M.break_match 
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [
                  Ty.path "alloc::string::String";
                  Ty.path "std::io::error::Error"
                ]
          ] in
      M.read α0)
  | _, _ => M.impossible
  end.

(*
fn echo(s: &str, path: &Path) -> io::Result<()> {
    let mut f = File::create(path)?;

    f.write_all(s.as_bytes())
}
*)
Definition echo (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ s; path ] =>
    let* s := M.alloc s in
    let* path := M.alloc path in
    let return_ :=
      M.return_
        (R :=
          Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.tuple []; Ty.path "std::io::error::Error" ]) in
    M.catch_return
      (let* f :=
        let* α0 :=
          M.get_method
            "core::ops::try_trait::Try"
            "branch"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "std::fs::File"; Ty.path "std::io::error::Error" ]
            ] in
        let* α1 := M.read path in
        let* α2 := M.call (Ty.path "std::fs::File")::["create"] [ α1 ] in
        let* α3 := M.call α0 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let* γ0_0 :=
                    let* α0 :=
                      M.var
                        "core::ops::control_flow::ControlFlow::Get_Break_0" in
                    M.pure (α0 γ) in
                  let* residual := M.copy γ0_0 in
                  let* α0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "std::io::error::Error"
                            ]
                      ] in
                  let* α1 := M.read residual in
                  let* α2 := M.call α0 [ α1 ] in
                  let* α3 := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match 
                end) :
                Ty.path "std::fs::File";
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let* γ0_0 :=
                    let* α0 :=
                      M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0" in
                    M.pure (α0 γ) in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match 
                end) :
                Ty.path "std::fs::File"
            ] in
        M.copy α5 in
      let* α0 :=
        M.get_method
          "std::io::Write"
          "write_all"
          [ (* Self *) Ty.path "std::fs::File" ] in
      let* α1 := M.read s in
      let* α2 := M.call (Ty.path "str")::["as_bytes"] [ α1 ] in
      let* α3 := M.call α0 [ borrow_mut f; α2 ] in
      let* α0 := M.alloc α3 in
      M.read α0)
  | _, _ => M.impossible
  end.

(*
fn touch(path: &Path) -> io::Result<()> {
    match OpenOptions::new().create(true).write(true).open(path) {
        Ok(_) => Ok(()),
        Err(e) => Err(e),
    }
}
*)
Definition touch (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ path ] =>
    let* path := M.alloc path in
    let* α0 := M.call (Ty.path "std::fs::OpenOptions")::["new"] [] in
    let* α1 := M.alloc α0 in
    let* α2 :=
      M.call
        (Ty.path "std::fs::OpenOptions")::["create"]
        [ borrow_mut α1; true ] in
    let* α3 :=
      M.call (Ty.path "std::fs::OpenOptions")::["write"] [ α2; true ] in
    let* α4 := M.read path in
    let* α5 :=
      M.call
        (Ty.path "std::fs::OpenOptions")::["open"]
        [ borrow (deref α3); α4 ] in
    let* α6 := M.alloc α5 in
    let* α7 :=
      match_operator
        α6
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Ok _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Ok_0" in
                M.pure (α0 γ) in
              M.alloc (core.result.Result.Ok tt)
            | _ => M.break_match 
            end) :
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "std::io::error::Error" ];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Err _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Err_0" in
                M.pure (α0 γ) in
              let* e := M.copy γ0_0 in
              let* α0 := M.read e in
              M.alloc (core.result.Result.Err α0)
            | _ => M.break_match 
            end) :
            Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "std::io::error::Error" ]
        ] in
    M.read α7
  | _, _ => M.impossible
  end.

(*
fn main() {
    println!("`mkdir a`");
    // Create a directory, returns `io::Result<()>`
    match fs::create_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(_) => {}
    }

    println!("`echo hello > a/b.txt`");
    // The previous match can be simplified using the `unwrap_or_else` method
    echo("hello", &Path::new("a/b.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`mkdir -p a/c/d`");
    // Recursively create a directory, returns `io::Result<()>`
    fs::create_dir_all("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`touch a/c/e.txt`");
    touch(&Path::new("a/c/e.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`ln -s ../b.txt a/c/b.txt`");
    // Create a symbolic link, returns `io::Result<()>`
    if cfg!(target_family = "unix") {
        unix::fs::symlink("../b.txt", "a/c/b.txt").unwrap_or_else(|why| {
            println!("! {:?}", why.kind());
        });
    }

    println!("`cat a/c/b.txt`");
    match cat(&Path::new("a/c/b.txt")) {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(s) => println!("> {}", s),
    }

    println!("`ls a`");
    // Read the contents of a directory, returns `io::Result<Vec<Path>>`
    match fs::read_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(paths) => {
            for path in paths {
                println!("> {:?}", path.unwrap().path());
            }
        }
    }

    println!("`rm a/c/e.txt`");
    // Remove a file, returns `io::Result<()>`
    fs::remove_file("a/c/e.txt").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`rmdir a/c/d`");
    // Remove an empty directory, returns `io::Result<()>`
    fs::remove_dir("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`mkdir a`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.var "std::fs::create_dir" in
      let* α1 := M.read (mk_str "a") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 := M.alloc α2 in
      match_operator
        α3
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Err _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Err_0" in
                M.pure (α0 γ) in
              let* why := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "! ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "std::io::error::Error")::["kind"]
                    [ borrow why ] in
                let* α5 := M.alloc α4 in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                    [ borrow α5 ] in
                let* α7 := M.alloc [ α6 ] in
                let* α8 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α3);
                      pointer_coercion "Unsize" (borrow α7)
                    ] in
                let* α9 := M.call α0 [ α8 ] in
                M.alloc α9 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Ok _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Ok_0" in
                M.pure (α0 γ) in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple []
        ] in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`echo hello > a/b.txt`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.var "filesystem_operations::echo" in
      let* α1 := M.read (mk_str "hello") in
      let* α2 := M.read (mk_str "a/b.txt") in
      let* α3 := M.call (Ty.path "std::path::Path")::["new"] [ α2 ] in
      let* α4 := M.call α0 [ α1; α3 ] in
      let* α5 :=
        M.call
          (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "std::io::error::Error"
              ])::["unwrap_or_else"]
          [
            α4;
            fun (α0 : Ty.path "std::io::error::Error") =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.var "std::io::stdio::_print" in
                        let* α1 := M.read (mk_str "! ") in
                        let* α2 := M.read (mk_str "
") in
                        let* α3 := M.alloc [ α1; α2 ] in
                        let* α4 :=
                          M.call
                            (Ty.path "std::io::error::Error")::["kind"]
                            [ borrow why ] in
                        let* α5 := M.alloc α4 in
                        let* α6 :=
                          M.call
                            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                            [ borrow α5 ] in
                        let* α7 := M.alloc [ α6 ] in
                        let* α8 :=
                          M.call
                            (Ty.path "core::fmt::Arguments")::["new_v1"]
                            [
                              pointer_coercion "Unsize" (borrow α3);
                              pointer_coercion "Unsize" (borrow α7)
                            ] in
                        let* α9 := M.call α0 [ α8 ] in
                        M.alloc α9 in
                      M.alloc tt in
                    let* α0 := M.alloc tt in
                    M.read α0) :
                    Ty.tuple []
                ]) :
              Ty.tuple []
          ] in
      M.alloc α5 in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`mkdir -p a/c/d`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.var "std::fs::create_dir_all" in
      let* α1 := M.read (mk_str "a/c/d") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 :=
        M.call
          (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "std::io::error::Error"
              ])::["unwrap_or_else"]
          [
            α2;
            fun (α0 : Ty.path "std::io::error::Error") =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.var "std::io::stdio::_print" in
                        let* α1 := M.read (mk_str "! ") in
                        let* α2 := M.read (mk_str "
") in
                        let* α3 := M.alloc [ α1; α2 ] in
                        let* α4 :=
                          M.call
                            (Ty.path "std::io::error::Error")::["kind"]
                            [ borrow why ] in
                        let* α5 := M.alloc α4 in
                        let* α6 :=
                          M.call
                            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                            [ borrow α5 ] in
                        let* α7 := M.alloc [ α6 ] in
                        let* α8 :=
                          M.call
                            (Ty.path "core::fmt::Arguments")::["new_v1"]
                            [
                              pointer_coercion "Unsize" (borrow α3);
                              pointer_coercion "Unsize" (borrow α7)
                            ] in
                        let* α9 := M.call α0 [ α8 ] in
                        M.alloc α9 in
                      M.alloc tt in
                    let* α0 := M.alloc tt in
                    M.read α0) :
                    Ty.tuple []
                ]) :
              Ty.tuple []
          ] in
      M.alloc α3 in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`touch a/c/e.txt`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.var "filesystem_operations::touch" in
      let* α1 := M.read (mk_str "a/c/e.txt") in
      let* α2 := M.call (Ty.path "std::path::Path")::["new"] [ α1 ] in
      let* α3 := M.call α0 [ α2 ] in
      let* α4 :=
        M.call
          (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "std::io::error::Error"
              ])::["unwrap_or_else"]
          [
            α3;
            fun (α0 : Ty.path "std::io::error::Error") =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.var "std::io::stdio::_print" in
                        let* α1 := M.read (mk_str "! ") in
                        let* α2 := M.read (mk_str "
") in
                        let* α3 := M.alloc [ α1; α2 ] in
                        let* α4 :=
                          M.call
                            (Ty.path "std::io::error::Error")::["kind"]
                            [ borrow why ] in
                        let* α5 := M.alloc α4 in
                        let* α6 :=
                          M.call
                            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                            [ borrow α5 ] in
                        let* α7 := M.alloc [ α6 ] in
                        let* α8 :=
                          M.call
                            (Ty.path "core::fmt::Arguments")::["new_v1"]
                            [
                              pointer_coercion "Unsize" (borrow α3);
                              pointer_coercion "Unsize" (borrow α7)
                            ] in
                        let* α9 := M.call α0 [ α8 ] in
                        M.alloc α9 in
                      M.alloc tt in
                    let* α0 := M.alloc tt in
                    M.read α0) :
                    Ty.tuple []
                ]) :
              Ty.tuple []
          ] in
      M.alloc α4 in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`ln -s ../b.txt a/c/b.txt`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.alloc true in
      let* α1 := M.read (use α0) in
      if α1 then
        let* _ :=
          let* α0 := M.var "std::os::unix::fs::symlink" in
          let* α1 := M.read (mk_str "../b.txt") in
          let* α2 := M.read (mk_str "a/c/b.txt") in
          let* α3 := M.call α0 [ α1; α2 ] in
          let* α4 :=
            M.call
              (Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.tuple []; Ty.path "std::io::error::Error"
                  ])::["unwrap_or_else"]
              [
                α3;
                fun (α0 : Ty.path "std::io::error::Error") =>
                  (let* α0 := M.alloc α0 in
                  match_operator
                    α0
                    [
                      fun γ =>
                        (let* why := M.copy γ in
                        let* _ :=
                          let* _ :=
                            let* α0 := M.var "std::io::stdio::_print" in
                            let* α1 := M.read (mk_str "! ") in
                            let* α2 := M.read (mk_str "
") in
                            let* α3 := M.alloc [ α1; α2 ] in
                            let* α4 :=
                              M.call
                                (Ty.path "std::io::error::Error")::["kind"]
                                [ borrow why ] in
                            let* α5 := M.alloc α4 in
                            let* α6 :=
                              M.call
                                (Ty.path
                                    "core::fmt::rt::Argument")::["new_debug"]
                                [ borrow α5 ] in
                            let* α7 := M.alloc [ α6 ] in
                            let* α8 :=
                              M.call
                                (Ty.path "core::fmt::Arguments")::["new_v1"]
                                [
                                  pointer_coercion "Unsize" (borrow α3);
                                  pointer_coercion "Unsize" (borrow α7)
                                ] in
                            let* α9 := M.call α0 [ α8 ] in
                            M.alloc α9 in
                          M.alloc tt in
                        let* α0 := M.alloc tt in
                        M.read α0) :
                        Ty.tuple []
                    ]) :
                  Ty.tuple []
              ] in
          M.alloc α4 in
        M.alloc tt
      else
        M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`cat a/c/b.txt`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.var "filesystem_operations::cat" in
      let* α1 := M.read (mk_str "a/c/b.txt") in
      let* α2 := M.call (Ty.path "std::path::Path")::["new"] [ α1 ] in
      let* α3 := M.call α0 [ α2 ] in
      let* α4 := M.alloc α3 in
      match_operator
        α4
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Err _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Err_0" in
                M.pure (α0 γ) in
              let* why := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "! ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "std::io::error::Error")::["kind"]
                    [ borrow why ] in
                let* α5 := M.alloc α4 in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                    [ borrow α5 ] in
                let* α7 := M.alloc [ α6 ] in
                let* α8 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α3);
                      pointer_coercion "Unsize" (borrow α7)
                    ] in
                let* α9 := M.call α0 [ α8 ] in
                M.alloc α9 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Ok _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Ok_0" in
                M.pure (α0 γ) in
              let* s := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "> ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow s ] in
                let* α5 := M.alloc [ α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α3);
                      pointer_coercion "Unsize" (borrow α5)
                    ] in
                let* α7 := M.call α0 [ α6 ] in
                M.alloc α7 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple []
        ] in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`ls a`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.var "std::fs::read_dir" in
      let* α1 := M.read (mk_str "a") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 := M.alloc α2 in
      match_operator
        α3
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Err _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Err_0" in
                M.pure (α0 γ) in
              let* why := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "! ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "std::io::error::Error")::["kind"]
                    [ borrow why ] in
                let* α5 := M.alloc α4 in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                    [ borrow α5 ] in
                let* α7 := M.alloc [ α6 ] in
                let* α8 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α3);
                      pointer_coercion "Unsize" (borrow α7)
                    ] in
                let* α9 := M.call α0 [ α8 ] in
                M.alloc α9 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Ok _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Ok_0" in
                M.pure (α0 γ) in
              let* paths := M.copy γ0_0 in
              let* α0 :=
                M.get_method
                  "core::iter::traits::collect::IntoIterator"
                  "into_iter"
                  [ (* Self *) Ty.path "std::fs::ReadDir" ] in
              let* α1 := M.read paths in
              let* α2 := M.call α0 [ α1 ] in
              let* α3 := M.alloc α2 in
              let* α4 :=
                match_operator
                  α3
                  [
                    fun γ =>
                      (let* iter := M.copy γ in
                      M.loop
                        (let* _ :=
                          let* α0 :=
                            M.get_method
                              "core::iter::traits::iterator::Iterator"
                              "next"
                              [ (* Self *) Ty.path "std::fs::ReadDir" ] in
                          let* α1 := M.call α0 [ borrow_mut iter ] in
                          let* α2 := M.alloc α1 in
                          match_operator
                            α2
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.option.Option.None =>
                                  let* α0 := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match 
                                end) :
                                Ty.tuple [];
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.option.Option.Some _ =>
                                  let* γ0_0 :=
                                    let* α0 :=
                                      M.var
                                        "core::option::Option::Get_Some_0" in
                                    M.pure (α0 γ) in
                                  let* path := M.copy γ0_0 in
                                  let* _ :=
                                    let* _ :=
                                      let* α0 :=
                                        M.var "std::io::stdio::_print" in
                                      let* α1 := M.read (mk_str "> ") in
                                      let* α2 := M.read (mk_str "
") in
                                      let* α3 := M.alloc [ α1; α2 ] in
                                      let* α4 := M.read path in
                                      let* α5 :=
                                        M.call
                                          (Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "std::fs::DirEntry";
                                                Ty.path "std::io::error::Error"
                                              ])::["unwrap"]
                                          [ α4 ] in
                                      let* α6 := M.alloc α5 in
                                      let* α7 :=
                                        M.call
                                          (Ty.path
                                              "std::fs::DirEntry")::["path"]
                                          [ borrow α6 ] in
                                      let* α8 := M.alloc α7 in
                                      let* α9 :=
                                        M.call
                                          (Ty.path
                                              "core::fmt::rt::Argument")::["new_debug"]
                                          [ borrow α8 ] in
                                      let* α10 := M.alloc [ α9 ] in
                                      let* α11 :=
                                        M.call
                                          (Ty.path
                                              "core::fmt::Arguments")::["new_v1"]
                                          [
                                            pointer_coercion
                                              "Unsize"
                                              (borrow α3);
                                            pointer_coercion
                                              "Unsize"
                                              (borrow α10)
                                          ] in
                                      let* α12 := M.call α0 [ α11 ] in
                                      M.alloc α12 in
                                    M.alloc tt in
                                  M.alloc tt
                                | _ => M.break_match 
                                end) :
                                Ty.tuple []
                            ] in
                        M.alloc tt)) :
                      Ty.tuple []
                  ] in
              M.pure (use α4)
            | _ => M.break_match 
            end) :
            Ty.tuple []
        ] in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`rm a/c/e.txt`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.var "std::fs::remove_file" in
      let* α1 := M.read (mk_str "a/c/e.txt") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 :=
        M.call
          (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "std::io::error::Error"
              ])::["unwrap_or_else"]
          [
            α2;
            fun (α0 : Ty.path "std::io::error::Error") =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.var "std::io::stdio::_print" in
                        let* α1 := M.read (mk_str "! ") in
                        let* α2 := M.read (mk_str "
") in
                        let* α3 := M.alloc [ α1; α2 ] in
                        let* α4 :=
                          M.call
                            (Ty.path "std::io::error::Error")::["kind"]
                            [ borrow why ] in
                        let* α5 := M.alloc α4 in
                        let* α6 :=
                          M.call
                            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                            [ borrow α5 ] in
                        let* α7 := M.alloc [ α6 ] in
                        let* α8 :=
                          M.call
                            (Ty.path "core::fmt::Arguments")::["new_v1"]
                            [
                              pointer_coercion "Unsize" (borrow α3);
                              pointer_coercion "Unsize" (borrow α7)
                            ] in
                        let* α9 := M.call α0 [ α8 ] in
                        M.alloc α9 in
                      M.alloc tt in
                    let* α0 := M.alloc tt in
                    M.read α0) :
                    Ty.tuple []
                ]) :
              Ty.tuple []
          ] in
      M.alloc α3 in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "`rmdir a/c/d`
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* _ :=
      let* α0 := M.var "std::fs::remove_dir" in
      let* α1 := M.read (mk_str "a/c/d") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 :=
        M.call
          (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.tuple []; Ty.path "std::io::error::Error"
              ])::["unwrap_or_else"]
          [
            α2;
            fun (α0 : Ty.path "std::io::error::Error") =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.var "std::io::stdio::_print" in
                        let* α1 := M.read (mk_str "! ") in
                        let* α2 := M.read (mk_str "
") in
                        let* α3 := M.alloc [ α1; α2 ] in
                        let* α4 :=
                          M.call
                            (Ty.path "std::io::error::Error")::["kind"]
                            [ borrow why ] in
                        let* α5 := M.alloc α4 in
                        let* α6 :=
                          M.call
                            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                            [ borrow α5 ] in
                        let* α7 := M.alloc [ α6 ] in
                        let* α8 :=
                          M.call
                            (Ty.path "core::fmt::Arguments")::["new_v1"]
                            [
                              pointer_coercion "Unsize" (borrow α3);
                              pointer_coercion "Unsize" (borrow α7)
                            ] in
                        let* α9 := M.call α0 [ α8 ] in
                        M.alloc α9 in
                      M.alloc tt in
                    let* α0 := M.alloc tt in
                    M.read α0) :
                    Ty.tuple []
                ]) :
              Ty.tuple []
          ] in
      M.alloc α3 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
