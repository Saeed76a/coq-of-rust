(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn cat(path: &Path) -> io::Result<String> {
    let mut f = File::open(path)?;
    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
*)
Definition cat (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ path ] =>
    let* path := M.alloc path in
    let* f :=
      let* α0 :=
        M.get_trait_method
          "core::ops::try_trait::Try"
          "branch"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::result::Result")
                [ Ty.path "std::fs::File"; Ty.path "std::io::error::Error" ]
          ] in
      let* α1 := M.get_associated_function (Ty.path "std::fs::File") "open" in
      let* α2 := M.read path in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 := M.call α0 [ α3 ] in
      let* α5 := M.alloc α4 in
      let* α6 :=
        match_operator
          α5
          [
            fun γ =>
              (let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  "from_residual"
                  [
                    (* Self *)
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.path "alloc::string::String";
                          Ty.path "std::io::error::Error"
                        ];
                    (* R *)
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.path "core::convert::Infallible";
                          Ty.path "std::io::error::Error"
                        ]
                  ] in
              let* α1 := M.read residual in
              let* α2 := M.call α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5);
            fun γ =>
              (let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val)
          ] in
      M.copy α6 in
    let* s :=
      let* α0 :=
        M.get_associated_function (Ty.path "alloc::string::String") "new" in
      let* α1 := M.call α0 [] in
      M.alloc α1 in
    let* α0 :=
      M.get_trait_method
        "std::io::Read"
        "read_to_string"
        [ (* Self *) Ty.path "std::fs::File" ] in
    let* α1 := M.call α0 [ f; s ] in
    let* α2 := M.alloc α1 in
    let* α0 :=
      match_operator
        α2
        [
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Ok"
                0 in
            let* α0 := M.read s in
            M.alloc (Value.StructTuple "core::result::Result::Ok" [ α0 ]));
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Err"
                0 in
            let* e := M.copy γ0_0 in
            let* α0 := M.read e in
            M.alloc (Value.StructTuple "core::result::Result::Err" [ α0 ]))
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn echo(s: &str, path: &Path) -> io::Result<()> {
    let mut f = File::create(path)?;

    f.write_all(s.as_bytes())
}
*)
Definition echo (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ s; path ] =>
    let* s := M.alloc s in
    let* path := M.alloc path in
    let* f :=
      let* α0 :=
        M.get_trait_method
          "core::ops::try_trait::Try"
          "branch"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::result::Result")
                [ Ty.path "std::fs::File"; Ty.path "std::io::error::Error" ]
          ] in
      let* α1 := M.get_associated_function (Ty.path "std::fs::File") "create" in
      let* α2 := M.read path in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 := M.call α0 [ α3 ] in
      let* α5 := M.alloc α4 in
      let* α6 :=
        match_operator
          α5
          [
            fun γ =>
              (let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  "from_residual"
                  [
                    (* Self *)
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [ Ty.tuple []; Ty.path "std::io::error::Error" ];
                    (* R *)
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.path "core::convert::Infallible";
                          Ty.path "std::io::error::Error"
                        ]
                  ] in
              let* α1 := M.read residual in
              let* α2 := M.call α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5);
            fun γ =>
              (let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val)
          ] in
      M.copy α6 in
    let* α0 :=
      M.get_trait_method
        "std::io::Write"
        "write_all"
        [ (* Self *) Ty.path "std::fs::File" ] in
    let* α1 := M.get_associated_function (Ty.path "str") "as_bytes" in
    let* α2 := M.read s in
    let* α3 := M.call α1 [ α2 ] in
    let* α4 := M.call α0 [ f; α3 ] in
    let* α0 := M.alloc α4 in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn touch(path: &Path) -> io::Result<()> {
    match OpenOptions::new().create(true).write(true).open(path) {
        Ok(_) => Ok(()),
        Err(e) => Err(e),
    }
}
*)
Definition touch (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ path ] =>
    let* path := M.alloc path in
    let* α0 :=
      M.get_associated_function (Ty.path "std::fs::OpenOptions") "open" in
    let* α1 :=
      M.get_associated_function (Ty.path "std::fs::OpenOptions") "write" in
    let* α2 :=
      M.get_associated_function (Ty.path "std::fs::OpenOptions") "create" in
    let* α3 :=
      M.get_associated_function (Ty.path "std::fs::OpenOptions") "new" in
    let* α4 := M.call α3 [] in
    let* α5 := M.alloc α4 in
    let* α6 := M.call α2 [ α5; Value.Bool true ] in
    let* α7 := M.call α1 [ α6; Value.Bool true ] in
    let* α8 := M.read path in
    let* α9 := M.call α0 [ α7; α8 ] in
    let* α10 := M.alloc α9 in
    let* α11 :=
      match_operator
        α10
        [
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Ok"
                0 in
            M.alloc
              (Value.StructTuple
                "core::result::Result::Ok"
                [ Value.Tuple [] ]));
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Err"
                0 in
            let* e := M.copy γ0_0 in
            let* α0 := M.read e in
            M.alloc (Value.StructTuple "core::result::Result::Err" [ α0 ]))
        ] in
    M.read α11
  | _, _ => M.impossible
  end.

(*
fn main() {
    println!("`mkdir a`");
    // Create a directory, returns `io::Result<()>`
    match fs::create_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(_) => {}
    }

    println!("`echo hello > a/b.txt`");
    // The previous match can be simplified using the `unwrap_or_else` method
    echo("hello", &Path::new("a/b.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`mkdir -p a/c/d`");
    // Recursively create a directory, returns `io::Result<()>`
    fs::create_dir_all("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`touch a/c/e.txt`");
    touch(&Path::new("a/c/e.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`ln -s ../b.txt a/c/b.txt`");
    // Create a symbolic link, returns `io::Result<()>`
    if cfg!(target_family = "unix") {
        unix::fs::symlink("../b.txt", "a/c/b.txt").unwrap_or_else(|why| {
            println!("! {:?}", why.kind());
        });
    }

    println!("`cat a/c/b.txt`");
    match cat(&Path::new("a/c/b.txt")) {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(s) => println!("> {}", s),
    }

    println!("`ls a`");
    // Read the contents of a directory, returns `io::Result<Vec<Path>>`
    match fs::read_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(paths) => {
            for path in paths {
                println!("> {:?}", path.unwrap().path());
            }
        }
    }

    println!("`rm a/c/e.txt`");
    // Remove a file, returns `io::Result<()>`
    fs::remove_file("a/c/e.txt").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`rmdir a/c/d`");
    // Remove an empty directory, returns `io::Result<()>`
    fs::remove_dir("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`mkdir a`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 :=
        M.get_function
          "std::fs::create_dir"
          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ] in
      let* α1 := M.read (mk_str "a") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 := M.alloc α2 in
      match_operator
        α3
        [
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Err"
                0 in
            let* why := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_v1" in
              let* α2 := M.read (mk_str "! ") in
              let* α3 := M.read (mk_str "
") in
              let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
              let* α5 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_debug" in
              let* α6 :=
                M.get_associated_function
                  (Ty.path "std::io::error::Error")
                  "kind" in
              let* α7 := M.call α6 [ why ] in
              let* α8 := M.alloc α7 in
              let* α9 := M.call α5 [ α8 ] in
              let* α10 := M.alloc (Value.Array [ α9 ]) in
              let* α11 :=
                M.call
                  α1
                  [
                    M.pointer_coercion (* Unsize *) α4;
                    M.pointer_coercion (* Unsize *) α10
                  ] in
              let* α12 := M.call α0 [ α11 ] in
              M.alloc α12 in
            M.alloc (Value.Tuple []));
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Ok"
                0 in
            M.alloc (Value.Tuple []))
        ] in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`echo hello > a/b.txt`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.tuple []; Ty.path "std::io::error::Error" ])
          "unwrap_or_else" in
      let* α1 := M.get_function "filesystem_operations::echo" [] in
      let* α2 := M.read (mk_str "hello") in
      let* α3 := M.get_associated_function (Ty.path "std::path::Path") "new" in
      let* α4 := M.read (mk_str "a/b.txt") in
      let* α5 := M.call α3 [ α4 ] in
      let* α6 := M.call α1 [ α2; α5 ] in
      let* α7 :=
        M.call
          α0
          [
            α6;
            fun α0 (* : Ty.path "std::io::error::Error" *) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.get_function "std::io::stdio::_print" [] in
                        let* α1 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::Arguments")
                            "new_v1" in
                        let* α2 := M.read (mk_str "! ") in
                        let* α3 := M.read (mk_str "
") in
                        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                        let* α5 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::rt::Argument")
                            "new_debug" in
                        let* α6 :=
                          M.get_associated_function
                            (Ty.path "std::io::error::Error")
                            "kind" in
                        let* α7 := M.call α6 [ why ] in
                        let* α8 := M.alloc α7 in
                        let* α9 := M.call α5 [ α8 ] in
                        let* α10 := M.alloc (Value.Array [ α9 ]) in
                        let* α11 :=
                          M.call
                            α1
                            [
                              M.pointer_coercion (* Unsize *) α4;
                              M.pointer_coercion (* Unsize *) α10
                            ] in
                        let* α12 := M.call α0 [ α11 ] in
                        M.alloc α12 in
                      M.alloc (Value.Tuple []) in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0)
                ])
          ] in
      M.alloc α7 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`mkdir -p a/c/d`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.tuple []; Ty.path "std::io::error::Error" ])
          "unwrap_or_else" in
      let* α1 :=
        M.get_function
          "std::fs::create_dir_all"
          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ] in
      let* α2 := M.read (mk_str "a/c/d") in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 :=
        M.call
          α0
          [
            α3;
            fun α0 (* : Ty.path "std::io::error::Error" *) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.get_function "std::io::stdio::_print" [] in
                        let* α1 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::Arguments")
                            "new_v1" in
                        let* α2 := M.read (mk_str "! ") in
                        let* α3 := M.read (mk_str "
") in
                        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                        let* α5 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::rt::Argument")
                            "new_debug" in
                        let* α6 :=
                          M.get_associated_function
                            (Ty.path "std::io::error::Error")
                            "kind" in
                        let* α7 := M.call α6 [ why ] in
                        let* α8 := M.alloc α7 in
                        let* α9 := M.call α5 [ α8 ] in
                        let* α10 := M.alloc (Value.Array [ α9 ]) in
                        let* α11 :=
                          M.call
                            α1
                            [
                              M.pointer_coercion (* Unsize *) α4;
                              M.pointer_coercion (* Unsize *) α10
                            ] in
                        let* α12 := M.call α0 [ α11 ] in
                        M.alloc α12 in
                      M.alloc (Value.Tuple []) in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0)
                ])
          ] in
      M.alloc α4 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`touch a/c/e.txt`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.tuple []; Ty.path "std::io::error::Error" ])
          "unwrap_or_else" in
      let* α1 := M.get_function "filesystem_operations::touch" [] in
      let* α2 := M.get_associated_function (Ty.path "std::path::Path") "new" in
      let* α3 := M.read (mk_str "a/c/e.txt") in
      let* α4 := M.call α2 [ α3 ] in
      let* α5 := M.call α1 [ α4 ] in
      let* α6 :=
        M.call
          α0
          [
            α5;
            fun α0 (* : Ty.path "std::io::error::Error" *) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.get_function "std::io::stdio::_print" [] in
                        let* α1 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::Arguments")
                            "new_v1" in
                        let* α2 := M.read (mk_str "! ") in
                        let* α3 := M.read (mk_str "
") in
                        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                        let* α5 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::rt::Argument")
                            "new_debug" in
                        let* α6 :=
                          M.get_associated_function
                            (Ty.path "std::io::error::Error")
                            "kind" in
                        let* α7 := M.call α6 [ why ] in
                        let* α8 := M.alloc α7 in
                        let* α9 := M.call α5 [ α8 ] in
                        let* α10 := M.alloc (Value.Array [ α9 ]) in
                        let* α11 :=
                          M.call
                            α1
                            [
                              M.pointer_coercion (* Unsize *) α4;
                              M.pointer_coercion (* Unsize *) α10
                            ] in
                        let* α12 := M.call α0 [ α11 ] in
                        M.alloc α12 in
                      M.alloc (Value.Tuple []) in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0)
                ])
          ] in
      M.alloc α6 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`ln -s ../b.txt a/c/b.txt`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 := M.alloc (Value.Bool true) in
      let* α1 := M.read (M.use α0) in
      if Value.is_true α1 then
        let* _ :=
          let* α0 :=
            M.get_associated_function
              (Ty.apply
                (Ty.path "core::result::Result")
                [ Ty.tuple []; Ty.path "std::io::error::Error" ])
              "unwrap_or_else" in
          let* α1 :=
            M.get_function
              "std::os::unix::fs::symlink"
              [
                Ty.apply (Ty.path "&") [ Ty.path "str" ];
                Ty.apply (Ty.path "&") [ Ty.path "str" ]
              ] in
          let* α2 := M.read (mk_str "../b.txt") in
          let* α3 := M.read (mk_str "a/c/b.txt") in
          let* α4 := M.call α1 [ α2; α3 ] in
          let* α5 :=
            M.call
              α0
              [
                α4;
                fun α0 (* : Ty.path "std::io::error::Error" *) =>
                  (let* α0 := M.alloc α0 in
                  match_operator
                    α0
                    [
                      fun γ =>
                        (let* why := M.copy γ in
                        let* _ :=
                          let* _ :=
                            let* α0 :=
                              M.get_function "std::io::stdio::_print" [] in
                            let* α1 :=
                              M.get_associated_function
                                (Ty.path "core::fmt::Arguments")
                                "new_v1" in
                            let* α2 := M.read (mk_str "! ") in
                            let* α3 := M.read (mk_str "
") in
                            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                            let* α5 :=
                              M.get_associated_function
                                (Ty.path "core::fmt::rt::Argument")
                                "new_debug" in
                            let* α6 :=
                              M.get_associated_function
                                (Ty.path "std::io::error::Error")
                                "kind" in
                            let* α7 := M.call α6 [ why ] in
                            let* α8 := M.alloc α7 in
                            let* α9 := M.call α5 [ α8 ] in
                            let* α10 := M.alloc (Value.Array [ α9 ]) in
                            let* α11 :=
                              M.call
                                α1
                                [
                                  M.pointer_coercion (* Unsize *) α4;
                                  M.pointer_coercion (* Unsize *) α10
                                ] in
                            let* α12 := M.call α0 [ α11 ] in
                            M.alloc α12 in
                          M.alloc (Value.Tuple []) in
                        let* α0 := M.alloc (Value.Tuple []) in
                        M.read α0)
                    ])
              ] in
          M.alloc α5 in
        M.alloc (Value.Tuple [])
      else
        M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`cat a/c/b.txt`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 := M.get_function "filesystem_operations::cat" [] in
      let* α1 := M.get_associated_function (Ty.path "std::path::Path") "new" in
      let* α2 := M.read (mk_str "a/c/b.txt") in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 := M.call α0 [ α3 ] in
      let* α5 := M.alloc α4 in
      match_operator
        α5
        [
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Err"
                0 in
            let* why := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_v1" in
              let* α2 := M.read (mk_str "! ") in
              let* α3 := M.read (mk_str "
") in
              let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
              let* α5 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_debug" in
              let* α6 :=
                M.get_associated_function
                  (Ty.path "std::io::error::Error")
                  "kind" in
              let* α7 := M.call α6 [ why ] in
              let* α8 := M.alloc α7 in
              let* α9 := M.call α5 [ α8 ] in
              let* α10 := M.alloc (Value.Array [ α9 ]) in
              let* α11 :=
                M.call
                  α1
                  [
                    M.pointer_coercion (* Unsize *) α4;
                    M.pointer_coercion (* Unsize *) α10
                  ] in
              let* α12 := M.call α0 [ α11 ] in
              M.alloc α12 in
            M.alloc (Value.Tuple []));
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Ok"
                0 in
            let* s := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_v1" in
              let* α2 := M.read (mk_str "> ") in
              let* α3 := M.read (mk_str "
") in
              let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
              let* α5 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display" in
              let* α6 := M.call α5 [ s ] in
              let* α7 := M.alloc (Value.Array [ α6 ]) in
              let* α8 :=
                M.call
                  α1
                  [
                    M.pointer_coercion (* Unsize *) α4;
                    M.pointer_coercion (* Unsize *) α7
                  ] in
              let* α9 := M.call α0 [ α8 ] in
              M.alloc α9 in
            M.alloc (Value.Tuple []))
        ] in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`ls a`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 :=
        M.get_function
          "std::fs::read_dir"
          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ] in
      let* α1 := M.read (mk_str "a") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 := M.alloc α2 in
      match_operator
        α3
        [
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Err"
                0 in
            let* why := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_v1" in
              let* α2 := M.read (mk_str "! ") in
              let* α3 := M.read (mk_str "
") in
              let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
              let* α5 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_debug" in
              let* α6 :=
                M.get_associated_function
                  (Ty.path "std::io::error::Error")
                  "kind" in
              let* α7 := M.call α6 [ why ] in
              let* α8 := M.alloc α7 in
              let* α9 := M.call α5 [ α8 ] in
              let* α10 := M.alloc (Value.Array [ α9 ]) in
              let* α11 :=
                M.call
                  α1
                  [
                    M.pointer_coercion (* Unsize *) α4;
                    M.pointer_coercion (* Unsize *) α10
                  ] in
              let* α12 := M.call α0 [ α11 ] in
              M.alloc α12 in
            M.alloc (Value.Tuple []));
          fun γ =>
            (let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Ok"
                0 in
            let* paths := M.copy γ0_0 in
            let* α0 :=
              M.get_trait_method
                "core::iter::traits::collect::IntoIterator"
                "into_iter"
                [ (* Self *) Ty.path "std::fs::ReadDir" ] in
            let* α1 := M.read paths in
            let* α2 := M.call α0 [ α1 ] in
            let* α3 := M.alloc α2 in
            let* α4 :=
              match_operator
                α3
                [
                  fun γ =>
                    (let* iter := M.copy γ in
                    M.loop
                      (let* _ :=
                        let* α0 :=
                          M.get_trait_method
                            "core::iter::traits::iterator::Iterator"
                            "next"
                            [ (* Self *) Ty.path "std::fs::ReadDir" ] in
                        let* α1 := M.call α0 [ iter ] in
                        let* α2 := M.alloc α1 in
                        match_operator
                          α2
                          [
                            fun γ =>
                              (let* α0 := M.break in
                              let* α1 := M.read α0 in
                              let* α2 := M.never_to_any α1 in
                              M.alloc α2);
                            fun γ =>
                              (let* γ0_0 :=
                                M.get_struct_tuple_field_or_break_match
                                  γ
                                  "core::option::Option::Some"
                                  0 in
                              let* path := M.copy γ0_0 in
                              let* _ :=
                                let* _ :=
                                  let* α0 :=
                                    M.get_function
                                      "std::io::stdio::_print"
                                      [] in
                                  let* α1 :=
                                    M.get_associated_function
                                      (Ty.path "core::fmt::Arguments")
                                      "new_v1" in
                                  let* α2 := M.read (mk_str "> ") in
                                  let* α3 := M.read (mk_str "
") in
                                  let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                                  let* α5 :=
                                    M.get_associated_function
                                      (Ty.path "core::fmt::rt::Argument")
                                      "new_debug" in
                                  let* α6 :=
                                    M.get_associated_function
                                      (Ty.path "std::fs::DirEntry")
                                      "path" in
                                  let* α7 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "std::fs::DirEntry";
                                          Ty.path "std::io::error::Error"
                                        ])
                                      "unwrap" in
                                  let* α8 := M.read path in
                                  let* α9 := M.call α7 [ α8 ] in
                                  let* α10 := M.alloc α9 in
                                  let* α11 := M.call α6 [ α10 ] in
                                  let* α12 := M.alloc α11 in
                                  let* α13 := M.call α5 [ α12 ] in
                                  let* α14 := M.alloc (Value.Array [ α13 ]) in
                                  let* α15 :=
                                    M.call
                                      α1
                                      [
                                        M.pointer_coercion (* Unsize *) α4;
                                        M.pointer_coercion (* Unsize *) α14
                                      ] in
                                  let* α16 := M.call α0 [ α15 ] in
                                  M.alloc α16 in
                                M.alloc (Value.Tuple []) in
                              M.alloc (Value.Tuple []))
                          ] in
                      M.alloc (Value.Tuple [])))
                ] in
            M.pure (M.use α4))
        ] in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`rm a/c/e.txt`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.tuple []; Ty.path "std::io::error::Error" ])
          "unwrap_or_else" in
      let* α1 :=
        M.get_function
          "std::fs::remove_file"
          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ] in
      let* α2 := M.read (mk_str "a/c/e.txt") in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 :=
        M.call
          α0
          [
            α3;
            fun α0 (* : Ty.path "std::io::error::Error" *) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.get_function "std::io::stdio::_print" [] in
                        let* α1 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::Arguments")
                            "new_v1" in
                        let* α2 := M.read (mk_str "! ") in
                        let* α3 := M.read (mk_str "
") in
                        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                        let* α5 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::rt::Argument")
                            "new_debug" in
                        let* α6 :=
                          M.get_associated_function
                            (Ty.path "std::io::error::Error")
                            "kind" in
                        let* α7 := M.call α6 [ why ] in
                        let* α8 := M.alloc α7 in
                        let* α9 := M.call α5 [ α8 ] in
                        let* α10 := M.alloc (Value.Array [ α9 ]) in
                        let* α11 :=
                          M.call
                            α1
                            [
                              M.pointer_coercion (* Unsize *) α4;
                              M.pointer_coercion (* Unsize *) α10
                            ] in
                        let* α12 := M.call α0 [ α11 ] in
                        M.alloc α12 in
                      M.alloc (Value.Tuple []) in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0)
                ])
          ] in
      M.alloc α4 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const" in
        let* α2 := M.read (mk_str "`rmdir a/c/d`
") in
        let* α3 := M.alloc (Value.Array [ α2 ]) in
        let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
        let* α5 := M.call α0 [ α4 ] in
        M.alloc α5 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.tuple []; Ty.path "std::io::error::Error" ])
          "unwrap_or_else" in
      let* α1 :=
        M.get_function
          "std::fs::remove_dir"
          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ] in
      let* α2 := M.read (mk_str "a/c/d") in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 :=
        M.call
          α0
          [
            α3;
            fun α0 (* : Ty.path "std::io::error::Error" *) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* why := M.copy γ in
                    let* _ :=
                      let* _ :=
                        let* α0 := M.get_function "std::io::stdio::_print" [] in
                        let* α1 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::Arguments")
                            "new_v1" in
                        let* α2 := M.read (mk_str "! ") in
                        let* α3 := M.read (mk_str "
") in
                        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                        let* α5 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::rt::Argument")
                            "new_debug" in
                        let* α6 :=
                          M.get_associated_function
                            (Ty.path "std::io::error::Error")
                            "kind" in
                        let* α7 := M.call α6 [ why ] in
                        let* α8 := M.alloc α7 in
                        let* α9 := M.call α5 [ α8 ] in
                        let* α10 := M.alloc (Value.Array [ α9 ]) in
                        let* α11 :=
                          M.call
                            α1
                            [
                              M.pointer_coercion (* Unsize *) α4;
                              M.pointer_coercion (* Unsize *) α10
                            ] in
                        let* α12 := M.call α0 [ α11 ] in
                        M.alloc α12 in
                      M.alloc (Value.Tuple []) in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0)
                ])
          ] in
      M.alloc α4 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
