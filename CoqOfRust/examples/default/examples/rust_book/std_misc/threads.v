(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NTHREADS : Ty.path "u32" :=
  M.run (M.alloc ((Integer.of_Z 10) : Ty.path "u32")).

(*
fn main() {
    // Make a vector to hold the children which are spawned.
    let mut children = vec![];

    for i in 0..NTHREADS {
        // Spin up another thread
        children.push(thread::spawn(move || {
            println!("this is thread number {}", i);
        }));
    }

    for child in children {
        // Wait for the thread to finish. Returns a result.
        let _ = child.join();
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* children :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply (Ty.path "std::thread::JoinHandle") [ Ty.tuple [] ];
                Ty.path "alloc::alloc::Global"
              ])::["new"]
          [] in
      M.alloc α0 in
    let* _ :=
      let* α0 :=
        M.get_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ]
          ] in
      let* α1 := M.var "threads::NTHREADS" in
      let* α2 := M.read α1 in
      let* α3 :=
        M.call
          α0
          [
            Value.StructRecord
              "core::ops::range::Range"
              [ ("start", (Integer.of_Z 0) : Ty.path "u32"); ("end_", α2) ]
          ] in
      let* α4 := M.alloc α3 in
      let* α5 :=
        match_operator
          α4
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ :=
                  let* α0 :=
                    M.get_method
                      "core::iter::traits::iterator::Iterator"
                      "next"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::ops::range::Range")
                            [ Ty.path "u32" ]
                      ] in
                  let* α1 := M.call α0 [ iter ] in
                  let* α2 := M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match 
                        end);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let* γ0_0 :=
                            let* α0 :=
                              M.var "core::option::Option::Get_Some_0" in
                            M.pure (α0 γ) in
                          let* i := M.copy γ0_0 in
                          let* _ :=
                            let* α0 := M.var "std::thread::spawn" in
                            let* α1 :=
                              M.call
                                α0
                                [
                                  fun (α0 : Ty.path "unit") =>
                                    (let* α0 := M.alloc α0 in
                                    match_operator
                                      α0
                                      [
                                        fun γ =>
                                          (let* _ :=
                                            let* _ :=
                                              let* α0 :=
                                                M.var
                                                  "std::io::stdio::_print" in
                                              let* α1 :=
                                                M.read
                                                  (mk_str
                                                    "this is thread number ") in
                                              let* α2 := M.read (mk_str "
") in
                                              let* α3 := M.alloc [ α1; α2 ] in
                                              let* α4 :=
                                                M.call
                                                  (Ty.path
                                                      "core::fmt::rt::Argument")::["new_display"]
                                                  [ i ] in
                                              let* α5 := M.alloc [ α4 ] in
                                              let* α6 :=
                                                M.call
                                                  (Ty.path
                                                      "core::fmt::Arguments")::["new_v1"]
                                                  [
                                                    pointer_coercion
                                                      "Unsize"
                                                      α3;
                                                    pointer_coercion "Unsize" α5
                                                  ] in
                                              let* α7 := M.call α0 [ α6 ] in
                                              M.alloc α7 in
                                            M.alloc tt in
                                          let* α0 := M.alloc tt in
                                          M.read α0)
                                      ])
                                ] in
                            let* α2 :=
                              M.call
                                (Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "std::thread::JoinHandle")
                                        [ Ty.tuple [] ];
                                      Ty.path "alloc::alloc::Global"
                                    ])::["push"]
                                [ children; α1 ] in
                            M.alloc α2 in
                          M.alloc tt
                        | _ => M.break_match 
                        end)
                    ] in
                M.alloc tt))
          ] in
      M.pure (use α5) in
    let* α0 :=
      M.get_method
        "core::iter::traits::collect::IntoIterator"
        "into_iter"
        [
          (* Self *)
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply (Ty.path "std::thread::JoinHandle") [ Ty.tuple [] ];
                Ty.path "alloc::alloc::Global"
              ]
        ] in
    let* α1 := M.read children in
    let* α2 := M.call α0 [ α1 ] in
    let* α3 := M.alloc α2 in
    let* α4 :=
      match_operator
        α3
        [
          fun γ =>
            (let* iter := M.copy γ in
            M.loop
              (let* _ :=
                let* α0 :=
                  M.get_method
                    "core::iter::traits::iterator::Iterator"
                    "next"
                    [
                      (* Self *)
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [
                            Ty.apply
                              (Ty.path "std::thread::JoinHandle")
                              [ Ty.tuple [] ];
                            Ty.path "alloc::alloc::Global"
                          ]
                    ] in
                let* α1 := M.call α0 [ iter ] in
                let* α2 := M.alloc α1 in
                match_operator
                  α2
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.None =>
                        let* α0 := M.break in
                        let* α1 := M.read α0 in
                        let* α2 := never_to_any α1 in
                        M.alloc α2
                      | _ => M.break_match 
                      end);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let* γ0_0 :=
                          let* α0 := M.var "core::option::Option::Get_Some_0" in
                          M.pure (α0 γ) in
                        let* child := M.copy γ0_0 in
                        let* α0 := M.read child in
                        let* α1 :=
                          M.call
                            (Ty.apply
                                (Ty.path "std::thread::JoinHandle")
                                [ Ty.tuple [] ])::["join"]
                            [ α0 ] in
                        let* α2 := M.alloc α1 in
                        match_operator α2 [ fun γ => (M.alloc tt) ]
                      | _ => M.break_match 
                      end)
                  ] in
              M.alloc tt))
        ] in
    M.read (use α4)
  | _, _ => M.impossible
  end.
