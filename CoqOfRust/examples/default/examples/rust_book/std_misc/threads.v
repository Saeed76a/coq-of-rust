(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NTHREADS : Ty.path "u32" :=
  M.run (M.alloc ((Integer.of_Z 10) : Ty.path "u32")).

(*
fn main() {
    // Make a vector to hold the children which are spawned.
    let mut children = vec![];

    for i in 0..NTHREADS {
        // Spin up another thread
        children.push(thread::spawn(move || {
            println!("this is thread number {}", i);
        }));
    }

    for child in children {
        // Wait for the thread to finish. Returns a result.
        let _ = child.join();
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* children :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
                Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"] in
      M.alloc α0 in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.function
            [Ty.apply (Ty.path "core::ops::range::Range") [Ty.path "u32"]]
            _ :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              Ty.apply (Ty.path "core::ops::range::Range") [Ty.path "u32"])
            (Trait := ℐ))) in
      let* α1 : Ty.path "u32" := M.read threads.NTHREADS in
      let* α2 : Ty.apply (Ty.path "core::ops::range::Range") [Ty.path "u32"] :=
        M.call
          (α0
            {|
              core.ops.range.Range.start := (Integer.of_Z 0) : Ty.path "u32";
              core.ops.range.Range.end_ := α1;
            |}) in
      let* α3 : Ty.apply (Ty.path "core::ops::range::Range") [Ty.path "u32"] :=
        M.alloc α2 in
      let* α4 : Ty.tuple :=
        match_operator
          α3
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ : Ty.tuple :=
                  let* α0 :
                      Ty.function
                        [Ty.apply
                            (Ty.path "mut_ref")
                            [Ty.apply
                                (Ty.path "core::ops::range::Range")
                                [Ty.path "u32"]]]
                        (Ty.apply (Ty.path "core::option::Option") [_]) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.iter.traits.iterator.Iterator.next
                        (Self :=
                          Ty.apply
                            (Ty.path "core::ops::range::Range")
                            [Ty.path "u32"])
                        (Trait := ℐ))) in
                  let* α1 :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "u32"] :=
                    M.call (α0 (borrow_mut iter)) in
                  let* α2 :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [Ty.path "u32"] :=
                    M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 : Ty.path "never" := M.break in
                          let* α1 : Ty.path "never" := M.read α0 in
                          let* α2 : Ty.tuple := never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match
                        end) :
                        Ty.tuple;
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let γ0_0 := core.option.Option.Get_Some_0 γ in
                          let* i := M.copy γ0_0 in
                          let* _ : Ty.tuple :=
                            let* α0 :
                                Ty.apply
                                  (Ty.path "std::thread::JoinHandle")
                                  [Ty.tuple] :=
                              M.call
                                (std.thread.spawn
                                  (fun (α0 : Ty.path "unit") =>
                                    (let* α0 := M.alloc α0 in
                                    match_operator
                                      α0
                                      [
                                        fun γ =>
                                          (let* _ : Ty.tuple :=
                                            let* _ : Ty.tuple :=
                                              let* α0 :
                                                  Ty.apply
                                                    (Ty.path "ref")
                                                    [Ty.path "str"] :=
                                                M.read
                                                  (mk_str
                                                    "this is thread number ") in
                                              let* α1 :
                                                  Ty.apply
                                                    (Ty.path "ref")
                                                    [Ty.path "str"] :=
                                                M.read (mk_str "
") in
                                              let* α2 :
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [Ty.apply
                                                        (Ty.path "ref")
                                                        [Ty.path "str"]] :=
                                                M.alloc [ α0; α1 ] in
                                              let* α3 :
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::fmt::rt::Argument")
                                                    [] :=
                                                M.call
                                                  ((Ty.apply
                                                        (Ty.path
                                                          "core::fmt::rt::Argument")
                                                        [])::["new_display"]
                                                    (borrow i)) in
                                              let* α4 :
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [Ty.apply
                                                        (Ty.path
                                                          "core::fmt::rt::Argument")
                                                        []] :=
                                                M.alloc [ α3 ] in
                                              let* α5 :
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::fmt::Arguments")
                                                    [] :=
                                                M.call
                                                  ((Ty.apply
                                                        (Ty.path
                                                          "core::fmt::Arguments")
                                                        [])::["new_v1"]
                                                    (pointer_coercion
                                                      "Unsize"
                                                      (borrow α2))
                                                    (pointer_coercion
                                                      "Unsize"
                                                      (borrow α4))) in
                                              let* α6 : Ty.tuple :=
                                                M.call
                                                  (std.io.stdio._print α5) in
                                              M.alloc α6 in
                                            M.alloc tt in
                                          let* α0 : Ty.path "unit" :=
                                            M.alloc tt in
                                          M.read α0) :
                                          Ty.tuple
                                      ]) :
                                    Ty.tuple)) in
                            let* α1 : Ty.tuple :=
                              M.call
                                ((Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [Ty.apply
                                          (Ty.path "std::thread::JoinHandle")
                                          [Ty.tuple];
                                        Ty.apply
                                          (Ty.path "alloc::alloc::Global")
                                          []])::["push"]
                                  (borrow_mut children)
                                  α0) in
                            M.alloc α1 in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        Ty.tuple
                    ] in
                M.alloc tt)) :
              Ty.tuple
          ] in
      M.pure (use α4) in
    let* α0 :
        Ty.function
          [Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
                Ty.apply (Ty.path "alloc::alloc::Global") []]]
          _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.collect.IntoIterator.into_iter
          (Self :=
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
                Ty.apply (Ty.path "alloc::alloc::Global") []])
          (Trait := ℐ))) in
    let* α1 :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      M.read children in
    let* α2 :
        Ty.apply
          (Ty.path "alloc::vec::into_iter::IntoIter")
          [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      M.call (α0 α1) in
    let* α3 :
        Ty.apply
          (Ty.path "alloc::vec::into_iter::IntoIter")
          [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      M.alloc α2 in
    let* α4 : Ty.tuple :=
      match_operator
        α3
        [
          fun γ =>
            (let* iter := M.copy γ in
            M.loop
              (let* _ : Ty.tuple :=
                let* α0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "mut_ref")
                          [Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [Ty.apply
                                  (Ty.path "std::thread::JoinHandle")
                                  [Ty.tuple];
                                Ty.apply (Ty.path "alloc::alloc::Global") []]]]
                      (Ty.apply (Ty.path "core::option::Option") [_]) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.iterator.Iterator.next
                      (Self :=
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [Ty.apply
                              (Ty.path "std::thread::JoinHandle")
                              [Ty.tuple];
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (Trait := ℐ))) in
                let* α1 :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [Ty.apply
                          (Ty.path "std::thread::JoinHandle")
                          [Ty.tuple]] :=
                  M.call (α0 (borrow_mut iter)) in
                let* α2 :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [Ty.apply
                          (Ty.path "std::thread::JoinHandle")
                          [Ty.tuple]] :=
                  M.alloc α1 in
                match_operator
                  α2
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.None =>
                        let* α0 : Ty.path "never" := M.break in
                        let* α1 : Ty.path "never" := M.read α0 in
                        let* α2 : Ty.tuple := never_to_any α1 in
                        M.alloc α2
                      | _ => M.break_match
                      end) :
                      Ty.tuple;
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* child := M.copy γ0_0 in
                        let* α0 :
                            Ty.apply
                              (Ty.path "std::thread::JoinHandle")
                              [Ty.tuple] :=
                          M.read child in
                        let* α1 :
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.tuple;
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [dyn [core.any.Any.Trait];
                                    Ty.apply
                                      (Ty.path "alloc::alloc::Global")
                                      []]] :=
                          M.call
                            ((Ty.apply
                                  (Ty.path "std::thread::JoinHandle")
                                  [Ty.tuple])::["join"]
                              α0) in
                        let* α2 :
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.tuple;
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [dyn [core.any.Any.Trait];
                                    Ty.apply
                                      (Ty.path "alloc::alloc::Global")
                                      []]] :=
                          M.alloc α1 in
                        match_operator
                          α2
                          [ fun γ => (M.alloc tt) : Ty.path "unit" ]
                      | _ => M.break_match
                      end) :
                      Ty.tuple
                  ] in
              M.alloc tt)) :
            Ty.tuple
        ] in
    M.read (use α4)
  | _, _ => M.impossible
  end.
