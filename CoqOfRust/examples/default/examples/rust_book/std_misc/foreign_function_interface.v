(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Error ForeignMod.

(*
fn cos(z: Complex) -> Complex {
    unsafe { ccosf(z) }
}
*)
Definition cos (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [z] =>
    let* z := M.alloc z in
    let* α0 : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
      M.read z in
    M.call (foreign_function_interface.ccosf α0)
  | _, _ => M.impossible
  end.

(*
fn main() {
    // z = -1 + 0i
    let z = Complex { re: -1., im: 0. };

    // calling a foreign function is an unsafe operation
    let z_sqrt = unsafe { csqrtf(z) };

    println!("the square root of {:?} is {:?}", z, z_sqrt);

    // calling safe API wrapped around unsafe operation
    println!("cos({:?}) = {:?}", z, cos(z));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* z : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
      let* α0 : Ty.path "f32" := M.read (UnsupportedLiteral : Ty.path "f32") in
      let* α1 : Ty.path "f32" := M.read (UnsupportedLiteral : Ty.path "f32") in
      M.alloc
        {|
          foreign_function_interface.Complex.re := α0;
          foreign_function_interface.Complex.im := α1;
        |} in
    let* z_sqrt : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
      let* α0 : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
        M.read z in
      let* α1 : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
        M.call (foreign_function_interface.csqrtf α0) in
      M.alloc α1 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "the square root of ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str " is ") in
        let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α3 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1; α2 ] in
        let* α4 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow z)) in
        let* α5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow z_sqrt)) in
        let* α6 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α4; α5 ] in
        let* α7 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α3))
              (pointer_coercion "Unsize" (borrow α6))) in
        let* α8 : Ty.tuple := M.call (std.io.stdio._print α7) in
        M.alloc α8 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "cos(") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str ") = ") in
        let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α3 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1; α2 ] in
        let* α4 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow z)) in
        let* α5 : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
          M.read z in
        let* α6 : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
          M.call (foreign_function_interface.cos α5) in
        let* α7 : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
          M.alloc α6 in
        let* α8 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow α7)) in
        let* α9 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α4; α8 ] in
        let* α10 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α3))
              (pointer_coercion "Unsize" (borrow α9))) in
        let* α11 : Ty.tuple := M.call (std.io.stdio._print α10) in
        M.alloc α11 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.



Module  Impl_core_clone_Clone_for_foreign_function_interface_Complex.
Section Impl_core_clone_Clone_for_foreign_function_interface_Complex.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "foreign_function_interface::Complex") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 : Ty.apply (Ty.path "foreign_function_interface::Complex") [] :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "f32"]))
          [
            fun γ =>
              (let* α0 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "foreign_function_interface::Complex")
                        []] :=
                M.read self in
              M.pure (deref α0)) :
              Ty.apply (Ty.path "foreign_function_interface::Complex") []
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_foreign_function_interface_Complex.
End Impl_core_clone_Clone_for_foreign_function_interface_Complex.

Module  Impl_core_marker_Copy_for_foreign_function_interface_Complex.
Section Impl_core_marker_Copy_for_foreign_function_interface_Complex.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "foreign_function_interface::Complex") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_foreign_function_interface_Complex.
End Impl_core_marker_Copy_for_foreign_function_interface_Complex.

Module  Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
Section Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "foreign_function_interface::Complex") [].
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          if self.im < 0. {
              write!(f, "{}-{}i", self.re, -self.im)
          } else {
              write!(f, "{}+{}i", self.re, self.im)
          }
      }
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "foreign_function_interface::Complex") []] :=
        M.read self in
      let* α1 : Ty.path "f32" :=
        M.read (foreign_function_interface.Complex.Get_im (deref α0)) in
      let* α2 : Ty.path "f32" := M.read (UnsupportedLiteral : Ty.path "f32") in
      let* α3 : Ty.path "bool" := M.alloc (BinOp.Pure.lt α1 α2) in
      let* α4 : Ty.path "bool" := M.read (use α3) in
      let* α5 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
        if α4 then
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
            M.read f in
          let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "") in
          let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "-") in
          let* α3 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "i") in
          let* α4 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
            M.alloc [ α1; α2; α3 ] in
          let* α5 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "foreign_function_interface::Complex") []] :=
            M.read self in
          let* α6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow
                  (foreign_function_interface.Complex.Get_re (deref α5)))) in
          let* α7 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "foreign_function_interface::Complex") []] :=
            M.read self in
          let* α8 : Ty.path "f32" :=
            M.read (foreign_function_interface.Complex.Get_im (deref α7)) in
          let* α9 : Ty.path "f32" := UnOp.neg α8 in
          let* α10 : Ty.path "f32" := M.alloc α9 in
          let* α11 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow α10)) in
          let* α12 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
            M.alloc [ α6; α11 ] in
          let* α13 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow α4))
                (pointer_coercion "Unsize" (borrow α12))) in
          let* α14 :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_fmt"]
                α0
                α13) in
          M.alloc α14
        else
          let* α0 :
              Ty.apply
                (Ty.path "mut_ref")
                [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
            M.read f in
          let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "") in
          let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "+") in
          let* α3 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "i") in
          let* α4 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
            M.alloc [ α1; α2; α3 ] in
          let* α5 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "foreign_function_interface::Complex") []] :=
            M.read self in
          let* α6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow
                  (foreign_function_interface.Complex.Get_re (deref α5)))) in
          let* α7 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "foreign_function_interface::Complex") []] :=
            M.read self in
          let* α8 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow
                  (foreign_function_interface.Complex.Get_im (deref α7)))) in
          let* α9 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
            M.alloc [ α6; α8 ] in
          let* α10 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow α4))
                (pointer_coercion "Unsize" (borrow α9))) in
          let* α11 :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_fmt"]
                α0
                α10) in
          M.alloc α11 in
      M.read α5
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
