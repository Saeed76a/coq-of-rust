(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Error ForeignMod.

(*
fn cos(z: Complex) -> Complex {
    unsafe { ccosf(z) }
}
*)
Definition cos (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [z] =>
    let* z := M.alloc z in
    let* Œ±0 := M.read z in
    M.call ((M.var "foreign_function_interface::ccosf") Œ±0)
  | _, _ => M.impossible
  end.

(*
fn main() {
    // z = -1 + 0i
    let z = Complex { re: -1., im: 0. };

    // calling a foreign function is an unsafe operation
    let z_sqrt = unsafe { csqrtf(z) };

    println!("the square root of {:?} is {:?}", z, z_sqrt);

    // calling safe API wrapped around unsafe operation
    println!("cos({:?}) = {:?}", z, cos(z));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* z :=
      let* Œ±0 := M.read (UnsupportedLiteral : Ty.path "f32") in
      let* Œ±1 := M.read (UnsupportedLiteral : Ty.path "f32") in
      M.alloc
        {|
          foreign_function_interface.Complex.re := Œ±0;
          foreign_function_interface.Complex.im := Œ±1;
        |} in
    let* z_sqrt :=
      let* Œ±0 := M.read z in
      let* Œ±1 := M.call ((M.var "foreign_function_interface::csqrtf") Œ±0) in
      M.alloc Œ±1 in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "the square root of ") in
        let* Œ±1 := M.read (mk_str " is ") in
        let* Œ±2 := M.read (mk_str "
") in
        let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
        let* Œ±4 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow z)) in
        let* Œ±5 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow z_sqrt)) in
        let* Œ±6 := M.alloc [ Œ±4; Œ±5 ] in
        let* Œ±7 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±3))
              (pointer_coercion "Unsize" (borrow Œ±6))) in
        let* Œ±8 := M.call ((M.var "std::io::stdio::_print") Œ±7) in
        M.alloc Œ±8 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "cos(") in
        let* Œ±1 := M.read (mk_str ") = ") in
        let* Œ±2 := M.read (mk_str "
") in
        let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
        let* Œ±4 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow z)) in
        let* Œ±5 := M.read z in
        let* Œ±6 := M.call ((M.var "foreign_function_interface::cos") Œ±5) in
        let* Œ±7 := M.alloc Œ±6 in
        let* Œ±8 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow Œ±7)) in
        let* Œ±9 := M.alloc [ Œ±4; Œ±8 ] in
        let* Œ±10 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±3))
              (pointer_coercion "Unsize" (borrow Œ±9))) in
        let* Œ±11 := M.call ((M.var "std::io::stdio::_print") Œ±10) in
        M.alloc Œ±11 in
      M.alloc tt in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.



Module  Impl_core_clone_Clone_for_foreign_function_interface_Complex.
Section Impl_core_clone_Clone_for_foreign_function_interface_Complex.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "foreign_function_interface::Complex") [].
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.path "f32"]))
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read self in
              M.pure (deref Œ±0)) :
              Ty.apply (Ty.path "foreign_function_interface::Complex") []
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ‚Ñê : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_foreign_function_interface_Complex.
End Impl_core_clone_Clone_for_foreign_function_interface_Complex.

Module  Impl_core_marker_Copy_for_foreign_function_interface_Complex.
Section Impl_core_marker_Copy_for_foreign_function_interface_Complex.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "foreign_function_interface::Complex") [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_Copy_for_foreign_function_interface_Complex.
End Impl_core_marker_Copy_for_foreign_function_interface_Complex.

Module  Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
Section Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "foreign_function_interface::Complex") [].
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          if self.im < 0. {
              write!(f, "{}-{}i", self.re, -self.im)
          } else {
              write!(f, "{}+{}i", self.re, self.im)
          }
      }
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read self in
      let* Œ±1 :=
        M.read
          ((M.var "foreign_function_interface::Complex::Get_im") (deref Œ±0)) in
      let* Œ±2 := M.read (UnsupportedLiteral : Ty.path "f32") in
      let* Œ±3 := M.alloc ((M.var "BinOp::Pure::lt") Œ±1 Œ±2) in
      let* Œ±4 := M.read (use Œ±3) in
      let* Œ±5 :=
        if Œ±4 then
          let* Œ±0 := M.read f in
          let* Œ±1 := M.read (mk_str "") in
          let* Œ±2 := M.read (mk_str "-") in
          let* Œ±3 := M.read (mk_str "i") in
          let* Œ±4 := M.alloc [ Œ±1; Œ±2; Œ±3 ] in
          let* Œ±5 := M.read self in
          let* Œ±6 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow
                  ((M.var "foreign_function_interface::Complex::Get_re")
                    (deref Œ±5)))) in
          let* Œ±7 := M.read self in
          let* Œ±8 :=
            M.read
              ((M.var "foreign_function_interface::Complex::Get_im")
                (deref Œ±7)) in
          let* Œ±9 := (M.var "UnOp::neg") Œ±8 in
          let* Œ±10 := M.alloc Œ±9 in
          let* Œ±11 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow Œ±10)) in
          let* Œ±12 := M.alloc [ Œ±6; Œ±11 ] in
          let* Œ±13 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±4))
                (pointer_coercion "Unsize" (borrow Œ±12))) in
          let* Œ±14 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_fmt"]
                Œ±0
                Œ±13) in
          M.alloc Œ±14
        else
          let* Œ±0 := M.read f in
          let* Œ±1 := M.read (mk_str "") in
          let* Œ±2 := M.read (mk_str "+") in
          let* Œ±3 := M.read (mk_str "i") in
          let* Œ±4 := M.alloc [ Œ±1; Œ±2; Œ±3 ] in
          let* Œ±5 := M.read self in
          let* Œ±6 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow
                  ((M.var "foreign_function_interface::Complex::Get_re")
                    (deref Œ±5)))) in
          let* Œ±7 := M.read self in
          let* Œ±8 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow
                  ((M.var "foreign_function_interface::Complex::Get_im")
                    (deref Œ±7)))) in
          let* Œ±9 := M.alloc [ Œ±6; Œ±8 ] in
          let* Œ±10 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±4))
                (pointer_coercion "Unsize" (borrow Œ±9))) in
          let* Œ±11 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_fmt"]
                Œ±0
                Œ±10) in
          M.alloc Œ±11 in
      M.read Œ±5
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
