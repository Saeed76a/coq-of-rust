(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Create a `Path` from an `&'static str`
    let path = Path::new(".");

    // The `display` method returns a `Display`able structure
    let _display = path.display();

    // `join` merges a path with a byte container using the OS specific
    // separator, and returns a `PathBuf`
    let mut new_path = path.join("a").join("b");

    // `push` extends the `PathBuf` with a `&Path`
    new_path.push("c");
    new_path.push("myfile.tar.gz");

    // `set_file_name` updates the file name of the `PathBuf`
    new_path.set_file_name("package.tgz");

    // Convert the `PathBuf` into a string slice
    match new_path.to_str() {
        None => panic!("new path is not a valid UTF-8 sequence"),
        Some(s) => println!("new path is {}", s),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* path :=
      let* α0 := M.read (mk_str ".") in
      let* α1 := M.call (Ty.path "std::path::Path")::["new"] [ α0 ] in
      M.alloc α1 in
    let* _display :=
      let* α0 := M.read path in
      let* α1 := M.call (Ty.path "std::path::Path")::["display"] [ α0 ] in
      M.alloc α1 in
    let* new_path :=
      let* α0 :=
        M.get_method
          "core::ops::deref::Deref"
          "deref"
          [ (* Self *) Ty.path "std::path::PathBuf" ] in
      let* α1 := M.read path in
      let* α2 := M.read (mk_str "a") in
      let* α3 := M.call (Ty.path "std::path::Path")::["join"] [ α1; α2 ] in
      let* α4 := M.alloc α3 in
      let* α5 := M.call α0 [ α4 ] in
      let* α6 := M.read (mk_str "b") in
      let* α7 := M.call (Ty.path "std::path::Path")::["join"] [ α5; α6 ] in
      M.alloc α7 in
    let* _ :=
      let* α0 := M.read (mk_str "c") in
      let* α1 :=
        M.call (Ty.path "std::path::PathBuf")::["push"] [ new_path; α0 ] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.read (mk_str "myfile.tar.gz") in
      let* α1 :=
        M.call (Ty.path "std::path::PathBuf")::["push"] [ new_path; α0 ] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.read (mk_str "package.tgz") in
      let* α1 :=
        M.call
          (Ty.path "std::path::PathBuf")::["set_file_name"]
          [ new_path; α0 ] in
      M.alloc α1 in
    let* α0 :=
      M.get_method
        "core::ops::deref::Deref"
        "deref"
        [ (* Self *) Ty.path "std::path::PathBuf" ] in
    let* α1 := M.call α0 [ new_path ] in
    let* α2 := M.call (Ty.path "std::path::Path")::["to_str"] [ α1 ] in
    let* α3 := M.alloc α2 in
    let* α0 :=
      match_operator
        α3
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.None =>
              let* α0 := M.var "std::panicking::begin_panic" in
              let* α1 :=
                M.read (mk_str "new path is not a valid UTF-8 sequence") in
              let* α2 := M.call α0 [ α1 ] in
              let* α3 := never_to_any α2 in
              M.alloc α3
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::option::Option::Get_Some_0" in
                M.pure (α0 γ) in
              let* s := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "new path is ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ s ] in
                let* α5 := M.alloc [ α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [ pointer_coercion "Unsize" α3; pointer_coercion "Unsize" α5
                    ] in
                let* α7 := M.call α0 [ α6 ] in
                M.alloc α7 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple []
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
