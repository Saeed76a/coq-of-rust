(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Create a `Path` from an `&'static str`
    let path = Path::new(".");

    // The `display` method returns a `Display`able structure
    let _display = path.display();

    // `join` merges a path with a byte container using the OS specific
    // separator, and returns a `PathBuf`
    let mut new_path = path.join("a").join("b");

    // `push` extends the `PathBuf` with a `&Path`
    new_path.push("c");
    new_path.push("myfile.tar.gz");

    // `set_file_name` updates the file name of the `PathBuf`
    new_path.set_file_name("package.tgz");

    // Convert the `PathBuf` into a string slice
    match new_path.to_str() {
        None => panic!("new path is not a valid UTF-8 sequence"),
        Some(s) => println!("new path is {}", s),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* path :
        Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str ".") in
      let* α1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
        M.call ((Ty.apply (Ty.path "std::path::Path") [])::["new"] α0) in
      M.alloc α1 in
    let* _display : Ty.apply (Ty.path "std::path::Display") [] :=
      let* α0 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
        M.read path in
      let* α1 : Ty.apply (Ty.path "std::path::Display") [] :=
        M.call ((Ty.apply (Ty.path "std::path::Path") [])::["display"] α0) in
      M.alloc α1 in
    let* new_path : Ty.apply (Ty.path "std::path::PathBuf") [] :=
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "std::path::PathBuf") []]]
            (Ty.apply (Ty.path "ref") [_]) :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.deref.Deref.deref
            (Self := Ty.apply (Ty.path "std::path::PathBuf") [])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
        M.read path in
      let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "a") in
      let* α3 : Ty.apply (Ty.path "std::path::PathBuf") [] :=
        M.call ((Ty.apply (Ty.path "std::path::Path") [])::["join"] α1 α2) in
      let* α4 : Ty.apply (Ty.path "std::path::PathBuf") [] := M.alloc α3 in
      let* α5 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
        M.call (α0 (borrow α4)) in
      let* α6 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "b") in
      let* α7 : Ty.apply (Ty.path "std::path::PathBuf") [] :=
        M.call ((Ty.apply (Ty.path "std::path::Path") [])::["join"] α5 α6) in
      M.alloc α7 in
    let* _ : Ty.tuple :=
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "c") in
      let* α1 : Ty.tuple :=
        M.call
          ((Ty.apply (Ty.path "std::path::PathBuf") [])::["push"]
            (borrow_mut new_path)
            α0) in
      M.alloc α1 in
    let* _ : Ty.tuple :=
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "myfile.tar.gz") in
      let* α1 : Ty.tuple :=
        M.call
          ((Ty.apply (Ty.path "std::path::PathBuf") [])::["push"]
            (borrow_mut new_path)
            α0) in
      M.alloc α1 in
    let* _ : Ty.tuple :=
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "package.tgz") in
      let* α1 : Ty.tuple :=
        M.call
          ((Ty.apply (Ty.path "std::path::PathBuf") [])::["set_file_name"]
            (borrow_mut new_path)
            α0) in
      M.alloc α1 in
    let* α0 :
        Ty.function
          [Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "std::path::PathBuf") []]]
          (Ty.apply (Ty.path "ref") [_]) :=
      ltac:(M.get_method (fun ℐ =>
        core.ops.deref.Deref.deref
          (Self := Ty.apply (Ty.path "std::path::PathBuf") [])
          (Trait := ℐ))) in
    let* α1 :
        Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "std::path::Path") []] :=
      M.call (α0 (borrow new_path)) in
    let* α2 :
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
      M.call ((Ty.apply (Ty.path "std::path::Path") [])::["to_str"] α1) in
    let* α3 :
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
      M.alloc α2 in
    let* α0 : Ty.tuple :=
      match_operator
        α3
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.None =>
              let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.read (mk_str "new path is not a valid UTF-8 sequence") in
              let* α1 : Ty.path "never" :=
                M.call (std.panicking.begin_panic α0) in
              let* α2 : Ty.tuple := never_to_any α1 in
              M.alloc α2
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let γ0_0 := core.option.Option.Get_Some_0 γ in
              let* s := M.copy γ0_0 in
              let* _ : Ty.tuple :=
                let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "new path is ") in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* α2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ α0; α1 ] in
                let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow s)) in
                let* α4 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ α3 ] in
                let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                M.alloc α6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
