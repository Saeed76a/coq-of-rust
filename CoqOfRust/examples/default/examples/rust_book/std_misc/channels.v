(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NTHREADS : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
  M.run
    (let* Œ±0 : Ty.path "i32" := M.alloc ((Integer.of_Z 3) : Ty.path "i32") in
    M.alloc Œ±0).

(*
fn main() {
    // Channels have two endpoints: the `Sender<T>` and the `Receiver<T>`,
    // where `T` is the type of the message to be transferred
    // (type annotation is superfluous)
    let (tx, rx): (Sender<i32>, Receiver<i32>) = mpsc::channel();
    let mut children = Vec::new();

    for id in 0..NTHREADS {
        // The sender endpoint can be copied
        let thread_tx = tx.clone();

        // Each thread will send its id via the channel
        let child = thread::spawn(move || {
            // The thread takes ownership over `thread_tx`
            // Each thread queues a message in the channel
            thread_tx.send(id).unwrap();

            // Sending is a non-blocking operation, the thread will continue
            // immediately after sending its message
            println!("thread {} finished", id);
        });

        children.push(child);
    }

    // Here, all the messages are collected
    let mut ids = Vec::with_capacity(NTHREADS as usize);
    for _ in 0..NTHREADS {
        // The `recv` method picks a message from the channel
        // `recv` will block the current thread if there are no messages available
        ids.push(rx.recv());
    }

    // Wait for the threads to complete any remaining work
    for child in children {
        child.join().expect("oops! the child thread panicked");
    }

    // Show the order in which the messages were sent
    println!("{:?}", ids);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* Œ±0 :
        Ty.tuple
          (Ty.apply (Ty.path "std::sync::mpsc::Sender") [Ty.path "i32"])
          (Ty.apply (Ty.path "std::sync::mpsc::Receiver") [Ty.path "i32"]) :=
      M.call std.sync.mpsc.channel in
    let* Œ±1 :
        Ty.tuple
          (Ty.apply (Ty.path "std::sync::mpsc::Sender") [Ty.path "i32"])
          (Ty.apply (Ty.path "std::sync::mpsc::Receiver") [Ty.path "i32"]) :=
      M.alloc Œ±0 in
    let* Œ±2 : Ty.tuple :=
      match_operator
        Œ±1
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* tx := M.copy Œ≥0_0 in
              let* rx := M.copy Œ≥0_1 in
              let* children :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
                      Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                let* Œ±0 :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.call
                    (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.apply
                            (Ty.path "std::thread::JoinHandle")
                            [Ty.tuple];
                          Ty.apply
                            (Ty.path "alloc::alloc::Global")
                            []])::["new"] in
                M.alloc Œ±0 in
              let* _ : Ty.tuple :=
                let* Œ±0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "core::ops::range::Range")
                          [Ty.path "i32"]]
                      _ :=
                  ltac:(M.get_method (fun ‚Ñê =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        Ty.apply
                          (Ty.path "core::ops::range::Range")
                          [Ty.path "i32"])
                      (Trait := ‚Ñê))) in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
                  M.read channels.NTHREADS in
                let* Œ±2 : Ty.path "i32" := M.read (deref Œ±1) in
                let* Œ±3 :
                    Ty.apply
                      (Ty.path "core::ops::range::Range")
                      [Ty.path "i32"] :=
                  M.call
                    (Œ±0
                      {|
                        core.ops.range.Range.start :=
                          (Integer.of_Z 0) : Ty.path "i32";
                        core.ops.range.Range.end_ := Œ±2;
                      |}) in
                let* Œ±4 :
                    Ty.apply
                      (Ty.path "core::ops::range::Range")
                      [Ty.path "i32"] :=
                  M.alloc Œ±3 in
                let* Œ±5 : Ty.tuple :=
                  match_operator
                    Œ±4
                    [
                      fun Œ≥ =>
                        (let* iter := M.copy Œ≥ in
                        M.loop
                          (let* _ : Ty.tuple :=
                            let* Œ±0 :
                                Ty.function
                                  [Ty.apply
                                      (Ty.path "mut_ref")
                                      [Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [Ty.path "i32"]]]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [_]) :=
                              ltac:(M.get_method (fun ‚Ñê =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [Ty.path "i32"])
                                  (Trait := ‚Ñê))) in
                            let* Œ±1 :
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [Ty.path "i32"] :=
                              M.call (Œ±0 (borrow_mut iter)) in
                            let* Œ±2 :
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [Ty.path "i32"] :=
                              M.alloc Œ±1 in
                            match_operator
                              Œ±2
                              [
                                fun Œ≥ =>
                                  (let* Œ±0 := M.read Œ≥ in
                                  match Œ±0 with
                                  | core.option.Option.None =>
                                    let* Œ±0 : Ty.path "never" := M.break in
                                    let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                                    let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                                    M.alloc Œ±2
                                  | _ => M.break_match
                                  end) :
                                  Ty.tuple;
                                fun Œ≥ =>
                                  (let* Œ±0 := M.read Œ≥ in
                                  match Œ±0 with
                                  | core.option.Option.Some _ =>
                                    let Œ≥0_0 :=
                                      core.option.Option.Get_Some_0 Œ≥ in
                                    let* id := M.copy Œ≥0_0 in
                                    let* thread_tx :
                                        Ty.apply
                                          (Ty.path "std::sync::mpsc::Sender")
                                          [Ty.path "i32"] :=
                                      let* Œ±0 :
                                          Ty.function
                                            [Ty.apply
                                                (Ty.path "ref")
                                                [Ty.apply
                                                    (Ty.path
                                                      "std::sync::mpsc::Sender")
                                                    [Ty.path "i32"]]]
                                            (Ty.apply
                                              (Ty.path
                                                "std::sync::mpsc::Sender")
                                              [Ty.path "i32"]) :=
                                        ltac:(M.get_method (fun ‚Ñê =>
                                          core.clone.Clone.clone
                                            (Self :=
                                              Ty.apply
                                                (Ty.path
                                                  "std::sync::mpsc::Sender")
                                                [Ty.path "i32"])
                                            (Trait := ‚Ñê))) in
                                      let* Œ±1 :
                                          Ty.apply
                                            (Ty.path "std::sync::mpsc::Sender")
                                            [Ty.path "i32"] :=
                                        M.call (Œ±0 (borrow tx)) in
                                      M.alloc Œ±1 in
                                    let* child :
                                        Ty.apply
                                          (Ty.path "std::thread::JoinHandle")
                                          [Ty.tuple] :=
                                      let* Œ±0 :
                                          Ty.apply
                                            (Ty.path "std::thread::JoinHandle")
                                            [Ty.tuple] :=
                                        M.call
                                          (std.thread.spawn
                                            (fun (Œ±0 : Ty.path "unit") =>
                                              (let* Œ±0 := M.alloc Œ±0 in
                                              match_operator
                                                Œ±0
                                                [
                                                  fun Œ≥ =>
                                                    (let* _ : Ty.tuple :=
                                                      let* Œ±0 : Ty.path "i32" :=
                                                        M.read id in
                                                      let* Œ±1 :
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::result::Result")
                                                            [Ty.tuple;
                                                              Ty.apply
                                                                (Ty.path
                                                                  "std::sync::mpsc::SendError")
                                                                [Ty.path
                                                                    "i32"]] :=
                                                        M.call
                                                          ((Ty.apply
                                                                (Ty.path
                                                                  "std::sync::mpsc::Sender")
                                                                [Ty.path
                                                                    "i32"])::["send"]
                                                            (borrow thread_tx)
                                                            Œ±0) in
                                                      let* Œ±2 : Ty.tuple :=
                                                        M.call
                                                          ((Ty.apply
                                                                (Ty.path
                                                                  "core::result::Result")
                                                                [Ty.tuple;
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "std::sync::mpsc::SendError")
                                                                    [Ty.path
                                                                        "i32"]])::["unwrap"]
                                                            Œ±1) in
                                                      M.alloc Œ±2 in
                                                    let* _ : Ty.tuple :=
                                                      let* _ : Ty.tuple :=
                                                        let* Œ±0 :
                                                            Ty.apply
                                                              (Ty.path "ref")
                                                              [Ty.path "str"] :=
                                                          M.read
                                                            (mk_str
                                                              "thread ") in
                                                        let* Œ±1 :
                                                            Ty.apply
                                                              (Ty.path "ref")
                                                              [Ty.path "str"] :=
                                                          M.read
                                                            (mk_str
                                                              " finished
") in
                                                        let* Œ±2 :
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [Ty.apply
                                                                  (Ty.path
                                                                    "ref")
                                                                  [Ty.path
                                                                      "str"]] :=
                                                          M.alloc [ Œ±0; Œ±1 ] in
                                                        let* Œ±3 :
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::fmt::rt::Argument")
                                                              [] :=
                                                          M.call
                                                            ((Ty.apply
                                                                  (Ty.path
                                                                    "core::fmt::rt::Argument")
                                                                  [])::["new_display"]
                                                              (borrow id)) in
                                                        let* Œ±4 :
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [Ty.apply
                                                                  (Ty.path
                                                                    "core::fmt::rt::Argument")
                                                                  []] :=
                                                          M.alloc [ Œ±3 ] in
                                                        let* Œ±5 :
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::fmt::Arguments")
                                                              [] :=
                                                          M.call
                                                            ((Ty.apply
                                                                  (Ty.path
                                                                    "core::fmt::Arguments")
                                                                  [])::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow Œ±2))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow Œ±4))) in
                                                        let* Œ±6 : Ty.tuple :=
                                                          M.call
                                                            (std.io.stdio._print
                                                              Œ±5) in
                                                        M.alloc Œ±6 in
                                                      M.alloc tt in
                                                    let* Œ±0 : Ty.path "unit" :=
                                                      M.alloc tt in
                                                    M.read Œ±0) :
                                                    Ty.tuple
                                                ]) :
                                              Ty.tuple)) in
                                      M.alloc Œ±0 in
                                    let* _ : Ty.tuple :=
                                      let* Œ±0 :
                                          Ty.apply
                                            (Ty.path "std::thread::JoinHandle")
                                            [Ty.tuple] :=
                                        M.read child in
                                      let* Œ±1 : Ty.tuple :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [Ty.apply
                                                    (Ty.path
                                                      "std::thread::JoinHandle")
                                                    [Ty.tuple];
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::alloc::Global")
                                                    []])::["push"]
                                            (borrow_mut children)
                                            Œ±0) in
                                      M.alloc Œ±1 in
                                    M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  Ty.tuple
                              ] in
                          M.alloc tt)) :
                        Ty.tuple
                    ] in
                M.pure (use Œ±5) in
              let* ids :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.path "i32";
                          Ty.apply (Ty.path "std::sync::mpsc::RecvError") []];
                      Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
                  M.read channels.NTHREADS in
                let* Œ±1 : Ty.path "i32" := M.read (deref Œ±0) in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply (Ty.path "std::sync::mpsc::RecvError") []];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "std::sync::mpsc::RecvError")
                                  []];
                            Ty.apply
                              (Ty.path "alloc::alloc::Global")
                              []])::["with_capacity"]
                      (rust_cast Œ±1)) in
                M.alloc Œ±2 in
              let* _ : Ty.tuple :=
                let* Œ±0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "core::ops::range::Range")
                          [Ty.path "i32"]]
                      _ :=
                  ltac:(M.get_method (fun ‚Ñê =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        Ty.apply
                          (Ty.path "core::ops::range::Range")
                          [Ty.path "i32"])
                      (Trait := ‚Ñê))) in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
                  M.read channels.NTHREADS in
                let* Œ±2 : Ty.path "i32" := M.read (deref Œ±1) in
                let* Œ±3 :
                    Ty.apply
                      (Ty.path "core::ops::range::Range")
                      [Ty.path "i32"] :=
                  M.call
                    (Œ±0
                      {|
                        core.ops.range.Range.start :=
                          (Integer.of_Z 0) : Ty.path "i32";
                        core.ops.range.Range.end_ := Œ±2;
                      |}) in
                let* Œ±4 :
                    Ty.apply
                      (Ty.path "core::ops::range::Range")
                      [Ty.path "i32"] :=
                  M.alloc Œ±3 in
                let* Œ±5 : Ty.tuple :=
                  match_operator
                    Œ±4
                    [
                      fun Œ≥ =>
                        (let* iter := M.copy Œ≥ in
                        M.loop
                          (let* _ : Ty.tuple :=
                            let* Œ±0 :
                                Ty.function
                                  [Ty.apply
                                      (Ty.path "mut_ref")
                                      [Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [Ty.path "i32"]]]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [_]) :=
                              ltac:(M.get_method (fun ‚Ñê =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [Ty.path "i32"])
                                  (Trait := ‚Ñê))) in
                            let* Œ±1 :
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [Ty.path "i32"] :=
                              M.call (Œ±0 (borrow_mut iter)) in
                            let* Œ±2 :
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [Ty.path "i32"] :=
                              M.alloc Œ±1 in
                            match_operator
                              Œ±2
                              [
                                fun Œ≥ =>
                                  (let* Œ±0 := M.read Œ≥ in
                                  match Œ±0 with
                                  | core.option.Option.None =>
                                    let* Œ±0 : Ty.path "never" := M.break in
                                    let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                                    let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                                    M.alloc Œ±2
                                  | _ => M.break_match
                                  end) :
                                  Ty.tuple;
                                fun Œ≥ =>
                                  (let* Œ±0 := M.read Œ≥ in
                                  match Œ±0 with
                                  | core.option.Option.Some _ =>
                                    let Œ≥0_0 :=
                                      core.option.Option.Get_Some_0 Œ≥ in
                                    let* _ : Ty.tuple :=
                                      let* Œ±0 :
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [Ty.path "i32";
                                              Ty.apply
                                                (Ty.path
                                                  "std::sync::mpsc::RecvError")
                                                []] :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path
                                                  "std::sync::mpsc::Receiver")
                                                [Ty.path "i32"])::["recv"]
                                            (borrow rx)) in
                                      let* Œ±1 : Ty.tuple :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [Ty.apply
                                                    (Ty.path
                                                      "core::result::Result")
                                                    [Ty.path "i32";
                                                      Ty.apply
                                                        (Ty.path
                                                          "std::sync::mpsc::RecvError")
                                                        []];
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::alloc::Global")
                                                    []])::["push"]
                                            (borrow_mut ids)
                                            Œ±0) in
                                      M.alloc Œ±1 in
                                    M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  Ty.tuple
                              ] in
                          M.alloc tt)) :
                        Ty.tuple
                    ] in
                M.pure (use Œ±5) in
              let* _ : Ty.tuple :=
                let* Œ±0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.apply
                              (Ty.path "std::thread::JoinHandle")
                              [Ty.tuple];
                            Ty.apply (Ty.path "alloc::alloc::Global") []]]
                      _ :=
                  ltac:(M.get_method (fun ‚Ñê =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.apply
                              (Ty.path "std::thread::JoinHandle")
                              [Ty.tuple];
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (Trait := ‚Ñê))) in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.read children in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.call (Œ±0 Œ±1) in
                let* Œ±3 :
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      [Ty.apply (Ty.path "std::thread::JoinHandle") [Ty.tuple];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.alloc Œ±2 in
                let* Œ±4 : Ty.tuple :=
                  match_operator
                    Œ±3
                    [
                      fun Œ≥ =>
                        (let* iter := M.copy Œ≥ in
                        M.loop
                          (let* _ : Ty.tuple :=
                            let* Œ±0 :
                                Ty.function
                                  [Ty.apply
                                      (Ty.path "mut_ref")
                                      [Ty.apply
                                          (Ty.path
                                            "alloc::vec::into_iter::IntoIter")
                                          [Ty.apply
                                              (Ty.path
                                                "std::thread::JoinHandle")
                                              [Ty.tuple];
                                            Ty.apply
                                              (Ty.path "alloc::alloc::Global")
                                              []]]]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [_]) :=
                              ltac:(M.get_method (fun ‚Ñê =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    Ty.apply
                                      (Ty.path
                                        "alloc::vec::into_iter::IntoIter")
                                      [Ty.apply
                                          (Ty.path "std::thread::JoinHandle")
                                          [Ty.tuple];
                                        Ty.apply
                                          (Ty.path "alloc::alloc::Global")
                                          []])
                                  (Trait := ‚Ñê))) in
                            let* Œ±1 :
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [Ty.apply
                                      (Ty.path "std::thread::JoinHandle")
                                      [Ty.tuple]] :=
                              M.call (Œ±0 (borrow_mut iter)) in
                            let* Œ±2 :
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [Ty.apply
                                      (Ty.path "std::thread::JoinHandle")
                                      [Ty.tuple]] :=
                              M.alloc Œ±1 in
                            match_operator
                              Œ±2
                              [
                                fun Œ≥ =>
                                  (let* Œ±0 := M.read Œ≥ in
                                  match Œ±0 with
                                  | core.option.Option.None =>
                                    let* Œ±0 : Ty.path "never" := M.break in
                                    let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                                    let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                                    M.alloc Œ±2
                                  | _ => M.break_match
                                  end) :
                                  Ty.tuple;
                                fun Œ≥ =>
                                  (let* Œ±0 := M.read Œ≥ in
                                  match Œ±0 with
                                  | core.option.Option.Some _ =>
                                    let Œ≥0_0 :=
                                      core.option.Option.Get_Some_0 Œ≥ in
                                    let* child := M.copy Œ≥0_0 in
                                    let* _ : Ty.tuple :=
                                      let* Œ±0 :
                                          Ty.apply
                                            (Ty.path "std::thread::JoinHandle")
                                            [Ty.tuple] :=
                                        M.read child in
                                      let* Œ±1 :
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [Ty.tuple;
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                [dyn [core.any.Any.Trait];
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::alloc::Global")
                                                    []]] :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path
                                                  "std::thread::JoinHandle")
                                                [Ty.tuple])::["join"]
                                            Œ±0) in
                                      let* Œ±2 :
                                          Ty.apply
                                            (Ty.path "ref")
                                            [Ty.path "str"] :=
                                        M.read
                                          (mk_str
                                            "oops! the child thread panicked") in
                                      let* Œ±3 : Ty.tuple :=
                                        M.call
                                          ((Ty.apply
                                                (Ty.path "core::result::Result")
                                                [Ty.tuple;
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::boxed::Box")
                                                    [dyn [core.any.Any.Trait];
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::alloc::Global")
                                                        []]])::["expect"]
                                            Œ±1
                                            Œ±2) in
                                      M.alloc Œ±3 in
                                    M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  Ty.tuple
                              ] in
                          M.alloc tt)) :
                        Ty.tuple
                    ] in
                M.pure (use Œ±4) in
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "") in
                  let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "
") in
                  let* Œ±2 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ Œ±0; Œ±1 ] in
                  let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_debug"]
                        (borrow ids)) in
                  let* Œ±4 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                    M.alloc [ Œ±3 ] in
                  let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow Œ±2))
                        (pointer_coercion "Unsize" (borrow Œ±4))) in
                  let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
                  M.alloc Œ±6 in
                M.alloc tt in
              M.alloc tt
            end) :
            Ty.path "unit"
        ] in
    M.read Œ±2
  | _, _ => M.impossible
  end.
