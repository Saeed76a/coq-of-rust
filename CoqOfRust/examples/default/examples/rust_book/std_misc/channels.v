(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NTHREADS : Value.t :=
  M.run
    (let* α0 := M.alloc (Value.Integer Integer.I32 3) in
    M.alloc α0).

(*
fn main() {
    // Channels have two endpoints: the `Sender<T>` and the `Receiver<T>`,
    // where `T` is the type of the message to be transferred
    // (type annotation is superfluous)
    let (tx, rx): (Sender<i32>, Receiver<i32>) = mpsc::channel();
    let mut children = Vec::new();

    for id in 0..NTHREADS {
        // The sender endpoint can be copied
        let thread_tx = tx.clone();

        // Each thread will send its id via the channel
        let child = thread::spawn(move || {
            // The thread takes ownership over `thread_tx`
            // Each thread queues a message in the channel
            thread_tx.send(id).unwrap();

            // Sending is a non-blocking operation, the thread will continue
            // immediately after sending its message
            println!("thread {} finished", id);
        });

        children.push(child);
    }

    // Here, all the messages are collected
    let mut ids = Vec::with_capacity(NTHREADS as usize);
    for _ in 0..NTHREADS {
        // The `recv` method picks a message from the channel
        // `recv` will block the current thread if there are no messages available
        ids.push(rx.recv());
    }

    // Wait for the threads to complete any remaining work
    for child in children {
        child.join().expect("oops! the child thread panicked");
    }

    // Show the order in which the messages were sent
    println!("{:?}", ids);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* α0 := M.get_function "std::sync::mpsc::channel" [ Ty.path "i32" ] in
    let* α1 := M.call α0 [] in
    let* α2 := M.alloc α1 in
    let* α3 :=
      match_operator
        α2
        [
          fun γ =>
            (let* γ0_0 := M.get_tuple_field_or_break_match γ 0 in
            let* γ0_1 := M.get_tuple_field_or_break_match γ 1 in
            let* tx := M.copy γ0_0 in
            let* rx := M.copy γ0_1 in
            let* children :=
              let* α0 :=
                M.get_associated_function
                  (Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "std::thread::JoinHandle")
                        [ Ty.tuple [] ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  "new" in
              let* α1 := M.call α0 [] in
              M.alloc α1 in
            let* _ :=
              let* α0 :=
                M.get_trait_method
                  "core::iter::traits::collect::IntoIterator"
                  "into_iter"
                  [
                    (* Self *)
                      Ty.apply
                        (Ty.path "core::ops::range::Range")
                        [ Ty.path "i32" ]
                  ] in
              let* α1 := M.var "channels::NTHREADS" in
              let* α2 := M.read α1 in
              let* α3 := M.read α2 in
              let* α4 :=
                M.call
                  α0
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [ ("start", Value.Integer Integer.I32 0); ("end_", α3) ]
                  ] in
              let* α5 := M.alloc α4 in
              let* α6 :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* iter := M.copy γ in
                      M.loop
                        (let* _ :=
                          let* α0 :=
                            M.get_trait_method
                              "core::iter::traits::iterator::Iterator"
                              "next"
                              [
                                (* Self *)
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    [ Ty.path "i32" ]
                              ] in
                          let* α1 := M.call α0 [ iter ] in
                          let* α2 := M.alloc α1 in
                          match_operator
                            α2
                            [
                              fun γ =>
                                (let* α0 := M.break in
                                let* α1 := M.read α0 in
                                let* α2 := M.never_to_any α1 in
                                M.alloc α2);
                              fun γ =>
                                (let* γ0_0 :=
                                  M.get_struct_tuple_field_or_break_match
                                    γ
                                    "core::option::Option::Some"
                                    0 in
                                let* id := M.copy γ0_0 in
                                let* thread_tx :=
                                  let* α0 :=
                                    M.get_trait_method
                                      "core::clone::Clone"
                                      "clone"
                                      [
                                        (* Self *)
                                          Ty.apply
                                            (Ty.path "std::sync::mpsc::Sender")
                                            [ Ty.path "i32" ]
                                      ] in
                                  let* α1 := M.call α0 [ tx ] in
                                  M.alloc α1 in
                                let* child :=
                                  let* α0 :=
                                    M.get_function
                                      "std::thread::spawn"
                                      [
                                        Ty.function
                                          [ Ty.tuple [] ]
                                          (Ty.tuple []);
                                        Ty.tuple []
                                      ] in
                                  let* α1 :=
                                    M.call
                                      α0
                                      [
                                        fun α0 (* : Ty.path "unit" *) =>
                                          (let* α0 := M.alloc α0 in
                                          match_operator
                                            α0
                                            [
                                              fun γ =>
                                                (let* _ :=
                                                  let* α0 :=
                                                    M.get_associated_function
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.apply
                                                            (Ty.path
                                                              "std::sync::mpsc::SendError")
                                                            [ Ty.path "i32" ]
                                                        ])
                                                      "unwrap" in
                                                  let* α1 :=
                                                    M.get_associated_function
                                                      (Ty.apply
                                                        (Ty.path
                                                          "std::sync::mpsc::Sender")
                                                        [ Ty.path "i32" ])
                                                      "send" in
                                                  let* α2 := M.read id in
                                                  let* α3 :=
                                                    M.call
                                                      α1
                                                      [ thread_tx; α2 ] in
                                                  let* α4 := M.call α0 [ α3 ] in
                                                  M.alloc α4 in
                                                let* _ :=
                                                  let* _ :=
                                                    let* α0 :=
                                                      M.get_function
                                                        "std::io::stdio::_print"
                                                        [] in
                                                    let* α1 :=
                                                      M.get_associated_function
                                                        (Ty.path
                                                          "core::fmt::Arguments")
                                                        "new_v1" in
                                                    let* α2 :=
                                                      M.read
                                                        (mk_str "thread ") in
                                                    let* α3 :=
                                                      M.read
                                                        (mk_str " finished
") in
                                                    let* α4 :=
                                                      M.alloc
                                                        (Value.Array
                                                          [ α2; α3 ]) in
                                                    let* α5 :=
                                                      M.get_associated_function
                                                        (Ty.path
                                                          "core::fmt::rt::Argument")
                                                        "new_display" in
                                                    let* α6 :=
                                                      M.call α5 [ id ] in
                                                    let* α7 :=
                                                      M.alloc
                                                        (Value.Array [ α6 ]) in
                                                    let* α8 :=
                                                      M.call
                                                        α1
                                                        [
                                                          M.pointer_coercion
                                                            (* Unsize *)
                                                            α4;
                                                          M.pointer_coercion
                                                            (* Unsize *)
                                                            α7
                                                        ] in
                                                    let* α9 :=
                                                      M.call α0 [ α8 ] in
                                                    M.alloc α9 in
                                                  M.alloc (Value.Tuple []) in
                                                let* α0 :=
                                                  M.alloc (Value.Tuple []) in
                                                M.read α0)
                                            ])
                                      ] in
                                  M.alloc α1 in
                                let* _ :=
                                  let* α0 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "std::thread::JoinHandle")
                                            [ Ty.tuple [] ];
                                          Ty.path "alloc::alloc::Global"
                                        ])
                                      "push" in
                                  let* α1 := M.read child in
                                  let* α2 := M.call α0 [ children; α1 ] in
                                  M.alloc α2 in
                                M.alloc (Value.Tuple []))
                            ] in
                        M.alloc (Value.Tuple [])))
                  ] in
              M.pure (M.use α6) in
            let* ids :=
              let* α0 :=
                M.get_associated_function
                  (Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [ Ty.path "i32"; Ty.path "std::sync::mpsc::RecvError" ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  "with_capacity" in
              let* α1 := M.var "channels::NTHREADS" in
              let* α2 := M.read α1 in
              let* α3 := M.read α2 in
              let* α4 := M.call α0 [ M.rust_cast α3 ] in
              M.alloc α4 in
            let* _ :=
              let* α0 :=
                M.get_trait_method
                  "core::iter::traits::collect::IntoIterator"
                  "into_iter"
                  [
                    (* Self *)
                      Ty.apply
                        (Ty.path "core::ops::range::Range")
                        [ Ty.path "i32" ]
                  ] in
              let* α1 := M.var "channels::NTHREADS" in
              let* α2 := M.read α1 in
              let* α3 := M.read α2 in
              let* α4 :=
                M.call
                  α0
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [ ("start", Value.Integer Integer.I32 0); ("end_", α3) ]
                  ] in
              let* α5 := M.alloc α4 in
              let* α6 :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* iter := M.copy γ in
                      M.loop
                        (let* _ :=
                          let* α0 :=
                            M.get_trait_method
                              "core::iter::traits::iterator::Iterator"
                              "next"
                              [
                                (* Self *)
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    [ Ty.path "i32" ]
                              ] in
                          let* α1 := M.call α0 [ iter ] in
                          let* α2 := M.alloc α1 in
                          match_operator
                            α2
                            [
                              fun γ =>
                                (let* α0 := M.break in
                                let* α1 := M.read α0 in
                                let* α2 := M.never_to_any α1 in
                                M.alloc α2);
                              fun γ =>
                                (let* γ0_0 :=
                                  M.get_struct_tuple_field_or_break_match
                                    γ
                                    "core::option::Option::Some"
                                    0 in
                                let* _ :=
                                  let* α0 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "i32";
                                              Ty.path
                                                "std::sync::mpsc::RecvError"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ])
                                      "push" in
                                  let* α1 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "std::sync::mpsc::Receiver")
                                        [ Ty.path "i32" ])
                                      "recv" in
                                  let* α2 := M.call α1 [ rx ] in
                                  let* α3 := M.call α0 [ ids; α2 ] in
                                  M.alloc α3 in
                                M.alloc (Value.Tuple []))
                            ] in
                        M.alloc (Value.Tuple [])))
                  ] in
              M.pure (M.use α6) in
            let* _ :=
              let* α0 :=
                M.get_trait_method
                  "core::iter::traits::collect::IntoIterator"
                  "into_iter"
                  [
                    (* Self *)
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "std::thread::JoinHandle")
                            [ Ty.tuple [] ];
                          Ty.path "alloc::alloc::Global"
                        ]
                  ] in
              let* α1 := M.read children in
              let* α2 := M.call α0 [ α1 ] in
              let* α3 := M.alloc α2 in
              let* α4 :=
                match_operator
                  α3
                  [
                    fun γ =>
                      (let* iter := M.copy γ in
                      M.loop
                        (let* _ :=
                          let* α0 :=
                            M.get_trait_method
                              "core::iter::traits::iterator::Iterator"
                              "next"
                              [
                                (* Self *)
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    [
                                      Ty.apply
                                        (Ty.path "std::thread::JoinHandle")
                                        [ Ty.tuple [] ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                              ] in
                          let* α1 := M.call α0 [ iter ] in
                          let* α2 := M.alloc α1 in
                          match_operator
                            α2
                            [
                              fun γ =>
                                (let* α0 := M.break in
                                let* α1 := M.read α0 in
                                let* α2 := M.never_to_any α1 in
                                M.alloc α2);
                              fun γ =>
                                (let* γ0_0 :=
                                  M.get_struct_tuple_field_or_break_match
                                    γ
                                    "core::option::Option::Some"
                                    0 in
                                let* child := M.copy γ0_0 in
                                let* _ :=
                                  let* α0 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.tuple [];
                                          Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            [
                                              Ty.dyn
                                                [ ("core::any::Any::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ])
                                      "expect" in
                                  let* α1 :=
                                    M.get_associated_function
                                      (Ty.apply
                                        (Ty.path "std::thread::JoinHandle")
                                        [ Ty.tuple [] ])
                                      "join" in
                                  let* α2 := M.read child in
                                  let* α3 := M.call α1 [ α2 ] in
                                  let* α4 :=
                                    M.read
                                      (mk_str
                                        "oops! the child thread panicked") in
                                  let* α5 := M.call α0 [ α3; α4 ] in
                                  M.alloc α5 in
                                M.alloc (Value.Tuple []))
                            ] in
                        M.alloc (Value.Tuple [])))
                  ] in
              M.pure (M.use α4) in
            let* _ :=
              let* _ :=
                let* α0 := M.get_function "std::io::stdio::_print" [] in
                let* α1 :=
                  M.get_associated_function
                    (Ty.path "core::fmt::Arguments")
                    "new_v1" in
                let* α2 := M.read (mk_str "") in
                let* α3 := M.read (mk_str "
") in
                let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                let* α5 :=
                  M.get_associated_function
                    (Ty.path "core::fmt::rt::Argument")
                    "new_debug" in
                let* α6 := M.call α5 [ ids ] in
                let* α7 := M.alloc (Value.Array [ α6 ]) in
                let* α8 :=
                  M.call
                    α1
                    [
                      M.pointer_coercion (* Unsize *) α4;
                      M.pointer_coercion (* Unsize *) α7
                    ] in
                let* α9 := M.call α0 [ α8 ] in
                M.alloc α9 in
              M.alloc (Value.Tuple []) in
            M.alloc (Value.Tuple []))
        ] in
    M.read α3
  | _, _ => M.impossible
  end.
