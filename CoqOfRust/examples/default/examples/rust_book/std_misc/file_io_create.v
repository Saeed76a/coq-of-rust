(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition LOREM_IPSUM
    : Ty.apply (Ty.path "ref") [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ] :=
  M.run
    (M.alloc
      (mk_str
        "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
")).

(*
fn main() {
    let path = Path::new("lorem_ipsum.txt");
    let display = path.display();

    // Open a file in write-only mode, returns `io::Result<File>`
    let mut file = match File::create(&path) {
        Err(why) => panic!("couldn't create {}: {}", display, why),
        Ok(file) => file,
    };

    // Write the `LOREM_IPSUM` string to `file`, returns `io::Result<()>`
    match file.write_all(LOREM_IPSUM.as_bytes()) {
        Err(why) => panic!("couldn't write to {}: {}", display, why),
        Ok(_) => println!("successfully wrote to {}", display),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* path :=
      let* α0 := M.read (mk_str "lorem_ipsum.txt") in
      let* α1 := M.call (Ty.path "std::path::Path")::["new"] [ α0 ] in
      M.alloc α1 in
    let* display :=
      let* α0 := M.read path in
      let* α1 := M.call (Ty.path "std::path::Path")::["display"] [ α0 ] in
      M.alloc α1 in
    let* file :=
      let* α0 := M.call (Ty.path "std::fs::File")::["create"] [ borrow path ] in
      let* α1 := M.alloc α0 in
      let* α2 :=
        match_operator
          α1
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Err _ =>
                let γ0_0 := (M.var "core::result::Result::Get_Err_0") γ in
                let* why := M.copy γ0_0 in
                let* α0 := M.read (mk_str "couldn't create ") in
                let* α1 := M.read (mk_str ": ") in
                let* α2 := M.alloc [ α0; α1 ] in
                let* α3 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow display ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow why ] in
                let* α5 := M.alloc [ α3; α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α2);
                      pointer_coercion "Unsize" (borrow α5)
                    ] in
                let* α7 := M.call (M.var "core::panicking::panic_fmt") [ α6 ] in
                let* α8 := never_to_any α7 in
                M.alloc α8
              | _ => M.break_match 
              end) :
              Ty.path "std::fs::File";
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Ok _ =>
                let γ0_0 := (M.var "core::result::Result::Get_Ok_0") γ in
                let* file := M.copy γ0_0 in
                M.pure file
              | _ => M.break_match 
              end) :
              Ty.path "std::fs::File"
          ] in
      M.copy α2 in
    let* α0 :=
      M.get_method
        "std::io::Write"
        "write_all"
        [ (* Self *) Ty.path "std::fs::File" ] in
    let* α1 := M.read (M.var "file_io_create::LOREM_IPSUM") in
    let* α2 := M.read (deref α1) in
    let* α3 := M.call (Ty.path "str")::["as_bytes"] [ α2 ] in
    let* α4 := M.call α0 [ borrow_mut file; α3 ] in
    let* α5 := M.alloc α4 in
    let* α0 :=
      match_operator
        α5
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Err _ =>
              let γ0_0 := (M.var "core::result::Result::Get_Err_0") γ in
              let* why := M.copy γ0_0 in
              let* α0 := M.read (mk_str "couldn't write to ") in
              let* α1 := M.read (mk_str ": ") in
              let* α2 := M.alloc [ α0; α1 ] in
              let* α3 :=
                M.call
                  (Ty.path "core::fmt::rt::Argument")::["new_display"]
                  [ borrow display ] in
              let* α4 :=
                M.call
                  (Ty.path "core::fmt::rt::Argument")::["new_display"]
                  [ borrow why ] in
              let* α5 := M.alloc [ α3; α4 ] in
              let* α6 :=
                M.call
                  (Ty.path "core::fmt::Arguments")::["new_v1"]
                  [
                    pointer_coercion "Unsize" (borrow α2);
                    pointer_coercion "Unsize" (borrow α5)
                  ] in
              let* α7 := M.call (M.var "core::panicking::panic_fmt") [ α6 ] in
              let* α8 := never_to_any α7 in
              M.alloc α8
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Ok _ =>
              let γ0_0 := (M.var "core::result::Result::Get_Ok_0") γ in
              let* _ :=
                let* α0 := M.read (mk_str "successfully wrote to ") in
                let* α1 := M.read (mk_str "
") in
                let* α2 := M.alloc [ α0; α1 ] in
                let* α3 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow display ] in
                let* α4 := M.alloc [ α3 ] in
                let* α5 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α2);
                      pointer_coercion "Unsize" (borrow α4)
                    ] in
                let* α6 := M.call (M.var "std::io::stdio::_print") [ α5 ] in
                M.alloc α6 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple []
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
