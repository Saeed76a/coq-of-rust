(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn foo<A>(o: Option<A>) {
    match o {
        Some(_a) => println!("some"),
        None => println!("nothing"),
    }
}
*)
Definition foo (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [ A ], [ o ] =>
    let* o := M.alloc o in
    let* α0 :=
      match_operator
        o
        [
          fun γ =>
            let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::option::Option::Some"
                0 in
            let* _a := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const" in
              let* α2 := M.read (mk_str "some
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
              let* α5 := M.call α0 [ α4 ] in
              M.alloc α5 in
            M.alloc (Value.Tuple []);
          fun γ =>
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const" in
              let* α2 := M.read (mk_str "nothing
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
              let* α5 := M.call α0 [ α4 ] in
              M.alloc α5 in
            M.alloc (Value.Tuple [])
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

Module tests.
  (*
      fn test_file() {
          // Opens the file ferris.txt or creates one if it doesn't exist.
          let mut file = OpenOptions::new()
              .append(true)
              .create(true)
              .open("ferris.txt")
              .expect("Failed to open ferris.txt");
  
          // Print "Ferris" 5 times.
          for _ in 0..5 {
              file.write_all("Ferris\n".as_bytes())
                  .expect("Could not write to ferris.txt");
          }
      }
  *)
  Definition test_file (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* file :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.path "std::fs::File"; Ty.path "std::io::error::Error" ])
            "expect" in
        let* α1 :=
          M.get_associated_function (Ty.path "std::fs::OpenOptions") "open" in
        let* α2 :=
          M.get_associated_function (Ty.path "std::fs::OpenOptions") "create" in
        let* α3 :=
          M.get_associated_function (Ty.path "std::fs::OpenOptions") "append" in
        let* α4 :=
          M.get_associated_function (Ty.path "std::fs::OpenOptions") "new" in
        let* α5 := M.call α4 [] in
        let* α6 := M.alloc α5 in
        let* α7 := M.call α3 [ α6; Value.Bool true ] in
        let* α8 := M.call α2 [ α7; Value.Bool true ] in
        let* α9 := M.read (mk_str "ferris.txt") in
        let* α10 := M.call α1 [ α8; α9 ] in
        let* α11 := M.read (mk_str "Failed to open ferris.txt") in
        let* α12 := M.call α0 [ α10; α11 ] in
        M.alloc α12 in
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "i32" ]
          ] in
      let* α1 :=
        M.call
          α0
          [
            Value.StructRecord
              "core::ops::range::Range"
              [
                ("start", Value.Integer Integer.I32 0);
                ("end_", Value.Integer Integer.I32 5)
              ]
          ] in
      let* α2 := M.alloc α1 in
      let* α3 :=
        match_operator
          α2
          [
            fun γ =>
              let* iter := M.copy γ in
              M.loop
                (let* _ :=
                  let* α0 :=
                    M.get_trait_method
                      "core::iter::traits::iterator::Iterator"
                      "next"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::ops::range::Range")
                            [ Ty.path "i32" ]
                      ] in
                  let* α1 := M.call α0 [ iter ] in
                  let* α2 := M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        let* α0 := M.break in
                        let* α1 := M.read α0 in
                        let* α2 := M.never_to_any α1 in
                        M.alloc α2;
                      fun γ =>
                        let* γ0_0 :=
                          M.get_struct_tuple_field_or_break_match
                            γ
                            "core::option::Option::Some"
                            0 in
                        let* _ :=
                          let* α0 :=
                            M.get_associated_function
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.path "std::io::error::Error"
                                ])
                              "expect" in
                          let* α1 :=
                            M.get_trait_method
                              "std::io::Write"
                              "write_all"
                              [ (* Self *) Ty.path "std::fs::File" ] in
                          let* α2 :=
                            M.get_associated_function
                              (Ty.path "str")
                              "as_bytes" in
                          let* α3 := M.read (mk_str "Ferris
") in
                          let* α4 := M.call α2 [ α3 ] in
                          let* α5 := M.call α1 [ file; α4 ] in
                          let* α6 :=
                            M.read (mk_str "Could not write to ferris.txt") in
                          let* α7 := M.call α0 [ α5; α6 ] in
                          M.alloc α7 in
                        M.alloc (Value.Tuple [])
                    ] in
                M.alloc (Value.Tuple []))
          ] in
      M.read (M.use α3)
    | _, _ => M.impossible
    end.
  
  (*
      fn test_file_also() {
          // Opens the file ferris.txt or creates one if it doesn't exist.
          let mut file = OpenOptions::new()
              .append(true)
              .create(true)
              .open("ferris.txt")
              .expect("Failed to open ferris.txt");
  
          // Print "Corro" 5 times.
          for _ in 0..5 {
              file.write_all("Corro\n".as_bytes())
                  .expect("Could not write to ferris.txt");
          }
      }
  *)
  Definition test_file_also (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [] =>
      let* file :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.path "std::fs::File"; Ty.path "std::io::error::Error" ])
            "expect" in
        let* α1 :=
          M.get_associated_function (Ty.path "std::fs::OpenOptions") "open" in
        let* α2 :=
          M.get_associated_function (Ty.path "std::fs::OpenOptions") "create" in
        let* α3 :=
          M.get_associated_function (Ty.path "std::fs::OpenOptions") "append" in
        let* α4 :=
          M.get_associated_function (Ty.path "std::fs::OpenOptions") "new" in
        let* α5 := M.call α4 [] in
        let* α6 := M.alloc α5 in
        let* α7 := M.call α3 [ α6; Value.Bool true ] in
        let* α8 := M.call α2 [ α7; Value.Bool true ] in
        let* α9 := M.read (mk_str "ferris.txt") in
        let* α10 := M.call α1 [ α8; α9 ] in
        let* α11 := M.read (mk_str "Failed to open ferris.txt") in
        let* α12 := M.call α0 [ α10; α11 ] in
        M.alloc α12 in
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "i32" ]
          ] in
      let* α1 :=
        M.call
          α0
          [
            Value.StructRecord
              "core::ops::range::Range"
              [
                ("start", Value.Integer Integer.I32 0);
                ("end_", Value.Integer Integer.I32 5)
              ]
          ] in
      let* α2 := M.alloc α1 in
      let* α3 :=
        match_operator
          α2
          [
            fun γ =>
              let* iter := M.copy γ in
              M.loop
                (let* _ :=
                  let* α0 :=
                    M.get_trait_method
                      "core::iter::traits::iterator::Iterator"
                      "next"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::ops::range::Range")
                            [ Ty.path "i32" ]
                      ] in
                  let* α1 := M.call α0 [ iter ] in
                  let* α2 := M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        let* α0 := M.break in
                        let* α1 := M.read α0 in
                        let* α2 := M.never_to_any α1 in
                        M.alloc α2;
                      fun γ =>
                        let* γ0_0 :=
                          M.get_struct_tuple_field_or_break_match
                            γ
                            "core::option::Option::Some"
                            0 in
                        let* _ :=
                          let* α0 :=
                            M.get_associated_function
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.path "std::io::error::Error"
                                ])
                              "expect" in
                          let* α1 :=
                            M.get_trait_method
                              "std::io::Write"
                              "write_all"
                              [ (* Self *) Ty.path "std::fs::File" ] in
                          let* α2 :=
                            M.get_associated_function
                              (Ty.path "str")
                              "as_bytes" in
                          let* α3 := M.read (mk_str "Corro
") in
                          let* α4 := M.call α2 [ α3 ] in
                          let* α5 := M.call α1 [ file; α4 ] in
                          let* α6 :=
                            M.read (mk_str "Could not write to ferris.txt") in
                          let* α7 := M.call α0 [ α5; α6 ] in
                          M.alloc α7 in
                        M.alloc (Value.Tuple [])
                    ] in
                M.alloc (Value.Tuple []))
          ] in
      M.read (M.use α3)
    | _, _ => M.impossible
    end.
End tests.
