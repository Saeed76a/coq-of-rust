(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // In general, the `{}` will be automatically replaced with any
    // arguments. These will be stringified.
    println!("{} days", 31);

    // Positional arguments can be used. Specifying an integer inside `{}`
    // determines which additional argument will be replaced. Arguments start
    // at 0 immediately after the format string
    println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");

    // As can named arguments.
    println!(
        "{subject} {verb} {object}",
        object = "the lazy dog",
        subject = "the quick brown fox",
        verb = "jumps over"
    );

    // Different formatting can be invoked by specifying the format character after a
    // `:`.
    println!("Base 10:               {}", 69420); //69420
    println!("Base 2 (binary):       {:b}", 69420); //10000111100101100
    println!("Base 8 (octal):        {:o}", 69420); //207454
    println!("Base 16 (hexadecimal): {:x}", 69420); //10f2c
    println!("Base 16 (hexadecimal): {:X}", 69420); //10F2C

    // You can right-justify text with a specified width. This will
    // output "    1". (Four white spaces and a "1", for a total width of 5.)
    println!("{number:>5}", number = 1);

    // You can pad numbers with extra zeroes,
    //and left-adjust by flipping the sign. This will output "10000".
    println!("{number:0<5}", number = 1);

    // You can use named arguments in the format specifier by appending a `$`
    println!("{number:0>width$}", number = 1, width = 5);

    // Rust even checks to make sure the correct number of arguments are
    // used.
    println!("My name is {0}, {1} {0}", "Bond", "James");
    // FIXME ^ Add the missing argument: "James"

    // Only types that implement fmt::Display can be formatted with `{}`. User-
    // defined types do not implement fmt::Display by default

    #[allow(dead_code)]
    struct Structure(i32);

    // This will not compile because `Structure` does not implement
    // fmt::Display
    //println!("This struct `{}` won't print...", Structure(3));
    // TODO ^ Try uncommenting this line

    // For Rust 1.58 and above, you can directly capture the argument from a
    // surrounding variable. Just like the above, this will output
    // "    1". 4 white spaces and a "1".
    let number: f64 = 1.0;
    let width: usize = 5;
    println!("{number:>width$}");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "31 days
") in
        let* α1 := M.alloc [ α0 ] in
        let* α2 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] in
        let* α3 := M.alloc α2 in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α1))
              (pointer_coercion "Unsize" (borrow α3))) in
        let* α5 := M.call ((M.var "std::io::stdio::_print") α4) in
        M.alloc α5 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Alice, this is Bob. Bob, this is Alice
") in
        let* α1 := M.alloc [ α0 ] in
        let* α2 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] in
        let* α3 := M.alloc α2 in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α1))
              (pointer_coercion "Unsize" (borrow α3))) in
        let* α5 := M.call ((M.var "std::io::stdio::_print") α4) in
        M.alloc α5 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 :=
          M.read (mk_str "the quick brown fox jumps over the lazy dog
") in
        let* α1 := M.alloc [ α0 ] in
        let* α2 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] in
        let* α3 := M.alloc α2 in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α1))
              (pointer_coercion "Unsize" (borrow α3))) in
        let* α5 := M.call ((M.var "std::io::stdio::_print") α4) in
        M.alloc α5 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Base 10:               69420
") in
        let* α1 := M.alloc [ α0 ] in
        let* α2 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] in
        let* α3 := M.alloc α2 in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α1))
              (pointer_coercion "Unsize" (borrow α3))) in
        let* α5 := M.call ((M.var "std::io::stdio::_print") α4) in
        M.alloc α5 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Base 2 (binary):       ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.alloc ((Integer.of_Z 69420) : Ty.path "i32") in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_binary"] (borrow α3)) in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α5))) in
        let* α7 := M.call ((M.var "std::io::stdio::_print") α6) in
        M.alloc α7 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Base 8 (octal):        ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.alloc ((Integer.of_Z 69420) : Ty.path "i32") in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_octal"] (borrow α3)) in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α5))) in
        let* α7 := M.call ((M.var "std::io::stdio::_print") α6) in
        M.alloc α7 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Base 16 (hexadecimal): ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.alloc ((Integer.of_Z 69420) : Ty.path "i32") in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_lower_hex"]
              (borrow α3)) in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α5))) in
        let* α7 := M.call ((M.var "std::io::stdio::_print") α6) in
        M.alloc α7 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Base 16 (hexadecimal): ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.alloc ((Integer.of_Z 69420) : Ty.path "i32") in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_upper_hex"]
              (borrow α3)) in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α5))) in
        let* α7 := M.call ((M.var "std::io::stdio::_print") α6) in
        M.alloc α7 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow α3)) in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::rt::Placeholder")::["new"]
              ((Integer.of_Z 0) : Ty.path "usize")
              " "%char
              core.fmt.rt.Alignment.Right
              ((Integer.of_Z 0) : Ty.path "u32")
              core.fmt.rt.Count.Implied
              (core.fmt.rt.Count.Is ((Integer.of_Z 5) : Ty.path "usize"))) in
        let* α7 := M.alloc [ α6 ] in
        let* α8 := M.call (Ty.path "core::fmt::rt::UnsafeArg")::["new"] in
        let* α9 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1_formatted"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α5))
              (pointer_coercion "Unsize" (borrow α7))
              α8) in
        let* α10 := M.call ((M.var "std::io::stdio::_print") α9) in
        M.alloc α10 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow α3)) in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::rt::Placeholder")::["new"]
              ((Integer.of_Z 0) : Ty.path "usize")
              "0"%char
              core.fmt.rt.Alignment.Left
              ((Integer.of_Z 0) : Ty.path "u32")
              core.fmt.rt.Count.Implied
              (core.fmt.rt.Count.Is ((Integer.of_Z 5) : Ty.path "usize"))) in
        let* α7 := M.alloc [ α6 ] in
        let* α8 := M.call (Ty.path "core::fmt::rt::UnsafeArg")::["new"] in
        let* α9 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1_formatted"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α5))
              (pointer_coercion "Unsize" (borrow α7))
              α8) in
        let* α10 := M.call ((M.var "std::io::stdio::_print") α9) in
        M.alloc α10 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow α3)) in
        let* α5 := M.alloc ((Integer.of_Z 5) : Ty.path "usize") in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["from_usize"] (borrow α5)) in
        let* α7 := M.alloc [ α4; α6 ] in
        let* α8 :=
          M.call
            ((Ty.path "core::fmt::rt::Placeholder")::["new"]
              ((Integer.of_Z 0) : Ty.path "usize")
              "0"%char
              core.fmt.rt.Alignment.Right
              ((Integer.of_Z 0) : Ty.path "u32")
              core.fmt.rt.Count.Implied
              (core.fmt.rt.Count.Param ((Integer.of_Z 1) : Ty.path "usize"))) in
        let* α9 := M.alloc [ α8 ] in
        let* α10 := M.call (Ty.path "core::fmt::rt::UnsafeArg")::["new"] in
        let* α11 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1_formatted"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α7))
              (pointer_coercion "Unsize" (borrow α9))
              α10) in
        let* α12 := M.call ((M.var "std::io::stdio::_print") α11) in
        M.alloc α12 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "My name is Bond, James Bond
") in
        let* α1 := M.alloc [ α0 ] in
        let* α2 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] in
        let* α3 := M.alloc α2 in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α1))
              (pointer_coercion "Unsize" (borrow α3))) in
        let* α5 := M.call ((M.var "std::io::stdio::_print") α4) in
        M.alloc α5 in
      M.alloc tt in
    let* number := M.copy (UnsupportedLiteral : Ty.path "f64") in
    let* width := M.alloc ((Integer.of_Z 5) : Ty.path "usize") in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow number)) in
        let* α4 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["from_usize"]
              (borrow width)) in
        let* α5 := M.alloc [ α3; α4 ] in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::rt::Placeholder")::["new"]
              ((Integer.of_Z 0) : Ty.path "usize")
              " "%char
              core.fmt.rt.Alignment.Right
              ((Integer.of_Z 0) : Ty.path "u32")
              core.fmt.rt.Count.Implied
              (core.fmt.rt.Count.Param ((Integer.of_Z 1) : Ty.path "usize"))) in
        let* α7 := M.alloc [ α6 ] in
        let* α8 := M.call (Ty.path "core::fmt::rt::UnsafeArg")::["new"] in
        let* α9 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1_formatted"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α5))
              (pointer_coercion "Unsize" (borrow α7))
              α8) in
        let* α10 := M.call ((M.var "std::io::stdio::_print") α9) in
        M.alloc α10 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

(* Struct Structure *)
