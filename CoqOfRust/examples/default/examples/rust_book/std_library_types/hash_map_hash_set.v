(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut a: HashSet<i32> = vec![1i32, 2, 3].into_iter().collect();
    let mut b: HashSet<i32> = vec![2i32, 3, 4].into_iter().collect();

    assert!(a.insert(4));
    assert!(a.contains(&4));

    // `HashSet::insert()` returns false if
    // there was a value already present.
    // assert!(b.insert(4), "Value 4 is already in set B!");
    // FIXME ^ Comment out this line

    b.insert(5);

    // If a collection's element type implements `Debug`,
    // then the collection implements `Debug`.
    // It usually prints its elements in the format `[elem1, elem2, ...]`
    println!("A: {:?}", a);
    println!("B: {:?}", b);

    // Print [1, 2, 3, 4, 5] in arbitrary order
    println!("Union: {:?}", a.union(&b).collect::<Vec<&i32>>());

    // This should print [1]
    println!("Difference: {:?}", a.difference(&b).collect::<Vec<&i32>>());

    // Print [2, 3, 4] in arbitrary order.
    println!(
        "Intersection: {:?}",
        a.intersection(&b).collect::<Vec<&i32>>()
    );

    // Print [1, 5]
    println!(
        "Symmetric Difference: {:?}",
        a.symmetric_difference(&b).collect::<Vec<&i32>>()
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* a :=
      let* α0 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "collect"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ];
            (* B *)
              Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [ Ty.path "i32"; Ty.path "std::hash::random::RandomState" ]
          ] in
      let* α1 :=
        M.get_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α2 :=
        M.alloc
          [
            (Integer.of_Z 1) : Ty.path "i32";
            (Integer.of_Z 2) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32"
          ] in
      let* α3 :=
        M.call
          (alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
          [ α2 ] in
      let* α4 := M.read α3 in
      let* α5 :=
        M.call
          (Ty.apply (Ty.path "slice") [ Ty.path "i32" ])::["into_vec"]
          [ pointer_coercion "Unsize" α4 ] in
      let* α6 := M.call α1 [ α5 ] in
      let* α7 := M.call α0 [ α6 ] in
      M.alloc α7 in
    let* b :=
      let* α0 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "collect"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ];
            (* B *)
              Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [ Ty.path "i32"; Ty.path "std::hash::random::RandomState" ]
          ] in
      let* α1 :=
        M.get_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α2 :=
        M.alloc
          [
            (Integer.of_Z 2) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32";
            (Integer.of_Z 4) : Ty.path "i32"
          ] in
      let* α3 :=
        M.call
          (alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
          [ α2 ] in
      let* α4 := M.read α3 in
      let* α5 :=
        M.call
          (Ty.apply (Ty.path "slice") [ Ty.path "i32" ])::["into_vec"]
          [ pointer_coercion "Unsize" α4 ] in
      let* α6 := M.call α1 [ α5 ] in
      let* α7 := M.call α0 [ α6 ] in
      M.alloc α7 in
    let* _ :=
      let* α0 := M.var "UnOp::not" in
      let* α1 :=
        M.call
          (Ty.apply
              (Ty.path "std::collections::hash::set::HashSet")
              [ Ty.path "i32"; Ty.path "std::hash::random::RandomState"
              ])::["insert"]
          [ borrow_mut a; (Integer.of_Z 4) : Ty.path "i32" ] in
      let* α2 := M.alloc (α0 α1) in
      let* α3 := M.read (use α2) in
      if α3 then
        let* α0 := M.var "core::panicking::panic" in
        let* α1 := M.read (mk_str "assertion failed: a.insert(4)") in
        let* α2 := M.call α0 [ α1 ] in
        let* α3 := never_to_any α2 in
        M.alloc α3
      else
        M.alloc tt in
    let* _ :=
      let* α0 := M.var "UnOp::not" in
      let* α1 := M.alloc ((Integer.of_Z 4) : Ty.path "i32") in
      let* α2 :=
        M.call
          (Ty.apply
              (Ty.path "std::collections::hash::set::HashSet")
              [ Ty.path "i32"; Ty.path "std::hash::random::RandomState"
              ])::["contains"]
          [ borrow a; borrow α1 ] in
      let* α3 := M.alloc (α0 α2) in
      let* α4 := M.read (use α3) in
      if α4 then
        let* α0 := M.var "core::panicking::panic" in
        let* α1 := M.read (mk_str "assertion failed: a.contains(&4)") in
        let* α2 := M.call α0 [ α1 ] in
        let* α3 := never_to_any α2 in
        M.alloc α3
      else
        M.alloc tt in
    let* _ :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "std::collections::hash::set::HashSet")
              [ Ty.path "i32"; Ty.path "std::hash::random::RandomState"
              ])::["insert"]
          [ borrow_mut b; (Integer.of_Z 5) : Ty.path "i32" ] in
      M.alloc α0 in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "A: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow a ] in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α5)
            ] in
        let* α7 := M.call α0 [ α6 ] in
        M.alloc α7 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "B: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow b ] in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α5)
            ] in
        let* α7 := M.call α0 [ α6 ] in
        M.alloc α7 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Union: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.get_method
            "core::iter::traits::iterator::Iterator"
            "collect"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "std::collections::hash::set::Union")
                  [ Ty.path "i32"; Ty.path "std::hash::random::RandomState" ];
              (* B *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "ref") [ Ty.path "i32" ];
                    Ty.path "alloc::alloc::Global"
                  ]
            ] in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [ Ty.path "i32"; Ty.path "std::hash::random::RandomState"
                ])::["union"]
            [ borrow a; borrow b ] in
        let* α6 := M.call α4 [ α5 ] in
        let* α7 := M.alloc α6 in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow α7 ] in
        let* α9 := M.alloc [ α8 ] in
        let* α10 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α9)
            ] in
        let* α11 := M.call α0 [ α10 ] in
        M.alloc α11 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Difference: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.get_method
            "core::iter::traits::iterator::Iterator"
            "collect"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "std::collections::hash::set::Difference")
                  [ Ty.path "i32"; Ty.path "std::hash::random::RandomState" ];
              (* B *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "ref") [ Ty.path "i32" ];
                    Ty.path "alloc::alloc::Global"
                  ]
            ] in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [ Ty.path "i32"; Ty.path "std::hash::random::RandomState"
                ])::["difference"]
            [ borrow a; borrow b ] in
        let* α6 := M.call α4 [ α5 ] in
        let* α7 := M.alloc α6 in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow α7 ] in
        let* α9 := M.alloc [ α8 ] in
        let* α10 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α9)
            ] in
        let* α11 := M.call α0 [ α10 ] in
        M.alloc α11 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Intersection: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.get_method
            "core::iter::traits::iterator::Iterator"
            "collect"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "std::collections::hash::set::Intersection")
                  [ Ty.path "i32"; Ty.path "std::hash::random::RandomState" ];
              (* B *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "ref") [ Ty.path "i32" ];
                    Ty.path "alloc::alloc::Global"
                  ]
            ] in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [ Ty.path "i32"; Ty.path "std::hash::random::RandomState"
                ])::["intersection"]
            [ borrow a; borrow b ] in
        let* α6 := M.call α4 [ α5 ] in
        let* α7 := M.alloc α6 in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow α7 ] in
        let* α9 := M.alloc [ α8 ] in
        let* α10 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α9)
            ] in
        let* α11 := M.call α0 [ α10 ] in
        M.alloc α11 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Symmetric Difference: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.get_method
            "core::iter::traits::iterator::Iterator"
            "collect"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "std::collections::hash::set::SymmetricDifference")
                  [ Ty.path "i32"; Ty.path "std::hash::random::RandomState" ];
              (* B *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "ref") [ Ty.path "i32" ];
                    Ty.path "alloc::alloc::Global"
                  ]
            ] in
        let* α5 :=
          M.call
            (Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [ Ty.path "i32"; Ty.path "std::hash::random::RandomState"
                ])::["symmetric_difference"]
            [ borrow a; borrow b ] in
        let* α6 := M.call α4 [ α5 ] in
        let* α7 := M.alloc α6 in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow α7 ] in
        let* α9 := M.alloc [ α8 ] in
        let* α10 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α9)
            ] in
        let* α11 := M.call α0 [ α10 ] in
        M.alloc α11 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
