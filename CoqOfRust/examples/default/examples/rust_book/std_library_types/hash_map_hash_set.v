(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut a: HashSet<i32> = vec![1i32, 2, 3].into_iter().collect();
    let mut b: HashSet<i32> = vec![2i32, 3, 4].into_iter().collect();

    assert!(a.insert(4));
    assert!(a.contains(&4));

    // `HashSet::insert()` returns false if
    // there was a value already present.
    // assert!(b.insert(4), "Value 4 is already in set B!");
    // FIXME ^ Comment out this line

    b.insert(5);

    // If a collection's element type implements `Debug`,
    // then the collection implements `Debug`.
    // It usually prints its elements in the format `[elem1, elem2, ...]`
    println!("A: {:?}", a);
    println!("B: {:?}", b);

    // Print [1, 2, 3, 4, 5] in arbitrary order
    println!("Union: {:?}", a.union(&b).collect::<Vec<&i32>>());

    // This should print [1]
    println!("Difference: {:?}", a.difference(&b).collect::<Vec<&i32>>());

    // Print [2, 3, 4] in arbitrary order.
    println!(
        "Intersection: {:?}",
        a.intersection(&b).collect::<Vec<&i32>>()
    );

    // Print [1, 5]
    println!(
        "Symmetric Difference: {:?}",
        a.symmetric_difference(&b).collect::<Vec<&i32>>()
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* a :
        Ty.apply
          (Ty.path "std::collections::hash::set::HashSet")
          [Ty.path "i32";
            Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
            (Ty.apply
              (Ty.path "std::collections::hash::set::HashSet")
              [Ty.path "i32";
                Ty.apply (Ty.path "std::hash::random::RandomState") []]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.collect
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (B :=
              Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [Ty.path "i32";
                  Ty.apply (Ty.path "std::hash::random::RandomState") []])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.function
            [Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
            _ :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ‚Ñê))) in
      let* Œ±2 : Ty.apply (Ty.path "array") [Ty.path "i32"] :=
        M.alloc
          [
            (Integer.of_Z 1) : Ty.path "i32";
            (Integer.of_Z 2) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32"
          ] in
      let* Œ±3 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±2) in
      let* Œ±4 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read Œ±3 in
      let* Œ±5 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply (Ty.path "slice") [Ty.path "i32"])::["into_vec"]
            (pointer_coercion "Unsize" Œ±4)) in
      let* Œ±6 :
          Ty.apply
            (Ty.path "alloc::vec::into_iter::IntoIter")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (Œ±1 Œ±5) in
      let* Œ±7 :
          Ty.apply
            (Ty.path "std::collections::hash::set::HashSet")
            [Ty.path "i32";
              Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
        M.call (Œ±0 Œ±6) in
      M.alloc Œ±7 in
    let* b :
        Ty.apply
          (Ty.path "std::collections::hash::set::HashSet")
          [Ty.path "i32";
            Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
            (Ty.apply
              (Ty.path "std::collections::hash::set::HashSet")
              [Ty.path "i32";
                Ty.apply (Ty.path "std::hash::random::RandomState") []]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.collect
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (B :=
              Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [Ty.path "i32";
                  Ty.apply (Ty.path "std::hash::random::RandomState") []])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.function
            [Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []]]
            _ :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ‚Ñê))) in
      let* Œ±2 : Ty.apply (Ty.path "array") [Ty.path "i32"] :=
        M.alloc
          [
            (Integer.of_Z 2) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32";
            (Integer.of_Z 4) : Ty.path "i32"
          ] in
      let* Œ±3 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±2) in
      let* Œ±4 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply (Ty.path "array") [Ty.path "i32"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read Œ±3 in
      let* Œ±5 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply (Ty.path "slice") [Ty.path "i32"])::["into_vec"]
            (pointer_coercion "Unsize" Œ±4)) in
      let* Œ±6 :
          Ty.apply
            (Ty.path "alloc::vec::into_iter::IntoIter")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (Œ±1 Œ±5) in
      let* Œ±7 :
          Ty.apply
            (Ty.path "std::collections::hash::set::HashSet")
            [Ty.path "i32";
              Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
        M.call (Œ±0 Œ±6) in
      M.alloc Œ±7 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.path "bool" :=
        M.call
          ((Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [Ty.path "i32";
                  Ty.apply
                    (Ty.path "std::hash::random::RandomState")
                    []])::["insert"]
            (borrow_mut a)
            ((Integer.of_Z 4) : Ty.path "i32")) in
      let* Œ±1 : Ty.path "bool" := M.alloc (UnOp.not Œ±0) in
      let* Œ±2 : Ty.path "bool" := M.read (use Œ±1) in
      if Œ±2 then
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "assertion failed: a.insert(4)") in
        let* Œ±1 : Ty.path "never" := M.call (core.panicking.panic Œ±0) in
        let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
        M.alloc Œ±2
      else
        M.alloc tt in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.path "i32" := M.alloc ((Integer.of_Z 4) : Ty.path "i32") in
      let* Œ±1 : Ty.path "bool" :=
        M.call
          ((Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [Ty.path "i32";
                  Ty.apply
                    (Ty.path "std::hash::random::RandomState")
                    []])::["contains"]
            (borrow a)
            (borrow Œ±0)) in
      let* Œ±2 : Ty.path "bool" := M.alloc (UnOp.not Œ±1) in
      let* Œ±3 : Ty.path "bool" := M.read (use Œ±2) in
      if Œ±3 then
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "assertion failed: a.contains(&4)") in
        let* Œ±1 : Ty.path "never" := M.call (core.panicking.panic Œ±0) in
        let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
        M.alloc Œ±2
      else
        M.alloc tt in
    let* _ : Ty.path "bool" :=
      let* Œ±0 : Ty.path "bool" :=
        M.call
          ((Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [Ty.path "i32";
                  Ty.apply
                    (Ty.path "std::hash::random::RandomState")
                    []])::["insert"]
            (borrow_mut b)
            ((Integer.of_Z 5) : Ty.path "i32")) in
      M.alloc Œ±0 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "A: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow a)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "B: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow b)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Union: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :
            Ty.function
              [Ty.apply
                  (Ty.path "std::collections::hash::set::Union")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "std::hash::random::RandomState") []]]
              (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.iter.traits.iterator.Iterator.collect
              (Self :=
                Ty.apply
                  (Ty.path "std::collections::hash::set::Union")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "std::hash::random::RandomState") []])
              (B :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Trait := ‚Ñê))) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "std::collections::hash::set::Union")
              [Ty.path "i32";
                Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
          M.call
            ((Ty.apply
                  (Ty.path "std::collections::hash::set::HashSet")
                  [Ty.path "i32";
                    Ty.apply
                      (Ty.path "std::hash::random::RandomState")
                      []])::["union"]
              (borrow a)
              (borrow b)) in
        let* Œ±5 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.call (Œ±3 Œ±4) in
        let* Œ±6 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.alloc Œ±5 in
        let* Œ±7 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow Œ±6)) in
        let* Œ±8 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±7 ] in
        let* Œ±9 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±8))) in
        let* Œ±10 : Ty.tuple := M.call (std.io.stdio._print Œ±9) in
        M.alloc Œ±10 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Difference: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :
            Ty.function
              [Ty.apply
                  (Ty.path "std::collections::hash::set::Difference")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "std::hash::random::RandomState") []]]
              (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.iter.traits.iterator.Iterator.collect
              (Self :=
                Ty.apply
                  (Ty.path "std::collections::hash::set::Difference")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "std::hash::random::RandomState") []])
              (B :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Trait := ‚Ñê))) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "std::collections::hash::set::Difference")
              [Ty.path "i32";
                Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
          M.call
            ((Ty.apply
                  (Ty.path "std::collections::hash::set::HashSet")
                  [Ty.path "i32";
                    Ty.apply
                      (Ty.path "std::hash::random::RandomState")
                      []])::["difference"]
              (borrow a)
              (borrow b)) in
        let* Œ±5 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.call (Œ±3 Œ±4) in
        let* Œ±6 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.alloc Œ±5 in
        let* Œ±7 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow Œ±6)) in
        let* Œ±8 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±7 ] in
        let* Œ±9 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±8))) in
        let* Œ±10 : Ty.tuple := M.call (std.io.stdio._print Œ±9) in
        M.alloc Œ±10 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Intersection: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :
            Ty.function
              [Ty.apply
                  (Ty.path "std::collections::hash::set::Intersection")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "std::hash::random::RandomState") []]]
              (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.iter.traits.iterator.Iterator.collect
              (Self :=
                Ty.apply
                  (Ty.path "std::collections::hash::set::Intersection")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "std::hash::random::RandomState") []])
              (B :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Trait := ‚Ñê))) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "std::collections::hash::set::Intersection")
              [Ty.path "i32";
                Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
          M.call
            ((Ty.apply
                  (Ty.path "std::collections::hash::set::HashSet")
                  [Ty.path "i32";
                    Ty.apply
                      (Ty.path "std::hash::random::RandomState")
                      []])::["intersection"]
              (borrow a)
              (borrow b)) in
        let* Œ±5 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.call (Œ±3 Œ±4) in
        let* Œ±6 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.alloc Œ±5 in
        let* Œ±7 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow Œ±6)) in
        let* Œ±8 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±7 ] in
        let* Œ±9 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±8))) in
        let* Œ±10 : Ty.tuple := M.call (std.io.stdio._print Œ±9) in
        M.alloc Œ±10 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Symmetric Difference: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :
            Ty.function
              [Ty.apply
                  (Ty.path "std::collections::hash::set::SymmetricDifference")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "std::hash::random::RandomState") []]]
              (Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.iter.traits.iterator.Iterator.collect
              (Self :=
                Ty.apply
                  (Ty.path "std::collections::hash::set::SymmetricDifference")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "std::hash::random::RandomState") []])
              (B :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Trait := ‚Ñê))) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "std::collections::hash::set::SymmetricDifference")
              [Ty.path "i32";
                Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
          M.call
            ((Ty.apply
                  (Ty.path "std::collections::hash::set::HashSet")
                  [Ty.path "i32";
                    Ty.apply
                      (Ty.path "std::hash::random::RandomState")
                      []])::["symmetric_difference"]
              (borrow a)
              (borrow b)) in
        let* Œ±5 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.call (Œ±3 Œ±4) in
        let* Œ±6 :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "i32"];
                Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.alloc Œ±5 in
        let* Œ±7 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow Œ±6)) in
        let* Œ±8 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±7 ] in
        let* Œ±9 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±8))) in
        let* Œ±10 : Ty.tuple := M.call (std.io.stdio._print Œ±9) in
        M.alloc Œ±10 in
      M.alloc tt in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
