(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let rc_examples = "Rc examples".to_string();
    {
        println!("--- rc_a is created ---");

        let rc_a: Rc<String> = Rc::new(rc_examples);
        println!("Reference Count of rc_a: {}", Rc::strong_count(&rc_a));

        {
            println!("--- rc_a is cloned to rc_b ---");

            let rc_b: Rc<String> = Rc::clone(&rc_a);
            println!("Reference Count of rc_b: {}", Rc::strong_count(&rc_b));
            println!("Reference Count of rc_a: {}", Rc::strong_count(&rc_a));

            // Two `Rc`s are equal if their inner values are equal
            println!("rc_a and rc_b are equal: {}", rc_a.eq(&rc_b));

            // We can use methods of a value directly
            println!("Length of the value inside rc_a: {}", rc_a.len());
            println!("Value of rc_b: {}", rc_b);

            println!("--- rc_b is dropped out of scope ---");
        }

        println!("Reference Count of rc_a: {}", Rc::strong_count(&rc_a));

        println!("--- rc_a is dropped out of scope ---");
    }

    // Error! `rc_examples` already moved into `rc_a`
    // And when `rc_a` is dropped, `rc_examples` is dropped together
    // println!("rc_examples: {}", rc_examples);
    // TODO ^ Try uncommenting this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* rc_examples :=
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          alloc.string.ToString.to_string
            (Self := Ty.path "str")
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read (mk_str "Rc examples") in
      let* Œ±2 := M.call (Œ±0 Œ±1) in
      M.alloc Œ±2 in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "--- rc_a is created ---
") in
        let* Œ±1 := M.alloc [ Œ±0 ] in
        let* Œ±2 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 := M.call ((M.var "std::io::stdio::_print") Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* rc_a :=
      let* Œ±0 := M.read rc_examples in
      let* Œ±1 :=
        M.call
          ((Ty.apply
                (Ty.path "alloc::rc::Rc")
                [Ty.apply (Ty.path "alloc::string::String") [];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"]
            Œ±0) in
      M.alloc Œ±1 in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "Reference Count of rc_a: ") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            ((Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [Ty.apply (Ty.path "alloc::string::String") [];
                    Ty.apply
                      (Ty.path "alloc::alloc::Global")
                      []])::["strong_count"]
              (borrow rc_a)) in
        let* Œ±4 := M.alloc Œ±3 in
        let* Œ±5 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±4)) in
        let* Œ±6 := M.alloc [ Œ±5 ] in
        let* Œ±7 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±6))) in
        let* Œ±8 := M.call ((M.var "std::io::stdio::_print") Œ±7) in
        M.alloc Œ±8 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "--- rc_a is cloned to rc_b ---
") in
          let* Œ±1 := M.alloc [ Œ±0 ] in
          let* Œ±2 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
                (pointer_coercion "Unsize" (borrow Œ±1))) in
          let* Œ±3 := M.call ((M.var "std::io::stdio::_print") Œ±2) in
          M.alloc Œ±3 in
        M.alloc tt in
      let* rc_b :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.clone.Clone.clone
              (Self :=
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [Ty.apply (Ty.path "alloc::string::String") [];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.call (Œ±0 (borrow rc_a)) in
        M.alloc Œ±1 in
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "Reference Count of rc_b: ") in
          let* Œ±1 := M.read (mk_str "
") in
          let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
          let* Œ±3 :=
            M.call
              ((Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    [Ty.apply (Ty.path "alloc::string::String") [];
                      Ty.apply
                        (Ty.path "alloc::alloc::Global")
                        []])::["strong_count"]
                (borrow rc_b)) in
          let* Œ±4 := M.alloc Œ±3 in
          let* Œ±5 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow Œ±4)) in
          let* Œ±6 := M.alloc [ Œ±5 ] in
          let* Œ±7 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±2))
                (pointer_coercion "Unsize" (borrow Œ±6))) in
          let* Œ±8 := M.call ((M.var "std::io::stdio::_print") Œ±7) in
          M.alloc Œ±8 in
        M.alloc tt in
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "Reference Count of rc_a: ") in
          let* Œ±1 := M.read (mk_str "
") in
          let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
          let* Œ±3 :=
            M.call
              ((Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    [Ty.apply (Ty.path "alloc::string::String") [];
                      Ty.apply
                        (Ty.path "alloc::alloc::Global")
                        []])::["strong_count"]
                (borrow rc_a)) in
          let* Œ±4 := M.alloc Œ±3 in
          let* Œ±5 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow Œ±4)) in
          let* Œ±6 := M.alloc [ Œ±5 ] in
          let* Œ±7 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±2))
                (pointer_coercion "Unsize" (borrow Œ±6))) in
          let* Œ±8 := M.call ((M.var "std::io::stdio::_print") Œ±7) in
          M.alloc Œ±8 in
        M.alloc tt in
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "rc_a and rc_b are equal: ") in
          let* Œ±1 := M.read (mk_str "
") in
          let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
          let* Œ±3 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.cmp.PartialEq.eq
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    [Ty.apply (Ty.path "alloc::string::String") [];
                      Ty.apply (Ty.path "alloc::alloc::Global") []])
                (Rhs :=
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    [Ty.apply (Ty.path "alloc::string::String") [];
                      Ty.apply (Ty.path "alloc::alloc::Global") []])
                (Trait := ‚Ñê))) in
          let* Œ±4 := M.call (Œ±3 (borrow rc_a) (borrow rc_b)) in
          let* Œ±5 := M.alloc Œ±4 in
          let* Œ±6 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow Œ±5)) in
          let* Œ±7 := M.alloc [ Œ±6 ] in
          let* Œ±8 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±2))
                (pointer_coercion "Unsize" (borrow Œ±7))) in
          let* Œ±9 := M.call ((M.var "std::io::stdio::_print") Œ±8) in
          M.alloc Œ±9 in
        M.alloc tt in
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "Length of the value inside rc_a: ") in
          let* Œ±1 := M.read (mk_str "
") in
          let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
          let* Œ±3 :=
            ltac:(M.get_method (fun ‚Ñê =>
              core.ops.deref.Deref.deref
                (Self :=
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    [Ty.apply (Ty.path "alloc::string::String") [];
                      Ty.apply (Ty.path "alloc::alloc::Global") []])
                (Trait := ‚Ñê))) in
          let* Œ±4 := M.call (Œ±3 (borrow rc_a)) in
          let* Œ±5 :=
            M.call
              ((Ty.apply (Ty.path "alloc::string::String") [])::["len"] Œ±4) in
          let* Œ±6 := M.alloc Œ±5 in
          let* Œ±7 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow Œ±6)) in
          let* Œ±8 := M.alloc [ Œ±7 ] in
          let* Œ±9 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±2))
                (pointer_coercion "Unsize" (borrow Œ±8))) in
          let* Œ±10 := M.call ((M.var "std::io::stdio::_print") Œ±9) in
          M.alloc Œ±10 in
        M.alloc tt in
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "Value of rc_b: ") in
          let* Œ±1 := M.read (mk_str "
") in
          let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
          let* Œ±3 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow rc_b)) in
          let* Œ±4 := M.alloc [ Œ±3 ] in
          let* Œ±5 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±2))
                (pointer_coercion "Unsize" (borrow Œ±4))) in
          let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
          M.alloc Œ±6 in
        M.alloc tt in
      let* _ :=
        let* _ :=
          let* Œ±0 := M.read (mk_str "--- rc_b is dropped out of scope ---
") in
          let* Œ±1 := M.alloc [ Œ±0 ] in
          let* Œ±2 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
                (pointer_coercion "Unsize" (borrow Œ±1))) in
          let* Œ±3 := M.call ((M.var "std::io::stdio::_print") Œ±2) in
          M.alloc Œ±3 in
        M.alloc tt in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "Reference Count of rc_a: ") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            ((Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [Ty.apply (Ty.path "alloc::string::String") [];
                    Ty.apply
                      (Ty.path "alloc::alloc::Global")
                      []])::["strong_count"]
              (borrow rc_a)) in
        let* Œ±4 := M.alloc Œ±3 in
        let* Œ±5 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow Œ±4)) in
        let* Œ±6 := M.alloc [ Œ±5 ] in
        let* Œ±7 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±6))) in
        let* Œ±8 := M.call ((M.var "std::io::stdio::_print") Œ±7) in
        M.alloc Œ±8 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "--- rc_a is dropped out of scope ---
") in
        let* Œ±1 := M.alloc [ Œ±0 ] in
        let* Œ±2 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 := M.call ((M.var "std::io::stdio::_print") Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
