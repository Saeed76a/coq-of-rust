(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Account *)

Module Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.
  Axiom Implements :
    let Self := Ty.path "hash_map_alternate_or_custom_key_types::Account" in
    M.IsTraitInstance "core::marker::StructuralPartialEq" Self [] [].
End Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.

Module Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.
  (*
  PartialEq
  *)
  Definition eq (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.var "BinOp::Pure::and" in
      let* α1 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.apply (Ty.path "ref") [ Ty.path "str" ];
            (* Rhs *) Ty.apply (Ty.path "ref") [ Ty.path "str" ]
          ] in
      let* α2 :=
        M.var "hash_map_alternate_or_custom_key_types::Account::Get_username" in
      let* α3 := M.read self in
      let* α4 :=
        M.var "hash_map_alternate_or_custom_key_types::Account::Get_username" in
      let* α5 := M.read other in
      let* α6 := M.call α1 [ borrow (α2 (deref α3)); borrow (α4 (deref α5)) ] in
      let* α7 :=
        M.get_method
          "core::cmp::PartialEq"
          "eq"
          [
            (* Self *) Ty.apply (Ty.path "ref") [ Ty.path "str" ];
            (* Rhs *) Ty.apply (Ty.path "ref") [ Ty.path "str" ]
          ] in
      let* α8 :=
        M.var "hash_map_alternate_or_custom_key_types::Account::Get_password" in
      let* α9 := M.read self in
      let* α10 :=
        M.var "hash_map_alternate_or_custom_key_types::Account::Get_password" in
      let* α11 := M.read other in
      let* α12 :=
        M.call α7 [ borrow (α8 (deref α9)); borrow (α10 (deref α11)) ] in
      M.pure (α0 α6 α12)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    let Self := Ty.path "hash_map_alternate_or_custom_key_types::Account" in
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      []
      [ ("eq", InstanceField.Method eq [ Self ]) ].
End Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.

Module Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.
  Axiom Implements :
    let Self := Ty.path "hash_map_alternate_or_custom_key_types::Account" in
    M.IsTraitInstance "core::marker::StructuralEq" Self [] [].
End Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.

Module Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (𝜏 : list Ty.t)
      (α : list Value.t)
      : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::cmp::AssertParamIsEq")
                [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ]))
          [
            fun γ =>
              (match_operator
                (DeclaredButUndefinedVariable
                  (A :=
                    Ty.apply
                      (Ty.path "core::cmp::AssertParamIsEq")
                      [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ]))
                [ fun γ => (M.alloc tt) : Ty.path "unit" ]) :
              Ty.path "unit"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    let Self := Ty.path "hash_map_alternate_or_custom_key_types::Account" in
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      []
      [
        ("assert_receiver_is_total_eq",
          InstanceField.Method assert_receiver_is_total_eq [ Self ])
      ].
End Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.

Module Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.
  (*
  Hash
  *)
  Definition hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; __H ], [ self; state ] =>
      let* self := M.alloc self in
      let* state := M.alloc state in
      let* _ :=
        let* α0 :=
          M.get_method
            "core::hash::Hash"
            "hash"
            [ (* Self *) Ty.apply (Ty.path "ref") [ Ty.path "str" ]; (* H *) __H
            ] in
        let* α1 :=
          M.var
            "hash_map_alternate_or_custom_key_types::Account::Get_username" in
        let* α2 := M.read self in
        let* α3 := M.read state in
        let* α4 := M.call α0 [ borrow (α1 (deref α2)); α3 ] in
        M.alloc α4 in
      let* α0 :=
        M.get_method
          "core::hash::Hash"
          "hash"
          [ (* Self *) Ty.apply (Ty.path "ref") [ Ty.path "str" ]; (* H *) __H
          ] in
      let* α1 :=
        M.var "hash_map_alternate_or_custom_key_types::Account::Get_password" in
      let* α2 := M.read self in
      let* α3 := M.read state in
      let* α4 := M.call α0 [ borrow (α1 (deref α2)); α3 ] in
      let* α0 := M.alloc α4 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    let Self := Ty.path "hash_map_alternate_or_custom_key_types::Account" in
    M.IsTraitInstance
      "core::hash::Hash"
      Self
      []
      [ ("hash", InstanceField.Method hash [ Self ]) ].
End Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.

(* Enum AccountInfo *)

Axiom Accounts :
  (Ty.path "hash_map_alternate_or_custom_key_types::Accounts") =
    (Ty.apply
      (Ty.path "std::collections::hash::map::HashMap")
      [
        Ty.path "hash_map_alternate_or_custom_key_types::Account";
        Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo";
        Ty.path "std::hash::random::RandomState"
      ]).

(*
fn try_logon<'a>(accounts: &Accounts<'a>, username: &'a str, password: &'a str) {
    println!("Username: {}", username);
    println!("Password: {}", password);
    println!("Attempting logon...");

    let logon = Account { username, password };

    match accounts.get(&logon) {
        Some(account_info) => {
            println!("Successful logon!");
            println!("Name: {}", account_info.name);
            println!("Email: {}", account_info.email);
        }
        _ => println!("Login failed!"),
    }
}
*)
Definition try_logon (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ accounts; username; password ] =>
    let* accounts := M.alloc accounts in
    let* username := M.alloc username in
    let* password := M.alloc password in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Username: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow username ] in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α5)
            ] in
        let* α7 := M.call α0 [ α6 ] in
        M.alloc α7 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Password: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow password ] in
        let* α5 := M.alloc [ α4 ] in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α5)
            ] in
        let* α7 := M.call α0 [ α6 ] in
        M.alloc α7 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Attempting logon...
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α2) ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* logon :=
      let* α0 := M.read username in
      let* α1 := M.read password in
      M.alloc
        (Value.StructRecord
          "hash_map_alternate_or_custom_key_types::Account"
          [ ("username", α0); ("password", α1) ]) in
    let* α0 := M.read accounts in
    let* α1 :=
      M.call
        (Ty.apply
            (Ty.path "std::collections::hash::map::HashMap")
            [
              Ty.path "hash_map_alternate_or_custom_key_types::Account";
              Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo";
              Ty.path "std::hash::random::RandomState"
            ])::["get"]
        [ α0; borrow logon ] in
    let* α2 := M.alloc α1 in
    let* α0 :=
      match_operator
        α2
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::option::Option::Get_Some_0" in
                M.pure (α0 γ) in
              let* account_info := M.copy γ0_0 in
              let* _ :=
                let* _ :=
                  let* α0 := M.var "std::io::stdio::_print" in
                  let* α1 := M.read (mk_str "Successful logon!
") in
                  let* α2 := M.alloc [ α1 ] in
                  let* α3 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_const"]
                      [ pointer_coercion "Unsize" (borrow α2) ] in
                  let* α4 := M.call α0 [ α3 ] in
                  M.alloc α4 in
                M.alloc tt in
              let* _ :=
                let* _ :=
                  let* α0 := M.var "std::io::stdio::_print" in
                  let* α1 := M.read (mk_str "Name: ") in
                  let* α2 := M.read (mk_str "
") in
                  let* α3 := M.alloc [ α1; α2 ] in
                  let* α4 :=
                    M.var
                      "hash_map_alternate_or_custom_key_types::AccountInfo::Get_name" in
                  let* α5 := M.read account_info in
                  let* α6 :=
                    M.call
                      (Ty.path "core::fmt::rt::Argument")::["new_display"]
                      [ borrow (α4 (deref α5)) ] in
                  let* α7 := M.alloc [ α6 ] in
                  let* α8 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_v1"]
                      [
                        pointer_coercion "Unsize" (borrow α3);
                        pointer_coercion "Unsize" (borrow α7)
                      ] in
                  let* α9 := M.call α0 [ α8 ] in
                  M.alloc α9 in
                M.alloc tt in
              let* _ :=
                let* _ :=
                  let* α0 := M.var "std::io::stdio::_print" in
                  let* α1 := M.read (mk_str "Email: ") in
                  let* α2 := M.read (mk_str "
") in
                  let* α3 := M.alloc [ α1; α2 ] in
                  let* α4 :=
                    M.var
                      "hash_map_alternate_or_custom_key_types::AccountInfo::Get_email" in
                  let* α5 := M.read account_info in
                  let* α6 :=
                    M.call
                      (Ty.path "core::fmt::rt::Argument")::["new_display"]
                      [ borrow (α4 (deref α5)) ] in
                  let* α7 := M.alloc [ α6 ] in
                  let* α8 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_v1"]
                      [
                        pointer_coercion "Unsize" (borrow α3);
                        pointer_coercion "Unsize" (borrow α7)
                      ] in
                  let* α9 := M.call α0 [ α8 ] in
                  M.alloc α9 in
                M.alloc tt in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* _ :=
              let* α0 := M.var "std::io::stdio::_print" in
              let* α1 := M.read (mk_str "Login failed!
") in
              let* α2 := M.alloc [ α1 ] in
              let* α3 :=
                M.call
                  (Ty.path "core::fmt::Arguments")::["new_const"]
                  [ pointer_coercion "Unsize" (borrow α2) ] in
              let* α4 := M.call α0 [ α3 ] in
              M.alloc α4 in
            M.alloc tt) :
            Ty.tuple []
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let mut accounts: Accounts = HashMap::new();

    let account = Account {
        username: "j.everyman",
        password: "password123",
    };

    let account_info = AccountInfo {
        name: "John Everyman",
        email: "j.everyman@email.com",
    };

    accounts.insert(account, account_info);

    try_logon(&accounts, "j.everyman", "psasword123");

    try_logon(&accounts, "j.everyman", "password123");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* accounts :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [
                Ty.path "hash_map_alternate_or_custom_key_types::Account";
                Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo";
                Ty.path "std::hash::random::RandomState"
              ])::["new"]
          [] in
      M.alloc α0 in
    let* account :=
      let* α0 := M.read (mk_str "j.everyman") in
      let* α1 := M.read (mk_str "password123") in
      M.alloc
        (Value.StructRecord
          "hash_map_alternate_or_custom_key_types::Account"
          [ ("username", α0); ("password", α1) ]) in
    let* account_info :=
      let* α0 := M.read (mk_str "John Everyman") in
      let* α1 := M.read (mk_str "j.everyman@email.com") in
      M.alloc
        (Value.StructRecord
          "hash_map_alternate_or_custom_key_types::AccountInfo"
          [ ("name", α0); ("email", α1) ]) in
    let* _ :=
      let* α0 := M.read account in
      let* α1 := M.read account_info in
      let* α2 :=
        M.call
          (Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [
                Ty.path "hash_map_alternate_or_custom_key_types::Account";
                Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo";
                Ty.path "std::hash::random::RandomState"
              ])::["insert"]
          [ borrow_mut accounts; α0; α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.var "hash_map_alternate_or_custom_key_types::try_logon" in
      let* α1 := M.read (mk_str "j.everyman") in
      let* α2 := M.read (mk_str "psasword123") in
      let* α3 := M.call α0 [ borrow accounts; α1; α2 ] in
      M.alloc α3 in
    let* _ :=
      let* α0 := M.var "hash_map_alternate_or_custom_key_types::try_logon" in
      let* α1 := M.read (mk_str "j.everyman") in
      let* α2 := M.read (mk_str "password123") in
      let* α3 := M.call α0 [ borrow accounts; α1; α2 ] in
      M.alloc α3 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
