(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_marker_StructuralPartialEq_for_hash_map_alternate_or_custom_key_types_Account.

Module  Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "ref") [Ty.path "str"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "str"])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                []] :=
        M.read self in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                []] :=
        M.read other in
      let* Œ±3 : Ty.path "bool" :=
        M.call
          (Œ±0
            (borrow
              (hash_map_alternate_or_custom_key_types.Account.Get_username
                (deref Œ±1)))
            (borrow
              (hash_map_alternate_or_custom_key_types.Account.Get_username
                (deref Œ±2)))) in
      let* Œ±4 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]]]
            (Ty.path "bool") :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.cmp.PartialEq.eq
            (Self := Ty.apply (Ty.path "ref") [Ty.path "str"])
            (Rhs := Ty.apply (Ty.path "ref") [Ty.path "str"])
            (Trait := ‚Ñê))) in
      let* Œ±5 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                []] :=
        M.read self in
      let* Œ±6 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                []] :=
        M.read other in
      let* Œ±7 : Ty.path "bool" :=
        M.call
          (Œ±4
            (borrow
              (hash_map_alternate_or_custom_key_types.Account.Get_password
                (deref Œ±5)))
            (borrow
              (hash_map_alternate_or_custom_key_types.Account.Get_password
                (deref Œ±6)))) in
      M.pure (BinOp.Pure.and Œ±3 Œ±7)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ‚Ñê : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_cmp_PartialEq_for_hash_map_alternate_or_custom_key_types_Account.

Module  Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_marker_StructuralEq_for_hash_map_alternate_or_custom_key_types_Account.

Module  Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq
      (ùúè : list Ty.t)
      (Œ± : list Value.t)
      : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 : Ty.tuple :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::cmp::AssertParamIsEq")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]]))
          [
            fun Œ≥ =>
              (match_operator
                (DeclaredButUndefinedVariable
                  (A :=
                    Ty.apply
                      (Ty.path "core::cmp::AssertParamIsEq")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]]))
                [ fun Œ≥ => (M.alloc tt) : Ty.path "unit" ]) :
              Ty.path "unit"
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_assert_receiver_is_total_eq : Instance.t := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Definition ‚Ñê : Instance.t := [("assert_receiver_is_total_eq",
      assert_receiver_is_total_eq)].
End Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_cmp_Eq_for_hash_map_alternate_or_custom_key_types_Account.

Module  Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.
Section Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [].
  
  (*
  Hash
  *)
  Definition hash (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [__H], [self; state] =>
      let* self := M.alloc self in
      let* state := M.alloc state in
      let* _ : Ty.tuple :=
        let* Œ±0 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]];
                Ty.apply (Ty.path "mut_ref") [__H]]
              Ty.tuple :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.hash.Hash.hash
              (Self := Ty.apply (Ty.path "ref") [Ty.path "str"])
              (H := __H)
              (Trait := ‚Ñê))) in
        let* Œ±1 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                  []] :=
          M.read self in
        let* Œ±2 : Ty.apply (Ty.path "mut_ref") [__H] := M.read state in
        let* Œ±3 : Ty.tuple :=
          M.call
            (Œ±0
              (borrow
                (hash_map_alternate_or_custom_key_types.Account.Get_username
                  (deref Œ±1)))
              Œ±2) in
        M.alloc Œ±3 in
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "mut_ref") [__H]]
            Ty.tuple :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.hash.Hash.hash
            (Self := Ty.apply (Ty.path "ref") [Ty.path "str"])
            (H := __H)
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                []] :=
        M.read self in
      let* Œ±2 : Ty.apply (Ty.path "mut_ref") [__H] := M.read state in
      let* Œ±3 : Ty.tuple :=
        M.call
          (Œ±0
            (borrow
              (hash_map_alternate_or_custom_key_types.Account.Get_password
                (deref Œ±1)))
            Œ±2) in
      let* Œ±0 : Ty.tuple := M.alloc Œ±3 in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_hash {__H : Set} : Instance.t := {
    Notations.double_colon := hash (__H := __H);
  }.
  
  Definition ‚Ñê : Instance.t := [("hash", hash); ("hash_slice", hash_slice)].
End Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.
End Impl_core_hash_Hash_for_hash_map_alternate_or_custom_key_types_Account.



Axiom Accounts :
    Ty.apply
      (Ty.path "std::collections::hash::map::HashMap")
      [Ty.apply (Ty.path "hash_map_alternate_or_custom_key_types::Account") [];
        Ty.apply
          (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
          [];
        Ty.apply (Ty.path "std::hash::random::RandomState") []].

(*
fn try_logon<'a>(accounts: &Accounts<'a>, username: &'a str, password: &'a str) {
    println!("Username: {}", username);
    println!("Password: {}", password);
    println!("Attempting logon...");

    let logon = Account { username, password };

    match accounts.get(&logon) {
        Some(account_info) => {
            println!("Successful logon!");
            println!("Name: {}", account_info.name);
            println!("Email: {}", account_info.email);
        }
        _ => println!("Login failed!"),
    }
}
*)
Definition try_logon (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [accounts; username; password] =>
    let* accounts := M.alloc accounts in
    let* username := M.alloc username in
    let* password := M.alloc password in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Username: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow username)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Password: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow password)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Attempting logon...
") in
        let* Œ±1 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0 ] in
        let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
              (pointer_coercion "Unsize" (borrow Œ±1))) in
        let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
        M.alloc Œ±3 in
      M.alloc tt in
    let* logon :
        Ty.apply
          (Ty.path "hash_map_alternate_or_custom_key_types::Account")
          [] :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] := M.read username in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] := M.read password in
      M.alloc
        {|
          hash_map_alternate_or_custom_key_types.Account.username := Œ±0;
          hash_map_alternate_or_custom_key_types.Account.password := Œ±1;
        |} in
    let* Œ±0 :
        Ty.apply
          (Ty.path "ref")
          [Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [Ty.apply
                  (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                  [];
                Ty.apply
                  (Ty.path
                    "hash_map_alternate_or_custom_key_types::AccountInfo")
                  [];
                Ty.apply (Ty.path "std::hash::random::RandomState") []]] :=
      M.read accounts in
    let* Œ±1 :
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path
                    "hash_map_alternate_or_custom_key_types::AccountInfo")
                  []]] :=
      M.call
        ((Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [Ty.apply
                  (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                  [];
                Ty.apply
                  (Ty.path
                    "hash_map_alternate_or_custom_key_types::AccountInfo")
                  [];
                Ty.apply
                  (Ty.path "std::hash::random::RandomState")
                  []])::["get"]
          Œ±0
          (borrow logon)) in
    let* Œ±2 :
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path
                    "hash_map_alternate_or_custom_key_types::AccountInfo")
                  []]] :=
      M.alloc Œ±1 in
    let* Œ±0 : Ty.tuple :=
      match_operator
        Œ±2
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.option.Option.Some _ =>
              let Œ≥0_0 := core.option.Option.Get_Some_0 Œ≥ in
              let* account_info := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "Successful logon!
") in
                  let* Œ±1 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ Œ±0 ] in
                  let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_const"]
                        (pointer_coercion "Unsize" (borrow Œ±1))) in
                  let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
                  M.alloc Œ±3 in
                M.alloc tt in
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "Name: ") in
                  let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "
") in
                  let* Œ±2 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ Œ±0; Œ±1 ] in
                  let* Œ±3 :
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path
                              "hash_map_alternate_or_custom_key_types::AccountInfo")
                            []] :=
                    M.read account_info in
                  let* Œ±4 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow
                          (hash_map_alternate_or_custom_key_types.AccountInfo.Get_name
                            (deref Œ±3)))) in
                  let* Œ±5 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                    M.alloc [ Œ±4 ] in
                  let* Œ±6 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow Œ±2))
                        (pointer_coercion "Unsize" (borrow Œ±5))) in
                  let* Œ±7 : Ty.tuple := M.call (std.io.stdio._print Œ±6) in
                  M.alloc Œ±7 in
                M.alloc tt in
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "Email: ") in
                  let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "
") in
                  let* Œ±2 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ Œ±0; Œ±1 ] in
                  let* Œ±3 :
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path
                              "hash_map_alternate_or_custom_key_types::AccountInfo")
                            []] :=
                    M.read account_info in
                  let* Œ±4 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow
                          (hash_map_alternate_or_custom_key_types.AccountInfo.Get_email
                            (deref Œ±3)))) in
                  let* Œ±5 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                    M.alloc [ Œ±4 ] in
                  let* Œ±6 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow Œ±2))
                        (pointer_coercion "Unsize" (borrow Œ±5))) in
                  let* Œ±7 : Ty.tuple := M.call (std.io.stdio._print Œ±6) in
                  M.alloc Œ±7 in
                M.alloc tt in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* _ : Ty.tuple :=
              let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.read (mk_str "Login failed!
") in
              let* Œ±1 :
                  Ty.apply
                    (Ty.path "array")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                M.alloc [ Œ±0 ] in
              let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                M.call
                  ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
                    (pointer_coercion "Unsize" (borrow Œ±1))) in
              let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
              M.alloc Œ±3 in
            M.alloc tt) :
            Ty.tuple
        ] in
    M.read Œ±0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let mut accounts: Accounts = HashMap::new();

    let account = Account {
        username: "j.everyman",
        password: "password123",
    };

    let account_info = AccountInfo {
        name: "John Everyman",
        email: "j.everyman@email.com",
    };

    accounts.insert(account, account_info);

    try_logon(&accounts, "j.everyman", "psasword123");

    try_logon(&accounts, "j.everyman", "password123");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* accounts :
        Ty.apply
          (Ty.path "std::collections::hash::map::HashMap")
          [Ty.apply
              (Ty.path "hash_map_alternate_or_custom_key_types::Account")
              [];
            Ty.apply
              (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
              [];
            Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "std::collections::hash::map::HashMap")
            [Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                [];
              Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
                [];
              Ty.apply (Ty.path "std::hash::random::RandomState") []] :=
        M.call
          (Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [Ty.apply
                  (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                  [];
                Ty.apply
                  (Ty.path
                    "hash_map_alternate_or_custom_key_types::AccountInfo")
                  [];
                Ty.apply
                  (Ty.path "std::hash::random::RandomState")
                  []])::["new"] in
      M.alloc Œ±0 in
    let* account :
        Ty.apply
          (Ty.path "hash_map_alternate_or_custom_key_types::Account")
          [] :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "j.everyman") in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "password123") in
      M.alloc
        {|
          hash_map_alternate_or_custom_key_types.Account.username := Œ±0;
          hash_map_alternate_or_custom_key_types.Account.password := Œ±1;
        |} in
    let* account_info :
        Ty.apply
          (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
          [] :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "John Everyman") in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "j.everyman@email.com") in
      M.alloc
        {|
          hash_map_alternate_or_custom_key_types.AccountInfo.name := Œ±0;
          hash_map_alternate_or_custom_key_types.AccountInfo.email := Œ±1;
        |} in
    let* _ :
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply
              (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
              []] :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "hash_map_alternate_or_custom_key_types::Account")
            [] :=
        M.read account in
      let* Œ±1 :
          Ty.apply
            (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
            [] :=
        M.read account_info in
      let* Œ±2 :
          Ty.apply
            (Ty.path "core::option::Option")
            [Ty.apply
                (Ty.path "hash_map_alternate_or_custom_key_types::AccountInfo")
                []] :=
        M.call
          ((Ty.apply
                (Ty.path "std::collections::hash::map::HashMap")
                [Ty.apply
                    (Ty.path "hash_map_alternate_or_custom_key_types::Account")
                    [];
                  Ty.apply
                    (Ty.path
                      "hash_map_alternate_or_custom_key_types::AccountInfo")
                    [];
                  Ty.apply
                    (Ty.path "std::hash::random::RandomState")
                    []])::["insert"]
            (borrow_mut accounts)
            Œ±0
            Œ±1) in
      M.alloc Œ±2 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "j.everyman") in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "psasword123") in
      let* Œ±2 : Ty.tuple :=
        M.call
          (hash_map_alternate_or_custom_key_types.try_logon
            (borrow accounts)
            Œ±0
            Œ±1) in
      M.alloc Œ±2 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "j.everyman") in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "password123") in
      let* Œ±2 : Ty.tuple :=
        M.call
          (hash_map_alternate_or_custom_key_types.try_logon
            (borrow accounts)
            Œ±0
            Œ±1) in
      M.alloc Œ±2 in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
