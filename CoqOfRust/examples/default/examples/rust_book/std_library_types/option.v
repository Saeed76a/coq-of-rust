(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn checked_division(dividend: i32, divisor: i32) -> Option<i32> {
    if divisor == 0 {
        // Failure is represented as the `None` variant
        None
    } else {
        // Result is wrapped in a `Some` variant
        Some(dividend / divisor)
    }
}
*)
Definition checked_division (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ dividend; divisor ] =>
    let* dividend := M.alloc dividend in
    let* divisor := M.alloc divisor in
    let* α0 := M.var "BinOp::Pure::eq" in
    let* α1 := M.read divisor in
    let* α2 := M.alloc (α0 α1 ((Integer.of_Z 0) : Ty.path "i32")) in
    let* α3 := M.read (use α2) in
    let* α4 :=
      if α3 then
        M.alloc core.option.Option.None
      else
        let* α0 := M.var "BinOp::Panic::div" in
        let* α1 := M.read dividend in
        let* α2 := M.read divisor in
        let* α3 := α0 α1 α2 in
        M.alloc (Value.StructTuple "core::option::Option::Some" [ α3 ]) in
    M.read α4
  | _, _ => M.impossible
  end.

(*
fn try_division(dividend: i32, divisor: i32) {
    // `Option` values can be pattern matched, just like other enums
    match checked_division(dividend, divisor) {
        None => println!("{} / {} failed!", dividend, divisor),
        Some(quotient) => {
            println!("{} / {} = {}", dividend, divisor, quotient)
        }
    }
}
*)
Definition try_division (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ dividend; divisor ] =>
    let* dividend := M.alloc dividend in
    let* divisor := M.alloc divisor in
    let* α0 := M.var "option::checked_division" in
    let* α1 := M.read dividend in
    let* α2 := M.read divisor in
    let* α3 := M.call α0 [ α1; α2 ] in
    let* α4 := M.alloc α3 in
    let* α5 :=
      match_operator
        α4
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.None =>
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "") in
                let* α2 := M.read (mk_str " / ") in
                let* α3 := M.read (mk_str " failed!
") in
                let* α4 := M.alloc [ α1; α2; α3 ] in
                let* α5 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow dividend ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow divisor ] in
                let* α7 := M.alloc [ α5; α6 ] in
                let* α8 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α4);
                      pointer_coercion "Unsize" (borrow α7)
                    ] in
                let* α9 := M.call α0 [ α8 ] in
                M.alloc α9 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::option::Option::Get_Some_0" in
                M.pure (α0 γ) in
              let* quotient := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "") in
                let* α2 := M.read (mk_str " / ") in
                let* α3 := M.read (mk_str " = ") in
                let* α4 := M.read (mk_str "
") in
                let* α5 := M.alloc [ α1; α2; α3; α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow dividend ] in
                let* α7 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow divisor ] in
                let* α8 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow quotient ] in
                let* α9 := M.alloc [ α6; α7; α8 ] in
                let* α10 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α5);
                      pointer_coercion "Unsize" (borrow α9)
                    ] in
                let* α11 := M.call α0 [ α10 ] in
                M.alloc α11 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple []
        ] in
    M.read α5
  | _, _ => M.impossible
  end.

(*
fn main() {
    try_division(4, 2);
    try_division(1, 0);

    // Binding `None` to a variable needs to be type annotated
    let none: Option<i32> = None;
    let _equivalent_none = None::<i32>;

    let optional_float = Some(0f32);

    // Unwrapping a `Some` variant will extract the value wrapped.
    println!(
        "{:?} unwraps to {:?}",
        optional_float,
        optional_float.unwrap()
    );

    // Unwrapping a `None` variant will `panic!`
    println!("{:?} unwraps to {:?}", none, none.unwrap());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* α0 := M.var "option::try_division" in
      let* α1 :=
        M.call
          α0
          [ (Integer.of_Z 4) : Ty.path "i32"; (Integer.of_Z 2) : Ty.path "i32"
          ] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.var "option::try_division" in
      let* α1 :=
        M.call
          α0
          [ (Integer.of_Z 1) : Ty.path "i32"; (Integer.of_Z 0) : Ty.path "i32"
          ] in
      M.alloc α1 in
    let* none := M.alloc core.option.Option.None in
    let* _equivalent_none := M.alloc core.option.Option.None in
    let* optional_float :=
      let* α0 := M.read (UnsupportedLiteral : Ty.path "f32") in
      M.alloc (Value.StructTuple "core::option::Option::Some" [ α0 ]) in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str " unwraps to ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc [ α1; α2; α3 ] in
        let* α5 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow optional_float ] in
        let* α6 := M.read optional_float in
        let* α7 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "f32" ])::["unwrap"]
            [ α6 ] in
        let* α8 := M.alloc α7 in
        let* α9 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow α8 ] in
        let* α10 := M.alloc [ α5; α9 ] in
        let* α11 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α4);
              pointer_coercion "Unsize" (borrow α10)
            ] in
        let* α12 := M.call α0 [ α11 ] in
        M.alloc α12 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str " unwraps to ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc [ α1; α2; α3 ] in
        let* α5 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow none ] in
        let* α6 := M.read none in
        let* α7 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "i32" ])::["unwrap"]
            [ α6 ] in
        let* α8 := M.alloc α7 in
        let* α9 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow α8 ] in
        let* α10 := M.alloc [ α5; α9 ] in
        let* α11 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α4);
              pointer_coercion "Unsize" (borrow α10)
            ] in
        let* α12 := M.call α0 [ α11 ] in
        M.alloc α12 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
