(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // (all the type annotations are superfluous)
    // A reference to a string allocated in read only memory
    let pangram: &'static str = "the quick brown fox jumps over the lazy dog";
    println!("Pangram: {}", pangram);

    // Iterate over words in reverse, no new string is allocated
    println!("Words in reverse");
    for word in pangram.split_whitespace().rev() {
        println!("> {}", word);
    }

    // Copy chars into a vector, sort and remove duplicates
    let mut chars: Vec<char> = pangram.chars().collect();
    chars.sort();
    chars.dedup();

    // Create an empty and growable `String`
    let mut string = String::new();
    for c in chars {
        // Insert a char at the end of string
        string.push(c);
        // Insert a string at the end of string
        string.push_str(", ");
    }

    // The trimmed string is a slice to the original string, hence no new
    // allocation is performed
    let chars_to_trim: &[char] = &[' ', ','];
    let trimmed_str: &str = string.trim_matches(chars_to_trim);
    println!("Used characters: {}", trimmed_str);

    // Heap allocate a string
    let alice = String::from("I like dogs");
    // Allocate new memory and store the modified string there
    let bob: String = alice.replace("dog", "cat");

    println!("Alice says: {}", alice);
    println!("Bob says: {}", bob);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* pangram :=
      M.copy (mk_str "the quick brown fox jumps over the lazy dog") in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Pangram: ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow pangram ] in
        let* α4 := M.alloc [ α3 ] in
        let* α5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α2);
              pointer_coercion "Unsize" (borrow α4)
            ] in
        let* α6 := M.call (M.var "std::io::stdio::_print") [ α5 ] in
        M.alloc α6 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Words in reverse
") in
        let* α1 := M.alloc [ α0 ] in
        let* α2 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α1) ] in
        let* α3 := M.call (M.var "std::io::stdio::_print") [ α2 ] in
        M.alloc α3 in
      M.alloc tt in
    let* _ :=
      let* α0 :=
        M.get_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply
                (Ty.path "core::iter::adapters::rev::Rev")
                [ Ty.path "core::str::iter::SplitWhitespace" ]
          ] in
      let* α1 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "rev"
          [ (* Self *) Ty.path "core::str::iter::SplitWhitespace" ] in
      let* α2 := M.read pangram in
      let* α3 := M.call (Ty.path "str")::["split_whitespace"] [ α2 ] in
      let* α4 := M.call α1 [ α3 ] in
      let* α5 := M.call α0 [ α4 ] in
      let* α6 := M.alloc α5 in
      let* α7 :=
        match_operator
          α6
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ :=
                  let* α0 :=
                    M.get_method
                      "core::iter::traits::iterator::Iterator"
                      "next"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            [ Ty.path "core::str::iter::SplitWhitespace" ]
                      ] in
                  let* α1 := M.call α0 [ borrow_mut iter ] in
                  let* α2 := M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match 
                        end) :
                        Ty.tuple [];
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let γ0_0 :=
                            (M.var "core::option::Option::Get_Some_0") γ in
                          let* word := M.copy γ0_0 in
                          let* _ :=
                            let* _ :=
                              let* α0 := M.read (mk_str "> ") in
                              let* α1 := M.read (mk_str "
") in
                              let* α2 := M.alloc [ α0; α1 ] in
                              let* α3 :=
                                M.call
                                  (Ty.path
                                      "core::fmt::rt::Argument")::["new_display"]
                                  [ borrow word ] in
                              let* α4 := M.alloc [ α3 ] in
                              let* α5 :=
                                M.call
                                  (Ty.path "core::fmt::Arguments")::["new_v1"]
                                  [
                                    pointer_coercion "Unsize" (borrow α2);
                                    pointer_coercion "Unsize" (borrow α4)
                                  ] in
                              let* α6 :=
                                M.call
                                  (M.var "std::io::stdio::_print")
                                  [ α5 ] in
                              M.alloc α6 in
                            M.alloc tt in
                          M.alloc tt
                        | _ => M.break_match 
                        end) :
                        Ty.tuple []
                    ] in
                M.alloc tt)) :
              Ty.tuple []
          ] in
      M.pure (use α7) in
    let* chars :=
      let* α0 :=
        M.get_method
          "core::iter::traits::iterator::Iterator"
          "collect"
          [
            (* Self *) Ty.path "core::str::iter::Chars";
            (* B *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "char"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α1 := M.read pangram in
      let* α2 := M.call (Ty.path "str")::["chars"] [ α1 ] in
      let* α3 := M.call α0 [ α2 ] in
      M.alloc α3 in
    let* _ :=
      let* α0 :=
        M.get_method
          "core::ops::deref::DerefMut"
          "deref_mut"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "char"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α1 := M.call α0 [ borrow_mut chars ] in
      let* α2 :=
        M.call
          (Ty.apply (Ty.path "slice") [ Ty.path "char" ])::["sort"]
          [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "char"; Ty.path "alloc::alloc::Global" ])::["dedup"]
          [ borrow_mut chars ] in
      M.alloc α0 in
    let* string :=
      let* α0 := M.call (Ty.path "alloc::string::String")::["new"] [] in
      M.alloc α0 in
    let* _ :=
      let* α0 :=
        M.get_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "char"; Ty.path "alloc::alloc::Global" ]
          ] in
      let* α1 := M.read chars in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 := M.alloc α2 in
      let* α4 :=
        match_operator
          α3
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ :=
                  let* α0 :=
                    M.get_method
                      "core::iter::traits::iterator::Iterator"
                      "next"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            [ Ty.path "char"; Ty.path "alloc::alloc::Global" ]
                      ] in
                  let* α1 := M.call α0 [ borrow_mut iter ] in
                  let* α2 := M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match 
                        end) :
                        Ty.tuple [];
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let γ0_0 :=
                            (M.var "core::option::Option::Get_Some_0") γ in
                          let* c := M.copy γ0_0 in
                          let* _ :=
                            let* α0 := M.read c in
                            let* α1 :=
                              M.call
                                (Ty.path "alloc::string::String")::["push"]
                                [ borrow_mut string; α0 ] in
                            M.alloc α1 in
                          let* _ :=
                            let* α0 := M.read (mk_str ", ") in
                            let* α1 :=
                              M.call
                                (Ty.path "alloc::string::String")::["push_str"]
                                [ borrow_mut string; α0 ] in
                            M.alloc α1 in
                          M.alloc tt
                        | _ => M.break_match 
                        end) :
                        Ty.tuple []
                    ] in
                M.alloc tt)) :
              Ty.tuple []
          ] in
      M.pure (use α4) in
    let* chars_to_trim :=
      let* α0 := M.alloc [ " "%char; ","%char ] in
      M.alloc (pointer_coercion "Unsize" (borrow α0)) in
    let* trimmed_str :=
      let* α0 :=
        M.get_method
          "core::ops::deref::Deref"
          "deref"
          [ (* Self *) Ty.path "alloc::string::String" ] in
      let* α1 := M.call α0 [ borrow string ] in
      let* α2 := M.read chars_to_trim in
      let* α3 := M.call (Ty.path "str")::["trim_matches"] [ α1; α2 ] in
      M.alloc α3 in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Used characters: ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow trimmed_str ] in
        let* α4 := M.alloc [ α3 ] in
        let* α5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α2);
              pointer_coercion "Unsize" (borrow α4)
            ] in
        let* α6 := M.call (M.var "std::io::stdio::_print") [ α5 ] in
        M.alloc α6 in
      M.alloc tt in
    let* alice :=
      let* α0 :=
        M.get_method
          "core::convert::From"
          "from"
          [
            (* Self *) Ty.path "alloc::string::String";
            (* T *) Ty.apply (Ty.path "ref") [ Ty.path "str" ]
          ] in
      let* α1 := M.read (mk_str "I like dogs") in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* bob :=
      let* α0 :=
        M.get_method
          "core::ops::deref::Deref"
          "deref"
          [ (* Self *) Ty.path "alloc::string::String" ] in
      let* α1 := M.call α0 [ borrow alice ] in
      let* α2 := M.read (mk_str "dog") in
      let* α3 := M.read (mk_str "cat") in
      let* α4 := M.call (Ty.path "str")::["replace"] [ α1; α2; α3 ] in
      M.alloc α4 in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Alice says: ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow alice ] in
        let* α4 := M.alloc [ α3 ] in
        let* α5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α2);
              pointer_coercion "Unsize" (borrow α4)
            ] in
        let* α6 := M.call (M.var "std::io::stdio::_print") [ α5 ] in
        M.alloc α6 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Bob says: ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow bob ] in
        let* α4 := M.alloc [ α3 ] in
        let* α5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α2);
              pointer_coercion "Unsize" (borrow α4)
            ] in
        let* α6 := M.call (M.var "std::io::stdio::_print") [ α5 ] in
        M.alloc α6 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
