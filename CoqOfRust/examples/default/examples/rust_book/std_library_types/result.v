(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module checked.
  (* Enum MathError *)
  (* {
    ty_params := [];
    variants :=
      [
        {
          name := "DivisionByZero";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "NonPositiveLogarithm";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "NegativeSquareRoot";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  } *)
  
  Module Impl_core_fmt_Debug_for_result_checked_MathError.
    Definition Self : Ty.t := Ty.path "result::checked::MathError".
    
    (*
        Debug
    *)
    Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
      match 𝜏, α with
      | [], [ self; f ] =>
        let* self := M.alloc self in
        let* f := M.alloc f in
        let* α0 :=
          M.get_associated_function
            (Ty.path "core::fmt::Formatter")
            "write_str" in
        let* α1 := M.read f in
        let* α2 :=
          match_operator
            self
            [
              fun γ =>
                let* γ := M.read γ in
                let* α0 := M.read (mk_str "DivisionByZero") in
                M.alloc α0;
              fun γ =>
                let* γ := M.read γ in
                let* α0 := M.read (mk_str "NonPositiveLogarithm") in
                M.alloc α0;
              fun γ =>
                let* γ := M.read γ in
                let* α0 := M.read (mk_str "NegativeSquareRoot") in
                M.alloc α0
            ] in
        let* α3 := M.read α2 in
        M.call α0 [ α1; α3 ]
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Self *) (Ty.path "result::checked::MathError")
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_result_checked_MathError.
  
  Axiom MathResult :
    (Ty.path "result::checked::MathResult") =
      (Ty.apply
        (Ty.path "core::result::Result")
        [ Ty.path "f64"; Ty.path "result::checked::MathError" ]).
  
  (*
      pub fn div(x: f64, y: f64) -> MathResult {
          if y == 0.0 {
              // This operation would `fail`, instead let's return the reason of
              // the failure wrapped in `Err`
              Err(MathError::DivisionByZero)
          } else {
              // This operation is valid, return the result wrapped in `Ok`
              Ok(x / y)
          }
      }
  *)
  Definition div (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ x; y ] =>
      let* x := M.alloc x in
      let* y := M.alloc y in
      let* α0 := M.read y in
      let* α1 := M.read UnsupportedLiteral in
      let* α2 := M.alloc (BinOp.Pure.eq α0 α1) in
      let* α3 := M.read (M.use α2) in
      let* α4 :=
        if Value.is_true α3 then
          M.alloc
            (Value.StructTuple
              "core::result::Result::Err"
              [
                Value.StructTuple
                  "result::checked::MathError::DivisionByZero"
                  []
              ])
        else
          let* α0 := M.read x in
          let* α1 := M.read y in
          let* α2 := BinOp.Panic.div α0 α1 in
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ α2 ]) in
      M.read α4
    | _, _ => M.impossible
    end.
  
  (*
      pub fn sqrt(x: f64) -> MathResult {
          if x < 0.0 {
              Err(MathError::NegativeSquareRoot)
          } else {
              Ok(x.sqrt())
          }
      }
  *)
  Definition sqrt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ x ] =>
      let* x := M.alloc x in
      let* α0 := M.read x in
      let* α1 := M.read UnsupportedLiteral in
      let* α2 := M.alloc (BinOp.Pure.lt α0 α1) in
      let* α3 := M.read (M.use α2) in
      let* α4 :=
        if Value.is_true α3 then
          M.alloc
            (Value.StructTuple
              "core::result::Result::Err"
              [
                Value.StructTuple
                  "result::checked::MathError::NegativeSquareRoot"
                  []
              ])
        else
          let* α0 := M.get_associated_function (Ty.path "f64") "sqrt" in
          let* α1 := M.read x in
          let* α2 := M.call α0 [ α1 ] in
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ α2 ]) in
      M.read α4
    | _, _ => M.impossible
    end.
  
  (*
      pub fn ln(x: f64) -> MathResult {
          if x <= 0.0 {
              Err(MathError::NonPositiveLogarithm)
          } else {
              Ok(x.ln())
          }
      }
  *)
  Definition ln (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ x ] =>
      let* x := M.alloc x in
      let* α0 := M.read x in
      let* α1 := M.read UnsupportedLiteral in
      let* α2 := M.alloc (BinOp.Pure.le α0 α1) in
      let* α3 := M.read (M.use α2) in
      let* α4 :=
        if Value.is_true α3 then
          M.alloc
            (Value.StructTuple
              "core::result::Result::Err"
              [
                Value.StructTuple
                  "result::checked::MathError::NonPositiveLogarithm"
                  []
              ])
        else
          let* α0 := M.get_associated_function (Ty.path "f64") "ln" in
          let* α1 := M.read x in
          let* α2 := M.call α0 [ α1 ] in
          M.alloc (Value.StructTuple "core::result::Result::Ok" [ α2 ]) in
      M.read α4
    | _, _ => M.impossible
    end.
End checked.

(*
fn op(x: f64, y: f64) -> f64 {
    // This is a three level match pyramid!
    match checked::div(x, y) {
        Err(why) => panic!("{:?}", why),
        Ok(ratio) => match checked::ln(ratio) {
            Err(why) => panic!("{:?}", why),
            Ok(ln) => match checked::sqrt(ln) {
                Err(why) => panic!("{:?}", why),
                Ok(sqrt) => sqrt,
            },
        },
    }
}
*)
Definition op (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ x; y ] =>
    let* x := M.alloc x in
    let* y := M.alloc y in
    let* α0 := M.get_function "result::checked::div" [] in
    let* α1 := M.read x in
    let* α2 := M.read y in
    let* α3 := M.call α0 [ α1; α2 ] in
    let* α4 := M.alloc α3 in
    let* α5 :=
      match_operator
        α4
        [
          fun γ =>
            let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Err"
                0 in
            let* why := M.copy γ0_0 in
            let* α0 := M.get_function "core::panicking::panic_fmt" [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_v1" in
            let* α2 := M.read (mk_str "") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            let* α4 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_debug" in
            let* α5 := M.call α4 [ why ] in
            let* α6 := M.alloc (Value.Array [ α5 ]) in
            let* α7 :=
              M.call
                α1
                [
                  M.pointer_coercion (* Unsize *) α3;
                  M.pointer_coercion (* Unsize *) α6
                ] in
            let* α8 := M.call α0 [ α7 ] in
            let* α9 := M.never_to_any α8 in
            M.alloc α9;
          fun γ =>
            let* γ0_0 :=
              M.get_struct_tuple_field_or_break_match
                γ
                "core::result::Result::Ok"
                0 in
            let* ratio := M.copy γ0_0 in
            let* α0 := M.get_function "result::checked::ln" [] in
            let* α1 := M.read ratio in
            let* α2 := M.call α0 [ α1 ] in
            let* α3 := M.alloc α2 in
            match_operator
              α3
              [
                fun γ =>
                  let* γ0_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ
                      "core::result::Result::Err"
                      0 in
                  let* why := M.copy γ0_0 in
                  let* α0 := M.get_function "core::panicking::panic_fmt" [] in
                  let* α1 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::Arguments")
                      "new_v1" in
                  let* α2 := M.read (mk_str "") in
                  let* α3 := M.alloc (Value.Array [ α2 ]) in
                  let* α4 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::rt::Argument")
                      "new_debug" in
                  let* α5 := M.call α4 [ why ] in
                  let* α6 := M.alloc (Value.Array [ α5 ]) in
                  let* α7 :=
                    M.call
                      α1
                      [
                        M.pointer_coercion (* Unsize *) α3;
                        M.pointer_coercion (* Unsize *) α6
                      ] in
                  let* α8 := M.call α0 [ α7 ] in
                  let* α9 := M.never_to_any α8 in
                  M.alloc α9;
                fun γ =>
                  let* γ0_0 :=
                    M.get_struct_tuple_field_or_break_match
                      γ
                      "core::result::Result::Ok"
                      0 in
                  let* ln := M.copy γ0_0 in
                  let* α0 := M.get_function "result::checked::sqrt" [] in
                  let* α1 := M.read ln in
                  let* α2 := M.call α0 [ α1 ] in
                  let* α3 := M.alloc α2 in
                  match_operator
                    α3
                    [
                      fun γ =>
                        let* γ0_0 :=
                          M.get_struct_tuple_field_or_break_match
                            γ
                            "core::result::Result::Err"
                            0 in
                        let* why := M.copy γ0_0 in
                        let* α0 :=
                          M.get_function "core::panicking::panic_fmt" [] in
                        let* α1 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::Arguments")
                            "new_v1" in
                        let* α2 := M.read (mk_str "") in
                        let* α3 := M.alloc (Value.Array [ α2 ]) in
                        let* α4 :=
                          M.get_associated_function
                            (Ty.path "core::fmt::rt::Argument")
                            "new_debug" in
                        let* α5 := M.call α4 [ why ] in
                        let* α6 := M.alloc (Value.Array [ α5 ]) in
                        let* α7 :=
                          M.call
                            α1
                            [
                              M.pointer_coercion (* Unsize *) α3;
                              M.pointer_coercion (* Unsize *) α6
                            ] in
                        let* α8 := M.call α0 [ α7 ] in
                        let* α9 := M.never_to_any α8 in
                        M.alloc α9;
                      fun γ =>
                        let* γ0_0 :=
                          M.get_struct_tuple_field_or_break_match
                            γ
                            "core::result::Result::Ok"
                            0 in
                        let* sqrt := M.copy γ0_0 in
                        M.pure sqrt
                    ]
              ]
        ] in
    M.read α5
  | _, _ => M.impossible
  end.

(*
fn main() {
    // Will this fail?
    println!("{}", op(1.0, 10.0));
}
*)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_display" in
        let* α6 := M.get_function "result::op" [] in
        let* α7 := M.read UnsupportedLiteral in
        let* α8 := M.read UnsupportedLiteral in
        let* α9 := M.call α6 [ α7; α8 ] in
        let* α10 := M.alloc α9 in
        let* α11 := M.call α5 [ α10 ] in
        let* α12 := M.alloc (Value.Array [ α11 ]) in
        let* α13 :=
          M.call
            α1
            [
              M.pointer_coercion (* Unsize *) α4;
              M.pointer_coercion (* Unsize *) α12
            ] in
        let* α14 := M.call α0 [ α13 ] in
        M.alloc α14 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
