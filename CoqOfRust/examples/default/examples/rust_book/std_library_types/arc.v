(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // This variable declaration is where its value is specified.
    let apple = Arc::new("the same apple");

    for _ in 0..10 {
        // Here there is no value specification as it is a pointer to a
        // reference in the memory heap.
        let apple = Arc::clone(&apple);

        thread::spawn(move || {
            // As Arc was used, threads can be spawned using the value allocated
            // in the Arc variable pointer's location.
            println!("{:?}", apple);
        });
    }

    // Make sure all Arc instances are printed from spawned threads.
    thread::sleep(Duration::from_secs(1));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* apple :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "alloc::sync::Arc")
            [
              Ty.apply (Ty.path "ref") [ Ty.path "str" ];
              Ty.path "alloc::alloc::Global"
            ])
          "new" in
      let* α1 := M.read (mk_str "the same apple") in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::collect::IntoIterator"
          "into_iter"
          [
            (* Self *)
              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "i32" ]
          ] in
      let* α1 :=
        M.call
          α0
          [
            Value.StructRecord
              "core::ops::range::Range"
              [
                ("start", Value.Integer Integer.I32 0);
                ("end_", Value.Integer Integer.I32 10)
              ]
          ] in
      let* α2 := M.alloc α1 in
      let* α3 :=
        match_operator
          α2
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ :=
                  let* α0 :=
                    M.get_trait_method
                      "core::iter::traits::iterator::Iterator"
                      "next"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::ops::range::Range")
                            [ Ty.path "i32" ]
                      ] in
                  let* α1 := M.call α0 [ iter ] in
                  let* α2 := M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := M.never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match 
                        end);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let* γ0_0 :=
                            let* α0 :=
                              M.var "core::option::Option::Get_Some_0" in
                            M.pure (α0 γ) in
                          let* apple :=
                            let* α0 :=
                              M.get_trait_method
                                "core::clone::Clone"
                                "clone"
                                [
                                  (* Self *)
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.apply
                                          (Ty.path "ref")
                                          [ Ty.path "str" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                ] in
                            let* α1 := M.call α0 [ apple ] in
                            M.alloc α1 in
                          let* _ :=
                            let* α0 := M.get_function "std::thread::spawn" in
                            let* α1 :=
                              M.call
                                α0
                                [
                                  fun (α0 : Ty.path "unit") =>
                                    (let* α0 := M.alloc α0 in
                                    match_operator
                                      α0
                                      [
                                        fun γ =>
                                          (let* _ :=
                                            let* _ :=
                                              let* α0 :=
                                                M.get_function
                                                  "std::io::stdio::_print" in
                                              let* α1 :=
                                                M.get_associated_function
                                                  (Ty.path
                                                    "core::fmt::Arguments")
                                                  "new_v1" in
                                              let* α2 := M.read (mk_str "") in
                                              let* α3 := M.read (mk_str "
") in
                                              let* α4 := M.alloc [ α2; α3 ] in
                                              let* α5 :=
                                                M.get_associated_function
                                                  (Ty.path
                                                    "core::fmt::rt::Argument")
                                                  "new_debug" in
                                              let* α6 := M.call α5 [ apple ] in
                                              let* α7 := M.alloc [ α6 ] in
                                              let* α8 :=
                                                M.call
                                                  α1
                                                  [
                                                    M.pointer_coercion
                                                      "Unsize"
                                                      α4;
                                                    M.pointer_coercion
                                                      "Unsize"
                                                      α7
                                                  ] in
                                              let* α9 := M.call α0 [ α8 ] in
                                              M.alloc α9 in
                                            M.alloc (Value.Tuple []) in
                                          let* α0 := M.alloc (Value.Tuple []) in
                                          M.read α0)
                                      ])
                                ] in
                            M.alloc α1 in
                          M.alloc (Value.Tuple [])
                        | _ => M.break_match 
                        end)
                    ] in
                M.alloc (Value.Tuple [])))
          ] in
      M.pure (M.use α3) in
    let* _ :=
      let* α0 := M.get_function "std::thread::sleep" in
      let* α1 :=
        M.get_associated_function
          (Ty.path "core::time::Duration")
          "from_secs" in
      let* α2 := M.call α1 [ Value.Integer Integer.U64 1 ] in
      let* α3 := M.call α0 [ α2 ] in
      M.alloc α3 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
