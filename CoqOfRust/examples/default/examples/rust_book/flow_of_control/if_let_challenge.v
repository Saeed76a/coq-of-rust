(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



(*
fn main() {
    let a = Foo::Bar;

    // Variable a matches Foo::Bar
    if let Foo::Bar = a {
        // ^-- this causes a compile-time error. Use `if let` instead.
        println!("a is foobar");
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* a : Ty.apply (Ty.path "if_let_challenge::Foo") [] :=
      M.alloc if_let_challenge.Foo.Bar in
    let* α0 : Ty.tuple :=
      match_operator
        a
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | if_let_challenge.Foo.Bar =>
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "a is foobar
") in
                  let* α1 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ α0 ] in
                  let* α2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_const"]
                        (pointer_coercion "Unsize" (borrow α1))) in
                  let* α3 : Ty.tuple := M.call (std.io.stdio._print α2) in
                  M.alloc α3 in
                M.alloc tt in
              M.alloc tt
            end) :
            Ty.tuple;
          fun γ => (M.alloc tt) : Ty.path "unit"
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
