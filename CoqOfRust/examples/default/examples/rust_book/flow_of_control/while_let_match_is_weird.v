(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Make `optional` of type `Option<i32>`
    let mut optional = Some(0);

    // Repeatedly try this test.
    loop {
        match optional {
            // If `optional` destructures, evaluate the block.
            Some(i) => {
                if i > 9 {
                    println!("Greater than 9, quit!");
                    optional = None;
                } else {
                    println!("`i` is `{:?}`. Try again.", i);
                    optional = Some(i + 1);
                }
                // ^ Requires 3 indentations!
            }
            // Quit the loop when the destructure fails:
            _ => {
                break;
            } // ^ Why should this be required? There must be a better way!
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* optional : Ty.apply (Ty.path "core::option::Option") [Ty.path "i32"] :=
      M.alloc (core.option.Option.Some ((Integer.of_Z 0) : Ty.path "i32")) in
    let* α0 : Ty.tuple :=
      M.loop
        (match_operator
          optional
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.option.Option.Some _ =>
                let γ0_0 := core.option.Option.Get_Some_0 γ in
                let* i := M.copy γ0_0 in
                let* α0 : Ty.path "i32" := M.read i in
                let* α1 : Ty.path "bool" :=
                  M.alloc
                    (BinOp.Pure.gt α0 ((Integer.of_Z 9) : Ty.path "i32")) in
                let* α2 : Ty.path "bool" := M.read (use α1) in
                if α2 then
                  let* _ : Ty.tuple :=
                    let* _ : Ty.tuple :=
                      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                        M.read (mk_str "Greater than 9, quit!
") in
                      let* α1 :
                          Ty.apply
                            (Ty.path "array")
                            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                        M.alloc [ α0 ] in
                      let* α2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                        M.call
                          ((Ty.apply
                                (Ty.path "core::fmt::Arguments")
                                [])::["new_const"]
                            (pointer_coercion "Unsize" (borrow α1))) in
                      let* α3 : Ty.tuple := M.call (std.io.stdio._print α2) in
                      M.alloc α3 in
                    M.alloc tt in
                  let* _ : Ty.tuple :=
                    assign optional core.option.Option.None in
                  M.alloc tt
                else
                  let* _ : Ty.tuple :=
                    let* _ : Ty.tuple :=
                      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                        M.read (mk_str "`i` is `") in
                      let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                        M.read (mk_str "`. Try again.
") in
                      let* α2 :
                          Ty.apply
                            (Ty.path "array")
                            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                        M.alloc [ α0; α1 ] in
                      let* α3 :
                          Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                        M.call
                          ((Ty.apply
                                (Ty.path "core::fmt::rt::Argument")
                                [])::["new_debug"]
                            (borrow i)) in
                      let* α4 :
                          Ty.apply
                            (Ty.path "array")
                            [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                        M.alloc [ α3 ] in
                      let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                        M.call
                          ((Ty.apply
                                (Ty.path "core::fmt::Arguments")
                                [])::["new_v1"]
                            (pointer_coercion "Unsize" (borrow α2))
                            (pointer_coercion "Unsize" (borrow α4))) in
                      let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                      M.alloc α6 in
                    M.alloc tt in
                  let* _ : Ty.tuple :=
                    let* α0 : Ty.path "i32" := M.read i in
                    let* α1 : Ty.path "i32" :=
                      BinOp.Panic.add α0 ((Integer.of_Z 1) : Ty.path "i32") in
                    assign optional (core.option.Option.Some α1) in
                  M.alloc tt
              | _ => M.break_match
              end) :
              Ty.tuple;
            fun γ =>
              (let* α0 : Ty.path "never" := M.break in
              let* α1 : Ty.path "never" := M.read α0 in
              let* α2 : Ty.tuple := never_to_any α1 in
              M.alloc α2) :
              Ty.tuple
          ]) in
    M.read α0
  | _, _ => M.impossible
  end.
