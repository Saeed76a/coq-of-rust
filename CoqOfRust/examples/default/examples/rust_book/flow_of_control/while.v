(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // A counter variable
    let mut n = 1;

    // Loop while `n` is less than 101
    while n < 101 {
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }

        // Increment counter
        n += 1;
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* n := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
    let* α0 :=
      M.loop
        (let* α0 := M.var "BinOp::Pure::lt" in
        let* α1 := M.read n in
        let* α2 := M.alloc (α0 α1 ((Integer.of_Z 101) : Ty.path "i32")) in
        let* α3 := M.read (use α2) in
        if α3 then
          let* _ :=
            let* α0 := M.var "BinOp::Pure::eq" in
            let* α1 := M.var "BinOp::Panic::rem" in
            let* α2 := M.read n in
            let* α3 := α1 α2 ((Integer.of_Z 15) : Ty.path "i32") in
            let* α4 := M.alloc (α0 α3 ((Integer.of_Z 0) : Ty.path "i32")) in
            let* α5 := M.read (use α4) in
            if α5 then
              let* _ :=
                let* _ :=
                  let* α0 := M.var "std::io::stdio::_print" in
                  let* α1 := M.read (mk_str "fizzbuzz
") in
                  let* α2 := M.alloc [ α1 ] in
                  let* α3 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_const"]
                      [ pointer_coercion "Unsize" α2 ] in
                  let* α4 := M.call α0 [ α3 ] in
                  M.alloc α4 in
                M.alloc tt in
              M.alloc tt
            else
              let* α0 := M.var "BinOp::Pure::eq" in
              let* α1 := M.var "BinOp::Panic::rem" in
              let* α2 := M.read n in
              let* α3 := α1 α2 ((Integer.of_Z 3) : Ty.path "i32") in
              let* α4 := M.alloc (α0 α3 ((Integer.of_Z 0) : Ty.path "i32")) in
              let* α5 := M.read (use α4) in
              if α5 then
                let* _ :=
                  let* _ :=
                    let* α0 := M.var "std::io::stdio::_print" in
                    let* α1 := M.read (mk_str "fizz
") in
                    let* α2 := M.alloc [ α1 ] in
                    let* α3 :=
                      M.call
                        (Ty.path "core::fmt::Arguments")::["new_const"]
                        [ pointer_coercion "Unsize" α2 ] in
                    let* α4 := M.call α0 [ α3 ] in
                    M.alloc α4 in
                  M.alloc tt in
                M.alloc tt
              else
                let* α0 := M.var "BinOp::Pure::eq" in
                let* α1 := M.var "BinOp::Panic::rem" in
                let* α2 := M.read n in
                let* α3 := α1 α2 ((Integer.of_Z 5) : Ty.path "i32") in
                let* α4 := M.alloc (α0 α3 ((Integer.of_Z 0) : Ty.path "i32")) in
                let* α5 := M.read (use α4) in
                if α5 then
                  let* _ :=
                    let* _ :=
                      let* α0 := M.var "std::io::stdio::_print" in
                      let* α1 := M.read (mk_str "buzz
") in
                      let* α2 := M.alloc [ α1 ] in
                      let* α3 :=
                        M.call
                          (Ty.path "core::fmt::Arguments")::["new_const"]
                          [ pointer_coercion "Unsize" α2 ] in
                      let* α4 := M.call α0 [ α3 ] in
                      M.alloc α4 in
                    M.alloc tt in
                  M.alloc tt
                else
                  let* _ :=
                    let* _ :=
                      let* α0 := M.var "std::io::stdio::_print" in
                      let* α1 := M.read (mk_str "") in
                      let* α2 := M.read (mk_str "
") in
                      let* α3 := M.alloc [ α1; α2 ] in
                      let* α4 :=
                        M.call
                          (Ty.path "core::fmt::rt::Argument")::["new_display"]
                          [ n ] in
                      let* α5 := M.alloc [ α4 ] in
                      let* α6 :=
                        M.call
                          (Ty.path "core::fmt::Arguments")::["new_v1"]
                          [
                            pointer_coercion "Unsize" α3;
                            pointer_coercion "Unsize" α5
                          ] in
                      let* α7 := M.call α0 [ α6 ] in
                      M.alloc α7 in
                    M.alloc tt in
                  M.alloc tt in
          let* _ :=
            let β := n in
            let* α0 := M.var "assign" in
            let* α1 := M.var "BinOp::Panic::add" in
            let* α2 := M.read β in
            let* α3 := α1 α2 ((Integer.of_Z 1) : Ty.path "i32") in
            α0 β α3 in
          M.alloc tt
        else
          let* _ :=
            let* α0 := M.break in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2 in
          let* α0 := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 := never_to_any α1 in
          M.alloc α2) in
    M.read α0
  | _, _ => M.impossible
  end.
