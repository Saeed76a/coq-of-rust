(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // A counter variable
    let mut n = 1;

    // Loop while `n` is less than 101
    while n < 101 {
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }

        // Increment counter
        n += 1;
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* n := M.alloc ((Integer.of_Z 1) : Ty.path "i32") in
    let* α0 :=
      M.loop
        (let* α0 := M.read n in
        let* α1 :=
          M.alloc
            ((M.var "BinOp::Pure::lt")
              α0
              ((Integer.of_Z 101) : Ty.path "i32")) in
        let* α2 := M.read (use α1) in
        if α2 then
          let* _ :=
            let* α0 := M.read n in
            let* α1 :=
              (M.var "BinOp::Panic::rem")
                α0
                ((Integer.of_Z 15) : Ty.path "i32") in
            let* α2 :=
              M.alloc
                ((M.var "BinOp::Pure::eq")
                  α1
                  ((Integer.of_Z 0) : Ty.path "i32")) in
            let* α3 := M.read (use α2) in
            if α3 then
              let* _ :=
                let* _ :=
                  let* α0 := M.read (mk_str "fizzbuzz
") in
                  let* α1 := M.alloc [ α0 ] in
                  let* α2 :=
                    M.call
                      ((Ty.path "core::fmt::Arguments")::["new_const"]
                        (pointer_coercion "Unsize" (borrow α1))) in
                  let* α3 := M.call ((M.var "std::io::stdio::_print") α2) in
                  M.alloc α3 in
                M.alloc tt in
              M.alloc tt
            else
              let* α0 := M.read n in
              let* α1 :=
                (M.var "BinOp::Panic::rem")
                  α0
                  ((Integer.of_Z 3) : Ty.path "i32") in
              let* α2 :=
                M.alloc
                  ((M.var "BinOp::Pure::eq")
                    α1
                    ((Integer.of_Z 0) : Ty.path "i32")) in
              let* α3 := M.read (use α2) in
              if α3 then
                let* _ :=
                  let* _ :=
                    let* α0 := M.read (mk_str "fizz
") in
                    let* α1 := M.alloc [ α0 ] in
                    let* α2 :=
                      M.call
                        ((Ty.path "core::fmt::Arguments")::["new_const"]
                          (pointer_coercion "Unsize" (borrow α1))) in
                    let* α3 := M.call ((M.var "std::io::stdio::_print") α2) in
                    M.alloc α3 in
                  M.alloc tt in
                M.alloc tt
              else
                let* α0 := M.read n in
                let* α1 :=
                  (M.var "BinOp::Panic::rem")
                    α0
                    ((Integer.of_Z 5) : Ty.path "i32") in
                let* α2 :=
                  M.alloc
                    ((M.var "BinOp::Pure::eq")
                      α1
                      ((Integer.of_Z 0) : Ty.path "i32")) in
                let* α3 := M.read (use α2) in
                if α3 then
                  let* _ :=
                    let* _ :=
                      let* α0 := M.read (mk_str "buzz
") in
                      let* α1 := M.alloc [ α0 ] in
                      let* α2 :=
                        M.call
                          ((Ty.path "core::fmt::Arguments")::["new_const"]
                            (pointer_coercion "Unsize" (borrow α1))) in
                      let* α3 := M.call ((M.var "std::io::stdio::_print") α2) in
                      M.alloc α3 in
                    M.alloc tt in
                  M.alloc tt
                else
                  let* _ :=
                    let* _ :=
                      let* α0 := M.read (mk_str "") in
                      let* α1 := M.read (mk_str "
") in
                      let* α2 := M.alloc [ α0; α1 ] in
                      let* α3 :=
                        M.call
                          ((Ty.path "core::fmt::rt::Argument")::["new_display"]
                            (borrow n)) in
                      let* α4 := M.alloc [ α3 ] in
                      let* α5 :=
                        M.call
                          ((Ty.path "core::fmt::Arguments")::["new_v1"]
                            (pointer_coercion "Unsize" (borrow α2))
                            (pointer_coercion "Unsize" (borrow α4))) in
                      let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
                      M.alloc α6 in
                    M.alloc tt in
                  M.alloc tt in
          let* _ :=
            let β := n in
            let* α0 := M.read β in
            let* α1 :=
              (M.var "BinOp::Panic::add")
                α0
                ((Integer.of_Z 1) : Ty.path "i32") in
            (M.var "assign") β α1 in
          M.alloc tt
        else
          let* _ :=
            let* α0 := M.break in
            let* α1 := M.read α0 in
            let* α2 := never_to_any α1 in
            M.alloc α2 in
          let* α0 := M.alloc tt in
          let* α1 := M.read α0 in
          let* α2 := never_to_any α1 in
          M.alloc α2) in
    M.read α0
  | _, _ => M.impossible
  end.
