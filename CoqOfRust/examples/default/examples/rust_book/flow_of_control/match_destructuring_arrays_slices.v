(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Try changing the values in the array, or make it a slice!
    let array = [1, -2, 6];

    match array {
        // Binds the second and the third elements to the respective variables
        [0, second, third] => println!("array[0] = 0, array[1] = {}, array[2] = {}", second, third),

        // Single values can be ignored with _
        [1, _, third] => println!(
            "array[0] = 1, array[2] = {} and array[1] was ignored",
            third
        ),

        // You can also bind some and ignore the rest
        [-1, second, ..] => println!(
            "array[0] = -1, array[1] = {} and all the other ones were ignored",
            second
        ),
        // The code below would not compile
        // [-1, second] => ...

        // Or store them in another array/slice (the type depends on
        // that of the value that is being matched against)
        [3, second, tail @ ..] => println!(
            "array[0] = 3, array[1] = {} and the other elements were {:?}",
            second, tail
        ),

        // Combining these patterns, we can, for example, bind the first and
        // last values, and store the rest of them in a single array
        [first, middle @ .., last] => println!(
            "array[0] = {}, middle = {:?}, array[2] = {}",
            first, middle, last
        ),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* array_ :=
      M.alloc
        [
          (Integer.of_Z 1) : Ty.path "i32";
          (Integer.of_Z (-2)) : Ty.path "i32";
          (Integer.of_Z 6) : Ty.path "i32"
        ] in
    let* α0 :=
      match_operator
        array_
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | [_; _; _] =>
              let γ0_0 := [0] γ in
              let γ0_1 := [1] γ in
              let γ0_2 := [2] γ in
              let* α0 := M.read γ0_0 in
              match α0 with
              | i32.Make 0 =>
                let* second := M.copy γ0_1 in
                let* third := M.copy γ0_2 in
                let* _ :=
                  let* α0 := M.read (mk_str "array[0] = 0, array[1] = ") in
                  let* α1 := M.read (mk_str ", array[2] = ") in
                  let* α2 := M.read (mk_str "
") in
                  let* α3 := M.alloc [ α0; α1; α2 ] in
                  let* α4 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow second)) in
                  let* α5 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow third)) in
                  let* α6 := M.alloc [ α4; α5 ] in
                  let* α7 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α3))
                        (pointer_coercion "Unsize" (borrow α6))) in
                  let* α8 := M.call ((M.var "std::io::stdio::_print") α7) in
                  M.alloc α8 in
                M.alloc tt
              | _ => M.break_match
              end
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | [_; _; _] =>
              let γ0_0 := [0] γ in
              let γ0_1 := [1] γ in
              let γ0_2 := [2] γ in
              let* α0 := M.read γ0_0 in
              match α0 with
              | i32.Make 1 =>
                let* third := M.copy γ0_2 in
                let* _ :=
                  let* α0 := M.read (mk_str "array[0] = 1, array[2] = ") in
                  let* α1 := M.read (mk_str " and array[1] was ignored
") in
                  let* α2 := M.alloc [ α0; α1 ] in
                  let* α3 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow third)) in
                  let* α4 := M.alloc [ α3 ] in
                  let* α5 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α4))) in
                  let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
                  M.alloc α6 in
                M.alloc tt
              | _ => M.break_match
              end
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | (_:: _:: _) =>
              let γ0_0 := [0] γ in
              let γ0_1 := [1] γ in
              let γ0_slice := [2].slice γ in
              let* α0 := M.read γ0_0 in
              match α0 with
              | i32.Make (-1) =>
                let* second := M.copy γ0_1 in
                let* _ :=
                  let* α0 := M.read (mk_str "array[0] = -1, array[1] = ") in
                  let* α1 :=
                    M.read (mk_str " and all the other ones were ignored
") in
                  let* α2 := M.alloc [ α0; α1 ] in
                  let* α3 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow second)) in
                  let* α4 := M.alloc [ α3 ] in
                  let* α5 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α4))) in
                  let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
                  M.alloc α6 in
                M.alloc tt
              | _ => M.break_match
              end
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | (_:: _:: _) =>
              let γ0_0 := [0] γ in
              let γ0_1 := [1] γ in
              let γ0_slice := [2].slice γ in
              let* α0 := M.read γ0_0 in
              match α0 with
              | i32.Make 3 =>
                let* second := M.copy γ0_1 in
                let* tail := M.copy γ0_slice in
                let* _ :=
                  let* α0 := M.read (mk_str "array[0] = 3, array[1] = ") in
                  let* α1 := M.read (mk_str " and the other elements were ") in
                  let* α2 := M.read (mk_str "
") in
                  let* α3 := M.alloc [ α0; α1; α2 ] in
                  let* α4 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow second)) in
                  let* α5 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_debug"]
                        (borrow tail)) in
                  let* α6 := M.alloc [ α4; α5 ] in
                  let* α7 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α3))
                        (pointer_coercion "Unsize" (borrow α6))) in
                  let* α8 := M.call ((M.var "std::io::stdio::_print") α7) in
                  M.alloc α8 in
                M.alloc tt
              | _ => M.break_match
              end
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun γ =>
            (let* _ :=
              let* α0 := M.read (mk_str "array[0] = ") in
              let* α1 := M.read (mk_str ", middle = ") in
              let* α2 := M.read (mk_str ", array[2] = ") in
              let* α3 := M.read (mk_str "
") in
              let* α4 := M.alloc [ α0; α1; α2; α3 ] in
              let* α5 :=
                M.call
                  ((Ty.apply
                        (Ty.path "core::fmt::rt::Argument")
                        [])::["new_display"]
                    (borrow first)) in
              let* α6 :=
                M.call
                  ((Ty.apply
                        (Ty.path "core::fmt::rt::Argument")
                        [])::["new_debug"]
                    (borrow middle)) in
              let* α7 :=
                M.call
                  ((Ty.apply
                        (Ty.path "core::fmt::rt::Argument")
                        [])::["new_display"]
                    (borrow last)) in
              let* α8 := M.alloc [ α5; α6; α7 ] in
              let* α9 :=
                M.call
                  ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α4))
                    (pointer_coercion "Unsize" (borrow α8))) in
              let* α10 := M.call ((M.var "std::io::stdio::_print") α9) in
              M.alloc α10 in
            M.alloc tt) :
            Ty.tuple
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
