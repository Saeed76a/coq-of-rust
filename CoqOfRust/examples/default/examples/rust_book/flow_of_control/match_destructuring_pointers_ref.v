(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Assign a reference of type `i32`. The `&` signifies there
    // is a reference being assigned.
    let reference = &4;

    match reference {
        // If `reference` is pattern matched against `&val`, it results
        // in a comparison like:
        // `&i32`
        // `&val`
        // ^ We see that if the matching `&`s are dropped, then the `i32`
        // should be assigned to `val`.
        &val => println!("Got a value via destructuring: {:?}", val),
    }

    // To avoid the `&`, you dereference before matching.
    match *reference {
        val => println!("Got a value via dereferencing: {:?}", val),
    }

    // What if you don't start with a reference? `reference` was a `&`
    // because the right side was already a reference. This is not
    // a reference because the right side is not one.
    let _not_a_reference = 3;

    // Rust provides `ref` for exactly this purpose. It modifies the
    // assignment so that a reference is created for the element; this
    // reference is assigned.
    let ref _is_a_reference = 3;

    // Accordingly, by defining 2 values without references, references
    // can be retrieved via `ref` and `ref mut`.
    let value = 5;
    let mut mut_value = 6;

    // Use `ref` keyword to create a reference.
    match value {
        ref r => println!("Got a reference to a value: {:?}", r),
    }

    // Use `ref mut` similarly.
    match mut_value {
        ref mut m => {
            // Got a reference. Gotta dereference it before we can
            // add anything to it.
            *m += 10;
            println!("We added 10. `mut_value`: {:?}", m);
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* reference :=
      let* α0 := M.alloc ((Integer.of_Z 4) : Ty.path "i32") in
      M.alloc (borrow α0) in
    let* _ :=
      match_operator
        reference
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* val := M.copy γ in
            let* _ :=
              let* α0 := M.read (mk_str "Got a value via destructuring: ") in
              let* α1 := M.read (mk_str "
") in
              let* α2 := M.alloc [ α0; α1 ] in
              let* α3 :=
                M.call
                  ((Ty.path "core::fmt::rt::Argument")::["new_debug"]
                    (borrow val)) in
              let* α4 := M.alloc [ α3 ] in
              let* α5 :=
                M.call
                  ((Ty.path "core::fmt::Arguments")::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
              M.alloc α6 in
            M.alloc tt) :
            Ty.tuple []
        ] in
    let* _ :=
      let* α0 := M.read reference in
      match_operator
        (deref α0)
        [
          fun γ =>
            (let* val := M.copy γ in
            let* _ :=
              let* α0 := M.read (mk_str "Got a value via dereferencing: ") in
              let* α1 := M.read (mk_str "
") in
              let* α2 := M.alloc [ α0; α1 ] in
              let* α3 :=
                M.call
                  ((Ty.path "core::fmt::rt::Argument")::["new_debug"]
                    (borrow val)) in
              let* α4 := M.alloc [ α3 ] in
              let* α5 :=
                M.call
                  ((Ty.path "core::fmt::Arguments")::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
              M.alloc α6 in
            M.alloc tt) :
            Ty.tuple []
        ] in
    let* _not_a_reference := M.alloc ((Integer.of_Z 3) : Ty.path "i32") in
    let* α0 := M.alloc ((Integer.of_Z 3) : Ty.path "i32") in
    let* α0 :=
      match_operator
        α0
        [
          fun γ =>
            (let* _is_a_reference := M.alloc (borrow γ) in
            let* value := M.alloc ((Integer.of_Z 5) : Ty.path "i32") in
            let* mut_value := M.alloc ((Integer.of_Z 6) : Ty.path "i32") in
            let* _ :=
              match_operator
                value
                [
                  fun γ =>
                    (let* r := M.alloc (borrow γ) in
                    let* _ :=
                      let* α0 :=
                        M.read (mk_str "Got a reference to a value: ") in
                      let* α1 := M.read (mk_str "
") in
                      let* α2 := M.alloc [ α0; α1 ] in
                      let* α3 :=
                        M.call
                          ((Ty.path "core::fmt::rt::Argument")::["new_debug"]
                            (borrow r)) in
                      let* α4 := M.alloc [ α3 ] in
                      let* α5 :=
                        M.call
                          ((Ty.path "core::fmt::Arguments")::["new_v1"]
                            (pointer_coercion "Unsize" (borrow α2))
                            (pointer_coercion "Unsize" (borrow α4))) in
                      let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
                      M.alloc α6 in
                    M.alloc tt) :
                    Ty.tuple []
                ] in
            match_operator
              mut_value
              [
                fun γ =>
                  (let* m := M.alloc (borrow_mut γ) in
                  let* _ :=
                    let* β :=
                      let* α0 := M.read m in
                      M.pure (deref α0) in
                    let* α0 := M.read β in
                    let* α1 :=
                      (M.var "BinOp::Panic::add")
                        α0
                        ((Integer.of_Z 10) : Ty.path "i32") in
                    (M.var "assign") β α1 in
                  let* _ :=
                    let* _ :=
                      let* α0 := M.read (mk_str "We added 10. `mut_value`: ") in
                      let* α1 := M.read (mk_str "
") in
                      let* α2 := M.alloc [ α0; α1 ] in
                      let* α3 :=
                        M.call
                          ((Ty.path "core::fmt::rt::Argument")::["new_debug"]
                            (borrow m)) in
                      let* α4 := M.alloc [ α3 ] in
                      let* α5 :=
                        M.call
                          ((Ty.path "core::fmt::Arguments")::["new_v1"]
                            (pointer_coercion "Unsize" (borrow α2))
                            (pointer_coercion "Unsize" (borrow α4))) in
                      let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
                      M.alloc α6 in
                    M.alloc tt in
                  M.alloc tt) :
                  Ty.tuple []
              ]) :
            Ty.tuple []
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
