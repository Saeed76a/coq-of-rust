(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Foo *)

(*
fn main() {
    // Try changing the values in the struct to see what happens
    let foo = Foo { x: (1, 2), y: 3 };

    match foo {
        Foo { x: (1, b), y } => println!("First of x is 1, b = {},  y = {} ", b, y),

        // you can destructure structs and rename the variables,
        // the order is not important
        Foo { y: 2, x: i } => println!("y is 2, i = {:?}", i),

        // and you can also ignore some variables:
        Foo { y, .. } => println!("y = {}, we don't care about x", y),
        // this will give an error: pattern does not mention field `x`
        //Foo { y } => println!("y = {}", y),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* foo :=
      M.alloc
        (Value.StructRecord
          "match_destructuring_structs::Foo"
          [
            ("x",
              ((Integer.of_Z 1) : Ty.path "u32",
                (Integer.of_Z 2) : Ty.path "u32"));
            ("y", (Integer.of_Z 3) : Ty.path "u32")
          ]) in
    let* α0 :=
      match_operator
        foo
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            |
                {|
                  match_destructuring_structs.Foo.x := _;
                  match_destructuring_structs.Foo.y := _;
                |}
                =>
              let* γ0_0 :=
                let* α0 := M.var "match_destructuring_structs::Foo::Get_x" in
                M.pure (α0 γ) in
              let* γ0_1 :=
                let* α0 := M.var "match_destructuring_structs::Foo::Get_y" in
                M.pure (α0 γ) in
              let* α0 := M.read γ0_0 in
              match α0 with
              | (_, _) =>
                let γ1_0 := Tuple.Access.left γ0_0 in
                let γ1_1 := Tuple.Access.right γ0_0 in
                let* α0 := M.read γ1_0 in
                match α0 with
                | u32.Make 1 =>
                  let* b := M.copy γ1_1 in
                  let* y := M.copy γ0_1 in
                  let* _ :=
                    let* α0 := M.var "std::io::stdio::_print" in
                    let* α1 := M.read (mk_str "First of x is 1, b = ") in
                    let* α2 := M.read (mk_str ",  y = ") in
                    let* α3 := M.read (mk_str " 
") in
                    let* α4 := M.alloc [ α1; α2; α3 ] in
                    let* α5 :=
                      M.call
                        (Ty.path "core::fmt::rt::Argument")::["new_display"]
                        [ borrow b ] in
                    let* α6 :=
                      M.call
                        (Ty.path "core::fmt::rt::Argument")::["new_display"]
                        [ borrow y ] in
                    let* α7 := M.alloc [ α5; α6 ] in
                    let* α8 :=
                      M.call
                        (Ty.path "core::fmt::Arguments")::["new_v1"]
                        [
                          pointer_coercion "Unsize" (borrow α4);
                          pointer_coercion "Unsize" (borrow α7)
                        ] in
                    let* α9 := M.call α0 [ α8 ] in
                    M.alloc α9 in
                  M.alloc tt
                | _ => M.break_match 
                end
              end
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            |
                {|
                  match_destructuring_structs.Foo.y := _;
                  match_destructuring_structs.Foo.x := _;
                |}
                =>
              let* γ0_0 :=
                let* α0 := M.var "match_destructuring_structs::Foo::Get_y" in
                M.pure (α0 γ) in
              let* γ0_1 :=
                let* α0 := M.var "match_destructuring_structs::Foo::Get_x" in
                M.pure (α0 γ) in
              let* α0 := M.read γ0_0 in
              match α0 with
              | u32.Make 2 =>
                let* i := M.copy γ0_1 in
                let* _ :=
                  let* α0 := M.var "std::io::stdio::_print" in
                  let* α1 := M.read (mk_str "y is 2, i = ") in
                  let* α2 := M.read (mk_str "
") in
                  let* α3 := M.alloc [ α1; α2 ] in
                  let* α4 :=
                    M.call
                      (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                      [ borrow i ] in
                  let* α5 := M.alloc [ α4 ] in
                  let* α6 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_v1"]
                      [
                        pointer_coercion "Unsize" (borrow α3);
                        pointer_coercion "Unsize" (borrow α5)
                      ] in
                  let* α7 := M.call α0 [ α6 ] in
                  M.alloc α7 in
                M.alloc tt
              | _ => M.break_match 
              end
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | {| match_destructuring_structs.Foo.y := _; |} =>
              let* γ0_0 :=
                let* α0 := M.var "match_destructuring_structs::Foo::Get_y" in
                M.pure (α0 γ) in
              let* y := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "y = ") in
                let* α2 := M.read (mk_str ", we don't care about x
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow y ] in
                let* α5 := M.alloc [ α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α3);
                      pointer_coercion "Unsize" (borrow α5)
                    ] in
                let* α7 := M.call α0 [ α6 ] in
                M.alloc α7 in
              M.alloc tt
            end) :
            Ty.tuple []
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
