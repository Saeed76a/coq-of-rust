(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    'outer: loop {
        println!("Entered the outer loop");

        'inner: loop {
            println!("Entered the inner loop");

            // This would break only the inner loop
            //break;

            // This breaks the outer loop
            break 'outer;
        }

        println!("This point will never be reached");
    }

    println!("Exited the outer loop");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      M.loop
        (let* _ :=
          let* _ :=
            let* α0 := M.read (mk_str "Entered the outer loop
") in
            let* α1 := M.alloc [ α0 ] in
            let* α2 :=
              M.call
                (Ty.path "core::fmt::Arguments")::["new_const"]
                [ pointer_coercion "Unsize" (borrow α1) ] in
            let* α3 := M.call (M.var "std::io::stdio::_print") [ α2 ] in
            M.alloc α3 in
          M.alloc tt in
        let* _ :=
          let* α0 :=
            M.loop
              (let* _ :=
                let* _ :=
                  let* α0 := M.read (mk_str "Entered the inner loop
") in
                  let* α1 := M.alloc [ α0 ] in
                  let* α2 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_const"]
                      [ pointer_coercion "Unsize" (borrow α1) ] in
                  let* α3 := M.call (M.var "std::io::stdio::_print") [ α2 ] in
                  M.alloc α3 in
                M.alloc tt in
              M.break) in
          let* α1 := M.read α0 in
          let* α2 := never_to_any α1 in
          M.alloc α2 in
        let* _ :=
          let* _ :=
            let* α0 := M.read (mk_str "This point will never be reached
") in
            let* α1 := M.alloc [ α0 ] in
            let* α2 :=
              M.call
                (Ty.path "core::fmt::Arguments")::["new_const"]
                [ pointer_coercion "Unsize" (borrow α1) ] in
            let* α3 := M.call (M.var "std::io::stdio::_print") [ α2 ] in
            M.alloc α3 in
          M.alloc tt in
        M.alloc tt) in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Exited the outer loop
") in
        let* α1 := M.alloc [ α0 ] in
        let* α2 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ pointer_coercion "Unsize" (borrow α1) ] in
        let* α3 := M.call (M.var "std::io::stdio::_print") [ α2 ] in
        M.alloc α3 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
