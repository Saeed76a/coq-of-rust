(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut count = 0u32;

    println!("Let's count until infinity!");

    // Infinite loop
    loop {
        count += 1;

        if count == 3 {
            println!("three");

            // Skip the rest of this iteration
            continue;
        }

        println!("{}", count);

        if count == 5 {
            println!("OK, that's enough");

            // Exit this loop
            break;
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* count := M.alloc (Value.Integer Integer.U32 0) in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Let's count until infinity!
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_const"]
            [ M.pointer_coercion "Unsize" α2 ] in
        let* α4 := M.call α0 [ α3 ] in
        M.alloc α4 in
      M.alloc tt in
    let* α0 :=
      M.loop
        (let* _ :=
          let β := count in
          let* α0 := M.read β in
          let* α1 := BinOp.Panic.add α0 (Value.Integer Integer.U32 1) in
          M.assign β α1 in
        let* _ :=
          let* α0 := M.read count in
          let* α1 := M.alloc (BinOp.Pure.eq α0 (Value.Integer Integer.U32 3)) in
          let* α2 := M.read (M.use α1) in
          if α2 then
            let* _ :=
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "three
") in
                let* α2 := M.alloc [ α1 ] in
                let* α3 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_const"]
                    [ M.pointer_coercion "Unsize" α2 ] in
                let* α4 := M.call α0 [ α3 ] in
                M.alloc α4 in
              M.alloc tt in
            let* α0 := M.continue in
            let* α1 := M.read α0 in
            let* α2 := M.never_to_any α1 in
            M.alloc α2
          else
            M.alloc tt in
        let* _ :=
          let* _ :=
            let* α0 := M.var "std::io::stdio::_print" in
            let* α1 := M.read (mk_str "") in
            let* α2 := M.read (mk_str "
") in
            let* α3 := M.alloc [ α1; α2 ] in
            let* α4 :=
              M.call
                (Ty.path "core::fmt::rt::Argument")::["new_display"]
                [ count ] in
            let* α5 := M.alloc [ α4 ] in
            let* α6 :=
              M.call
                (Ty.path "core::fmt::Arguments")::["new_v1"]
                [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α5
                ] in
            let* α7 := M.call α0 [ α6 ] in
            M.alloc α7 in
          M.alloc tt in
        let* α0 := M.read count in
        let* α1 := M.alloc (BinOp.Pure.eq α0 (Value.Integer Integer.U32 5)) in
        let* α2 := M.read (M.use α1) in
        if α2 then
          let* _ :=
            let* _ :=
              let* α0 := M.var "std::io::stdio::_print" in
              let* α1 := M.read (mk_str "OK, that's enough
") in
              let* α2 := M.alloc [ α1 ] in
              let* α3 :=
                M.call
                  (Ty.path "core::fmt::Arguments")::["new_const"]
                  [ M.pointer_coercion "Unsize" α2 ] in
              let* α4 := M.call α0 [ α3 ] in
              M.alloc α4 in
            M.alloc tt in
          let* α0 := M.break in
          let* α1 := M.read α0 in
          let* α2 := M.never_to_any α1 in
          M.alloc α2
        else
          M.alloc tt) in
    M.read α0
  | _, _ => M.impossible
  end.
