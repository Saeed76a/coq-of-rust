(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // `n` will take the values: 1, 2, ..., 100 in each iteration
    for n in 1..101 {
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* α0 :=
      M.get_method
        "core::iter::traits::collect::IntoIterator"
        "into_iter"
        [
          (* Self *)
            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "i32" ]
        ] in
    let* α1 :=
      M.call
        α0
        [
          Value.StructRecord
            "core::ops::range::Range"
            [
              ("start", (Integer.of_Z 1) : Ty.path "i32");
              ("end_", (Integer.of_Z 101) : Ty.path "i32")
            ]
        ] in
    let* α2 := M.alloc α1 in
    let* α3 :=
      match_operator
        α2
        [
          fun γ =>
            (let* iter := M.copy γ in
            M.loop
              (let* _ :=
                let* α0 :=
                  M.get_method
                    "core::iter::traits::iterator::Iterator"
                    "next"
                    [
                      (* Self *)
                        Ty.apply
                          (Ty.path "core::ops::range::Range")
                          [ Ty.path "i32" ]
                    ] in
                let* α1 := M.call α0 [ borrow_mut iter ] in
                let* α2 := M.alloc α1 in
                match_operator
                  α2
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.None =>
                        let* α0 := M.break in
                        let* α1 := M.read α0 in
                        let* α2 := never_to_any α1 in
                        M.alloc α2
                      | _ => M.break_match 
                      end) :
                      Ty.tuple [];
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 :=
                          (M.var "core::option::Option::Get_Some_0") γ in
                        let* n := M.copy γ0_0 in
                        let* α0 := M.read n in
                        let* α1 :=
                          (M.var "BinOp::Panic::rem")
                            α0
                            ((Integer.of_Z 15) : Ty.path "i32") in
                        let* α2 :=
                          M.alloc
                            ((M.var "BinOp::Pure::eq")
                              α1
                              ((Integer.of_Z 0) : Ty.path "i32")) in
                        let* α3 := M.read (use α2) in
                        if α3 then
                          let* _ :=
                            let* _ :=
                              let* α0 := M.read (mk_str "fizzbuzz
") in
                              let* α1 := M.alloc [ α0 ] in
                              let* α2 :=
                                M.call
                                  (Ty.path
                                      "core::fmt::Arguments")::["new_const"]
                                  [ pointer_coercion "Unsize" (borrow α1) ] in
                              let* α3 :=
                                M.call
                                  (M.var "std::io::stdio::_print")
                                  [ α2 ] in
                              M.alloc α3 in
                            M.alloc tt in
                          M.alloc tt
                        else
                          let* α0 := M.read n in
                          let* α1 :=
                            (M.var "BinOp::Panic::rem")
                              α0
                              ((Integer.of_Z 3) : Ty.path "i32") in
                          let* α2 :=
                            M.alloc
                              ((M.var "BinOp::Pure::eq")
                                α1
                                ((Integer.of_Z 0) : Ty.path "i32")) in
                          let* α3 := M.read (use α2) in
                          if α3 then
                            let* _ :=
                              let* _ :=
                                let* α0 := M.read (mk_str "fizz
") in
                                let* α1 := M.alloc [ α0 ] in
                                let* α2 :=
                                  M.call
                                    (Ty.path
                                        "core::fmt::Arguments")::["new_const"]
                                    [ pointer_coercion "Unsize" (borrow α1) ] in
                                let* α3 :=
                                  M.call
                                    (M.var "std::io::stdio::_print")
                                    [ α2 ] in
                                M.alloc α3 in
                              M.alloc tt in
                            M.alloc tt
                          else
                            let* α0 := M.read n in
                            let* α1 :=
                              (M.var "BinOp::Panic::rem")
                                α0
                                ((Integer.of_Z 5) : Ty.path "i32") in
                            let* α2 :=
                              M.alloc
                                ((M.var "BinOp::Pure::eq")
                                  α1
                                  ((Integer.of_Z 0) : Ty.path "i32")) in
                            let* α3 := M.read (use α2) in
                            if α3 then
                              let* _ :=
                                let* _ :=
                                  let* α0 := M.read (mk_str "buzz
") in
                                  let* α1 := M.alloc [ α0 ] in
                                  let* α2 :=
                                    M.call
                                      (Ty.path
                                          "core::fmt::Arguments")::["new_const"]
                                      [ pointer_coercion "Unsize" (borrow α1)
                                      ] in
                                  let* α3 :=
                                    M.call
                                      (M.var "std::io::stdio::_print")
                                      [ α2 ] in
                                  M.alloc α3 in
                                M.alloc tt in
                              M.alloc tt
                            else
                              let* _ :=
                                let* _ :=
                                  let* α0 := M.read (mk_str "") in
                                  let* α1 := M.read (mk_str "
") in
                                  let* α2 := M.alloc [ α0; α1 ] in
                                  let* α3 :=
                                    M.call
                                      (Ty.path
                                          "core::fmt::rt::Argument")::["new_display"]
                                      [ borrow n ] in
                                  let* α4 := M.alloc [ α3 ] in
                                  let* α5 :=
                                    M.call
                                      (Ty.path
                                          "core::fmt::Arguments")::["new_v1"]
                                      [
                                        pointer_coercion "Unsize" (borrow α2);
                                        pointer_coercion "Unsize" (borrow α4)
                                      ] in
                                  let* α6 :=
                                    M.call
                                      (M.var "std::io::stdio::_print")
                                      [ α5 ] in
                                  M.alloc α6 in
                                M.alloc tt in
                              M.alloc tt
                      | _ => M.break_match 
                      end) :
                      Ty.tuple []
                  ] in
              M.alloc tt)) :
            Ty.tuple []
        ] in
    M.read (use α3)
  | _, _ => M.impossible
  end.
