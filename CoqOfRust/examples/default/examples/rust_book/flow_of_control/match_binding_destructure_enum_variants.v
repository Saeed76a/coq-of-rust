(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn some_number() -> Option<u32> {
    Some(42)
}
*)
Definition some_number (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    M.pure (core.option.Option.Some ((Integer.of_Z 42) : Ty.path "u32"))
  | _, _ => M.impossible
  end.

(*
fn main() {
    match some_number() {
        // Got `Some` variant, match if its value, bound to `n`,
        // is equal to 42.
        Some(n @ 42) => println!("The Answer: {}!", n),
        // Match any other number.
        Some(n) => println!("Not interesting... {}", n),
        // Match anything else (`None` variant).
        _ => (),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* α0 :=
      M.call (M.var "match_binding_destructure_enum_variants::some_number") in
    let* α1 := M.alloc α0 in
    let* α2 :=
      match_operator
        α1
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let γ0_0 := (M.var "core::option::Option::Get_Some_0") γ in
              let* n := M.copy γ0_0 in
              let* α0 := M.read γ0_0 in
              match α0 with
              | u32.Make 42 =>
                let* _ :=
                  let* α0 := M.read (mk_str "The Answer: ") in
                  let* α1 := M.read (mk_str "!
") in
                  let* α2 := M.alloc [ α0; α1 ] in
                  let* α3 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow n)) in
                  let* α4 := M.alloc [ α3 ] in
                  let* α5 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α4))) in
                  let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
                  M.alloc α6 in
                M.alloc tt
              | _ => M.break_match
              end
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let γ0_0 := (M.var "core::option::Option::Get_Some_0") γ in
              let* n := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.read (mk_str "Not interesting... ") in
                let* α1 := M.read (mk_str "
") in
                let* α2 := M.alloc [ α0; α1 ] in
                let* α3 :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow n)) in
                let* α4 := M.alloc [ α3 ] in
                let* α5 :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 := M.call ((M.var "std::io::stdio::_print") α5) in
                M.alloc α6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun γ => (M.alloc tt) : Ty.tuple
        ] in
    M.read α2
  | _, _ => M.impossible
  end.
