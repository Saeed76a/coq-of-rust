(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let n = 5;

    if n < 0 {
        print!("{} is negative", n);
    } else if n > 0 {
        print!("{} is positive", n);
    } else {
        print!("{} is zero", n);
    }

    let big_n = if n < 10 && n > -10 {
        println!(", and is a small number, increase ten-fold");

        // This expression returns an `i32`.
        10 * n
    } else {
        println!(", and is a big number, halve the number");

        // This expression must return an `i32` as well.
        n / 2
        // TODO ^ Try suppressing this expression with a semicolon.
    };
    //   ^ Don't forget to put a semicolon here! All `let` bindings need it.

    println!("{} -> {}", n, big_n);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* n := M.alloc (Value.Integer Integer.I32 5) in
    let* _ :=
      let* α0 := M.read n in
      let* α1 := M.alloc (BinOp.Pure.lt α0 (Value.Integer Integer.I32 0)) in
      let* α2 := M.read (M.use α1) in
      if Value.is_true α2 then
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_v1" in
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str " is negative") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            let* α5 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display" in
            let* α6 := M.call α5 [ n ] in
            let* α7 := M.alloc (Value.Array [ α6 ]) in
            let* α8 :=
              M.call
                α1
                [
                  M.pointer_coercion (* Unsize *) α4;
                  M.pointer_coercion (* Unsize *) α7
                ] in
            let* α9 := M.call α0 [ α8 ] in
            M.alloc α9 in
          M.alloc (Value.Tuple []) in
        M.alloc (Value.Tuple [])
      else
        let* α0 := M.read n in
        let* α1 := M.alloc (BinOp.Pure.gt α0 (Value.Integer Integer.I32 0)) in
        let* α2 := M.read (M.use α1) in
        if Value.is_true α2 then
          let* _ :=
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_v1" in
              let* α2 := M.read (mk_str "") in
              let* α3 := M.read (mk_str " is positive") in
              let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
              let* α5 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display" in
              let* α6 := M.call α5 [ n ] in
              let* α7 := M.alloc (Value.Array [ α6 ]) in
              let* α8 :=
                M.call
                  α1
                  [
                    M.pointer_coercion (* Unsize *) α4;
                    M.pointer_coercion (* Unsize *) α7
                  ] in
              let* α9 := M.call α0 [ α8 ] in
              M.alloc α9 in
            M.alloc (Value.Tuple []) in
          M.alloc (Value.Tuple [])
        else
          let* _ :=
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_v1" in
              let* α2 := M.read (mk_str "") in
              let* α3 := M.read (mk_str " is zero") in
              let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
              let* α5 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display" in
              let* α6 := M.call α5 [ n ] in
              let* α7 := M.alloc (Value.Array [ α6 ]) in
              let* α8 :=
                M.call
                  α1
                  [
                    M.pointer_coercion (* Unsize *) α4;
                    M.pointer_coercion (* Unsize *) α7
                  ] in
              let* α9 := M.call α0 [ α8 ] in
              M.alloc α9 in
            M.alloc (Value.Tuple []) in
          M.alloc (Value.Tuple []) in
    let* big_n :=
      let* α0 := M.read n in
      let* α1 := M.read n in
      let* α2 :=
        M.alloc
          (BinOp.Pure.and
            (BinOp.Pure.lt α0 (Value.Integer Integer.I32 10))
            (BinOp.Pure.gt α1 (Value.Integer Integer.I32 (-10)))) in
      let* α3 := M.read (M.use α2) in
      let* α4 :=
        if Value.is_true α3 then
          let* _ :=
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const" in
              let* α2 :=
                M.read (mk_str ", and is a small number, increase ten-fold
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
              let* α5 := M.call α0 [ α4 ] in
              M.alloc α5 in
            M.alloc (Value.Tuple []) in
          let* α0 := M.read n in
          let* α1 := BinOp.Panic.mul (Value.Integer Integer.I32 10) α0 in
          M.alloc α1
        else
          let* _ :=
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const" in
              let* α2 :=
                M.read (mk_str ", and is a big number, halve the number
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              let* α4 := M.call α1 [ M.pointer_coercion (* Unsize *) α3 ] in
              let* α5 := M.call α0 [ α4 ] in
              M.alloc α5 in
            M.alloc (Value.Tuple []) in
          let* α0 := M.read n in
          let* α1 := BinOp.Panic.div α0 (Value.Integer Integer.I32 2) in
          M.alloc α1 in
      M.copy α4 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "") in
        let* α3 := M.read (mk_str " -> ") in
        let* α4 := M.read (mk_str "
") in
        let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
        let* α6 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_display" in
        let* α7 := M.call α6 [ n ] in
        let* α8 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_display" in
        let* α9 := M.call α8 [ big_n ] in
        let* α10 := M.alloc (Value.Array [ α7; α9 ]) in
        let* α11 :=
          M.call
            α1
            [
              M.pointer_coercion (* Unsize *) α5;
              M.pointer_coercion (* Unsize *) α10
            ] in
        let* α12 := M.call α0 [ α11 ] in
        M.alloc α12 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
