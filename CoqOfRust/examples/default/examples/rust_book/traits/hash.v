(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Person *)

Module Impl_core_hash_Hash_for_hash_Person.
  (*
  Hash
  *)
  Definition hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self; __H ], [ self; state ] =>
      let* self := M.alloc self in
      let* state := M.alloc state in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::hash::Hash"
            "hash"
            [ (* Self *) Ty.path "u32"; (* H *) __H ] in
        let* α1 := M.read self in
        let* α2 := M.read state in
        let* α3 := M.call α0 [ M.get_struct_record α1 "id"; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::hash::Hash"
            "hash"
            [ (* Self *) Ty.path "alloc::string::String"; (* H *) __H ] in
        let* α1 := M.read self in
        let* α2 := M.read state in
        let* α3 := M.call α0 [ M.get_struct_record α1 "name"; α2 ] in
        M.alloc α3 in
      let* α0 :=
        M.get_trait_method
          "core::hash::Hash"
          "hash"
          [ (* Self *) Ty.path "u64"; (* H *) __H ] in
      let* α1 := M.read self in
      let* α2 := M.read state in
      let* α3 := M.call α0 [ M.get_struct_record α1 "phone"; α2 ] in
      let* α0 := M.alloc α3 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::hash::Hash"
      (* Self *) (Ty.path "hash::Person")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("hash", InstanceField.Method hash) ]
      (* Instance polymorphic types *) [].
End Impl_core_hash_Hash_for_hash_Person.

(*
fn calculate_hash<T: Hash>(t: &T) -> u64 {
    let mut s = DefaultHasher::new();
    t.hash(&mut s);
    s.finish()
}
*)
Definition calculate_hash (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [ T ], [ t ] =>
    let* t := M.alloc t in
    let* s :=
      let* α0 :=
        M.call (Ty.path "std::hash::random::DefaultHasher")::["new"] [] in
      M.alloc α0 in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::hash::Hash"
          "hash"
          [ (* Self *) T; (* H *) Ty.path "std::hash::random::DefaultHasher"
          ] in
      let* α1 := M.read t in
      let* α2 := M.call α0 [ α1; s ] in
      M.alloc α2 in
    let* α0 :=
      M.get_trait_method
        "core::hash::Hasher"
        "finish"
        [ (* Self *) Ty.path "std::hash::random::DefaultHasher" ] in
    let* α1 := M.call α0 [ s ] in
    let* α0 := M.alloc α1 in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let person1 = Person {
        id: 5,
        name: "Janet".to_string(),
        phone: 555_666_7777,
    };
    let person2 = Person {
        id: 5,
        name: "Bob".to_string(),
        phone: 555_666_7777,
    };

    assert!(calculate_hash(&person1) != calculate_hash(&person2));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* person1 :=
      let* α0 :=
        M.get_trait_method
          "alloc::string::ToString"
          "to_string"
          [ (* Self *) Ty.path "str" ] in
      let* α1 := M.read (mk_str "Janet") in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc
        (Value.StructRecord
          "hash::Person"
          [
            ("id", Value.Integer Integer.U32 5);
            ("name", α2);
            ("phone", Value.Integer Integer.U64 5556667777)
          ]) in
    let* person2 :=
      let* α0 :=
        M.get_trait_method
          "alloc::string::ToString"
          "to_string"
          [ (* Self *) Ty.path "str" ] in
      let* α1 := M.read (mk_str "Bob") in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc
        (Value.StructRecord
          "hash::Person"
          [
            ("id", Value.Integer Integer.U32 5);
            ("name", α2);
            ("phone", Value.Integer Integer.U64 5556667777)
          ]) in
    let* _ :=
      let* α0 := M.var "hash::calculate_hash" in
      let* α1 := M.call α0 [ person1 ] in
      let* α2 := M.var "hash::calculate_hash" in
      let* α3 := M.call α2 [ person2 ] in
      let* α4 := M.alloc (UnOp.not (BinOp.Pure.ne α1 α3)) in
      let* α5 := M.read (M.use α4) in
      if α5 then
        let* α0 := M.var "core::panicking::panic" in
        let* α1 :=
          M.read
            (mk_str
              "assertion failed: calculate_hash(&person1) != calculate_hash(&person2)") in
        let* α2 := M.call α0 [ α1 ] in
        let* α3 := M.never_to_any α2 in
        M.alloc α3
      else
        M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
