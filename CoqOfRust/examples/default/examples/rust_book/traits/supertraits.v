(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Trait *)
Module Person.
  
End Person.

(* Trait *)
Module Student.
  
End Student.

(* Trait *)
Module Programmer.
  
End Programmer.

(* Trait *)
Module CompSciStudent.
  
End CompSciStudent.

(*
fn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {
    format!(
        "My name is {} and I attend {}. My favorite language is {}. My Git username is {}",
        student.name(),
        student.university(),
        student.fav_language(),
        student.git_username()
    )
}
*)
Definition comp_sci_student_greeting (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ student ] =>
    let* student := M.alloc student in
    let* res :=
      let* α0 := M.get_function "alloc::fmt::format" [] in
      let* α1 :=
        M.get_associated_function
          (Ty.path "core::fmt::Arguments")
          "new_v1"
          [] in
      let* α2 := M.read (mk_str "My name is ") in
      let* α3 := M.read (mk_str " and I attend ") in
      let* α4 := M.read (mk_str ". My favorite language is ") in
      let* α5 := M.read (mk_str ". My Git username is ") in
      let* α6 := M.alloc (Value.Array [ α2; α3; α4; α5 ]) in
      let* α7 :=
        M.get_associated_function
          (Ty.path "core::fmt::rt::Argument")
          "new_display"
          [ Ty.path "alloc::string::String" ] in
      let* α8 :=
        M.get_trait_method
          "supertraits::Person"
          (Ty.dyn [ ("supertraits::CompSciStudent::Trait", []) ])
          []
          "name"
          [] in
      let* α9 := M.read student in
      let* α10 := M.call_closure α8 [ α9 ] in
      let* α11 := M.alloc α10 in
      let* α12 := M.call_closure α7 [ α11 ] in
      let* α13 :=
        M.get_associated_function
          (Ty.path "core::fmt::rt::Argument")
          "new_display"
          [ Ty.path "alloc::string::String" ] in
      let* α14 :=
        M.get_trait_method
          "supertraits::Student"
          (Ty.dyn [ ("supertraits::CompSciStudent::Trait", []) ])
          []
          "university"
          [] in
      let* α15 := M.read student in
      let* α16 := M.call_closure α14 [ α15 ] in
      let* α17 := M.alloc α16 in
      let* α18 := M.call_closure α13 [ α17 ] in
      let* α19 :=
        M.get_associated_function
          (Ty.path "core::fmt::rt::Argument")
          "new_display"
          [ Ty.path "alloc::string::String" ] in
      let* α20 :=
        M.get_trait_method
          "supertraits::Programmer"
          (Ty.dyn [ ("supertraits::CompSciStudent::Trait", []) ])
          []
          "fav_language"
          [] in
      let* α21 := M.read student in
      let* α22 := M.call_closure α20 [ α21 ] in
      let* α23 := M.alloc α22 in
      let* α24 := M.call_closure α19 [ α23 ] in
      let* α25 :=
        M.get_associated_function
          (Ty.path "core::fmt::rt::Argument")
          "new_display"
          [ Ty.path "alloc::string::String" ] in
      let* α26 :=
        M.get_trait_method
          "supertraits::CompSciStudent"
          (Ty.dyn [ ("supertraits::CompSciStudent::Trait", []) ])
          []
          "git_username"
          [] in
      let* α27 := M.read student in
      let* α28 := M.call_closure α26 [ α27 ] in
      let* α29 := M.alloc α28 in
      let* α30 := M.call_closure α25 [ α29 ] in
      let* α31 := M.alloc (Value.Array [ α12; α18; α24; α30 ]) in
      let* α32 :=
        M.call_closure
          α1
          [
            M.pointer_coercion (* Unsize *) α6;
            M.pointer_coercion (* Unsize *) α31
          ] in
      let* α33 := M.call_closure α0 [ α32 ] in
      M.alloc α33 in
    M.read res
  | _, _ => M.impossible
  end.

(*
fn main() {}
*)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] => M.pure (Value.Tuple [])
  | _, _ => M.impossible
  end.
