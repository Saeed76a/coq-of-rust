(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Trait *)
Module Person.
  
End Person.

(* Trait *)
Module Student.
  
End Student.

(* Trait *)
Module Programmer.
  
End Programmer.

(* Trait *)
Module CompSciStudent.
  
End CompSciStudent.

(*
fn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {
    format!(
        "My name is {} and I attend {}. My favorite language is {}. My Git username is {}",
        student.name(),
        student.university(),
        student.fav_language(),
        student.git_username()
    )
}
*)
Definition comp_sci_student_greeting (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [ DynT ], [ student ] =>
    let* student := M.alloc student in
    let* res :=
      let* α0 := M.var "alloc::fmt::format" in
      let* α1 := M.read (mk_str "My name is ") in
      let* α2 := M.read (mk_str " and I attend ") in
      let* α3 := M.read (mk_str ". My favorite language is ") in
      let* α4 := M.read (mk_str ". My Git username is ") in
      let* α5 := M.alloc [ α1; α2; α3; α4 ] in
      let* α6 :=
        M.get_method
          "supertraits::Person"
          "name"
          [ (* Self *) Ty.dyn [ ("supertraits::CompSciStudent::Trait", []) ]
          ] in
      let* α7 := M.read student in
      let* α8 := M.call α6 [ α7 ] in
      let* α9 := M.alloc α8 in
      let* α10 :=
        M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α9 ] in
      let* α11 :=
        M.get_method
          "supertraits::Student"
          "university"
          [ (* Self *) Ty.dyn [ ("supertraits::CompSciStudent::Trait", []) ]
          ] in
      let* α12 := M.read student in
      let* α13 := M.call α11 [ α12 ] in
      let* α14 := M.alloc α13 in
      let* α15 :=
        M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α14 ] in
      let* α16 :=
        M.get_method
          "supertraits::Programmer"
          "fav_language"
          [ (* Self *) Ty.dyn [ ("supertraits::CompSciStudent::Trait", []) ]
          ] in
      let* α17 := M.read student in
      let* α18 := M.call α16 [ α17 ] in
      let* α19 := M.alloc α18 in
      let* α20 :=
        M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α19 ] in
      let* α21 :=
        M.get_method
          "supertraits::CompSciStudent"
          "git_username"
          [ (* Self *) Ty.dyn [ ("supertraits::CompSciStudent::Trait", []) ]
          ] in
      let* α22 := M.read student in
      let* α23 := M.call α21 [ α22 ] in
      let* α24 := M.alloc α23 in
      let* α25 :=
        M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α24 ] in
      let* α26 := M.alloc [ α10; α15; α20; α25 ] in
      let* α27 :=
        M.call
          (Ty.path "core::fmt::Arguments")::["new_v1"]
          [ pointer_coercion "Unsize" α5; pointer_coercion "Unsize" α26 ] in
      let* α28 := M.call α0 [ α27 ] in
      M.alloc α28 in
    M.read res
  | _, _ => M.impossible
  end.

(*
fn main() {}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with | [], [] => M.pure tt | _, _ => M.impossible end.
