(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Animal.
Section Animal.
  Class Trait (Self : Set) : Type := {
    new : Ty.function [Ty.apply (Ty.path "ref") [Ty.path "str"]] Self;
    name :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]]
        (Ty.apply (Ty.path "ref") [Ty.path "str"]);
    noise :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]]
        (Ty.apply (Ty.path "ref") [Ty.path "str"]);
  }.
  
End Animal.
End Animal.

Module  Impl_traits_Sheep.
Section Impl_traits_Sheep.
  Definition Self : Set := Ty.apply (Ty.path "traits::Sheep") [].
  
  (*
      fn is_naked(&self) -> bool {
          self.naked
      }
  *)
  Definition is_naked (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []] :=
        M.read self in
      M.read (traits.Sheep.Get_naked (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_is_naked : Instance.t := {
    Notations.double_colon := is_naked;
  }.
End Impl_traits_Sheep.
End Impl_traits_Sheep.

Module  Impl_traits_Animal_for_traits_Sheep.
Section Impl_traits_Animal_for_traits_Sheep.
  Definition Self : Ty.t := Ty.apply (Ty.path "traits::Sheep") [].
  
  (*
      fn new(name: &'static str) -> Sheep {
          Sheep {
              name: name,
              naked: false,
          }
      }
  *)
  Definition new (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [name] =>
      let* name := M.alloc name in
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] := M.read name in
      M.pure {| traits.Sheep.name := Œ±0; traits.Sheep.naked := false; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_new : Instance.t := {
    Notations.double_colon := new;
  }.
  
  (*
      fn name(&self) -> &'static str {
          self.name
      }
  *)
  Definition name (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []] :=
        M.read self in
      M.read (traits.Sheep.Get_name (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_name : Instance.t := {
    Notations.double_colon := name;
  }.
  
  (*
      fn noise(&self) -> &'static str {
          if self.is_naked() {
              "baaaaah?"
          } else {
              "baaaaah!"
          }
      }
  *)
  Definition noise (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []] :=
        M.read self in
      let* Œ±1 : Ty.path "bool" :=
        M.call ((Ty.apply (Ty.path "traits::Sheep") [])::["is_naked"] Œ±0) in
      let* Œ±2 : Ty.path "bool" := M.alloc Œ±1 in
      let* Œ±3 : Ty.path "bool" := M.read (use Œ±2) in
      let* Œ±4 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        if Œ±3 then
          M.pure (mk_str "baaaaah?")
        else
          M.pure (mk_str "baaaaah!") in
      M.read Œ±4
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_noise : Instance.t := {
    Notations.double_colon := noise;
  }.
  
  (*
      fn talk(&self) {
          // For example, we can add some quiet contemplation.
          println!("{} pauses briefly... {}", self.name, self.noise());
      }
  *)
  Definition talk (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ : Ty.tuple :=
        let* _ : Ty.tuple :=
          let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "") in
          let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str " pauses briefly... ") in
          let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.read (mk_str "
") in
          let* Œ±3 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
            M.alloc [ Œ±0; Œ±1; Œ±2 ] in
          let* Œ±4 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "traits::Sheep") []] :=
            M.read self in
          let* Œ±5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow (traits.Sheep.Get_name (deref Œ±4)))) in
          let* Œ±6 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "traits::Sheep") []] :=
            M.read self in
          let* Œ±7 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
            M.call (noise Œ±6) in
          let* Œ±8 : Ty.apply (Ty.path "ref") [Ty.path "str"] := M.alloc Œ±7 in
          let* Œ±9 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow Œ±8)) in
          let* Œ±10 :
              Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
            M.alloc [ Œ±5; Œ±9 ] in
          let* Œ±11 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow Œ±3))
                (pointer_coercion "Unsize" (borrow Œ±10))) in
          let* Œ±12 : Ty.tuple := M.call (std.io.stdio._print Œ±11) in
          M.alloc Œ±12 in
        M.alloc tt in
      let* Œ±0 : Ty.path "unit" := M.alloc tt in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_talk : Instance.t := {
    Notations.double_colon := talk;
  }.
  
  Definition ‚Ñê : Instance.t := [("new", new);
    ("name", name);
    ("noise", noise);
    ("talk", talk)].
End Impl_traits_Animal_for_traits_Sheep.
End Impl_traits_Animal_for_traits_Sheep.

Module  Impl_traits_Sheep_2.
Section Impl_traits_Sheep_2.
  Definition Self : Set := Ty.apply (Ty.path "traits::Sheep") [].
  
  (*
      fn shear(&mut self) {
          if self.is_naked() {
              // Implementor methods can use the implementor's trait methods.
              println!("{} is already naked...", self.name());
          } else {
              println!("{} gets a haircut!", self.name);
  
              self.naked = true;
          }
      }
  *)
  Definition shear (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "traits::Sheep") []] :=
        M.read self in
      let* Œ±1 : Ty.path "bool" :=
        M.call
          ((Ty.apply (Ty.path "traits::Sheep") [])::["is_naked"]
            (borrow (deref Œ±0))) in
      let* Œ±2 : Ty.path "bool" := M.alloc Œ±1 in
      let* Œ±3 : Ty.path "bool" := M.read (use Œ±2) in
      let* Œ±4 : Ty.tuple :=
        if Œ±3 then
          let* _ : Ty.tuple :=
            let* _ : Ty.tuple :=
              let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.read (mk_str "") in
              let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.read (mk_str " is already naked...
") in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "array")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                M.alloc [ Œ±0; Œ±1 ] in
              let* Œ±3 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply (Ty.path "traits::Sheep") []]]
                    (Ty.apply (Ty.path "ref") [Ty.path "str"]) :=
                ltac:(M.get_method (fun ‚Ñê =>
                  traits.Animal.name
                    (Self := Ty.apply (Ty.path "traits::Sheep") [])
                    (Trait := ‚Ñê))) in
              let* Œ±4 :
                  Ty.apply
                    (Ty.path "mut_ref")
                    [Ty.apply (Ty.path "traits::Sheep") []] :=
                M.read self in
              let* Œ±5 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.call (Œ±3 (borrow (deref Œ±4))) in
              let* Œ±6 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.alloc Œ±5 in
              let* Œ±7 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                M.call
                  ((Ty.apply
                        (Ty.path "core::fmt::rt::Argument")
                        [])::["new_display"]
                    (borrow Œ±6)) in
              let* Œ±8 :
                  Ty.apply
                    (Ty.path "array")
                    [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                M.alloc [ Œ±7 ] in
              let* Œ±9 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                M.call
                  ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                    (pointer_coercion "Unsize" (borrow Œ±2))
                    (pointer_coercion "Unsize" (borrow Œ±8))) in
              let* Œ±10 : Ty.tuple := M.call (std.io.stdio._print Œ±9) in
              M.alloc Œ±10 in
            M.alloc tt in
          M.alloc tt
        else
          let* _ : Ty.tuple :=
            let* _ : Ty.tuple :=
              let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.read (mk_str "") in
              let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                M.read (mk_str " gets a haircut!
") in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "array")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                M.alloc [ Œ±0; Œ±1 ] in
              let* Œ±3 :
                  Ty.apply
                    (Ty.path "mut_ref")
                    [Ty.apply (Ty.path "traits::Sheep") []] :=
                M.read self in
              let* Œ±4 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                M.call
                  ((Ty.apply
                        (Ty.path "core::fmt::rt::Argument")
                        [])::["new_display"]
                    (borrow (traits.Sheep.Get_name (deref Œ±3)))) in
              let* Œ±5 :
                  Ty.apply
                    (Ty.path "array")
                    [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                M.alloc [ Œ±4 ] in
              let* Œ±6 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                M.call
                  ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                    (pointer_coercion "Unsize" (borrow Œ±2))
                    (pointer_coercion "Unsize" (borrow Œ±5))) in
              let* Œ±7 : Ty.tuple := M.call (std.io.stdio._print Œ±6) in
              M.alloc Œ±7 in
            M.alloc tt in
          let* _ : Ty.tuple :=
            let* Œ±0 :
                Ty.apply
                  (Ty.path "mut_ref")
                  [Ty.apply (Ty.path "traits::Sheep") []] :=
              M.read self in
            assign (traits.Sheep.Get_naked (deref Œ±0)) true in
          M.alloc tt in
      M.read Œ±4
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_shear : Instance.t := {
    Notations.double_colon := shear;
  }.
End Impl_traits_Sheep_2.
End Impl_traits_Sheep_2.

(*
fn main() {
    // Type annotation is necessary in this case.
    let mut dolly: Sheep = Animal::new("Dolly");
    // TODO ^ Try removing the type annotations.

    dolly.talk();
    dolly.shear();
    dolly.talk();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* dolly : Ty.apply (Ty.path "traits::Sheep") [] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.path "str"]]
            (Ty.apply (Ty.path "traits::Sheep") []) :=
        ltac:(M.get_method (fun ‚Ñê =>
          traits.Animal.new
            (Self := Ty.apply (Ty.path "traits::Sheep") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "Dolly") in
      let* Œ±2 : Ty.apply (Ty.path "traits::Sheep") [] := M.call (Œ±0 Œ±1) in
      M.alloc Œ±2 in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []]]
            Ty.tuple :=
        ltac:(M.get_method (fun ‚Ñê =>
          traits.Animal.talk
            (Self := Ty.apply (Ty.path "traits::Sheep") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.tuple := M.call (Œ±0 (borrow dolly)) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.tuple :=
        M.call
          ((Ty.apply (Ty.path "traits::Sheep") [])::["shear"]
            (borrow_mut dolly)) in
      M.alloc Œ±0 in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "traits::Sheep") []]]
            Ty.tuple :=
        ltac:(M.get_method (fun ‚Ñê =>
          traits.Animal.talk
            (Self := Ty.apply (Ty.path "traits::Sheep") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.tuple := M.call (Œ±0 (borrow dolly)) in
      M.alloc Œ±1 in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
