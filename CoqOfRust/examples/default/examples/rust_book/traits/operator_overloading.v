(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Foo *)

(* Struct Bar *)

(* Struct FooBar *)

Module Impl_core_fmt_Debug_for_operator_overloading_FooBar.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read f in
      let* α1 := M.read (mk_str "FooBar") in
      M.call (Ty.path "core::fmt::Formatter")::["write_str"] [ α0; α1 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "operator_overloading::FooBar")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_operator_overloading_FooBar.

(* Struct BarFoo *)

Module Impl_core_fmt_Debug_for_operator_overloading_BarFoo.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read f in
      let* α1 := M.read (mk_str "BarFoo") in
      M.call (Ty.path "core::fmt::Formatter")::["write_str"] [ α0; α1 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "operator_overloading::BarFoo")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo.

Module Impl_core_ops_arith_Add_operator_overloading_Bar_for_operator_overloading_Foo.
  (*
      type Output = FooBar;
  *)
  Definition Output : Set := Ty.path "operator_overloading::FooBar".
  
  (*
      fn add(self, _rhs: Bar) -> FooBar {
          println!("> Foo.add(Bar) was called");
  
          FooBar
      }
  *)
  Definition add (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _rhs ] =>
      let* self := M.alloc self in
      let* _rhs := M.alloc _rhs in
      let* _ :=
        let* _ :=
          let* α0 := M.var "std::io::stdio::_print" in
          let* α1 := M.read (mk_str "> Foo.add(Bar) was called
") in
          let* α2 := M.alloc [ α1 ] in
          let* α3 :=
            M.call
              (Ty.path "core::fmt::Arguments")::["new_const"]
              [ M.pointer_coercion "Unsize" α2 ] in
          let* α4 := M.call α0 [ α3 ] in
          M.alloc α4 in
        M.alloc tt in
      let* α0 := M.alloc operator_overloading.FooBar.Build in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::arith::Add"
      (* Self *) (Ty.path "operator_overloading::Foo")
      (* Trait polymorphic types *)
        [ (* Rhs *) Ty.path "operator_overloading::Bar" ]
      (* Instance *) [ ("Output", TODO); ("add", InstanceField.Method add) ]
      (* Instance polymorphic types *) [].
End Impl_core_ops_arith_Add_operator_overloading_Bar_for_operator_overloading_Foo.

Module Impl_core_ops_arith_Add_operator_overloading_Foo_for_operator_overloading_Bar.
  (*
      type Output = BarFoo;
  *)
  Definition Output : Set := Ty.path "operator_overloading::BarFoo".
  
  (*
      fn add(self, _rhs: Foo) -> BarFoo {
          println!("> Bar.add(Foo) was called");
  
          BarFoo
      }
  *)
  Definition add (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; _rhs ] =>
      let* self := M.alloc self in
      let* _rhs := M.alloc _rhs in
      let* _ :=
        let* _ :=
          let* α0 := M.var "std::io::stdio::_print" in
          let* α1 := M.read (mk_str "> Bar.add(Foo) was called
") in
          let* α2 := M.alloc [ α1 ] in
          let* α3 :=
            M.call
              (Ty.path "core::fmt::Arguments")::["new_const"]
              [ M.pointer_coercion "Unsize" α2 ] in
          let* α4 := M.call α0 [ α3 ] in
          M.alloc α4 in
        M.alloc tt in
      let* α0 := M.alloc operator_overloading.BarFoo.Build in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::arith::Add"
      (* Self *) (Ty.path "operator_overloading::Bar")
      (* Trait polymorphic types *)
        [ (* Rhs *) Ty.path "operator_overloading::Foo" ]
      (* Instance *) [ ("Output", TODO); ("add", InstanceField.Method add) ]
      (* Instance polymorphic types *) [].
End Impl_core_ops_arith_Add_operator_overloading_Foo_for_operator_overloading_Bar.

(*
fn main() {
    println!("Foo + Bar = {:?}", Foo + Bar);
    println!("Bar + Foo = {:?}", Bar + Foo);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Foo + Bar = ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.get_trait_method
            "core::ops::arith::Add"
            "add"
            [
              (* Self *) Ty.path "operator_overloading::Foo";
              (* Rhs *) Ty.path "operator_overloading::Bar"
            ] in
        let* α5 :=
          M.call
            α4
            [ operator_overloading.Foo.Build; operator_overloading.Bar.Build
            ] in
        let* α6 := M.alloc α5 in
        let* α7 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_debug"] [ α6 ] in
        let* α8 := M.alloc [ α7 ] in
        let* α9 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α8
            ] in
        let* α10 := M.call α0 [ α9 ] in
        M.alloc α10 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "Bar + Foo = ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.get_trait_method
            "core::ops::arith::Add"
            "add"
            [
              (* Self *) Ty.path "operator_overloading::Bar";
              (* Rhs *) Ty.path "operator_overloading::Foo"
            ] in
        let* α5 :=
          M.call
            α4
            [ operator_overloading.Bar.Build; operator_overloading.Foo.Build
            ] in
        let* α6 := M.alloc α5 in
        let* α7 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_debug"] [ α6 ] in
        let* α8 := M.alloc [ α7 ] in
        let* α9 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α8
            ] in
        let* α10 := M.call α0 [ α9 ] in
        M.alloc α10 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
