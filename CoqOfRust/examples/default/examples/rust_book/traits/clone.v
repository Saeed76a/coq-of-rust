(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_clone_Unit.
Section Impl_core_fmt_Debug_for_clone_Unit.
  Definition Self : Ty.t := Ty.apply (Ty.path "clone::Unit") [].
  
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "Unit") in
      M.call
        ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_str"] α0 α1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_clone_Unit.
End Impl_core_fmt_Debug_for_clone_Unit.

Module  Impl_core_clone_Clone_for_clone_Unit.
Section Impl_core_clone_Clone_for_clone_Unit.
  Definition Self : Ty.t := Ty.apply (Ty.path "clone::Unit") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "clone::Unit") []] :=
        M.read self in
      M.read (deref α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_clone_Unit.
End Impl_core_clone_Clone_for_clone_Unit.

Module  Impl_core_marker_Copy_for_clone_Unit.
Section Impl_core_marker_Copy_for_clone_Unit.
  Definition Self : Ty.t := Ty.apply (Ty.path "clone::Unit") [].
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_clone_Unit.
End Impl_core_marker_Copy_for_clone_Unit.



Module  Impl_core_clone_Clone_for_clone_Pair.
Section Impl_core_clone_Clone_for_clone_Pair.
  Definition Self : Ty.t := Ty.apply (Ty.path "clone::Pair") [].
  
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [Ty.path "i32";
                      Ty.apply (Ty.path "alloc::alloc::Global") []]]]
            (Ty.apply
              (Ty.path "alloc::boxed::Box")
              [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self :=
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α1 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "clone::Pair") []] :=
        M.read self in
      let* α2 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (α0 (borrow (clone.Pair.Get_0 (deref α1)))) in
      let* α3 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [Ty.path "i32";
                      Ty.apply (Ty.path "alloc::alloc::Global") []]]]
            (Ty.apply
              (Ty.path "alloc::boxed::Box")
              [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self :=
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ℐ))) in
      let* α4 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "clone::Pair") []] :=
        M.read self in
      let* α5 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (α3 (borrow (clone.Pair.Get_1 (deref α4)))) in
      M.pure (clone.Pair.Build_t α2 α5)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ℐ : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_clone_Pair.
End Impl_core_clone_Clone_for_clone_Pair.

Module  Impl_core_fmt_Debug_for_clone_Pair.
Section Impl_core_fmt_Debug_for_clone_Pair.
  Definition Self : Ty.t := Ty.apply (Ty.path "clone::Pair") [].
  
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "Pair") in
      let* α2 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "clone::Pair") []] :=
        M.read self in
      let* α3 :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "clone::Pair") []] :=
        M.read self in
      let* α4 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply
                (Ty.path "alloc::boxed::Box")
                [Ty.path "i32";
                  Ty.apply (Ty.path "alloc::alloc::Global") []]] :=
        M.alloc (borrow (clone.Pair.Get_1 (deref α3))) in
      M.call
        ((Ty.apply
              (Ty.path "core::fmt::Formatter")
              [])::["debug_tuple_field2_finish"]
          α0
          α1
          (pointer_coercion "Unsize" (borrow (clone.Pair.Get_0 (deref α2))))
          (pointer_coercion "Unsize" (borrow α4)))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_clone_Pair.
End Impl_core_fmt_Debug_for_clone_Pair.

(*
fn main() {
    // Instantiate `Unit`
    let unit = Unit;
    // Copy `Unit`, there are no resources to move
    let copied_unit = unit;

    // Both `Unit`s can be used independently
    println!("original: {:?}", unit);
    println!("copy: {:?}", copied_unit);

    // Instantiate `Pair`
    let pair = Pair(Box::new(1), Box::new(2));
    println!("original: {:?}", pair);

    // Move `pair` into `moved_pair`, moves resources
    let moved_pair = pair;
    println!("moved: {:?}", moved_pair);

    // Error! `pair` has lost its resources
    //println!("original: {:?}", pair);
    // TODO ^ Try uncommenting this line

    // Clone `moved_pair` into `cloned_pair` (resources are included)
    let cloned_pair = moved_pair.clone();
    // Drop the original pair using std::mem::drop
    drop(moved_pair);

    // Error! `moved_pair` has been dropped
    //println!("copy: {:?}", moved_pair);
    // TODO ^ Try uncommenting this line

    // The result from .clone() can still be used!
    println!("clone: {:?}", cloned_pair);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* unit_ : Ty.apply (Ty.path "clone::Unit") [] :=
      M.alloc clone.Unit.Build in
    let* copied_unit : Ty.apply (Ty.path "clone::Unit") [] := M.copy unit_ in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "original: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow unit_)) in
        let* α4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α3 ] in
        let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α4))) in
        let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
        M.alloc α6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "copy: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow copied_unit)) in
        let* α4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α3 ] in
        let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α4))) in
        let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
        M.alloc α6 in
      M.alloc tt in
    let* pair : Ty.apply (Ty.path "clone::Pair") [] :=
      let* α0 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "alloc::boxed::Box")
                [Ty.path "i32";
                  Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"]
            ((Integer.of_Z 1) : Ty.path "i32")) in
      let* α1 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "alloc::boxed::Box")
                [Ty.path "i32";
                  Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"]
            ((Integer.of_Z 2) : Ty.path "i32")) in
      M.alloc (clone.Pair.Build_t α0 α1) in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "original: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow pair)) in
        let* α4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α3 ] in
        let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α4))) in
        let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
        M.alloc α6 in
      M.alloc tt in
    let* moved_pair : Ty.apply (Ty.path "clone::Pair") [] := M.copy pair in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "moved: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow moved_pair)) in
        let* α4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α3 ] in
        let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α4))) in
        let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
        M.alloc α6 in
      M.alloc tt in
    let* cloned_pair : Ty.apply (Ty.path "clone::Pair") [] :=
      let* α0 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "clone::Pair") []]]
            (Ty.apply (Ty.path "clone::Pair") []) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self := Ty.apply (Ty.path "clone::Pair") [])
            (Trait := ℐ))) in
      let* α1 : Ty.apply (Ty.path "clone::Pair") [] :=
        M.call (α0 (borrow moved_pair)) in
      M.alloc α1 in
    let* _ : Ty.tuple :=
      let* α0 : Ty.apply (Ty.path "clone::Pair") [] := M.read moved_pair in
      let* α1 : Ty.tuple := M.call (core.mem.drop α0) in
      M.alloc α1 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "clone: ") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* α2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1 ] in
        let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow cloned_pair)) in
        let* α4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α3 ] in
        let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α4))) in
        let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
        M.alloc α6 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
