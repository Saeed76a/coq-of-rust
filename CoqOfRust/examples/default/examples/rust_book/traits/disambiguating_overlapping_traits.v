(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Trait *)
Module UsernameWidget.
  
End UsernameWidget.

(* Trait *)
Module AgeWidget.
  
End AgeWidget.

(* Struct Form *)

Module Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form.
  (*
      fn get(&self) -> String {
          self.username.clone()
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_trait_method
          "core::clone::Clone"
          "clone"
          [ (* Self *) Ty.path "alloc::string::String" ] in
      let* α1 := M.read self in
      M.call α0 [ M.get_struct_record α1 "username" ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "disambiguating_overlapping_traits::UsernameWidget"
      (* Self *) (Ty.path "disambiguating_overlapping_traits::Form")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("get", InstanceField.Method get) ]
      (* Instance polymorphic types *) [].
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form.

Module Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form.
  (*
      fn get(&self) -> u8 {
          self.age
      }
  *)
  Definition get (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record α0 "age")
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "disambiguating_overlapping_traits::AgeWidget"
      (* Self *) (Ty.path "disambiguating_overlapping_traits::Form")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("get", InstanceField.Method get) ]
      (* Instance polymorphic types *) [].
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form.

(*
fn main() {
    let form = Form {
        username: "rustacean".to_owned(),
        age: 28,
    };

    // If you uncomment this line, you'll get an error saying
    // "multiple `get` found". Because, after all, there are multiple methods
    // named `get`.
    // println!("{}", form.get());

    let username = <Form as UsernameWidget>::get(&form);
    assert_eq!(("rustacean".to_string()), username);
    let age = <Form as AgeWidget>::get(&form);
    assert_eq!(28, age);
}
*)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* form :=
      let* α0 :=
        M.get_trait_method
          "alloc::borrow::ToOwned"
          "to_owned"
          [ (* Self *) Ty.path "str" ] in
      let* α1 := M.read (mk_str "rustacean") in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc
        (Value.StructRecord
          "disambiguating_overlapping_traits::Form"
          [ ("username", α2); ("age", Value.Integer Integer.U8 28) ]) in
    let* username :=
      let* α0 :=
        M.get_trait_method
          "disambiguating_overlapping_traits::UsernameWidget"
          "get"
          [ (* Self *) Ty.path "disambiguating_overlapping_traits::Form" ] in
      let* α1 := M.call α0 [ form ] in
      M.alloc α1 in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "alloc::string::ToString"
          "to_string"
          [ (* Self *) Ty.path "str" ] in
      let* α1 := M.read (mk_str "rustacean") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 := M.alloc α2 in
      let* α4 := M.alloc (Value.Tuple [ α3; username ]) in
      match_operator
        α4
        [
          fun γ =>
            let* γ0_0 := M.get_tuple_field γ 0 in
            let* γ0_1 := M.get_tuple_field γ 1 in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 :=
              M.get_trait_method
                "core::cmp::PartialEq"
                "eq"
                [
                  (* Self *) Ty.path "alloc::string::String";
                  (* Rhs *) Ty.path "alloc::string::String"
                ] in
            let* α1 := M.read left_val in
            let* α2 := M.read right_val in
            let* α3 := M.call α0 [ α1; α2 ] in
            let* α4 := M.alloc (UnOp.Pure.not α3) in
            let* α5 := M.read (M.use α4) in
            if Value.is_true α5 then
              let* kind :=
                M.alloc
                  (Value.StructTuple "core::panicking::AssertKind::Eq" []) in
              let* α0 :=
                M.get_function
                  "core::panicking::assert_failed"
                  [
                    Ty.path "alloc::string::String";
                    Ty.path "alloc::string::String"
                  ] in
              let* α1 := M.read kind in
              let* α2 := M.read left_val in
              let* α3 := M.read right_val in
              let* α4 :=
                M.call
                  α0
                  [
                    α1;
                    α2;
                    α3;
                    Value.StructTuple "core::option::Option::None" []
                  ] in
              let* α0 := M.alloc α4 in
              let* α1 := M.read α0 in
              let* α2 := M.never_to_any α1 in
              M.alloc α2
            else
              M.alloc (Value.Tuple [])
        ] in
    let* age :=
      let* α0 :=
        M.get_trait_method
          "disambiguating_overlapping_traits::AgeWidget"
          "get"
          [ (* Self *) Ty.path "disambiguating_overlapping_traits::Form" ] in
      let* α1 := M.call α0 [ form ] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.alloc (Value.Integer Integer.U8 28) in
      let* α1 := M.alloc (Value.Tuple [ α0; age ]) in
      match_operator
        α1
        [
          fun γ =>
            let* γ0_0 := M.get_tuple_field γ 0 in
            let* γ0_1 := M.get_tuple_field γ 1 in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 := M.read left_val in
            let* α1 := M.read α0 in
            let* α2 := M.read right_val in
            let* α3 := M.read α2 in
            let* α4 := M.alloc (UnOp.Pure.not (BinOp.Pure.eq α1 α3)) in
            let* α5 := M.read (M.use α4) in
            if Value.is_true α5 then
              let* kind :=
                M.alloc
                  (Value.StructTuple "core::panicking::AssertKind::Eq" []) in
              let* α0 :=
                M.get_function
                  "core::panicking::assert_failed"
                  [ Ty.path "u8"; Ty.path "u8" ] in
              let* α1 := M.read kind in
              let* α2 := M.read left_val in
              let* α3 := M.read right_val in
              let* α4 :=
                M.call
                  α0
                  [
                    α1;
                    α2;
                    α3;
                    Value.StructTuple "core::option::Option::None" []
                  ] in
              let* α0 := M.alloc α4 in
              let* α1 := M.read α0 in
              let* α2 := M.never_to_any α1 in
              M.alloc α2
            else
              M.alloc (Value.Tuple [])
        ] in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
