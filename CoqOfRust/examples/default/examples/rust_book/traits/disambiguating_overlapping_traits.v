(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  UsernameWidget.
Section UsernameWidget.
  Class Trait (Self : Set) : Type := {
    get :
      Ty.function
        [Ty.apply (Ty.path "ref") [Self]]
        (Ty.apply (Ty.path "alloc::string::String") []);
  }.
  
End UsernameWidget.
End UsernameWidget.

Module  AgeWidget.
Section AgeWidget.
  Class Trait (Self : Set) : Type := {
    get : Ty.function [Ty.apply (Ty.path "ref") [Self]] (Ty.path "u8");
  }.
  
End AgeWidget.
End AgeWidget.



Module  Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form.
Section Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "disambiguating_overlapping_traits::Form") [].
  
  (*
      fn get(&self) -> String {
          self.username.clone()
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "alloc::string::String") []]]
            (Ty.apply (Ty.path "alloc::string::String") []) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.clone.Clone.clone
            (Self := Ty.apply (Ty.path "alloc::string::String") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "disambiguating_overlapping_traits::Form") []] :=
        M.read self in
      M.call
        (Œ±0
          (borrow
            (disambiguating_overlapping_traits.Form.Get_username (deref Œ±1))))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  Definition ‚Ñê : Instance.t := [("get", get)].
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form.
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form.

Module  Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form.
Section Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "disambiguating_overlapping_traits::Form") [].
  
  (*
      fn get(&self) -> u8 {
          self.age
      }
  *)
  Definition get (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "disambiguating_overlapping_traits::Form") []] :=
        M.read self in
      M.read (disambiguating_overlapping_traits.Form.Get_age (deref Œ±0))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_get : Instance.t := {
    Notations.double_colon := get;
  }.
  
  Definition ‚Ñê : Instance.t := [("get", get)].
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form.
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form.

(*
fn main() {
    let form = Form {
        username: "rustacean".to_owned(),
        age: 28,
    };

    // If you uncomment this line, you'll get an error saying
    // "multiple `get` found". Because, after all, there are multiple methods
    // named `get`.
    // println!("{}", form.get());

    let username = <Form as UsernameWidget>::get(&form);
    assert_eq!(("rustacean".to_string()), username);
    let age = <Form as AgeWidget>::get(&form);
    assert_eq!(28, age);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* form :
        Ty.apply (Ty.path "disambiguating_overlapping_traits::Form") [] :=
      let* Œ±0 : Ty.function [Ty.apply (Ty.path "ref") [Ty.path "str"]] _ :=
        ltac:(M.get_method (fun ‚Ñê =>
          alloc.borrow.ToOwned.to_owned
            (Self := Ty.path "str")
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "rustacean") in
      let* Œ±2 : Ty.apply (Ty.path "alloc::string::String") [] :=
        M.call (Œ±0 Œ±1) in
      M.alloc
        {|
          disambiguating_overlapping_traits.Form.username := Œ±2;
          disambiguating_overlapping_traits.Form.age :=
            (Integer.of_Z 28) : Ty.path "u8";
        |} in
    let* username : Ty.apply (Ty.path "alloc::string::String") [] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "disambiguating_overlapping_traits::Form")
                    []]]
            (Ty.apply (Ty.path "alloc::string::String") []) :=
        ltac:(M.get_method (fun ‚Ñê =>
          disambiguating_overlapping_traits.UsernameWidget.get
            (Self :=
              Ty.apply (Ty.path "disambiguating_overlapping_traits::Form") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.apply (Ty.path "alloc::string::String") [] :=
        M.call (Œ±0 (borrow form)) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.function
            [Ty.apply (Ty.path "ref") [Ty.path "str"]]
            (Ty.apply (Ty.path "alloc::string::String") []) :=
        ltac:(M.get_method (fun ‚Ñê =>
          alloc.string.ToString.to_string
            (Self := Ty.path "str")
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "rustacean") in
      let* Œ±2 : Ty.apply (Ty.path "alloc::string::String") [] :=
        M.call (Œ±0 Œ±1) in
      let* Œ±3 : Ty.apply (Ty.path "alloc::string::String") [] := M.alloc Œ±2 in
      let* Œ±4 :
          Ty.tuple
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "alloc::string::String") []])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "alloc::string::String") []]) :=
        M.alloc (borrow Œ±3, borrow username) in
      match_operator
        Œ±4
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* left_val := M.copy Œ≥0_0 in
              let* right_val := M.copy Œ≥0_1 in
              let* Œ±0 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply (Ty.path "alloc::string::String") []];
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply (Ty.path "alloc::string::String") []]]
                    (Ty.path "bool") :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.cmp.PartialEq.eq
                    (Self := Ty.apply (Ty.path "alloc::string::String") [])
                    (Rhs := Ty.apply (Ty.path "alloc::string::String") [])
                    (Trait := ‚Ñê))) in
              let* Œ±1 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "alloc::string::String") []] :=
                M.read left_val in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "alloc::string::String") []] :=
                M.read right_val in
              let* Œ±3 : Ty.path "bool" := M.call (Œ±0 Œ±1 Œ±2) in
              let* Œ±4 : Ty.path "bool" := M.alloc (UnOp.not Œ±3) in
              let* Œ±5 : Ty.path "bool" := M.read (use Œ±4) in
              if Œ±5 then
                let* kind :
                    Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.alloc core.panicking.AssertKind.Eq in
                let* Œ±0 : Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.read kind in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "alloc::string::String") []] :=
                  M.read left_val in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "alloc::string::String") []] :=
                  M.read right_val in
                let* Œ±3 : Ty.path "never" :=
                  M.call
                    (core.panicking.assert_failed
                      Œ±0
                      Œ±1
                      Œ±2
                      core.option.Option.None) in
                let* Œ±0 : Ty.path "never" := M.alloc Œ±3 in
                let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                M.alloc Œ±2
              else
                M.alloc tt
            end) :
            Ty.tuple
        ] in
    let* age : Ty.path "u8" :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply
                    (Ty.path "disambiguating_overlapping_traits::Form")
                    []]]
            (Ty.path "u8") :=
        ltac:(M.get_method (fun ‚Ñê =>
          disambiguating_overlapping_traits.AgeWidget.get
            (Self :=
              Ty.apply (Ty.path "disambiguating_overlapping_traits::Form") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.path "u8" := M.call (Œ±0 (borrow form)) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.path "u8" := M.alloc ((Integer.of_Z 28) : Ty.path "u8") in
      let* Œ±1 :
          Ty.tuple
            (Ty.apply (Ty.path "ref") [Ty.path "u8"])
            (Ty.apply (Ty.path "ref") [Ty.path "u8"]) :=
        M.alloc (borrow Œ±0, borrow age) in
      match_operator
        Œ±1
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* left_val := M.copy Œ≥0_0 in
              let* right_val := M.copy Œ≥0_1 in
              let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "u8"] :=
                M.read left_val in
              let* Œ±1 : Ty.path "u8" := M.read (deref Œ±0) in
              let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "u8"] :=
                M.read right_val in
              let* Œ±3 : Ty.path "u8" := M.read (deref Œ±2) in
              let* Œ±4 : Ty.path "bool" :=
                M.alloc (UnOp.not (BinOp.Pure.eq Œ±1 Œ±3)) in
              let* Œ±5 : Ty.path "bool" := M.read (use Œ±4) in
              if Œ±5 then
                let* kind :
                    Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.alloc core.panicking.AssertKind.Eq in
                let* Œ±0 : Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.read kind in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "u8"] :=
                  M.read left_val in
                let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "u8"] :=
                  M.read right_val in
                let* Œ±3 : Ty.path "never" :=
                  M.call
                    (core.panicking.assert_failed
                      Œ±0
                      Œ±1
                      Œ±2
                      core.option.Option.None) in
                let* Œ±0 : Ty.path "never" := M.alloc Œ±3 in
                let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                M.alloc Œ±2
              else
                M.alloc tt
            end) :
            Ty.tuple
        ] in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
