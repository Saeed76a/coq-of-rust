(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Axiom NanoSecond : Ty.path "u64".

Axiom Inch : Ty.path "u64".

Axiom U64 : Ty.path "u64".

(*
fn main() {
    // `NanoSecond` = `Inch` = `U64` = `u64`.
    let nanoseconds: NanoSecond = 5 as U64;
    let inches: Inch = 2 as U64;

    // Note that type aliases *don't* provide any extra type safety, because
    // aliases are *not* new types
    println!(
        "{} nanoseconds + {} inches = {} unit?",
        nanoseconds,
        inches,
        nanoseconds + inches
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* nanoseconds : Ty.path "u64" :=
      let* α0 : Ty.path "u64" := M.alloc ((Integer.of_Z 5) : Ty.path "u64") in
      M.copy (use α0) in
    let* inches : Ty.path "u64" :=
      let* α0 : Ty.path "u64" := M.alloc ((Integer.of_Z 2) : Ty.path "u64") in
      M.copy (use α0) in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "") in
        let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str " nanoseconds + ") in
        let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str " inches = ") in
        let* α3 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str " unit?
") in
        let* α4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ α0; α1; α2; α3 ] in
        let* α5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow nanoseconds)) in
        let* α6 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow inches)) in
        let* α7 : Ty.path "u64" := M.read nanoseconds in
        let* α8 : Ty.path "u64" := M.read inches in
        let* α9 : Ty.path "u64" := BinOp.Panic.add α7 α8 in
        let* α10 : Ty.path "u64" := M.alloc α9 in
        let* α11 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow α10)) in
        let* α12 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ α5; α6; α11 ] in
        let* α13 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow α4))
              (pointer_coercion "Unsize" (borrow α12))) in
        let* α14 : Ty.tuple := M.call (std.io.stdio._print α13) in
        M.alloc α14 in
      M.alloc tt in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
