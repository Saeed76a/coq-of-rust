(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let some_vector = vec![1, 2, 3, 4];

    let pointer = some_vector.as_ptr();
    let length = some_vector.len();

    unsafe {
        let my_slice: &[u32] = slice::from_raw_parts(pointer, length);

        assert_eq!(some_vector.as_slice(), my_slice);
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* some_vector :=
      let* α0 :=
        M.alloc
          [
            Value.Integer Integer.U32 1;
            Value.Integer Integer.U32 2;
            Value.Integer Integer.U32 3;
            Value.Integer Integer.U32 4
          ] in
      let* α1 :=
        M.call
          (alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
          [ α0 ] in
      let* α2 := M.read α1 in
      let* α3 :=
        M.call
          (Ty.apply (Ty.path "slice") [ Ty.path "u32" ])::["into_vec"]
          [ M.pointer_coercion "Unsize" α2 ] in
      M.alloc α3 in
    let* pointer :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ])::["as_ptr"]
          [ some_vector ] in
      M.alloc α0 in
    let* length :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ])::["len"]
          [ some_vector ] in
      M.alloc α0 in
    let* my_slice :=
      let* α0 := M.var "core::slice::raw::from_raw_parts" in
      let* α1 := M.read pointer in
      let* α2 := M.read length in
      let* α3 := M.call α0 [ α1; α2 ] in
      M.alloc α3 in
    let* _ :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ])::["as_slice"]
          [ some_vector ] in
      let* α1 := M.alloc α0 in
      let* α2 := M.alloc (α1, my_slice) in
      match_operator
        α2
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | (_, _) =>
              let γ0_0 := Tuple.Access.left γ in
              let γ0_1 := Tuple.Access.right γ in
              let* left_val := M.copy γ0_0 in
              let* right_val := M.copy γ0_1 in
              let* α0 :=
                M.get_trait_method
                  "core::cmp::PartialEq"
                  "eq"
                  [
                    (* Self *)
                      Ty.apply
                        (Ty.path "ref")
                        [ Ty.apply (Ty.path "slice") [ Ty.path "u32" ] ];
                    (* Rhs *)
                      Ty.apply
                        (Ty.path "ref")
                        [ Ty.apply (Ty.path "slice") [ Ty.path "u32" ] ]
                  ] in
              let* α1 := M.read left_val in
              let* α2 := M.read right_val in
              let* α3 := M.call α0 [ α1; α2 ] in
              let* α4 := M.alloc (UnOp.not α3) in
              let* α5 := M.read (M.use α4) in
              if α5 then
                let* kind := M.alloc core.panicking.AssertKind.Eq in
                let* α0 := M.var "core::panicking::assert_failed" in
                let* α1 := M.read kind in
                let* α2 := M.read left_val in
                let* α3 := M.read right_val in
                let* α4 := M.call α0 [ α1; α2; α3; core.option.Option.None ] in
                let* α0 := M.alloc α4 in
                let* α1 := M.read α0 in
                let* α2 := M.never_to_any α1 in
                M.alloc α2
              else
                M.alloc tt
            end)
        ] in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
