(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct
  {
    name := "Circle";
    ty_params := [];
    fields := [ ("radius", Ty.path "i32") ];
  } *)

Module Impl_core_fmt_Display_for_converting_to_string_Circle.
  Definition Self : Ty.t := Ty.path "converting_to_string::Circle".
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "Circle of radius {}", self.radius)
      }
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function
          (Ty.path "core::fmt::Formatter")
          "write_fmt" in
      let* α1 := M.read f in
      let* α2 :=
        M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
      let* α3 := M.read (mk_str "Circle of radius ") in
      let* α4 := M.alloc (Value.Array [ α3 ]) in
      let* α5 :=
        M.get_associated_function
          (Ty.path "core::fmt::rt::Argument")
          "new_display" in
      let* α6 := M.read self in
      let* α7 := M.call α5 [ M.get_struct_record α6 "radius" ] in
      let* α8 := M.alloc (Value.Array [ α7 ]) in
      let* α9 :=
        M.call
          α2
          [
            M.pointer_coercion (* Unsize *) α4;
            M.pointer_coercion (* Unsize *) α8
          ] in
      M.call α0 [ α1; α9 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Display"
      (* Self *) (Ty.path "converting_to_string::Circle")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Display_for_converting_to_string_Circle.

(*
fn main() {
    let circle = Circle { radius: 6 };
    circle.to_string();
}
*)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* circle :=
      M.alloc
        (Value.StructRecord
          "converting_to_string::Circle"
          [ ("radius", Value.Integer Integer.I32 6) ]) in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "alloc::string::ToString"
          "to_string"
          [ (* Self *) Ty.path "converting_to_string::Circle" ] in
      let* α1 := M.call α0 [ circle ] in
      M.alloc α1 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
