(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_convert_From_i32_for_into_Number.
Section Impl_core_convert_From_i32_for_into_Number.
  Definition Self : Ty.t := Ty.apply (Ty.path "into::Number") [].
  
  (*
      fn from(item: i32) -> Self {
          Number { value: item }
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [item] =>
      let* item := M.alloc item in
      let* Œ±0 : Ty.path "i32" := M.read item in
      M.pure {| into.Number.value := Œ±0; |}
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ‚Ñê : Instance.t := [("from", from)].
End Impl_core_convert_From_i32_for_into_Number.
End Impl_core_convert_From_i32_for_into_Number.

(*
fn main() {
    <i32 as std::convert::Into<Number>>::into(5);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* _ : Ty.apply (Ty.path "into::Number") [] :=
      let* Œ±0 :
          Ty.function [Ty.path "i32"] (Ty.apply (Ty.path "into::Number") []) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.Into.into
            (Self := Ty.path "i32")
            (T := Ty.apply (Ty.path "into::Number") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.apply (Ty.path "into::Number") [] :=
        M.call (Œ±0 ((Integer.of_Z 5) : Ty.path "i32")) in
      M.alloc Œ±1 in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
