(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_try_from_and_try_into_EvenNumber.
Section Impl_core_fmt_Debug_for_try_from_and_try_into_EvenNumber.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "EvenNumber") in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") []] :=
        M.read self in
      let* Œ±3 : Ty.apply (Ty.path "ref") [Ty.path "i32"] :=
        M.alloc (borrow (try_from_and_try_into.EvenNumber.Get_0 (deref Œ±2))) in
      M.call
        ((Ty.apply
              (Ty.path "core::fmt::Formatter")
              [])::["debug_tuple_field1_finish"]
          Œ±0
          Œ±1
          (pointer_coercion "Unsize" (borrow Œ±3)))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_try_from_and_try_into_EvenNumber.
End Impl_core_fmt_Debug_for_try_from_and_try_into_EvenNumber.

Module  Impl_core_marker_StructuralPartialEq_for_try_from_and_try_into_EvenNumber.
Section Impl_core_marker_StructuralPartialEq_for_try_from_and_try_into_EvenNumber.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [].
  
  Definition ‚Ñê : Instance.t := [].
End Impl_core_marker_StructuralPartialEq_for_try_from_and_try_into_EvenNumber.
End Impl_core_marker_StructuralPartialEq_for_try_from_and_try_into_EvenNumber.

Module  Impl_core_cmp_PartialEq_for_try_from_and_try_into_EvenNumber.
Section Impl_core_cmp_PartialEq_for_try_from_and_try_into_EvenNumber.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [].
  
  (*
  PartialEq
  *)
  Definition eq (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; other] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* Œ±0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") []] :=
        M.read self in
      let* Œ±1 : Ty.path "i32" :=
        M.read (try_from_and_try_into.EvenNumber.Get_0 (deref Œ±0)) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") []] :=
        M.read other in
      let* Œ±3 : Ty.path "i32" :=
        M.read (try_from_and_try_into.EvenNumber.Get_0 (deref Œ±2)) in
      M.pure (BinOp.Pure.eq Œ±1 Œ±3)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_eq : Instance.t := {
    Notations.double_colon := eq;
  }.
  
  Definition ‚Ñê : Instance.t := [("eq", eq); ("ne", ne)].
End Impl_core_cmp_PartialEq_for_try_from_and_try_into_EvenNumber.
End Impl_core_cmp_PartialEq_for_try_from_and_try_into_EvenNumber.

Module  Impl_core_convert_TryFrom_i32_for_try_from_and_try_into_EvenNumber.
Section Impl_core_convert_TryFrom_i32_for_try_from_and_try_into_EvenNumber.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [].
  
  (*
      type Error = ();
  *)
  Definition Error : Set := Ty.tuple.
  
  (*
      fn try_from(value: i32) -> Result<Self, Self::Error> {
          if value % 2 == 0 {
              Ok(EvenNumber(value))
          } else {
              Err(())
          }
      }
  *)
  Definition try_from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [value] =>
      let* value := M.alloc value in
      let* Œ±0 : Ty.path "i32" := M.read value in
      let* Œ±1 : Ty.path "i32" :=
        BinOp.Panic.rem Œ±0 ((Integer.of_Z 2) : Ty.path "i32") in
      let* Œ±2 : Ty.path "bool" :=
        M.alloc (BinOp.Pure.eq Œ±1 ((Integer.of_Z 0) : Ty.path "i32")) in
      let* Œ±3 : Ty.path "bool" := M.read (use Œ±2) in
      let* Œ±4 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        if Œ±3 then
          let* Œ±0 : Ty.path "i32" := M.read value in
          M.alloc
            (core.result.Result.Ok
              (try_from_and_try_into.EvenNumber.Build_t Œ±0))
        else
          M.alloc (core.result.Result.Err tt) in
      M.read Œ±4
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_try_from : Instance.t := {
    Notations.double_colon := try_from;
  }.
  
  Definition ‚Ñê : Instance.t := [("Error", Error); ("try_from", try_from)].
End Impl_core_convert_TryFrom_i32_for_try_from_and_try_into_EvenNumber.
End Impl_core_convert_TryFrom_i32_for_try_from_and_try_into_EvenNumber.

(*
fn main() {
    // TryFrom

    assert_eq!(EvenNumber::try_from(8), Ok(EvenNumber(8)));
    assert_eq!(EvenNumber::try_from(5), Err(()));

    // TryInto

    let result: Result<EvenNumber, ()> = 8i32.try_into();
    assert_eq!(result, Ok(EvenNumber(8)));
    let result: Result<EvenNumber, ()> = 5i32.try_into();
    assert_eq!(result, Err(()));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.function
            [Ty.path "i32"]
            (Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") []; _]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.TryFrom.try_from
            (Self := Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [])
            (T := Ty.path "i32")
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.call (Œ±0 ((Integer.of_Z 8) : Ty.path "i32")) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.alloc Œ±1 in
      let* Œ±3 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.alloc
          (core.result.Result.Ok
            (try_from_and_try_into.EvenNumber.Build_t
              ((Integer.of_Z 8) : Ty.path "i32"))) in
      let* Œ±4 :
          Ty.tuple
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
                    Ty.tuple]])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
                    Ty.tuple]]) :=
        M.alloc (borrow Œ±2, borrow Œ±3) in
      match_operator
        Œ±4
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* left_val := M.copy Œ≥0_0 in
              let* right_val := M.copy Œ≥0_1 in
              let* Œ±0 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply
                                (Ty.path "try_from_and_try_into::EvenNumber")
                                [];
                              Ty.tuple]];
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply
                                (Ty.path "try_from_and_try_into::EvenNumber")
                                [];
                              Ty.tuple]]]
                    (Ty.path "bool") :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.cmp.PartialEq.eq
                    (Self :=
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple])
                    (Rhs :=
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple])
                    (Trait := ‚Ñê))) in
              let* Œ±1 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple]] :=
                M.read left_val in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple]] :=
                M.read right_val in
              let* Œ±3 : Ty.path "bool" := M.call (Œ±0 Œ±1 Œ±2) in
              let* Œ±4 : Ty.path "bool" := M.alloc (UnOp.not Œ±3) in
              let* Œ±5 : Ty.path "bool" := M.read (use Œ±4) in
              if Œ±5 then
                let* kind :
                    Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.alloc core.panicking.AssertKind.Eq in
                let* Œ±0 : Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.read kind in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply
                              (Ty.path "try_from_and_try_into::EvenNumber")
                              [];
                            Ty.tuple]] :=
                  M.read left_val in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply
                              (Ty.path "try_from_and_try_into::EvenNumber")
                              [];
                            Ty.tuple]] :=
                  M.read right_val in
                let* Œ±3 : Ty.path "never" :=
                  M.call
                    (core.panicking.assert_failed
                      Œ±0
                      Œ±1
                      Œ±2
                      core.option.Option.None) in
                let* Œ±0 : Ty.path "never" := M.alloc Œ±3 in
                let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                M.alloc Œ±2
              else
                M.alloc tt
            end) :
            Ty.tuple
        ] in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.function
            [Ty.path "i32"]
            (Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") []; _]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.TryFrom.try_from
            (Self := Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [])
            (T := Ty.path "i32")
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.call (Œ±0 ((Integer.of_Z 5) : Ty.path "i32")) in
      let* Œ±2 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.alloc Œ±1 in
      let* Œ±3 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.alloc (core.result.Result.Err tt) in
      let* Œ±4 :
          Ty.tuple
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
                    Ty.tuple]])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
                    Ty.tuple]]) :=
        M.alloc (borrow Œ±2, borrow Œ±3) in
      match_operator
        Œ±4
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* left_val := M.copy Œ≥0_0 in
              let* right_val := M.copy Œ≥0_1 in
              let* Œ±0 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply
                                (Ty.path "try_from_and_try_into::EvenNumber")
                                [];
                              Ty.tuple]];
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply
                                (Ty.path "try_from_and_try_into::EvenNumber")
                                [];
                              Ty.tuple]]]
                    (Ty.path "bool") :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.cmp.PartialEq.eq
                    (Self :=
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple])
                    (Rhs :=
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple])
                    (Trait := ‚Ñê))) in
              let* Œ±1 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple]] :=
                M.read left_val in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple]] :=
                M.read right_val in
              let* Œ±3 : Ty.path "bool" := M.call (Œ±0 Œ±1 Œ±2) in
              let* Œ±4 : Ty.path "bool" := M.alloc (UnOp.not Œ±3) in
              let* Œ±5 : Ty.path "bool" := M.read (use Œ±4) in
              if Œ±5 then
                let* kind :
                    Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.alloc core.panicking.AssertKind.Eq in
                let* Œ±0 : Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.read kind in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply
                              (Ty.path "try_from_and_try_into::EvenNumber")
                              [];
                            Ty.tuple]] :=
                  M.read left_val in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply
                              (Ty.path "try_from_and_try_into::EvenNumber")
                              [];
                            Ty.tuple]] :=
                  M.read right_val in
                let* Œ±3 : Ty.path "never" :=
                  M.call
                    (core.panicking.assert_failed
                      Œ±0
                      Œ±1
                      Œ±2
                      core.option.Option.None) in
                let* Œ±0 : Ty.path "never" := M.alloc Œ±3 in
                let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                M.alloc Œ±2
              else
                M.alloc tt
            end) :
            Ty.tuple
        ] in
    let* result :
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
            Ty.tuple] :=
      let* Œ±0 :
          Ty.function
            [Ty.path "i32"]
            (Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") []; _]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.TryInto.try_into
            (Self := Ty.path "i32")
            (T := Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.call (Œ±0 ((Integer.of_Z 8) : Ty.path "i32")) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.alloc
          (core.result.Result.Ok
            (try_from_and_try_into.EvenNumber.Build_t
              ((Integer.of_Z 8) : Ty.path "i32"))) in
      let* Œ±1 :
          Ty.tuple
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
                    Ty.tuple]])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
                    Ty.tuple]]) :=
        M.alloc (borrow result, borrow Œ±0) in
      match_operator
        Œ±1
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* left_val := M.copy Œ≥0_0 in
              let* right_val := M.copy Œ≥0_1 in
              let* Œ±0 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply
                                (Ty.path "try_from_and_try_into::EvenNumber")
                                [];
                              Ty.tuple]];
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply
                                (Ty.path "try_from_and_try_into::EvenNumber")
                                [];
                              Ty.tuple]]]
                    (Ty.path "bool") :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.cmp.PartialEq.eq
                    (Self :=
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple])
                    (Rhs :=
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple])
                    (Trait := ‚Ñê))) in
              let* Œ±1 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple]] :=
                M.read left_val in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple]] :=
                M.read right_val in
              let* Œ±3 : Ty.path "bool" := M.call (Œ±0 Œ±1 Œ±2) in
              let* Œ±4 : Ty.path "bool" := M.alloc (UnOp.not Œ±3) in
              let* Œ±5 : Ty.path "bool" := M.read (use Œ±4) in
              if Œ±5 then
                let* kind :
                    Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.alloc core.panicking.AssertKind.Eq in
                let* Œ±0 : Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.read kind in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply
                              (Ty.path "try_from_and_try_into::EvenNumber")
                              [];
                            Ty.tuple]] :=
                  M.read left_val in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply
                              (Ty.path "try_from_and_try_into::EvenNumber")
                              [];
                            Ty.tuple]] :=
                  M.read right_val in
                let* Œ±3 : Ty.path "never" :=
                  M.call
                    (core.panicking.assert_failed
                      Œ±0
                      Œ±1
                      Œ±2
                      core.option.Option.None) in
                let* Œ±0 : Ty.path "never" := M.alloc Œ±3 in
                let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                M.alloc Œ±2
              else
                M.alloc tt
            end) :
            Ty.tuple
        ] in
    let* result :
        Ty.apply
          (Ty.path "core::result::Result")
          [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
            Ty.tuple] :=
      let* Œ±0 :
          Ty.function
            [Ty.path "i32"]
            (Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") []; _]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.TryInto.try_into
            (Self := Ty.path "i32")
            (T := Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.call (Œ±0 ((Integer.of_Z 5) : Ty.path "i32")) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
              Ty.tuple] :=
        M.alloc (core.result.Result.Err tt) in
      let* Œ±1 :
          Ty.tuple
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
                    Ty.tuple]])
            (Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "try_from_and_try_into::EvenNumber") [];
                    Ty.tuple]]) :=
        M.alloc (borrow result, borrow Œ±0) in
      match_operator
        Œ±1
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | (_, _) =>
              let Œ≥0_0 := Tuple.Access.left Œ≥ in
              let Œ≥0_1 := Tuple.Access.right Œ≥ in
              let* left_val := M.copy Œ≥0_0 in
              let* right_val := M.copy Œ≥0_1 in
              let* Œ±0 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply
                                (Ty.path "try_from_and_try_into::EvenNumber")
                                [];
                              Ty.tuple]];
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply
                                (Ty.path "try_from_and_try_into::EvenNumber")
                                [];
                              Ty.tuple]]]
                    (Ty.path "bool") :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.cmp.PartialEq.eq
                    (Self :=
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple])
                    (Rhs :=
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple])
                    (Trait := ‚Ñê))) in
              let* Œ±1 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple]] :=
                M.read left_val in
              let* Œ±2 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply
                            (Ty.path "try_from_and_try_into::EvenNumber")
                            [];
                          Ty.tuple]] :=
                M.read right_val in
              let* Œ±3 : Ty.path "bool" := M.call (Œ±0 Œ±1 Œ±2) in
              let* Œ±4 : Ty.path "bool" := M.alloc (UnOp.not Œ±3) in
              let* Œ±5 : Ty.path "bool" := M.read (use Œ±4) in
              if Œ±5 then
                let* kind :
                    Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.alloc core.panicking.AssertKind.Eq in
                let* Œ±0 : Ty.apply (Ty.path "core::panicking::AssertKind") [] :=
                  M.read kind in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply
                              (Ty.path "try_from_and_try_into::EvenNumber")
                              [];
                            Ty.tuple]] :=
                  M.read left_val in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.apply
                              (Ty.path "try_from_and_try_into::EvenNumber")
                              [];
                            Ty.tuple]] :=
                  M.read right_val in
                let* Œ±3 : Ty.path "never" :=
                  M.call
                    (core.panicking.assert_failed
                      Œ±0
                      Œ±1
                      Œ±2
                      core.option.Option.None) in
                let* Œ±0 : Ty.path "never" := M.alloc Œ±3 in
                let* Œ±1 : Ty.path "never" := M.read Œ±0 in
                let* Œ±2 : Ty.tuple := never_to_any Œ±1 in
                M.alloc Œ±2
              else
                M.alloc tt
            end) :
            Ty.tuple
        ] in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
