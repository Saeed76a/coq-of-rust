(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_enums_type_aliases_v2_VeryVerboseEnumOfThingsToDoWithNumbers.
Section Impl_enums_type_aliases_v2_VeryVerboseEnumOfThingsToDoWithNumbers.
  Definition Self : Set :=
    Ty.apply
      (Ty.path "enums_type_aliases_v2::VeryVerboseEnumOfThingsToDoWithNumbers")
      [].
  
  (*
      fn run(&self, x: i32, y: i32) -> i32 {
          match self {
              Self::Add => x + y,
              Self::Subtract => x - y,
          }
      }
  *)
  Definition run (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; x; y] =>
      let* self := M.alloc self in
      let* x := M.alloc x in
      let* y := M.alloc y in
      let* α0 : Ty.path "i32" :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              |
                  enums_type_aliases_v2.VeryVerboseEnumOfThingsToDoWithNumbers.Add
                  =>
                let* α0 : Ty.path "i32" := M.read x in
                let* α1 : Ty.path "i32" := M.read y in
                let* α2 : Ty.path "i32" := BinOp.Panic.add α0 α1 in
                M.alloc α2
              | _ => M.break_match
              end) :
              Ty.path "i32";
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              |
                  enums_type_aliases_v2.VeryVerboseEnumOfThingsToDoWithNumbers.Subtract
                  =>
                let* α0 : Ty.path "i32" := M.read x in
                let* α1 : Ty.path "i32" := M.read y in
                let* α2 : Ty.path "i32" := BinOp.Panic.sub α0 α1 in
                M.alloc α2
              | _ => M.break_match
              end) :
              Ty.path "i32"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_run : Instance.t := {
    Notations.double_colon := run;
  }.
End Impl_enums_type_aliases_v2_VeryVerboseEnumOfThingsToDoWithNumbers.
End Impl_enums_type_aliases_v2_VeryVerboseEnumOfThingsToDoWithNumbers.
