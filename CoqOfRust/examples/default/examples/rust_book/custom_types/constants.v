(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition LANGUAGE
    : Ty.apply (Ty.path "ref") [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ] :=
  M.run (M.alloc (mk_str "Rust")).

Definition THRESHOLD : Ty.path "i32" :=
  M.run (M.alloc (Value.Integer Integer.I32 10)).

(*
fn is_big(n: i32) -> bool {
    // Access constant in some function
    n > THRESHOLD
}
*)
Definition is_big (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ n ] =>
    let* n := M.alloc n in
    let* α0 := M.read n in
    let* α1 := M.var "constants::THRESHOLD" in
    let* α2 := M.read α1 in
    M.pure (BinOp.Pure.gt α0 α2)
  | _, _ => M.impossible
  end.

(*
fn main() {
    let n = 16;

    // Access constant in the main thread
    println!("This is {}", LANGUAGE);
    println!("The threshold is {}", THRESHOLD);
    println!("{} is {}", n, if is_big(n) { "big" } else { "small" });

    // Error! Cannot modify a `const`.
    // THRESHOLD = 5;
    // FIXME ^ Comment out this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* n := M.alloc (Value.Integer Integer.I32 16) in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "This is ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 := M.var "constants::LANGUAGE" in
        let* α5 := M.read α4 in
        let* α6 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α5 ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α7
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "The threshold is ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 := M.var "constants::THRESHOLD" in
        let* α5 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α4 ] in
        let* α6 := M.alloc [ α5 ] in
        let* α7 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α6
            ] in
        let* α8 := M.call α0 [ α7 ] in
        M.alloc α8 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str " is ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc [ α1; α2; α3 ] in
        let* α5 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ n ] in
        let* α6 := M.var "constants::is_big" in
        let* α7 := M.read n in
        let* α8 := M.call α6 [ α7 ] in
        let* α9 := M.alloc α8 in
        let* α10 := M.read (M.use α9) in
        let* α11 :=
          if α10 then
            M.pure (mk_str "big")
          else
            let* α0 := M.read (mk_str "small") in
            M.alloc α0 in
        let* α12 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α11 ] in
        let* α13 := M.alloc [ α5; α12 ] in
        let* α14 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α4; M.pointer_coercion "Unsize" α13
            ] in
        let* α15 := M.call α0 [ α14 ] in
        M.alloc α15 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
