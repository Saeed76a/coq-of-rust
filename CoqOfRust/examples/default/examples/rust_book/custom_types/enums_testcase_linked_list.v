(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum List *)

Module Impl_enums_testcase_linked_list_List.
  Definition Self : Ty.t := Ty.path "enums_testcase_linked_list::List".
  
  (*
      fn new() -> List {
          // `Nil` has type `List`
          Nil
      }
  *)
  Definition new (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [] => M.pure enums_testcase_linked_list.List.Nil
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new [].
  
  (*
      fn prepend(self, elem: u32) -> List {
          // `Cons` also has type List
          Cons(elem, Box::new(self))
      }
  *)
  Definition prepend (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; elem ] =>
      let* self := M.alloc self in
      let* elem := M.alloc elem in
      let* α0 := M.read elem in
      let* α1 := M.read self in
      let* α2 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::boxed::Box")
              [
                Ty.path "enums_testcase_linked_list::List";
                Ty.path "alloc::alloc::Global"
              ])::["new"]
          [ α1 ] in
      M.pure
        (Value.StructTuple "enums_testcase_linked_list::List::Cons" [ α0; α2 ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_prepend :
    M.IsAssociatedFunction Self "prepend" prepend [].
  
  (*
      fn len(&self) -> u32 {
          // `self` has to be matched, because the behavior of this method
          // depends on the variant of `self`
          // `self` has type `&List`, and `*self` has type `List`, matching on a
          // concrete type `T` is preferred over a match on a reference `&T`
          // after Rust 2018 you can use self here and tail (with no ref) below as well,
          // rust will infer &s and ref tail.
          // See https://doc.rust-lang.org/edition-guide/rust-2018/ownership-and-lifetimes/default-match-bindings.html
          match *self {
              // Can't take ownership of the tail, because `self` is borrowed;
              // instead take a reference to the tail
              Cons(_, ref tail) => 1 + tail.len(),
              // Base Case: An empty list has zero length
              Nil => 0,
          }
      }
  *)
  Definition len (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        match_operator
          (deref α0)
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | enums_testcase_linked_list.List.Cons _ _ =>
                let* γ0_0 :=
                  let* α0 :=
                    M.var "enums_testcase_linked_list::List::Get_Cons_0" in
                  M.pure (α0 γ) in
                let* γ0_1 :=
                  let* α0 :=
                    M.var "enums_testcase_linked_list::List::Get_Cons_1" in
                  M.pure (α0 γ) in
                let* tail := M.alloc (borrow γ0_1) in
                let* α0 := M.var "BinOp::Panic::add" in
                let* α1 := M.read tail in
                let* α2 := M.read (deref α1) in
                let* α3 :=
                  M.call
                    (Ty.path "enums_testcase_linked_list::List")::["len"]
                    [ borrow (deref α2) ] in
                let* α4 := α0 ((Integer.of_Z 1) : Ty.path "u32") α3 in
                M.alloc α4
              | _ => M.break_match 
              end) :
              Ty.path "u32";
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | enums_testcase_linked_list.List.Nil =>
                M.alloc ((Integer.of_Z 0) : Ty.path "u32")
              | _ => M.break_match 
              end) :
              Ty.path "u32"
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_len : M.IsAssociatedFunction Self "len" len [].
  
  (*
      fn stringify(&self) -> String {
          match *self {
              Cons(head, ref tail) => {
                  // `format!` is similar to `print!`, but returns a heap
                  // allocated string instead of printing to the console
                  format!("{}, {}", head, tail.stringify())
              }
              Nil => {
                  format!("Nil")
              }
          }
      }
  *)
  Definition stringify (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        match_operator
          (deref α0)
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | enums_testcase_linked_list.List.Cons _ _ =>
                let* γ0_0 :=
                  let* α0 :=
                    M.var "enums_testcase_linked_list::List::Get_Cons_0" in
                  M.pure (α0 γ) in
                let* γ0_1 :=
                  let* α0 :=
                    M.var "enums_testcase_linked_list::List::Get_Cons_1" in
                  M.pure (α0 γ) in
                let* head := M.copy γ0_0 in
                let* tail := M.alloc (borrow γ0_1) in
                let* res :=
                  let* α0 := M.var "alloc::fmt::format" in
                  let* α1 := M.read (mk_str "") in
                  let* α2 := M.read (mk_str ", ") in
                  let* α3 := M.alloc [ α1; α2 ] in
                  let* α4 :=
                    M.call
                      (Ty.path "core::fmt::rt::Argument")::["new_display"]
                      [ borrow head ] in
                  let* α5 := M.read tail in
                  let* α6 := M.read (deref α5) in
                  let* α7 :=
                    M.call
                      (Ty.path
                          "enums_testcase_linked_list::List")::["stringify"]
                      [ borrow (deref α6) ] in
                  let* α8 := M.alloc α7 in
                  let* α9 :=
                    M.call
                      (Ty.path "core::fmt::rt::Argument")::["new_display"]
                      [ borrow α8 ] in
                  let* α10 := M.alloc [ α4; α9 ] in
                  let* α11 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_v1"]
                      [
                        pointer_coercion "Unsize" (borrow α3);
                        pointer_coercion "Unsize" (borrow α10)
                      ] in
                  let* α12 := M.call α0 [ α11 ] in
                  M.alloc α12 in
                M.pure res
              | _ => M.break_match 
              end) :
              Ty.path "alloc::string::String";
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | enums_testcase_linked_list.List.Nil =>
                let* res :=
                  let* α0 := M.var "alloc::fmt::format" in
                  let* α1 := M.read (mk_str "Nil") in
                  let* α2 := M.alloc [ α1 ] in
                  let* α3 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_const"]
                      [ pointer_coercion "Unsize" (borrow α2) ] in
                  let* α4 := M.call α0 [ α3 ] in
                  M.alloc α4 in
                M.pure res
              | _ => M.break_match 
              end) :
              Ty.path "alloc::string::String"
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_stringify :
    M.IsAssociatedFunction Self "stringify" stringify [].
End Impl_enums_testcase_linked_list_List.

(*
fn main() {
    // Create an empty linked list
    let mut list = List::new();

    // Prepend some elements
    list = list.prepend(1);
    list = list.prepend(2);
    list = list.prepend(3);

    // Show the final state of the list
    println!("linked list has length: {}", list.len());
    println!("{}", list.stringify());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* list :=
      let* α0 :=
        M.call (Ty.path "enums_testcase_linked_list::List")::["new"] [] in
      M.alloc α0 in
    let* _ :=
      let* α0 := M.read list in
      let* α1 :=
        M.call
          (Ty.path "enums_testcase_linked_list::List")::["prepend"]
          [ α0; (Integer.of_Z 1) : Ty.path "u32" ] in
      assign list α1 in
    let* _ :=
      let* α0 := M.read list in
      let* α1 :=
        M.call
          (Ty.path "enums_testcase_linked_list::List")::["prepend"]
          [ α0; (Integer.of_Z 2) : Ty.path "u32" ] in
      assign list α1 in
    let* _ :=
      let* α0 := M.read list in
      let* α1 :=
        M.call
          (Ty.path "enums_testcase_linked_list::List")::["prepend"]
          [ α0; (Integer.of_Z 3) : Ty.path "u32" ] in
      assign list α1 in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "linked list has length: ") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path "enums_testcase_linked_list::List")::["len"]
            [ borrow list ] in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow α5 ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α7)
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 :=
          M.call
            (Ty.path "enums_testcase_linked_list::List")::["stringify"]
            [ borrow list ] in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow α5 ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α7)
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
