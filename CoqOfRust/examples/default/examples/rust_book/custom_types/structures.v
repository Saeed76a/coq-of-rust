(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_structures_Person.
Section Impl_core_fmt_Debug_for_structures_Person.
  Definition Self : Ty.t := Ty.apply (Ty.path "structures::Person") [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 := M.read (mk_str "Person") in
      let* Œ±2 := M.read (mk_str "name") in
      let* Œ±3 := M.read self in
      let* Œ±4 := M.read (mk_str "age") in
      let* Œ±5 := M.read self in
      let* Œ±6 :=
        M.alloc (borrow ((M.var "structures::Person::Get_age") (deref Œ±5))) in
      M.call
        ((Ty.apply
              (Ty.path "core::fmt::Formatter")
              [])::["debug_struct_field2_finish"]
          Œ±0
          Œ±1
          Œ±2
          (pointer_coercion
            "Unsize"
            (borrow ((M.var "structures::Person::Get_name") (deref Œ±3))))
          Œ±4
          (pointer_coercion "Unsize" (borrow Œ±6)))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_structures_Person.
End Impl_core_fmt_Debug_for_structures_Person.









(*
fn main() {
    // Create struct with field init shorthand
    let name = String::from("Peter");
    let age = 27;
    let peter = Person { name, age };

    // Print debug struct
    println!("{:?}", peter);

    // Instantiate a `Point`
    let point: Point = Point { x: 10.3, y: 0.4 };

    // Access the fields of the point
    println!("point coordinates: ({}, {})", point.x, point.y);

    // Make a new point by using struct update syntax to use the fields of our
    // other one
    let bottom_right = Point { x: 5.2, ..point };

    // `bottom_right.y` will be the same as `point.y` because we used that field
    // from `point`
    println!("second point: ({}, {})", bottom_right.x, bottom_right.y);

    // Destructure the point using a `let` binding
    let Point {
        x: left_edge,
        y: top_edge,
    } = point;

    let _rectangle = Rectangle {
        // struct instantiation is an expression too
        top_left: Point {
            x: left_edge,
            y: top_edge,
        },
        bottom_right: bottom_right,
    };

    // Instantiate a unit struct
    let _unit = Unit;

    // Instantiate a tuple struct
    let pair = Pair(1, 0.1);

    // Access the fields of a tuple struct
    println!("pair contains {:?} and {:?}", pair.0, pair.1);

    // Destructure a tuple struct
    let Pair(integer, decimal) = pair;

    println!("pair contains {:?} and {:?}", integer, decimal);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* name :=
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.convert.From.from
            (Self := Ty.apply (Ty.path "alloc::string::String") [])
            (T := Ty.apply (Ty.path "ref") [Ty.path "str"])
            (Trait := ‚Ñê))) in
      let* Œ±1 := M.read (mk_str "Peter") in
      let* Œ±2 := M.call (Œ±0 Œ±1) in
      M.alloc Œ±2 in
    let* age := M.alloc ((Integer.of_Z 27) : Ty.path "u8") in
    let* peter :=
      let* Œ±0 := M.read name in
      let* Œ±1 := M.read age in
      M.alloc
        {| structures.Person.name := Œ±0; structures.Person.age := Œ±1; |} in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow peter)) in
        let* Œ±4 := M.alloc [ Œ±3 ] in
        let* Œ±5 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* point :=
      let* Œ±0 := M.read (UnsupportedLiteral : Ty.path "f32") in
      let* Œ±1 := M.read (UnsupportedLiteral : Ty.path "f32") in
      M.alloc {| structures.Point.x := Œ±0; structures.Point.y := Œ±1; |} in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "point coordinates: (") in
        let* Œ±1 := M.read (mk_str ", ") in
        let* Œ±2 := M.read (mk_str ")
") in
        let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
        let* Œ±4 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow ((M.var "structures::Point::Get_x") point))) in
        let* Œ±5 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow ((M.var "structures::Point::Get_y") point))) in
        let* Œ±6 := M.alloc [ Œ±4; Œ±5 ] in
        let* Œ±7 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±3))
              (pointer_coercion "Unsize" (borrow Œ±6))) in
        let* Œ±8 := M.call ((M.var "std::io::stdio::_print") Œ±7) in
        M.alloc Œ±8 in
      M.alloc tt in
    let* bottom_right :=
      let* Œ±0 := M.read (UnsupportedLiteral : Ty.path "f32") in
      let* Œ±1 := M.read point in
      M.alloc (Œ±1 <| structures.Point.x := Œ±0 |>) in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "second point: (") in
        let* Œ±1 := M.read (mk_str ", ") in
        let* Œ±2 := M.read (mk_str ")
") in
        let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
        let* Œ±4 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow ((M.var "structures::Point::Get_x") bottom_right))) in
        let* Œ±5 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_display"]
              (borrow ((M.var "structures::Point::Get_y") bottom_right))) in
        let* Œ±6 := M.alloc [ Œ±4; Œ±5 ] in
        let* Œ±7 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±3))
              (pointer_coercion "Unsize" (borrow Œ±6))) in
        let* Œ±8 := M.call ((M.var "std::io::stdio::_print") Œ±7) in
        M.alloc Œ±8 in
      M.alloc tt in
    let* Œ±0 :=
      match_operator
        point
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | {| structures.Point.x := _; structures.Point.y := _; |} =>
              let Œ≥0_0 := (M.var "structures::Point::Get_x") Œ≥ in
              let Œ≥0_1 := (M.var "structures::Point::Get_y") Œ≥ in
              let* left_edge := M.copy Œ≥0_0 in
              let* top_edge := M.copy Œ≥0_1 in
              let* _rectangle :=
                let* Œ±0 := M.read left_edge in
                let* Œ±1 := M.read top_edge in
                let* Œ±2 := M.read bottom_right in
                M.alloc
                  {|
                    structures.Rectangle.top_left :=
                      {| structures.Point.x := Œ±0; structures.Point.y := Œ±1; |};
                    structures.Rectangle.bottom_right := Œ±2;
                  |} in
              let* _unit := M.alloc structures.Unit.Build in
              let* pair :=
                let* Œ±0 := M.read (UnsupportedLiteral : Ty.path "f32") in
                M.alloc
                  (structures.Pair.Build_t
                    ((Integer.of_Z 1) : Ty.path "i32")
                    Œ±0) in
              let* _ :=
                let* _ :=
                  let* Œ±0 := M.read (mk_str "pair contains ") in
                  let* Œ±1 := M.read (mk_str " and ") in
                  let* Œ±2 := M.read (mk_str "
") in
                  let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
                  let* Œ±4 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_debug"]
                        (borrow ((M.var "structures::Pair::Get_0") pair))) in
                  let* Œ±5 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_debug"]
                        (borrow ((M.var "structures::Pair::Get_1") pair))) in
                  let* Œ±6 := M.alloc [ Œ±4; Œ±5 ] in
                  let* Œ±7 :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow Œ±3))
                        (pointer_coercion "Unsize" (borrow Œ±6))) in
                  let* Œ±8 := M.call ((M.var "std::io::stdio::_print") Œ±7) in
                  M.alloc Œ±8 in
                M.alloc tt in
              match_operator
                pair
                [
                  fun Œ≥ =>
                    (let* Œ±0 := M.read Œ≥ in
                    match Œ±0 with
                    | structures.Pair.Build_t _ _ =>
                      let Œ≥0_0 := (M.var "structures::Pair::Get_0") Œ≥ in
                      let Œ≥0_1 := (M.var "structures::Pair::Get_1") Œ≥ in
                      let* integer := M.copy Œ≥0_0 in
                      let* decimal := M.copy Œ≥0_1 in
                      let* _ :=
                        let* _ :=
                          let* Œ±0 := M.read (mk_str "pair contains ") in
                          let* Œ±1 := M.read (mk_str " and ") in
                          let* Œ±2 := M.read (mk_str "
") in
                          let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
                          let* Œ±4 :=
                            M.call
                              ((Ty.apply
                                    (Ty.path "core::fmt::rt::Argument")
                                    [])::["new_debug"]
                                (borrow integer)) in
                          let* Œ±5 :=
                            M.call
                              ((Ty.apply
                                    (Ty.path "core::fmt::rt::Argument")
                                    [])::["new_debug"]
                                (borrow decimal)) in
                          let* Œ±6 := M.alloc [ Œ±4; Œ±5 ] in
                          let* Œ±7 :=
                            M.call
                              ((Ty.apply
                                    (Ty.path "core::fmt::Arguments")
                                    [])::["new_v1"]
                                (pointer_coercion "Unsize" (borrow Œ±3))
                                (pointer_coercion "Unsize" (borrow Œ±6))) in
                          let* Œ±8 :=
                            M.call ((M.var "std::io::stdio::_print") Œ±7) in
                          M.alloc Œ±8 in
                        M.alloc tt in
                      M.alloc tt
                    end) :
                    Ty.path "unit"
                ]
            end) :
            Ty.path "unit"
        ] in
    M.read Œ±0
  | _, _ => M.impossible
  end.
