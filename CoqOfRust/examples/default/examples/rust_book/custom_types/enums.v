(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum WebEvent *)

(*
fn inspect(event: WebEvent) {
    match event {
        WebEvent::PageLoad => println!("page loaded, réfé"),
        WebEvent::PageUnload => println!("page unloaded"),
        // Destructure `c` from inside the `enum`.
        WebEvent::KeyPress(c) => println!("pressed '{}'.", c),
        WebEvent::Paste(s) => println!("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        WebEvent::Click { x, y } => {
            println!("clicked at x={}, y={}.", x, y);
        }
    }
}
*)
Definition inspect (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ event ] =>
    let* event := M.alloc event in
    let* α0 :=
      match_operator
        event
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | enums.WebEvent.PageLoad =>
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 :=
                  M.read
                    (mk_str
                      ("page loaded, r" ++
                        String.String
                          "233"
                          ("f" ++ String.String "233" "
"))) in
                let* α2 := M.alloc [ α1 ] in
                let* α3 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_const"]
                    [ pointer_coercion "Unsize" (borrow α2) ] in
                let* α4 := M.call α0 [ α3 ] in
                M.alloc α4 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | enums.WebEvent.PageUnload =>
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "page unloaded
") in
                let* α2 := M.alloc [ α1 ] in
                let* α3 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_const"]
                    [ pointer_coercion "Unsize" (borrow α2) ] in
                let* α4 := M.call α0 [ α3 ] in
                M.alloc α4 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | enums.WebEvent.KeyPress _ =>
              let* γ0_0 :=
                let* α0 := M.var "enums::WebEvent::Get_KeyPress_0" in
                M.pure (α0 γ) in
              let* c := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "pressed '") in
                let* α2 := M.read (mk_str "'.
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow c ] in
                let* α5 := M.alloc [ α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α3);
                      pointer_coercion "Unsize" (borrow α5)
                    ] in
                let* α7 := M.call α0 [ α6 ] in
                M.alloc α7 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | enums.WebEvent.Paste _ =>
              let* γ0_0 :=
                let* α0 := M.var "enums::WebEvent::Get_Paste_0" in
                M.pure (α0 γ) in
              let* s := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "pasted """) in
                let* α2 := M.read (mk_str """.
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ borrow s ] in
                let* α5 := M.alloc [ α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" (borrow α3);
                      pointer_coercion "Unsize" (borrow α5)
                    ] in
                let* α7 := M.call α0 [ α6 ] in
                M.alloc α7 in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple [];
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            |
                enums.WebEvent.Click
                {| enums.WebEvent.Click.x := _; enums.WebEvent.Click.y := _;
                |}
                =>
              let* γ0_0 :=
                let* α0 := M.var "enums::WebEvent::Get_Click_x" in
                M.pure (α0 γ) in
              let* γ0_1 :=
                let* α0 := M.var "enums::WebEvent::Get_Click_y" in
                M.pure (α0 γ) in
              let* x := M.copy γ0_0 in
              let* y := M.copy γ0_1 in
              let* _ :=
                let* _ :=
                  let* α0 := M.var "std::io::stdio::_print" in
                  let* α1 := M.read (mk_str "clicked at x=") in
                  let* α2 := M.read (mk_str ", y=") in
                  let* α3 := M.read (mk_str ".
") in
                  let* α4 := M.alloc [ α1; α2; α3 ] in
                  let* α5 :=
                    M.call
                      (Ty.path "core::fmt::rt::Argument")::["new_display"]
                      [ borrow x ] in
                  let* α6 :=
                    M.call
                      (Ty.path "core::fmt::rt::Argument")::["new_display"]
                      [ borrow y ] in
                  let* α7 := M.alloc [ α5; α6 ] in
                  let* α8 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_v1"]
                      [
                        pointer_coercion "Unsize" (borrow α4);
                        pointer_coercion "Unsize" (borrow α7)
                      ] in
                  let* α9 := M.call α0 [ α8 ] in
                  M.alloc α9 in
                M.alloc tt in
              M.alloc tt
            | _ => M.break_match 
            end) :
            Ty.tuple []
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let pressed = WebEvent::KeyPress('x');
    // `to_owned()` creates an owned `String` from a string slice.
    let pasted = WebEvent::Paste("my text".to_owned());
    let click = WebEvent::Click { x: 20, y: 80 };
    let load = WebEvent::PageLoad;
    let unload = WebEvent::PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* pressed :=
      M.alloc (Value.StructTuple "enums::WebEvent::KeyPress" [ "x"%char ]) in
    let* pasted :=
      let* α0 :=
        M.get_method
          "alloc::borrow::ToOwned"
          "to_owned"
          [ (* Self *) Ty.path "str" ] in
      let* α1 := M.read (mk_str "my text") in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc (Value.StructTuple "enums::WebEvent::Paste" [ α2 ]) in
    let* click :=
      M.alloc
        (Value.StructRecord
          "enums::WebEvent::Click"
          [
            ("x", (Integer.of_Z 20) : Ty.path "i64");
            ("y", (Integer.of_Z 80) : Ty.path "i64")
          ]) in
    let* load := M.alloc enums.WebEvent.PageLoad in
    let* unload := M.alloc enums.WebEvent.PageUnload in
    let* _ :=
      let* α0 := M.var "enums::inspect" in
      let* α1 := M.read pressed in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.var "enums::inspect" in
      let* α1 := M.read pasted in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.var "enums::inspect" in
      let* α1 := M.read click in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.var "enums::inspect" in
      let* α1 := M.read load in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.var "enums::inspect" in
      let* α1 := M.read unload in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
