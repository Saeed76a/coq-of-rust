(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



(*
fn inspect(event: WebEvent) {
    match event {
        WebEvent::PageLoad => println!("page loaded, r√©f√©"),
        WebEvent::PageUnload => println!("page unloaded"),
        // Destructure `c` from inside the `enum`.
        WebEvent::KeyPress(c) => println!("pressed '{}'.", c),
        WebEvent::Paste(s) => println!("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        WebEvent::Click { x, y } => {
            println!("clicked at x={}, y={}.", x, y);
        }
    }
}
*)
Definition inspect (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [event] =>
    let* event := M.alloc event in
    let* Œ±0 : Ty.tuple :=
      match_operator
        event
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | enums.WebEvent.PageLoad =>
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read
                    (mk_str
                      ("page loaded, r" ++
                        String.String
                          "233"
                          ("f" ++ String.String "233" "
"))) in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0 ] in
                let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Arguments")
                          [])::["new_const"]
                      (pointer_coercion "Unsize" (borrow Œ±1))) in
                let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
                M.alloc Œ±3 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | enums.WebEvent.PageUnload =>
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "page unloaded
") in
                let* Œ±1 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0 ] in
                let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Arguments")
                          [])::["new_const"]
                      (pointer_coercion "Unsize" (borrow Œ±1))) in
                let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
                M.alloc Œ±3 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | enums.WebEvent.KeyPress _ =>
              let Œ≥0_0 := enums.WebEvent.Get_KeyPress_0 Œ≥ in
              let* c := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "pressed '") in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "'.
") in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow c)) in
                let* Œ±4 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ Œ±3 ] in
                let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±4))) in
                let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
                M.alloc Œ±6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | enums.WebEvent.Paste _ =>
              let Œ≥0_0 := enums.WebEvent.Get_Paste_0 Œ≥ in
              let* s := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "pasted """) in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str """.
") in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow s)) in
                let* Œ±4 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ Œ±3 ] in
                let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±4))) in
                let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
                M.alloc Œ±6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            |
                enums.WebEvent.Click
                {| enums.WebEvent.Click.x := _; enums.WebEvent.Click.y := _;
                |}
                =>
              let Œ≥0_0 := enums.WebEvent.Get_Click_x Œ≥ in
              let Œ≥0_1 := enums.WebEvent.Get_Click_y Œ≥ in
              let* x := M.copy Œ≥0_0 in
              let* y := M.copy Œ≥0_1 in
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "clicked at x=") in
                  let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str ", y=") in
                  let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str ".
") in
                  let* Œ±3 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ Œ±0; Œ±1; Œ±2 ] in
                  let* Œ±4 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow x)) in
                  let* Œ±5 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow y)) in
                  let* Œ±6 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                    M.alloc [ Œ±4; Œ±5 ] in
                  let* Œ±7 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow Œ±3))
                        (pointer_coercion "Unsize" (borrow Œ±6))) in
                  let* Œ±8 : Ty.tuple := M.call (std.io.stdio._print Œ±7) in
                  M.alloc Œ±8 in
                M.alloc tt in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple
        ] in
    M.read Œ±0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let pressed = WebEvent::KeyPress('x');
    // `to_owned()` creates an owned `String` from a string slice.
    let pasted = WebEvent::Paste("my text".to_owned());
    let click = WebEvent::Click { x: 20, y: 80 };
    let load = WebEvent::PageLoad;
    let unload = WebEvent::PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* pressed : Ty.apply (Ty.path "enums::WebEvent") [] :=
      M.alloc (enums.WebEvent.KeyPress "x"%char) in
    let* pasted : Ty.apply (Ty.path "enums::WebEvent") [] :=
      let* Œ±0 : Ty.function [Ty.apply (Ty.path "ref") [Ty.path "str"]] _ :=
        ltac:(M.get_method (fun ‚Ñê =>
          alloc.borrow.ToOwned.to_owned
            (Self := Ty.path "str")
            (Trait := ‚Ñê))) in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "my text") in
      let* Œ±2 : Ty.apply (Ty.path "alloc::string::String") [] :=
        M.call (Œ±0 Œ±1) in
      M.alloc (enums.WebEvent.Paste Œ±2) in
    let* click : Ty.apply (Ty.path "enums::WebEvent") [] :=
      M.alloc
        (enums.WebEvent.Click
          {|
          enums.WebEvent.Click.x := (Integer.of_Z 20) : Ty.path "i64";
          enums.WebEvent.Click.y := (Integer.of_Z 80) : Ty.path "i64";
        |}) in
    let* load : Ty.apply (Ty.path "enums::WebEvent") [] :=
      M.alloc enums.WebEvent.PageLoad in
    let* unload : Ty.apply (Ty.path "enums::WebEvent") [] :=
      M.alloc enums.WebEvent.PageUnload in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "enums::WebEvent") [] := M.read pressed in
      let* Œ±1 : Ty.tuple := M.call (enums.inspect Œ±0) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "enums::WebEvent") [] := M.read pasted in
      let* Œ±1 : Ty.tuple := M.call (enums.inspect Œ±0) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "enums::WebEvent") [] := M.read click in
      let* Œ±1 : Ty.tuple := M.call (enums.inspect Œ±0) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "enums::WebEvent") [] := M.read load in
      let* Œ±1 : Ty.tuple := M.call (enums.inspect Œ±0) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* Œ±0 : Ty.apply (Ty.path "enums::WebEvent") [] := M.read unload in
      let* Œ±1 : Ty.tuple := M.call (enums.inspect Œ±0) in
      M.alloc Œ±1 in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
