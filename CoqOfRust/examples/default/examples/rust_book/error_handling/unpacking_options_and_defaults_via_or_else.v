(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Fruit *)

Module Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_or_else_Fruit.
  Definition Self : Ty.t :=
    Ty.path "unpacking_options_and_defaults_via_or_else::Fruit".
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 :=
        match_operator
          self
          [
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or_else.Fruit.Apple =>
                let* Œ±0 := M.read (mk_str "Apple") in
                M.alloc Œ±0
              | _ => M.break_match 
              end) :
              Ty.apply (Ty.path "ref") [ Ty.path "str" ];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or_else.Fruit.Orange =>
                let* Œ±0 := M.read (mk_str "Orange") in
                M.alloc Œ±0
              | _ => M.break_match 
              end) :
              Ty.apply (Ty.path "ref") [ Ty.path "str" ];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or_else.Fruit.Banana =>
                let* Œ±0 := M.read (mk_str "Banana") in
                M.alloc Œ±0
              | _ => M.break_match 
              end) :
              Ty.apply (Ty.path "ref") [ Ty.path "str" ];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or_else.Fruit.Kiwi =>
                let* Œ±0 := M.read (mk_str "Kiwi") in
                M.alloc Œ±0
              | _ => M.break_match 
              end) :
              Ty.apply (Ty.path "ref") [ Ty.path "str" ];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or_else.Fruit.Lemon =>
                let* Œ±0 := M.read (mk_str "Lemon") in
                M.alloc Œ±0
              | _ => M.break_match 
              end) :
              Ty.apply (Ty.path "ref") [ Ty.path "str" ]
          ] in
      let* Œ±2 := M.read Œ±1 in
      M.call (Ty.path "core::fmt::Formatter")::["write_str"] [ Œ±0; Œ±2 ]
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_or_else_Fruit.

(*
fn main() {
    let apple = Some(Fruit::Apple);
    let no_fruit: Option<Fruit> = None;
    let get_kiwi_as_fallback = || {
        println!("Providing kiwi as fallback");
        Some(Fruit::Kiwi)
    };
    let get_lemon_as_fallback = || {
        println!("Providing lemon as fallback");
        Some(Fruit::Lemon)
    };

    let first_available_fruit = no_fruit
        .or_else(get_kiwi_as_fallback)
        .or_else(get_lemon_as_fallback);
    println!("first_available_fruit: {:?}", first_available_fruit);
    // Providing kiwi as fallback
    // first_available_fruit: Some(Kiwi)
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* apple :=
      M.alloc
        (core.option.Option.Some
          unpacking_options_and_defaults_via_or_else.Fruit.Apple) in
    let* no_fruit := M.alloc core.option.Option.None in
    let* get_kiwi_as_fallback :=
      M.alloc
        (fun (Œ±0 : Ty.path "unit") =>
          (let* Œ±0 := M.alloc Œ±0 in
          match_operator
            Œ±0
            [
              fun Œ≥ =>
                (let* _ :=
                  let* _ :=
                    let* Œ±0 := M.read (mk_str "Providing kiwi as fallback
") in
                    let* Œ±1 := M.alloc [ Œ±0 ] in
                    let* Œ±2 :=
                      M.call
                        (Ty.path "core::fmt::Arguments")::["new_const"]
                        [ pointer_coercion "Unsize" (borrow Œ±1) ] in
                    let* Œ±3 := M.call (M.var "std::io::stdio::_print") [ Œ±2 ] in
                    M.alloc Œ±3 in
                  M.alloc tt in
                let* Œ±0 :=
                  M.alloc
                    (core.option.Option.Some
                      unpacking_options_and_defaults_via_or_else.Fruit.Kiwi) in
                M.read Œ±0) :
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "unpacking_options_and_defaults_via_or_else::Fruit"
                  ]
            ]) :
          Ty.apply
            (Ty.path "core::option::Option")
            [ Ty.path "unpacking_options_and_defaults_via_or_else::Fruit" ]) in
    let* get_lemon_as_fallback :=
      M.alloc
        (fun (Œ±0 : Ty.path "unit") =>
          (let* Œ±0 := M.alloc Œ±0 in
          match_operator
            Œ±0
            [
              fun Œ≥ =>
                (let* _ :=
                  let* _ :=
                    let* Œ±0 := M.read (mk_str "Providing lemon as fallback
") in
                    let* Œ±1 := M.alloc [ Œ±0 ] in
                    let* Œ±2 :=
                      M.call
                        (Ty.path "core::fmt::Arguments")::["new_const"]
                        [ pointer_coercion "Unsize" (borrow Œ±1) ] in
                    let* Œ±3 := M.call (M.var "std::io::stdio::_print") [ Œ±2 ] in
                    M.alloc Œ±3 in
                  M.alloc tt in
                let* Œ±0 :=
                  M.alloc
                    (core.option.Option.Some
                      unpacking_options_and_defaults_via_or_else.Fruit.Lemon) in
                M.read Œ±0) :
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "unpacking_options_and_defaults_via_or_else::Fruit"
                  ]
            ]) :
          Ty.apply
            (Ty.path "core::option::Option")
            [ Ty.path "unpacking_options_and_defaults_via_or_else::Fruit" ]) in
    let* first_available_fruit :=
      let* Œ±0 := M.read no_fruit in
      let* Œ±1 := M.read get_kiwi_as_fallback in
      let* Œ±2 :=
        M.call
          (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "unpacking_options_and_defaults_via_or_else::Fruit"
              ])::["or_else"]
          [ Œ±0; Œ±1 ] in
      let* Œ±3 := M.read get_lemon_as_fallback in
      let* Œ±4 :=
        M.call
          (Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.path "unpacking_options_and_defaults_via_or_else::Fruit"
              ])::["or_else"]
          [ Œ±2; Œ±3 ] in
      M.alloc Œ±4 in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "first_available_fruit: ") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow first_available_fruit ] in
        let* Œ±4 := M.alloc [ Œ±3 ] in
        let* Œ±5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow Œ±2);
              pointer_coercion "Unsize" (borrow Œ±4)
            ] in
        let* Œ±6 := M.call (M.var "std::io::stdio::_print") [ Œ±5 ] in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
