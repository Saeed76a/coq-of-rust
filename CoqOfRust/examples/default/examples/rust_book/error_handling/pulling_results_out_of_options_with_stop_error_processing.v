(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn double_first(vec: Vec<&str>) -> Result<Option<i32>, ParseIntError> {
    let opt = vec.first().map(|first| first.parse::<i32>().map(|n| 2 * n));

    opt.map_or(Ok(None), |r| r.map(Some))
}
*)
Definition double_first (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [vec] =>
    let* vec := M.alloc vec in
    let* opt :=
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.deref.Deref.deref
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "ref") [Ty.path "str"];
                  Ty.path "alloc::alloc::Global"])
            (Trait := ℐ))) in
      let* α1 := M.call (α0 (borrow vec)) in
      let* α2 :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["first"]
            α1) in
      let* α3 :=
        M.call
          ((Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"]]])::["map"]
            α2
            (fun
                (α0 :
                  Ty.apply
                    (Ty.path "ref")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"]]) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* first := M.copy γ in
                    let* α0 := M.read first in
                    let* α1 := M.read (deref α0) in
                    let* α2 := M.call ((Ty.path "str")::["parse"] α1) in
                    M.call
                      ((Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "i32";
                              Ty.path
                                "core::num::error::ParseIntError"])::["map"]
                        α2
                        (fun (α0 : Ty.path "i32") =>
                          (let* α0 := M.alloc α0 in
                          match_operator
                            α0
                            [
                              fun γ =>
                                (let* n := M.copy γ in
                                let* α0 := M.read n in
                                (M.var "BinOp::Panic::mul")
                                  ((Integer.of_Z 2) : Ty.path "i32")
                                  α0) :
                                Ty.path "i32"
                            ]) :
                          Ty.path "i32"))) :
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "i32"; Ty.path "core::num::error::ParseIntError"]
                ]) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "i32"; Ty.path "core::num::error::ParseIntError"])) in
      M.alloc α3 in
    let* α0 := M.read opt in
    let* α1 :=
      M.call
        ((Ty.apply
              (Ty.path "core::option::Option")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.path "core::num::error::ParseIntError"]])::["map_or"]
          α0
          (core.result.Result.Ok core.option.Option.None)
          (fun
              (α0 :
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32"; Ty.path "core::num::error::ParseIntError"]) =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* r := M.copy γ in
                  let* α0 := M.read r in
                  M.call
                    ((Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.path "core::num::error::ParseIntError"])::["map"]
                      α0
                      core.option.Option.Some)) :
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.apply (Ty.path "core::option::Option") [Ty.path "i32"];
                      Ty.path "core::num::error::ParseIntError"]
              ]) :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply (Ty.path "core::option::Option") [Ty.path "i32"];
                Ty.path "core::num::error::ParseIntError"])) in
    let* α0 := M.alloc α1 in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    println!("The first doubled is {:?}", double_first(numbers));
    println!("The first doubled is {:?}", double_first(empty));
    println!("The first doubled is {:?}", double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* numbers :=
      let* α0 := M.read (mk_str "42") in
      let* α1 := M.read (mk_str "93") in
      let* α2 := M.read (mk_str "18") in
      let* α3 := M.alloc [ α0; α1; α2 ] in
      let* α4 :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] α3) in
      let* α5 := M.read α4 in
      let* α6 :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" α5)) in
      M.alloc α6 in
    let* empty :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.path "alloc::alloc::Global"])::["new"] in
      M.alloc α0 in
    let* strings :=
      let* α0 := M.read (mk_str "tofu") in
      let* α1 := M.read (mk_str "93") in
      let* α2 := M.read (mk_str "18") in
      let* α3 := M.alloc [ α0; α1; α2 ] in
      let* α4 :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] α3) in
      let* α5 := M.read α4 in
      let* α6 :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" α5)) in
      M.alloc α6 in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "The first doubled is ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.read numbers in
        let* α4 :=
          M.call
            ((M.var
                "pulling_results_out_of_options_with_stop_error_processing::double_first")
              α3) in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_debug"] (borrow α5)) in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α7))) in
        let* α9 := M.call ((M.var "std::io::stdio::_print") α8) in
        M.alloc α9 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "The first doubled is ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.read empty in
        let* α4 :=
          M.call
            ((M.var
                "pulling_results_out_of_options_with_stop_error_processing::double_first")
              α3) in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_debug"] (borrow α5)) in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α7))) in
        let* α9 := M.call ((M.var "std::io::stdio::_print") α8) in
        M.alloc α9 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "The first doubled is ") in
        let* α1 := M.read (mk_str "
") in
        let* α2 := M.alloc [ α0; α1 ] in
        let* α3 := M.read strings in
        let* α4 :=
          M.call
            ((M.var
                "pulling_results_out_of_options_with_stop_error_processing::double_first")
              α3) in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_debug"] (borrow α5)) in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α2))
              (pointer_coercion "Unsize" (borrow α7))) in
        let* α9 := M.call ((M.var "std::io::stdio::_print") α8) in
        M.alloc α9 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
