(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let strings = vec!["tofu", "93", "18"];
    let (numbers, errors): (Vec<_>, Vec<_>) = strings
        .into_iter()
        .map(|s| s.parse::<i32>())
        .partition(Result::is_ok);
    let numbers: Vec<_> = numbers.into_iter().map(Result::unwrap).collect();
    let errors: Vec<_> = errors.into_iter().map(Result::unwrap_err).collect();
    println!("Numbers: {:?}", numbers);
    println!("Errors: {:?}", errors);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* strings :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "tofu") in
      let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "93") in
      let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "18") in
      let* α3 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ α0; α1; α2 ] in
      let* α4 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] α3) in
      let* α5 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read α4 in
      let* α6 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" α5)) in
      M.alloc α6 in
    let* α0 :
        Ty.function
          [Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              [Ty.apply
                  (Ty.path "alloc::vec::into_iter::IntoIter")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []];
                Ty.function
                  [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.path "i32";
                      Ty.apply
                        (Ty.path "core::num::error::ParseIntError")
                        []])];
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "i32";
                        Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []]]]
              (Ty.path "bool")]
          (Ty.tuple
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []];
                Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []];
                Ty.apply (Ty.path "alloc::alloc::Global") []])) :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.partition
          (Self :=
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              [Ty.apply
                  (Ty.path "alloc::vec::into_iter::IntoIter")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []];
                Ty.function
                  [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.path "i32";
                      Ty.apply
                        (Ty.path "core::num::error::ParseIntError")
                        []])])
          (B :=
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []];
                Ty.apply (Ty.path "alloc::alloc::Global") []])
          (F :=
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "i32";
                        Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []]]]
              (Ty.path "bool"))
          (Trait := ℐ))) in
    let* α1 :
        Ty.function
          [Ty.apply
              (Ty.path "alloc::vec::into_iter::IntoIter")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []];
            Ty.function
              [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
              (Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "i32";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []])]
          (Ty.apply
            (Ty.path "core::iter::adapters::map::Map")
            [Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.apply (Ty.path "ref") [Ty.path "str"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []];
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                (Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply
                      (Ty.path "core::num::error::ParseIntError")
                      []])]) :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.map
          (Self :=
            Ty.apply
              (Ty.path "alloc::vec::into_iter::IntoIter")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []])
          (B :=
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.path "i32";
                Ty.apply (Ty.path "core::num::error::ParseIntError") []])
          (F :=
            Ty.function
              [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
              (Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "i32";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []]))
          (Trait := ℐ))) in
    let* α2 :
        Ty.function
          [Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []]]
          _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.collect.IntoIterator.into_iter
          (Self :=
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []])
          (Trait := ℐ))) in
    let* α3 :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      M.read strings in
    let* α4 :
        Ty.apply
          (Ty.path "alloc::vec::into_iter::IntoIter")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      M.call (α2 α3) in
    let* α5 :
        Ty.apply
          (Ty.path "core::iter::adapters::map::Map")
          [Ty.apply
              (Ty.path "alloc::vec::into_iter::IntoIter")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []];
            Ty.function
              [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
              (Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "i32";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []])] :=
      M.call
        (α1
          α4
          (fun (α0 : Ty.apply (Ty.path "ref") [Ty.path "str"]) =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* s := M.copy γ in
                  let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read s in
                  M.call ((Ty.path "str")::["parse"] α0)) :
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.path "i32";
                      Ty.apply (Ty.path "core::num::error::ParseIntError") []]
              ]) :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.path "i32";
                Ty.apply (Ty.path "core::num::error::ParseIntError") []])) in
    let* α6 :
        Ty.tuple
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "i32";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []];
              Ty.apply (Ty.path "alloc::alloc::Global") []])
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "i32";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []];
              Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
      M.call
        (α0
          α5
          (Ty.apply
              (Ty.path "core::result::Result")
              [Ty.path "i32";
                Ty.apply
                  (Ty.path "core::num::error::ParseIntError")
                  []])::["is_ok"]) in
    let* α7 :
        Ty.tuple
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "i32";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []];
              Ty.apply (Ty.path "alloc::alloc::Global") []])
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "i32";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []];
              Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
      M.alloc α6 in
    let* α0 : Ty.path "unit" :=
      match_operator
        α7
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | (_, _) =>
              let γ0_0 := Tuple.Access.left γ in
              let γ0_1 := Tuple.Access.right γ in
              let* numbers := M.copy γ0_0 in
              let* errors := M.copy γ0_1 in
              let* numbers :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.path "i32";
                      Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                let* α0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          [Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [Ty.apply
                                  (Ty.path "core::result::Result")
                                  [Ty.path "i32";
                                    Ty.apply
                                      (Ty.path
                                        "core::num::error::ParseIntError")
                                      []];
                                Ty.apply (Ty.path "alloc::alloc::Global") []];
                            Ty.function
                              [Ty.apply
                                  (Ty.path "core::result::Result")
                                  [Ty.path "i32";
                                    Ty.apply
                                      (Ty.path
                                        "core::num::error::ParseIntError")
                                      []]]
                              (Ty.path "i32")]]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.path "i32";
                          Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.iterator.Iterator.collect
                      (Self :=
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          [Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [Ty.apply
                                  (Ty.path "core::result::Result")
                                  [Ty.path "i32";
                                    Ty.apply
                                      (Ty.path
                                        "core::num::error::ParseIntError")
                                      []];
                                Ty.apply (Ty.path "alloc::alloc::Global") []];
                            Ty.function
                              [Ty.apply
                                  (Ty.path "core::result::Result")
                                  [Ty.path "i32";
                                    Ty.apply
                                      (Ty.path
                                        "core::num::error::ParseIntError")
                                      []]]
                              (Ty.path "i32")])
                      (B :=
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.path "i32";
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (Trait := ℐ))) in
                let* α1 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []];
                        Ty.function
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []]]
                          (Ty.path "i32")]
                      (Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        [Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            [Ty.apply
                                (Ty.path "core::result::Result")
                                [Ty.path "i32";
                                  Ty.apply
                                    (Ty.path "core::num::error::ParseIntError")
                                    []];
                              Ty.apply (Ty.path "alloc::alloc::Global") []];
                          Ty.function
                            [Ty.apply
                                (Ty.path "core::result::Result")
                                [Ty.path "i32";
                                  Ty.apply
                                    (Ty.path "core::num::error::ParseIntError")
                                    []]]
                            (Ty.path "i32")]) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.iterator.Iterator.map
                      (Self :=
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (B := Ty.path "i32")
                      (F :=
                        Ty.function
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []]]
                          (Ty.path "i32"))
                      (Trait := ℐ))) in
                let* α2 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []]]
                      _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (Trait := ℐ))) in
                let* α3 :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.read numbers in
                let* α4 :
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.call (α2 α3) in
                let* α5 :
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      [Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []];
                        Ty.function
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []]]
                          (Ty.path "i32")] :=
                  M.call
                    (α1
                      α4
                      (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []])::["unwrap"]) in
                let* α6 :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.path "i32";
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.call (α0 α5) in
                M.alloc α6 in
              let* errors :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [Ty.apply (Ty.path "core::num::error::ParseIntError") [];
                      Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                let* α0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          [Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [Ty.apply
                                  (Ty.path "core::result::Result")
                                  [Ty.path "i32";
                                    Ty.apply
                                      (Ty.path
                                        "core::num::error::ParseIntError")
                                      []];
                                Ty.apply (Ty.path "alloc::alloc::Global") []];
                            Ty.function
                              [Ty.apply
                                  (Ty.path "core::result::Result")
                                  [Ty.path "i32";
                                    Ty.apply
                                      (Ty.path
                                        "core::num::error::ParseIntError")
                                      []]]
                              (Ty.apply
                                (Ty.path "core::num::error::ParseIntError")
                                [])]]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [Ty.apply
                            (Ty.path "core::num::error::ParseIntError")
                            [];
                          Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.iterator.Iterator.collect
                      (Self :=
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          [Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [Ty.apply
                                  (Ty.path "core::result::Result")
                                  [Ty.path "i32";
                                    Ty.apply
                                      (Ty.path
                                        "core::num::error::ParseIntError")
                                      []];
                                Ty.apply (Ty.path "alloc::alloc::Global") []];
                            Ty.function
                              [Ty.apply
                                  (Ty.path "core::result::Result")
                                  [Ty.path "i32";
                                    Ty.apply
                                      (Ty.path
                                        "core::num::error::ParseIntError")
                                      []]]
                              (Ty.apply
                                (Ty.path "core::num::error::ParseIntError")
                                [])])
                      (B :=
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              [];
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (Trait := ℐ))) in
                let* α1 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []];
                        Ty.function
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []]]
                          (Ty.apply
                            (Ty.path "core::num::error::ParseIntError")
                            [])]
                      (Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        [Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            [Ty.apply
                                (Ty.path "core::result::Result")
                                [Ty.path "i32";
                                  Ty.apply
                                    (Ty.path "core::num::error::ParseIntError")
                                    []];
                              Ty.apply (Ty.path "alloc::alloc::Global") []];
                          Ty.function
                            [Ty.apply
                                (Ty.path "core::result::Result")
                                [Ty.path "i32";
                                  Ty.apply
                                    (Ty.path "core::num::error::ParseIntError")
                                    []]]
                            (Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              [])]) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.iterator.Iterator.map
                      (Self :=
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (B :=
                        Ty.apply (Ty.path "core::num::error::ParseIntError") [])
                      (F :=
                        Ty.function
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []]]
                          (Ty.apply
                            (Ty.path "core::num::error::ParseIntError")
                            []))
                      (Trait := ℐ))) in
                let* α2 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []]]
                      _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []])
                      (Trait := ℐ))) in
                let* α3 :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.read errors in
                let* α4 :
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      [Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.call (α2 α3) in
                let* α5 :
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      [Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []];
                            Ty.apply (Ty.path "alloc::alloc::Global") []];
                        Ty.function
                          [Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "i32";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []]]
                          (Ty.apply
                            (Ty.path "core::num::error::ParseIntError")
                            [])] :=
                  M.call
                    (α1
                      α4
                      (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []])::["unwrap_err"]) in
                let* α6 :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "core::num::error::ParseIntError") [];
                        Ty.apply (Ty.path "alloc::alloc::Global") []] :=
                  M.call (α0 α5) in
                M.alloc α6 in
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "Numbers: ") in
                  let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "
") in
                  let* α2 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ α0; α1 ] in
                  let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_debug"]
                        (borrow numbers)) in
                  let* α4 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                    M.alloc [ α3 ] in
                  let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α4))) in
                  let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                  M.alloc α6 in
                M.alloc tt in
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "Errors: ") in
                  let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "
") in
                  let* α2 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ α0; α1 ] in
                  let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_debug"]
                        (borrow errors)) in
                  let* α4 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                    M.alloc [ α3 ] in
                  let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α4))) in
                  let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                  M.alloc α6 in
                M.alloc tt in
              M.alloc tt
            end) :
            Ty.path "unit"
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
