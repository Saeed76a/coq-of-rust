(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let strings = vec!["42", "tofu", "93", "999", "18"];
    let mut errors = vec![];
    let numbers: Vec<_> = strings
        .into_iter()
        .map(|s| s.parse::<u8>())
        .filter_map(|r| r.map_err(|e| errors.push(e)).ok())
        .collect();
    println!("Numbers: {:?}", numbers);
    println!("Errors: {:?}", errors);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* strings :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "42") in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "tofu") in
      let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "93") in
      let* Œ±3 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "999") in
      let* Œ±4 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "18") in
      let* Œ±5 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ Œ±0; Œ±1; Œ±2; Œ±3; Œ±4 ] in
      let* Œ±6 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±5) in
      let* Œ±7 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read Œ±6 in
      let* Œ±8 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" Œ±7)) in
      M.alloc Œ±8 in
    let* errors :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "core::num::error::ParseIntError") [];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "core::num::error::ParseIntError") [];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "core::num::error::ParseIntError") [];
                Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"] in
      M.alloc Œ±0 in
    let* numbers :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* Œ±0 :
          Ty.function
            [Ty.apply
                (Ty.path "core::iter::adapters::filter_map::FilterMap")
                [Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"];
                          Ty.apply (Ty.path "alloc::alloc::Global") []];
                      Ty.function
                        [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "u8";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []])];
                  Ty.function
                    [Ty.tuple
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "u8";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []])]
                    (Ty.apply (Ty.path "core::option::Option") [Ty.path "u8"])]]
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.collect
            (Self :=
              Ty.apply
                (Ty.path "core::iter::adapters::filter_map::FilterMap")
                [Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"];
                          Ty.apply (Ty.path "alloc::alloc::Global") []];
                      Ty.function
                        [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "u8";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []])];
                  Ty.function
                    [Ty.tuple
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "u8";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []])]
                    (Ty.apply (Ty.path "core::option::Option") [Ty.path "u8"])])
            (B :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ‚Ñê))) in
      let* Œ±1 :
          Ty.function
            [Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"];
                      Ty.apply (Ty.path "alloc::alloc::Global") []];
                  Ty.function
                    [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "u8";
                        Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []])];
              Ty.function
                [Ty.tuple
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "u8";
                        Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []])]
                (Ty.apply (Ty.path "core::option::Option") [Ty.path "u8"])]
            (Ty.apply
              (Ty.path "core::iter::adapters::filter_map::FilterMap")
              [Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  [Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"];
                        Ty.apply (Ty.path "alloc::alloc::Global") []];
                    Ty.function
                      [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                      (Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.path "u8";
                          Ty.apply
                            (Ty.path "core::num::error::ParseIntError")
                            []])];
                Ty.function
                  [Ty.tuple
                      (Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.path "u8";
                          Ty.apply
                            (Ty.path "core::num::error::ParseIntError")
                            []])]
                  (Ty.apply
                    (Ty.path "core::option::Option")
                    [Ty.path "u8"])]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.filter_map
            (Self :=
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"];
                      Ty.apply (Ty.path "alloc::alloc::Global") []];
                  Ty.function
                    [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "u8";
                        Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []])])
            (B := Ty.path "u8")
            (F :=
              Ty.function
                [Ty.tuple
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "u8";
                        Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []])]
                (Ty.apply (Ty.path "core::option::Option") [Ty.path "u8"]))
            (Trait := ‚Ñê))) in
      let* Œ±2 :
          Ty.function
            [Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.apply (Ty.path "ref") [Ty.path "str"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []];
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                (Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "u8";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []])]
            (Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              [Ty.apply
                  (Ty.path "alloc::vec::into_iter::IntoIter")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []];
                Ty.function
                  [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.path "u8";
                      Ty.apply
                        (Ty.path "core::num::error::ParseIntError")
                        []])]) :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.map
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.apply (Ty.path "ref") [Ty.path "str"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])
            (B :=
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "u8";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []])
            (F :=
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                (Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "u8";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []]))
            (Trait := ‚Ñê))) in
      let* Œ±3 :
          Ty.function
            [Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "ref") [Ty.path "str"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]]
            _ :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "ref") [Ty.path "str"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ‚Ñê))) in
      let* Œ±4 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read strings in
      let* Œ±5 :
          Ty.apply
            (Ty.path "alloc::vec::into_iter::IntoIter")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (Œ±3 Œ±4) in
      let* Œ±6 :
          Ty.apply
            (Ty.path "core::iter::adapters::map::Map")
            [Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.apply (Ty.path "ref") [Ty.path "str"];
                  Ty.apply (Ty.path "alloc::alloc::Global") []];
              Ty.function
                [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                (Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "u8";
                    Ty.apply
                      (Ty.path "core::num::error::ParseIntError")
                      []])] :=
        M.call
          (Œ±2
            Œ±5
            (fun (Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"]) =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* s := M.copy Œ≥ in
                    let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                      M.read s in
                    M.call ((Ty.path "str")::["parse"] Œ±0)) :
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "u8";
                        Ty.apply (Ty.path "core::num::error::ParseIntError") []]
                ]) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.path "u8";
                  Ty.apply (Ty.path "core::num::error::ParseIntError") []])) in
      let* Œ±7 :
          Ty.apply
            (Ty.path "core::iter::adapters::filter_map::FilterMap")
            [Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    [Ty.apply (Ty.path "ref") [Ty.path "str"];
                      Ty.apply (Ty.path "alloc::alloc::Global") []];
                  Ty.function
                    [Ty.tuple (Ty.apply (Ty.path "ref") [Ty.path "str"])]
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "u8";
                        Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []])];
              Ty.function
                [Ty.tuple
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.path "u8";
                        Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []])]
                (Ty.apply (Ty.path "core::option::Option") [Ty.path "u8"])] :=
        M.call
          (Œ±1
            Œ±6
            (fun
                (Œ±0 :
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [Ty.path "u8";
                      Ty.apply
                        (Ty.path "core::num::error::ParseIntError")
                        []]) =>
              (let* Œ±0 := M.alloc Œ±0 in
              match_operator
                Œ±0
                [
                  fun Œ≥ =>
                    (let* r := M.copy Œ≥ in
                    let* Œ±0 :
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "u8";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []] :=
                      M.read r in
                    let* Œ±1 :
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "u8"; Ty.tuple] :=
                      M.call
                        ((Ty.apply
                              (Ty.path "core::result::Result")
                              [Ty.path "u8";
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []])::["map_err"]
                          Œ±0
                          (fun
                              (Œ±0 :
                                Ty.apply
                                  (Ty.path "core::num::error::ParseIntError")
                                  []) =>
                            (let* Œ±0 := M.alloc Œ±0 in
                            match_operator
                              Œ±0
                              [
                                fun Œ≥ =>
                                  (let* e := M.copy Œ≥ in
                                  let* Œ±0 :
                                      Ty.apply
                                        (Ty.path
                                          "core::num::error::ParseIntError")
                                        [] :=
                                    M.read e in
                                  M.call
                                    ((Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [Ty.apply
                                              (Ty.path
                                                "core::num::error::ParseIntError")
                                              [];
                                            Ty.apply
                                              (Ty.path "alloc::alloc::Global")
                                              []])::["push"]
                                      (borrow_mut errors)
                                      Œ±0)) :
                                  Ty.tuple
                              ]) :
                            Ty.tuple)) in
                    M.call
                      ((Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "u8"; Ty.tuple])::["ok"]
                        Œ±1)) :
                    Ty.apply (Ty.path "core::option::Option") [Ty.path "u8"]
                ]) :
              Ty.apply (Ty.path "core::option::Option") [Ty.path "u8"])) in
      let* Œ±8 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.path "u8"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call (Œ±0 Œ±7) in
      M.alloc Œ±8 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Numbers: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow numbers)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "Errors: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow errors)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
