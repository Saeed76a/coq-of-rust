(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T;
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [dyn [core.error.Error.Trait];
              Ty.apply (Ty.path "alloc::alloc::Global") []]].



Module  Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec.
Section Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "other_uses_of_question_mark::EmptyVec") [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "EmptyVec") in
      M.call
        ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_str"] Œ±0 Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec.
End Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec.

Module  Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec.
Section Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "other_uses_of_question_mark::EmptyVec") [].
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "invalid first item to double")
      }
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "invalid first item to double") in
      let* Œ±2 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ Œ±1 ] in
      let* Œ±3 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
        M.call
          ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
            (pointer_coercion "Unsize" (borrow Œ±2))) in
      M.call
        ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_fmt"] Œ±0 Œ±3)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec.
End Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec.

Module  Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec.
Section Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "other_uses_of_question_mark::EmptyVec") [].
  
  Definition ‚Ñê : Instance.t := [("source", source);
    ("type_id", type_id);
    ("description", description);
    ("cause", cause);
    ("provide", provide)].
End Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec.
End Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(EmptyVec)?;
    let parsed = first.parse::<i32>()?;
    Ok(2 * parsed)
}
*)
Definition double_first (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [vec] =>
    let* vec := M.alloc vec in
    let return_ :=
      M.return_
        (R :=
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [dyn [core.error.Error.Trait];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]]) in
    M.catch_return
      (let* first :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        let* Œ±0 :
            Ty.function
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]];
                    Ty.apply
                      (Ty.path "other_uses_of_question_mark::EmptyVec")
                      []]]
              (Ty.apply
                (Ty.path "core::ops::control_flow::ControlFlow")
                [_; _]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.try_trait.Try.branch
              (Self :=
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]];
                    Ty.apply
                      (Ty.path "other_uses_of_question_mark::EmptyVec")
                      []])
              (Trait := ‚Ñê))) in
        let* Œ±1 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"];
                        Ty.apply (Ty.path "alloc::alloc::Global") []]]]
              (Ty.apply (Ty.path "ref") [_]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.deref.Deref.deref
              (Self :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Trait := ‚Ñê))) in
        let* Œ±2 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "slice")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]] :=
          M.call (Œ±1 (borrow vec)) in
        let* Œ±3 :
            Ty.apply
              (Ty.path "core::option::Option")
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]] :=
          M.call
            ((Ty.apply
                  (Ty.path "slice")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["first"]
              Œ±2) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]];
                Ty.apply
                  (Ty.path "other_uses_of_question_mark::EmptyVec")
                  []] :=
          M.call
            ((Ty.apply
                  (Ty.path "core::option::Option")
                  [Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]]])::["ok_or"]
              Œ±3
              other_uses_of_question_mark.EmptyVec.Build) in
        let* Œ±5 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply
                      (Ty.path "other_uses_of_question_mark::EmptyVec")
                      []];
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]] :=
          M.call (Œ±0 Œ±4) in
        let* Œ±6 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply
                      (Ty.path "other_uses_of_question_mark::EmptyVec")
                      []];
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]] :=
          M.alloc Œ±5 in
        let* Œ±7 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          match_operator
            Œ±6
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :
                      Ty.function
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply
                                (Ty.path
                                  "other_uses_of_question_mark::EmptyVec")
                                []]]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [dyn [core.error.Error.Trait];
                                Ty.apply
                                  (Ty.path "alloc::alloc::Global")
                                  []]]) :=
                    ltac:(M.get_method (fun ‚Ñê =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "i32";
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                [dyn [core.error.Error.Trait];
                                  Ty.apply
                                    (Ty.path "alloc::alloc::Global")
                                    []]])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply
                                (Ty.path
                                  "other_uses_of_question_mark::EmptyVec")
                                []])
                        (Trait := ‚Ñê))) in
                  let* Œ±1 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply (Ty.path "core::convert::Infallible") [];
                          Ty.apply
                            (Ty.path "other_uses_of_question_mark::EmptyVec")
                            []] :=
                    M.read residual in
                  let* Œ±2 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.path "i32";
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [dyn [core.error.Error.Trait];
                              Ty.apply (Ty.path "alloc::alloc::Global") []]] :=
                    M.call (Œ±0 Œ±1) in
                  let* Œ±3 : Ty.path "never" := return_ Œ±2 in
                  let* Œ±4 : Ty.path "never" := M.read Œ±3 in
                  let* Œ±5 :
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match
                end) :
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]
            ] in
        M.copy Œ±7 in
      let* parsed : Ty.path "i32" :=
        let* Œ±0 :
            Ty.function
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []]]
              (Ty.apply
                (Ty.path "core::ops::control_flow::ControlFlow")
                [_; _]) :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.try_trait.Try.branch
              (Self :=
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []])
              (Trait := ‚Ñê))) in
        let* Œ±1 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.read first in
        let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (deref Œ±1) in
        let* Œ±3 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.path "i32";
                Ty.apply (Ty.path "core::num::error::ParseIntError") []] :=
          M.call ((Ty.path "str")::["parse"] Œ±2) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []];
                Ty.path "i32"] :=
          M.call (Œ±0 Œ±3) in
        let* Œ±5 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []];
                Ty.path "i32"] :=
          M.alloc Œ±4 in
        let* Œ±6 : Ty.path "i32" :=
          match_operator
            Œ±5
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :
                      Ty.function
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply
                                (Ty.path "core::num::error::ParseIntError")
                                []]]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [dyn [core.error.Error.Trait];
                                Ty.apply
                                  (Ty.path "alloc::alloc::Global")
                                  []]]) :=
                    ltac:(M.get_method (fun ‚Ñê =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "i32";
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                [dyn [core.error.Error.Trait];
                                  Ty.apply
                                    (Ty.path "alloc::alloc::Global")
                                    []]])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply
                                (Ty.path "core::num::error::ParseIntError")
                                []])
                        (Trait := ‚Ñê))) in
                  let* Œ±1 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply (Ty.path "core::convert::Infallible") [];
                          Ty.apply
                            (Ty.path "core::num::error::ParseIntError")
                            []] :=
                    M.read residual in
                  let* Œ±2 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.path "i32";
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [dyn [core.error.Error.Trait];
                              Ty.apply (Ty.path "alloc::alloc::Global") []]] :=
                    M.call (Œ±0 Œ±1) in
                  let* Œ±3 : Ty.path "never" := return_ Œ±2 in
                  let* Œ±4 : Ty.path "never" := M.read Œ±3 in
                  let* Œ±5 : Ty.path "i32" := never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match
                end) :
                Ty.path "i32";
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.path "i32"
            ] in
        M.copy Œ±6 in
      let* Œ±0 : Ty.path "i32" := M.read parsed in
      let* Œ±1 : Ty.path "i32" :=
        BinOp.Panic.mul ((Integer.of_Z 2) : Ty.path "i32") Œ±0 in
      let* Œ±0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [dyn [core.error.Error.Trait];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]] :=
        M.alloc (core.result.Result.Ok Œ±1) in
      M.read Œ±0)
  | _, _ => M.impossible
  end.

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [result] =>
    let* result := M.alloc result in
    let* Œ±0 : Ty.tuple :=
      match_operator
        result
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Ok _ =>
              let Œ≥0_0 := core.result.Result.Get_Ok_0 Œ≥ in
              let* n := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "The first doubled is ") in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow n)) in
                let* Œ±4 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ Œ±3 ] in
                let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±4))) in
                let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
                M.alloc Œ±6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Err _ =>
              let Œ≥0_0 := core.result.Result.Get_Err_0 Œ≥ in
              let* e := M.copy Œ≥0_0 in
              let* _ : Ty.tuple :=
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "Error: ") in
                let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* Œ±2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow e)) in
                let* Œ±4 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ Œ±3 ] in
                let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±4))) in
                let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
                M.alloc Œ±6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple
        ] in
    M.read Œ±0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* numbers :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "42") in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "93") in
      let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "18") in
      let* Œ±3 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ Œ±0; Œ±1; Œ±2 ] in
      let* Œ±4 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±3) in
      let* Œ±5 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read Œ±4 in
      let* Œ±6 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" Œ±5)) in
      M.alloc Œ±6 in
    let* empty :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"] in
      M.alloc Œ±0 in
    let* strings :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "tofu") in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "93") in
      let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "18") in
      let* Œ±3 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ Œ±0; Œ±1; Œ±2 ] in
      let* Œ±4 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±3) in
      let* Œ±5 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read Œ±4 in
      let* Œ±6 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" Œ±5)) in
      M.alloc Œ±6 in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read numbers in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [dyn [core.error.Error.Trait];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]] :=
        M.call (other_uses_of_question_mark.double_first Œ±0) in
      let* Œ±2 : Ty.tuple := M.call (other_uses_of_question_mark.print Œ±1) in
      M.alloc Œ±2 in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read empty in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [dyn [core.error.Error.Trait];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]] :=
        M.call (other_uses_of_question_mark.double_first Œ±0) in
      let* Œ±2 : Ty.tuple := M.call (other_uses_of_question_mark.print Œ±1) in
      M.alloc Œ±2 in
    let* _ : Ty.tuple :=
      let* Œ±0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read strings in
      let* Œ±1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [dyn [core.error.Error.Trait];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]] :=
        M.call (other_uses_of_question_mark.double_first Œ±0) in
      let* Œ±2 : Ty.tuple := M.call (other_uses_of_question_mark.print Œ±1) in
      M.alloc Œ±2 in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
