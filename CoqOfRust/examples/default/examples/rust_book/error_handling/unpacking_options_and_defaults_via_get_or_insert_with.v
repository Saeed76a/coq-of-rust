(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_with_Fruit.
Section Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_with_Fruit.
  Definition Self : Ty.t :=
    Ty.apply
      (Ty.path "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
      [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
        M.read f in
      let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        match_operator
          self
          [
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              |
                  unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Apple
                  =>
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "Apple") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              |
                  unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Orange
                  =>
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "Orange") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              |
                  unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Banana
                  =>
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "Banana") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              |
                  unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Kiwi
                  =>
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "Kiwi") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              |
                  unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Lemon
                  =>
                let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "Lemon") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"]
          ] in
      let* Œ±2 : Ty.apply (Ty.path "ref") [Ty.path "str"] := M.read Œ±1 in
      M.call
        ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_str"] Œ±0 Œ±2)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_with_Fruit.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_with_Fruit.

(*
fn main() {
    let mut my_fruit: Option<Fruit> = None;
    let get_lemon_as_fallback = || {
        println!("Providing lemon as fallback");
        Fruit::Lemon
    };
    let first_available_fruit = my_fruit.get_or_insert_with(get_lemon_as_fallback);
    println!("my_fruit is: {:?}", first_available_fruit);
    println!("first_available_fruit is: {:?}", first_available_fruit);
    // Providing lemon as fallback
    // my_fruit is: Lemon
    // first_available_fruit is: Lemon

    // If the Option has a value, it is left unchanged, and the closure is not invoked
    let mut my_apple = Some(Fruit::Apple);
    let should_be_apple = my_apple.get_or_insert_with(get_lemon_as_fallback);
    println!("should_be_apple is: {:?}", should_be_apple);
    println!("my_apple is unchanged: {:?}", my_apple);
    // The output is a follows. Note that the closure `get_lemon_as_fallback` is not invoked
    // should_be_apple is: Apple
    // my_apple is unchanged: Some(Apple)
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* my_fruit :
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply
              (Ty.path
                "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
              []] :=
      M.alloc core.option.Option.None in
    let* get_lemon_as_fallback :
        Ty.function
          [Ty.tuple]
          (Ty.apply
            (Ty.path
              "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
            []) :=
      M.alloc
        (fun (Œ±0 : Ty.path "unit") =>
          (let* Œ±0 := M.alloc Œ±0 in
          match_operator
            Œ±0
            [
              fun Œ≥ =>
                (let* _ : Ty.tuple :=
                  let* _ : Ty.tuple :=
                    let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                      M.read (mk_str "Providing lemon as fallback
") in
                    let* Œ±1 :
                        Ty.apply
                          (Ty.path "array")
                          [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                      M.alloc [ Œ±0 ] in
                    let* Œ±2 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                      M.call
                        ((Ty.apply
                              (Ty.path "core::fmt::Arguments")
                              [])::["new_const"]
                          (pointer_coercion "Unsize" (borrow Œ±1))) in
                    let* Œ±3 : Ty.tuple := M.call (std.io.stdio._print Œ±2) in
                    M.alloc Œ±3 in
                  M.alloc tt in
                let* Œ±0 :
                    Ty.apply
                      (Ty.path
                        "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
                      [] :=
                  M.alloc
                    unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Lemon in
                M.read Œ±0) :
                Ty.apply
                  (Ty.path
                    "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
                  []
            ]) :
          Ty.apply
            (Ty.path
              "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
            []) in
    let* first_available_fruit :
        Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply
              (Ty.path
                "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
              []] :=
      let* Œ±0 :
          Ty.function
            [Ty.tuple]
            (Ty.apply
              (Ty.path
                "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
              []) :=
        M.read get_lemon_as_fallback in
      let* Œ±1 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply
                (Ty.path
                  "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
                []] :=
        M.call
          ((Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply
                    (Ty.path
                      "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
                    []])::["get_or_insert_with"]
            (borrow_mut my_fruit)
            Œ±0) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "my_fruit is: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow first_available_fruit)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "first_available_fruit is: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow first_available_fruit)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* my_apple :
        Ty.apply
          (Ty.path "core::option::Option")
          [Ty.apply
              (Ty.path
                "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
              []] :=
      M.alloc
        (core.option.Option.Some
          unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Apple) in
    let* should_be_apple :
        Ty.apply
          (Ty.path "mut_ref")
          [Ty.apply
              (Ty.path
                "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
              []] :=
      let* Œ±0 :
          Ty.function
            [Ty.tuple]
            (Ty.apply
              (Ty.path
                "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
              []) :=
        M.read get_lemon_as_fallback in
      let* Œ±1 :
          Ty.apply
            (Ty.path "mut_ref")
            [Ty.apply
                (Ty.path
                  "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
                []] :=
        M.call
          ((Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply
                    (Ty.path
                      "unpacking_options_and_defaults_via_get_or_insert_with::Fruit")
                    []])::["get_or_insert_with"]
            (borrow_mut my_apple)
            Œ±0) in
      M.alloc Œ±1 in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "should_be_apple is: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow should_be_apple)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* _ : Ty.tuple :=
      let* _ : Ty.tuple :=
        let* Œ±0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "my_apple is unchanged: ") in
        let* Œ±1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (mk_str "
") in
        let* Œ±2 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow my_apple)) in
        let* Œ±4 :
            Ty.apply
              (Ty.path "array")
              [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
          M.alloc [ Œ±3 ] in
        let* Œ±5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 : Ty.tuple := M.call (std.io.stdio._print Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 : Ty.path "unit" := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
