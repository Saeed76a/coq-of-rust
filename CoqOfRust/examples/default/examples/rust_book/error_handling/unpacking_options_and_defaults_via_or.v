(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Fruit *)

Module Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_or_Fruit.
  Definition Self : Ty.t :=
    Ty.path "unpacking_options_and_defaults_via_or::Fruit".
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 :=
        match_operator
          self
          [
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or.Fruit.Apple =>
                let* Œ±0 := M.read (mk_str "Apple") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or.Fruit.Orange =>
                let* Œ±0 := M.read (mk_str "Orange") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or.Fruit.Banana =>
                let* Œ±0 := M.read (mk_str "Banana") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or.Fruit.Kiwi =>
                let* Œ±0 := M.read (mk_str "Kiwi") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | unpacking_options_and_defaults_via_or.Fruit.Lemon =>
                let* Œ±0 := M.read (mk_str "Lemon") in
                M.alloc Œ±0
              | _ => M.break_match
              end) :
              Ty.apply (Ty.path "ref") [Ty.path "str"]
          ] in
      let* Œ±2 := M.read Œ±1 in
      M.call ((Ty.path "core::fmt::Formatter")::["write_str"] Œ±0 Œ±2)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("fmt", InstanceField.Method fmt)].
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_or_Fruit.

(*
fn main() {
    let apple = Some(Fruit::Apple);
    let orange = Some(Fruit::Orange);
    let no_fruit: Option<Fruit> = None;

    let first_available_fruit = no_fruit.or(orange).or(apple);
    println!("first_available_fruit: {:?}", first_available_fruit);
    // first_available_fruit: Some(Orange)

    // `or` moves its argument.
    // In the example above, `or(orange)` returned a `Some`, so `or(apple)` was not invoked.
    // But the variable named `apple` has been moved regardless, and cannot be used anymore.
    // println!("Variable apple was moved, so this line won't compile: {:?}", apple);
    // TODO: uncomment the line above to see the compiler error
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* apple :=
      M.alloc
        (core.option.Option.Some
          unpacking_options_and_defaults_via_or.Fruit.Apple) in
    let* orange :=
      M.alloc
        (core.option.Option.Some
          unpacking_options_and_defaults_via_or.Fruit.Orange) in
    let* no_fruit := M.alloc core.option.Option.None in
    let* first_available_fruit :=
      let* Œ±0 := M.read no_fruit in
      let* Œ±1 := M.read orange in
      let* Œ±2 :=
        M.call
          ((Ty.apply
                (Ty.path "core::option::Option")
                [Ty.path
                    "unpacking_options_and_defaults_via_or::Fruit"])::["or"]
            Œ±0
            Œ±1) in
      let* Œ±3 := M.read apple in
      let* Œ±4 :=
        M.call
          ((Ty.apply
                (Ty.path "core::option::Option")
                [Ty.path
                    "unpacking_options_and_defaults_via_or::Fruit"])::["or"]
            Œ±2
            Œ±3) in
      M.alloc Œ±4 in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "first_available_fruit: ") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_debug"]
              (borrow first_available_fruit)) in
        let* Œ±4 := M.alloc [ Œ±3 ] in
        let* Œ±5 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
