(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
Section Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                let* α0 :
                    Ty.apply
                      (Ty.path "mut_ref")
                      [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
                  M.read f in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "EmptyVec") in
                let* α2 :
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Formatter")
                          [])::["write_str"]
                      α0
                      α1) in
                M.alloc α2
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []];
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.Parse _ =>
                let γ1_0 := wrapping_errors.DoubleError.Get_Parse_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :
                    Ty.apply
                      (Ty.path "mut_ref")
                      [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
                  M.read f in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "Parse") in
                let* α2 :
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Formatter")
                          [])::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []]
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T; Ty.apply (Ty.path "wrapping_errors::DoubleError") []].

Module  Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
Section Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          match *self {
              DoubleError::EmptyVec => write!(f, "please use a vector with at least one element"),
              // The wrapped error contains additional information and is available
              // via the source() method.
              DoubleError::Parse(..) => write!(f, "the provided string could not be parsed as int"),
          }
      }
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "wrapping_errors::DoubleError") []] :=
        M.read self in
      let* α1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
        match_operator
          (deref α0)
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                let* α0 :
                    Ty.apply
                      (Ty.path "mut_ref")
                      [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
                  M.read f in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read
                    (mk_str "please use a vector with at least one element") in
                let* α2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ α1 ] in
                let* α3 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Arguments")
                          [])::["new_const"]
                      (pointer_coercion "Unsize" (borrow α2))) in
                let* α4 :
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Formatter")
                          [])::["write_fmt"]
                      α0
                      α3) in
                M.alloc α4
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []];
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.Parse =>
                let* α0 :
                    Ty.apply
                      (Ty.path "mut_ref")
                      [Ty.apply (Ty.path "core::fmt::Formatter") []] :=
                  M.read f in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read
                    (mk_str "the provided string could not be parsed as int") in
                let* α2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ α1 ] in
                let* α3 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Arguments")
                          [])::["new_const"]
                      (pointer_coercion "Unsize" (borrow α2))) in
                let* α4 :
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::Formatter")
                          [])::["write_fmt"]
                      α0
                      α3) in
                M.alloc α4
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple; Ty.apply (Ty.path "core::fmt::Error") []]
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ℐ : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError.

Module  Impl_core_error_Error_for_wrapping_errors_DoubleError.
Section Impl_core_error_Error_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  (*
      fn source(&self) -> Option<&(dyn error::Error + 'static)> {
          match *self {
              DoubleError::EmptyVec => None,
              // The cause is the underlying implementation error type. Is implicitly
              // cast to the trait object `&error::Error`. This works because the
              // underlying type already implements the `Error` trait.
              DoubleError::Parse(ref e) => Some(e),
          }
      }
  *)
  Definition source (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :
          Ty.apply
            (Ty.path "ref")
            [Ty.apply (Ty.path "wrapping_errors::DoubleError") []] :=
        M.read self in
      let* α1 :
          Ty.apply
            (Ty.path "core::option::Option")
            [Ty.apply (Ty.path "ref") [dyn [core.error.Error.Trait]]] :=
        match_operator
          (deref α0)
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                M.alloc core.option.Option.None
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply (Ty.path "ref") [dyn [core.error.Error.Trait]]];
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.Parse _ =>
                let γ0_0 := wrapping_errors.DoubleError.Get_Parse_0 γ in
                let* e := M.alloc (borrow γ0_0) in
                let* α0 :
                    Ty.apply
                      (Ty.path "ref")
                      [Ty.apply
                          (Ty.path "core::num::error::ParseIntError")
                          []] :=
                  M.read e in
                M.alloc (core.option.Option.Some (pointer_coercion "Unsize" α0))
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply (Ty.path "ref") [dyn [core.error.Error.Trait]]]
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_source : Instance.t := {
    Notations.double_colon := source;
  }.
  
  Definition ℐ : Instance.t := [("source", source);
    ("type_id", type_id);
    ("description", description);
    ("cause", cause);
    ("provide", provide)].
End Impl_core_error_Error_for_wrapping_errors_DoubleError.
End Impl_core_error_Error_for_wrapping_errors_DoubleError.

Module  Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
Section Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "wrapping_errors::DoubleError") [].
  
  (*
      fn from(err: ParseIntError) -> DoubleError {
          DoubleError::Parse(err)
      }
  *)
  Definition from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [err] =>
      let* err := M.alloc err in
      let* α0 : Ty.apply (Ty.path "core::num::error::ParseIntError") [] :=
        M.read err in
      M.pure (wrapping_errors.DoubleError.Parse α0)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_from : Instance.t := {
    Notations.double_colon := from;
  }.
  
  Definition ℐ : Instance.t := [("from", from)].
End Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
End Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(DoubleError::EmptyVec)?;
    // Here we implicitly use the `ParseIntError` implementation of `From` (which
    // we defined above) in order to create a `DoubleError`.
    let parsed = first.parse::<i32>()?;

    Ok(2 * parsed)
}
*)
Definition double_first (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [vec] =>
    let* vec := M.alloc vec in
    let return_ :=
      M.return_
        (R :=
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply (Ty.path "wrapping_errors::DoubleError") []]) in
    M.catch_return
      (let* first :
          Ty.apply (Ty.path "ref") [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        let* α0 :
            Ty.function
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]];
                    Ty.apply (Ty.path "wrapping_errors::DoubleError") []]]
              (Ty.apply
                (Ty.path "core::ops::control_flow::ControlFlow")
                [_; _]) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]];
                    Ty.apply (Ty.path "wrapping_errors::DoubleError") []])
              (Trait := ℐ))) in
        let* α1 :
            Ty.function
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"];
                        Ty.apply (Ty.path "alloc::alloc::Global") []]]]
              (Ty.apply (Ty.path "ref") [_]) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.deref.Deref.deref
              (Self :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"];
                    Ty.apply (Ty.path "alloc::alloc::Global") []])
              (Trait := ℐ))) in
        let* α2 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply
                  (Ty.path "slice")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]] :=
          M.call (α1 (borrow vec)) in
        let* α3 :
            Ty.apply
              (Ty.path "core::option::Option")
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]] :=
          M.call
            ((Ty.apply
                  (Ty.path "slice")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["first"]
              α2) in
        let* α4 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]];
                Ty.apply (Ty.path "wrapping_errors::DoubleError") []] :=
          M.call
            ((Ty.apply
                  (Ty.path "core::option::Option")
                  [Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]]])::["ok_or"]
              α3
              wrapping_errors.DoubleError.EmptyVec) in
        let* α5 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "wrapping_errors::DoubleError") []];
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]] :=
          M.call (α0 α4) in
        let* α6 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "wrapping_errors::DoubleError") []];
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]] :=
          M.alloc α5 in
        let* α7 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          match_operator
            α6
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      Ty.function
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply
                                (Ty.path "wrapping_errors::DoubleError")
                                []]]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "wrapping_errors::DoubleError")
                              []]) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "i32";
                              Ty.apply
                                (Ty.path "wrapping_errors::DoubleError")
                                []])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply
                                (Ty.path "wrapping_errors::DoubleError")
                                []])
                        (Trait := ℐ))) in
                  let* α1 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply (Ty.path "core::convert::Infallible") [];
                          Ty.apply
                            (Ty.path "wrapping_errors::DoubleError")
                            []] :=
                    M.read residual in
                  let* α2 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.path "i32";
                          Ty.apply
                            (Ty.path "wrapping_errors::DoubleError")
                            []] :=
                    M.call (α0 α1) in
                  let* α3 : Ty.path "never" := return_ α2 in
                  let* α4 : Ty.path "never" := M.read α3 in
                  let* α5 :
                      Ty.apply
                        (Ty.path "ref")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]
            ] in
        M.copy α7 in
      let* parsed : Ty.path "i32" :=
        let* α0 :
            Ty.function
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []]]
              (Ty.apply
                (Ty.path "core::ops::control_flow::ControlFlow")
                [_; _]) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []])
              (Trait := ℐ))) in
        let* α1 :
            Ty.apply
              (Ty.path "ref")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
          M.read first in
        let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
          M.read (deref α1) in
        let* α3 :
            Ty.apply
              (Ty.path "core::result::Result")
              [Ty.path "i32";
                Ty.apply (Ty.path "core::num::error::ParseIntError") []] :=
          M.call ((Ty.path "str")::["parse"] α2) in
        let* α4 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []];
                Ty.path "i32"] :=
          M.call (α0 α3) in
        let* α5 :
            Ty.apply
              (Ty.path "core::ops::control_flow::ControlFlow")
              [Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply (Ty.path "core::convert::Infallible") [];
                    Ty.apply (Ty.path "core::num::error::ParseIntError") []];
                Ty.path "i32"] :=
          M.alloc α4 in
        let* α6 : Ty.path "i32" :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      Ty.function
                        [Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply
                                (Ty.path "core::num::error::ParseIntError")
                                []]]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "wrapping_errors::DoubleError")
                              []]) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "i32";
                              Ty.apply
                                (Ty.path "wrapping_errors::DoubleError")
                                []])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.apply (Ty.path "core::convert::Infallible") [];
                              Ty.apply
                                (Ty.path "core::num::error::ParseIntError")
                                []])
                        (Trait := ℐ))) in
                  let* α1 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.apply (Ty.path "core::convert::Infallible") [];
                          Ty.apply
                            (Ty.path "core::num::error::ParseIntError")
                            []] :=
                    M.read residual in
                  let* α2 :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.path "i32";
                          Ty.apply
                            (Ty.path "wrapping_errors::DoubleError")
                            []] :=
                    M.call (α0 α1) in
                  let* α3 : Ty.path "never" := return_ α2 in
                  let* α4 : Ty.path "never" := M.read α3 in
                  let* α5 : Ty.path "i32" := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                Ty.path "i32";
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.path "i32"
            ] in
        M.copy α6 in
      let* α0 : Ty.path "i32" := M.read parsed in
      let* α1 : Ty.path "i32" :=
        BinOp.Panic.mul ((Integer.of_Z 2) : Ty.path "i32") α0 in
      let* α0 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply (Ty.path "wrapping_errors::DoubleError") []] :=
        M.alloc (core.result.Result.Ok α1) in
      M.read α0)
  | _, _ => M.impossible
  end.

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => {
            println!("Error: {}", e);
            if let Some(source) = e.source() {
                println!("  Caused by: {}", source);
            }
        }
    }
}
*)
Definition print (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [result] =>
    let* result := M.alloc result in
    let* α0 : Ty.tuple :=
      match_operator
        result
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Ok _ =>
              let γ0_0 := core.result.Result.Get_Ok_0 γ in
              let* n := M.copy γ0_0 in
              let* _ : Ty.tuple :=
                let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "The first doubled is ") in
                let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                  M.read (mk_str "
") in
                let* α2 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                  M.alloc [ α0; α1 ] in
                let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow n)) in
                let* α4 :
                    Ty.apply
                      (Ty.path "array")
                      [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                  M.alloc [ α3 ] in
                let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                M.alloc α6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Err _ =>
              let γ0_0 := core.result.Result.Get_Err_0 γ in
              let* e := M.copy γ0_0 in
              let* _ : Ty.tuple :=
                let* _ : Ty.tuple :=
                  let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "Error: ") in
                  let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                    M.read (mk_str "
") in
                  let* α2 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                    M.alloc [ α0; α1 ] in
                  let* α3 : Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::rt::Argument")
                            [])::["new_display"]
                        (borrow e)) in
                  let* α4 :
                      Ty.apply
                        (Ty.path "array")
                        [Ty.apply (Ty.path "core::fmt::rt::Argument") []] :=
                    M.alloc [ α3 ] in
                  let* α5 : Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                    M.call
                      ((Ty.apply
                            (Ty.path "core::fmt::Arguments")
                            [])::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α4))) in
                  let* α6 : Ty.tuple := M.call (std.io.stdio._print α5) in
                  M.alloc α6 in
                M.alloc tt in
              let* α0 :
                  Ty.function
                    [Ty.apply
                        (Ty.path "ref")
                        [Ty.apply (Ty.path "wrapping_errors::DoubleError") []]]
                    (Ty.apply
                      (Ty.path "core::option::Option")
                      [Ty.apply
                          (Ty.path "ref")
                          [dyn [core.error.Error.Trait]]]) :=
                ltac:(M.get_method (fun ℐ =>
                  core.error.Error.source
                    (Self :=
                      Ty.apply (Ty.path "wrapping_errors::DoubleError") [])
                    (Trait := ℐ))) in
              let* α1 :
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [Ty.apply (Ty.path "ref") [dyn [core.error.Error.Trait]]] :=
                M.call (α0 (borrow e)) in
              let* α2 :
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [Ty.apply (Ty.path "ref") [dyn [core.error.Error.Trait]]] :=
                M.alloc α1 in
              match_operator
                α2
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* source := M.copy γ0_0 in
                      let* _ : Ty.tuple :=
                        let* _ : Ty.tuple :=
                          let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                            M.read (mk_str "  Caused by: ") in
                          let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
                            M.read (mk_str "
") in
                          let* α2 :
                              Ty.apply
                                (Ty.path "array")
                                [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
                            M.alloc [ α0; α1 ] in
                          let* α3 :
                              Ty.apply (Ty.path "core::fmt::rt::Argument") [] :=
                            M.call
                              ((Ty.apply
                                    (Ty.path "core::fmt::rt::Argument")
                                    [])::["new_display"]
                                (borrow source)) in
                          let* α4 :
                              Ty.apply
                                (Ty.path "array")
                                [Ty.apply
                                    (Ty.path "core::fmt::rt::Argument")
                                    []] :=
                            M.alloc [ α3 ] in
                          let* α5 :
                              Ty.apply (Ty.path "core::fmt::Arguments") [] :=
                            M.call
                              ((Ty.apply
                                    (Ty.path "core::fmt::Arguments")
                                    [])::["new_v1"]
                                (pointer_coercion "Unsize" (borrow α2))
                                (pointer_coercion "Unsize" (borrow α4))) in
                          let* α6 : Ty.tuple :=
                            M.call (std.io.stdio._print α5) in
                          M.alloc α6 in
                        M.alloc tt in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    Ty.tuple;
                  fun γ => (M.alloc tt) : Ty.path "unit"
                ]
            | _ => M.break_match
            end) :
            Ty.tuple
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* numbers :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "42") in
      let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "93") in
      let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "18") in
      let* α3 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ α0; α1; α2 ] in
      let* α4 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] α3) in
      let* α5 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read α4 in
      let* α6 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" α5)) in
      M.alloc α6 in
    let* empty :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"] in
      M.alloc α0 in
    let* strings :
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [Ty.apply (Ty.path "ref") [Ty.path "str"];
            Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "tofu") in
      let* α1 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "93") in
      let* α2 : Ty.apply (Ty.path "ref") [Ty.path "str"] :=
        M.read (mk_str "18") in
      let* α3 :
          Ty.apply
            (Ty.path "array")
            [Ty.apply (Ty.path "ref") [Ty.path "str"]] :=
        M.alloc [ α0; α1; α2 ] in
      let* α4 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] α3) in
      let* α5 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.apply
                (Ty.path "array")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read α4 in
      let* α6 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" α5)) in
      M.alloc α6 in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read numbers in
      let* α1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply (Ty.path "wrapping_errors::DoubleError") []] :=
        M.call (wrapping_errors.double_first α0) in
      let* α2 : Ty.tuple := M.call (wrapping_errors.print α1) in
      M.alloc α2 in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read empty in
      let* α1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply (Ty.path "wrapping_errors::DoubleError") []] :=
        M.call (wrapping_errors.double_first α0) in
      let* α2 : Ty.tuple := M.call (wrapping_errors.print α1) in
      M.alloc α2 in
    let* _ : Ty.tuple :=
      let* α0 :
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [Ty.apply (Ty.path "ref") [Ty.path "str"];
              Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.read strings in
      let* α1 :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply (Ty.path "wrapping_errors::DoubleError") []] :=
        M.call (wrapping_errors.double_first α0) in
      let* α2 : Ty.tuple := M.call (wrapping_errors.print α1) in
      M.alloc α2 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
