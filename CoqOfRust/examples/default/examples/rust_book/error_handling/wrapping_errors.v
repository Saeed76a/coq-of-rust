(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum DoubleError *)

Module Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t := Ty.path "wrapping_errors::DoubleError".
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 :=
        match_operator
          self
          [
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                let* Œ±0 := M.read f in
                let* Œ±1 := M.read (mk_str "EmptyVec") in
                let* Œ±2 :=
                  M.call
                    ((Ty.path "core::fmt::Formatter")::["write_str"] Œ±0 Œ±1) in
                M.alloc Œ±2
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple []; Ty.path "core::fmt::Error"];
            fun Œ≥ =>
              (let* Œ≥ :=
                let* Œ±0 := M.read Œ≥ in
                M.pure (deref Œ±0) in
              let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | wrapping_errors.DoubleError.Parse _ =>
                let Œ≥1_0 :=
                  (M.var "wrapping_errors::DoubleError::Get_Parse_0") Œ≥ in
                let* __self_0 := M.alloc (borrow Œ≥1_0) in
                let* Œ±0 := M.read f in
                let* Œ±1 := M.read (mk_str "Parse") in
                let* Œ±2 :=
                  M.call
                    ((Ty.path
                          "core::fmt::Formatter")::["debug_tuple_field1_finish"]
                      Œ±0
                      Œ±1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc Œ±2
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple []; Ty.path "core::fmt::Error"]
          ] in
      M.read Œ±0
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("fmt", InstanceField.Method fmt)].
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.

Axiom Result :
  forall (T : Ty.t),
  (Ty.path "wrapping_errors::Result") =
    (Ty.apply
      (Ty.path "core::result::Result")
      [T; Ty.path "wrapping_errors::DoubleError"]).

Module Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t := Ty.path "wrapping_errors::DoubleError".
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          match *self {
              DoubleError::EmptyVec => write!(f, "please use a vector with at least one element"),
              // The wrapped error contains additional information and is available
              // via the source() method.
              DoubleError::Parse(..) => write!(f, "the provided string could not be parsed as int"),
          }
      }
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read self in
      let* Œ±1 :=
        match_operator
          (deref Œ±0)
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                let* Œ±0 := M.read f in
                let* Œ±1 :=
                  M.read
                    (mk_str "please use a vector with at least one element") in
                let* Œ±2 := M.alloc [ Œ±1 ] in
                let* Œ±3 :=
                  M.call
                    ((Ty.path "core::fmt::Arguments")::["new_const"]
                      (pointer_coercion "Unsize" (borrow Œ±2))) in
                let* Œ±4 :=
                  M.call
                    ((Ty.path "core::fmt::Formatter")::["write_fmt"] Œ±0 Œ±3) in
                M.alloc Œ±4
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple []; Ty.path "core::fmt::Error"];
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | wrapping_errors.DoubleError.Parse =>
                let* Œ±0 := M.read f in
                let* Œ±1 :=
                  M.read
                    (mk_str "the provided string could not be parsed as int") in
                let* Œ±2 := M.alloc [ Œ±1 ] in
                let* Œ±3 :=
                  M.call
                    ((Ty.path "core::fmt::Arguments")::["new_const"]
                      (pointer_coercion "Unsize" (borrow Œ±2))) in
                let* Œ±4 :=
                  M.call
                    ((Ty.path "core::fmt::Formatter")::["write_fmt"] Œ±0 Œ±3) in
                M.alloc Œ±4
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::result::Result")
                [Ty.tuple []; Ty.path "core::fmt::Error"]
          ] in
      M.read Œ±1
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("fmt", InstanceField.Method fmt)].
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError.

Module Impl_core_error_Error_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t := Ty.path "wrapping_errors::DoubleError".
  
  (*
      fn source(&self) -> Option<&(dyn error::Error + 'static)> {
          match *self {
              DoubleError::EmptyVec => None,
              // The cause is the underlying implementation error type. Is implicitly
              // cast to the trait object `&error::Error`. This works because the
              // underlying type already implements the `Error` trait.
              DoubleError::Parse(ref e) => Some(e),
          }
      }
  *)
  Definition source (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      let* Œ±0 := M.read self in
      let* Œ±1 :=
        match_operator
          (deref Œ±0)
          [
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                M.alloc core.option.Option.None
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.dyn [("core::error::Error::Trait", [])]]];
            fun Œ≥ =>
              (let* Œ±0 := M.read Œ≥ in
              match Œ±0 with
              | wrapping_errors.DoubleError.Parse _ =>
                let Œ≥0_0 :=
                  (M.var "wrapping_errors::DoubleError::Get_Parse_0") Œ≥ in
                let* e := M.alloc (borrow Œ≥0_0) in
                let* Œ±0 := M.read e in
                M.alloc (core.option.Option.Some (pointer_coercion "Unsize" Œ±0))
              | _ => M.break_match
              end) :
              Ty.apply
                (Ty.path "core::option::Option")
                [Ty.apply
                    (Ty.path "ref")
                    [Ty.dyn [("core::error::Error::Trait", [])]]]
          ] in
      M.read Œ±1
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("source", InstanceField.Method source)].
End Impl_core_error_Error_for_wrapping_errors_DoubleError.

Module Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t := Ty.path "wrapping_errors::DoubleError".
  
  (*
      fn from(err: ParseIntError) -> DoubleError {
          DoubleError::Parse(err)
      }
  *)
  Definition from (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [err] =>
      let* err := M.alloc err in
      let* Œ±0 := M.read err in
      M.pure (wrapping_errors.DoubleError.Parse Œ±0)
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê : Instance.t := [("from", InstanceField.Method from)].
End Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(DoubleError::EmptyVec)?;
    // Here we implicitly use the `ParseIntError` implementation of `From` (which
    // we defined above) in order to create a `DoubleError`.
    let parsed = first.parse::<i32>()?;

    Ok(2 * parsed)
}
*)
Definition double_first (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [vec] =>
    let* vec := M.alloc vec in
    let return_ :=
      M.return_
        (R :=
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32"; Ty.path "wrapping_errors::DoubleError"]) in
    M.catch_return
      (let* first :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.try_trait.Try.branch
              (Self :=
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]];
                    Ty.path "wrapping_errors::DoubleError"])
              (Trait := ‚Ñê))) in
        let* Œ±1 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.deref.Deref.deref
              (Self :=
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"];
                    Ty.path "alloc::alloc::Global"])
              (Trait := ‚Ñê))) in
        let* Œ±2 := M.call (Œ±1 (borrow vec)) in
        let* Œ±3 :=
          M.call
            ((Ty.apply
                  (Ty.path "slice")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["first"]
              Œ±2) in
        let* Œ±4 :=
          M.call
            ((Ty.apply
                  (Ty.path "core::option::Option")
                  [Ty.apply
                      (Ty.path "ref")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]]])::["ok_or"]
              Œ±3
              wrapping_errors.DoubleError.EmptyVec) in
        let* Œ±5 := M.call (Œ±0 Œ±4) in
        let* Œ±6 := M.alloc Œ±5 in
        let* Œ±7 :=
          match_operator
            Œ±6
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :=
                    ltac:(M.get_method (fun ‚Ñê =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "i32";
                              Ty.path "wrapping_errors::DoubleError"])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "core::convert::Infallible";
                              Ty.path "wrapping_errors::DoubleError"])
                        (Trait := ‚Ñê))) in
                  let* Œ±1 := M.read residual in
                  let* Œ±2 := M.call (Œ±0 Œ±1) in
                  let* Œ±3 := return_ Œ±2 in
                  let* Œ±4 := M.read Œ±3 in
                  let* Œ±5 := never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match
                end) :
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]
            ] in
        M.copy Œ±7 in
      let* parsed :=
        let* Œ±0 :=
          ltac:(M.get_method (fun ‚Ñê =>
            core.ops.try_trait.Try.branch
              (Self :=
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32"; Ty.path "core::num::error::ParseIntError"])
              (Trait := ‚Ñê))) in
        let* Œ±1 := M.read first in
        let* Œ±2 := M.read (deref Œ±1) in
        let* Œ±3 := M.call ((Ty.path "str")::["parse"] Œ±2) in
        let* Œ±4 := M.call (Œ±0 Œ±3) in
        let* Œ±5 := M.alloc Œ±4 in
        let* Œ±6 :=
          match_operator
            Œ±5
            [
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let Œ≥0_0 :=
                    (M.var "core::ops::control_flow::ControlFlow::Get_Break_0")
                      Œ≥ in
                  let* residual := M.copy Œ≥0_0 in
                  let* Œ±0 :=
                    ltac:(M.get_method (fun ‚Ñê =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "i32";
                              Ty.path "wrapping_errors::DoubleError"])
                        (R :=
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [Ty.path "core::convert::Infallible";
                              Ty.path "core::num::error::ParseIntError"])
                        (Trait := ‚Ñê))) in
                  let* Œ±1 := M.read residual in
                  let* Œ±2 := M.call (Œ±0 Œ±1) in
                  let* Œ±3 := return_ Œ±2 in
                  let* Œ±4 := M.read Œ±3 in
                  let* Œ±5 := never_to_any Œ±4 in
                  M.alloc Œ±5
                | _ => M.break_match
                end) :
                Ty.path "i32";
              fun Œ≥ =>
                (let* Œ±0 := M.read Œ≥ in
                match Œ±0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let Œ≥0_0 :=
                    (M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0")
                      Œ≥ in
                  let* val := M.copy Œ≥0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                Ty.path "i32"
            ] in
        M.copy Œ±6 in
      let* Œ±0 := M.read parsed in
      let* Œ±1 :=
        (M.var "BinOp::Panic::mul") ((Integer.of_Z 2) : Ty.path "i32") Œ±0 in
      let* Œ±0 := M.alloc (core.result.Result.Ok Œ±1) in
      M.read Œ±0)
  | _, _ => M.impossible
  end.

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => {
            println!("Error: {}", e);
            if let Some(source) = e.source() {
                println!("  Caused by: {}", source);
            }
        }
    }
}
*)
Definition print (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [result] =>
    let* result := M.alloc result in
    let* Œ±0 :=
      match_operator
        result
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Ok _ =>
              let Œ≥0_0 := (M.var "core::result::Result::Get_Ok_0") Œ≥ in
              let* n := M.copy Œ≥0_0 in
              let* _ :=
                let* Œ±0 := M.read (mk_str "The first doubled is ") in
                let* Œ±1 := M.read (mk_str "
") in
                let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 :=
                  M.call
                    ((Ty.path "core::fmt::rt::Argument")::["new_display"]
                      (borrow n)) in
                let* Œ±4 := M.alloc [ Œ±3 ] in
                let* Œ±5 :=
                  M.call
                    ((Ty.path "core::fmt::Arguments")::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±4))) in
                let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
                M.alloc Œ±6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple [];
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Err _ =>
              let Œ≥0_0 := (M.var "core::result::Result::Get_Err_0") Œ≥ in
              let* e := M.copy Œ≥0_0 in
              let* _ :=
                let* _ :=
                  let* Œ±0 := M.read (mk_str "Error: ") in
                  let* Œ±1 := M.read (mk_str "
") in
                  let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
                  let* Œ±3 :=
                    M.call
                      ((Ty.path "core::fmt::rt::Argument")::["new_display"]
                        (borrow e)) in
                  let* Œ±4 := M.alloc [ Œ±3 ] in
                  let* Œ±5 :=
                    M.call
                      ((Ty.path "core::fmt::Arguments")::["new_v1"]
                        (pointer_coercion "Unsize" (borrow Œ±2))
                        (pointer_coercion "Unsize" (borrow Œ±4))) in
                  let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
                  M.alloc Œ±6 in
                M.alloc tt in
              let* Œ±0 :=
                ltac:(M.get_method (fun ‚Ñê =>
                  core.error.Error.source
                    (Self := Ty.path "wrapping_errors::DoubleError")
                    (Trait := ‚Ñê))) in
              let* Œ±1 := M.call (Œ±0 (borrow e)) in
              let* Œ±2 := M.alloc Œ±1 in
              match_operator
                Œ±2
                [
                  fun Œ≥ =>
                    (let* Œ±0 := M.read Œ≥ in
                    match Œ±0 with
                    | core.option.Option.Some _ =>
                      let Œ≥0_0 :=
                        (M.var "core::option::Option::Get_Some_0") Œ≥ in
                      let* source := M.copy Œ≥0_0 in
                      let* _ :=
                        let* _ :=
                          let* Œ±0 := M.read (mk_str "  Caused by: ") in
                          let* Œ±1 := M.read (mk_str "
") in
                          let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
                          let* Œ±3 :=
                            M.call
                              ((Ty.path
                                    "core::fmt::rt::Argument")::["new_display"]
                                (borrow source)) in
                          let* Œ±4 := M.alloc [ Œ±3 ] in
                          let* Œ±5 :=
                            M.call
                              ((Ty.path "core::fmt::Arguments")::["new_v1"]
                                (pointer_coercion "Unsize" (borrow Œ±2))
                                (pointer_coercion "Unsize" (borrow Œ±4))) in
                          let* Œ±6 :=
                            M.call ((M.var "std::io::stdio::_print") Œ±5) in
                          M.alloc Œ±6 in
                        M.alloc tt in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    Ty.tuple [];
                  fun Œ≥ => (M.alloc tt) : Ty.path "unit"
                ]
            | _ => M.break_match
            end) :
            Ty.tuple []
        ] in
    M.read Œ±0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* numbers :=
      let* Œ±0 := M.read (mk_str "42") in
      let* Œ±1 := M.read (mk_str "93") in
      let* Œ±2 := M.read (mk_str "18") in
      let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
      let* Œ±4 :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±3) in
      let* Œ±5 := M.read Œ±4 in
      let* Œ±6 :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" Œ±5)) in
      M.alloc Œ±6 in
    let* empty :=
      let* Œ±0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.path "alloc::alloc::Global"])::["new"] in
      M.alloc Œ±0 in
    let* strings :=
      let* Œ±0 := M.read (mk_str "tofu") in
      let* Œ±1 := M.read (mk_str "93") in
      let* Œ±2 := M.read (mk_str "18") in
      let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
      let* Œ±4 :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±3) in
      let* Œ±5 := M.read Œ±4 in
      let* Œ±6 :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" Œ±5)) in
      M.alloc Œ±6 in
    let* _ :=
      let* Œ±0 := M.read numbers in
      let* Œ±1 := M.call ((M.var "wrapping_errors::double_first") Œ±0) in
      let* Œ±2 := M.call ((M.var "wrapping_errors::print") Œ±1) in
      M.alloc Œ±2 in
    let* _ :=
      let* Œ±0 := M.read empty in
      let* Œ±1 := M.call ((M.var "wrapping_errors::double_first") Œ±0) in
      let* Œ±2 := M.call ((M.var "wrapping_errors::print") Œ±1) in
      M.alloc Œ±2 in
    let* _ :=
      let* Œ±0 := M.read strings in
      let* Œ±1 := M.call ((M.var "wrapping_errors::double_first") Œ±0) in
      let* Œ±2 := M.call ((M.var "wrapping_errors::print") Œ±1) in
      M.alloc Œ±2 in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
