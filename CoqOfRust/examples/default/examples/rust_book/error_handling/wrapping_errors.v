(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum DoubleError *)

Module Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                let* α0 := M.read f in
                let* α1 := M.read (mk_str "EmptyVec") in
                let* α2 :=
                  M.call
                    (Ty.path "core::fmt::Formatter")::["write_str"]
                    [ α0; α1 ] in
                M.alloc α2
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.Parse _ =>
                let* γ1_0 :=
                  let* α0 :=
                    M.var "wrapping_errors::DoubleError::Get_Parse_0" in
                  M.pure (α0 γ) in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 := M.read f in
                let* α1 := M.read (mk_str "Parse") in
                let* α2 :=
                  M.call
                    (Ty.path
                        "core::fmt::Formatter")::["debug_tuple_field1_finish"]
                    [ α0; α1; pointer_coercion "Unsize" __self_0 ] in
                M.alloc α2
              | _ => M.break_match 
              end)
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "wrapping_errors::DoubleError")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.

Axiom Result :
  forall (T : Ty.t),
  (Ty.path "wrapping_errors::Result") =
    (Ty.apply
      (Ty.path "core::result::Result")
      [ T; Ty.path "wrapping_errors::DoubleError" ]).

Module Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          match *self {
              DoubleError::EmptyVec => write!(f, "please use a vector with at least one element"),
              // The wrapped error contains additional information and is available
              // via the source() method.
              DoubleError::Parse(..) => write!(f, "the provided string could not be parsed as int"),
          }
      }
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read self in
      let* α1 :=
        match_operator
          α0
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                let* α0 := M.read f in
                let* α1 :=
                  M.read
                    (mk_str "please use a vector with at least one element") in
                let* α2 := M.alloc [ α1 ] in
                let* α3 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_const"]
                    [ pointer_coercion "Unsize" α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::Formatter")::["write_fmt"]
                    [ α0; α3 ] in
                M.alloc α4
              | _ => M.break_match 
              end);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.Parse =>
                let* α0 := M.read f in
                let* α1 :=
                  M.read
                    (mk_str "the provided string could not be parsed as int") in
                let* α2 := M.alloc [ α1 ] in
                let* α3 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_const"]
                    [ pointer_coercion "Unsize" α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::Formatter")::["write_fmt"]
                    [ α0; α3 ] in
                M.alloc α4
              | _ => M.break_match 
              end)
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Display"
      (* Self *) (Ty.path "wrapping_errors::DoubleError")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError.

Module Impl_core_error_Error_for_wrapping_errors_DoubleError.
  (*
      fn source(&self) -> Option<&(dyn error::Error + 'static)> {
          match *self {
              DoubleError::EmptyVec => None,
              // The cause is the underlying implementation error type. Is implicitly
              // cast to the trait object `&error::Error`. This works because the
              // underlying type already implements the `Error` trait.
              DoubleError::Parse(ref e) => Some(e),
          }
      }
  *)
  Definition source (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        match_operator
          α0
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.EmptyVec =>
                M.alloc core.option.Option.None
              | _ => M.break_match 
              end);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | wrapping_errors.DoubleError.Parse _ =>
                let* γ0_0 :=
                  let* α0 :=
                    M.var "wrapping_errors::DoubleError::Get_Parse_0" in
                  M.pure (α0 γ) in
                let* e := M.alloc (borrow γ0_0) in
                let* α0 := M.read e in
                M.alloc
                  (Value.StructTuple
                    "core::option::Option::Some"
                    [ pointer_coercion "Unsize" α0 ])
              | _ => M.break_match 
              end)
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::error::Error"
      (* Self *) (Ty.path "wrapping_errors::DoubleError")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("source", InstanceField.Method source) ]
      (* Instance polymorphic types *) [].
End Impl_core_error_Error_for_wrapping_errors_DoubleError.

Module Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
  (*
      fn from(err: ParseIntError) -> DoubleError {
          DoubleError::Parse(err)
      }
  *)
  Definition from (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ err ] =>
      let* err := M.alloc err in
      let* α0 := M.read err in
      M.pure (Value.StructTuple "wrapping_errors::DoubleError::Parse" [ α0 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::From"
      (* Self *) (Ty.path "wrapping_errors::DoubleError")
      (* Trait polymorphic types *)
        [ (* T *) Ty.path "core::num::error::ParseIntError" ]
      (* Instance *) [ ("from", InstanceField.Method from) ]
      (* Instance polymorphic types *) [].
End Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(DoubleError::EmptyVec)?;
    // Here we implicitly use the `ParseIntError` implementation of `From` (which
    // we defined above) in order to create a `DoubleError`.
    let parsed = first.parse::<i32>()?;

    Ok(2 * parsed)
}
*)
Definition double_first (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ vec ] =>
    let* vec := M.alloc vec in
    let return_ :=
      M.return_
        (R :=
          Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.path "i32"; Ty.path "wrapping_errors::DoubleError" ]) in
    M.catch_return
      (let* first :=
        let* α0 :=
          M.get_method
            "core::ops::try_trait::Try"
            "branch"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "core::result::Result")
                  [
                    Ty.apply
                      (Ty.path "ref")
                      [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ];
                    Ty.path "wrapping_errors::DoubleError"
                  ]
            ] in
        let* α1 :=
          M.get_method
            "core::ops::deref::Deref"
            "deref"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "ref") [ Ty.path "str" ];
                    Ty.path "alloc::alloc::Global"
                  ]
            ] in
        let* α2 := M.call α1 [ vec ] in
        let* α3 :=
          M.call
            (Ty.apply
                (Ty.path "slice")
                [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ])::["first"]
            [ α2 ] in
        let* α4 :=
          M.call
            (Ty.apply
                (Ty.path "core::option::Option")
                [
                  Ty.apply
                    (Ty.path "ref")
                    [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ]
                ])::["ok_or"]
            [ α3; wrapping_errors.DoubleError.EmptyVec ] in
        let* α5 := M.call α0 [ α4 ] in
        let* α6 := M.alloc α5 in
        let* α7 :=
          match_operator
            α6
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let* γ0_0 :=
                    let* α0 :=
                      M.var
                        "core::ops::control_flow::ControlFlow::Get_Break_0" in
                    M.pure (α0 γ) in
                  let* residual := M.copy γ0_0 in
                  let* α0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "i32";
                              Ty.path "wrapping_errors::DoubleError"
                            ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "wrapping_errors::DoubleError"
                            ]
                      ] in
                  let* α1 := M.read residual in
                  let* α2 := M.call α0 [ α1 ] in
                  let* α3 := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match 
                end);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let* γ0_0 :=
                    let* α0 :=
                      M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0" in
                    M.pure (α0 γ) in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match 
                end)
            ] in
        M.copy α7 in
      let* parsed :=
        let* α0 :=
          M.get_method
            "core::ops::try_trait::Try"
            "branch"
            [
              (* Self *)
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i32"; Ty.path "core::num::error::ParseIntError" ]
            ] in
        let* α1 := M.read first in
        let* α2 := M.read α1 in
        let* α3 := M.call (Ty.path "str")::["parse"] [ α2 ] in
        let* α4 := M.call α0 [ α3 ] in
        let* α5 := M.alloc α4 in
        let* α6 :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let* γ0_0 :=
                    let* α0 :=
                      M.var
                        "core::ops::control_flow::ControlFlow::Get_Break_0" in
                    M.pure (α0 γ) in
                  let* residual := M.copy γ0_0 in
                  let* α0 :=
                    M.get_method
                      "core::ops::try_trait::FromResidual"
                      "from_residual"
                      [
                        (* Self *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "i32";
                              Ty.path "wrapping_errors::DoubleError"
                            ];
                        (* R *)
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "core::num::error::ParseIntError"
                            ]
                      ] in
                  let* α1 := M.read residual in
                  let* α2 := M.call α0 [ α1 ] in
                  let* α3 := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match 
                end);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let* γ0_0 :=
                    let* α0 :=
                      M.var
                        "core::ops::control_flow::ControlFlow::Get_Continue_0" in
                    M.pure (α0 γ) in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match 
                end)
            ] in
        M.copy α6 in
      let* α0 := M.var "BinOp::Panic::mul" in
      let* α1 := M.read parsed in
      let* α2 := α0 ((Integer.of_Z 2) : Ty.path "i32") α1 in
      let* α0 :=
        M.alloc (Value.StructTuple "core::result::Result::Ok" [ α2 ]) in
      M.read α0)
  | _, _ => M.impossible
  end.

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => {
            println!("Error: {}", e);
            if let Some(source) = e.source() {
                println!("  Caused by: {}", source);
            }
        }
    }
}
*)
Definition print (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ result ] =>
    let* result := M.alloc result in
    let* α0 :=
      match_operator
        result
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Ok _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Ok_0" in
                M.pure (α0 γ) in
              let* n := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "The first doubled is ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ n ] in
                let* α5 := M.alloc [ α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [ pointer_coercion "Unsize" α3; pointer_coercion "Unsize" α5
                    ] in
                let* α7 := M.call α0 [ α6 ] in
                M.alloc α7 in
              M.alloc tt
            | _ => M.break_match 
            end);
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Err _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::result::Result::Get_Err_0" in
                M.pure (α0 γ) in
              let* e := M.copy γ0_0 in
              let* _ :=
                let* _ :=
                  let* α0 := M.var "std::io::stdio::_print" in
                  let* α1 := M.read (mk_str "Error: ") in
                  let* α2 := M.read (mk_str "
") in
                  let* α3 := M.alloc [ α1; α2 ] in
                  let* α4 :=
                    M.call
                      (Ty.path "core::fmt::rt::Argument")::["new_display"]
                      [ e ] in
                  let* α5 := M.alloc [ α4 ] in
                  let* α6 :=
                    M.call
                      (Ty.path "core::fmt::Arguments")::["new_v1"]
                      [
                        pointer_coercion "Unsize" α3;
                        pointer_coercion "Unsize" α5
                      ] in
                  let* α7 := M.call α0 [ α6 ] in
                  M.alloc α7 in
                M.alloc tt in
              let* α0 :=
                M.get_method
                  "core::error::Error"
                  "source"
                  [ (* Self *) Ty.path "wrapping_errors::DoubleError" ] in
              let* α1 := M.call α0 [ e ] in
              let* α2 := M.alloc α1 in
              match_operator
                α2
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let* γ0_0 :=
                        let* α0 := M.var "core::option::Option::Get_Some_0" in
                        M.pure (α0 γ) in
                      let* source := M.copy γ0_0 in
                      let* _ :=
                        let* _ :=
                          let* α0 := M.var "std::io::stdio::_print" in
                          let* α1 := M.read (mk_str "  Caused by: ") in
                          let* α2 := M.read (mk_str "
") in
                          let* α3 := M.alloc [ α1; α2 ] in
                          let* α4 :=
                            M.call
                              (Ty.path
                                  "core::fmt::rt::Argument")::["new_display"]
                              [ source ] in
                          let* α5 := M.alloc [ α4 ] in
                          let* α6 :=
                            M.call
                              (Ty.path "core::fmt::Arguments")::["new_v1"]
                              [
                                pointer_coercion "Unsize" α3;
                                pointer_coercion "Unsize" α5
                              ] in
                          let* α7 := M.call α0 [ α6 ] in
                          M.alloc α7 in
                        M.alloc tt in
                      M.alloc tt
                    | _ => M.break_match 
                    end);
                  fun γ => (M.alloc tt)
                ]
            | _ => M.break_match 
            end)
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* numbers :=
      let* α0 := M.read (mk_str "42") in
      let* α1 := M.read (mk_str "93") in
      let* α2 := M.read (mk_str "18") in
      let* α3 := M.alloc [ α0; α1; α2 ] in
      let* α4 :=
        M.call
          (alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
          [ α3 ] in
      let* α5 := M.read α4 in
      let* α6 :=
        M.call
          (Ty.apply
              (Ty.path "slice")
              [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ])::["into_vec"]
          [ pointer_coercion "Unsize" α5 ] in
      M.alloc α6 in
    let* empty :=
      let* α0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply (Ty.path "ref") [ Ty.path "str" ];
                Ty.path "alloc::alloc::Global"
              ])::["new"]
          [] in
      M.alloc α0 in
    let* strings :=
      let* α0 := M.read (mk_str "tofu") in
      let* α1 := M.read (mk_str "93") in
      let* α2 := M.read (mk_str "18") in
      let* α3 := M.alloc [ α0; α1; α2 ] in
      let* α4 :=
        M.call
          (alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
          [ α3 ] in
      let* α5 := M.read α4 in
      let* α6 :=
        M.call
          (Ty.apply
              (Ty.path "slice")
              [ Ty.apply (Ty.path "ref") [ Ty.path "str" ] ])::["into_vec"]
          [ pointer_coercion "Unsize" α5 ] in
      M.alloc α6 in
    let* _ :=
      let* α0 := M.var "wrapping_errors::print" in
      let* α1 := M.var "wrapping_errors::double_first" in
      let* α2 := M.read numbers in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 := M.call α0 [ α3 ] in
      M.alloc α4 in
    let* _ :=
      let* α0 := M.var "wrapping_errors::print" in
      let* α1 := M.var "wrapping_errors::double_first" in
      let* α2 := M.read empty in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 := M.call α0 [ α3 ] in
      M.alloc α4 in
    let* _ :=
      let* α0 := M.var "wrapping_errors::print" in
      let* α1 := M.var "wrapping_errors::double_first" in
      let* α2 := M.read strings in
      let* α3 := M.call α1 [ α2 ] in
      let* α4 := M.call α0 [ α3 ] in
      M.alloc α4 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
