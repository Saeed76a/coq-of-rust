(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Food *)

Module Impl_core_fmt_Debug_for_combinators_map_Food.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read f in
      let* α1 :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | combinators_map.Food.Apple =>
                let* α0 := M.read (mk_str "Apple") in
                M.alloc α0
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | combinators_map.Food.Carrot =>
                let* α0 := M.read (mk_str "Carrot") in
                M.alloc α0
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | combinators_map.Food.Potato =>
                let* α0 := M.read (mk_str "Potato") in
                M.alloc α0
              | _ => M.break_match 
              end)
          ] in
      let* α2 := M.read α1 in
      M.call (Ty.path "core::fmt::Formatter")::["write_str"] [ α0; α2 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "combinators_map::Food")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_combinators_map_Food.

(* Struct Peeled *)

Module Impl_core_fmt_Debug_for_combinators_map_Peeled.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read f in
      let* α1 := M.read (mk_str "Peeled") in
      let* α2 := M.read self in
      let* α3 := M.alloc (M.get_struct_tuple α2 0) in
      M.call
        (Ty.path "core::fmt::Formatter")::["debug_tuple_field1_finish"]
        [ α0; α1; M.pointer_coercion "Unsize" α3 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "combinators_map::Peeled")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_combinators_map_Peeled.

(* Struct Chopped *)

Module Impl_core_fmt_Debug_for_combinators_map_Chopped.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read f in
      let* α1 := M.read (mk_str "Chopped") in
      let* α2 := M.read self in
      let* α3 := M.alloc (M.get_struct_tuple α2 0) in
      M.call
        (Ty.path "core::fmt::Formatter")::["debug_tuple_field1_finish"]
        [ α0; α1; M.pointer_coercion "Unsize" α3 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "combinators_map::Chopped")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_combinators_map_Chopped.

(* Struct Cooked *)

Module Impl_core_fmt_Debug_for_combinators_map_Cooked.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read f in
      let* α1 := M.read (mk_str "Cooked") in
      let* α2 := M.read self in
      let* α3 := M.alloc (M.get_struct_tuple α2 0) in
      M.call
        (Ty.path "core::fmt::Formatter")::["debug_tuple_field1_finish"]
        [ α0; α1; M.pointer_coercion "Unsize" α3 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "combinators_map::Cooked")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_combinators_map_Cooked.

(*
fn peel(food: Option<Food>) -> Option<Peeled> {
    match food {
        Some(food) => Some(Peeled(food)),
        None => None,
    }
}
*)
Definition peel (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ food ] =>
    let* food := M.alloc food in
    let* α0 :=
      match_operator
        food
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::option::Option::Get_Some_0" in
                M.pure (α0 γ) in
              let* food := M.copy γ0_0 in
              let* α0 := M.read food in
              M.alloc
                (Value.StructTuple
                  "core::option::Option::Some"
                  [ Value.StructTuple "combinators_map::Peeled" [ α0 ] ])
            | _ => M.break_match 
            end);
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.None => M.alloc core.option.Option.None
            | _ => M.break_match 
            end)
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn chop(peeled: Option<Peeled>) -> Option<Chopped> {
    match peeled {
        Some(Peeled(food)) => Some(Chopped(food)),
        None => None,
    }
}
*)
Definition chop (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ peeled ] =>
    let* peeled := M.alloc peeled in
    let* α0 :=
      match_operator
        peeled
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::option::Option::Get_Some_0" in
                M.pure (α0 γ) in
              let* α0 := M.read γ0_0 in
              match α0 with
              | combinators_map.Peeled.Build_t _ =>
                let* γ1_0 :=
                  let* α0 := M.var "combinators_map::Peeled::Get_0" in
                  M.pure (α0 γ0_0) in
                let* food := M.copy γ1_0 in
                let* α0 := M.read food in
                M.alloc
                  (Value.StructTuple
                    "core::option::Option::Some"
                    [ Value.StructTuple "combinators_map::Chopped" [ α0 ] ])
              end
            | _ => M.break_match 
            end);
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.None => M.alloc core.option.Option.None
            | _ => M.break_match 
            end)
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn cook(chopped: Option<Chopped>) -> Option<Cooked> {
    chopped.map(|Chopped(food)| Cooked(food))
}
*)
Definition cook (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ chopped ] =>
    let* chopped := M.alloc chopped in
    let* α0 := M.read chopped in
    M.call
      (Ty.apply
          (Ty.path "core::option::Option")
          [ Ty.path "combinators_map::Chopped" ])::["map"]
      [
        α0;
        fun (α0 : Ty.path "combinators_map::Chopped") =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | combinators_map.Chopped.Build_t _ =>
                  let* γ0_0 :=
                    let* α0 := M.var "combinators_map::Chopped::Get_0" in
                    M.pure (α0 γ) in
                  let* food := M.copy γ0_0 in
                  let* α0 := M.read food in
                  M.pure (Value.StructTuple "combinators_map::Cooked" [ α0 ])
                end)
            ])
      ]
  | _, _ => M.impossible
  end.

(*
fn process(food: Option<Food>) -> Option<Cooked> {
    food.map(|f| Peeled(f))
        .map(|Peeled(f)| Chopped(f))
        .map(|Chopped(f)| Cooked(f))
}
*)
Definition process (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ food ] =>
    let* food := M.alloc food in
    let* α0 := M.read food in
    let* α1 :=
      M.call
        (Ty.apply
            (Ty.path "core::option::Option")
            [ Ty.path "combinators_map::Food" ])::["map"]
        [
          α0;
          fun (α0 : Ty.path "combinators_map::Food") =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* f := M.copy γ in
                  let* α0 := M.read f in
                  M.pure (Value.StructTuple "combinators_map::Peeled" [ α0 ]))
              ])
        ] in
    let* α2 :=
      M.call
        (Ty.apply
            (Ty.path "core::option::Option")
            [ Ty.path "combinators_map::Peeled" ])::["map"]
        [
          α1;
          fun (α0 : Ty.path "combinators_map::Peeled") =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | combinators_map.Peeled.Build_t _ =>
                    let* γ0_0 :=
                      let* α0 := M.var "combinators_map::Peeled::Get_0" in
                      M.pure (α0 γ) in
                    let* f := M.copy γ0_0 in
                    let* α0 := M.read f in
                    M.pure (Value.StructTuple "combinators_map::Chopped" [ α0 ])
                  end)
              ])
        ] in
    M.call
      (Ty.apply
          (Ty.path "core::option::Option")
          [ Ty.path "combinators_map::Chopped" ])::["map"]
      [
        α2;
        fun (α0 : Ty.path "combinators_map::Chopped") =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | combinators_map.Chopped.Build_t _ =>
                  let* γ0_0 :=
                    let* α0 := M.var "combinators_map::Chopped::Get_0" in
                    M.pure (α0 γ) in
                  let* f := M.copy γ0_0 in
                  let* α0 := M.read f in
                  M.pure (Value.StructTuple "combinators_map::Cooked" [ α0 ])
                end)
            ])
      ]
  | _, _ => M.impossible
  end.

(*
fn eat(food: Option<Cooked>) {
    match food {
        Some(food) => println!("Mmm. I love {:?}", food),
        None => println!("Oh no! It wasn't edible."),
    }
}
*)
Definition eat (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [ food ] =>
    let* food := M.alloc food in
    let* α0 :=
      match_operator
        food
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.Some _ =>
              let* γ0_0 :=
                let* α0 := M.var "core::option::Option::Get_Some_0" in
                M.pure (α0 γ) in
              let* food := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "Mmm. I love ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                    [ food ] in
                let* α5 := M.alloc [ α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      M.pointer_coercion "Unsize" α3;
                      M.pointer_coercion "Unsize" α5
                    ] in
                let* α7 := M.call α0 [ α6 ] in
                M.alloc α7 in
              M.alloc tt
            | _ => M.break_match 
            end);
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.option.Option.None =>
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "Oh no! It wasn't edible.
") in
                let* α2 := M.alloc [ α1 ] in
                let* α3 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_const"]
                    [ M.pointer_coercion "Unsize" α2 ] in
                let* α4 := M.call α0 [ α3 ] in
                M.alloc α4 in
              M.alloc tt
            | _ => M.break_match 
            end)
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let apple = Some(Food::Apple);
    let carrot = Some(Food::Carrot);
    let potato = None;

    let cooked_apple = cook(chop(peel(apple)));
    let cooked_carrot = cook(chop(peel(carrot)));
    // Let's try the simpler looking `process()` now.
    let cooked_potato = process(potato);

    eat(cooked_apple);
    eat(cooked_carrot);
    eat(cooked_potato);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* apple :=
      M.alloc
        (Value.StructTuple
          "core::option::Option::Some"
          [ combinators_map.Food.Apple ]) in
    let* carrot :=
      M.alloc
        (Value.StructTuple
          "core::option::Option::Some"
          [ combinators_map.Food.Carrot ]) in
    let* potato := M.alloc core.option.Option.None in
    let* cooked_apple :=
      let* α0 := M.var "combinators_map::cook" in
      let* α1 := M.var "combinators_map::chop" in
      let* α2 := M.var "combinators_map::peel" in
      let* α3 := M.read apple in
      let* α4 := M.call α2 [ α3 ] in
      let* α5 := M.call α1 [ α4 ] in
      let* α6 := M.call α0 [ α5 ] in
      M.alloc α6 in
    let* cooked_carrot :=
      let* α0 := M.var "combinators_map::cook" in
      let* α1 := M.var "combinators_map::chop" in
      let* α2 := M.var "combinators_map::peel" in
      let* α3 := M.read carrot in
      let* α4 := M.call α2 [ α3 ] in
      let* α5 := M.call α1 [ α4 ] in
      let* α6 := M.call α0 [ α5 ] in
      M.alloc α6 in
    let* cooked_potato :=
      let* α0 := M.var "combinators_map::process" in
      let* α1 := M.read potato in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.var "combinators_map::eat" in
      let* α1 := M.read cooked_apple in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.var "combinators_map::eat" in
      let* α1 := M.read cooked_carrot in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.var "combinators_map::eat" in
      let* α1 := M.read cooked_potato in
      let* α2 := M.call α0 [ α1 ] in
      M.alloc α2 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
