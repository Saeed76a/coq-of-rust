(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Axiom Result :
    fun T =>
      Ty.apply
        (Ty.path "core::result::Result")
        [T;
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [dyn [core.error.Error.Trait];
              Ty.apply (Ty.path "alloc::alloc::Global") []]].



Module  Impl_core_fmt_Debug_for_boxing_errors_EmptyVec.
Section Impl_core_fmt_Debug_for_boxing_errors_EmptyVec.
  Definition Self : Ty.t := Ty.apply (Ty.path "boxing_errors::EmptyVec") [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 := M.read (mk_str "EmptyVec") in
      M.call
        ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_str"] Œ±0 Œ±1)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_boxing_errors_EmptyVec.
End Impl_core_fmt_Debug_for_boxing_errors_EmptyVec.

Module  Impl_core_clone_Clone_for_boxing_errors_EmptyVec.
Section Impl_core_clone_Clone_for_boxing_errors_EmptyVec.
  Definition Self : Ty.t := Ty.apply (Ty.path "boxing_errors::EmptyVec") [].
  
  (*
  Clone
  *)
  Definition clone (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure boxing_errors.EmptyVec.Build
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_clone : Instance.t := {
    Notations.double_colon := clone;
  }.
  
  Definition ‚Ñê : Instance.t := [("clone", clone); ("clone_from", clone_from)].
End Impl_core_clone_Clone_for_boxing_errors_EmptyVec.
End Impl_core_clone_Clone_for_boxing_errors_EmptyVec.

Module  Impl_core_fmt_Display_for_boxing_errors_EmptyVec.
Section Impl_core_fmt_Display_for_boxing_errors_EmptyVec.
  Definition Self : Ty.t := Ty.apply (Ty.path "boxing_errors::EmptyVec") [].
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "invalid first item to double")
      }
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 := M.read (mk_str "invalid first item to double") in
      let* Œ±2 := M.alloc [ Œ±1 ] in
      let* Œ±3 :=
        M.call
          ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_const"]
            (pointer_coercion "Unsize" (borrow Œ±2))) in
      M.call
        ((Ty.apply (Ty.path "core::fmt::Formatter") [])::["write_fmt"] Œ±0 Œ±3)
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Display_for_boxing_errors_EmptyVec.
End Impl_core_fmt_Display_for_boxing_errors_EmptyVec.

Module  Impl_core_error_Error_for_boxing_errors_EmptyVec.
Section Impl_core_error_Error_for_boxing_errors_EmptyVec.
  Definition Self : Ty.t := Ty.apply (Ty.path "boxing_errors::EmptyVec") [].
  
  Definition ‚Ñê : Instance.t := [("source", source);
    ("type_id", type_id);
    ("description", description);
    ("cause", cause);
    ("provide", provide)].
End Impl_core_error_Error_for_boxing_errors_EmptyVec.
End Impl_core_error_Error_for_boxing_errors_EmptyVec.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    vec.first()
        .ok_or_else(|| EmptyVec.into()) // Converts to Box
        .and_then(|s| {
            s.parse::<i32>()
                .map_err(|e| e.into()) // Converts to Box
                .map(|i| 2 * i)
        })
}
*)
Definition double_first (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [vec] =>
    let* vec := M.alloc vec in
    let* Œ±0 :=
      ltac:(M.get_method (fun ‚Ñê =>
        core.ops.deref.Deref.deref
          (Self :=
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []])
          (Trait := ‚Ñê))) in
    let* Œ±1 := M.call (Œ±0 (borrow vec)) in
    let* Œ±2 :=
      M.call
        ((Ty.apply
              (Ty.path "slice")
              [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["first"]
          Œ±1) in
    let* Œ±3 :=
      M.call
        ((Ty.apply
              (Ty.path "core::option::Option")
              [Ty.apply
                  (Ty.path "ref")
                  [Ty.apply (Ty.path "ref") [Ty.path "str"]]])::["ok_or_else"]
          Œ±2
          (fun (Œ±0 : Ty.path "unit") =>
            (let* Œ±0 := M.alloc Œ±0 in
            match_operator
              Œ±0
              [
                fun Œ≥ =>
                  (let* Œ±0 :=
                    ltac:(M.get_method (fun ‚Ñê =>
                      core.convert.Into.into
                        (Self :=
                          Ty.apply (Ty.path "boxing_errors::EmptyVec") [])
                        (T :=
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [dyn [core.error.Error.Trait];
                              Ty.apply (Ty.path "alloc::alloc::Global") []])
                        (Trait := ‚Ñê))) in
                  M.call (Œ±0 boxing_errors.EmptyVec.Build)) :
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [dyn [core.error.Error.Trait];
                      Ty.apply (Ty.path "alloc::alloc::Global") []]
              ]) :
            Ty.apply
              (Ty.path "alloc::boxed::Box")
              [dyn [core.error.Error.Trait];
                Ty.apply (Ty.path "alloc::alloc::Global") []])) in
    M.call
      ((Ty.apply
            (Ty.path "core::result::Result")
            [Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]];
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [dyn [core.error.Error.Trait];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]])::["and_then"]
        Œ±3
        (fun
            (Œ±0 :
              Ty.apply
                (Ty.path "ref")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]]) =>
          (let* Œ±0 := M.alloc Œ±0 in
          match_operator
            Œ±0
            [
              fun Œ≥ =>
                (let* s := M.copy Œ≥ in
                let* Œ±0 := M.read s in
                let* Œ±1 := M.read (deref Œ±0) in
                let* Œ±2 := M.call ((Ty.path "str")::["parse"] Œ±1) in
                let* Œ±3 :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::result::Result")
                          [Ty.path "i32";
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []])::["map_err"]
                      Œ±2
                      (fun
                          (Œ±0 :
                            Ty.apply
                              (Ty.path "core::num::error::ParseIntError")
                              []) =>
                        (let* Œ±0 := M.alloc Œ±0 in
                        match_operator
                          Œ±0
                          [
                            fun Œ≥ =>
                              (let* e := M.copy Œ≥ in
                              let* Œ±0 :=
                                ltac:(M.get_method (fun ‚Ñê =>
                                  core.convert.Into.into
                                    (Self :=
                                      Ty.apply
                                        (Ty.path
                                          "core::num::error::ParseIntError")
                                        [])
                                    (T :=
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [dyn [core.error.Error.Trait];
                                          Ty.apply
                                            (Ty.path "alloc::alloc::Global")
                                            []])
                                    (Trait := ‚Ñê))) in
                              let* Œ±1 := M.read e in
                              M.call (Œ±0 Œ±1)) :
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                [dyn [core.error.Error.Trait];
                                  Ty.apply (Ty.path "alloc::alloc::Global") []]
                          ]) :
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          [dyn [core.error.Error.Trait];
                            Ty.apply (Ty.path "alloc::alloc::Global") []])) in
                M.call
                  ((Ty.apply
                        (Ty.path "core::result::Result")
                        [Ty.path "i32";
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [dyn [core.error.Error.Trait];
                              Ty.apply
                                (Ty.path "alloc::alloc::Global")
                                []]])::["map"]
                    Œ±3
                    (fun (Œ±0 : Ty.path "i32") =>
                      (let* Œ±0 := M.alloc Œ±0 in
                      match_operator
                        Œ±0
                        [
                          fun Œ≥ =>
                            (let* i := M.copy Œ≥ in
                            let* Œ±0 := M.read i in
                            (M.var "BinOp::Panic::mul")
                              ((Integer.of_Z 2) : Ty.path "i32")
                              Œ±0) :
                            Ty.path "i32"
                        ]) :
                      Ty.path "i32"))) :
                Ty.apply
                  (Ty.path "core::result::Result")
                  [Ty.path "i32";
                    Ty.apply
                      (Ty.path "alloc::boxed::Box")
                      [dyn [core.error.Error.Trait];
                        Ty.apply (Ty.path "alloc::alloc::Global") []]]
            ]) :
          Ty.apply
            (Ty.path "core::result::Result")
            [Ty.path "i32";
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [dyn [core.error.Error.Trait];
                  Ty.apply (Ty.path "alloc::alloc::Global") []]]))
  | _, _ => M.impossible
  end.

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [result] =>
    let* result := M.alloc result in
    let* Œ±0 :=
      match_operator
        result
        [
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Ok _ =>
              let Œ≥0_0 := (M.var "core::result::Result::Get_Ok_0") Œ≥ in
              let* n := M.copy Œ≥0_0 in
              let* _ :=
                let* Œ±0 := M.read (mk_str "The first doubled is ") in
                let* Œ±1 := M.read (mk_str "
") in
                let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow n)) in
                let* Œ±4 := M.alloc [ Œ±3 ] in
                let* Œ±5 :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±4))) in
                let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
                M.alloc Œ±6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple;
          fun Œ≥ =>
            (let* Œ±0 := M.read Œ≥ in
            match Œ±0 with
            | core.result.Result.Err _ =>
              let Œ≥0_0 := (M.var "core::result::Result::Get_Err_0") Œ≥ in
              let* e := M.copy Œ≥0_0 in
              let* _ :=
                let* Œ±0 := M.read (mk_str "Error: ") in
                let* Œ±1 := M.read (mk_str "
") in
                let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
                let* Œ±3 :=
                  M.call
                    ((Ty.apply
                          (Ty.path "core::fmt::rt::Argument")
                          [])::["new_display"]
                      (borrow e)) in
                let* Œ±4 := M.alloc [ Œ±3 ] in
                let* Œ±5 :=
                  M.call
                    ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                      (pointer_coercion "Unsize" (borrow Œ±2))
                      (pointer_coercion "Unsize" (borrow Œ±4))) in
                let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
                M.alloc Œ±6 in
              M.alloc tt
            | _ => M.break_match
            end) :
            Ty.tuple
        ] in
    M.read Œ±0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* numbers :=
      let* Œ±0 := M.read (mk_str "42") in
      let* Œ±1 := M.read (mk_str "93") in
      let* Œ±2 := M.read (mk_str "18") in
      let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
      let* Œ±4 :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±3) in
      let* Œ±5 := M.read Œ±4 in
      let* Œ±6 :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" Œ±5)) in
      M.alloc Œ±6 in
    let* empty :=
      let* Œ±0 :=
        M.call
          (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [Ty.apply (Ty.path "ref") [Ty.path "str"];
                Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"] in
      M.alloc Œ±0 in
    let* strings :=
      let* Œ±0 := M.read (mk_str "tofu") in
      let* Œ±1 := M.read (mk_str "93") in
      let* Œ±2 := M.read (mk_str "18") in
      let* Œ±3 := M.alloc [ Œ±0; Œ±1; Œ±2 ] in
      let* Œ±4 :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±3) in
      let* Œ±5 := M.read Œ±4 in
      let* Œ±6 :=
        M.call
          ((Ty.apply
                (Ty.path "slice")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]])::["into_vec"]
            (pointer_coercion "Unsize" Œ±5)) in
      M.alloc Œ±6 in
    let* _ :=
      let* Œ±0 := M.read numbers in
      let* Œ±1 := M.call ((M.var "boxing_errors::double_first") Œ±0) in
      let* Œ±2 := M.call ((M.var "boxing_errors::print") Œ±1) in
      M.alloc Œ±2 in
    let* _ :=
      let* Œ±0 := M.read empty in
      let* Œ±1 := M.call ((M.var "boxing_errors::double_first") Œ±0) in
      let* Œ±2 := M.call ((M.var "boxing_errors::print") Œ±1) in
      M.alloc Œ±2 in
    let* _ :=
      let* Œ±0 := M.read strings in
      let* Œ±1 := M.call ((M.var "boxing_errors::double_first") Œ±0) in
      let* Œ±2 := M.call ((M.var "boxing_errors::print") Œ±1) in
      M.alloc Œ±2 in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
