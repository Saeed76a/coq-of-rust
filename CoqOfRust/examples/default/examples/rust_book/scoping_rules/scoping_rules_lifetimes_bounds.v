(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Ref *)

Module Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "scoping_rules_lifetimes_bounds::Ref") [ T ].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [ T ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 := M.read (mk_str "Ref") in
      let* Œ±2 := M.read self in
      let* Œ±3 :=
        M.alloc
          (borrow
            ((M.var "scoping_rules_lifetimes_bounds::Ref::Get_0")
              (deref Œ±2))) in
      M.call
        (Ty.path "core::fmt::Formatter")::["debug_tuple_field1_finish"]
        [ Œ±0; Œ±1; pointer_coercion "Unsize" (borrow Œ±3) ]
    | _, _ => M.impossible
    end.
  
  Definition ‚Ñê (T : Ty.t) : Instance.t :=
    [ ("fmt", InstanceField.Method (fmt T)) ].
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.

(*
fn print<T>(t: T)
where
    T: Debug,
{
    println!("`print`: t is {:?}", t);
}
*)
Definition print (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [ T ], [ t ] =>
    let* t := M.alloc t in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "`print`: t is ") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow t ] in
        let* Œ±4 := M.alloc [ Œ±3 ] in
        let* Œ±5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow Œ±2);
              pointer_coercion "Unsize" (borrow Œ±4)
            ] in
        let* Œ±6 := M.call (M.var "std::io::stdio::_print") [ Œ±5 ] in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.

(*
fn print_ref<'a, T>(t: &'a T)
where
    T: Debug + 'a,
{
    println!("`print_ref`: t is {:?}", t);
}
*)
Definition print_ref (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [ T ], [ t ] =>
    let* t := M.alloc t in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "`print_ref`: t is ") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_debug"]
            [ borrow t ] in
        let* Œ±4 := M.alloc [ Œ±3 ] in
        let* Œ±5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow Œ±2);
              pointer_coercion "Unsize" (borrow Œ±4)
            ] in
        let* Œ±6 := M.call (M.var "std::io::stdio::_print") [ Œ±5 ] in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let x = 7;
    let ref_x = Ref(&x);

    print_ref(&ref_x);
    print(ref_x);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* x := M.alloc ((Integer.of_Z 7) : Ty.path "i32") in
    let* ref_x :=
      M.alloc (scoping_rules_lifetimes_bounds.Ref.Build_t (borrow x)) in
    let* _ :=
      let* Œ±0 :=
        M.call
          (M.var "scoping_rules_lifetimes_bounds::print_ref")
          [ borrow ref_x ] in
      M.alloc Œ±0 in
    let* _ :=
      let* Œ±0 := M.read ref_x in
      let* Œ±1 :=
        M.call (M.var "scoping_rules_lifetimes_bounds::print") [ Œ±0 ] in
      M.alloc Œ±1 in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
