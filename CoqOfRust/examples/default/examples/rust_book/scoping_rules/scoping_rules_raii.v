(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn create_box() {
    // Allocate an integer on the heap
    let _box1 = Box::new(3i32);

    // `_box1` is destroyed here, and memory gets freed
}
*)
Definition create_box (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _box1 :
        Ty.apply
          (Ty.path "alloc::boxed::Box")
          [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "alloc::boxed::Box")
                [Ty.path "i32";
                  Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"]
            ((Integer.of_Z 3) : Ty.path "i32")) in
      M.alloc α0 in
    let* α0 : Ty.path "unit" := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    // Allocate an integer on the heap
    let _box2 = Box::new(5i32);

    // A nested scope:
    {
        // Allocate an integer on the heap
        let _box3 = Box::new(4i32);

        // `_box3` is destroyed here, and memory gets freed
    }

    // Creating lots of boxes just for fun
    // There's no need to manually free memory!
    for _ in 0u32..1_000 {
        create_box();
    }

    // `_box2` is destroyed here, and memory gets freed
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _box2 :
        Ty.apply
          (Ty.path "alloc::boxed::Box")
          [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
      let* α0 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        M.call
          ((Ty.apply
                (Ty.path "alloc::boxed::Box")
                [Ty.path "i32";
                  Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"]
            ((Integer.of_Z 5) : Ty.path "i32")) in
      M.alloc α0 in
    let* _ : Ty.tuple :=
      let* _box3 :
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
        let* α0 :
            Ty.apply
              (Ty.path "alloc::boxed::Box")
              [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []] :=
          M.call
            ((Ty.apply
                  (Ty.path "alloc::boxed::Box")
                  [Ty.path "i32";
                    Ty.apply (Ty.path "alloc::alloc::Global") []])::["new"]
              ((Integer.of_Z 4) : Ty.path "i32")) in
        M.alloc α0 in
      M.alloc tt in
    let* α0 :
        Ty.function
          [Ty.apply (Ty.path "core::ops::range::Range") [Ty.path "u32"]]
          _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.collect.IntoIterator.into_iter
          (Self := Ty.apply (Ty.path "core::ops::range::Range") [Ty.path "u32"])
          (Trait := ℐ))) in
    let* α1 : Ty.apply (Ty.path "core::ops::range::Range") [Ty.path "u32"] :=
      M.call
        (α0
          {|
            core.ops.range.Range.start := (Integer.of_Z 0) : Ty.path "u32";
            core.ops.range.Range.end_ := (Integer.of_Z 1000) : Ty.path "u32";
          |}) in
    let* α2 : Ty.apply (Ty.path "core::ops::range::Range") [Ty.path "u32"] :=
      M.alloc α1 in
    let* α3 : Ty.tuple :=
      match_operator
        α2
        [
          fun γ =>
            (let* iter := M.copy γ in
            M.loop
              (let* _ : Ty.tuple :=
                let* α0 :
                    Ty.function
                      [Ty.apply
                          (Ty.path "mut_ref")
                          [Ty.apply
                              (Ty.path "core::ops::range::Range")
                              [Ty.path "u32"]]]
                      (Ty.apply (Ty.path "core::option::Option") [_]) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.iterator.Iterator.next
                      (Self :=
                        Ty.apply
                          (Ty.path "core::ops::range::Range")
                          [Ty.path "u32"])
                      (Trait := ℐ))) in
                let* α1 :
                    Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
                  M.call (α0 (borrow_mut iter)) in
                let* α2 :
                    Ty.apply (Ty.path "core::option::Option") [Ty.path "u32"] :=
                  M.alloc α1 in
                match_operator
                  α2
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.None =>
                        let* α0 : Ty.path "never" := M.break in
                        let* α1 : Ty.path "never" := M.read α0 in
                        let* α2 : Ty.tuple := never_to_any α1 in
                        M.alloc α2
                      | _ => M.break_match
                      end) :
                      Ty.tuple;
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* _ : Ty.tuple :=
                          let* α0 : Ty.tuple :=
                            M.call scoping_rules_raii.create_box in
                          M.alloc α0 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      Ty.tuple
                  ] in
              M.alloc tt)) :
            Ty.tuple
        ] in
    M.read (use α3)
  | _, _ => M.impossible
  end.
