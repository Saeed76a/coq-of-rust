(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Point *)

Module Impl_core_clone_Clone_for_scoping_rules_borrowing_the_ref_pattern_Point.
  (*
  Clone
  *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          Value.DeclaredButUndefined
          [
            fun γ =>
              (M.read self) :
              Ty.path "scoping_rules_borrowing_the_ref_pattern::Point"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Self *) (Ty.path "scoping_rules_borrowing_the_ref_pattern::Point")
      []
      [ ("clone", InstanceField.Method clone) ]
      [].
End Impl_core_clone_Clone_for_scoping_rules_borrowing_the_ref_pattern_Point.

Module Impl_core_marker_Copy_for_scoping_rules_borrowing_the_ref_pattern_Point.
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Self *) (Ty.path "scoping_rules_borrowing_the_ref_pattern::Point")
      []
      []
      [].
End Impl_core_marker_Copy_for_scoping_rules_borrowing_the_ref_pattern_Point.

(*
fn main() {
    let c = 'Q';

    // A `ref` borrow on the left side of an assignment is equivalent to
    // an `&` borrow on the right side.
    let ref ref_c1 = c;
    let ref_c2 = &c;

    println!("ref_c1 equals ref_c2: {}", *ref_c1 == *ref_c2);

    let point = Point { x: 0, y: 0 };

    // `ref` is also valid when destructuring a struct.
    let _copy_of_x = {
        // `ref_to_x` is a reference to the `x` field of `point`.
        let Point {
            x: ref ref_to_x,
            y: _,
        } = point;

        // Return a copy of the `x` field of `point`.
        *ref_to_x
    };

    // A mutable copy of `point`
    let mut mutable_point = point;

    {
        // `ref` can be paired with `mut` to take mutable references.
        let Point {
            x: _,
            y: ref mut mut_ref_to_y,
        } = mutable_point;

        // Mutate the `y` field of `mutable_point` via a mutable reference.
        *mut_ref_to_y = 1;
    }

    println!("point is ({}, {})", point.x, point.y);
    println!(
        "mutable_point is ({}, {})",
        mutable_point.x, mutable_point.y
    );

    // A mutable tuple that includes a pointer
    let mut mutable_tuple = (Box::new(5u32), 3u32);

    {
        // Destructure `mutable_tuple` to change the value of `last`.
        let (_, ref mut last) = mutable_tuple;
        *last = 2u32;
    }

    println!("tuple is {:?}", mutable_tuple);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* c := M.alloc "Q"%char in
    let* α0 :=
      match_operator
        c
        [
          fun γ =>
            (let* ref_c1 := M.alloc (borrow γ) in
            let* ref_c2 := M.alloc c in
            let* _ :=
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "ref_c1 equals ref_c2: ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 := M.var "BinOp::Pure::eq" in
                let* α5 := M.read ref_c1 in
                let* α6 := M.read α5 in
                let* α7 := M.read ref_c2 in
                let* α8 := M.read α7 in
                let* α9 := M.alloc (α4 α6 α8) in
                let* α10 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ α9 ] in
                let* α11 := M.alloc [ α10 ] in
                let* α12 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [
                      pointer_coercion "Unsize" α3;
                      pointer_coercion "Unsize" α11
                    ] in
                let* α13 := M.call α0 [ α12 ] in
                M.alloc α13 in
              M.alloc tt in
            let* point :=
              M.alloc
                (Value.StructRecord
                  "scoping_rules_borrowing_the_ref_pattern::Point"
                  [
                    ("x", (Integer.of_Z 0) : Ty.path "i32");
                    ("y", (Integer.of_Z 0) : Ty.path "i32")
                  ]) in
            let* _copy_of_x :=
              let* α0 :=
                match_operator
                  point
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      |
                          {|
                            scoping_rules_borrowing_the_ref_pattern.Point.x
                              :=
                              _;
                            scoping_rules_borrowing_the_ref_pattern.Point.y
                              :=
                              _;
                          |}
                          =>
                        let* γ0_0 :=
                          let* α0 :=
                            M.var
                              "scoping_rules_borrowing_the_ref_pattern::Point::Get_x" in
                          M.pure (α0 γ) in
                        let* γ0_1 :=
                          let* α0 :=
                            M.var
                              "scoping_rules_borrowing_the_ref_pattern::Point::Get_y" in
                          M.pure (α0 γ) in
                        let* ref_to_x := M.alloc (borrow γ0_0) in
                        M.read ref_to_x
                      end) :
                      Ty.path "i32"
                  ] in
              M.copy α0 in
            let* mutable_point := M.copy point in
            let* _ :=
              match_operator
                mutable_point
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    |
                        {|
                          scoping_rules_borrowing_the_ref_pattern.Point.x := _;
                          scoping_rules_borrowing_the_ref_pattern.Point.y := _;
                        |}
                        =>
                      let* γ0_0 :=
                        let* α0 :=
                          M.var
                            "scoping_rules_borrowing_the_ref_pattern::Point::Get_x" in
                        M.pure (α0 γ) in
                      let* γ0_1 :=
                        let* α0 :=
                          M.var
                            "scoping_rules_borrowing_the_ref_pattern::Point::Get_y" in
                        M.pure (α0 γ) in
                      let* mut_ref_to_y := M.alloc (borrow_mut γ0_1) in
                      let* _ :=
                        let* α0 := M.read mut_ref_to_y in
                        assign α0 ((Integer.of_Z 1) : Ty.path "i32") in
                      M.alloc tt
                    end) :
                    Ty.path "unit"
                ] in
            let* _ :=
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "point is (") in
                let* α2 := M.read (mk_str ", ") in
                let* α3 := M.read (mk_str ")
") in
                let* α4 := M.alloc [ α1; α2; α3 ] in
                let* α5 :=
                  M.var
                    "scoping_rules_borrowing_the_ref_pattern::Point::Get_x" in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ α5 point ] in
                let* α7 :=
                  M.var
                    "scoping_rules_borrowing_the_ref_pattern::Point::Get_y" in
                let* α8 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ α7 point ] in
                let* α9 := M.alloc [ α6; α8 ] in
                let* α10 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [ pointer_coercion "Unsize" α4; pointer_coercion "Unsize" α9
                    ] in
                let* α11 := M.call α0 [ α10 ] in
                M.alloc α11 in
              M.alloc tt in
            let* _ :=
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "mutable_point is (") in
                let* α2 := M.read (mk_str ", ") in
                let* α3 := M.read (mk_str ")
") in
                let* α4 := M.alloc [ α1; α2; α3 ] in
                let* α5 :=
                  M.var
                    "scoping_rules_borrowing_the_ref_pattern::Point::Get_x" in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ α5 mutable_point ] in
                let* α7 :=
                  M.var
                    "scoping_rules_borrowing_the_ref_pattern::Point::Get_y" in
                let* α8 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_display"]
                    [ α7 mutable_point ] in
                let* α9 := M.alloc [ α6; α8 ] in
                let* α10 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [ pointer_coercion "Unsize" α4; pointer_coercion "Unsize" α9
                    ] in
                let* α11 := M.call α0 [ α10 ] in
                M.alloc α11 in
              M.alloc tt in
            let* mutable_tuple :=
              let* α0 :=
                M.call
                  (Ty.apply
                      (Ty.path "alloc::boxed::Box")
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global"
                      ])::["new"]
                  [ (Integer.of_Z 5) : Ty.path "u32" ] in
              M.alloc (α0, (Integer.of_Z 3) : Ty.path "u32") in
            let* _ :=
              match_operator
                mutable_tuple
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | (_, _) =>
                      let γ0_0 := Tuple.Access.left γ in
                      let γ0_1 := Tuple.Access.right γ in
                      let* last := M.alloc (borrow_mut γ0_1) in
                      let* _ :=
                        let* α0 := M.read last in
                        assign α0 ((Integer.of_Z 2) : Ty.path "u32") in
                      M.alloc tt
                    end) :
                    Ty.path "unit"
                ] in
            let* _ :=
              let* _ :=
                let* α0 := M.var "std::io::stdio::_print" in
                let* α1 := M.read (mk_str "tuple is ") in
                let* α2 := M.read (mk_str "
") in
                let* α3 := M.alloc [ α1; α2 ] in
                let* α4 :=
                  M.call
                    (Ty.path "core::fmt::rt::Argument")::["new_debug"]
                    [ mutable_tuple ] in
                let* α5 := M.alloc [ α4 ] in
                let* α6 :=
                  M.call
                    (Ty.path "core::fmt::Arguments")::["new_v1"]
                    [ pointer_coercion "Unsize" α3; pointer_coercion "Unsize" α5
                    ] in
                let* α7 := M.call α0 [ α6 ] in
                M.alloc α7 in
              M.alloc tt in
            M.alloc tt) :
            Ty.path "unit"
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
