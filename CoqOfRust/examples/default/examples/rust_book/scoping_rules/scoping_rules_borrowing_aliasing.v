(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Point *)

(*
fn main() {
    let mut point = Point { x: 0, y: 0, z: 0 };

    let borrowed_point = &point;
    let another_borrow = &point;

    // Data can be accessed via the references and the original owner
    println!(
        "Point has coordinates: ({}, {}, {})",
        borrowed_point.x, another_borrow.y, point.z
    );

    // Error! Can't borrow `point` as mutable because it's currently
    // borrowed as immutable.
    // let mutable_borrow = &mut point;
    // TODO ^ Try uncommenting this line

    // The borrowed values are used again here
    println!(
        "Point has coordinates: ({}, {}, {})",
        borrowed_point.x, another_borrow.y, point.z
    );

    // The immutable references are no longer used for the rest of the code so
    // it is possible to reborrow with a mutable reference.
    let mutable_borrow = &mut point;

    // Change data via mutable reference
    mutable_borrow.x = 5;
    mutable_borrow.y = 2;
    mutable_borrow.z = 1;

    // Error! Can't borrow `point` as immutable because it's currently
    // borrowed as mutable.
    // let y = &point.y;
    // TODO ^ Try uncommenting this line

    // Error! Can't print because `println!` takes an immutable reference.
    // println!("Point Z coordinate is {}", point.z);
    // TODO ^ Try uncommenting this line

    // Ok! Mutable references can be passed as immutable to `println!`
    println!(
        "Point has coordinates: ({}, {}, {})",
        mutable_borrow.x, mutable_borrow.y, mutable_borrow.z
    );

    // The mutable reference is no longer used for the rest of the code so it
    // is possible to reborrow
    let new_borrowed_point = &point;
    println!(
        "Point now has coordinates: ({}, {}, {})",
        new_borrowed_point.x, new_borrowed_point.y, new_borrowed_point.z
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* point :=
      M.alloc
        (Value.StructRecord
          "scoping_rules_borrowing_aliasing::Point"
          [
            ("x", (Integer.of_Z 0) : Ty.path "i32");
            ("y", (Integer.of_Z 0) : Ty.path "i32");
            ("z", (Integer.of_Z 0) : Ty.path "i32")
          ]) in
    let* borrowed_point := M.alloc (borrow point) in
    let* another_borrow := M.alloc (borrow point) in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Point has coordinates: (") in
        let* α1 := M.read (mk_str ", ") in
        let* α2 := M.read (mk_str ", ") in
        let* α3 := M.read (mk_str ")
") in
        let* α4 := M.alloc [ α0; α1; α2; α3 ] in
        let* α5 := M.read borrowed_point in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_x")
                  (deref α5))
            ] in
        let* α7 := M.read another_borrow in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_y")
                  (deref α7))
            ] in
        let* α9 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_z") point)
            ] in
        let* α10 := M.alloc [ α6; α8; α9 ] in
        let* α11 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α4);
              pointer_coercion "Unsize" (borrow α10)
            ] in
        let* α12 := M.call (M.var "std::io::stdio::_print") [ α11 ] in
        M.alloc α12 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Point has coordinates: (") in
        let* α1 := M.read (mk_str ", ") in
        let* α2 := M.read (mk_str ", ") in
        let* α3 := M.read (mk_str ")
") in
        let* α4 := M.alloc [ α0; α1; α2; α3 ] in
        let* α5 := M.read borrowed_point in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_x")
                  (deref α5))
            ] in
        let* α7 := M.read another_borrow in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_y")
                  (deref α7))
            ] in
        let* α9 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_z") point)
            ] in
        let* α10 := M.alloc [ α6; α8; α9 ] in
        let* α11 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α4);
              pointer_coercion "Unsize" (borrow α10)
            ] in
        let* α12 := M.call (M.var "std::io::stdio::_print") [ α11 ] in
        M.alloc α12 in
      M.alloc tt in
    let* mutable_borrow := M.alloc (borrow_mut point) in
    let* _ :=
      let* α0 := M.read mutable_borrow in
      assign
        ((M.var "scoping_rules_borrowing_aliasing::Point::Get_x") (deref α0))
        ((Integer.of_Z 5) : Ty.path "i32") in
    let* _ :=
      let* α0 := M.read mutable_borrow in
      assign
        ((M.var "scoping_rules_borrowing_aliasing::Point::Get_y") (deref α0))
        ((Integer.of_Z 2) : Ty.path "i32") in
    let* _ :=
      let* α0 := M.read mutable_borrow in
      assign
        ((M.var "scoping_rules_borrowing_aliasing::Point::Get_z") (deref α0))
        ((Integer.of_Z 1) : Ty.path "i32") in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Point has coordinates: (") in
        let* α1 := M.read (mk_str ", ") in
        let* α2 := M.read (mk_str ", ") in
        let* α3 := M.read (mk_str ")
") in
        let* α4 := M.alloc [ α0; α1; α2; α3 ] in
        let* α5 := M.read mutable_borrow in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_x")
                  (deref α5))
            ] in
        let* α7 := M.read mutable_borrow in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_y")
                  (deref α7))
            ] in
        let* α9 := M.read mutable_borrow in
        let* α10 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_z")
                  (deref α9))
            ] in
        let* α11 := M.alloc [ α6; α8; α10 ] in
        let* α12 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α4);
              pointer_coercion "Unsize" (borrow α11)
            ] in
        let* α13 := M.call (M.var "std::io::stdio::_print") [ α12 ] in
        M.alloc α13 in
      M.alloc tt in
    let* new_borrowed_point := M.alloc (borrow point) in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "Point now has coordinates: (") in
        let* α1 := M.read (mk_str ", ") in
        let* α2 := M.read (mk_str ", ") in
        let* α3 := M.read (mk_str ")
") in
        let* α4 := M.alloc [ α0; α1; α2; α3 ] in
        let* α5 := M.read new_borrowed_point in
        let* α6 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_x")
                  (deref α5))
            ] in
        let* α7 := M.read new_borrowed_point in
        let* α8 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_y")
                  (deref α7))
            ] in
        let* α9 := M.read new_borrowed_point in
        let* α10 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [
              borrow
                ((M.var "scoping_rules_borrowing_aliasing::Point::Get_z")
                  (deref α9))
            ] in
        let* α11 := M.alloc [ α6; α8; α10 ] in
        let* α12 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α4);
              pointer_coercion "Unsize" (borrow α11)
            ] in
        let* α13 := M.call (M.var "std::io::stdio::_print") [ α12 ] in
        M.alloc α13 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
