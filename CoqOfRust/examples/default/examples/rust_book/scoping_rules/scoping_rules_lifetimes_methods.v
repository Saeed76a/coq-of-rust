(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Owner *)

Module Impl_scoping_rules_lifetimes_methods_Owner.
  Definition Self : Ty.t := Ty.path "scoping_rules_lifetimes_methods::Owner".
  
  (*
      fn add_one<'a>(&'a mut self) {
          self.0 += 1;
      }
  *)
  Definition add_one (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* β :=
          let* α0 := M.var "scoping_rules_lifetimes_methods::Owner::Get_0" in
          let* α1 := M.read self in
          M.pure (α0 (deref α1)) in
        let* α0 := M.var "assign" in
        let* α1 := M.var "BinOp::Panic::add" in
        let* α2 := M.read β in
        let* α3 := α1 α2 ((Integer.of_Z 1) : Ty.path "i32") in
        α0 β α3 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_add_one :
    M.IsAssociatedFunction Self "add_one" add_one [].
  
  (*
      fn print<'a>(&'a self) {
          println!("`print`: {}", self.0);
      }
  *)
  Definition print (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* _ :=
          let* α0 := M.var "std::io::stdio::_print" in
          let* α1 := M.read (mk_str "`print`: ") in
          let* α2 := M.read (mk_str "
") in
          let* α3 := M.alloc [ α1; α2 ] in
          let* α4 := M.var "scoping_rules_lifetimes_methods::Owner::Get_0" in
          let* α5 := M.read self in
          let* α6 :=
            M.call
              (Ty.path "core::fmt::rt::Argument")::["new_display"]
              [ borrow (α4 (deref α5)) ] in
          let* α7 := M.alloc [ α6 ] in
          let* α8 :=
            M.call
              (Ty.path "core::fmt::Arguments")::["new_v1"]
              [
                pointer_coercion "Unsize" (borrow α3);
                pointer_coercion "Unsize" (borrow α7)
              ] in
          let* α9 := M.call α0 [ α8 ] in
          M.alloc α9 in
        M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_print : M.IsAssociatedFunction Self "print" print [].
End Impl_scoping_rules_lifetimes_methods_Owner.

(*
fn main() {
    let mut owner = Owner(18);

    owner.add_one();
    owner.print();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* owner :=
      M.alloc
        (Value.StructTuple
          "scoping_rules_lifetimes_methods::Owner"
          [ (Integer.of_Z 18) : Ty.path "i32" ]) in
    let* _ :=
      let* α0 :=
        M.call
          (Ty.path "scoping_rules_lifetimes_methods::Owner")::["add_one"]
          [ borrow_mut owner ] in
      M.alloc α0 in
    let* _ :=
      let* α0 :=
        M.call
          (Ty.path "scoping_rules_lifetimes_methods::Owner")::["print"]
          [ borrow owner ] in
      M.alloc α0 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
