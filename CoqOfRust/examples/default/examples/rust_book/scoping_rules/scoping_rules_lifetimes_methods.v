(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_scoping_rules_lifetimes_methods_Owner.
Section Impl_scoping_rules_lifetimes_methods_Owner.
  Definition Self : Set :=
    Ty.apply (Ty.path "scoping_rules_lifetimes_methods::Owner") [].
  
  (*
      fn add_one<'a>(&'a mut self) {
          self.0 += 1;
      }
  *)
  Definition add_one (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure
            ((M.var "scoping_rules_lifetimes_methods::Owner::Get_0")
              (deref α0)) in
        let* α0 := M.read β in
        let* α1 :=
          (M.var "BinOp::Panic::add") α0 ((Integer.of_Z 1) : Ty.path "i32") in
        (M.var "assign") β α1 in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_add_one : Instance.t := {
    Notations.double_colon := add_one;
  }.
  
  (*
      fn print<'a>(&'a self) {
          println!("`print`: {}", self.0);
      }
  *)
  Definition print (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* _ :=
        let* _ :=
          let* α0 := M.read (mk_str "`print`: ") in
          let* α1 := M.read (mk_str "
") in
          let* α2 := M.alloc [ α0; α1 ] in
          let* α3 := M.read self in
          let* α4 :=
            M.call
              ((Ty.apply
                    (Ty.path "core::fmt::rt::Argument")
                    [])::["new_display"]
                (borrow
                  ((M.var "scoping_rules_lifetimes_methods::Owner::Get_0")
                    (deref α3)))) in
          let* α5 := M.alloc [ α4 ] in
          let* α6 :=
            M.call
              ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
                (pointer_coercion "Unsize" (borrow α2))
                (pointer_coercion "Unsize" (borrow α5))) in
          let* α7 := M.call ((M.var "std::io::stdio::_print") α6) in
          M.alloc α7 in
        M.alloc tt in
      let* α0 := M.alloc tt in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_print : Instance.t := {
    Notations.double_colon := print;
  }.
End Impl_scoping_rules_lifetimes_methods_Owner.
End Impl_scoping_rules_lifetimes_methods_Owner.

(*
fn main() {
    let mut owner = Owner(18);

    owner.add_one();
    owner.print();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* owner :=
      M.alloc
        (scoping_rules_lifetimes_methods.Owner.Build_t
          ((Integer.of_Z 18) : Ty.path "i32")) in
    let* _ :=
      let* α0 :=
        M.call
          ((Ty.apply
                (Ty.path "scoping_rules_lifetimes_methods::Owner")
                [])::["add_one"]
            (borrow_mut owner)) in
      M.alloc α0 in
    let* _ :=
      let* α0 :=
        M.call
          ((Ty.apply
                (Ty.path "scoping_rules_lifetimes_methods::Owner")
                [])::["print"]
            (borrow owner)) in
      M.alloc α0 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
