(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Book *)

Module Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self : Ty.t := Ty.path "scoping_rules_borrowing_mutablity::Book".
  
  (*
  Clone
  *)
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition clone (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :=
        match_operator
          (DeclaredButUndefinedVariable
            (A :=
              Ty.apply
                (Ty.path "core::clone::AssertParamIsClone")
                [Ty.apply (Ty.path "ref") [Ty.path "str"]]))
          [
            fun γ =>
              (match_operator
                (DeclaredButUndefinedVariable
                  (A :=
                    Ty.apply
                      (Ty.path "core::clone::AssertParamIsClone")
                      [Ty.apply (Ty.path "ref") [Ty.path "str"]]))
                [
                  fun γ =>
                    (match_operator
                      (DeclaredButUndefinedVariable
                        (A :=
                          Ty.apply
                            (Ty.path "core::clone::AssertParamIsClone")
                            [Ty.path "u32"]))
                      [
                        fun γ =>
                          (let* α0 := M.read self in
                          M.pure (deref α0)) :
                          Ty.path "scoping_rules_borrowing_mutablity::Book"
                      ]) :
                    Ty.path "scoping_rules_borrowing_mutablity::Book"
                ]) :
              Ty.path "scoping_rules_borrowing_mutablity::Book"
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [("clone", InstanceField.Method clone)].
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.

Module Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self : Ty.t := Ty.path "scoping_rules_borrowing_mutablity::Book".
  
  Definition ℐ : Instance.t := [].
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.

(*
fn borrow_book(book: &Book) {
    println!(
        "I immutably borrowed {} - {} edition",
        book.title, book.year
    );
}
*)
Definition borrow_book (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [book] =>
    let* book := M.alloc book in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "I immutably borrowed ") in
        let* α1 := M.read (mk_str " - ") in
        let* α2 := M.read (mk_str " edition
") in
        let* α3 := M.alloc [ α0; α1; α2 ] in
        let* α4 := M.read book in
        let* α5 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow
                ((M.var "scoping_rules_borrowing_mutablity::Book::Get_title")
                  (deref α4)))) in
        let* α6 := M.read book in
        let* α7 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow
                ((M.var "scoping_rules_borrowing_mutablity::Book::Get_year")
                  (deref α6)))) in
        let* α8 := M.alloc [ α5; α7 ] in
        let* α9 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α3))
              (pointer_coercion "Unsize" (borrow α8))) in
        let* α10 := M.call ((M.var "std::io::stdio::_print") α9) in
        M.alloc α10 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn new_edition(book: &mut Book) {
    book.year = 2014;
    println!("I mutably borrowed {} - {} edition", book.title, book.year);
}
*)
Definition new_edition (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [book] =>
    let* book := M.alloc book in
    let* _ :=
      let* α0 := M.read book in
      assign
        ((M.var "scoping_rules_borrowing_mutablity::Book::Get_year") (deref α0))
        ((Integer.of_Z 2014) : Ty.path "u32") in
    let* _ :=
      let* _ :=
        let* α0 := M.read (mk_str "I mutably borrowed ") in
        let* α1 := M.read (mk_str " - ") in
        let* α2 := M.read (mk_str " edition
") in
        let* α3 := M.alloc [ α0; α1; α2 ] in
        let* α4 := M.read book in
        let* α5 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow
                ((M.var "scoping_rules_borrowing_mutablity::Book::Get_title")
                  (deref α4)))) in
        let* α6 := M.read book in
        let* α7 :=
          M.call
            ((Ty.path "core::fmt::rt::Argument")::["new_display"]
              (borrow
                ((M.var "scoping_rules_borrowing_mutablity::Book::Get_year")
                  (deref α6)))) in
        let* α8 := M.alloc [ α5; α7 ] in
        let* α9 :=
          M.call
            ((Ty.path "core::fmt::Arguments")::["new_v1"]
              (pointer_coercion "Unsize" (borrow α3))
              (pointer_coercion "Unsize" (borrow α8))) in
        let* α10 := M.call ((M.var "std::io::stdio::_print") α9) in
        M.alloc α10 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    // Create an immutable Book named `immutabook`
    let immutabook = Book {
        // string literals have type `&'static str`
        author: "Douglas Hofstadter",
        title: "Gödel, Escher, Bach",
        year: 1979,
    };

    // Create a mutable copy of `immutabook` and call it `mutabook`
    let mut mutabook = immutabook;

    // Immutably borrow an immutable object
    borrow_book(&immutabook);

    // Immutably borrow a mutable object
    borrow_book(&mutabook);

    // Borrow a mutable object as mutable
    new_edition(&mut mutabook);

    // Error! Cannot borrow an immutable object as mutable
    //new_edition(&mut immutabook);
    // FIXME ^ Comment out this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* immutabook :=
      let* α0 := M.read (mk_str "Douglas Hofstadter") in
      let* α1 :=
        M.read (mk_str ("G" ++ String.String "246" "del, Escher, Bach")) in
      M.alloc
        {|
          scoping_rules_borrowing_mutablity.Book.author := α0;
          scoping_rules_borrowing_mutablity.Book.title := α1;
          scoping_rules_borrowing_mutablity.Book.year :=
            (Integer.of_Z 1979) : Ty.path "u32";
        |} in
    let* mutabook := M.copy immutabook in
    let* _ :=
      let* α0 :=
        M.call
          ((M.var "scoping_rules_borrowing_mutablity::borrow_book")
            (borrow immutabook)) in
      M.alloc α0 in
    let* _ :=
      let* α0 :=
        M.call
          ((M.var "scoping_rules_borrowing_mutablity::borrow_book")
            (borrow mutabook)) in
      M.alloc α0 in
    let* _ :=
      let* α0 :=
        M.call
          ((M.var "scoping_rules_borrowing_mutablity::new_edition")
            (borrow_mut mutabook)) in
      M.alloc α0 in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
