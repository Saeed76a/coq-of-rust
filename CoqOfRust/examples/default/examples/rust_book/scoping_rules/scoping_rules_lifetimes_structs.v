(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Struct Borrowed *)

Module Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function
          (Ty.path "core::fmt::Formatter")
          "debug_tuple_field1_finish" in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "Borrowed") in
      let* α3 := M.read self in
      let* α4 := M.alloc (M.get_struct_tuple α3 0) in
      M.call α0 [ α1; α2; M.pointer_coercion "Unsize" α4 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "scoping_rules_lifetimes_structs::Borrowed")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed.

(* Struct NamedBorrowed *)

Module Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function
          (Ty.path "core::fmt::Formatter")
          "debug_struct_field2_finish" in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "NamedBorrowed") in
      let* α3 := M.read (mk_str "x") in
      let* α4 := M.read self in
      let* α5 := M.read (mk_str "y") in
      let* α6 := M.read self in
      let* α7 := M.alloc (M.get_struct_record α6 "y") in
      M.call
        α0
        [
          α1;
          α2;
          α3;
          M.pointer_coercion "Unsize" (M.get_struct_record α4 "x");
          α5;
          M.pointer_coercion "Unsize" α7
        ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "scoping_rules_lifetimes_structs::NamedBorrowed")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed.

(* Enum Either *)

Module Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either.
  (*
  Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | scoping_rules_lifetimes_structs.Either.Num _ =>
                let* γ1_0 :=
                  let* α0 :=
                    M.var
                      "scoping_rules_lifetimes_structs::Either::Get_Num_0" in
                  M.pure (α0 γ) in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :=
                  M.get_associated_function
                    (Ty.path "core::fmt::Formatter")
                    "debug_tuple_field1_finish" in
                let* α1 := M.read f in
                let* α2 := M.read (mk_str "Num") in
                let* α3 :=
                  M.call α0 [ α1; α2; M.pointer_coercion "Unsize" __self_0 ] in
                M.alloc α3
              | _ => M.break_match 
              end);
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | scoping_rules_lifetimes_structs.Either.Ref _ =>
                let* γ1_0 :=
                  let* α0 :=
                    M.var
                      "scoping_rules_lifetimes_structs::Either::Get_Ref_0" in
                  M.pure (α0 γ) in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 :=
                  M.get_associated_function
                    (Ty.path "core::fmt::Formatter")
                    "debug_tuple_field1_finish" in
                let* α1 := M.read f in
                let* α2 := M.read (mk_str "Ref") in
                let* α3 :=
                  M.call α0 [ α1; α2; M.pointer_coercion "Unsize" __self_0 ] in
                M.alloc α3
              | _ => M.break_match 
              end)
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *) (Ty.path "scoping_rules_lifetimes_structs::Either")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either.

(*
fn main() {
    let x = 18;
    let y = 15;

    let single = Borrowed(&x);
    let double = NamedBorrowed { x: &x, y: &y };
    let reference = Either::Ref(&x);
    let number = Either::Num(y);

    println!("x is borrowed in {:?}", single);
    println!("x and y are borrowed in {:?}", double);
    println!("x is borrowed in {:?}", reference);
    println!("y is *not* borrowed in {:?}", number);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* x := M.alloc (Value.Integer Integer.I32 18) in
    let* y := M.alloc (Value.Integer Integer.I32 15) in
    let* single :=
      M.alloc
        (Value.StructTuple "scoping_rules_lifetimes_structs::Borrowed" [ x ]) in
    let* double :=
      M.alloc
        (Value.StructRecord
          "scoping_rules_lifetimes_structs::NamedBorrowed"
          [ ("x", x); ("y", y) ]) in
    let* reference :=
      M.alloc
        (Value.StructTuple
          "scoping_rules_lifetimes_structs::Either::Ref"
          [ x ]) in
    let* number :=
      let* α0 := M.read y in
      M.alloc
        (Value.StructTuple
          "scoping_rules_lifetimes_structs::Either::Num"
          [ α0 ]) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "x is borrowed in ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc [ α2; α3 ] in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α6 := M.call α5 [ single ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            α1
            [ M.pointer_coercion "Unsize" α4; M.pointer_coercion "Unsize" α7
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "x and y are borrowed in ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc [ α2; α3 ] in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α6 := M.call α5 [ double ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            α1
            [ M.pointer_coercion "Unsize" α4; M.pointer_coercion "Unsize" α7
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "x is borrowed in ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc [ α2; α3 ] in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α6 := M.call α5 [ reference ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            α1
            [ M.pointer_coercion "Unsize" α4; M.pointer_coercion "Unsize" α7
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" in
        let* α2 := M.read (mk_str "y is *not* borrowed in ") in
        let* α3 := M.read (mk_str "
") in
        let* α4 := M.alloc [ α2; α3 ] in
        let* α5 :=
          M.get_associated_function
            (Ty.path "core::fmt::rt::Argument")
            "new_debug" in
        let* α6 := M.call α5 [ number ] in
        let* α7 := M.alloc [ α6 ] in
        let* α8 :=
          M.call
            α1
            [ M.pointer_coercion "Unsize" α4; M.pointer_coercion "Unsize" α7
            ] in
        let* α9 := M.call α0 [ α8 ] in
        M.alloc α9 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
