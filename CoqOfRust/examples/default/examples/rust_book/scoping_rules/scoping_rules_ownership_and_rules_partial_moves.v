(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    #[derive(Debug)]
    struct Person {
        name: String,
        age: Box<u8>,
    }

    let person = Person {
        name: String::from("Alice"),
        age: Box::new(20),
    };

    // `name` is moved out of person, but `age` is referenced
    let Person { name, ref age } = person;

    println!("The person's age is {}", age);

    println!("The person's name is {}", name);

    // Error! borrow of partially moved value: `person` partial move occurs
    //println!("The person struct is {:?}", person);

    // `person` cannot be used but `person.age` can be used as it is not moved
    println!("The person's age from person struct is {}", person.age);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* person :=
      let* α0 :=
        M.get_trait_method
          "core::convert::From"
          "from"
          [
            (* Self *) Ty.path "alloc::string::String";
            (* T *) Ty.apply (Ty.path "&") [ Ty.path "str" ]
          ] in
      let* α1 := M.read (mk_str "Alice") in
      let* α2 := M.call α0 [ α1 ] in
      let* α3 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "alloc::boxed::Box")
            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ])
          "new" in
      let* α4 := M.call α3 [ Value.Integer Integer.U8 20 ] in
      M.alloc
        (Value.StructRecord
          "scoping_rules_ownership_and_rules_partial_moves::main::Person"
          [ ("name", α2); ("age", α4) ]) in
    let* α0 :=
      match_operator
        person
        (Value.Array
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              |
                  {|
                    scoping_rules_ownership_and_rules_partial_moves.main.Person.name
                      :=
                      _;
                    scoping_rules_ownership_and_rules_partial_moves.main.Person.age
                      :=
                      _;
                  |}
                  =>
                let* γ0_0 :=
                  let* α0 :=
                    M.var
                      "scoping_rules_ownership_and_rules_partial_moves::main::Person::Get_name" in
                  M.pure (α0 γ) in
                let* γ0_1 :=
                  let* α0 :=
                    M.var
                      "scoping_rules_ownership_and_rules_partial_moves::main::Person::Get_age" in
                  M.pure (α0 γ) in
                let* name := M.copy γ0_0 in
                let* age := M.alloc (borrow γ0_1) in
                let* _ :=
                  let* _ :=
                    let* α0 := M.get_function "std::io::stdio::_print" [] in
                    let* α1 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::Arguments")
                        "new_v1" in
                    let* α2 := M.read (mk_str "The person's age is ") in
                    let* α3 := M.read (mk_str "
") in
                    let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                    let* α5 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display" in
                    let* α6 := M.call α5 [ age ] in
                    let* α7 := M.alloc (Value.Array [ α6 ]) in
                    let* α8 :=
                      M.call
                        α1
                        [
                          M.pointer_coercion (* Unsize *) α4;
                          M.pointer_coercion (* Unsize *) α7
                        ] in
                    let* α9 := M.call α0 [ α8 ] in
                    M.alloc α9 in
                  M.alloc (Value.Tuple []) in
                let* _ :=
                  let* _ :=
                    let* α0 := M.get_function "std::io::stdio::_print" [] in
                    let* α1 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::Arguments")
                        "new_v1" in
                    let* α2 := M.read (mk_str "The person's name is ") in
                    let* α3 := M.read (mk_str "
") in
                    let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                    let* α5 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display" in
                    let* α6 := M.call α5 [ name ] in
                    let* α7 := M.alloc (Value.Array [ α6 ]) in
                    let* α8 :=
                      M.call
                        α1
                        [
                          M.pointer_coercion (* Unsize *) α4;
                          M.pointer_coercion (* Unsize *) α7
                        ] in
                    let* α9 := M.call α0 [ α8 ] in
                    M.alloc α9 in
                  M.alloc (Value.Tuple []) in
                let* _ :=
                  let* _ :=
                    let* α0 := M.get_function "std::io::stdio::_print" [] in
                    let* α1 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::Arguments")
                        "new_v1" in
                    let* α2 :=
                      M.read
                        (mk_str "The person's age from person struct is ") in
                    let* α3 := M.read (mk_str "
") in
                    let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                    let* α5 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display" in
                    let* α6 := M.call α5 [ M.get_struct_record person "age" ] in
                    let* α7 := M.alloc (Value.Array [ α6 ]) in
                    let* α8 :=
                      M.call
                        α1
                        [
                          M.pointer_coercion (* Unsize *) α4;
                          M.pointer_coercion (* Unsize *) α7
                        ] in
                    let* α9 := M.call α0 [ α8 ] in
                    M.alloc α9 in
                  M.alloc (Value.Tuple []) in
                M.alloc (Value.Tuple [])
              end)
          ]) in
    M.read α0
  | _, _ => M.impossible
  end.

(* Struct Person *)

Module Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person.
  (*
      Debug
  *)
  Definition fmt (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [ Self ], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function
          (Ty.path "core::fmt::Formatter")
          "debug_struct_field2_finish" in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "Person") in
      let* α3 := M.read (mk_str "name") in
      let* α4 := M.read self in
      let* α5 := M.read (mk_str "age") in
      let* α6 := M.read self in
      let* α7 := M.alloc (M.get_struct_record α6 "age") in
      M.call
        α0
        [
          α1;
          α2;
          α3;
          M.pointer_coercion (* Unsize *) (M.get_struct_record α4 "name");
          α5;
          M.pointer_coercion (* Unsize *) α7
        ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Self *)
        (Ty.path
          "scoping_rules_ownership_and_rules_partial_moves::main::Person")
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ]
      (* Instance polymorphic types *) [].
End Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person.
