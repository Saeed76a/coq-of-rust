(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    println!("{}", find_min!(1));
    println!("{}", find_min!(1 + 2, 2));
    println!("{}", find_min!(5, 2 * 3, 4));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "1
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] [] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α2);
              pointer_coercion "Unsize" (borrow α4)
            ] in
        let* α6 := M.call α0 [ α5 ] in
        M.alloc α6 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 := M.var "core::cmp::min" in
        let* α5 := M.var "BinOp::Panic::add" in
        let* α6 :=
          α5
            ((Integer.of_Z 1) : Ty.path "i32")
            ((Integer.of_Z 2) : Ty.path "i32") in
        let* α7 := M.call α4 [ α6; (Integer.of_Z 2) : Ty.path "i32" ] in
        let* α8 := M.alloc α7 in
        let* α9 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow α8 ] in
        let* α10 := M.alloc [ α9 ] in
        let* α11 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α10)
            ] in
        let* α12 := M.call α0 [ α11 ] in
        M.alloc α12 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 := M.var "core::cmp::min" in
        let* α5 := M.var "core::cmp::min" in
        let* α6 := M.var "BinOp::Panic::mul" in
        let* α7 :=
          α6
            ((Integer.of_Z 2) : Ty.path "i32")
            ((Integer.of_Z 3) : Ty.path "i32") in
        let* α8 := M.call α5 [ α7; (Integer.of_Z 4) : Ty.path "i32" ] in
        let* α9 := M.call α4 [ (Integer.of_Z 5) : Ty.path "i32"; α8 ] in
        let* α10 := M.alloc α9 in
        let* α11 :=
          M.call
            (Ty.path "core::fmt::rt::Argument")::["new_display"]
            [ borrow α10 ] in
        let* α12 := M.alloc [ α11 ] in
        let* α13 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [
              pointer_coercion "Unsize" (borrow α3);
              pointer_coercion "Unsize" (borrow α12)
            ] in
        let* α14 := M.call α0 [ α13 ] in
        M.alloc α14 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
