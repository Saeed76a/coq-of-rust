(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    println!("{}", find_min!(1));
    println!("{}", find_min!(1 + 2, 2));
    println!("{}", find_min!(5, 2 * 3, 4));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "1
") in
        let* α2 := M.alloc [ α1 ] in
        let* α3 := M.call (Ty.path "core::fmt::rt::Argument")::["none"] [] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α2; M.pointer_coercion "Unsize" α4
            ] in
        let* α6 := M.call α0 [ α5 ] in
        M.alloc α6 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 := M.var "core::cmp::min" in
        let* α5 :=
          BinOp.Panic.add
            (Value.Integer Integer.I32 1)
            (Value.Integer Integer.I32 2) in
        let* α6 := M.call α4 [ α5; Value.Integer Integer.I32 2 ] in
        let* α7 := M.alloc α6 in
        let* α8 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α7 ] in
        let* α9 := M.alloc [ α8 ] in
        let* α10 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α9
            ] in
        let* α11 := M.call α0 [ α10 ] in
        M.alloc α11 in
      M.alloc tt in
    let* _ :=
      let* _ :=
        let* α0 := M.var "std::io::stdio::_print" in
        let* α1 := M.read (mk_str "") in
        let* α2 := M.read (mk_str "
") in
        let* α3 := M.alloc [ α1; α2 ] in
        let* α4 := M.var "core::cmp::min" in
        let* α5 := M.var "core::cmp::min" in
        let* α6 :=
          BinOp.Panic.mul
            (Value.Integer Integer.I32 2)
            (Value.Integer Integer.I32 3) in
        let* α7 := M.call α5 [ α6; Value.Integer Integer.I32 4 ] in
        let* α8 := M.call α4 [ Value.Integer Integer.I32 5; α7 ] in
        let* α9 := M.alloc α8 in
        let* α10 :=
          M.call (Ty.path "core::fmt::rt::Argument")::["new_display"] [ α9 ] in
        let* α11 := M.alloc [ α10 ] in
        let* α12 :=
          M.call
            (Ty.path "core::fmt::Arguments")::["new_v1"]
            [ M.pointer_coercion "Unsize" α3; M.pointer_coercion "Unsize" α11
            ] in
        let* α13 := M.call α0 [ α12 ] in
        M.alloc α13 in
      M.alloc tt in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
