(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let number: u8 = 4;

    match number {
        i if i == 0 => println!("Zero"),
        i if i > 0 => println!("Greater than zero"),
        _ => unreachable!("Should never happen."),
        // TODO ^ uncomment to fix compilation
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* number : M.Val u8.t :=
      let* α0 : M.Val u8.t := M.alloc 4 in
      M.copy α0 in
    let* α0 := M.read number in
    match α0 with
    | i =>
      let* i := M.alloc i in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) := M.alloc [ mk_str "Zero
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt
    | i =>
      let* i := M.alloc i in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Greater than zero
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt
    | _ =>
      let* α0 : M.Val (ref (ref str.t)) :=
        borrow (mk_str "Should never happen.") in
      let* α1 := M.read α0 in
      let* α2 := core.panicking.unreachable_display α1 in
      let* α3 : M.Val never.t := M.alloc α2 in
      never_to_any α3
    end).
