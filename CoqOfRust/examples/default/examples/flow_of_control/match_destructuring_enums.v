(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Color.
  Inductive t : Set :=
  | Red
  | Blue
  | Green
  | RGB (_ : u32.t) (_ : u32.t) (_ : u32.t)
  | HSV (_ : u32.t) (_ : u32.t) (_ : u32.t)
  | HSL (_ : u32.t) (_ : u32.t) (_ : u32.t)
  | CMY (_ : u32.t) (_ : u32.t) (_ : u32.t)
  | CMYK (_ : u32.t) (_ : u32.t) (_ : u32.t) (_ : u32.t).
End Color.

(*
fn main() {
    let color = Color::RGB(122, 17, 40);
    // TODO ^ Try different variants for `color`

    println!("What color is it?");
    // An `enum` can be destructured using a `match`.
    match color {
        Color::Red => println!("The color is Red!"),
        Color::Blue => println!("The color is Blue!"),
        Color::Green => println!("The color is Green!"),
        Color::RGB(r, g, b) => println!("Red: {}, green: {}, and blue: {}!", r, g, b),
        Color::HSV(h, s, v) => println!("Hue: {}, saturation: {}, value: {}!", h, s, v),
        Color::HSL(h, s, l) => println!("Hue: {}, saturation: {}, lightness: {}!", h, s, l),
        Color::CMY(c, m, y) => println!("Cyan: {}, magenta: {}, yellow: {}!", c, m, y),
        Color::CMYK(c, m, y, k) => println!(
            "Cyan: {}, magenta: {}, yellow: {}, key (black): {}!",
            c, m, y, k
        ),
        // Don't need another arm because all variants have been examined
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* color : M.Val match_destructuring_enums.Color.t :=
      let* α0 : M.Val u32.t := M.alloc 122 in
      let* α1 : u32.t := M.read α0 in
      let* α2 : M.Val u32.t := M.alloc 17 in
      let* α3 : u32.t := M.read α2 in
      let* α4 : M.Val u32.t := M.alloc 40 in
      let* α5 : u32.t := M.read α4 in
      M.alloc (match_destructuring_enums.Color.RGB α1 α3 α5) in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "What color is it?
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_const"] α6 in
        let* α8 : unit := std.io.stdio._print α7 in
        M.alloc α8 in
      M.alloc tt in
    let* α0 := M.read color in
    match α0 with
    | match_destructuring_enums.Color.Red  =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "The color is Red!
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_const"] α6 in
        let* α8 : unit := std.io.stdio._print α7 in
        M.alloc α8 in
      M.alloc tt
    | match_destructuring_enums.Color.Blue  =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "The color is Blue!
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_const"] α6 in
        let* α8 : unit := std.io.stdio._print α7 in
        M.alloc α8 in
      M.alloc tt
    | match_destructuring_enums.Color.Green  =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "The color is Green!
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_const"] α6 in
        let* α8 : unit := std.io.stdio._print α7 in
        M.alloc α8 in
      M.alloc tt
    | match_destructuring_enums.Color.RGB r g b =>
      let* b := M.alloc b in
      let* g := M.alloc g in
      let* r := M.alloc r in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [
              mk_str "Red: ";
              mk_str ", green: ";
              mk_str ", and blue: ";
              mk_str "!
"
            ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref u32.t := borrow r in
        let* α8 : M.Val u32.t := deref α7 in
        let* α9 : ref u32.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : ref u32.t := borrow g in
        let* α13 : M.Val u32.t := deref α12 in
        let* α14 : ref u32.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : ref u32.t := borrow b in
        let* α18 : M.Val u32.t := deref α17 in
        let* α19 : ref u32.t := borrow α18 in
        let* α20 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α19 in
        let* α21 : M.Val core.fmt.rt.Argument.t := M.alloc α20 in
        let* α22 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α16; α21 ] in
        let* α23 : ref (array core.fmt.rt.Argument.t) := borrow α22 in
        let* α24 : M.Val (array core.fmt.rt.Argument.t) := deref α23 in
        let* α25 : ref (array core.fmt.rt.Argument.t) := borrow α24 in
        let* α26 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α25 in
        let* α27 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α26 in
        let* α28 : ref (slice core.fmt.rt.Argument.t) := M.read α27 in
        let* α29 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α28 in
        let* α30 : unit := std.io.stdio._print α29 in
        M.alloc α30 in
      M.alloc tt
    | match_destructuring_enums.Color.HSV h s v =>
      let* v := M.alloc v in
      let* s := M.alloc s in
      let* h := M.alloc h in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [
              mk_str "Hue: ";
              mk_str ", saturation: ";
              mk_str ", value: ";
              mk_str "!
"
            ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref u32.t := borrow h in
        let* α8 : M.Val u32.t := deref α7 in
        let* α9 : ref u32.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : ref u32.t := borrow s in
        let* α13 : M.Val u32.t := deref α12 in
        let* α14 : ref u32.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : ref u32.t := borrow v in
        let* α18 : M.Val u32.t := deref α17 in
        let* α19 : ref u32.t := borrow α18 in
        let* α20 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α19 in
        let* α21 : M.Val core.fmt.rt.Argument.t := M.alloc α20 in
        let* α22 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α16; α21 ] in
        let* α23 : ref (array core.fmt.rt.Argument.t) := borrow α22 in
        let* α24 : M.Val (array core.fmt.rt.Argument.t) := deref α23 in
        let* α25 : ref (array core.fmt.rt.Argument.t) := borrow α24 in
        let* α26 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α25 in
        let* α27 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α26 in
        let* α28 : ref (slice core.fmt.rt.Argument.t) := M.read α27 in
        let* α29 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α28 in
        let* α30 : unit := std.io.stdio._print α29 in
        M.alloc α30 in
      M.alloc tt
    | match_destructuring_enums.Color.HSL h s l =>
      let* l := M.alloc l in
      let* s := M.alloc s in
      let* h := M.alloc h in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [
              mk_str "Hue: ";
              mk_str ", saturation: ";
              mk_str ", lightness: ";
              mk_str "!
"
            ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref u32.t := borrow h in
        let* α8 : M.Val u32.t := deref α7 in
        let* α9 : ref u32.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : ref u32.t := borrow s in
        let* α13 : M.Val u32.t := deref α12 in
        let* α14 : ref u32.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : ref u32.t := borrow l in
        let* α18 : M.Val u32.t := deref α17 in
        let* α19 : ref u32.t := borrow α18 in
        let* α20 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α19 in
        let* α21 : M.Val core.fmt.rt.Argument.t := M.alloc α20 in
        let* α22 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α16; α21 ] in
        let* α23 : ref (array core.fmt.rt.Argument.t) := borrow α22 in
        let* α24 : M.Val (array core.fmt.rt.Argument.t) := deref α23 in
        let* α25 : ref (array core.fmt.rt.Argument.t) := borrow α24 in
        let* α26 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α25 in
        let* α27 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α26 in
        let* α28 : ref (slice core.fmt.rt.Argument.t) := M.read α27 in
        let* α29 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α28 in
        let* α30 : unit := std.io.stdio._print α29 in
        M.alloc α30 in
      M.alloc tt
    | match_destructuring_enums.Color.CMY c m y =>
      let* y := M.alloc y in
      let* m := M.alloc m in
      let* c := M.alloc c in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [
              mk_str "Cyan: ";
              mk_str ", magenta: ";
              mk_str ", yellow: ";
              mk_str "!
"
            ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref u32.t := borrow c in
        let* α8 : M.Val u32.t := deref α7 in
        let* α9 : ref u32.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : ref u32.t := borrow m in
        let* α13 : M.Val u32.t := deref α12 in
        let* α14 : ref u32.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : ref u32.t := borrow y in
        let* α18 : M.Val u32.t := deref α17 in
        let* α19 : ref u32.t := borrow α18 in
        let* α20 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α19 in
        let* α21 : M.Val core.fmt.rt.Argument.t := M.alloc α20 in
        let* α22 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α16; α21 ] in
        let* α23 : ref (array core.fmt.rt.Argument.t) := borrow α22 in
        let* α24 : M.Val (array core.fmt.rt.Argument.t) := deref α23 in
        let* α25 : ref (array core.fmt.rt.Argument.t) := borrow α24 in
        let* α26 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α25 in
        let* α27 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α26 in
        let* α28 : ref (slice core.fmt.rt.Argument.t) := M.read α27 in
        let* α29 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α28 in
        let* α30 : unit := std.io.stdio._print α29 in
        M.alloc α30 in
      M.alloc tt
    | match_destructuring_enums.Color.CMYK c m y k =>
      let* k := M.alloc k in
      let* y := M.alloc y in
      let* m := M.alloc m in
      let* c := M.alloc c in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [
              mk_str "Cyan: ";
              mk_str ", magenta: ";
              mk_str ", yellow: ";
              mk_str ", key (black): ";
              mk_str "!
"
            ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref u32.t := borrow c in
        let* α8 : M.Val u32.t := deref α7 in
        let* α9 : ref u32.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : ref u32.t := borrow m in
        let* α13 : M.Val u32.t := deref α12 in
        let* α14 : ref u32.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : ref u32.t := borrow y in
        let* α18 : M.Val u32.t := deref α17 in
        let* α19 : ref u32.t := borrow α18 in
        let* α20 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α19 in
        let* α21 : M.Val core.fmt.rt.Argument.t := M.alloc α20 in
        let* α22 : ref u32.t := borrow k in
        let* α23 : M.Val u32.t := deref α22 in
        let* α24 : ref u32.t := borrow α23 in
        let* α25 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α24 in
        let* α26 : M.Val core.fmt.rt.Argument.t := M.alloc α25 in
        let* α27 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α16; α21; α26 ] in
        let* α28 : ref (array core.fmt.rt.Argument.t) := borrow α27 in
        let* α29 : M.Val (array core.fmt.rt.Argument.t) := deref α28 in
        let* α30 : ref (array core.fmt.rt.Argument.t) := borrow α29 in
        let* α31 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α30 in
        let* α32 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α31 in
        let* α33 : ref (slice core.fmt.rt.Argument.t) := M.read α32 in
        let* α34 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α33 in
        let* α35 : unit := std.io.stdio._print α34 in
        M.alloc α35 in
      M.alloc tt
    end).
