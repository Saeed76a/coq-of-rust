(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Make `optional` of type `Option<i32>`
    let mut optional = Some(0);

    // Repeatedly try this test.
    loop {
        match optional {
            // If `optional` destructures, evaluate the block.
            Some(i) => {
                if i > 9 {
                    println!("Greater than 9, quit!");
                    optional = None;
                } else {
                    println!("`i` is `{:?}`. Try again.", i);
                    optional = Some(i + 1);
                }
                // ^ Requires 3 indentations!
            }
            // Quit the loop when the destructure fails:
            _ => {
                break;
            } // ^ Why should this be required? There must be a better way!
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* optional : M.Val (core.option.Option.t i32.t) :=
    M.alloc (core.option.Option.Some (Integer.of_Z 0)) in
  let* α0 : M.Val unit :=
    loop
      (let* α0 : core.option.Option.t i32.t := M.read optional in
      match α0 with
      | core.option.Option.Some i =>
        let* i := M.alloc i in
        let* α0 : i32.t := M.read i in
        if (use (BinOp.Pure.gt α0 (Integer.of_Z 9)) : bool) then
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "Greater than 9, quit!
" ] in
              let* α1 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α0) in
              let* α2 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α1) in
              let* α3 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_const"] α2 in
              let* α4 : unit := std.io.stdio._print α3 in
              M.alloc α4 in
            M.alloc tt in
          let* _ : M.Val unit := assign optional core.option.Option.None in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "`i` is `"; mk_str "`. Try again.
" ] in
              let* α1 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α0) in
              let* α2 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α1) in
              let* α3 : core.fmt.rt.Argument.t :=
                core.fmt.rt.Argument.t::["new_debug"] (borrow i) in
              let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
              let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α4 ] in
              let* α6 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α5) in
              let* α7 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α6) in
              let* α8 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_v1"] α2 α7 in
              let* α9 : unit := std.io.stdio._print α8 in
              M.alloc α9 in
            M.alloc tt in
          let* _ : M.Val unit :=
            let* α0 : i32.t := M.read i in
            let* α1 : i32.t := BinOp.Panic.add α0 (Integer.of_Z 1) in
            assign optional (core.option.Option.Some α1) in
          M.alloc tt
      | _ =>
        let* _ : M.Val never.t := Break in
        let* α0 : M.Val unit := M.alloc tt in
        let* α1 := M.read α0 in
        let* α2 : unit := never_to_any α1 in
        M.alloc α2
      end) in
  M.read α0.
