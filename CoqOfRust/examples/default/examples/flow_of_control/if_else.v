(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let n = 5;

    if n < 0 {
        print!("{} is negative", n);
    } else if n > 0 {
        print!("{} is positive", n);
    } else {
        print!("{} is zero", n);
    }

    let big_n = if n < 10 && n > -10 {
        println!(", and is a small number, increase ten-fold");

        // This expression returns an `i32`.
        10 * n
    } else {
        println!(", and is a big number, halve the number");

        // This expression must return an `i32` as well.
        n / 2
        // TODO ^ Try suppressing this expression with a semicolon.
    };
    //   ^ Don't forget to put a semicolon here! All `let` bindings need it.

    println!("{} -> {}", n, big_n);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* n : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 5 in
      M.copy α0 in
    let* _ : M.Val unit :=
      let* α0 : M.Val i32.t := M.alloc 0 in
      let* α1 : M.Val bool.t := BinOp.lt n α0 in
      let* α2 : M.Val bool.t := use α1 in
      let* α3 : bool.t := M.read α2 in
      if (α3 : bool) then
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str ""; mk_str " is negative" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : ref i32.t := borrow n in
            let* α8 : M.Val i32.t := deref α7 in
            let* α9 : ref i32.t := borrow α8 in
            let* α10 : core.fmt.rt.Argument.t :=
              core.fmt.rt.Argument.t::["new_display"] α9 in
            let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
            let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
              M.alloc [ α11 ] in
            let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
            let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
            let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
            let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
              M.alloc α15 in
            let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
              pointer_coercion "Unsize" α16 in
            let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
            let* α19 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_v1"] α6 α18 in
            let* α20 : unit := std.io.stdio._print α19 in
            M.alloc α20 in
          M.alloc tt in
        M.alloc tt
      else
        let* α0 : M.Val i32.t := M.alloc 0 in
        let* α1 : M.Val bool.t := BinOp.gt n α0 in
        let* α2 : M.Val bool.t := use α1 in
        let* α3 : bool.t := M.read α2 in
        if (α3 : bool) then
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str ""; mk_str " is positive" ] in
              let* α1 : ref (array (ref str.t)) := borrow α0 in
              let* α2 : M.Val (array (ref str.t)) := deref α1 in
              let* α3 : ref (array (ref str.t)) := borrow α2 in
              let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
              let* α5 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α4 in
              let* α6 : ref (slice (ref str.t)) := M.read α5 in
              let* α7 : ref i32.t := borrow n in
              let* α8 : M.Val i32.t := deref α7 in
              let* α9 : ref i32.t := borrow α8 in
              let* α10 : core.fmt.rt.Argument.t :=
                core.fmt.rt.Argument.t::["new_display"] α9 in
              let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
              let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α11 ] in
              let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
              let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
              let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
              let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc α15 in
              let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                pointer_coercion "Unsize" α16 in
              let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
              let* α19 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_v1"] α6 α18 in
              let* α20 : unit := std.io.stdio._print α19 in
              M.alloc α20 in
            M.alloc tt in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str ""; mk_str " is zero" ] in
              let* α1 : ref (array (ref str.t)) := borrow α0 in
              let* α2 : M.Val (array (ref str.t)) := deref α1 in
              let* α3 : ref (array (ref str.t)) := borrow α2 in
              let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
              let* α5 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α4 in
              let* α6 : ref (slice (ref str.t)) := M.read α5 in
              let* α7 : ref i32.t := borrow n in
              let* α8 : M.Val i32.t := deref α7 in
              let* α9 : ref i32.t := borrow α8 in
              let* α10 : core.fmt.rt.Argument.t :=
                core.fmt.rt.Argument.t::["new_display"] α9 in
              let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
              let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α11 ] in
              let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
              let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
              let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
              let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc α15 in
              let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                pointer_coercion "Unsize" α16 in
              let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
              let* α19 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_v1"] α6 α18 in
              let* α20 : unit := std.io.stdio._print α19 in
              M.alloc α20 in
            M.alloc tt in
          M.alloc tt in
    let* big_n : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 10 in
      let* α1 : M.Val bool.t := BinOp.lt n α0 in
      let* α2 : M.Val i32.t := M.alloc (- 10) in
      let* α3 : M.Val bool.t := BinOp.gt n α2 in
      let* α4 : M.Val bool.t := BinOp.and α1 α3 in
      let* α5 : M.Val bool.t := use α4 in
      let* α6 : bool.t := M.read α5 in
      let* α7 : M.Val i32.t :=
        if (α6 : bool) then
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc
                  [ mk_str ", and is a small number, increase ten-fold
" ] in
              let* α1 : ref (array (ref str.t)) := borrow α0 in
              let* α2 : M.Val (array (ref str.t)) := deref α1 in
              let* α3 : ref (array (ref str.t)) := borrow α2 in
              let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
              let* α5 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α4 in
              let* α6 : ref (slice (ref str.t)) := M.read α5 in
              let* α7 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_const"] α6 in
              let* α8 : unit := std.io.stdio._print α7 in
              M.alloc α8 in
            M.alloc tt in
          let* α0 : M.Val i32.t := M.alloc 10 in
          BinOp.mul α0 n
        else
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str ", and is a big number, halve the number
" ] in
              let* α1 : ref (array (ref str.t)) := borrow α0 in
              let* α2 : M.Val (array (ref str.t)) := deref α1 in
              let* α3 : ref (array (ref str.t)) := borrow α2 in
              let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
              let* α5 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α4 in
              let* α6 : ref (slice (ref str.t)) := M.read α5 in
              let* α7 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_const"] α6 in
              let* α8 : unit := std.io.stdio._print α7 in
              M.alloc α8 in
            M.alloc tt in
          let* α0 : M.Val i32.t := M.alloc 2 in
          BinOp.div n α0 in
      M.copy α7 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " -> "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref i32.t := borrow n in
        let* α8 : M.Val i32.t := deref α7 in
        let* α9 : ref i32.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : ref i32.t := borrow big_n in
        let* α13 : M.Val i32.t := deref α12 in
        let* α14 : ref i32.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α16 ] in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) := deref α18 in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α20 in
        let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α21 in
        let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
        let* α24 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α23 in
        let* α25 : unit := std.io.stdio._print α24 in
        M.alloc α25 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
