(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // A counter variable
    let mut n = 1;

    // Loop while `n` is less than 101
    while n < 101 {
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }

        // Increment counter
        n += 1;
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* n : M.Val i32.t := M.alloc (Integer.of_Z 1) in
  let* α0 : M.Val unit :=
    loop
      (let* α0 : i32.t := M.read n in
      if (use (BinOp.Pure.lt α0 (Integer.of_Z 101)) : bool) then
        let* _ : M.Val unit :=
          let* α0 : i32.t := M.read n in
          let* α1 : i32.t := BinOp.Panic.rem α0 (Integer.of_Z 15) in
          if (use (BinOp.Pure.eq α1 (Integer.of_Z 0)) : bool) then
            let* _ : M.Val unit :=
              let* _ : M.Val unit :=
                let* α0 : M.Val (array (ref str.t)) :=
                  M.alloc [ mk_str "fizzbuzz
" ] in
                let* α1 : M.Val (ref (array (ref str.t))) :=
                  M.alloc (borrow α0) in
                let* α2 : ref (slice (ref str.t)) :=
                  M.read (pointer_coercion "Unsize" α1) in
                let* α3 : core.fmt.Arguments.t :=
                  M.call (core.fmt.Arguments.t::["new_const"] α2) in
                let* α4 : unit := M.call (std.io.stdio._print α3) in
                M.alloc α4 in
              M.alloc tt in
            M.alloc tt
          else
            let* α0 : i32.t := M.read n in
            let* α1 : i32.t := BinOp.Panic.rem α0 (Integer.of_Z 3) in
            if (use (BinOp.Pure.eq α1 (Integer.of_Z 0)) : bool) then
              let* _ : M.Val unit :=
                let* _ : M.Val unit :=
                  let* α0 : M.Val (array (ref str.t)) :=
                    M.alloc [ mk_str "fizz
" ] in
                  let* α1 : M.Val (ref (array (ref str.t))) :=
                    M.alloc (borrow α0) in
                  let* α2 : ref (slice (ref str.t)) :=
                    M.read (pointer_coercion "Unsize" α1) in
                  let* α3 : core.fmt.Arguments.t :=
                    M.call (core.fmt.Arguments.t::["new_const"] α2) in
                  let* α4 : unit := M.call (std.io.stdio._print α3) in
                  M.alloc α4 in
                M.alloc tt in
              M.alloc tt
            else
              let* α0 : i32.t := M.read n in
              let* α1 : i32.t := BinOp.Panic.rem α0 (Integer.of_Z 5) in
              if (use (BinOp.Pure.eq α1 (Integer.of_Z 0)) : bool) then
                let* _ : M.Val unit :=
                  let* _ : M.Val unit :=
                    let* α0 : M.Val (array (ref str.t)) :=
                      M.alloc [ mk_str "buzz
" ] in
                    let* α1 : M.Val (ref (array (ref str.t))) :=
                      M.alloc (borrow α0) in
                    let* α2 : ref (slice (ref str.t)) :=
                      M.read (pointer_coercion "Unsize" α1) in
                    let* α3 : core.fmt.Arguments.t :=
                      M.call (core.fmt.Arguments.t::["new_const"] α2) in
                    let* α4 : unit := M.call (std.io.stdio._print α3) in
                    M.alloc α4 in
                  M.alloc tt in
                M.alloc tt
              else
                let* _ : M.Val unit :=
                  let* _ : M.Val unit :=
                    let* α0 : M.Val (array (ref str.t)) :=
                      M.alloc [ mk_str ""; mk_str "
" ] in
                    let* α1 : M.Val (ref (array (ref str.t))) :=
                      M.alloc (borrow α0) in
                    let* α2 : ref (slice (ref str.t)) :=
                      M.read (pointer_coercion "Unsize" α1) in
                    let* α3 : core.fmt.rt.Argument.t :=
                      M.call
                        (core.fmt.rt.Argument.t::["new_display"] (borrow n)) in
                    let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
                    let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                      M.alloc [ α4 ] in
                    let* α6 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                      M.alloc (borrow α5) in
                    let* α7 : ref (slice core.fmt.rt.Argument.t) :=
                      M.read (pointer_coercion "Unsize" α6) in
                    let* α8 : core.fmt.Arguments.t :=
                      M.call (core.fmt.Arguments.t::["new_v1"] α2 α7) in
                    let* α9 : unit := M.call (std.io.stdio._print α8) in
                    M.alloc α9 in
                  M.alloc tt in
                M.alloc tt in
        let* _ : M.Val unit :=
          let* α0 : M.Val i32.t := M.alloc (Integer.of_Z 1) in
          assign_op BinOp.Panic.add n α0 in
        M.alloc tt
      else
        let* _ : M.Val unit :=
          let* α0 : M.Val never.t := Break in
          let* α1 := M.read α0 in
          let* α2 : unit := never_to_any α1 in
          M.alloc α2 in
        let* α0 : M.Val unit := M.alloc tt in
        let* α1 := M.read α0 in
        let* α2 : unit := never_to_any α1 in
        M.alloc α2) in
  M.read α0.
