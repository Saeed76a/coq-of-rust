(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // A counter variable
    let mut n = 1;

    // Loop while `n` is less than 101
    while n < 101 {
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }

        // Increment counter
        n += 1;
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* n : ltac:(refine (M.Val i32.t)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      M.copy α0 in
    loop
      (let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 101 in
      let* α1 : ltac:(refine (M.Val bool.t)) := BinOp.lt n α0 in
      let* α2 : ltac:(refine (M.Val bool.t)) := use α1 in
      let* α3 := M.read α2 in
      if (α3 : bool) then
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 15 in
          let* α1 : ltac:(refine (M.Val i32.t)) := BinOp.rem n α0 in
          let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
          let* α3 : ltac:(refine (M.Val bool.t)) := BinOp.eq α1 α2 in
          let* α4 : ltac:(refine (M.Val bool.t)) := use α3 in
          let* α5 := M.read α4 in
          if (α5 : bool) then
            let* _ : ltac:(refine (M.Val unit)) :=
              let* _ : ltac:(refine (M.Val unit)) :=
                let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
                  M.alloc [ mk_str "fizzbuzz
" ] in
                let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
                  borrow α0 in
                let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
                  pointer_coercion "Unsize" α1 in
                let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                  core.fmt.Arguments.t::["new_const"] α2 in
                std.io.stdio._print α3 in
              M.alloc tt in
            M.alloc tt
          else
            let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
            let* α1 : ltac:(refine (M.Val i32.t)) := BinOp.rem n α0 in
            let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
            let* α3 : ltac:(refine (M.Val bool.t)) := BinOp.eq α1 α2 in
            let* α4 : ltac:(refine (M.Val bool.t)) := use α3 in
            let* α5 := M.read α4 in
            if (α5 : bool) then
              let* _ : ltac:(refine (M.Val unit)) :=
                let* _ : ltac:(refine (M.Val unit)) :=
                  let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
                    M.alloc [ mk_str "fizz
" ] in
                  let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
                    borrow α0 in
                  let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
                    pointer_coercion "Unsize" α1 in
                  let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                    core.fmt.Arguments.t::["new_const"] α2 in
                  std.io.stdio._print α3 in
                M.alloc tt in
              M.alloc tt
            else
              let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
              let* α1 : ltac:(refine (M.Val i32.t)) := BinOp.rem n α0 in
              let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
              let* α3 : ltac:(refine (M.Val bool.t)) := BinOp.eq α1 α2 in
              let* α4 : ltac:(refine (M.Val bool.t)) := use α3 in
              let* α5 := M.read α4 in
              if (α5 : bool) then
                let* _ : ltac:(refine (M.Val unit)) :=
                  let* _ : ltac:(refine (M.Val unit)) :=
                    let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
                      M.alloc [ mk_str "buzz
" ] in
                    let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
                      borrow α0 in
                    let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
                      pointer_coercion "Unsize" α1 in
                    let* α3 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                      core.fmt.Arguments.t::["new_const"] α2 in
                    std.io.stdio._print α3 in
                  M.alloc tt in
                M.alloc tt
              else
                let* _ : ltac:(refine (M.Val unit)) :=
                  let* _ : ltac:(refine (M.Val unit)) :=
                    let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
                      M.alloc [ mk_str ""; mk_str "
" ] in
                    let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
                      borrow α0 in
                    let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
                      pointer_coercion "Unsize" α1 in
                    let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow n in
                    let* α4 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
                      core.fmt.rt.Argument.t::["new_display"] α3 in
                    let* α5 :
                        ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
                      M.alloc [ α4 ] in
                    let* α6 :
                        ltac:(refine
                          (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
                      borrow α5 in
                    let* α7 :
                        ltac:(refine
                          (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
                      pointer_coercion "Unsize" α6 in
                    let* α8 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
                      core.fmt.Arguments.t::["new_v1"] α2 α7 in
                    std.io.stdio._print α8 in
                  M.alloc tt in
                M.alloc tt in
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
          assign_op add n α0 in
        M.alloc tt
      else
        let* _ : ltac:(refine (M.Val unit)) :=
          let* α0 : ltac:(refine (M.Val never.t)) := Break in
          never_to_any α0 in
        let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
        never_to_any α0)).
