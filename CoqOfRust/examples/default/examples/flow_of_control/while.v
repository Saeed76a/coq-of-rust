(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // A counter variable
    let mut n = 1;

    // Loop while `n` is less than 101
    while n < 101 {
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }

        // Increment counter
        n += 1;
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* n : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 1 in
      M.copy α0 in
    loop
      (let* α0 : M.Val i32.t := M.alloc 101 in
      let* α1 : M.Val bool.t := BinOp.lt n α0 in
      let* α2 : M.Val bool.t := use α1 in
      let* α3 := M.read α2 in
      if (α3 : bool) then
        let* _ : M.Val unit :=
          let* α0 : M.Val i32.t := M.alloc 15 in
          let* α1 : M.Val i32.t := BinOp.rem n α0 in
          let* α2 : M.Val i32.t := M.alloc 0 in
          let* α3 : M.Val bool.t := BinOp.eq α1 α2 in
          let* α4 : M.Val bool.t := use α3 in
          let* α5 := M.read α4 in
          if (α5 : bool) then
            let* _ : M.Val unit :=
              let* _ : M.Val unit :=
                let* α0 : M.Val (array (ref str.t)) :=
                  M.alloc [ mk_str "fizzbuzz
" ] in
                let* α1 : ref (array (ref str.t)) := borrow α0 in
                let* α2 : M.Val (array (ref str.t)) := deref α1 in
                let* α3 : ref (array (ref str.t)) := borrow α2 in
                let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
                let* α5 : M.Val (ref (slice (ref str.t))) :=
                  pointer_coercion "Unsize" α4 in
                let* α6 := M.read α5 in
                let* α7 : core.fmt.Arguments.t :=
                  core.fmt.Arguments.t::["new_const"] α6 in
                let* α8 : unit := std.io.stdio._print α7 in
                M.alloc α8 in
              M.alloc tt in
            M.alloc tt
          else
            let* α0 : M.Val i32.t := M.alloc 3 in
            let* α1 : M.Val i32.t := BinOp.rem n α0 in
            let* α2 : M.Val i32.t := M.alloc 0 in
            let* α3 : M.Val bool.t := BinOp.eq α1 α2 in
            let* α4 : M.Val bool.t := use α3 in
            let* α5 := M.read α4 in
            if (α5 : bool) then
              let* _ : M.Val unit :=
                let* _ : M.Val unit :=
                  let* α0 : M.Val (array (ref str.t)) :=
                    M.alloc [ mk_str "fizz
" ] in
                  let* α1 : ref (array (ref str.t)) := borrow α0 in
                  let* α2 : M.Val (array (ref str.t)) := deref α1 in
                  let* α3 : ref (array (ref str.t)) := borrow α2 in
                  let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
                  let* α5 : M.Val (ref (slice (ref str.t))) :=
                    pointer_coercion "Unsize" α4 in
                  let* α6 := M.read α5 in
                  let* α7 : core.fmt.Arguments.t :=
                    core.fmt.Arguments.t::["new_const"] α6 in
                  let* α8 : unit := std.io.stdio._print α7 in
                  M.alloc α8 in
                M.alloc tt in
              M.alloc tt
            else
              let* α0 : M.Val i32.t := M.alloc 5 in
              let* α1 : M.Val i32.t := BinOp.rem n α0 in
              let* α2 : M.Val i32.t := M.alloc 0 in
              let* α3 : M.Val bool.t := BinOp.eq α1 α2 in
              let* α4 : M.Val bool.t := use α3 in
              let* α5 := M.read α4 in
              if (α5 : bool) then
                let* _ : M.Val unit :=
                  let* _ : M.Val unit :=
                    let* α0 : M.Val (array (ref str.t)) :=
                      M.alloc [ mk_str "buzz
" ] in
                    let* α1 : ref (array (ref str.t)) := borrow α0 in
                    let* α2 : M.Val (array (ref str.t)) := deref α1 in
                    let* α3 : ref (array (ref str.t)) := borrow α2 in
                    let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
                    let* α5 : M.Val (ref (slice (ref str.t))) :=
                      pointer_coercion "Unsize" α4 in
                    let* α6 := M.read α5 in
                    let* α7 : core.fmt.Arguments.t :=
                      core.fmt.Arguments.t::["new_const"] α6 in
                    let* α8 : unit := std.io.stdio._print α7 in
                    M.alloc α8 in
                  M.alloc tt in
                M.alloc tt
              else
                let* _ : M.Val unit :=
                  let* _ : M.Val unit :=
                    let* α0 : M.Val (array (ref str.t)) :=
                      M.alloc [ mk_str ""; mk_str "
" ] in
                    let* α1 : ref (array (ref str.t)) := borrow α0 in
                    let* α2 : M.Val (array (ref str.t)) := deref α1 in
                    let* α3 : ref (array (ref str.t)) := borrow α2 in
                    let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
                    let* α5 : M.Val (ref (slice (ref str.t))) :=
                      pointer_coercion "Unsize" α4 in
                    let* α6 := M.read α5 in
                    let* α7 : ref i32.t := borrow n in
                    let* α8 : M.Val i32.t := deref α7 in
                    let* α9 : ref i32.t := borrow α8 in
                    let* α10 : core.fmt.rt.Argument.t :=
                      core.fmt.rt.Argument.t::["new_display"] α9 in
                    let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
                    let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
                      M.alloc [ α11 ] in
                    let* α13 : ref (array core.fmt.rt.Argument.t) :=
                      borrow α12 in
                    let* α14 : M.Val (array core.fmt.rt.Argument.t) :=
                      deref α13 in
                    let* α15 : ref (array core.fmt.rt.Argument.t) :=
                      borrow α14 in
                    let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                      M.alloc α15 in
                    let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                      pointer_coercion "Unsize" α16 in
                    let* α18 := M.read α17 in
                    let* α19 : core.fmt.Arguments.t :=
                      core.fmt.Arguments.t::["new_v1"] α6 α18 in
                    let* α20 : unit := std.io.stdio._print α19 in
                    M.alloc α20 in
                  M.alloc tt in
                M.alloc tt in
        let* _ : M.Val unit :=
          let* α0 : M.Val i32.t := M.alloc 1 in
          assign_op add n α0 in
        M.alloc tt
      else
        let* _ : M.Val unit :=
          let* α0 : M.Val never.t := Break in
          never_to_any α0 in
        let* α0 : M.Val unit := M.alloc tt in
        never_to_any α0)).
