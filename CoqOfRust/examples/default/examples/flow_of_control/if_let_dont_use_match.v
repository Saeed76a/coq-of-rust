(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Make `optional` of type `Option<i32>`
    let optional = Some(7);

    match optional {
        Some(i) => {
            println!("This is a really long string and `{:?}`", i);
            // ^ Needed 2 indentations just so we could destructure
            // `i` from the option.
        }
        _ => {}
        // ^ Required because `match` is exhaustive. Doesn't it seem
        // like wasted space?
    };
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* optional : M.Val (core.option.Option.t i32.t) :=
    M.alloc (core.option.Option.Some (Integer.of_Z 7)) in
  let* _ : M.Val unit :=
    let* α0 : core.option.Option.t i32.t := M.read optional in
    match α0 with
    | core.option.Option.Some i =>
      let* i := M.alloc i in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc
              [ mk_str "This is a really long string and `"; mk_str "`
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
          let* α2 : ref (slice (ref str.t)) :=
            M.read (pointer_coercion "Unsize" α1) in
          let* α3 : core.fmt.rt.Argument.t :=
            M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow i)) in
          let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
          let* α5 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4 ] in
          let* α6 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
            M.alloc (borrow α5) in
          let* α7 : ref (slice core.fmt.rt.Argument.t) :=
            M.read (pointer_coercion "Unsize" α6) in
          let* α8 : core.fmt.Arguments.t :=
            M.call (core.fmt.Arguments.t::["new_v1"] α2 α7) in
          let* α9 : unit := M.call (std.io.stdio._print α8) in
          M.alloc α9 in
        M.alloc tt in
      M.alloc tt
    | _ => M.alloc tt
    end in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
