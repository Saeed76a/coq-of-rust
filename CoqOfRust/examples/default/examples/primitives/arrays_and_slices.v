(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn analyze_slice(slice: &[i32]) {
    println!("first element of the slice: {}", slice[0]);
    println!("the slice has {} elements", slice.len());
}
*)
Definition analyze_slice (slice : ref (slice i32.t)) : M unit :=
  let* slice : M.Val (ref (slice i32.t)) := M.alloc slice in
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "first element of the slice: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (slice i32.t) := M.read slice in
        let* α8 : M.Val (slice i32.t) := deref α7 in
        let* α9 : ref i32.t := borrow α8[M.alloc 0] in
        let* α10 : M.Val i32.t := deref α9 in
        let* α11 : ref i32.t := borrow α10 in
        let* α12 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α11 in
        let* α13 : M.Val core.fmt.rt.Argument.t := M.alloc α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α13 ] in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (array core.fmt.rt.Argument.t) := deref α15 in
        let* α17 : ref (array core.fmt.rt.Argument.t) := borrow α16 in
        let* α18 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α17 in
        let* α19 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α18 in
        let* α20 : ref (slice core.fmt.rt.Argument.t) := M.read α19 in
        let* α21 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α20 in
        let* α22 : unit := std.io.stdio._print α21 in
        M.alloc α22 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "the slice has "; mk_str " elements
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (slice i32.t) := M.read slice in
        let* α8 : M.Val (slice i32.t) := deref α7 in
        let* α9 : ref (slice i32.t) := borrow α8 in
        let* α10 : usize.t := (slice i32.t)::["len"] α9 in
        let* α11 : M.Val usize.t := M.alloc α10 in
        let* α12 : ref usize.t := borrow α11 in
        let* α13 : M.Val usize.t := deref α12 in
        let* α14 : ref usize.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α16 ] in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) := deref α18 in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α20 in
        let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α21 in
        let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
        let* α24 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α23 in
        let* α25 : unit := std.io.stdio._print α24 in
        M.alloc α25 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).

(*
fn main() {
    // Fixed-size array (type signature is superfluous)
    let xs: [i32; 5] = [1, 2, 3, 4, 5];

    // All elements can be initialized to the same value
    let ys: [i32; 500] = [0; 500];

    // Indexing starts at 0
    println!("first element of the array: {}", xs[0]);
    println!("second element of the array: {}", xs[1]);

    // `len` returns the count of elements in the array
    println!("number of elements in array: {}", xs.len());

    // Arrays are stack allocated
    println!("array occupies {} bytes", mem::size_of_val(&xs));

    // Arrays can be automatically borrowed as slices
    println!("borrow the whole array as a slice");
    analyze_slice(&xs);

    // Slices can point to a section of an array
    // They are of the form [starting_index..ending_index]
    // starting_index is the first position in the slice
    // ending_index is one more than the last position in the slice
    println!("borrow a section of the array as a slice");
    analyze_slice(&ys[1 .. 4]);

    // Example of empty slice `&[]`
    let empty_array: [u32; 0] = [];
    assert_eq!(&empty_array, &[]);
    assert_eq!(&empty_array, &[][..]); // same but more verbose

    // Arrays can be safely accessed using `.get`, which returns an
    // `Option`. This can be matched as shown below, or used with
    // `.expect()` if you would like the program to exit with a nice
    // message instead of happily continue.
    for i in 0..xs.len() + 1 { // OOPS, one element too far
        match xs.get(i) {
            Some(xval) => println!("{}: {}", i, xval),
            None => println!("Slow down! {} is too far!", i),
        }
    }

    // Out of bound indexing causes runtime error
    //println!("{}", xs[5]);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* xs : M.Val (array i32.t) :=
      let* α0 : M.Val i32.t := M.alloc 1 in
      let* α1 : M.Val i32.t := M.alloc 2 in
      let* α2 : M.Val i32.t := M.alloc 3 in
      let* α3 : M.Val i32.t := M.alloc 4 in
      let* α4 : M.Val i32.t := M.alloc 5 in
      M.alloc [ α0; α1; α2; α3; α4 ] in
    let* ys : M.Val (array i32.t) :=
      let* α0 : M.Val i32.t := M.alloc 0 in
      let* α1 : M.Val (array i32.t) := repeat α0 500 in
      M.copy α1 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "first element of the array: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref i32.t := borrow xs[M.alloc 0] in
        let* α8 : M.Val i32.t := deref α7 in
        let* α9 : ref i32.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
        let* α19 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α18 in
        let* α20 : unit := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "second element of the array: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref i32.t := borrow xs[M.alloc 1] in
        let* α8 : M.Val i32.t := deref α7 in
        let* α9 : ref i32.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
        let* α19 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α18 in
        let* α20 : unit := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "number of elements in array: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (array i32.t) := borrow xs in
        let* α8 : M.Val (ref (array i32.t)) := M.alloc α7 in
        let* α9 : M.Val (ref (slice i32.t)) := pointer_coercion "Unsize" α8 in
        let* α10 : ref (slice i32.t) := M.read α9 in
        let* α11 : usize.t := (slice i32.t)::["len"] α10 in
        let* α12 : M.Val usize.t := M.alloc α11 in
        let* α13 : ref usize.t := borrow α12 in
        let* α14 : M.Val usize.t := deref α13 in
        let* α15 : ref usize.t := borrow α14 in
        let* α16 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α15 in
        let* α17 : M.Val core.fmt.rt.Argument.t := M.alloc α16 in
        let* α18 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α17 ] in
        let* α19 : ref (array core.fmt.rt.Argument.t) := borrow α18 in
        let* α20 : M.Val (array core.fmt.rt.Argument.t) := deref α19 in
        let* α21 : ref (array core.fmt.rt.Argument.t) := borrow α20 in
        let* α22 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α21 in
        let* α23 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α22 in
        let* α24 : ref (slice core.fmt.rt.Argument.t) := M.read α23 in
        let* α25 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α24 in
        let* α26 : unit := std.io.stdio._print α25 in
        M.alloc α26 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "array occupies "; mk_str " bytes
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (array i32.t) := borrow xs in
        let* α8 : M.Val (array i32.t) := deref α7 in
        let* α9 : ref (array i32.t) := borrow α8 in
        let* α10 : usize.t := core.mem.size_of_val α9 in
        let* α11 : M.Val usize.t := M.alloc α10 in
        let* α12 : ref usize.t := borrow α11 in
        let* α13 : M.Val usize.t := deref α12 in
        let* α14 : ref usize.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α16 ] in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) := deref α18 in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α20 in
        let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α21 in
        let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
        let* α24 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α23 in
        let* α25 : unit := std.io.stdio._print α24 in
        M.alloc α25 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "borrow the whole array as a slice
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_const"] α6 in
        let* α8 : unit := std.io.stdio._print α7 in
        M.alloc α8 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : ref (array i32.t) := borrow xs in
      let* α1 : M.Val (array i32.t) := deref α0 in
      let* α2 : ref (array i32.t) := borrow α1 in
      let* α3 : M.Val (ref (array i32.t)) := M.alloc α2 in
      let* α4 : M.Val (ref (slice i32.t)) := pointer_coercion "Unsize" α3 in
      let* α5 : ref (slice i32.t) := M.read α4 in
      let* α6 : unit := arrays_and_slices.analyze_slice α5 in
      M.alloc α6 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "borrow a section of the array as a slice
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_const"] α6 in
        let* α8 : unit := std.io.stdio._print α7 in
        M.alloc α8 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : ref (array i32.t) := borrow ys in
      let* α1 : M.Val usize.t := M.alloc 1 in
      let* α2 : usize.t := M.read α1 in
      let* α3 : M.Val usize.t := M.alloc 4 in
      let* α4 : usize.t := M.read α3 in
      let* α5 : ref (slice i32.t) :=
        (core.ops.index.Index.index
            (Self := array i32.t)
            (Trait := ltac:(refine _)))
          α0
          {| core.ops.range.Range.start := α2; core.ops.range.Range.end := α4;
          |} in
      let* α6 : M.Val (slice i32.t) := deref α5 in
      let* α7 : ref (slice i32.t) := borrow α6 in
      let* α8 : M.Val (slice i32.t) := deref α7 in
      let* α9 : ref (slice i32.t) := borrow α8 in
      let* α10 : unit := arrays_and_slices.analyze_slice α9 in
      M.alloc α10 in
    let* empty_array : M.Val (array u32.t) := M.alloc [ ] in
    let* _ : M.Val unit :=
      let* α0 : ref (array u32.t) := borrow empty_array in
      let* α1 : M.Val (ref (array u32.t)) := M.alloc α0 in
      let* α2 : ref (ref (array u32.t)) := borrow α1 in
      let* α3 : M.Val (array u32.t) := M.alloc [ ] in
      let* α4 : ref (array u32.t) := borrow α3 in
      let* α5 : M.Val (ref (array u32.t)) := M.alloc α4 in
      let* α6 : ref (ref (array u32.t)) := borrow α5 in
      let* α7 : M.Val ((ref (ref (array u32.t))) * (ref (ref (array u32.t)))) :=
        M.alloc (α2, α6) in
      let* α8 := M.read α7 in
      match α8 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ref (ref (array u32.t)) := M.read left_val in
        let* α1 : M.Val (ref (array u32.t)) := deref α0 in
        let* α2 : ref (ref (array u32.t)) := borrow α1 in
        let* α3 : ref (ref (array u32.t)) := M.read right_val in
        let* α4 : M.Val (ref (array u32.t)) := deref α3 in
        let* α5 : ref (ref (array u32.t)) := borrow α4 in
        let* α6 : bool.t :=
          (core.cmp.PartialEq.eq
              (Self := ref (array u32.t))
              (Trait := ltac:(refine _)))
            α2
            α5 in
        let* α7 : M.Val bool.t := M.alloc α6 in
        let* α8 : M.Val bool.t := UnOp.not α7 in
        let* α9 : M.Val bool.t := use α8 in
        let* α10 : bool.t := M.read α9 in
        if (α10 : bool) then
          let* kind : M.Val core.panicking.AssertKind.t :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : M.Val never.t :=
            let* α0 : core.panicking.AssertKind.t := M.read kind in
            let* α1 : ref (ref (array u32.t)) := M.read left_val in
            let* α2 : M.Val (ref (array u32.t)) := deref α1 in
            let* α3 : ref (ref (array u32.t)) := borrow α2 in
            let* α4 : M.Val (ref (array u32.t)) := deref α3 in
            let* α5 : ref (ref (array u32.t)) := borrow α4 in
            let* α6 : ref (ref (array u32.t)) := M.read right_val in
            let* α7 : M.Val (ref (array u32.t)) := deref α6 in
            let* α8 : ref (ref (array u32.t)) := borrow α7 in
            let* α9 : M.Val (ref (array u32.t)) := deref α8 in
            let* α10 : ref (ref (array u32.t)) := borrow α9 in
            let* α11 : never.t :=
              core.panicking.assert_failed α0 α5 α10 core.option.Option.None in
            M.alloc α11 in
          let* α0 : M.Val unit := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* _ : M.Val unit :=
      let* α0 : ref (array u32.t) := borrow empty_array in
      let* α1 : M.Val (ref (array u32.t)) := M.alloc α0 in
      let* α2 : ref (ref (array u32.t)) := borrow α1 in
      let* α3 : M.Val (array u32.t) := M.alloc [ ] in
      let* α4 : ref (array u32.t) := borrow α3 in
      let* α5 : ref (slice u32.t) :=
        (core.ops.index.Index.index
            (Self := array u32.t)
            (Trait := ltac:(refine _)))
          α4
          core.ops.range.RangeFull.Build_t in
      let* α6 : M.Val (slice u32.t) := deref α5 in
      let* α7 : ref (slice u32.t) := borrow α6 in
      let* α8 : M.Val (ref (slice u32.t)) := M.alloc α7 in
      let* α9 : ref (ref (slice u32.t)) := borrow α8 in
      let* α10 :
          M.Val ((ref (ref (array u32.t))) * (ref (ref (slice u32.t)))) :=
        M.alloc (α2, α9) in
      let* α11 := M.read α10 in
      match α11 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ref (ref (array u32.t)) := M.read left_val in
        let* α1 : M.Val (ref (array u32.t)) := deref α0 in
        let* α2 : ref (ref (array u32.t)) := borrow α1 in
        let* α3 : ref (ref (slice u32.t)) := M.read right_val in
        let* α4 : M.Val (ref (slice u32.t)) := deref α3 in
        let* α5 : ref (ref (slice u32.t)) := borrow α4 in
        let* α6 : bool.t :=
          (core.cmp.PartialEq.eq
              (Self := ref (array u32.t))
              (Trait := ltac:(refine _)))
            α2
            α5 in
        let* α7 : M.Val bool.t := M.alloc α6 in
        let* α8 : M.Val bool.t := UnOp.not α7 in
        let* α9 : M.Val bool.t := use α8 in
        let* α10 : bool.t := M.read α9 in
        if (α10 : bool) then
          let* kind : M.Val core.panicking.AssertKind.t :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : M.Val never.t :=
            let* α0 : core.panicking.AssertKind.t := M.read kind in
            let* α1 : ref (ref (array u32.t)) := M.read left_val in
            let* α2 : M.Val (ref (array u32.t)) := deref α1 in
            let* α3 : ref (ref (array u32.t)) := borrow α2 in
            let* α4 : M.Val (ref (array u32.t)) := deref α3 in
            let* α5 : ref (ref (array u32.t)) := borrow α4 in
            let* α6 : ref (ref (slice u32.t)) := M.read right_val in
            let* α7 : M.Val (ref (slice u32.t)) := deref α6 in
            let* α8 : ref (ref (slice u32.t)) := borrow α7 in
            let* α9 : M.Val (ref (slice u32.t)) := deref α8 in
            let* α10 : ref (ref (slice u32.t)) := borrow α9 in
            let* α11 : never.t :=
              core.panicking.assert_failed α0 α5 α10 core.option.Option.None in
            M.alloc α11 in
          let* α0 : M.Val unit := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* α0 : M.Val usize.t := M.alloc 0 in
    let* α1 : usize.t := M.read α0 in
    let* α2 : ref (array i32.t) := borrow xs in
    let* α3 : M.Val (ref (array i32.t)) := M.alloc α2 in
    let* α4 : M.Val (ref (slice i32.t)) := pointer_coercion "Unsize" α3 in
    let* α5 : ref (slice i32.t) := M.read α4 in
    let* α6 : usize.t := (slice i32.t)::["len"] α5 in
    let* α7 : M.Val usize.t := M.alloc α6 in
    let* α8 : M.Val usize.t := M.alloc 1 in
    let* α9 : M.Val usize.t := BinOp.add α7 α8 in
    let* α10 : usize.t := M.read α9 in
    let* α11 : core.ops.range.Range.t usize.t :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.Range.t usize.t)
          (Trait := ltac:(refine _)))
        {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α10;
        |} in
    let* α12 : M.Val (core.ops.range.Range.t usize.t) := M.alloc α11 in
    let* α13 := M.read α12 in
    let* α14 : M.Val unit :=
      match α13 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : M.Val unit :=
            let* α0 : mut_ref (core.ops.range.Range.t usize.t) :=
              borrow_mut iter in
            let* α1 : M.Val (core.ops.range.Range.t usize.t) := deref α0 in
            let* α2 : mut_ref (core.ops.range.Range.t usize.t) :=
              borrow_mut α1 in
            let* α3 : core.option.Option.t usize.t :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.Range.t usize.t)
                  (Trait := ltac:(refine _)))
                α2 in
            let* α4 : M.Val (core.option.Option.t usize.t) := M.alloc α3 in
            let* α5 := M.read α4 in
            match α5 with
            | core.option.Option.None  =>
              let* α0 : M.Val never.t := Break in
              never_to_any α0
            | core.option.Option.Some i =>
              let* i := M.alloc i in
              let* α0 : ref (array i32.t) := borrow xs in
              let* α1 : M.Val (ref (array i32.t)) := M.alloc α0 in
              let* α2 : M.Val (ref (slice i32.t)) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : ref (slice i32.t) := M.read α2 in
              let* α4 : usize.t := M.read i in
              let* α5 : core.option.Option.t (ref i32.t) :=
                (slice i32.t)::["get"] α3 α4 in
              let* α6 : M.Val (core.option.Option.t (ref i32.t)) :=
                M.alloc α5 in
              let* α7 := M.read α6 in
              match α7 with
              | core.option.Option.Some xval =>
                let* xval := M.alloc xval in
                let* _ : M.Val unit :=
                  let* α0 : M.Val (array (ref str.t)) :=
                    M.alloc [ mk_str ""; mk_str ": "; mk_str "
" ] in
                  let* α1 : ref (array (ref str.t)) := borrow α0 in
                  let* α2 : M.Val (array (ref str.t)) := deref α1 in
                  let* α3 : ref (array (ref str.t)) := borrow α2 in
                  let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
                  let* α5 : M.Val (ref (slice (ref str.t))) :=
                    pointer_coercion "Unsize" α4 in
                  let* α6 : ref (slice (ref str.t)) := M.read α5 in
                  let* α7 : ref usize.t := borrow i in
                  let* α8 : M.Val usize.t := deref α7 in
                  let* α9 : ref usize.t := borrow α8 in
                  let* α10 : core.fmt.rt.Argument.t :=
                    core.fmt.rt.Argument.t::["new_display"] α9 in
                  let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
                  let* α12 : ref (ref i32.t) := borrow xval in
                  let* α13 : M.Val (ref i32.t) := deref α12 in
                  let* α14 : ref (ref i32.t) := borrow α13 in
                  let* α15 : core.fmt.rt.Argument.t :=
                    core.fmt.rt.Argument.t::["new_display"] α14 in
                  let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
                  let* α17 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α11; α16 ] in
                  let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
                  let* α19 : M.Val (array core.fmt.rt.Argument.t) :=
                    deref α18 in
                  let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
                  let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                    M.alloc α20 in
                  let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                    pointer_coercion "Unsize" α21 in
                  let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
                  let* α24 : core.fmt.Arguments.t :=
                    core.fmt.Arguments.t::["new_v1"] α6 α23 in
                  let* α25 : unit := std.io.stdio._print α24 in
                  M.alloc α25 in
                M.alloc tt
              | core.option.Option.None  =>
                let* _ : M.Val unit :=
                  let* α0 : M.Val (array (ref str.t)) :=
                    M.alloc [ mk_str "Slow down! "; mk_str " is too far!
" ] in
                  let* α1 : ref (array (ref str.t)) := borrow α0 in
                  let* α2 : M.Val (array (ref str.t)) := deref α1 in
                  let* α3 : ref (array (ref str.t)) := borrow α2 in
                  let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
                  let* α5 : M.Val (ref (slice (ref str.t))) :=
                    pointer_coercion "Unsize" α4 in
                  let* α6 : ref (slice (ref str.t)) := M.read α5 in
                  let* α7 : ref usize.t := borrow i in
                  let* α8 : M.Val usize.t := deref α7 in
                  let* α9 : ref usize.t := borrow α8 in
                  let* α10 : core.fmt.rt.Argument.t :=
                    core.fmt.rt.Argument.t::["new_display"] α9 in
                  let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
                  let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α11 ] in
                  let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
                  let* α14 : M.Val (array core.fmt.rt.Argument.t) :=
                    deref α13 in
                  let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
                  let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                    M.alloc α15 in
                  let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                    pointer_coercion "Unsize" α16 in
                  let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
                  let* α19 : core.fmt.Arguments.t :=
                    core.fmt.Arguments.t::["new_v1"] α6 α18 in
                  let* α20 : unit := std.io.stdio._print α19 in
                  M.alloc α20 in
                M.alloc tt
              end
            end in
          M.alloc tt)
      end in
    let* α0 : M.Val unit := use α14 in
    M.read α0).
