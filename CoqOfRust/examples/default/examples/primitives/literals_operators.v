(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Integer addition
    println!("1 + 2 = {}", 1u32 + 2);

    // Integer subtraction
    println!("1 - 2 = {}", 1i32 - 2);
    // TODO ^ Try changing `1i32` to `1u32` to see why the type is important

    // Short-circuiting boolean logic
    println!("true AND false is {}", true && false);
    println!("true OR false is {}", true || false);
    println!("NOT true is {}", !true);

    // Bitwise operations
    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
    println!("1 << 5 is {}", 1u32 << 5);
    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);

    // Use underscores to improve readability!
    println!("One million is written as {}", 1_000_000u32);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "1 + 2 = "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val u32.t := M.alloc 1 in
        let* α5 : M.Val u32.t := M.alloc 2 in
        let* α6 : M.Val u32.t := BinOp.add α4 α5 in
        let* α7 : M.Val (ref u32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_display"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 := core.fmt.Arguments.t::["new_v1"] α3 α14 in
        let* α16 := std.io.stdio._print α15 in
        M.alloc α16 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "1 - 2 = "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val i32.t := M.alloc 1 in
        let* α5 : M.Val i32.t := M.alloc 2 in
        let* α6 : M.Val i32.t := BinOp.sub α4 α5 in
        let* α7 : M.Val (ref i32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_display"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 := core.fmt.Arguments.t::["new_v1"] α3 α14 in
        let* α16 := std.io.stdio._print α15 in
        M.alloc α16 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "true AND false is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val bool.t := M.alloc true in
        let* α5 : M.Val bool.t := M.alloc false in
        let* α6 : M.Val bool.t := BinOp.and α4 α5 in
        let* α7 : M.Val (ref bool.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_display"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 := core.fmt.Arguments.t::["new_v1"] α3 α14 in
        let* α16 := std.io.stdio._print α15 in
        M.alloc α16 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "true OR false is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val bool.t := M.alloc true in
        let* α5 : M.Val bool.t := M.alloc false in
        let* α6 : M.Val bool.t := BinOp.or α4 α5 in
        let* α7 : M.Val (ref bool.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_display"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 := core.fmt.Arguments.t::["new_v1"] α3 α14 in
        let* α16 := std.io.stdio._print α15 in
        M.alloc α16 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "NOT true is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val bool.t := M.alloc true in
        let* α5 : M.Val bool.t := UnOp.not α4 in
        let* α6 : M.Val (ref bool.t) := borrow α5 in
        let* α7 := M.read α6 in
        let* α8 := core.fmt.rt.Argument.t::["new_display"] α7 in
        let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
        let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α9 ] in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 := M.read α12 in
        let* α14 := core.fmt.Arguments.t::["new_v1"] α3 α13 in
        let* α15 := std.io.stdio._print α14 in
        M.alloc α15 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "0011 AND 0101 is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val u32.t := M.alloc 3 in
        let* α5 : M.Val u32.t := M.alloc 5 in
        let* α6 : M.Val u32.t := BinOp.bit_and α4 α5 in
        let* α7 : M.Val (ref u32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_binary"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 : M.Val usize.t := M.alloc 0 in
        let* α16 := M.read α15 in
        let* α17 : M.Val char.t := M.alloc " "%char in
        let* α18 := M.read α17 in
        let* α19 : M.Val u32.t := M.alloc 8 in
        let* α20 := M.read α19 in
        let* α21 : M.Val usize.t := M.alloc 4 in
        let* α22 := M.read α21 in
        let* α23 := "unimplemented parent_kind" α22 in
        let* α24 :=
          core.fmt.rt.Placeholder.t::["new"]
            α16
            α18
            core.fmt.rt.Alignment.Unknown
            α20
            core.fmt.rt.Count.Implied
            α23 in
        let* α25 : M.Val core.fmt.rt.Placeholder.t := M.alloc α24 in
        let* α26 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α25 ] in
        let* α27 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          borrow α26 in
        let* α28 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α27 in
        let* α29 := M.read α28 in
        let* α0 := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α30 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α31 := M.read α30 in
        let* α32 := core.fmt.Arguments.t::["new_v1_formatted"] α3 α14 α29 α31 in
        let* α33 := std.io.stdio._print α32 in
        M.alloc α33 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "0011 OR 0101 is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val u32.t := M.alloc 3 in
        let* α5 : M.Val u32.t := M.alloc 5 in
        let* α6 : M.Val u32.t := BinOp.bit_or α4 α5 in
        let* α7 : M.Val (ref u32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_binary"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 : M.Val usize.t := M.alloc 0 in
        let* α16 := M.read α15 in
        let* α17 : M.Val char.t := M.alloc " "%char in
        let* α18 := M.read α17 in
        let* α19 : M.Val u32.t := M.alloc 8 in
        let* α20 := M.read α19 in
        let* α21 : M.Val usize.t := M.alloc 4 in
        let* α22 := M.read α21 in
        let* α23 := "unimplemented parent_kind" α22 in
        let* α24 :=
          core.fmt.rt.Placeholder.t::["new"]
            α16
            α18
            core.fmt.rt.Alignment.Unknown
            α20
            core.fmt.rt.Count.Implied
            α23 in
        let* α25 : M.Val core.fmt.rt.Placeholder.t := M.alloc α24 in
        let* α26 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α25 ] in
        let* α27 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          borrow α26 in
        let* α28 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α27 in
        let* α29 := M.read α28 in
        let* α0 := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α30 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α31 := M.read α30 in
        let* α32 := core.fmt.Arguments.t::["new_v1_formatted"] α3 α14 α29 α31 in
        let* α33 := std.io.stdio._print α32 in
        M.alloc α33 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "0011 XOR 0101 is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val u32.t := M.alloc 3 in
        let* α5 : M.Val u32.t := M.alloc 5 in
        let* α6 : M.Val u32.t := BinOp.bit_xor α4 α5 in
        let* α7 : M.Val (ref u32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_binary"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 : M.Val usize.t := M.alloc 0 in
        let* α16 := M.read α15 in
        let* α17 : M.Val char.t := M.alloc " "%char in
        let* α18 := M.read α17 in
        let* α19 : M.Val u32.t := M.alloc 8 in
        let* α20 := M.read α19 in
        let* α21 : M.Val usize.t := M.alloc 4 in
        let* α22 := M.read α21 in
        let* α23 := "unimplemented parent_kind" α22 in
        let* α24 :=
          core.fmt.rt.Placeholder.t::["new"]
            α16
            α18
            core.fmt.rt.Alignment.Unknown
            α20
            core.fmt.rt.Count.Implied
            α23 in
        let* α25 : M.Val core.fmt.rt.Placeholder.t := M.alloc α24 in
        let* α26 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α25 ] in
        let* α27 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          borrow α26 in
        let* α28 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α27 in
        let* α29 := M.read α28 in
        let* α0 := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α30 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α31 := M.read α30 in
        let* α32 := core.fmt.Arguments.t::["new_v1_formatted"] α3 α14 α29 α31 in
        let* α33 := std.io.stdio._print α32 in
        M.alloc α33 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "1 << 5 is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val u32.t := M.alloc 1 in
        let* α5 : M.Val i32.t := M.alloc 5 in
        let* α6 : M.Val u32.t := BinOp.shl α4 α5 in
        let* α7 : M.Val (ref u32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_display"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 := core.fmt.Arguments.t::["new_v1"] α3 α14 in
        let* α16 := std.io.stdio._print α15 in
        M.alloc α16 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "0x80 >> 2 is 0x"; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val u32.t := M.alloc 128 in
        let* α5 : M.Val i32.t := M.alloc 2 in
        let* α6 : M.Val u32.t := BinOp.shr α4 α5 in
        let* α7 : M.Val (ref u32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_lower_hex"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 := core.fmt.Arguments.t::["new_v1"] α3 α14 in
        let* α16 := std.io.stdio._print α15 in
        M.alloc α16 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "One million is written as 1000000
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
        let* α5 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α4 in
        let* α6 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α5 in
        let* α7 := M.read α6 in
        let* α8 := core.fmt.Arguments.t::["new_v1"] α3 α7 in
        let* α9 := std.io.stdio._print α8 in
        M.alloc α9 in
      M.alloc tt in
    M.alloc tt).
