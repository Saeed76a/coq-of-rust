(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Integer addition
    println!("1 + 2 = {}", 1u32 + 2);

    // Integer subtraction
    println!("1 - 2 = {}", 1i32 - 2);
    // TODO ^ Try changing `1i32` to `1u32` to see why the type is important

    // Short-circuiting boolean logic
    println!("true AND false is {}", true && false);
    println!("true OR false is {}", true || false);
    println!("NOT true is {}", !true);

    // Bitwise operations
    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
    println!("1 << 5 is {}", 1u32 << 5);
    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);

    // Use underscores to improve readability!
    println!("One million is written as {}", 1_000_000u32);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "1 + 2 = "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val u32.t := M.alloc 1 in
      let* α6 : M.Val u32.t := M.alloc 2 in
      let* α7 : M.Val u32.t := BinOp.add α5 α6 in
      let* α8 : ref u32.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α15 in
      let* α17 : unit := std.io.stdio._print α16 in
      M.alloc α17 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "1 - 2 = "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val i32.t := M.alloc 1 in
      let* α6 : M.Val i32.t := M.alloc 2 in
      let* α7 : M.Val i32.t := BinOp.sub α5 α6 in
      let* α8 : ref i32.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α15 in
      let* α17 : unit := std.io.stdio._print α16 in
      M.alloc α17 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "true AND false is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val bool.t := M.alloc true in
      let* α6 : M.Val bool.t := M.alloc false in
      let* α7 : M.Val bool.t := BinOp.and α5 α6 in
      let* α8 : ref bool.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α15 in
      let* α17 : unit := std.io.stdio._print α16 in
      M.alloc α17 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "true OR false is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val bool.t := M.alloc true in
      let* α6 : M.Val bool.t := M.alloc false in
      let* α7 : M.Val bool.t := BinOp.or α5 α6 in
      let* α8 : ref bool.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α15 in
      let* α17 : unit := std.io.stdio._print α16 in
      M.alloc α17 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "NOT true is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val bool.t := M.alloc true in
      let* α6 : M.Val bool.t := UnOp.not α5 in
      let* α7 : ref bool.t := borrow α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α7 in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α9 ] in
      let* α11 : ref (array core.fmt.rt.Argument.t) := borrow α10 in
      let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α11 in
      let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α12 in
      let* α14 : ref (slice core.fmt.rt.Argument.t) := M.read α13 in
      let* α15 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α14 in
      let* α16 : unit := std.io.stdio._print α15 in
      M.alloc α16 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "0011 AND 0101 is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val u32.t := M.alloc 3 in
      let* α6 : M.Val u32.t := M.alloc 5 in
      let* α7 : M.Val u32.t := BinOp.bit_and α5 α6 in
      let* α8 : ref u32.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_binary"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : M.Val usize.t := M.alloc 0 in
      let* α17 : usize.t := M.read α16 in
      let* α18 : M.Val char.t := M.alloc " "%char in
      let* α19 : char.t := M.read α18 in
      let* α20 : M.Val u32.t := M.alloc 8 in
      let* α21 : u32.t := M.read α20 in
      let* α22 : M.Val usize.t := M.alloc 4 in
      let* α23 : usize.t := M.read α22 in
      let* α24 : core.fmt.rt.Count.t := "unimplemented parent_kind" α23 in
      let* α25 : core.fmt.rt.Placeholder.t :=
        core.fmt.rt.Placeholder.t::["new"]
          α17
          α19
          core.fmt.rt.Alignment.Unknown
          α21
          core.fmt.rt.Count.Implied
          α24 in
      let* α26 : M.Val core.fmt.rt.Placeholder.t := M.alloc α25 in
      let* α27 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α26 ] in
      let* α28 : ref (array core.fmt.rt.Placeholder.t) := borrow α27 in
      let* α29 : M.Val (ref (array core.fmt.rt.Placeholder.t)) := M.alloc α28 in
      let* α30 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
        pointer_coercion "Unsize" α29 in
      let* α31 : ref (slice core.fmt.rt.Placeholder.t) := M.read α30 in
      let* α32 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
      let* α33 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1_formatted"] α4 α15 α31 α32 in
      let* α34 : unit := std.io.stdio._print α33 in
      M.alloc α34 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "0011 OR 0101 is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val u32.t := M.alloc 3 in
      let* α6 : M.Val u32.t := M.alloc 5 in
      let* α7 : M.Val u32.t := BinOp.bit_or α5 α6 in
      let* α8 : ref u32.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_binary"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : M.Val usize.t := M.alloc 0 in
      let* α17 : usize.t := M.read α16 in
      let* α18 : M.Val char.t := M.alloc " "%char in
      let* α19 : char.t := M.read α18 in
      let* α20 : M.Val u32.t := M.alloc 8 in
      let* α21 : u32.t := M.read α20 in
      let* α22 : M.Val usize.t := M.alloc 4 in
      let* α23 : usize.t := M.read α22 in
      let* α24 : core.fmt.rt.Count.t := "unimplemented parent_kind" α23 in
      let* α25 : core.fmt.rt.Placeholder.t :=
        core.fmt.rt.Placeholder.t::["new"]
          α17
          α19
          core.fmt.rt.Alignment.Unknown
          α21
          core.fmt.rt.Count.Implied
          α24 in
      let* α26 : M.Val core.fmt.rt.Placeholder.t := M.alloc α25 in
      let* α27 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α26 ] in
      let* α28 : ref (array core.fmt.rt.Placeholder.t) := borrow α27 in
      let* α29 : M.Val (ref (array core.fmt.rt.Placeholder.t)) := M.alloc α28 in
      let* α30 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
        pointer_coercion "Unsize" α29 in
      let* α31 : ref (slice core.fmt.rt.Placeholder.t) := M.read α30 in
      let* α32 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
      let* α33 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1_formatted"] α4 α15 α31 α32 in
      let* α34 : unit := std.io.stdio._print α33 in
      M.alloc α34 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "0011 XOR 0101 is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val u32.t := M.alloc 3 in
      let* α6 : M.Val u32.t := M.alloc 5 in
      let* α7 : M.Val u32.t := BinOp.bit_xor α5 α6 in
      let* α8 : ref u32.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_binary"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : M.Val usize.t := M.alloc 0 in
      let* α17 : usize.t := M.read α16 in
      let* α18 : M.Val char.t := M.alloc " "%char in
      let* α19 : char.t := M.read α18 in
      let* α20 : M.Val u32.t := M.alloc 8 in
      let* α21 : u32.t := M.read α20 in
      let* α22 : M.Val usize.t := M.alloc 4 in
      let* α23 : usize.t := M.read α22 in
      let* α24 : core.fmt.rt.Count.t := "unimplemented parent_kind" α23 in
      let* α25 : core.fmt.rt.Placeholder.t :=
        core.fmt.rt.Placeholder.t::["new"]
          α17
          α19
          core.fmt.rt.Alignment.Unknown
          α21
          core.fmt.rt.Count.Implied
          α24 in
      let* α26 : M.Val core.fmt.rt.Placeholder.t := M.alloc α25 in
      let* α27 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α26 ] in
      let* α28 : ref (array core.fmt.rt.Placeholder.t) := borrow α27 in
      let* α29 : M.Val (ref (array core.fmt.rt.Placeholder.t)) := M.alloc α28 in
      let* α30 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
        pointer_coercion "Unsize" α29 in
      let* α31 : ref (slice core.fmt.rt.Placeholder.t) := M.read α30 in
      let* α32 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
      let* α33 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1_formatted"] α4 α15 α31 α32 in
      let* α34 : unit := std.io.stdio._print α33 in
      M.alloc α34 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "1 << 5 is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val u32.t := M.alloc 1 in
      let* α6 : M.Val i32.t := M.alloc 5 in
      let* α7 : M.Val u32.t := BinOp.shl α5 α6 in
      let* α8 : ref u32.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α15 in
      let* α17 : unit := std.io.stdio._print α16 in
      M.alloc α17 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "0x80 >> 2 is 0x"; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val u32.t := M.alloc 128 in
      let* α6 : M.Val i32.t := M.alloc 2 in
      let* α7 : M.Val u32.t := BinOp.shr α5 α6 in
      let* α8 : ref u32.t := borrow α7 in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_lower_hex"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
      let* α12 : ref (array core.fmt.rt.Argument.t) := borrow α11 in
      let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α12 in
      let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α13 in
      let* α15 : ref (slice core.fmt.rt.Argument.t) := M.read α14 in
      let* α16 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α15 in
      let* α17 : unit := std.io.stdio._print α16 in
      M.alloc α17 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "One million is written as 1000000
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
      let* α6 : ref (array core.fmt.rt.Argument.t) := borrow α5 in
      let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α6 in
      let* α8 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α7 in
      let* α9 : ref (slice core.fmt.rt.Argument.t) := M.read α8 in
      let* α10 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α9 in
      let* α11 : unit := std.io.stdio._print α10 in
      M.alloc α11 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
