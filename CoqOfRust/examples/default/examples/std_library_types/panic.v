(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn division(dividend: i32, divisor: i32) -> i32 {
    if divisor == 0 {
        // Division by zero triggers a panic
        panic!("division by zero");
    } else {
        dividend / divisor
    }
}
*)
Definition division
    (dividend : M.Val i32.t)
    (divisor : M.Val i32.t)
    : M i32.t :=
  M.function_body
    (let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
    let* α1 : ltac:(refine (M.Val bool.t)) := BinOp.eq divisor α0 in
    let* α2 : ltac:(refine (M.Val bool.t)) := use α1 in
    let* α3 := M.read α2 in
    if (α3 : bool) then
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 := std.panicking.begin_panic (mk_str "division by zero") in
        let* α1 : ltac:(refine (M.Val never.t)) := M.alloc α0 in
        never_to_any α1 in
      let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
      never_to_any α0
    else
      BinOp.div dividend divisor).

(*
fn main() {
    // Heap allocated integer
    let _x = Box::new(0i32);

    // This operation will trigger a task failure
    division(3, 0);

    println!("This point won't be reached!");

    // `_x` should get destroyed at this point
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _x :
        ltac:(refine (M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
      let* α1 := (alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"] α0 in
      M.alloc α1 in
    let* _ : ltac:(refine (M.Val i32.t)) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
      let* α2 := panic.division α0 α1 in
      M.alloc α2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "This point won't be reached!
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : ltac:(refine (M.Val core.fmt.Arguments.t)) := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    M.alloc tt).
