(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn call(number: &str) -> &str {
    match number {
        "798-1364" => {
            "We're sorry, the call cannot be completed as dialed. 
            Please hang up and try again."
        }
        "645-7689" => {
            "Hello, this is Mr. Awesome's Pizza. My name is Fred.
            What can I get for you today?"
        }
        _ => "Hi! Who is this again?",
    }
}
*)
Definition call (number : ref str.t) : M (ref str.t) :=
  let* number := M.alloc number in
  M.function_body
    (let* α0 := M.read number in
    match α0 with
    | _ =>
      let* α0 : M.Val str.t :=
        deref
          (mk_str
            "We're sorry, the call cannot be completed as dialed. 
            Please hang up and try again.") in
      borrow α0
    | _ =>
      let* α0 : M.Val str.t :=
        deref
          (mk_str
            "Hello, this is Mr. Awesome's Pizza. My name is Fred.
            What can I get for you today?") in
      borrow α0
    | _ =>
      let* α0 : M.Val str.t := deref (mk_str "Hi! Who is this again?") in
      borrow α0
    end).

(*
fn main() {
    let mut contacts = HashMap::new();

    contacts.insert("Daniel", "798-1364");
    contacts.insert("Ashley", "645-7689");
    contacts.insert("Katie", "435-8291");
    contacts.insert("Robert", "956-1745");

    // Takes a reference and returns Option<&V>
    match contacts.get(&"Daniel") {
        Some(&number) => println!("Calling Daniel: {}", call(number)),
        _ => println!("Don't have Daniel's number."),
    }

    // `HashMap::insert()` returns `None`
    // if the inserted value is new, `Some(value)` otherwise
    contacts.insert("Daniel", "164-6743");

    match contacts.get(&"Ashley") {
        Some(&number) => println!("Calling Ashley: {}", call(number)),
        _ => println!("Don't have Ashley's number."),
    }

    contacts.remove(&"Ashley");

    // `HashMap::iter()` returns an iterator that yields
    // (&'a key, &'a value) pairs in arbitrary order.
    for (contact, &number) in contacts.iter() {
        println!("Calling {}: {}", contact, call(number));
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* contacts :
        M.Val
          (std.collections.hash.map.HashMap.t
            (ref str.t)
            (ref str.t)
            std.collections.hash.map.RandomState.t) :=
      let* α0 :=
        (std.collections.hash.map.HashMap.t
            (ref str.t)
            (ref str.t)
            std.collections.hash.map.RandomState.t)::["new"] in
      M.alloc α0 in
    let* _ : M.Val (core.option.Option.t (ref str.t)) :=
      let* α0 :
          M.Val
            (mut_ref
              (std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.collections.hash.map.RandomState.t)) :=
        borrow_mut contacts in
      let* α1 := M.read α0 in
      let* α2 := M.read (mk_str "Daniel") in
      let* α3 := M.read (mk_str "798-1364") in
      let* α4 :=
        (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)::["insert"]
          α1
          α2
          α3 in
      M.alloc α4 in
    let* _ : M.Val (core.option.Option.t (ref str.t)) :=
      let* α0 :
          M.Val
            (mut_ref
              (std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.collections.hash.map.RandomState.t)) :=
        borrow_mut contacts in
      let* α1 := M.read α0 in
      let* α2 : M.Val str.t := deref (mk_str "Ashley") in
      let* α3 : M.Val (ref str.t) := borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : M.Val str.t := deref (mk_str "645-7689") in
      let* α6 : M.Val (ref str.t) := borrow α5 in
      let* α7 := M.read α6 in
      let* α8 :=
        (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)::["insert"]
          α1
          α4
          α7 in
      M.alloc α8 in
    let* _ : M.Val (core.option.Option.t (ref str.t)) :=
      let* α0 :
          M.Val
            (mut_ref
              (std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.collections.hash.map.RandomState.t)) :=
        borrow_mut contacts in
      let* α1 := M.read α0 in
      let* α2 : M.Val str.t := deref (mk_str "Katie") in
      let* α3 : M.Val (ref str.t) := borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : M.Val str.t := deref (mk_str "435-8291") in
      let* α6 : M.Val (ref str.t) := borrow α5 in
      let* α7 := M.read α6 in
      let* α8 :=
        (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)::["insert"]
          α1
          α4
          α7 in
      M.alloc α8 in
    let* _ : M.Val (core.option.Option.t (ref str.t)) :=
      let* α0 :
          M.Val
            (mut_ref
              (std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.collections.hash.map.RandomState.t)) :=
        borrow_mut contacts in
      let* α1 := M.read α0 in
      let* α2 : M.Val str.t := deref (mk_str "Robert") in
      let* α3 : M.Val (ref str.t) := borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : M.Val str.t := deref (mk_str "956-1745") in
      let* α6 : M.Val (ref str.t) := borrow α5 in
      let* α7 := M.read α6 in
      let* α8 :=
        (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)::["insert"]
          α1
          α4
          α7 in
      M.alloc α8 in
    let* _ : M.Val unit :=
      let* α0 :
          M.Val
            (ref
              (std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.collections.hash.map.RandomState.t)) :=
        borrow contacts in
      let* α1 := M.read α0 in
      let* α2 : M.Val (ref (ref str.t)) := borrow (mk_str "Daniel") in
      let* α3 := M.read α2 in
      let* α4 :=
        (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)::["get"]
          α1
          α3 in
      let* α5 : M.Val (core.option.Option.t (ref (ref str.t))) := M.alloc α4 in
      let* α6 := M.read α5 in
      match α6 with
      | core.option.Option.Some number =>
        let* number := M.alloc number in
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "Calling Daniel: "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val str.t := deref number in
          let* α5 : M.Val (ref str.t) := borrow α4 in
          let* α6 := M.read α5 in
          let* α7 := hash_map.call α6 in
          let* α8 : M.Val (ref str.t) := M.alloc α7 in
          let* α9 : M.Val (ref (ref str.t)) := borrow α8 in
          let* α10 := M.read α9 in
          let* α11 := core.fmt.rt.Argument.t::["new_display"] α10 in
          let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
          let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α12 ] in
          let* α14 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α13 in
          let* α15 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α14 in
          let* α16 := M.read α15 in
          let* α17 := core.fmt.Arguments.t::["new_v1"] α3 α16 in
          let* α18 := std.io.stdio._print α17 in
          M.alloc α18 in
        M.alloc tt
      | _ =>
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "Don't have Daniel's number.
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
          let* α5 := std.io.stdio._print α4 in
          M.alloc α5 in
        M.alloc tt
      end in
    let* _ : M.Val (core.option.Option.t (ref str.t)) :=
      let* α0 :
          M.Val
            (mut_ref
              (std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.collections.hash.map.RandomState.t)) :=
        borrow_mut contacts in
      let* α1 := M.read α0 in
      let* α2 : M.Val str.t := deref (mk_str "Daniel") in
      let* α3 : M.Val (ref str.t) := borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : M.Val str.t := deref (mk_str "164-6743") in
      let* α6 : M.Val (ref str.t) := borrow α5 in
      let* α7 := M.read α6 in
      let* α8 :=
        (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)::["insert"]
          α1
          α4
          α7 in
      M.alloc α8 in
    let* _ : M.Val unit :=
      let* α0 :
          M.Val
            (ref
              (std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.collections.hash.map.RandomState.t)) :=
        borrow contacts in
      let* α1 := M.read α0 in
      let* α2 : M.Val (ref (ref str.t)) := borrow (mk_str "Ashley") in
      let* α3 := M.read α2 in
      let* α4 :=
        (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)::["get"]
          α1
          α3 in
      let* α5 : M.Val (core.option.Option.t (ref (ref str.t))) := M.alloc α4 in
      let* α6 := M.read α5 in
      match α6 with
      | core.option.Option.Some number =>
        let* number := M.alloc number in
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "Calling Ashley: "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val str.t := deref number in
          let* α5 : M.Val (ref str.t) := borrow α4 in
          let* α6 := M.read α5 in
          let* α7 := hash_map.call α6 in
          let* α8 : M.Val (ref str.t) := M.alloc α7 in
          let* α9 : M.Val (ref (ref str.t)) := borrow α8 in
          let* α10 := M.read α9 in
          let* α11 := core.fmt.rt.Argument.t::["new_display"] α10 in
          let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
          let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α12 ] in
          let* α14 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α13 in
          let* α15 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α14 in
          let* α16 := M.read α15 in
          let* α17 := core.fmt.Arguments.t::["new_v1"] α3 α16 in
          let* α18 := std.io.stdio._print α17 in
          M.alloc α18 in
        M.alloc tt
      | _ =>
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "Don't have Ashley's number.
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
          let* α5 := std.io.stdio._print α4 in
          M.alloc α5 in
        M.alloc tt
      end in
    let* _ : M.Val (core.option.Option.t (ref str.t)) :=
      let* α0 :
          M.Val
            (mut_ref
              (std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.collections.hash.map.RandomState.t)) :=
        borrow_mut contacts in
      let* α1 := M.read α0 in
      let* α2 : M.Val (ref (ref str.t)) := borrow (mk_str "Ashley") in
      let* α3 := M.read α2 in
      let* α4 :=
        (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)::["remove"]
          α1
          α3 in
      M.alloc α4 in
    let* α0 :
        M.Val
          (ref
            (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.collections.hash.map.RandomState.t)) :=
      borrow contacts in
    let* α1 := M.read α0 in
    let* α2 :=
      (std.collections.hash.map.HashMap.t
            (ref str.t)
            (ref str.t)
            std.collections.hash.map.RandomState.t)::["iter"]
        α1 in
    let* α3 :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := std.collections.hash.map.Iter.t (ref str.t) (ref str.t))
          (Trait := ltac:(refine _)))
        α2 in
    let* α4 : M.Val (std.collections.hash.map.Iter.t (ref str.t) (ref str.t)) :=
      M.alloc α3 in
    let* α5 := M.read α4 in
    let* α6 : M.Val unit :=
      match α5 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : M.Val unit :=
            let* α0 :
                M.Val
                  (mut_ref
                    (std.collections.hash.map.Iter.t
                      (ref str.t)
                      (ref str.t))) :=
              borrow_mut iter in
            let* α1 := M.read α0 in
            let* α2 :=
              (core.iter.traits.iterator.Iterator.next
                  (Self :=
                    std.collections.hash.map.Iter.t (ref str.t) (ref str.t))
                  (Trait := ltac:(refine _)))
                α1 in
            let* α3 :
                M.Val
                  (core.option.Option.t
                    ((ref (ref str.t)) * (ref (ref str.t)))) :=
              M.alloc α2 in
            let* α4 := M.read α3 in
            match α4 with
            | core.option.Option.None  =>
              let* α0 : M.Val never.t := Break in
              never_to_any α0
            | core.option.Option.Some (contact, number) =>
              let* number := M.alloc number in
              let* contact := M.alloc contact in
              let* _ : M.Val unit :=
                let* _ : M.Val unit :=
                  let* α0 : M.Val (array (ref str.t)) :=
                    M.alloc [ mk_str "Calling "; mk_str ": "; mk_str "
" ] in
                  let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
                  let* α2 : M.Val (ref (slice (ref str.t))) :=
                    pointer_coercion "Unsize" α1 in
                  let* α3 := M.read α2 in
                  let* α4 : M.Val (ref (ref (ref str.t))) := borrow contact in
                  let* α5 := M.read α4 in
                  let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
                  let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
                  let* α8 : M.Val str.t := deref number in
                  let* α9 : M.Val (ref str.t) := borrow α8 in
                  let* α10 := M.read α9 in
                  let* α11 := hash_map.call α10 in
                  let* α12 : M.Val (ref str.t) := M.alloc α11 in
                  let* α13 : M.Val (ref (ref str.t)) := borrow α12 in
                  let* α14 := M.read α13 in
                  let* α15 := core.fmt.rt.Argument.t::["new_display"] α14 in
                  let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
                  let* α17 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α7; α16 ] in
                  let* α18 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                    borrow α17 in
                  let* α19 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                    pointer_coercion "Unsize" α18 in
                  let* α20 := M.read α19 in
                  let* α21 := core.fmt.Arguments.t::["new_v1"] α3 α20 in
                  let* α22 := std.io.stdio._print α21 in
                  M.alloc α22 in
                M.alloc tt in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α6).
