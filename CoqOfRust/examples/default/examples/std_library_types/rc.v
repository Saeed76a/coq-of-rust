(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let rc_examples = "Rc examples".to_string();
    {
        println!("--- rc_a is created ---");

        let rc_a: Rc<String> = Rc::new(rc_examples);
        println!("Reference Count of rc_a: {}", Rc::strong_count(&rc_a));

        {
            println!("--- rc_a is cloned to rc_b ---");

            let rc_b: Rc<String> = Rc::clone(&rc_a);
            println!("Reference Count of rc_b: {}", Rc::strong_count(&rc_b));
            println!("Reference Count of rc_a: {}", Rc::strong_count(&rc_a));

            // Two `Rc`s are equal if their inner values are equal
            println!("rc_a and rc_b are equal: {}", rc_a.eq(&rc_b));

            // We can use methods of a value directly
            println!("Length of the value inside rc_a: {}", rc_a.len());
            println!("Value of rc_b: {}", rc_b);

            println!("--- rc_b is dropped out of scope ---");
        }

        println!("Reference Count of rc_a: {}", Rc::strong_count(&rc_a));

        println!("--- rc_a is dropped out of scope ---");
    }

    // Error! `rc_examples` already moved into `rc_a`
    // And when `rc_a` is dropped, `rc_examples` is dropped together
    // println!("rc_examples: {}", rc_examples);
    // TODO ^ Try uncommenting this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* rc_examples : M.Val alloc.string.String.t :=
      let* α0 : M.Val str.t := deref (mk_str "Rc examples") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 :=
        (alloc.string.ToString.to_string
            (Self := str.t)
            (Trait := ltac:(refine _)))
          α2 in
      M.alloc α3 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "--- rc_a is created ---
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* rc_a : M.Val (alloc.rc.Rc.t alloc.string.String.t) :=
      let* α0 := M.read rc_examples in
      let* α1 := (alloc.rc.Rc.t alloc.string.String.t)::["new"] α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Reference Count of rc_a: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
          borrow rc_a in
        let* α5 := M.read α4 in
        let* α6 := (alloc.rc.Rc.t alloc.string.String.t)::["strong_count"] α5 in
        let* α7 : M.Val usize.t := M.alloc α6 in
        let* α8 : M.Val (ref usize.t) := borrow α7 in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α12 in
        let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α13 in
        let* α15 := M.read α14 in
        let* α16 := core.fmt.Arguments.t::["new_v1"] α3 α15 in
        let* α17 := std.io.stdio._print α16 in
        M.alloc α17 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "--- rc_a is cloned to rc_b ---
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
          let* α5 := std.io.stdio._print α4 in
          M.alloc α5 in
        M.alloc tt in
      let* rc_b : M.Val (alloc.rc.Rc.t alloc.string.String.t) :=
        let* α0 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
          borrow rc_a in
        let* α1 := M.read α0 in
        let* α2 :=
          (core.clone.Clone.clone
              (Self := alloc.rc.Rc.t alloc.string.String.t)
              (Trait := ltac:(refine _)))
            α1 in
        M.alloc α2 in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "Reference Count of rc_b: "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
            borrow rc_b in
          let* α5 := M.read α4 in
          let* α6 :=
            (alloc.rc.Rc.t alloc.string.String.t)::["strong_count"] α5 in
          let* α7 : M.Val usize.t := M.alloc α6 in
          let* α8 : M.Val (ref usize.t) := borrow α7 in
          let* α9 := M.read α8 in
          let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
          let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
          let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
          let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α12 in
          let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α13 in
          let* α15 := M.read α14 in
          let* α16 := core.fmt.Arguments.t::["new_v1"] α3 α15 in
          let* α17 := std.io.stdio._print α16 in
          M.alloc α17 in
        M.alloc tt in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "Reference Count of rc_a: "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
            borrow rc_a in
          let* α5 := M.read α4 in
          let* α6 :=
            (alloc.rc.Rc.t alloc.string.String.t)::["strong_count"] α5 in
          let* α7 : M.Val usize.t := M.alloc α6 in
          let* α8 : M.Val (ref usize.t) := borrow α7 in
          let* α9 := M.read α8 in
          let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
          let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
          let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
          let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α12 in
          let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α13 in
          let* α15 := M.read α14 in
          let* α16 := core.fmt.Arguments.t::["new_v1"] α3 α15 in
          let* α17 := std.io.stdio._print α16 in
          M.alloc α17 in
        M.alloc tt in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "rc_a and rc_b are equal: "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
            borrow rc_a in
          let* α5 := M.read α4 in
          let* α6 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
            borrow rc_b in
          let* α7 := M.read α6 in
          let* α8 :=
            (core.cmp.PartialEq.eq
                (Self := alloc.rc.Rc.t alloc.string.String.t)
                (Trait := ltac:(refine _)))
              α5
              α7 in
          let* α9 : M.Val bool.t := M.alloc α8 in
          let* α10 : M.Val (ref bool.t) := borrow α9 in
          let* α11 := M.read α10 in
          let* α12 := core.fmt.rt.Argument.t::["new_display"] α11 in
          let* α13 : M.Val core.fmt.rt.Argument.t := M.alloc α12 in
          let* α14 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α13 ] in
          let* α15 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α14 in
          let* α16 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α15 in
          let* α17 := M.read α16 in
          let* α18 := core.fmt.Arguments.t::["new_v1"] α3 α17 in
          let* α19 := std.io.stdio._print α18 in
          M.alloc α19 in
        M.alloc tt in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc
              [ mk_str "Length of the value inside rc_a: "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
            borrow rc_a in
          let* α5 := M.read α4 in
          let* α6 :=
            (core.ops.deref.Deref.deref
                (Self := alloc.rc.Rc.t alloc.string.String.t)
                (Trait := ltac:(refine _)))
              α5 in
          let* α7 : M.Val (ref alloc.string.String.t) := M.alloc α6 in
          let* α8 : M.Val alloc.string.String.t := deref α7 in
          let* α9 : M.Val (ref alloc.string.String.t) := borrow α8 in
          let* α10 := M.read α9 in
          let* α11 := alloc.string.String.t::["len"] α10 in
          let* α12 : M.Val usize.t := M.alloc α11 in
          let* α13 : M.Val (ref usize.t) := borrow α12 in
          let* α14 := M.read α13 in
          let* α15 := core.fmt.rt.Argument.t::["new_display"] α14 in
          let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
          let* α17 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α16 ] in
          let* α18 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α17 in
          let* α19 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α18 in
          let* α20 := M.read α19 in
          let* α21 := core.fmt.Arguments.t::["new_v1"] α3 α20 in
          let* α22 := std.io.stdio._print α21 in
          M.alloc α22 in
        M.alloc tt in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "Value of rc_b: "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
            borrow rc_b in
          let* α5 := M.read α4 in
          let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
          let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
          let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
          let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
          let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α9 in
          let* α11 := M.read α10 in
          let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
          let* α13 := std.io.stdio._print α12 in
          M.alloc α13 in
        M.alloc tt in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "--- rc_b is dropped out of scope ---
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
          let* α5 := std.io.stdio._print α4 in
          M.alloc α5 in
        M.alloc tt in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Reference Count of rc_a: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref (alloc.rc.Rc.t alloc.string.String.t)) :=
          borrow rc_a in
        let* α5 := M.read α4 in
        let* α6 := (alloc.rc.Rc.t alloc.string.String.t)::["strong_count"] α5 in
        let* α7 : M.Val usize.t := M.alloc α6 in
        let* α8 : M.Val (ref usize.t) := borrow α7 in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α12 in
        let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α13 in
        let* α15 := M.read α14 in
        let* α16 := core.fmt.Arguments.t::["new_v1"] α3 α15 in
        let* α17 := std.io.stdio._print α16 in
        M.alloc α17 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "--- rc_a is dropped out of scope ---
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    M.alloc tt).
