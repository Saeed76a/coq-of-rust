(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn checked_division(dividend: i32, divisor: i32) -> Option<i32> {
    if divisor == 0 {
        // Failure is represented as the `None` variant
        None
    } else {
        // Result is wrapped in a `Some` variant
        Some(dividend / divisor)
    }
}
*)
Definition checked_division
    (dividend : i32.t)
    (divisor : i32.t)
    : M (core.option.Option.t i32.t) :=
  let* dividend := M.alloc dividend in
  let* divisor := M.alloc divisor in
  M.function_body
    (let* α0 : M.Val i32.t := M.alloc 0 in
    let* α1 : M.Val bool.t := BinOp.eq divisor α0 in
    let* α2 : M.Val bool.t := use α1 in
    let* α3 := M.read α2 in
    if (α3 : bool) then
      M.alloc core.option.Option.None
    else
      let* α0 : M.Val i32.t := BinOp.div dividend divisor in
      let* α1 := M.read α0 in
      M.alloc (core.option.Option.Some α1)).

(*
fn try_division(dividend: i32, divisor: i32) {
    // `Option` values can be pattern matched, just like other enums
    match checked_division(dividend, divisor) {
        None => println!("{} / {} failed!", dividend, divisor),
        Some(quotient) => {
            println!("{} / {} = {}", dividend, divisor, quotient)
        }
    }
}
*)
Definition try_division (dividend : i32.t) (divisor : i32.t) : M unit :=
  let* dividend := M.alloc dividend in
  let* divisor := M.alloc divisor in
  M.function_body
    (let* α0 := M.read dividend in
    let* α1 := M.read divisor in
    let* α2 := option.checked_division α0 α1 in
    let* α3 : M.Val (core.option.Option.t i32.t) := M.alloc α2 in
    let* α4 := M.read α3 in
    match α4 with
    | core.option.Option.None  =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " / "; mk_str " failed!
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref i32.t) := borrow dividend in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (ref i32.t) := borrow divisor in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α7; α11 ] in
        let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α12 in
        let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α13 in
        let* α15 := M.read α14 in
        let* α16 := core.fmt.Arguments.t::["new_v1"] α3 α15 in
        let* α17 := std.io.stdio._print α16 in
        M.alloc α17 in
      M.alloc tt
    | core.option.Option.Some quotient =>
      let* quotient := M.alloc quotient in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " / "; mk_str " = "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref i32.t) := borrow dividend in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (ref i32.t) := borrow divisor in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (ref i32.t) := borrow quotient in
        let* α13 := M.read α12 in
        let* α14 := core.fmt.rt.Argument.t::["new_display"] α13 in
        let* α15 : M.Val core.fmt.rt.Argument.t := M.alloc α14 in
        let* α16 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α7; α11; α15 ] in
        let* α17 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α16 in
        let* α18 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α17 in
        let* α19 := M.read α18 in
        let* α20 := core.fmt.Arguments.t::["new_v1"] α3 α19 in
        let* α21 := std.io.stdio._print α20 in
        M.alloc α21 in
      M.alloc tt
    end).

(*
fn main() {
    try_division(4, 2);
    try_division(1, 0);

    // Binding `None` to a variable needs to be type annotated
    let none: Option<i32> = None;
    let _equivalent_none = None::<i32>;

    let optional_float = Some(0f32);

    // Unwrapping a `Some` variant will extract the value wrapped.
    println!(
        "{:?} unwraps to {:?}",
        optional_float,
        optional_float.unwrap()
    );

    // Unwrapping a `None` variant will `panic!`
    println!("{:?} unwraps to {:?}", none, none.unwrap());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* α0 : M.Val i32.t := M.alloc 4 in
      let* α1 := M.read α0 in
      let* α2 : M.Val i32.t := M.alloc 2 in
      let* α3 := M.read α2 in
      let* α4 := option.try_division α1 α3 in
      M.alloc α4 in
    let* _ : M.Val unit :=
      let* α0 : M.Val i32.t := M.alloc 1 in
      let* α1 := M.read α0 in
      let* α2 : M.Val i32.t := M.alloc 0 in
      let* α3 := M.read α2 in
      let* α4 := option.try_division α1 α3 in
      M.alloc α4 in
    let* none : M.Val (core.option.Option.t i32.t) :=
      M.alloc core.option.Option.None in
    let* _equivalent_none : M.Val (core.option.Option.t i32.t) :=
      M.alloc core.option.Option.None in
    let* optional_float : M.Val (core.option.Option.t f32.t) :=
      let* α0 : M.Val f32.t := M.alloc 0 (* 0 *) in
      let* α1 := M.read α0 in
      M.alloc (core.option.Option.Some α1) in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " unwraps to "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref (core.option.Option.t f32.t)) :=
          borrow optional_float in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 := M.read optional_float in
        let* α9 := (core.option.Option.t f32.t)::["unwrap"] α8 in
        let* α10 : M.Val f32.t := M.alloc α9 in
        let* α11 : M.Val (ref f32.t) := borrow α10 in
        let* α12 := M.read α11 in
        let* α13 := core.fmt.rt.Argument.t::["new_debug"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α7; α14 ] in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 := M.read α17 in
        let* α19 := core.fmt.Arguments.t::["new_v1"] α3 α18 in
        let* α20 := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " unwraps to "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref (core.option.Option.t i32.t)) := borrow none in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 := M.read none in
        let* α9 := (core.option.Option.t i32.t)::["unwrap"] α8 in
        let* α10 : M.Val i32.t := M.alloc α9 in
        let* α11 : M.Val (ref i32.t) := borrow α10 in
        let* α12 := M.read α11 in
        let* α13 := core.fmt.rt.Argument.t::["new_debug"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α7; α14 ] in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 := M.read α17 in
        let* α19 := core.fmt.Arguments.t::["new_v1"] α3 α18 in
        let* α20 := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    M.alloc tt).
