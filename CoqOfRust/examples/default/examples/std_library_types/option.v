(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn checked_division(dividend: i32, divisor: i32) -> Option<i32> {
    if divisor == 0 {
        // Failure is represented as the `None` variant
        None
    } else {
        // Result is wrapped in a `Some` variant
        Some(dividend / divisor)
    }
}
*)
Definition checked_division
    (dividend : i32.t)
    (divisor : i32.t)
    : M (core.option.Option.t i32.t) :=
  let* dividend : M.Val i32.t := M.alloc dividend in
  let* divisor : M.Val i32.t := M.alloc divisor in
  let* α0 : i32.t := M.read divisor in
  let* α1 : M.Val (core.option.Option.t i32.t) :=
    if (use (BinOp.Pure.eq α0 (Integer.of_Z 0)) : bool) then
      M.alloc core.option.Option.None
    else
      let* α0 : i32.t := M.read dividend in
      let* α1 : i32.t := M.read divisor in
      let* α2 : i32.t := BinOp.Panic.div α0 α1 in
      M.alloc (core.option.Option.Some α2) in
  M.read α1.

(*
fn try_division(dividend: i32, divisor: i32) {
    // `Option` values can be pattern matched, just like other enums
    match checked_division(dividend, divisor) {
        None => println!("{} / {} failed!", dividend, divisor),
        Some(quotient) => {
            println!("{} / {} = {}", dividend, divisor, quotient)
        }
    }
}
*)
Definition try_division (dividend : i32.t) (divisor : i32.t) : M unit :=
  let* dividend : M.Val i32.t := M.alloc dividend in
  let* divisor : M.Val i32.t := M.alloc divisor in
  let* α0 : i32.t := M.read dividend in
  let* α1 : i32.t := M.read divisor in
  let* α2 : core.option.Option.t i32.t := option.checked_division α0 α1 in
  let* α3 : M.Val unit :=
    match α2 with
    | core.option.Option.None  =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " / "; mk_str " failed!
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
        let* α2 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α1) in
        let* α3 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] (borrow dividend) in
        let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
        let* α5 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] (borrow divisor) in
        let* α6 : M.Val core.fmt.rt.Argument.t := M.alloc α5 in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4; α6 ] in
        let* α8 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α7) in
        let* α9 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α8) in
        let* α10 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α2 α9 in
        let* α11 : unit := std.io.stdio._print α10 in
        M.alloc α11 in
      M.alloc tt
    | core.option.Option.Some quotient =>
      let* quotient := M.alloc quotient in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " / "; mk_str " = "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
        let* α2 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α1) in
        let* α3 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] (borrow dividend) in
        let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
        let* α5 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] (borrow divisor) in
        let* α6 : M.Val core.fmt.rt.Argument.t := M.alloc α5 in
        let* α7 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] (borrow quotient) in
        let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α4; α6; α8 ] in
        let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α9) in
        let* α11 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α10) in
        let* α12 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α2 α11 in
        let* α13 : unit := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt
    end in
  M.read α3.

(*
fn main() {
    try_division(4, 2);
    try_division(1, 0);

    // Binding `None` to a variable needs to be type annotated
    let none: Option<i32> = None;
    let _equivalent_none = None::<i32>;

    let optional_float = Some(0f32);

    // Unwrapping a `Some` variant will extract the value wrapped.
    println!(
        "{:?} unwraps to {:?}",
        optional_float,
        optional_float.unwrap()
    );

    // Unwrapping a `None` variant will `panic!`
    println!("{:?} unwraps to {:?}", none, none.unwrap());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* _ : M.Val unit :=
    let* α0 : unit := option.try_division (Integer.of_Z 4) (Integer.of_Z 2) in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : unit := option.try_division (Integer.of_Z 1) (Integer.of_Z 0) in
    M.alloc α0 in
  let* none : M.Val (core.option.Option.t i32.t) :=
    M.alloc core.option.Option.None in
  let* _equivalent_none : M.Val (core.option.Option.t i32.t) :=
    M.alloc core.option.Option.None in
  let* optional_float : M.Val (core.option.Option.t f32.t) :=
    let* α0 : f32.t := M.read UnsupportedLiteral in
    M.alloc (core.option.Option.Some α0) in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str ""; mk_str " unwraps to "; mk_str "
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_debug"] (borrow optional_float) in
      let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
      let* α5 : core.option.Option.t f32.t := M.read optional_float in
      let* α6 : f32.t := (core.option.Option.t f32.t)::["unwrap"] α5 in
      let* α7 : M.Val f32.t := M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_debug"] (borrow α7) in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4; α9 ] in
      let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α10) in
      let* α12 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α11) in
      let* α13 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α2 α12 in
      let* α14 : unit := std.io.stdio._print α13 in
      M.alloc α14 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str ""; mk_str " unwraps to "; mk_str "
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_debug"] (borrow none) in
      let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
      let* α5 : core.option.Option.t i32.t := M.read none in
      let* α6 : i32.t := (core.option.Option.t i32.t)::["unwrap"] α5 in
      let* α7 : M.Val i32.t := M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_debug"] (borrow α7) in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4; α9 ] in
      let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α10) in
      let* α12 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α11) in
      let* α13 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α2 α12 in
      let* α14 : unit := std.io.stdio._print α13 in
      M.alloc α14 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
