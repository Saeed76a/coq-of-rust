(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut a: HashSet<i32> = vec![1i32, 2, 3].into_iter().collect();
    let mut b: HashSet<i32> = vec![2i32, 3, 4].into_iter().collect();

    assert!(a.insert(4));
    assert!(a.contains(&4));

    // `HashSet::insert()` returns false if
    // there was a value already present.
    // assert!(b.insert(4), "Value 4 is already in set B!");
    // FIXME ^ Comment out this line

    b.insert(5);

    // If a collection's element type implements `Debug`,
    // then the collection implements `Debug`.
    // It usually prints its elements in the format `[elem1, elem2, ...]`
    println!("A: {:?}", a);
    println!("B: {:?}", b);

    // Print [1, 2, 3, 4, 5] in arbitrary order
    println!("Union: {:?}", a.union(&b).collect::<Vec<&i32>>());

    // This should print [1]
    println!("Difference: {:?}", a.difference(&b).collect::<Vec<&i32>>());

    // Print [2, 3, 4] in arbitrary order.
    println!(
        "Intersection: {:?}",
        a.intersection(&b).collect::<Vec<&i32>>()
    );

    // Print [1, 5]
    println!(
        "Symmetric Difference: {:?}",
        a.symmetric_difference(&b).collect::<Vec<&i32>>()
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* a :
      M.Val
        (std.collections.hash.set.HashSet.t
          i32.t
          std.collections.hash.map.RandomState.t) :=
    let* α0 : M.Val (array i32.t) :=
      M.alloc [ Integer.of_Z 1; Integer.of_Z 2; Integer.of_Z 3 ] in
    let* α1 : M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t) :=
      M.call ((alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α0) in
    let* α2 : alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t :=
      M.read (pointer_coercion "Unsize" α1) in
    let* α3 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t :=
      M.call ((slice i32.t)::["into_vec"] α2) in
    let* α4 : alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t :=
      M.call
        ((core.iter.traits.collect.IntoIterator.into_iter
            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α3) in
    let* α5 :
        std.collections.hash.set.HashSet.t
          i32.t
          std.collections.hash.map.RandomState.t :=
      M.call
        ((core.iter.traits.iterator.Iterator.collect
            (Self := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α4) in
    M.alloc α5 in
  let* b :
      M.Val
        (std.collections.hash.set.HashSet.t
          i32.t
          std.collections.hash.map.RandomState.t) :=
    let* α0 : M.Val (array i32.t) :=
      M.alloc [ Integer.of_Z 2; Integer.of_Z 3; Integer.of_Z 4 ] in
    let* α1 : M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t) :=
      M.call ((alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α0) in
    let* α2 : alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t :=
      M.read (pointer_coercion "Unsize" α1) in
    let* α3 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t :=
      M.call ((slice i32.t)::["into_vec"] α2) in
    let* α4 : alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t :=
      M.call
        ((core.iter.traits.collect.IntoIterator.into_iter
            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α3) in
    let* α5 :
        std.collections.hash.set.HashSet.t
          i32.t
          std.collections.hash.map.RandomState.t :=
      M.call
        ((core.iter.traits.iterator.Iterator.collect
            (Self := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α4) in
    M.alloc α5 in
  let* _ : M.Val unit :=
    let* α0 : bool.t :=
      M.call
        ((std.collections.hash.set.HashSet.t
              i32.t
              std.collections.hash.map.RandomState.t)::["insert"]
          (borrow_mut a)
          (Integer.of_Z 4)) in
    if (use (UnOp.not α0) : bool) then
      let* α0 : ref str.t := M.read (mk_str "assertion failed: a.insert(4)") in
      let* α1 : never.t := M.call (core.panicking.panic α0) in
      let* α2 : unit := never_to_any α1 in
      M.alloc α2
    else
      M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : M.Val i32.t := M.alloc (Integer.of_Z 4) in
    let* α1 : bool.t :=
      M.call
        ((std.collections.hash.set.HashSet.t
              i32.t
              std.collections.hash.map.RandomState.t)::["contains"]
          (borrow a)
          (borrow α0)) in
    if (use (UnOp.not α1) : bool) then
      let* α0 : ref str.t :=
        M.read (mk_str "assertion failed: a.contains(&4)") in
      let* α1 : never.t := M.call (core.panicking.panic α0) in
      let* α2 : unit := never_to_any α1 in
      M.alloc α2
    else
      M.alloc tt in
  let* _ : M.Val bool.t :=
    let* α0 : bool.t :=
      M.call
        ((std.collections.hash.set.HashSet.t
              i32.t
              std.collections.hash.map.RandomState.t)::["insert"]
          (borrow_mut b)
          (Integer.of_Z 5)) in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "A: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow a)) in
      let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
      let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α6) in
      let* α8 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α7) in
      let* α9 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α4 α8) in
      let* α10 : unit := M.call (std.io.stdio._print α9) in
      M.alloc α10 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "B: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow b)) in
      let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
      let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α6) in
      let* α8 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α7) in
      let* α9 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α4 α8) in
      let* α10 : unit := M.call (std.io.stdio._print α9) in
      M.alloc α10 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Union: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 :
          std.collections.hash.set.Union.t
            i32.t
            std.collections.hash.map.RandomState.t :=
        M.call
          ((std.collections.hash.set.HashSet.t
                i32.t
                std.collections.hash.map.RandomState.t)::["union"]
            (borrow a)
            (borrow b)) in
      let* α6 : alloc.vec.Vec.t (ref i32.t) alloc.alloc.Global.t :=
        M.call
          ((core.iter.traits.iterator.Iterator.collect
              (Self :=
                std.collections.hash.set.Union.t
                  i32.t
                  std.collections.hash.map.RandomState.t)
              (Trait := ltac:(refine _)))
            α5) in
      let* α7 : M.Val (alloc.vec.Vec.t (ref i32.t) alloc.alloc.Global.t) :=
        M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow α7)) in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α9) in
      let* α11 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α10) in
      let* α12 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α4 α11) in
      let* α13 : unit := M.call (std.io.stdio._print α12) in
      M.alloc α13 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Difference: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 :
          std.collections.hash.set.Difference.t
            i32.t
            std.collections.hash.map.RandomState.t :=
        M.call
          ((std.collections.hash.set.HashSet.t
                i32.t
                std.collections.hash.map.RandomState.t)::["difference"]
            (borrow a)
            (borrow b)) in
      let* α6 : alloc.vec.Vec.t (ref i32.t) alloc.alloc.Global.t :=
        M.call
          ((core.iter.traits.iterator.Iterator.collect
              (Self :=
                std.collections.hash.set.Difference.t
                  i32.t
                  std.collections.hash.map.RandomState.t)
              (Trait := ltac:(refine _)))
            α5) in
      let* α7 : M.Val (alloc.vec.Vec.t (ref i32.t) alloc.alloc.Global.t) :=
        M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow α7)) in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α9) in
      let* α11 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α10) in
      let* α12 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α4 α11) in
      let* α13 : unit := M.call (std.io.stdio._print α12) in
      M.alloc α13 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Intersection: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 :
          std.collections.hash.set.Intersection.t
            i32.t
            std.collections.hash.map.RandomState.t :=
        M.call
          ((std.collections.hash.set.HashSet.t
                i32.t
                std.collections.hash.map.RandomState.t)::["intersection"]
            (borrow a)
            (borrow b)) in
      let* α6 : alloc.vec.Vec.t (ref i32.t) alloc.alloc.Global.t :=
        M.call
          ((core.iter.traits.iterator.Iterator.collect
              (Self :=
                std.collections.hash.set.Intersection.t
                  i32.t
                  std.collections.hash.map.RandomState.t)
              (Trait := ltac:(refine _)))
            α5) in
      let* α7 : M.Val (alloc.vec.Vec.t (ref i32.t) alloc.alloc.Global.t) :=
        M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow α7)) in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α9) in
      let* α11 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α10) in
      let* α12 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α4 α11) in
      let* α13 : unit := M.call (std.io.stdio._print α12) in
      M.alloc α13 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Symmetric Difference: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 :
          std.collections.hash.set.SymmetricDifference.t
            i32.t
            std.collections.hash.map.RandomState.t :=
        M.call
          ((std.collections.hash.set.HashSet.t
                i32.t
                std.collections.hash.map.RandomState.t)::["symmetric_difference"]
            (borrow a)
            (borrow b)) in
      let* α6 : alloc.vec.Vec.t (ref i32.t) alloc.alloc.Global.t :=
        M.call
          ((core.iter.traits.iterator.Iterator.collect
              (Self :=
                std.collections.hash.set.SymmetricDifference.t
                  i32.t
                  std.collections.hash.map.RandomState.t)
              (Trait := ltac:(refine _)))
            α5) in
      let* α7 : M.Val (alloc.vec.Vec.t (ref i32.t) alloc.alloc.Global.t) :=
        M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow α7)) in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α9) in
      let* α11 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α10) in
      let* α12 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α4 α11) in
      let* α13 : unit := M.call (std.io.stdio._print α12) in
      M.alloc α13 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
