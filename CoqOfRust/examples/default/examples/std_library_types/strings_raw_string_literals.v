(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let raw_str = r"Escapes don't work here: \x3F \u{211D}";
    println!("{}", raw_str);

    // If you need quotes in a raw string, add a pair of #s
    let quotes = r#"And then I said: "There is no escape!""#;
    println!("{}", quotes);

    // If you need "# in your string, just use more #s in the delimiter.
    // You can use up to 65535 #s.
    let longer_delimiter = r###"A string with "# in it. And even "##!"###;
    println!("{}", longer_delimiter);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* raw_str : M.Val (ref str.t) :=
    M.copy (mk_str "Escapes don't work here: \x3F \u{211D}") in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str ""; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref (ref str.t) := borrow raw_str in
      let* α6 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α5 in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : ref (array core.fmt.rt.Argument.t) := borrow α8 in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α9 in
      let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α10 in
      let* α12 : ref (slice core.fmt.rt.Argument.t) := M.read α11 in
      let* α13 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α12 in
      let* α14 : unit := std.io.stdio._print α13 in
      M.alloc α14 in
    M.alloc tt in
  let* quotes : M.Val (ref str.t) :=
    M.copy (mk_str "And then I said: "There is no escape!"") in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str ""; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref (ref str.t) := borrow quotes in
      let* α6 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α5 in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : ref (array core.fmt.rt.Argument.t) := borrow α8 in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α9 in
      let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α10 in
      let* α12 : ref (slice core.fmt.rt.Argument.t) := M.read α11 in
      let* α13 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α12 in
      let* α14 : unit := std.io.stdio._print α13 in
      M.alloc α14 in
    M.alloc tt in
  let* longer_delimiter : M.Val (ref str.t) :=
    M.copy (mk_str "A string with "# in it. And even "##!") in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str ""; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref (ref str.t) := borrow longer_delimiter in
      let* α6 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α5 in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : ref (array core.fmt.rt.Argument.t) := borrow α8 in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α9 in
      let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α10 in
      let* α12 : ref (slice core.fmt.rt.Argument.t) := M.read α11 in
      let* α13 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α12 in
      let* α14 : unit := std.io.stdio._print α13 in
      M.alloc α14 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
