(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    calculate! {
        eval 1 + 2 // hehehe `eval` is _not_ a Rust keyword!
    }

    calculate! {
        eval (1 + 2) * (3 / 4)
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* val : M.Val usize.t :=
        let* α0 : M.Val usize.t := M.alloc 1 in
        let* α1 : M.Val usize.t := M.alloc 2 in
        let* α2 : M.Val usize.t := BinOp.add α0 α1 in
        M.copy α2 in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "1 + 2 = "; mk_str "
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val (ref usize.t) := borrow val in
          let* α5 := M.read α4 in
          let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
          let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
          let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
          let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
          let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α9 in
          let* α11 := M.read α10 in
          let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
          let* α13 := std.io.stdio._print α12 in
          M.alloc α13 in
        M.alloc tt in
      M.alloc tt in
    let* val : M.Val usize.t :=
      let* α0 : M.Val usize.t := M.alloc 1 in
      let* α1 : M.Val usize.t := M.alloc 2 in
      let* α2 : M.Val usize.t := BinOp.add α0 α1 in
      let* α3 : M.Val usize.t := M.alloc 3 in
      let* α4 : M.Val usize.t := M.alloc 4 in
      let* α5 : M.Val usize.t := BinOp.div α3 α4 in
      let* α6 : M.Val usize.t := BinOp.mul α2 α5 in
      M.copy α6 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "(1 + 2) * (3 / 4) = "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref usize.t) := borrow val in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt in
    M.alloc tt).
