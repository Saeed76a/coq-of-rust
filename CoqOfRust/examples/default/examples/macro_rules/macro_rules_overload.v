(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    test!(1i32 + 1 == 2i32; and 2i32 * 2 == 4i32);
    test!(true; or false);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " and "; mk_str " is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref (ref str.t)) :=
          borrow (mk_str "1i32 + 1 == 2i32") in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (ref (ref str.t)) :=
          borrow (mk_str "2i32 * 2 == 4i32") in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_debug"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val i32.t := M.alloc 1 in
        let* α13 : M.Val i32.t := M.alloc 1 in
        let* α14 : M.Val i32.t := BinOp.add α12 α13 in
        let* α15 : M.Val i32.t := M.alloc 2 in
        let* α16 : M.Val bool.t := BinOp.eq α14 α15 in
        let* α17 : M.Val i32.t := M.alloc 2 in
        let* α18 : M.Val i32.t := M.alloc 2 in
        let* α19 : M.Val i32.t := BinOp.mul α17 α18 in
        let* α20 : M.Val i32.t := M.alloc 4 in
        let* α21 : M.Val bool.t := BinOp.eq α19 α20 in
        let* α22 : M.Val bool.t := BinOp.and α16 α21 in
        let* α23 : M.Val (ref bool.t) := borrow α22 in
        let* α24 := M.read α23 in
        let* α25 := core.fmt.rt.Argument.t::["new_debug"] α24 in
        let* α26 : M.Val core.fmt.rt.Argument.t := M.alloc α25 in
        let* α27 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α7; α11; α26 ] in
        let* α28 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α27 in
        let* α29 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α28 in
        let* α30 := M.read α29 in
        let* α31 := core.fmt.Arguments.t::["new_v1"] α3 α30 in
        let* α32 := std.io.stdio._print α31 in
        M.alloc α32 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str " or "; mk_str " is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref (ref str.t)) := borrow (mk_str "true") in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (ref (ref str.t)) := borrow (mk_str "false") in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_debug"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val bool.t := M.alloc true in
        let* α13 : M.Val bool.t := M.alloc false in
        let* α14 : M.Val bool.t := BinOp.or α12 α13 in
        let* α15 : M.Val (ref bool.t) := borrow α14 in
        let* α16 := M.read α15 in
        let* α17 := core.fmt.rt.Argument.t::["new_debug"] α16 in
        let* α18 : M.Val core.fmt.rt.Argument.t := M.alloc α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α7; α11; α18 ] in
        let* α20 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α19 in
        let* α21 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α20 in
        let* α22 := M.read α21 in
        let* α23 := core.fmt.Arguments.t::["new_v1"] α3 α22 in
        let* α24 := std.io.stdio._print α23 in
        M.alloc α24 in
      M.alloc tt in
    M.alloc tt).
