(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    println!("{}", find_min!(1));
    println!("{}", find_min!(1 + 2, 2));
    println!("{}", find_min!(5, 2 * 3, 4));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) := M.alloc [ mk_str "1
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
      let* α6 : ref (array core.fmt.rt.Argument.t) := borrow α5 in
      let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α6 in
      let* α8 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α7 in
      let* α9 : ref (slice core.fmt.rt.Argument.t) := M.read α8 in
      let* α10 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α9 in
      let* α11 : unit := std.io.stdio._print α10 in
      M.alloc α11 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str ""; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val i32.t := M.alloc 1 in
      let* α6 : M.Val i32.t := M.alloc 2 in
      let* α7 : M.Val i32.t := BinOp.add α5 α6 in
      let* α8 : i32.t := M.read α7 in
      let* α9 : M.Val i32.t := M.alloc 2 in
      let* α10 : i32.t := M.read α9 in
      let* α11 : i32.t := core.cmp.min α8 α10 in
      let* α12 : M.Val i32.t := M.alloc α11 in
      let* α13 : ref i32.t := borrow α12 in
      let* α14 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α13 in
      let* α15 : M.Val core.fmt.rt.Argument.t := M.alloc α14 in
      let* α16 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α15 ] in
      let* α17 : ref (array core.fmt.rt.Argument.t) := borrow α16 in
      let* α18 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α17 in
      let* α19 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α18 in
      let* α20 : ref (slice core.fmt.rt.Argument.t) := M.read α19 in
      let* α21 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α20 in
      let* α22 : unit := std.io.stdio._print α21 in
      M.alloc α22 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str ""; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val i32.t := M.alloc 5 in
      let* α6 : i32.t := M.read α5 in
      let* α7 : M.Val i32.t := M.alloc 2 in
      let* α8 : M.Val i32.t := M.alloc 3 in
      let* α9 : M.Val i32.t := BinOp.mul α7 α8 in
      let* α10 : i32.t := M.read α9 in
      let* α11 : M.Val i32.t := M.alloc 4 in
      let* α12 : i32.t := M.read α11 in
      let* α13 : i32.t := core.cmp.min α10 α12 in
      let* α14 : i32.t := core.cmp.min α6 α13 in
      let* α15 : M.Val i32.t := M.alloc α14 in
      let* α16 : ref i32.t := borrow α15 in
      let* α17 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α16 in
      let* α18 : M.Val core.fmt.rt.Argument.t := M.alloc α17 in
      let* α19 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α18 ] in
      let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
      let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α20 in
      let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α21 in
      let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
      let* α24 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α23 in
      let* α25 : unit := std.io.stdio._print α24 in
      M.alloc α25 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
