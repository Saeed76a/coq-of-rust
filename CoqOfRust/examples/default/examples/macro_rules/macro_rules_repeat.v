(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    println!("{}", find_min!(1));
    println!("{}", find_min!(1 + 2, 2));
    println!("{}", find_min!(5, 2 * 3, 4));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) := M.alloc [ mk_str "1
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
        let* α8 : ref (array core.fmt.rt.Argument.t) := borrow α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := deref α8 in
        let* α10 : ref (array core.fmt.rt.Argument.t) := borrow α9 in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ref (slice core.fmt.rt.Argument.t) := M.read α12 in
        let* α14 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α13 in
        let* α15 : unit := std.io.stdio._print α14 in
        M.alloc α15 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 1 in
        let* α8 : M.Val i32.t := M.alloc 2 in
        let* α9 : M.Val i32.t := BinOp.add α7 α8 in
        let* α10 : i32.t := M.read α9 in
        let* α11 : M.Val i32.t := M.alloc 2 in
        let* α12 : i32.t := M.read α11 in
        let* α13 : i32.t := core.cmp.min α10 α12 in
        let* α14 : M.Val i32.t := M.alloc α13 in
        let* α15 : ref i32.t := borrow α14 in
        let* α16 : M.Val i32.t := deref α15 in
        let* α17 : ref i32.t := borrow α16 in
        let* α18 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α17 in
        let* α19 : M.Val core.fmt.rt.Argument.t := M.alloc α18 in
        let* α20 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α19 ] in
        let* α21 : ref (array core.fmt.rt.Argument.t) := borrow α20 in
        let* α22 : M.Val (array core.fmt.rt.Argument.t) := deref α21 in
        let* α23 : ref (array core.fmt.rt.Argument.t) := borrow α22 in
        let* α24 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α23 in
        let* α25 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α24 in
        let* α26 : ref (slice core.fmt.rt.Argument.t) := M.read α25 in
        let* α27 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α26 in
        let* α28 : unit := std.io.stdio._print α27 in
        M.alloc α28 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 5 in
        let* α8 : i32.t := M.read α7 in
        let* α9 : M.Val i32.t := M.alloc 2 in
        let* α10 : M.Val i32.t := M.alloc 3 in
        let* α11 : M.Val i32.t := BinOp.mul α9 α10 in
        let* α12 : i32.t := M.read α11 in
        let* α13 : M.Val i32.t := M.alloc 4 in
        let* α14 : i32.t := M.read α13 in
        let* α15 : i32.t := core.cmp.min α12 α14 in
        let* α16 : i32.t := core.cmp.min α8 α15 in
        let* α17 : M.Val i32.t := M.alloc α16 in
        let* α18 : ref i32.t := borrow α17 in
        let* α19 : M.Val i32.t := deref α18 in
        let* α20 : ref i32.t := borrow α19 in
        let* α21 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α20 in
        let* α22 : M.Val core.fmt.rt.Argument.t := M.alloc α21 in
        let* α23 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α22 ] in
        let* α24 : ref (array core.fmt.rt.Argument.t) := borrow α23 in
        let* α25 : M.Val (array core.fmt.rt.Argument.t) := deref α24 in
        let* α26 : ref (array core.fmt.rt.Argument.t) := borrow α25 in
        let* α27 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α26 in
        let* α28 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α27 in
        let* α29 : ref (slice core.fmt.rt.Argument.t) := M.read α28 in
        let* α30 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α29 in
        let* α31 : unit := std.io.stdio._print α30 in
        M.alloc α31 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
