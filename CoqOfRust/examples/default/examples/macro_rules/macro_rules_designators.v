(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
        fn $func_name() {
            // The `stringify!` macro converts an `ident` into a string.
            println!("You called {:?}()", stringify!($func_name));
        }
*)
Definition foo : M unit :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "You called "; mk_str "()
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (ref str.t)))) :=
          borrow (mk_str "foo") in
        let* α4 := core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) := M.alloc α4 in
        let* α6 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α6 in
        let* α8 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 := core.fmt.Arguments.t::["new_v1"] α2 α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) := M.alloc α9 in
        let* α11 := std.io.stdio._print α10 in
        M.alloc α11 in
      M.alloc tt in
    M.alloc tt).

(*
        fn $func_name() {
            // The `stringify!` macro converts an `ident` into a string.
            println!("You called {:?}()", stringify!($func_name));
        }
*)
Definition bar : M unit :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "You called "; mk_str "()
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (ref str.t)))) :=
          borrow (mk_str "bar") in
        let* α4 := core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) := M.alloc α4 in
        let* α6 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α6 in
        let* α8 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 := core.fmt.Arguments.t::["new_v1"] α2 α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) := M.alloc α9 in
        let* α11 := std.io.stdio._print α10 in
        M.alloc α11 in
      M.alloc tt in
    M.alloc tt).

(*
fn main() {
    foo();
    bar();

    print_result!(1u32 + 1);

    // Recall that blocks are expressions too!
    print_result!({
        let x = 1u32;

        x * x + 2 * x - 1
    });
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 := macro_rules_designators.foo in
      M.alloc α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 := macro_rules_designators.bar in
      M.alloc α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str ""; mk_str " = "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (ref str.t)))) :=
          borrow (mk_str "1u32 + 1") in
        let* α4 := core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) := M.alloc α4 in
        let* α6 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
        let* α7 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
        let* α8 : ltac:(refine (M.Val u32.t)) := BinOp.add α6 α7 in
        let* α9 : ltac:(refine (M.Val (ref u32.t))) := borrow α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_debug"] α9 in
        let* α11 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          M.alloc α10 in
        let* α12 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α5; α11 ] in
        let* α13 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α12 in
        let* α14 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α13 in
        let* α15 := core.fmt.Arguments.t::["new_v1"] α2 α14 in
        let* α16 : ltac:(refine (M.Val core.fmt.Arguments.t)) := M.alloc α15 in
        let* α17 := std.io.stdio._print α16 in
        M.alloc α17 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str ""; mk_str " = "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (ref str.t)))) :=
          borrow (mk_str "{ let x = 1u32; x * x + 2 * x - 1 }") in
        let* α4 := core.fmt.rt.Argument.t::["new_debug"] α3 in
        let* α5 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) := M.alloc α4 in
        let* x : ltac:(refine (M.Val u32.t)) :=
          let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
          M.copy α0 in
        let* α0 : ltac:(refine (M.Val u32.t)) := BinOp.mul x x in
        let* α1 : ltac:(refine (M.Val u32.t)) := M.alloc 2 in
        let* α2 : ltac:(refine (M.Val u32.t)) := BinOp.mul α1 x in
        let* α3 : ltac:(refine (M.Val u32.t)) := BinOp.add α0 α2 in
        let* α4 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
        let* α6 : ltac:(refine (M.Val u32.t)) := BinOp.sub α3 α4 in
        let* α7 : ltac:(refine (M.Val (ref u32.t))) := borrow α6 in
        let* α8 := core.fmt.rt.Argument.t::["new_debug"] α7 in
        let* α9 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) := M.alloc α8 in
        let* α10 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α5; α9 ] in
        let* α11 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α10 in
        let* α12 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α11 in
        let* α13 := core.fmt.Arguments.t::["new_v1"] α2 α12 in
        let* α14 : ltac:(refine (M.Val core.fmt.Arguments.t)) := M.alloc α13 in
        let* α15 := std.io.stdio._print α14 in
        M.alloc α15 in
      M.alloc tt in
    M.alloc tt).
