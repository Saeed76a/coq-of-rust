(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    use std::mem;

    let color = String::from("green");

    // A closure to print `color` which immediately borrows (`&`) `color` and
    // stores the borrow and closure in the `print` variable. It will remain
    // borrowed until `print` is used the last time.
    //
    // `println!` only requires arguments by immutable reference so it doesn't
    // impose anything more restrictive.
    let print = || println!("`color`: {}", color);

    // Call the closure using the borrow.
    print();

    // `color` can be borrowed immutably again, because the closure only holds
    // an immutable reference to `color`.
    let _reborrow = &color;
    print();

    // A move or reborrow is allowed after the final use of `print`
    let _color_moved = color;

    let mut count = 0;
    // A closure to increment `count` could take either `&mut count` or `count`
    // but `&mut count` is less restrictive so it takes that. Immediately
    // borrows `count`.
    //
    // A `mut` is required on `inc` because a `&mut` is stored inside. Thus,
    // calling the closure mutates the closure which requires a `mut`.
    let mut inc = || {
        count += 1;
        println!("`count`: {}", count);
    };

    // Call the closure using a mutable borrow.
    inc();

    // The closure still mutably borrows `count` because it is called later.
    // An attempt to reborrow will lead to an error.
    // let _reborrow = &count;
    // ^ TODO: try uncommenting this line.
    inc();

    // The closure no longer needs to borrow `&mut count`. Therefore, it is
    // possible to reborrow without an error
    let _count_reborrowed = &mut count;

    // A non-copy type.
    let movable = Box::new(3);

    // `mem::drop` requires `T` so this must take by value. A copy type
    // would copy into the closure leaving the original untouched.
    // A non-copy must move and so `movable` immediately moves into
    // the closure.
    let consume = || {
        println!("`movable`: {:?}", movable);
        mem::drop(movable);
    };

    // `consume` consumes the variable so this can only be called once.
    consume();
    // consume();
    // ^ TODO: Try uncommenting this line.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* color : M.Val alloc.string.String.t :=
      let* α0 : ref str.t := M.read (mk_str "green") in
      let* α1 : alloc.string.String.t :=
        (core.convert.From.from
            (Self := alloc.string.String.t)
            (Trait := ltac:(refine _)))
          α0 in
      M.alloc α1 in
    let* print : M.Val type not implemented :=
      M.copy
        (let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "`color`: "; mk_str "
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : ref alloc.string.String.t := borrow color in
          let* α8 : M.Val alloc.string.String.t := deref α7 in
          let* α9 : ref alloc.string.String.t := borrow α8 in
          let* α10 : core.fmt.rt.Argument.t :=
            core.fmt.rt.Argument.t::["new_display"] α9 in
          let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
          let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
          let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
          let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
          let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
          let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
            M.alloc α15 in
          let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α16 in
          let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
          let* α19 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_v1"] α6 α18 in
          let* α20 : unit := std.io.stdio._print α19 in
          M.alloc α20 in
        M.alloc tt) in
    let* _ : M.Val unit :=
      let* α0 : ref type not implemented := borrow print in
      let* α1 : unit :=
        (core.ops.function.Fn.call
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α0
          tt in
      M.alloc α1 in
    let* _reborrow : M.Val (ref alloc.string.String.t) :=
      let* α0 : ref alloc.string.String.t := borrow color in
      M.alloc α0 in
    let* _ : M.Val unit :=
      let* α0 : ref type not implemented := borrow print in
      let* α1 : unit :=
        (core.ops.function.Fn.call
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α0
          tt in
      M.alloc α1 in
    let* _color_moved : M.Val alloc.string.String.t := M.copy color in
    let* count : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 0 in
      M.copy α0 in
    let* inc : M.Val type not implemented :=
      M.copy
        (let* _ : M.Val unit :=
          let* α0 : M.Val i32.t := M.alloc 1 in
          assign_op add count α0 in
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "`count`: "; mk_str "
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : ref i32.t := borrow count in
            let* α8 : M.Val i32.t := deref α7 in
            let* α9 : ref i32.t := borrow α8 in
            let* α10 : core.fmt.rt.Argument.t :=
              core.fmt.rt.Argument.t::["new_display"] α9 in
            let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
            let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
              M.alloc [ α11 ] in
            let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
            let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
            let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
            let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
              M.alloc α15 in
            let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
              pointer_coercion "Unsize" α16 in
            let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
            let* α19 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_v1"] α6 α18 in
            let* α20 : unit := std.io.stdio._print α19 in
            M.alloc α20 in
          M.alloc tt in
        M.alloc tt) in
    let* _ : M.Val unit :=
      let* α0 : mut_ref type not implemented := borrow_mut inc in
      let* α1 : unit :=
        (core.ops.function.FnMut.call_mut
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α0
          tt in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 : mut_ref type not implemented := borrow_mut inc in
      let* α1 : unit :=
        (core.ops.function.FnMut.call_mut
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α0
          tt in
      M.alloc α1 in
    let* _count_reborrowed : M.Val (mut_ref i32.t) :=
      let* α0 : mut_ref i32.t := borrow_mut count in
      M.alloc α0 in
    let* movable : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
      let* α0 : M.Val i32.t := M.alloc 3 in
      let* α1 : i32.t := M.read α0 in
      let* α2 : alloc.boxed.Box.t i32.t alloc.alloc.Global.t :=
        (alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"] α1 in
      M.alloc α2 in
    let* consume : M.Val type not implemented :=
      M.copy
        (let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "`movable`: "; mk_str "
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : ref (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
              borrow movable in
            let* α8 : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
              deref α7 in
            let* α9 : ref (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
              borrow α8 in
            let* α10 : core.fmt.rt.Argument.t :=
              core.fmt.rt.Argument.t::["new_debug"] α9 in
            let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
            let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
              M.alloc [ α11 ] in
            let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
            let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
            let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
            let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
              M.alloc α15 in
            let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
              pointer_coercion "Unsize" α16 in
            let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
            let* α19 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_v1"] α6 α18 in
            let* α20 : unit := std.io.stdio._print α19 in
            M.alloc α20 in
          M.alloc tt in
        let* _ : M.Val unit :=
          let* α0 : alloc.boxed.Box.t i32.t alloc.alloc.Global.t :=
            M.read movable in
          let* α1 : unit := core.mem.drop α0 in
          M.alloc α1 in
        M.alloc tt) in
    let* _ : M.Val unit :=
      let* α0 : type not implemented := M.read consume in
      let* α1 : unit :=
        (core.ops.function.FnOnce.call_once
            (Self := type not implemented)
            (Trait := ltac:(refine _)))
          α0
          tt in
      M.alloc α1 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
