(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // We can use this function here, and define it somewhere later
    fizzbuzz_to(100);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* α0 : M.Val u32.t := M.alloc 100 in
      let* α1 : u32.t := M.read α0 in
      let* α2 : unit := functions.fizzbuzz_to α1 in
      M.alloc α2 in
    M.alloc tt).

(*
fn is_divisible_by(lhs: u32, rhs: u32) -> bool {
    // Corner case, early return
    if rhs == 0 {
        return false;
    }

    // This is an expression, the `return` keyword is not necessary here
    lhs % rhs == 0
}
*)
Definition is_divisible_by (lhs : u32.t) (rhs : u32.t) : M bool.t :=
  let return_ := M.return_ (R := bool.t) in
  let* lhs : M.Val u32.t := M.alloc lhs in
  let* rhs : M.Val u32.t := M.alloc rhs in
  M.function_body
    (let* _ : M.Val unit :=
      let* α0 : M.Val u32.t := M.alloc 0 in
      let* α1 : M.Val bool.t := BinOp.eq rhs α0 in
      let* α2 : M.Val bool.t := use α1 in
      let* α3 : bool.t := M.read α2 in
      if (α3 : bool) then
        let* _ : M.Val never.t :=
          let* α0 : M.Val bool.t := M.alloc false in
          let* α1 : bool.t := M.read α0 in
          return_ α1 in
        let* α0 : M.Val unit := M.alloc tt in
        never_to_any α0
      else
        M.alloc tt in
    let* α0 : M.Val u32.t := BinOp.rem lhs rhs in
    let* α1 : M.Val u32.t := M.alloc 0 in
    BinOp.eq α0 α1).

(*
fn fizzbuzz(n: u32) -> () {
    if is_divisible_by(n, 15) {
        println!("fizzbuzz");
    } else if is_divisible_by(n, 3) {
        println!("fizz");
    } else if is_divisible_by(n, 5) {
        println!("buzz");
    } else {
        println!("{}", n);
    }
}
*)
Definition fizzbuzz (n : u32.t) : M unit :=
  let* n : M.Val u32.t := M.alloc n in
  M.function_body
    (let* α0 : u32.t := M.read n in
    let* α1 : M.Val u32.t := M.alloc 15 in
    let* α2 : u32.t := M.read α1 in
    let* α3 : bool.t := functions.is_divisible_by α0 α2 in
    let* α4 : M.Val bool.t := M.alloc α3 in
    let* α5 : M.Val bool.t := use α4 in
    let* α6 : bool.t := M.read α5 in
    if (α6 : bool) then
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "fizzbuzz
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_const"] α6 in
          let* α8 : unit := std.io.stdio._print α7 in
          M.alloc α8 in
        M.alloc tt in
      M.alloc tt
    else
      let* α0 : u32.t := M.read n in
      let* α1 : M.Val u32.t := M.alloc 3 in
      let* α2 : u32.t := M.read α1 in
      let* α3 : bool.t := functions.is_divisible_by α0 α2 in
      let* α4 : M.Val bool.t := M.alloc α3 in
      let* α5 : M.Val bool.t := use α4 in
      let* α6 : bool.t := M.read α5 in
      if (α6 : bool) then
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) := M.alloc [ mk_str "fizz
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_const"] α6 in
            let* α8 : unit := std.io.stdio._print α7 in
            M.alloc α8 in
          M.alloc tt in
        M.alloc tt
      else
        let* α0 : u32.t := M.read n in
        let* α1 : M.Val u32.t := M.alloc 5 in
        let* α2 : u32.t := M.read α1 in
        let* α3 : bool.t := functions.is_divisible_by α0 α2 in
        let* α4 : M.Val bool.t := M.alloc α3 in
        let* α5 : M.Val bool.t := use α4 in
        let* α6 : bool.t := M.read α5 in
        if (α6 : bool) then
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str "buzz
" ] in
              let* α1 : ref (array (ref str.t)) := borrow α0 in
              let* α2 : M.Val (array (ref str.t)) := deref α1 in
              let* α3 : ref (array (ref str.t)) := borrow α2 in
              let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
              let* α5 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α4 in
              let* α6 : ref (slice (ref str.t)) := M.read α5 in
              let* α7 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_const"] α6 in
              let* α8 : unit := std.io.stdio._print α7 in
              M.alloc α8 in
            M.alloc tt in
          M.alloc tt
        else
          let* _ : M.Val unit :=
            let* _ : M.Val unit :=
              let* α0 : M.Val (array (ref str.t)) :=
                M.alloc [ mk_str ""; mk_str "
" ] in
              let* α1 : ref (array (ref str.t)) := borrow α0 in
              let* α2 : M.Val (array (ref str.t)) := deref α1 in
              let* α3 : ref (array (ref str.t)) := borrow α2 in
              let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
              let* α5 : M.Val (ref (slice (ref str.t))) :=
                pointer_coercion "Unsize" α4 in
              let* α6 : ref (slice (ref str.t)) := M.read α5 in
              let* α7 : ref u32.t := borrow n in
              let* α8 : M.Val u32.t := deref α7 in
              let* α9 : ref u32.t := borrow α8 in
              let* α10 : core.fmt.rt.Argument.t :=
                core.fmt.rt.Argument.t::["new_display"] α9 in
              let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
              let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α11 ] in
              let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
              let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
              let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
              let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc α15 in
              let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
                pointer_coercion "Unsize" α16 in
              let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
              let* α19 : core.fmt.Arguments.t :=
                core.fmt.Arguments.t::["new_v1"] α6 α18 in
              let* α20 : unit := std.io.stdio._print α19 in
              M.alloc α20 in
            M.alloc tt in
          M.alloc tt).

(*
fn fizzbuzz_to(n: u32) {
    for n in 1..=n {
        fizzbuzz(n);
    }
}
*)
Definition fizzbuzz_to (n : u32.t) : M unit :=
  let* n : M.Val u32.t := M.alloc n in
  M.function_body
    (let* α0 : M.Val u32.t := M.alloc 1 in
    let* α1 : u32.t := M.read α0 in
    let* α2 : u32.t := M.read n in
    let* α3 : core.ops.range.RangeInclusive.t u32.t :=
      (core.ops.range.RangeInclusive.t u32.t)::["new"] α1 α2 in
    let* α4 : core.ops.range.RangeInclusive.t u32.t :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.RangeInclusive.t u32.t)
          (Trait := ltac:(refine _)))
        α3 in
    let* α5 : M.Val (core.ops.range.RangeInclusive.t u32.t) := M.alloc α4 in
    let* α6 := M.read α5 in
    let* α7 : M.Val unit :=
      match α6 with
      | iter =>
        let* iter := M.alloc iter in
        loop
          (let* _ : M.Val unit :=
            let* α0 : mut_ref (core.ops.range.RangeInclusive.t u32.t) :=
              borrow_mut iter in
            let* α1 : M.Val (core.ops.range.RangeInclusive.t u32.t) :=
              deref α0 in
            let* α2 : mut_ref (core.ops.range.RangeInclusive.t u32.t) :=
              borrow_mut α1 in
            let* α3 : core.option.Option.t u32.t :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.RangeInclusive.t u32.t)
                  (Trait := ltac:(refine _)))
                α2 in
            let* α4 : M.Val (core.option.Option.t u32.t) := M.alloc α3 in
            let* α5 := M.read α4 in
            match α5 with
            | core.option.Option.None  =>
              let* α0 : M.Val never.t := Break in
              never_to_any α0
            | core.option.Option.Some n =>
              let* n := M.alloc n in
              let* _ : M.Val unit :=
                let* α0 : u32.t := M.read n in
                let* α1 : unit := functions.fizzbuzz α0 in
                M.alloc α1 in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α7).
