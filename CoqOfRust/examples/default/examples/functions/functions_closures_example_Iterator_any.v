(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let vec1 = vec![1, 2, 3];
    let vec2 = vec![4, 5, 6];

    // `iter()` for vecs yields `&i32`. Destructure to `i32`.
    println!("2 in vec1: {}", vec1.iter().any(|&x| x == 2));
    // `into_iter()` for vecs yields `i32`. No destructuring required.
    println!("2 in vec2: {}", vec2.into_iter().any(|x| x == 2));

    // `iter()` only borrows `vec1` and its elements, so they can be used again
    println!("vec1 len: {}", vec1.len());
    println!("First element of vec1 is: {}", vec1[0]);
    // `into_iter()` does move `vec2` and its elements, so they cannot be used again
    // println!("First element of vec2 is: {}", vec2[0]);
    // println!("vec2 len: {}", vec2.len());
    // TODO: uncomment two lines above and see compiler errors.

    let array1 = [1, 2, 3];
    let array2 = [4, 5, 6];

    // `iter()` for arrays yields `&i32`.
    println!("2 in array1: {}", array1.iter().any(|&x| x == 2));
    // `into_iter()` for arrays yields `i32`.
    println!("2 in array2: {}", array2.into_iter().any(|x| *x == 2));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* vec1 : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
      let* α0 : M.Val i32.t := M.alloc 1 in
      let* α1 : M.Val i32.t := M.alloc 2 in
      let* α2 : M.Val i32.t := M.alloc 3 in
      let* α3 : M.Val (array i32.t) := M.alloc [ α0; α1; α2 ] in
      let* α4 : M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 : M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t) :=
        pointer_coercion "Unsize" α4 in
      let* α6 : alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t :=
        M.read α5 in
      let* α7 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t :=
        (slice i32.t)::["into_vec"] α6 in
      M.alloc α7 in
    let* vec2 : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
      let* α0 : M.Val i32.t := M.alloc 4 in
      let* α1 : M.Val i32.t := M.alloc 5 in
      let* α2 : M.Val i32.t := M.alloc 6 in
      let* α3 : M.Val (array i32.t) := M.alloc [ α0; α1; α2 ] in
      let* α4 : M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 : M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t) :=
        pointer_coercion "Unsize" α4 in
      let* α6 : alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t :=
        M.read α5 in
      let* α7 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t :=
        (slice i32.t)::["into_vec"] α6 in
      M.alloc α7 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "2 in vec1: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
          borrow vec1 in
        let* α8 : ref (slice i32.t) :=
          (core.ops.deref.Deref.deref
              (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α7 in
        let* α9 : M.Val (slice i32.t) := deref α8 in
        let* α10 : ref (slice i32.t) := borrow α9 in
        let* α11 : core.slice.iter.Iter.t i32.t :=
          (slice i32.t)::["iter"] α10 in
        let* α12 : M.Val (core.slice.iter.Iter.t i32.t) := M.alloc α11 in
        let* α13 : mut_ref (core.slice.iter.Iter.t i32.t) := borrow_mut α12 in
        let* α14 : type not implemented :=
          M.read
            (let* α0 : M.Val i32.t := M.alloc 2 in
            BinOp.eq x α0) in
        let* α15 : bool.t :=
          (core.iter.traits.iterator.Iterator.any
              (Self := core.slice.iter.Iter.t i32.t)
              (Trait := ltac:(refine _)))
            α13
            α14 in
        let* α16 : M.Val bool.t := M.alloc α15 in
        let* α17 : ref bool.t := borrow α16 in
        let* α18 : M.Val bool.t := deref α17 in
        let* α19 : ref bool.t := borrow α18 in
        let* α20 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α19 in
        let* α21 : M.Val core.fmt.rt.Argument.t := M.alloc α20 in
        let* α22 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α21 ] in
        let* α23 : ref (array core.fmt.rt.Argument.t) := borrow α22 in
        let* α24 : M.Val (array core.fmt.rt.Argument.t) := deref α23 in
        let* α25 : ref (array core.fmt.rt.Argument.t) := borrow α24 in
        let* α26 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α25 in
        let* α27 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α26 in
        let* α28 : ref (slice core.fmt.rt.Argument.t) := M.read α27 in
        let* α29 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α28 in
        let* α30 : unit := std.io.stdio._print α29 in
        M.alloc α30 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "2 in vec2: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t := M.read vec2 in
        let* α8 : alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t :=
          (core.iter.traits.collect.IntoIterator.into_iter
              (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α7 in
        let* α9 :
            M.Val (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t) :=
          M.alloc α8 in
        let* α10 :
            mut_ref
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t) :=
          borrow_mut α9 in
        let* α11 : type not implemented :=
          M.read
            (let* α0 : M.Val i32.t := M.alloc 2 in
            BinOp.eq x α0) in
        let* α12 : bool.t :=
          (core.iter.traits.iterator.Iterator.any
              (Self :=
                alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α10
            α11 in
        let* α13 : M.Val bool.t := M.alloc α12 in
        let* α14 : ref bool.t := borrow α13 in
        let* α15 : M.Val bool.t := deref α14 in
        let* α16 : ref bool.t := borrow α15 in
        let* α17 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α16 in
        let* α18 : M.Val core.fmt.rt.Argument.t := M.alloc α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α18 ] in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (array core.fmt.rt.Argument.t) := deref α20 in
        let* α22 : ref (array core.fmt.rt.Argument.t) := borrow α21 in
        let* α23 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α22 in
        let* α24 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α23 in
        let* α25 : ref (slice core.fmt.rt.Argument.t) := M.read α24 in
        let* α26 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α25 in
        let* α27 : unit := std.io.stdio._print α26 in
        M.alloc α27 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "vec1 len: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
          borrow vec1 in
        let* α8 : usize.t :=
          (alloc.vec.Vec.t i32.t alloc.alloc.Global.t)::["len"] α7 in
        let* α9 : M.Val usize.t := M.alloc α8 in
        let* α10 : ref usize.t := borrow α9 in
        let* α11 : M.Val usize.t := deref α10 in
        let* α12 : ref usize.t := borrow α11 in
        let* α13 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α14 ] in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := deref α16 in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α18 in
        let* α20 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α19 in
        let* α21 : ref (slice core.fmt.rt.Argument.t) := M.read α20 in
        let* α22 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α21 in
        let* α23 : unit := std.io.stdio._print α22 in
        M.alloc α23 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "First element of vec1 is: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
          borrow vec1 in
        let* α8 : M.Val usize.t := M.alloc 0 in
        let* α9 : usize.t := M.read α8 in
        let* α10 : ref i32.t :=
          (core.ops.index.Index.index
              (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α7
            α9 in
        let* α11 : M.Val i32.t := deref α10 in
        let* α12 : ref i32.t := borrow α11 in
        let* α13 : M.Val i32.t := deref α12 in
        let* α14 : ref i32.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α16 ] in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) := deref α18 in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α20 in
        let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α21 in
        let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
        let* α24 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α23 in
        let* α25 : unit := std.io.stdio._print α24 in
        M.alloc α25 in
      M.alloc tt in
    let* array1 : M.Val (array i32.t) :=
      let* α0 : M.Val i32.t := M.alloc 1 in
      let* α1 : M.Val i32.t := M.alloc 2 in
      let* α2 : M.Val i32.t := M.alloc 3 in
      M.alloc [ α0; α1; α2 ] in
    let* array2 : M.Val (array i32.t) :=
      let* α0 : M.Val i32.t := M.alloc 4 in
      let* α1 : M.Val i32.t := M.alloc 5 in
      let* α2 : M.Val i32.t := M.alloc 6 in
      M.alloc [ α0; α1; α2 ] in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "2 in array1: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (array i32.t) := borrow array1 in
        let* α8 : M.Val (ref (array i32.t)) := M.alloc α7 in
        let* α9 : M.Val (ref (slice i32.t)) := pointer_coercion "Unsize" α8 in
        let* α10 : ref (slice i32.t) := M.read α9 in
        let* α11 : core.slice.iter.Iter.t i32.t :=
          (slice i32.t)::["iter"] α10 in
        let* α12 : M.Val (core.slice.iter.Iter.t i32.t) := M.alloc α11 in
        let* α13 : mut_ref (core.slice.iter.Iter.t i32.t) := borrow_mut α12 in
        let* α14 : type not implemented :=
          M.read
            (let* α0 : M.Val i32.t := M.alloc 2 in
            BinOp.eq x α0) in
        let* α15 : bool.t :=
          (core.iter.traits.iterator.Iterator.any
              (Self := core.slice.iter.Iter.t i32.t)
              (Trait := ltac:(refine _)))
            α13
            α14 in
        let* α16 : M.Val bool.t := M.alloc α15 in
        let* α17 : ref bool.t := borrow α16 in
        let* α18 : M.Val bool.t := deref α17 in
        let* α19 : ref bool.t := borrow α18 in
        let* α20 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α19 in
        let* α21 : M.Val core.fmt.rt.Argument.t := M.alloc α20 in
        let* α22 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α21 ] in
        let* α23 : ref (array core.fmt.rt.Argument.t) := borrow α22 in
        let* α24 : M.Val (array core.fmt.rt.Argument.t) := deref α23 in
        let* α25 : ref (array core.fmt.rt.Argument.t) := borrow α24 in
        let* α26 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α25 in
        let* α27 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α26 in
        let* α28 : ref (slice core.fmt.rt.Argument.t) := M.read α27 in
        let* α29 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α28 in
        let* α30 : unit := std.io.stdio._print α29 in
        M.alloc α30 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "2 in array2: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref (array i32.t) := borrow array2 in
        let* α8 : core.slice.iter.Iter.t i32.t :=
          (core.iter.traits.collect.IntoIterator.into_iter
              (Self := ref (array i32.t))
              (Trait := ltac:(refine _)))
            α7 in
        let* α9 : M.Val (core.slice.iter.Iter.t i32.t) := M.alloc α8 in
        let* α10 : mut_ref (core.slice.iter.Iter.t i32.t) := borrow_mut α9 in
        let* α11 : type not implemented :=
          M.read
            (let* α0 : ref i32.t := M.read x in
            let* α1 : M.Val i32.t := deref α0 in
            let* α2 : M.Val i32.t := M.alloc 2 in
            BinOp.eq α1 α2) in
        let* α12 : bool.t :=
          (core.iter.traits.iterator.Iterator.any
              (Self := core.slice.iter.Iter.t i32.t)
              (Trait := ltac:(refine _)))
            α10
            α11 in
        let* α13 : M.Val bool.t := M.alloc α12 in
        let* α14 : ref bool.t := borrow α13 in
        let* α15 : M.Val bool.t := deref α14 in
        let* α16 : ref bool.t := borrow α15 in
        let* α17 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α16 in
        let* α18 : M.Val core.fmt.rt.Argument.t := M.alloc α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α18 ] in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (array core.fmt.rt.Argument.t) := deref α20 in
        let* α22 : ref (array core.fmt.rt.Argument.t) := borrow α21 in
        let* α23 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α22 in
        let* α24 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α23 in
        let* α25 : ref (slice core.fmt.rt.Argument.t) := M.read α24 in
        let* α26 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α25 in
        let* α27 : unit := std.io.stdio._print α26 in
        M.alloc α27 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
