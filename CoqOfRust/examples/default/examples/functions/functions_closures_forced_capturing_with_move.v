(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // `Vec` has non-copy semantics.
    let haystack = vec![1, 2, 3];

    let contains = move |needle| haystack.contains(needle);

    println!("{}", contains(&1));
    println!("{}", contains(&4));

    // println!("There're {} elements in vec", haystack.len());
    // ^ Uncommenting above line will result in compile-time error
    // because borrow checker doesn't allow re-using variable after it
    // has been moved.

    // Removing `move` from closure's signature will cause closure
    // to borrow _haystack_ variable immutably, hence _haystack_ is still
    // available and uncommenting above line will not cause an error.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* haystack : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
      let* α0 : M.Val i32.t := M.alloc 1 in
      let* α1 : M.Val i32.t := M.alloc 2 in
      let* α2 : M.Val i32.t := M.alloc 3 in
      let* α3 : M.Val (array i32.t) := M.alloc [ α0; α1; α2 ] in
      let* α4 : M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 : M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t) :=
        pointer_coercion "Unsize" α4 in
      let* α6 := M.read α5 in
      let* α7 := (slice i32.t)::["into_vec"] α6 in
      M.alloc α7 in
    let* contains : M.Val type not implemented :=
      M.copy
        (let* α0 : M.Val (ref (alloc.vec.Vec.t i32.t alloc.alloc.Global.t)) :=
          borrow haystack in
        let* α1 := M.read α0 in
        let* α2 :=
          (core.ops.deref.Deref.deref
              (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : M.Val (ref (slice i32.t)) := M.alloc α2 in
        let* α4 : M.Val (slice i32.t) := deref α3 in
        let* α5 : M.Val (ref (slice i32.t)) := borrow α4 in
        let* α6 := M.read α5 in
        let* α7 := M.read needle in
        let* α8 := (slice i32.t)::["contains"] α6 α7 in
        M.alloc α8) in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref type not implemented) := borrow contains in
        let* α5 := M.read α4 in
        let* α6 : M.Val i32.t := M.alloc 1 in
        let* α7 : M.Val (ref i32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α5
            (α8) in
        let* α10 : M.Val bool.t := M.alloc α9 in
        let* α11 : M.Val (ref bool.t) := borrow α10 in
        let* α12 := M.read α11 in
        let* α13 := core.fmt.rt.Argument.t::["new_display"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α14 ] in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 := M.read α17 in
        let* α19 := core.fmt.Arguments.t::["new_v1"] α3 α18 in
        let* α20 := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref type not implemented) := borrow contains in
        let* α5 := M.read α4 in
        let* α6 : M.Val i32.t := M.alloc 4 in
        let* α7 : M.Val (ref i32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α5
            (α8) in
        let* α10 : M.Val bool.t := M.alloc α9 in
        let* α11 : M.Val (ref bool.t) := borrow α10 in
        let* α12 := M.read α11 in
        let* α13 := core.fmt.rt.Argument.t::["new_display"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α14 ] in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 := M.read α17 in
        let* α19 := core.fmt.Arguments.t::["new_v1"] α3 α18 in
        let* α20 := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    M.alloc tt).
