(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let outer_var = 42;

    // A regular function can't refer to variables in the enclosing environment
    //fn function(i: i32) -> i32 { i + outer_var }
    // TODO: uncomment the line above and see the compiler error. The compiler
    // suggests that we define a closure instead.

    // Closures are anonymous, here we are binding them to references
    // Annotation is identical to function annotation but is optional
    // as are the `{}` wrapping the body. These nameless functions
    // are assigned to appropriately named variables.
    let closure_annotated = |i: i32| -> i32 { i + outer_var };
    let closure_inferred = |i| i + outer_var;

    // Call the closures.
    println!("closure_annotated: {}", closure_annotated(1));
    println!("closure_inferred: {}", closure_inferred(1));
    // Once closure's type has been inferred, it cannot be inferred again with another type.
    //println!("cannot reuse closure_inferred with another type: {}", closure_inferred(42i64));
    // TODO: uncomment the line above and see the compiler error.

    // A closure taking no arguments which returns an `i32`.
    // The return type is inferred.
    let one = || 1;
    println!("closure returning one: {}", one());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* outer_var : M.Val i32.t :=
      let* α0 : M.Val i32.t := M.alloc 42 in
      M.copy α0 in
    let* closure_annotated : M.Val type not implemented :=
      M.copy (BinOp.add i outer_var) in
    let* closure_inferred : M.Val type not implemented :=
      M.copy (BinOp.add i outer_var) in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "closure_annotated: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref type not implemented) :=
          borrow closure_annotated in
        let* α5 := M.read α4 in
        let* α6 : M.Val i32.t := M.alloc 1 in
        let* α7 := M.read α6 in
        let* α8 :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α5
            (α7) in
        let* α9 : M.Val i32.t := M.alloc α8 in
        let* α10 : M.Val (ref i32.t) := borrow α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.rt.Argument.t::["new_display"] α11 in
        let* α13 : M.Val core.fmt.rt.Argument.t := M.alloc α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α13 ] in
        let* α15 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α14 in
        let* α16 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α15 in
        let* α17 := M.read α16 in
        let* α18 := core.fmt.Arguments.t::["new_v1"] α3 α17 in
        let* α19 := std.io.stdio._print α18 in
        M.alloc α19 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "closure_inferred: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref type not implemented) := borrow closure_inferred in
        let* α5 := M.read α4 in
        let* α6 : M.Val i32.t := M.alloc 1 in
        let* α7 := M.read α6 in
        let* α8 :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α5
            (α7) in
        let* α9 : M.Val i32.t := M.alloc α8 in
        let* α10 : M.Val (ref i32.t) := borrow α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.rt.Argument.t::["new_display"] α11 in
        let* α13 : M.Val core.fmt.rt.Argument.t := M.alloc α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α13 ] in
        let* α15 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α14 in
        let* α16 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α15 in
        let* α17 := M.read α16 in
        let* α18 := core.fmt.Arguments.t::["new_v1"] α3 α17 in
        let* α19 := std.io.stdio._print α18 in
        M.alloc α19 in
      M.alloc tt in
    let* one : M.Val type not implemented := M.copy (M.alloc 1) in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "closure returning one: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref type not implemented) := borrow one in
        let* α5 := M.read α4 in
        let* α6 :=
          (core.ops.function.Fn.call
              (Self := type not implemented)
              (Trait := ltac:(refine _)))
            α5
            tt in
        let* α7 : M.Val i32.t := M.alloc α6 in
        let* α8 : M.Val (ref i32.t) := borrow α7 in
        let* α9 := M.read α8 in
        let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α12 in
        let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α13 in
        let* α15 := M.read α14 in
        let* α16 := core.fmt.Arguments.t::["new_v1"] α3 α15 in
        let* α17 := std.io.stdio._print α16 in
        M.alloc α17 in
      M.alloc tt in
    M.alloc tt).
