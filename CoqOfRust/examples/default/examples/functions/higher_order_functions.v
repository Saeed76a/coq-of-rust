(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn is_odd(n: u32) -> bool {
    n % 2 == 1
}
*)
Definition is_odd (n : M.Val u32.t) : M bool.t :=
  M.function_body
    (let* α0 : M.Val u32.t := M.alloc 2 in
    let* α1 : M.Val u32.t := BinOp.rem n α0 in
    let* α2 : M.Val u32.t := M.alloc 1 in
    BinOp.eq α1 α2).

(*
fn main() {
    println!("Find the sum of all the squared odd numbers under 1000");
    let upper = 1000;

    // Imperative approach
    // Declare accumulator variable
    let mut acc = 0;
    // Iterate: 0, 1, 2, ... to infinity
    for n in 0.. {
        // Square the number
        let n_squared = n * n;

        if n_squared >= upper {
            // Break loop if exceeded the upper limit
            break;
        } else if is_odd(n_squared) {
            // Accumulate value, if it's odd
            acc += n_squared;
        }
    }
    println!("imperative style: {}", acc);

    // Functional approach
    let sum_of_squared_odd_numbers: u32 = (0..)
        .map(|n| n * n) // All natural numbers squared
        .take_while(|&n_squared| n_squared < upper) // Below upper limit
        .filter(|&n_squared| is_odd(n_squared)) // That are odd
        .sum(); // Sum them
    println!("functional style: {}", sum_of_squared_odd_numbers);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [ mk_str "Find the sum of all the squared odd numbers under 1000
"
            ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := core.fmt.Arguments.t::["new_const"] α2 in
        let* α4 : M.Val core.fmt.Arguments.t := M.alloc α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt in
    let* upper : M.Val u32.t :=
      let* α0 : M.Val u32.t := M.alloc 1000 in
      M.copy α0 in
    let* acc : M.Val u32.t :=
      let* α0 : M.Val u32.t := M.alloc 0 in
      M.copy α0 in
    let* _ : M.Val unit :=
      let* α0 : M.Val u32.t := M.alloc 0 in
      let* α1 := M.read α0 in
      let* α2 : M.Val (core.ops.range.RangeFrom.t u32.t) :=
        M.alloc {| core.ops.range.RangeFrom.start := α1; |} in
      let* α3 :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.RangeFrom.t u32.t)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 : M.Val (core.ops.range.RangeFrom.t u32.t) := M.alloc α3 in
      let* α5 := M.read α4 in
      let* α6 : M.Val unit :=
        match α5 with
        | iter =>
          let* iter := M.alloc iter in
          loop
            (let* _ : M.Val unit :=
              let* α0 : M.Val (mut_ref (core.ops.range.RangeFrom.t u32.t)) :=
                borrow_mut iter in
              let* α1 :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.RangeFrom.t u32.t)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 : M.Val (core.option.Option.t u32.t) := M.alloc α1 in
              let* α3 := M.read α2 in
              match α3 with
              | core.option.Option.None  =>
                let* α0 : M.Val never.t := Break in
                never_to_any α0
              | core.option.Option.Some n =>
                let* n := M.alloc n in
                let* n_squared : M.Val u32.t :=
                  let* α0 : M.Val u32.t := BinOp.mul n n in
                  M.copy α0 in
                let* α0 : M.Val bool.t := BinOp.ge n_squared upper in
                let* α1 : M.Val bool.t := use α0 in
                let* α2 := M.read α1 in
                if (α2 : bool) then
                  let* _ : M.Val never.t := Break in
                  let* α0 : M.Val unit := M.alloc tt in
                  never_to_any α0
                else
                  let* α0 := higher_order_functions.is_odd n_squared in
                  let* α1 : M.Val bool.t := M.alloc α0 in
                  let* α2 : M.Val bool.t := use α1 in
                  let* α3 := M.read α2 in
                  if (α3 : bool) then
                    let* _ : M.Val unit := assign_op add acc n_squared in
                    M.alloc tt
                  else
                    M.alloc tt
              end in
            M.alloc tt)
        end in
      use α6 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "imperative style: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : M.Val (ref u32.t) := borrow acc in
        let* α4 := core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
        let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
        let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α6 in
        let* α8 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α7 in
        let* α9 := core.fmt.Arguments.t::["new_v1"] α2 α8 in
        let* α10 : M.Val core.fmt.Arguments.t := M.alloc α9 in
        let* α11 := std.io.stdio._print α10 in
        M.alloc α11 in
      M.alloc tt in
    let* sum_of_squared_odd_numbers : M.Val u32.t :=
      let* α0 : M.Val u32.t := M.alloc 0 in
      let* α1 := M.read α0 in
      let* α2 : M.Val (core.ops.range.RangeFrom.t u32.t) :=
        M.alloc {| core.ops.range.RangeFrom.start := α1; |} in
      let* α3 :=
        (core.iter.traits.iterator.Iterator.map
            (Self := core.ops.range.RangeFrom.t u32.t)
            (Trait := ltac:(refine _)))
          α2
          (BinOp.mul n n) in
      let* α4 :
          M.Val
            (core.iter.adapters.map.Map.t
              (core.ops.range.RangeFrom.t u32.t)
              type not implemented) :=
        M.alloc α3 in
      let* α5 :=
        (core.iter.traits.iterator.Iterator.take_while
            (Self :=
              core.iter.adapters.map.Map.t
                (core.ops.range.RangeFrom.t u32.t)
                type not implemented)
            (Trait := ltac:(refine _)))
          α4
          (BinOp.lt n_squared upper) in
      let* α6 :
          M.Val
            (core.iter.adapters.take_while.TakeWhile.t
              (core.iter.adapters.map.Map.t
                (core.ops.range.RangeFrom.t u32.t)
                type not implemented)
              type not implemented) :=
        M.alloc α5 in
      let* α7 :=
        (core.iter.traits.iterator.Iterator.filter
            (Self :=
              core.iter.adapters.take_while.TakeWhile.t
                (core.iter.adapters.map.Map.t
                  (core.ops.range.RangeFrom.t u32.t)
                  type not implemented)
                type not implemented)
            (Trait := ltac:(refine _)))
          α6
          (let* α0 := higher_order_functions.is_odd n_squared in
          M.alloc α0) in
      let* α8 :
          M.Val
            (core.iter.adapters.filter.Filter.t
              (core.iter.adapters.take_while.TakeWhile.t
                (core.iter.adapters.map.Map.t
                  (core.ops.range.RangeFrom.t u32.t)
                  type not implemented)
                type not implemented)
              type not implemented) :=
        M.alloc α7 in
      let* α9 :=
        (core.iter.traits.iterator.Iterator.sum
            (Self :=
              core.iter.adapters.filter.Filter.t
                (core.iter.adapters.take_while.TakeWhile.t
                  (core.iter.adapters.map.Map.t
                    (core.ops.range.RangeFrom.t u32.t)
                    type not implemented)
                  type not implemented)
                type not implemented)
            (Trait := ltac:(refine _)))
          α8 in
      M.alloc α9 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "functional style: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : M.Val (ref u32.t) := borrow sum_of_squared_odd_numbers in
        let* α4 := core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : M.Val core.fmt.rt.Argument.t := M.alloc α4 in
        let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
        let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α6 in
        let* α8 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α7 in
        let* α9 := core.fmt.Arguments.t::["new_v1"] α2 α8 in
        let* α10 : M.Val core.fmt.Arguments.t := M.alloc α9 in
        let* α11 := std.io.stdio._print α10 in
        M.alloc α11 in
      M.alloc tt in
    M.alloc tt).
