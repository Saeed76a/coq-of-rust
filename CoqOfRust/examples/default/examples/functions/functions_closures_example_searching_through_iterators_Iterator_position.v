(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let vec = vec![1, 9, 3, 3, 13, 2];

    // `iter()` for vecs yields `&i32` and `position()` does not take a reference, so
    // we have to destructure `&i32` to `i32`
    let index_of_first_even_number = vec.iter().position(|&x| x % 2 == 0);
    assert_eq!(index_of_first_even_number, Some(5));

    // `into_iter()` for vecs yields `i32` and `position()` does not take a reference, so
    // we do not have to destructure
    let index_of_first_negative_number = vec.into_iter().position(|x| x < 0);
    assert_eq!(index_of_first_negative_number, None);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* vec :
        ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 9 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α3 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α4 : ltac:(refine (M.Val i32.t)) := M.alloc 13 in
      let* α5 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α6 : ltac:(refine (M.Val (array i32.t))) :=
        M.alloc [ α0; α1; α2; α3; α4; α5 ] in
      let* α7 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α6 in
      let* α8 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α7 in
      let* α9 := (slice i32.t)::["into_vec"] α8 in
      M.alloc α9 in
    let* index_of_first_even_number :
        ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref (alloc.vec.Vec.t i32.t alloc.alloc.Global.t)))) :=
        borrow vec in
      let* α1 :=
        (core.ops.deref.Deref.deref
            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine (M.Val (ref (slice i32.t)))) := M.alloc α1 in
      let* α3 : ltac:(refine (M.Val (slice i32.t))) := deref α2 in
      let* α4 : ltac:(refine (M.Val (ref (slice i32.t)))) := borrow α3 in
      let* α5 := (slice i32.t)::["iter"] α4 in
      let* α6 : ltac:(refine (M.Val (core.slice.iter.Iter.t i32.t))) :=
        M.alloc α5 in
      let* α7 :
          ltac:(refine (M.Val (mut_ref (core.slice.iter.Iter.t i32.t)))) :=
        borrow_mut α6 in
      let* α8 :=
        (core.iter.traits.iterator.Iterator.position
            (Self := core.slice.iter.Iter.t i32.t)
            (Trait := ltac:(refine _)))
          α7
          (let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
          let* α1 : ltac:(refine (M.Val i32.t)) := BinOp.rem x α0 in
          let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
          BinOp.eq α1 α2) in
      M.alloc α8 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
        borrow index_of_first_even_number in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val usize.t)) := M.alloc 5 in
      let* α3 := M.read α2 in
      let* α4 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
        M.alloc (core.option.Option.Some α3) in
      let* α5 : ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
        borrow α4 in
      let* α6 := M.read α5 in
      let* α7 :
          ltac:(refine
            (M.Val
              ((ref (core.option.Option.t usize.t))
              *
              (ref (core.option.Option.t usize.t))))) :=
        M.alloc (α1, α6) in
      let* α8 := M.read α7 in
      match α8 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
          borrow α2 in
        let* α4 :=
          (core.cmp.PartialEq.eq
              (Self := core.option.Option.t usize.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := M.alloc α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := UnOp.not α5 in
        let* α7 : ltac:(refine (M.Val bool.t)) := use α6 in
        let* α8 := M.read α7 in
        if (α8 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
              deref left_val in
            let* α1 :
                ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
              deref right_val in
            let* α3 :
                ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            let* α5 := core.panicking.assert_failed kind α1 α3 α4 in
            M.alloc α5 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    let* index_of_first_negative_number :
        ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
      let* α0 :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          vec in
      let* α1 :
          ltac:(refine
            (M.Val
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))) :=
        M.alloc α0 in
      let* α2 :
          ltac:(refine
            (M.Val
              (mut_ref
                (alloc.vec.into_iter.IntoIter.t
                  i32.t
                  alloc.alloc.Global.t)))) :=
        borrow_mut α1 in
      let* α3 :=
        (core.iter.traits.iterator.Iterator.position
            (Self := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α2
          (let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 0 in
          BinOp.lt x α0) in
      M.alloc α3 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
        borrow index_of_first_negative_number in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
        M.alloc core.option.Option.None in
      let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
        borrow α2 in
      let* α4 := M.read α3 in
      let* α5 :
          ltac:(refine
            (M.Val
              ((ref (core.option.Option.t usize.t))
              *
              (ref (core.option.Option.t usize.t))))) :=
        M.alloc (α1, α4) in
      let* α6 := M.read α5 in
      match α6 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
          borrow α2 in
        let* α4 :=
          (core.cmp.PartialEq.eq
              (Self := core.option.Option.t usize.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := M.alloc α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := UnOp.not α5 in
        let* α7 : ltac:(refine (M.Val bool.t)) := use α6 in
        let* α8 := M.read α7 in
        if (α8 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
              deref left_val in
            let* α1 :
                ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (core.option.Option.t usize.t))) :=
              deref right_val in
            let* α3 :
                ltac:(refine (M.Val (ref (core.option.Option.t usize.t)))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            let* α5 := core.panicking.assert_failed kind α1 α3 α4 in
            M.alloc α5 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    M.alloc tt).
