(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn create_fn() -> impl Fn() {
    let text = "Fn".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fn : M _ (* OpaqueTy *) :=
  let* text : M.Val alloc.string.String.t :=
    let* α0 : ref str.t := M.read (mk_str "Fn") in
    let* α1 : alloc.string.String.t :=
      (alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ltac:(refine _)))
        α0 in
    M.alloc α1 in
  M.read
    (let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "This is a: "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref alloc.string.String.t := borrow text in
      let* α6 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α5 in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : ref (array core.fmt.rt.Argument.t) := borrow α8 in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α9 in
      let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α10 in
      let* α12 : ref (slice core.fmt.rt.Argument.t) := M.read α11 in
      let* α13 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α12 in
      let* α14 : unit := std.io.stdio._print α13 in
      M.alloc α14 in
    M.alloc tt).

Error OpaqueTy.

(*
fn create_fnmut() -> impl FnMut() {
    let text = "FnMut".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fnmut : M _ (* OpaqueTy *) :=
  let* text : M.Val alloc.string.String.t :=
    let* α0 : ref str.t := M.read (mk_str "FnMut") in
    let* α1 : alloc.string.String.t :=
      (alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ltac:(refine _)))
        α0 in
    M.alloc α1 in
  M.read
    (let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "This is a: "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref alloc.string.String.t := borrow text in
      let* α6 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α5 in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : ref (array core.fmt.rt.Argument.t) := borrow α8 in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α9 in
      let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α10 in
      let* α12 : ref (slice core.fmt.rt.Argument.t) := M.read α11 in
      let* α13 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α12 in
      let* α14 : unit := std.io.stdio._print α13 in
      M.alloc α14 in
    M.alloc tt).

(*
fn create_fnonce() -> impl FnOnce() {
    let text = "FnOnce".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fnonce : M _ (* OpaqueTy *) :=
  let* text : M.Val alloc.string.String.t :=
    let* α0 : ref str.t := M.read (mk_str "FnOnce") in
    let* α1 : alloc.string.String.t :=
      (alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ltac:(refine _)))
        α0 in
    M.alloc α1 in
  M.read
    (let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "This is a: "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref alloc.string.String.t := borrow text in
      let* α6 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α5 in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : ref (array core.fmt.rt.Argument.t) := borrow α8 in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α9 in
      let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α10 in
      let* α12 : ref (slice core.fmt.rt.Argument.t) := M.read α11 in
      let* α13 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α12 in
      let* α14 : unit := std.io.stdio._print α13 in
      M.alloc α14 in
    M.alloc tt).

(*
fn main() {
    let fn_plain = create_fn();
    let mut fn_mut = create_fnmut();
    let fn_once = create_fnonce();

    fn_plain();
    fn_mut();
    fn_once();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* fn_plain : M.Val type not implemented :=
    let* α0 : type not implemented :=
      functions_closures_as_output_parameters.create_fn in
    M.alloc α0 in
  let* fn_mut : M.Val type not implemented :=
    let* α0 : type not implemented :=
      functions_closures_as_output_parameters.create_fnmut in
    M.alloc α0 in
  let* fn_once : M.Val type not implemented :=
    let* α0 : type not implemented :=
      functions_closures_as_output_parameters.create_fnonce in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : ref type not implemented := borrow fn_plain in
    let* α1 : unit :=
      (core.ops.function.Fn.call
          (Self := type not implemented)
          (Trait := ltac:(refine _)))
        α0
        tt in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : mut_ref type not implemented := borrow_mut fn_mut in
    let* α1 : unit :=
      (core.ops.function.FnMut.call_mut
          (Self := type not implemented)
          (Trait := ltac:(refine _)))
        α0
        tt in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : type not implemented := M.read fn_once in
    let* α1 : unit :=
      (core.ops.function.FnOnce.call_once
          (Self := type not implemented)
          (Trait := ltac:(refine _)))
        α0
        tt in
    M.alloc α1 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
