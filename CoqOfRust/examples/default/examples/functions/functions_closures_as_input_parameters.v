(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn apply<F>(f: F)
where
    // The closure takes no input and returns nothing.
    F: FnOnce(),
{
    // ^ TODO: Try changing this to `Fn` or `FnMut`.

    f();
}
*)
Definition apply
    {F : Set}
    {ℋ_0 : core.ops.function.FnOnce.Trait F (Args := unit)}
    (f : F)
    : M unit :=
  let* f := M.alloc f in
  M.function_body
    (let* _ : M.Val unit :=
      let* α0 := M.read f in
      let* α1 :=
        (core.ops.function.FnOnce.call_once
            (Self := F)
            (Trait := ltac:(refine _)))
          α0
          tt in
      M.alloc α1 in
    M.alloc tt).

(*
fn apply_to_3<F>(f: F) -> i32
where
    // The closure takes an `i32` and returns an `i32`.
    F: Fn(i32) -> i32,
{
    f(3)
}
*)
Definition apply_to_3
    {F : Set}
    {ℋ_0 : core.ops.function.Fn.Trait F (Args := i32.t)}
    (f : F)
    : M i32.t :=
  let* f := M.alloc f in
  M.function_body
    (let* α0 : M.Val (ref F) := borrow f in
    let* α1 := M.read α0 in
    let* α2 : M.Val i32.t := M.alloc 3 in
    let* α3 := M.read α2 in
    let* α4 :=
      (core.ops.function.Fn.call (Self := F) (Trait := ltac:(refine _)))
        α1
        (α3) in
    M.alloc α4).

(*
fn main() {
    use std::mem;

    let greeting = "hello";
    // A non-copy type.
    // `to_owned` creates owned data from borrowed one
    let mut farewell = "goodbye".to_owned();

    // Capture 2 variables: `greeting` by reference and
    // `farewell` by value.
    let diary = || {
        // `greeting` is by reference: requires `Fn`.
        println!("I said {}.", greeting);

        // Mutation forces `farewell` to be captured by
        // mutable reference. Now requires `FnMut`.
        farewell.push_str("!!!");
        println!("Then I screamed {}.", farewell);
        println!("Now I can sleep. zzzzz");

        // Manually calling drop forces `farewell` to
        // be captured by value. Now requires `FnOnce`.
        mem::drop(farewell);
    };

    // Call the function which applies the closure.
    apply(diary);

    // `double` satisfies `apply_to_3`'s trait bound
    let double = |x| 2 * x;

    println!("3 doubled: {}", apply_to_3(double));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* greeting : M.Val (ref str.t) := M.copy (mk_str "hello") in
    let* farewell : M.Val alloc.string.String.t :=
      let* α0 : M.Val str.t := deref (mk_str "goodbye") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 :=
        (alloc.borrow.ToOwned.to_owned
            (Self := str.t)
            (Trait := ltac:(refine _)))
          α2 in
      M.alloc α3 in
    let* diary : M.Val type not implemented :=
      M.copy
        (let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "I said "; mk_str ".
" ] in
            let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
            let* α2 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 := M.read α2 in
            let* α4 : M.Val (ref (ref str.t)) := borrow greeting in
            let* α5 := M.read α4 in
            let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
            let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
            let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
            let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
            let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
              pointer_coercion "Unsize" α9 in
            let* α11 := M.read α10 in
            let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
            let* α13 := std.io.stdio._print α12 in
            M.alloc α13 in
          M.alloc tt in
        let* _ : M.Val unit :=
          let* α0 : M.Val (mut_ref alloc.string.String.t) :=
            borrow_mut farewell in
          let* α1 := M.read α0 in
          let* α2 : M.Val str.t := deref (mk_str "!!!") in
          let* α3 : M.Val (ref str.t) := borrow α2 in
          let* α4 := M.read α3 in
          let* α5 := alloc.string.String.t::["push_str"] α1 α4 in
          M.alloc α5 in
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "Then I screamed "; mk_str ".
" ] in
            let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
            let* α2 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 := M.read α2 in
            let* α4 : M.Val (ref alloc.string.String.t) := borrow farewell in
            let* α5 := M.read α4 in
            let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
            let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
            let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
            let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
            let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
              pointer_coercion "Unsize" α9 in
            let* α11 := M.read α10 in
            let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
            let* α13 := std.io.stdio._print α12 in
            M.alloc α13 in
          M.alloc tt in
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "Now I can sleep. zzzzz
" ] in
            let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
            let* α2 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 := M.read α2 in
            let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
            let* α5 := std.io.stdio._print α4 in
            M.alloc α5 in
          M.alloc tt in
        let* _ : M.Val unit :=
          let* α0 := M.read farewell in
          let* α1 := core.mem.drop α0 in
          M.alloc α1 in
        M.alloc tt) in
    let* _ : M.Val unit :=
      let* α0 := M.read diary in
      let* α1 := functions_closures_as_input_parameters.apply α0 in
      M.alloc α1 in
    let* double : M.Val type not implemented :=
      M.copy
        (let* α0 : M.Val i32.t := M.alloc 2 in
        BinOp.mul α0 x) in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "3 doubled: "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 := M.read double in
        let* α5 := functions_closures_as_input_parameters.apply_to_3 α4 in
        let* α6 : M.Val i32.t := M.alloc α5 in
        let* α7 : M.Val (ref i32.t) := borrow α6 in
        let* α8 := M.read α7 in
        let* α9 := core.fmt.rt.Argument.t::["new_display"] α8 in
        let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
        let* α11 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α10 ] in
        let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α11 in
        let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α12 in
        let* α14 := M.read α13 in
        let* α15 := core.fmt.Arguments.t::["new_v1"] α3 α14 in
        let* α16 := std.io.stdio._print α15 in
        M.alloc α16 in
      M.alloc tt in
    M.alloc tt).
