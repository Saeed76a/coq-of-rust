(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    fn sum_odd_numbers(up_to: u32) -> u32 {
        let mut acc = 0;
        for i in 0..up_to {
            // Notice that the return type of this match expression must be u32
            // because of the type of the "addition" variable.
            let addition: u32 = match i % 2 == 1 {
                // The "i" variable is of type u32, which is perfectly fine.
                true => i,
                // On the other hand, the "continue" expression does not return
                // u32, but it is still fine, because it never returns and therefore
                // does not violate the type requirements of the match expression.
                false => continue,
            };
            acc += addition;
        }
        acc
    }
    println!(
        "Sum of odd numbers up to 9 (excluding): {}",
        sum_odd_numbers(9)
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc
            [ mk_str "Sum of odd numbers up to 9 (excluding): "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val u32.t)) := M.alloc 9 in
        let* α4 : ltac:(refine (M.Val u32.t)) :=
          "unimplemented parent_kind" α3 in
        let* α5 : ltac:(refine (M.Val (ref u32.t))) := borrow α4 in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α7 in
        let* α9 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    M.alloc tt).

(*
    fn sum_odd_numbers(up_to: u32) -> u32 {
        let mut acc = 0;
        for i in 0..up_to {
            // Notice that the return type of this match expression must be u32
            // because of the type of the "addition" variable.
            let addition: u32 = match i % 2 == 1 {
                // The "i" variable is of type u32, which is perfectly fine.
                true => i,
                // On the other hand, the "continue" expression does not return
                // u32, but it is still fine, because it never returns and therefore
                // does not violate the type requirements of the match expression.
                false => continue,
            };
            acc += addition;
        }
        acc
    }
*)
Definition sum_odd_numbers (up_to : M.Val u32.t) : M (M.Val u32.t) :=
  M.function_body
    (let* acc : ltac:(refine (M.Val u32.t)) :=
      let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 0 in
      M.copy α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 0 in
      let* α1 := M.read α0 in
      let* α2 := M.read up_to in
      let* α3 : ltac:(refine (M.Val (core.ops.range.Range.t u32.t))) :=
        M.alloc
          {| core.ops.range.Range.start := α1; core.ops.range.Range.end := α2;
          |} in
      let* α4 : ltac:(refine (M.Val (core.ops.range.Range.t u32.t))) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range.t u32.t)
            (Trait := ltac:(refine _)))
          α3 in
      let* α5 := M.read α4 in
      let* α6 : ltac:(refine (M.Val unit)) :=
        match α5 with
        | iter =>
          let* iter := M.alloc iter in
          loop
            (let* _ : ltac:(refine (M.Val unit)) :=
              let* α0 :
                  ltac:(refine
                    (M.Val (mut_ref (core.ops.range.Range.t u32.t)))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (M.Val (core.option.Option.t u32.t))) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range.t u32.t)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine (M.Val never.t)) := Break in
                never_to_any α0
              | core.option.Option.Some i =>
                let* i := M.alloc i in
                let* addition : ltac:(refine (M.Val u32.t)) :=
                  let* α0 : ltac:(refine (M.Val u32.t)) := M.alloc 2 in
                  let* α1 : ltac:(refine (M.Val u32.t)) := BinOp.rem i α0 in
                  let* α2 : ltac:(refine (M.Val u32.t)) := M.alloc 1 in
                  let* α3 : ltac:(refine (M.Val bool.t)) := BinOp.eq α1 α2 in
                  let* α4 := M.read α3 in
                  let* α5 : ltac:(refine (M.Val u32.t)) :=
                    match α4 with
                    | _ => M.pure i
                    | _ =>
                      let* α0 : ltac:(refine (M.Val never.t)) := Continue in
                      never_to_any α0
                    end in
                  M.copy α5 in
                let* _ : ltac:(refine (M.Val unit)) :=
                  assign_op add acc addition in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α6 in
    M.pure acc).
