(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Point.
Section Point.
  Record t : Set := {
    x : f64.t;
    y : f64.t;
  }.
  
  Global Instance Get_x : Notations.Dot "x" := {
    Notations.dot := Ref.map (fun x' => x'.(x)) (fun v x' => x' <| x := v |>);
  }.
  Global Instance Get_AF_x : Notations.DoubleColon t "x" := {
    Notations.double_colon (x' : M.Val t) := x'.["x"];
  }.
  Global Instance Get_y : Notations.Dot "y" := {
    Notations.dot := Ref.map (fun x => x.(y)) (fun v x => x <| y := v |>);
  }.
  Global Instance Get_AF_y : Notations.DoubleColon t "y" := {
    Notations.double_colon (x : M.Val t) := x.["y"];
  }.
End Point.
End Point.

Module  Impl_associated_functions_and_methods_Point_t.
Section Impl_associated_functions_and_methods_Point_t.
  Ltac Self := exact associated_functions_and_methods.Point.t.
  
  (*
      fn origin() -> Point {
          Point { y: 0.0, x: 1.0 }
      }
  *)
  Definition origin : M associated_functions_and_methods.Point.t :=
    M.function_body
      (let* α0 : M.Val f64.t := M.alloc 0 (* 0.0 *) in
      let* α1 : f64.t := M.read α0 in
      let* α2 : M.Val f64.t := M.alloc 1 (* 1.0 *) in
      let* α3 : f64.t := M.read α2 in
      let* α0 : M.Val associated_functions_and_methods.Point.t :=
        M.alloc
          {|
            associated_functions_and_methods.Point.y := α1;
            associated_functions_and_methods.Point.x := α3;
          |} in
      M.read α0).
  
  Global Instance AssociatedFunction_origin :
    Notations.DoubleColon ltac:(Self) "origin" := {
    Notations.double_colon := origin;
  }.
  
  (*
      fn new(x: f64, y: f64) -> Point {
          Point { x: x, y: y }
      }
  *)
  Definition new
      (x : f64.t)
      (y : f64.t)
      : M associated_functions_and_methods.Point.t :=
    let* x : M.Val f64.t := M.alloc x in
    let* y : M.Val f64.t := M.alloc y in
    M.function_body
      (let* α0 : f64.t := M.read x in
      let* α1 : f64.t := M.read y in
      let* α0 : M.Val associated_functions_and_methods.Point.t :=
        M.alloc
          {|
            associated_functions_and_methods.Point.x := α0;
            associated_functions_and_methods.Point.y := α1;
          |} in
      M.read α0).
  
  Global Instance AssociatedFunction_new :
    Notations.DoubleColon ltac:(Self) "new" := {
    Notations.double_colon := new;
  }.
End Impl_associated_functions_and_methods_Point_t.
End Impl_associated_functions_and_methods_Point_t.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    p1 : associated_functions_and_methods.Point.t;
    p2 : associated_functions_and_methods.Point.t;
  }.
  
  Global Instance Get_p1 : Notations.Dot "p1" := {
    Notations.dot := Ref.map (fun x => x.(p1)) (fun v x => x <| p1 := v |>);
  }.
  Global Instance Get_AF_p1 : Notations.DoubleColon t "p1" := {
    Notations.double_colon (x : M.Val t) := x.["p1"];
  }.
  Global Instance Get_p2 : Notations.Dot "p2" := {
    Notations.dot := Ref.map (fun x => x.(p2)) (fun v x => x <| p2 := v |>);
  }.
  Global Instance Get_AF_p2 : Notations.DoubleColon t "p2" := {
    Notations.double_colon (x : M.Val t) := x.["p2"];
  }.
End Rectangle.
End Rectangle.

Module  Impl_associated_functions_and_methods_Rectangle_t.
Section Impl_associated_functions_and_methods_Rectangle_t.
  Ltac Self := exact associated_functions_and_methods.Rectangle.t.
  
  (*
      fn get_p1(&self) -> Point {
          self.p1
      }
  *)
  Definition get_p1
      (self : ref ltac:(Self))
      : M associated_functions_and_methods.Point.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* α0 : ref associated_functions_and_methods.Rectangle.t :=
        M.read self in
      let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
        deref α0 in
      M.read α1.["p1"]).
  
  Global Instance AssociatedFunction_get_p1 :
    Notations.DoubleColon ltac:(Self) "get_p1" := {
    Notations.double_colon := get_p1;
  }.
  
  (*
      fn area(&self) -> f64 {
          // `self` gives access to the struct fields via the dot operator
          let Point { x: x1, y: y1 } = self.p1;
          let Point { x: x2, y: y2 } = self.p2;
  
          // `abs` is a `f64` method that returns the absolute value of the
          // caller
          ((x1 - x2) * (y1 - y2)).abs()
      }
  *)
  Definition area (self : ref ltac:(Self)) : M f64.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* '{|
            associated_functions_and_methods.Point.x := x1;
            associated_functions_and_methods.Point.y := y1;
          |} :
          M.Val associated_functions_and_methods.Point.t :=
        let* α0 : ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
          deref α0 in
        M.copy α1.["p1"] in
      let* '{|
            associated_functions_and_methods.Point.x := x2;
            associated_functions_and_methods.Point.y := y2;
          |} :
          M.Val associated_functions_and_methods.Point.t :=
        let* α0 : ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
          deref α0 in
        M.copy α1.["p2"] in
      let* α0 : M.Val f64.t := BinOp.sub x1 x2 in
      let* α1 : M.Val f64.t := BinOp.sub y1 y2 in
      let* α2 : M.Val f64.t := BinOp.mul α0 α1 in
      let* α3 : f64.t := M.read α2 in
      let* α4 : f64.t := f64.t::["abs"] α3 in
      let* α0 : M.Val f64.t := M.alloc α4 in
      M.read α0).
  
  Global Instance AssociatedFunction_area :
    Notations.DoubleColon ltac:(Self) "area" := {
    Notations.double_colon := area;
  }.
  
  (*
      fn perimeter(&self) -> f64 {
          let Point { x: x1, y: y1 } = self.p1;
          let Point { x: x2, y: y2 } = self.p2;
  
          2.0 * ((x1 - x2).abs() + (y1 - y2).abs())
      }
  *)
  Definition perimeter (self : ref ltac:(Self)) : M f64.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    M.function_body
      (let* '{|
            associated_functions_and_methods.Point.x := x1;
            associated_functions_and_methods.Point.y := y1;
          |} :
          M.Val associated_functions_and_methods.Point.t :=
        let* α0 : ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
          deref α0 in
        M.copy α1.["p1"] in
      let* '{|
            associated_functions_and_methods.Point.x := x2;
            associated_functions_and_methods.Point.y := y2;
          |} :
          M.Val associated_functions_and_methods.Point.t :=
        let* α0 : ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
          deref α0 in
        M.copy α1.["p2"] in
      let* α0 : M.Val f64.t := M.alloc 2 (* 2.0 *) in
      let* α1 : M.Val f64.t := BinOp.sub x1 x2 in
      let* α2 : f64.t := M.read α1 in
      let* α3 : f64.t := f64.t::["abs"] α2 in
      let* α4 : M.Val f64.t := M.alloc α3 in
      let* α5 : M.Val f64.t := BinOp.sub y1 y2 in
      let* α6 : f64.t := M.read α5 in
      let* α7 : f64.t := f64.t::["abs"] α6 in
      let* α8 : M.Val f64.t := M.alloc α7 in
      let* α9 : M.Val f64.t := BinOp.add α4 α8 in
      let* α0 : M.Val f64.t := BinOp.mul α0 α9 in
      M.read α0).
  
  Global Instance AssociatedFunction_perimeter :
    Notations.DoubleColon ltac:(Self) "perimeter" := {
    Notations.double_colon := perimeter;
  }.
  
  (*
      fn translate(&mut self, x: f64, y: f64) {
          self.p1.x += x;
          self.p2.x += x;
  
          self.p1.y += y;
          self.p2.y += y;
      }
  *)
  Definition translate
      (self : mut_ref ltac:(Self))
      (x : f64.t)
      (y : f64.t)
      : M unit :=
    let* self : M.Val (mut_ref ltac:(Self)) := M.alloc self in
    let* x : M.Val f64.t := M.alloc x in
    let* y : M.Val f64.t := M.alloc y in
    M.function_body
      (let* _ : M.Val unit :=
        let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
          deref α0 in
        assign_op add α1.["p1"].["x"] x in
      let* _ : M.Val unit :=
        let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
          deref α0 in
        assign_op add α1.["p2"].["x"] x in
      let* _ : M.Val unit :=
        let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
          deref α0 in
        assign_op add α1.["p1"].["y"] y in
      let* _ : M.Val unit :=
        let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        let* α1 : M.Val associated_functions_and_methods.Rectangle.t :=
          deref α0 in
        assign_op add α1.["p2"].["y"] y in
      let* α0 : M.Val unit := M.alloc tt in
      M.read α0).
  
  Global Instance AssociatedFunction_translate :
    Notations.DoubleColon ltac:(Self) "translate" := {
    Notations.double_colon := translate;
  }.
End Impl_associated_functions_and_methods_Rectangle_t.
End Impl_associated_functions_and_methods_Rectangle_t.

Module  Pair.
Section Pair.
  Record t : Set := {
    x0 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
    x1 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
  Global Instance Get_1 : Notations.Dot "1" := {
    Notations.dot := Ref.map (fun x => x.(x1)) (fun v x => x <| x1 := v |>);
  }.
End Pair.
End Pair.

Module  Impl_associated_functions_and_methods_Pair_t.
Section Impl_associated_functions_and_methods_Pair_t.
  Ltac Self := exact associated_functions_and_methods.Pair.t.
  
  (*
      fn destroy(self) {
          // Destructure `self`
          let Pair(first, second) = self;
  
          println!("Destroying Pair({}, {})", first, second);
  
          // `first` and `second` go out of scope and get freed
      }
  *)
  Definition destroy (self : ltac:(Self)) : M unit :=
    let* self : M.Val ltac:(Self) := M.alloc self in
    M.function_body
      (let* 'associated_functions_and_methods.Pair.Build_t first second :
          M.Val associated_functions_and_methods.Pair.t :=
        M.copy self in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "Destroying Pair("; mk_str ", "; mk_str ")
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : ref (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
            borrow first in
          let* α8 : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
            deref α7 in
          let* α9 : ref (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
            borrow α8 in
          let* α10 : core.fmt.rt.Argument.t :=
            core.fmt.rt.Argument.t::["new_display"] α9 in
          let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
          let* α12 : ref (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
            borrow second in
          let* α13 : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
            deref α12 in
          let* α14 : ref (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
            borrow α13 in
          let* α15 : core.fmt.rt.Argument.t :=
            core.fmt.rt.Argument.t::["new_display"] α14 in
          let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
          let* α17 : M.Val (array core.fmt.rt.Argument.t) :=
            M.alloc [ α11; α16 ] in
          let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
          let* α19 : M.Val (array core.fmt.rt.Argument.t) := deref α18 in
          let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
          let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
            M.alloc α20 in
          let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α21 in
          let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
          let* α24 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_v1"] α6 α23 in
          let* α25 : unit := std.io.stdio._print α24 in
          M.alloc α25 in
        M.alloc tt in
      let* α0 : M.Val unit := M.alloc tt in
      M.read α0).
  
  Global Instance AssociatedFunction_destroy :
    Notations.DoubleColon ltac:(Self) "destroy" := {
    Notations.double_colon := destroy;
  }.
End Impl_associated_functions_and_methods_Pair_t.
End Impl_associated_functions_and_methods_Pair_t.

(*
fn main() {
    let rectangle = Rectangle {
        // Associated functions are called using double colons
        p1: Point::origin(),
        p2: Point::new(3.0, 4.0),
    };

    // Methods are called using the dot operator
    // Note that the first argument `&self` is implicitly passed, i.e.
    // `rectangle.perimeter()` === `Rectangle::perimeter(&rectangle)`
    println!("Rectangle perimeter: {}", rectangle.perimeter());
    println!("Rectangle area: {}", rectangle.area());

    let mut square = Rectangle {
        p1: Point::origin(),
        p2: Point::new(1.0, 1.0),
    };

    // Error! `rectangle` is immutable, but this method requires a mutable
    // object
    //rectangle.translate(1.0, 0.0);
    // TODO ^ Try uncommenting this line

    // Okay! Mutable objects can call mutable methods
    square.translate(1.0, 1.0);

    let pair = Pair(Box::new(1), Box::new(2));

    pair.destroy();

    // Error! Previous `destroy` call "consumed" `pair`
    //pair.destroy();
    // TODO ^ Try uncommenting this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* rectangle : M.Val associated_functions_and_methods.Rectangle.t :=
      let* α0 : associated_functions_and_methods.Point.t :=
        associated_functions_and_methods.Point.t::["origin"] in
      let* α1 : M.Val f64.t := M.alloc 3 (* 3.0 *) in
      let* α2 : f64.t := M.read α1 in
      let* α3 : M.Val f64.t := M.alloc 4 (* 4.0 *) in
      let* α4 : f64.t := M.read α3 in
      let* α5 : associated_functions_and_methods.Point.t :=
        associated_functions_and_methods.Point.t::["new"] α2 α4 in
      M.alloc
        {|
          associated_functions_and_methods.Rectangle.p1 := α0;
          associated_functions_and_methods.Rectangle.p2 := α5;
        |} in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Rectangle perimeter: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref associated_functions_and_methods.Rectangle.t :=
          borrow rectangle in
        let* α8 : f64.t :=
          associated_functions_and_methods.Rectangle.t::["perimeter"] α7 in
        let* α9 : M.Val f64.t := M.alloc α8 in
        let* α10 : ref f64.t := borrow α9 in
        let* α11 : M.Val f64.t := deref α10 in
        let* α12 : ref f64.t := borrow α11 in
        let* α13 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α14 ] in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := deref α16 in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α18 in
        let* α20 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α19 in
        let* α21 : ref (slice core.fmt.rt.Argument.t) := M.read α20 in
        let* α22 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α21 in
        let* α23 : unit := std.io.stdio._print α22 in
        M.alloc α23 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Rectangle area: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref associated_functions_and_methods.Rectangle.t :=
          borrow rectangle in
        let* α8 : f64.t :=
          associated_functions_and_methods.Rectangle.t::["area"] α7 in
        let* α9 : M.Val f64.t := M.alloc α8 in
        let* α10 : ref f64.t := borrow α9 in
        let* α11 : M.Val f64.t := deref α10 in
        let* α12 : ref f64.t := borrow α11 in
        let* α13 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α12 in
        let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α14 ] in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) := deref α16 in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α18 in
        let* α20 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α19 in
        let* α21 : ref (slice core.fmt.rt.Argument.t) := M.read α20 in
        let* α22 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α21 in
        let* α23 : unit := std.io.stdio._print α22 in
        M.alloc α23 in
      M.alloc tt in
    let* square : M.Val associated_functions_and_methods.Rectangle.t :=
      let* α0 : associated_functions_and_methods.Point.t :=
        associated_functions_and_methods.Point.t::["origin"] in
      let* α1 : M.Val f64.t := M.alloc 1 (* 1.0 *) in
      let* α2 : f64.t := M.read α1 in
      let* α3 : M.Val f64.t := M.alloc 1 (* 1.0 *) in
      let* α4 : f64.t := M.read α3 in
      let* α5 : associated_functions_and_methods.Point.t :=
        associated_functions_and_methods.Point.t::["new"] α2 α4 in
      M.alloc
        {|
          associated_functions_and_methods.Rectangle.p1 := α0;
          associated_functions_and_methods.Rectangle.p2 := α5;
        |} in
    let* _ : M.Val unit :=
      let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
        borrow_mut square in
      let* α1 : M.Val f64.t := M.alloc 1 (* 1.0 *) in
      let* α2 : f64.t := M.read α1 in
      let* α3 : M.Val f64.t := M.alloc 1 (* 1.0 *) in
      let* α4 : f64.t := M.read α3 in
      let* α5 : unit :=
        associated_functions_and_methods.Rectangle.t::["translate"] α0 α2 α4 in
      M.alloc α5 in
    let* pair : M.Val associated_functions_and_methods.Pair.t :=
      let* α0 : M.Val i32.t := M.alloc 1 in
      let* α1 : i32.t := M.read α0 in
      let* α2 : alloc.boxed.Box.t i32.t alloc.alloc.Global.t :=
        (alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"] α1 in
      let* α3 : M.Val i32.t := M.alloc 2 in
      let* α4 : i32.t := M.read α3 in
      let* α5 : alloc.boxed.Box.t i32.t alloc.alloc.Global.t :=
        (alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"] α4 in
      M.alloc (associated_functions_and_methods.Pair.Build_t α2 α5) in
    let* _ : M.Val unit :=
      let* α0 : associated_functions_and_methods.Pair.t := M.read pair in
      let* α1 : unit :=
        associated_functions_and_methods.Pair.t::["destroy"] α0 in
      M.alloc α1 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
