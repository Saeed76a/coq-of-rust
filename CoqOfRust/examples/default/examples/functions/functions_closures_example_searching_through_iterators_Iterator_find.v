(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let vec1 = vec![1, 2, 3];
    let vec2 = vec![4, 5, 6];

    // `iter()` for vecs yields `&i32`.
    let mut iter = vec1.iter();
    // `into_iter()` for vecs yields `i32`.
    let mut into_iter = vec2.into_iter();

    // `iter()` for vecs yields `&i32`, and we want to reference one of its
    // items, so we have to destructure `&&i32` to `i32`
    println!("Find 2 in vec1: {:?}", iter.find(|&&x| x == 2));
    // `into_iter()` for vecs yields `i32`, and we want to reference one of
    // its items, so we have to destructure `&i32` to `i32`
    println!("Find 2 in vec2: {:?}", into_iter.find(|&x| x == 2));

    let array1 = [1, 2, 3];
    let array2 = [4, 5, 6];

    // `iter()` for arrays yields `&i32`
    println!("Find 2 in array1: {:?}", array1.iter().find(|&&x| x == 2));
    // `into_iter()` for arrays yields `i32`
    println!(
        "Find 2 in array2: {:?}",
        array2.into_iter().find(|&x| *x == 2)
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M (M.Val unit) :=
  M.function_body
    (let* vec1 :
        ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      let* α3 : ltac:(refine (M.Val (array i32.t))) := M.alloc [ α0; α1; α2 ] in
      let* α4 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α4 in
      let* α6 :
          ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
        (slice i32.t)::["into_vec"] α5 in
      M.copy α6 in
    let* vec2 :
        ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 4 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 6 in
      let* α3 : ltac:(refine (M.Val (array i32.t))) := M.alloc [ α0; α1; α2 ] in
      let* α4 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 :
          ltac:(refine
            (M.Val (alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α4 in
      let* α6 :
          ltac:(refine (M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t))) :=
        (slice i32.t)::["into_vec"] α5 in
      M.copy α6 in
    let* iter : ltac:(refine (M.Val (core.slice.iter.Iter.t i32.t))) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref (alloc.vec.Vec.t i32.t alloc.alloc.Global.t)))) :=
        borrow vec1 in
      let* α1 : ltac:(refine (M.Val (ref (slice i32.t)))) :=
        (core.ops.deref.Deref.deref
            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine (M.Val (slice i32.t))) := deref α1 in
      let* α3 : ltac:(refine (M.Val (ref (slice i32.t)))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val (core.slice.iter.Iter.t i32.t))) :=
        (slice i32.t)::["iter"] α3 in
      M.copy α4 in
    let* into_iter :
        ltac:(refine
          (M.Val
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))) :=
      let* α0 :
          ltac:(refine
            (M.Val
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          vec2 in
      M.copy α0 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "Find 2 in vec1: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine (M.Val (mut_ref (core.slice.iter.Iter.t i32.t)))) :=
          borrow_mut iter in
        let* α4 : ltac:(refine (M.Val (core.option.Option.t (ref i32.t)))) :=
          (core.iter.traits.iterator.Iterator.find
              (Self := core.slice.iter.Iter.t i32.t)
              (Trait := ltac:(refine _)))
            α3
            (let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
            BinOp.eq x α0) in
        let* α5 :
            ltac:(refine (M.Val (ref (core.option.Option.t (ref i32.t))))) :=
          borrow α4 in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α7 in
        let* α9 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "Find 2 in vec2: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (M.Val
                (mut_ref
                  (alloc.vec.into_iter.IntoIter.t
                    i32.t
                    alloc.alloc.Global.t)))) :=
          borrow_mut into_iter in
        let* α4 : ltac:(refine (M.Val (core.option.Option.t i32.t))) :=
          (core.iter.traits.iterator.Iterator.find
              (Self :=
                alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
              (Trait := ltac:(refine _)))
            α3
            (let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
            BinOp.eq x α0) in
        let* α5 : ltac:(refine (M.Val (ref (core.option.Option.t i32.t)))) :=
          borrow α4 in
        let* α6 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α7 in
        let* α9 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    let* array1 : ltac:(refine (M.Val (array i32.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 1 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 3 in
      M.alloc [ α0; α1; α2 ] in
    let* array2 : ltac:(refine (M.Val (array i32.t))) :=
      let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 4 in
      let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 5 in
      let* α2 : ltac:(refine (M.Val i32.t)) := M.alloc 6 in
      M.alloc [ α0; α1; α2 ] in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "Find 2 in array1: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (array i32.t)))) := borrow array1 in
        let* α4 : ltac:(refine (M.Val (ref (slice i32.t)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (M.Val (core.slice.iter.Iter.t i32.t))) :=
          (slice i32.t)::["iter"] α4 in
        let* α6 :
            ltac:(refine (M.Val (mut_ref (core.slice.iter.Iter.t i32.t)))) :=
          borrow_mut α5 in
        let* α7 : ltac:(refine (M.Val (core.option.Option.t (ref i32.t)))) :=
          (core.iter.traits.iterator.Iterator.find
              (Self := core.slice.iter.Iter.t i32.t)
              (Trait := ltac:(refine _)))
            α6
            (let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
            BinOp.eq x α0) in
        let* α8 :
            ltac:(refine (M.Val (ref (core.option.Option.t (ref i32.t))))) :=
          borrow α7 in
        let* α9 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α8 in
        let* α10 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α9 ] in
        let* α11 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α10 in
        let* α12 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α12 in
        std.io.stdio._print α13 in
      M.alloc tt in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "Find 2 in array2: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref (array i32.t)))) := borrow array2 in
        let* α4 : ltac:(refine (M.Val (core.slice.iter.Iter.t i32.t))) :=
          (core.iter.traits.collect.IntoIterator.into_iter
              (Self := ref (array i32.t))
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 :
            ltac:(refine (M.Val (mut_ref (core.slice.iter.Iter.t i32.t)))) :=
          borrow_mut α4 in
        let* α6 : ltac:(refine (M.Val (core.option.Option.t (ref i32.t)))) :=
          (core.iter.traits.iterator.Iterator.find
              (Self := core.slice.iter.Iter.t i32.t)
              (Trait := ltac:(refine _)))
            α5
            (let* α0 : ltac:(refine (M.Val i32.t)) := deref x in
            let* α1 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
            BinOp.eq α0 α1) in
        let* α7 :
            ltac:(refine (M.Val (ref (core.option.Option.t (ref i32.t))))) :=
          borrow α6 in
        let* α8 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) :=
          core.fmt.rt.Argument.t::["new_debug"] α7 in
        let* α9 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α9 in
        let* α11 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ltac:(refine (M.Val core.fmt.Arguments.t)) :=
          core.fmt.Arguments.t::["new_v1"] α2 α11 in
        std.io.stdio._print α12 in
      M.alloc tt in
    M.alloc tt).
