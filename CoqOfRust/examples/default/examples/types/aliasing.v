(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac NanoSecond := exact u64.t.

Ltac Inch := exact u64.t.

Ltac U64 := exact u64.t.

(*
fn main() {
    // `NanoSecond` = `Inch` = `U64` = `u64`.
    let nanoseconds: NanoSecond = 5 as U64;
    let inches: Inch = 2 as U64;

    // Note that type aliases *don't* provide any extra type safety, because
    // aliases are *not* new types
    println!(
        "{} nanoseconds + {} inches = {} unit?",
        nanoseconds,
        inches,
        nanoseconds + inches
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* nanoseconds : M.Val u64.t :=
    let* α0 : M.Val u64.t := M.alloc 5 in
    let* α1 : M.Val u64.t := use α0 in
    M.copy α1 in
  let* inches : M.Val u64.t :=
    let* α0 : M.Val u64.t := M.alloc 2 in
    let* α1 : M.Val u64.t := use α0 in
    M.copy α1 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc
          [
            mk_str "";
            mk_str " nanoseconds + ";
            mk_str " inches = ";
            mk_str " unit?
"
          ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : ref u64.t := borrow nanoseconds in
      let* α6 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α5 in
      let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
      let* α8 : ref u64.t := borrow inches in
      let* α9 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α8 in
      let* α10 : M.Val core.fmt.rt.Argument.t := M.alloc α9 in
      let* α11 : M.Val u64.t := BinOp.add nanoseconds inches in
      let* α12 : ref u64.t := borrow α11 in
      let* α13 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α12 in
      let* α14 : M.Val core.fmt.rt.Argument.t := M.alloc α13 in
      let* α15 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α7; α10; α14 ] in
      let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
      let* α17 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α16 in
      let* α18 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α17 in
      let* α19 : ref (slice core.fmt.rt.Argument.t) := M.read α18 in
      let* α20 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α19 in
      let* α21 : unit := std.io.stdio._print α20 in
      M.alloc α21 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
