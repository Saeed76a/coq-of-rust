(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // In general, the `{}` will be automatically replaced with any
    // arguments. These will be stringified.
    println!("{} days", 31);

    // Positional arguments can be used. Specifying an integer inside `{}`
    // determines which additional argument will be replaced. Arguments start
    // at 0 immediately after the format string
    println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");

    // As can named arguments.
    println!(
        "{subject} {verb} {object}",
        object = "the lazy dog",
        subject = "the quick brown fox",
        verb = "jumps over"
    );

    // Different formatting can be invoked by specifying the format character after a
    // `:`.
    println!("Base 10:               {}", 69420); //69420
    println!("Base 2 (binary):       {:b}", 69420); //10000111100101100
    println!("Base 8 (octal):        {:o}", 69420); //207454
    println!("Base 16 (hexadecimal): {:x}", 69420); //10f2c
    println!("Base 16 (hexadecimal): {:X}", 69420); //10F2C

    // You can right-justify text with a specified width. This will
    // output "    1". (Four white spaces and a "1", for a total width of 5.)
    println!("{number:>5}", number = 1);

    // You can pad numbers with extra zeroes,
    //and left-adjust by flipping the sign. This will output "10000".
    println!("{number:0<5}", number = 1);

    // You can use named arguments in the format specifier by appending a `$`
    println!("{number:0>width$}", number = 1, width = 5);

    // Rust even checks to make sure the correct number of arguments are
    // used.
    println!("My name is {0}, {1} {0}", "Bond", "James");
    // FIXME ^ Add the missing argument: "James"

    // Only types that implement fmt::Display can be formatted with `{}`. User-
    // defined types do not implement fmt::Display by default

    #[allow(dead_code)]
    struct Structure(i32);

    // This will not compile because `Structure` does not implement
    // fmt::Display
    //println!("This struct `{}` won't print...", Structure(3));
    // TODO ^ Try uncommenting this line

    // For Rust 1.58 and above, you can directly capture the argument from a
    // surrounding variable. Just like the above, this will output
    // "    1". 4 white spaces and a "1".
    let number: f64 = 1.0;
    let width: usize = 5;
    println!("{number:>width$}");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) := M.alloc [ mk_str "31 days
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
        let* α8 : ref (array core.fmt.rt.Argument.t) := borrow α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := deref α8 in
        let* α10 : ref (array core.fmt.rt.Argument.t) := borrow α9 in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ref (slice core.fmt.rt.Argument.t) := M.read α12 in
        let* α14 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α13 in
        let* α15 : unit := std.io.stdio._print α14 in
        M.alloc α15 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Alice, this is Bob. Bob, this is Alice
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
        let* α8 : ref (array core.fmt.rt.Argument.t) := borrow α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := deref α8 in
        let* α10 : ref (array core.fmt.rt.Argument.t) := borrow α9 in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ref (slice core.fmt.rt.Argument.t) := M.read α12 in
        let* α14 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α13 in
        let* α15 : unit := std.io.stdio._print α14 in
        M.alloc α15 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "the quick brown fox jumps over the lazy dog
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
        let* α8 : ref (array core.fmt.rt.Argument.t) := borrow α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := deref α8 in
        let* α10 : ref (array core.fmt.rt.Argument.t) := borrow α9 in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ref (slice core.fmt.rt.Argument.t) := M.read α12 in
        let* α14 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α13 in
        let* α15 : unit := std.io.stdio._print α14 in
        M.alloc α15 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Base 10:               69420
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
        let* α8 : ref (array core.fmt.rt.Argument.t) := borrow α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := deref α8 in
        let* α10 : ref (array core.fmt.rt.Argument.t) := borrow α9 in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ref (slice core.fmt.rt.Argument.t) := M.read α12 in
        let* α14 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α13 in
        let* α15 : unit := std.io.stdio._print α14 in
        M.alloc α15 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Base 2 (binary):       "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 69420 in
        let* α8 : ref i32.t := borrow α7 in
        let* α9 : M.Val i32.t := deref α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_binary"] α10 in
        let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
        let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α12 ] in
        let* α14 : ref (array core.fmt.rt.Argument.t) := borrow α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := deref α14 in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α16 in
        let* α18 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α17 in
        let* α19 : ref (slice core.fmt.rt.Argument.t) := M.read α18 in
        let* α20 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α19 in
        let* α21 : unit := std.io.stdio._print α20 in
        M.alloc α21 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Base 8 (octal):        "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 69420 in
        let* α8 : ref i32.t := borrow α7 in
        let* α9 : M.Val i32.t := deref α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_octal"] α10 in
        let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
        let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α12 ] in
        let* α14 : ref (array core.fmt.rt.Argument.t) := borrow α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := deref α14 in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α16 in
        let* α18 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α17 in
        let* α19 : ref (slice core.fmt.rt.Argument.t) := M.read α18 in
        let* α20 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α19 in
        let* α21 : unit := std.io.stdio._print α20 in
        M.alloc α21 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Base 16 (hexadecimal): "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 69420 in
        let* α8 : ref i32.t := borrow α7 in
        let* α9 : M.Val i32.t := deref α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_lower_hex"] α10 in
        let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
        let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α12 ] in
        let* α14 : ref (array core.fmt.rt.Argument.t) := borrow α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := deref α14 in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α16 in
        let* α18 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α17 in
        let* α19 : ref (slice core.fmt.rt.Argument.t) := M.read α18 in
        let* α20 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α19 in
        let* α21 : unit := std.io.stdio._print α20 in
        M.alloc α21 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Base 16 (hexadecimal): "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 69420 in
        let* α8 : ref i32.t := borrow α7 in
        let* α9 : M.Val i32.t := deref α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_upper_hex"] α10 in
        let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
        let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α12 ] in
        let* α14 : ref (array core.fmt.rt.Argument.t) := borrow α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := deref α14 in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α16 in
        let* α18 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α17 in
        let* α19 : ref (slice core.fmt.rt.Argument.t) := M.read α18 in
        let* α20 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α19 in
        let* α21 : unit := std.io.stdio._print α20 in
        M.alloc α21 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 1 in
        let* α8 : ref i32.t := borrow α7 in
        let* α9 : M.Val i32.t := deref α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α10 in
        let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
        let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α12 ] in
        let* α14 : ref (array core.fmt.rt.Argument.t) := borrow α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := deref α14 in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α16 in
        let* α18 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α17 in
        let* α19 : ref (slice core.fmt.rt.Argument.t) := M.read α18 in
        let* α20 : M.Val usize.t := M.alloc 0 in
        let* α21 : usize.t := M.read α20 in
        let* α22 : M.Val char.t := M.alloc " "%char in
        let* α23 : char.t := M.read α22 in
        let* α24 : M.Val u32.t := M.alloc 0 in
        let* α25 : u32.t := M.read α24 in
        let* α26 : M.Val usize.t := M.alloc 5 in
        let* α27 : usize.t := M.read α26 in
        let* α28 : core.fmt.rt.Count.t := "unimplemented parent_kind" α27 in
        let* α29 : core.fmt.rt.Placeholder.t :=
          core.fmt.rt.Placeholder.t::["new"]
            α21
            α23
            core.fmt.rt.Alignment.Right
            α25
            core.fmt.rt.Count.Implied
            α28 in
        let* α30 : M.Val core.fmt.rt.Placeholder.t := M.alloc α29 in
        let* α31 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α30 ] in
        let* α32 : ref (array core.fmt.rt.Placeholder.t) := borrow α31 in
        let* α33 : M.Val (array core.fmt.rt.Placeholder.t) := deref α32 in
        let* α34 : ref (array core.fmt.rt.Placeholder.t) := borrow α33 in
        let* α35 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          M.alloc α34 in
        let* α36 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α35 in
        let* α37 : ref (slice core.fmt.rt.Placeholder.t) := M.read α36 in
        let* α0 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α38 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α39 : core.fmt.rt.UnsafeArg.t := M.read α38 in
        let* α40 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1_formatted"] α6 α19 α37 α39 in
        let* α41 : unit := std.io.stdio._print α40 in
        M.alloc α41 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 1 in
        let* α8 : ref i32.t := borrow α7 in
        let* α9 : M.Val i32.t := deref α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α10 in
        let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
        let* α13 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α12 ] in
        let* α14 : ref (array core.fmt.rt.Argument.t) := borrow α13 in
        let* α15 : M.Val (array core.fmt.rt.Argument.t) := deref α14 in
        let* α16 : ref (array core.fmt.rt.Argument.t) := borrow α15 in
        let* α17 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α16 in
        let* α18 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α17 in
        let* α19 : ref (slice core.fmt.rt.Argument.t) := M.read α18 in
        let* α20 : M.Val usize.t := M.alloc 0 in
        let* α21 : usize.t := M.read α20 in
        let* α22 : M.Val char.t := M.alloc "0"%char in
        let* α23 : char.t := M.read α22 in
        let* α24 : M.Val u32.t := M.alloc 0 in
        let* α25 : u32.t := M.read α24 in
        let* α26 : M.Val usize.t := M.alloc 5 in
        let* α27 : usize.t := M.read α26 in
        let* α28 : core.fmt.rt.Count.t := "unimplemented parent_kind" α27 in
        let* α29 : core.fmt.rt.Placeholder.t :=
          core.fmt.rt.Placeholder.t::["new"]
            α21
            α23
            core.fmt.rt.Alignment.Left
            α25
            core.fmt.rt.Count.Implied
            α28 in
        let* α30 : M.Val core.fmt.rt.Placeholder.t := M.alloc α29 in
        let* α31 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α30 ] in
        let* α32 : ref (array core.fmt.rt.Placeholder.t) := borrow α31 in
        let* α33 : M.Val (array core.fmt.rt.Placeholder.t) := deref α32 in
        let* α34 : ref (array core.fmt.rt.Placeholder.t) := borrow α33 in
        let* α35 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          M.alloc α34 in
        let* α36 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α35 in
        let* α37 : ref (slice core.fmt.rt.Placeholder.t) := M.read α36 in
        let* α0 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α38 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α39 : core.fmt.rt.UnsafeArg.t := M.read α38 in
        let* α40 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1_formatted"] α6 α19 α37 α39 in
        let* α41 : unit := std.io.stdio._print α40 in
        M.alloc α41 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val i32.t := M.alloc 1 in
        let* α8 : ref i32.t := borrow α7 in
        let* α9 : M.Val i32.t := deref α8 in
        let* α10 : ref i32.t := borrow α9 in
        let* α11 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α10 in
        let* α12 : M.Val core.fmt.rt.Argument.t := M.alloc α11 in
        let* α13 : M.Val usize.t := M.alloc 5 in
        let* α14 : ref usize.t := borrow α13 in
        let* α15 : M.Val usize.t := deref α14 in
        let* α16 : ref usize.t := borrow α15 in
        let* α17 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["from_usize"] α16 in
        let* α18 : M.Val core.fmt.rt.Argument.t := M.alloc α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α12; α18 ] in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (array core.fmt.rt.Argument.t) := deref α20 in
        let* α22 : ref (array core.fmt.rt.Argument.t) := borrow α21 in
        let* α23 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α22 in
        let* α24 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α23 in
        let* α25 : ref (slice core.fmt.rt.Argument.t) := M.read α24 in
        let* α26 : M.Val usize.t := M.alloc 0 in
        let* α27 : usize.t := M.read α26 in
        let* α28 : M.Val char.t := M.alloc "0"%char in
        let* α29 : char.t := M.read α28 in
        let* α30 : M.Val u32.t := M.alloc 0 in
        let* α31 : u32.t := M.read α30 in
        let* α32 : M.Val usize.t := M.alloc 1 in
        let* α33 : usize.t := M.read α32 in
        let* α34 : core.fmt.rt.Count.t := "unimplemented parent_kind" α33 in
        let* α35 : core.fmt.rt.Placeholder.t :=
          core.fmt.rt.Placeholder.t::["new"]
            α27
            α29
            core.fmt.rt.Alignment.Right
            α31
            core.fmt.rt.Count.Implied
            α34 in
        let* α36 : M.Val core.fmt.rt.Placeholder.t := M.alloc α35 in
        let* α37 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α36 ] in
        let* α38 : ref (array core.fmt.rt.Placeholder.t) := borrow α37 in
        let* α39 : M.Val (array core.fmt.rt.Placeholder.t) := deref α38 in
        let* α40 : ref (array core.fmt.rt.Placeholder.t) := borrow α39 in
        let* α41 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          M.alloc α40 in
        let* α42 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α41 in
        let* α43 : ref (slice core.fmt.rt.Placeholder.t) := M.read α42 in
        let* α0 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α44 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α45 : core.fmt.rt.UnsafeArg.t := M.read α44 in
        let* α46 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1_formatted"] α6 α25 α43 α45 in
        let* α47 : unit := std.io.stdio._print α46 in
        M.alloc α47 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "My name is Bond, James Bond
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ ] in
        let* α8 : ref (array core.fmt.rt.Argument.t) := borrow α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := deref α8 in
        let* α10 : ref (array core.fmt.rt.Argument.t) := borrow α9 in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ref (slice core.fmt.rt.Argument.t) := M.read α12 in
        let* α14 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α13 in
        let* α15 : unit := std.io.stdio._print α14 in
        M.alloc α15 in
      M.alloc tt in
    let* number : M.Val f64.t :=
      let* α0 : M.Val f64.t := M.alloc 1 (* 1.0 *) in
      M.copy α0 in
    let* width : M.Val usize.t :=
      let* α0 : M.Val usize.t := M.alloc 5 in
      M.copy α0 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 : ref f64.t := borrow number in
        let* α8 : M.Val f64.t := deref α7 in
        let* α9 : ref f64.t := borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : ref usize.t := borrow width in
        let* α13 : M.Val usize.t := deref α12 in
        let* α14 : ref usize.t := borrow α13 in
        let* α15 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["from_usize"] α14 in
        let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
        let* α17 : M.Val (array core.fmt.rt.Argument.t) :=
          M.alloc [ α11; α16 ] in
        let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
        let* α19 : M.Val (array core.fmt.rt.Argument.t) := deref α18 in
        let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
        let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α20 in
        let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α21 in
        let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
        let* α24 : M.Val usize.t := M.alloc 0 in
        let* α25 : usize.t := M.read α24 in
        let* α26 : M.Val char.t := M.alloc " "%char in
        let* α27 : char.t := M.read α26 in
        let* α28 : M.Val u32.t := M.alloc 0 in
        let* α29 : u32.t := M.read α28 in
        let* α30 : M.Val usize.t := M.alloc 1 in
        let* α31 : usize.t := M.read α30 in
        let* α32 : core.fmt.rt.Count.t := "unimplemented parent_kind" α31 in
        let* α33 : core.fmt.rt.Placeholder.t :=
          core.fmt.rt.Placeholder.t::["new"]
            α25
            α27
            core.fmt.rt.Alignment.Right
            α29
            core.fmt.rt.Count.Implied
            α32 in
        let* α34 : M.Val core.fmt.rt.Placeholder.t := M.alloc α33 in
        let* α35 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α34 ] in
        let* α36 : ref (array core.fmt.rt.Placeholder.t) := borrow α35 in
        let* α37 : M.Val (array core.fmt.rt.Placeholder.t) := deref α36 in
        let* α38 : ref (array core.fmt.rt.Placeholder.t) := borrow α37 in
        let* α39 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          M.alloc α38 in
        let* α40 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α39 in
        let* α41 : ref (slice core.fmt.rt.Placeholder.t) := M.read α40 in
        let* α0 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α42 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α43 : core.fmt.rt.UnsafeArg.t := M.read α42 in
        let* α44 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1_formatted"] α6 α23 α41 α43 in
        let* α45 : unit := std.io.stdio._print α44 in
        M.alloc α45 in
      M.alloc tt in
    M.alloc tt).

Module  Structure.
Section Structure.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Global Instance Get_0 : Notations.Dot "0" := {
    Notations.dot := Ref.map (fun x => x.(x0)) (fun v x => x <| x0 := v |>);
  }.
End Structure.
End Structure.
