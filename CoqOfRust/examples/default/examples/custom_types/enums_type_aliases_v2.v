(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module VeryVerboseEnumOfThingsToDoWithNumbers.
  Inductive t : Set :=
  | Add
  | Subtract.
End VeryVerboseEnumOfThingsToDoWithNumbers.

Module  Impl_enums_type_aliases_v2_VeryVerboseEnumOfThingsToDoWithNumbers_t.
Section Impl_enums_type_aliases_v2_VeryVerboseEnumOfThingsToDoWithNumbers_t.
  Ltac Self :=
    exact enums_type_aliases_v2.VeryVerboseEnumOfThingsToDoWithNumbers.t.
  
  (*
      fn run(&self, x: i32, y: i32) -> i32 {
          match self {
              Self::Add => x + y,
              Self::Subtract => x - y,
          }
      }
  *)
  Definition run (self : ref ltac:(Self)) (x : i32.t) (y : i32.t) : M i32.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* x : M.Val i32.t := M.alloc x in
    let* y : M.Val i32.t := M.alloc y in
    let* α0 :
        ref enums_type_aliases_v2.VeryVerboseEnumOfThingsToDoWithNumbers.t :=
      M.read self in
    let* α1 : M.Val i32.t :=
      match α0 with
      | enums_type_aliases_v2.VeryVerboseEnumOfThingsToDoWithNumbers.Add  =>
        let* α0 : i32.t := M.read x in
        let* α1 : i32.t := M.read y in
        let* α2 : i32.t := BinOp.Panic.add α0 α1 in
        M.alloc α2
      |
          enums_type_aliases_v2.VeryVerboseEnumOfThingsToDoWithNumbers.Subtract 
          =>
        let* α0 : i32.t := M.read x in
        let* α1 : i32.t := M.read y in
        let* α2 : i32.t := BinOp.Panic.sub α0 α1 in
        M.alloc α2
      end in
    M.read α1.
  
  Global Instance AssociatedFunction_run :
    Notations.DoubleColon ltac:(Self) "run" := {
    Notations.double_colon := run;
  }.
End Impl_enums_type_aliases_v2_VeryVerboseEnumOfThingsToDoWithNumbers_t.
End Impl_enums_type_aliases_v2_VeryVerboseEnumOfThingsToDoWithNumbers_t.
