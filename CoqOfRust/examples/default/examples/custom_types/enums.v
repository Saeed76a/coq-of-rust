(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module WebEvent.
  Module Click.
    Unset Primitive Projections.
    Record t : Set := {
      x : i64.t;
      y : i64.t;
    }.
    Global Set Primitive Projections.
  End Click.
  
  Inductive t : Set :=
  | PageLoad
  | PageUnload
  | KeyPress (_ : char.t)
  | Paste (_ : alloc.string.String.t)
  | Click (_ : Click.t).
End WebEvent.

(*
fn inspect(event: WebEvent) {
    match event {
        WebEvent::PageLoad => println!("page loaded, réfé"),
        WebEvent::PageUnload => println!("page unloaded"),
        // Destructure `c` from inside the `enum`.
        WebEvent::KeyPress(c) => println!("pressed '{}'.", c),
        WebEvent::Paste(s) => println!("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        WebEvent::Click { x, y } => {
            println!("clicked at x={}, y={}.", x, y);
        }
    }
}
*)
Definition inspect (event : enums.WebEvent.t) : M unit :=
  let* event := M.alloc event in
  M.function_body
    (let* α0 := M.read event in
    match α0 with
    | enums.WebEvent.PageLoad  =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc
            [
              mk_str
                ("page loaded, r" ++
                  String.String "233" ("f" ++ String.String "233" "
"))
            ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt
    | enums.WebEvent.PageUnload  =>
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "page unloaded
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 := core.fmt.Arguments.t::["new_const"] α3 in
        let* α5 := std.io.stdio._print α4 in
        M.alloc α5 in
      M.alloc tt
    | enums.WebEvent.KeyPress c =>
      let* c := M.alloc c in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "pressed '"; mk_str "'.
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref char.t) := borrow c in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt
    | enums.WebEvent.Paste s =>
      let* s := M.alloc s in
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "pasted ""; mk_str "".
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref alloc.string.String.t) := borrow s in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt
    |
        enums.WebEvent.Click
        {| enums.WebEvent.Click.x := x; enums.WebEvent.Click.y := y;
        |}
        =>
      let* y := M.alloc y in
      let* x := M.alloc x in
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "clicked at x="; mk_str ", y="; mk_str ".
" ] in
          let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
          let* α2 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 := M.read α2 in
          let* α4 : M.Val (ref i64.t) := borrow x in
          let* α5 := M.read α4 in
          let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
          let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
          let* α8 : M.Val (ref i64.t) := borrow y in
          let* α9 := M.read α8 in
          let* α10 := core.fmt.rt.Argument.t::["new_display"] α9 in
          let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
          let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
            M.alloc [ α7; α11 ] in
          let* α13 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α12 in
          let* α14 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α13 in
          let* α15 := M.read α14 in
          let* α16 := core.fmt.Arguments.t::["new_v1"] α3 α15 in
          let* α17 := std.io.stdio._print α16 in
          M.alloc α17 in
        M.alloc tt in
      M.alloc tt
    end).

(*
fn main() {
    let pressed = WebEvent::KeyPress('x');
    // `to_owned()` creates an owned `String` from a string slice.
    let pasted = WebEvent::Paste("my text".to_owned());
    let click = WebEvent::Click { x: 20, y: 80 };
    let load = WebEvent::PageLoad;
    let unload = WebEvent::PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* pressed : M.Val enums.WebEvent.t :=
      let* α0 : M.Val char.t := M.alloc "x"%char in
      let* α1 := M.read α0 in
      M.alloc (enums.WebEvent.KeyPress α1) in
    let* pasted : M.Val enums.WebEvent.t :=
      let* α0 : M.Val str.t := deref (mk_str "my text") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 :=
        (alloc.borrow.ToOwned.to_owned
            (Self := str.t)
            (Trait := ltac:(refine _)))
          α2 in
      M.alloc (enums.WebEvent.Paste α3) in
    let* click : M.Val enums.WebEvent.t :=
      let* α0 : M.Val i64.t := M.alloc 20 in
      let* α1 := M.read α0 in
      let* α2 : M.Val i64.t := M.alloc 80 in
      let* α3 := M.read α2 in
      M.alloc
        enums.WebEvent.Click
          {|
          enums.WebEvent.Click.x := α1;
          enums.WebEvent.Click.y := α3;
        |} in
    let* load : M.Val enums.WebEvent.t := M.alloc enums.WebEvent.PageLoad in
    let* unload : M.Val enums.WebEvent.t := M.alloc enums.WebEvent.PageUnload in
    let* _ : M.Val unit :=
      let* α0 := M.read pressed in
      let* α1 := enums.inspect α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 := M.read pasted in
      let* α1 := enums.inspect α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 := M.read click in
      let* α1 := enums.inspect α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 := M.read load in
      let* α1 := enums.inspect α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 := M.read unload in
      let* α1 := enums.inspect α0 in
      M.alloc α1 in
    M.alloc tt).
