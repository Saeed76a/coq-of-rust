(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module WebEvent.
  Module Click.
    Unset Primitive Projections.
    Record t : Set := {
      x : i64.t;
      y : i64.t;
    }.
    Global Set Primitive Projections.
  End Click.
  
  Inductive t : Set :=
  | PageLoad
  | PageUnload
  | KeyPress (_ : char.t)
  | Paste (_ : alloc.string.String.t)
  | Click (_ : Click.t).
End WebEvent.

(*
fn inspect(event: WebEvent) {
    match event {
        WebEvent::PageLoad => println!("page loaded, réfé"),
        WebEvent::PageUnload => println!("page unloaded"),
        // Destructure `c` from inside the `enum`.
        WebEvent::KeyPress(c) => println!("pressed '{}'.", c),
        WebEvent::Paste(s) => println!("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        WebEvent::Click { x, y } => {
            println!("clicked at x={}, y={}.", x, y);
        }
    }
}
*)
Definition inspect (event : enums.WebEvent.t) : M unit :=
  let* event : M.Val enums.WebEvent.t := M.alloc event in
  M.function_body
    (let* α0 := M.read event in
    let* α1 : M.Val unit :=
      match α0 with
      | enums.WebEvent.PageLoad  =>
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc
              [
                mk_str
                  ("page loaded, r" ++
                    String.String "233" ("f" ++ String.String "233" "
"))
              ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_const"] α6 in
          let* α8 : unit := std.io.stdio._print α7 in
          M.alloc α8 in
        M.alloc tt
      | enums.WebEvent.PageUnload  =>
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "page unloaded
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_const"] α6 in
          let* α8 : unit := std.io.stdio._print α7 in
          M.alloc α8 in
        M.alloc tt
      | enums.WebEvent.KeyPress c =>
        let* c := M.alloc c in
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "pressed '"; mk_str "'.
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : ref char.t := borrow c in
          let* α8 : M.Val char.t := deref α7 in
          let* α9 : ref char.t := borrow α8 in
          let* α10 : core.fmt.rt.Argument.t :=
            core.fmt.rt.Argument.t::["new_display"] α9 in
          let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
          let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
          let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
          let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
          let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
          let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
            M.alloc α15 in
          let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α16 in
          let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
          let* α19 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_v1"] α6 α18 in
          let* α20 : unit := std.io.stdio._print α19 in
          M.alloc α20 in
        M.alloc tt
      | enums.WebEvent.Paste s =>
        let* s := M.alloc s in
        let* _ : M.Val unit :=
          let* α0 : M.Val (array (ref str.t)) :=
            M.alloc [ mk_str "pasted ""; mk_str "".
" ] in
          let* α1 : ref (array (ref str.t)) := borrow α0 in
          let* α2 : M.Val (array (ref str.t)) := deref α1 in
          let* α3 : ref (array (ref str.t)) := borrow α2 in
          let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
          let* α5 : M.Val (ref (slice (ref str.t))) :=
            pointer_coercion "Unsize" α4 in
          let* α6 : ref (slice (ref str.t)) := M.read α5 in
          let* α7 : ref alloc.string.String.t := borrow s in
          let* α8 : M.Val alloc.string.String.t := deref α7 in
          let* α9 : ref alloc.string.String.t := borrow α8 in
          let* α10 : core.fmt.rt.Argument.t :=
            core.fmt.rt.Argument.t::["new_display"] α9 in
          let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
          let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
          let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
          let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
          let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
          let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
            M.alloc α15 in
          let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
            pointer_coercion "Unsize" α16 in
          let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
          let* α19 : core.fmt.Arguments.t :=
            core.fmt.Arguments.t::["new_v1"] α6 α18 in
          let* α20 : unit := std.io.stdio._print α19 in
          M.alloc α20 in
        M.alloc tt
      |
          enums.WebEvent.Click
          {| enums.WebEvent.Click.x := x; enums.WebEvent.Click.y := y;
          |}
          =>
        let* y := M.alloc y in
        let* x := M.alloc x in
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "clicked at x="; mk_str ", y="; mk_str ".
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : ref i64.t := borrow x in
            let* α8 : M.Val i64.t := deref α7 in
            let* α9 : ref i64.t := borrow α8 in
            let* α10 : core.fmt.rt.Argument.t :=
              core.fmt.rt.Argument.t::["new_display"] α9 in
            let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
            let* α12 : ref i64.t := borrow y in
            let* α13 : M.Val i64.t := deref α12 in
            let* α14 : ref i64.t := borrow α13 in
            let* α15 : core.fmt.rt.Argument.t :=
              core.fmt.rt.Argument.t::["new_display"] α14 in
            let* α16 : M.Val core.fmt.rt.Argument.t := M.alloc α15 in
            let* α17 : M.Val (array core.fmt.rt.Argument.t) :=
              M.alloc [ α11; α16 ] in
            let* α18 : ref (array core.fmt.rt.Argument.t) := borrow α17 in
            let* α19 : M.Val (array core.fmt.rt.Argument.t) := deref α18 in
            let* α20 : ref (array core.fmt.rt.Argument.t) := borrow α19 in
            let* α21 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
              M.alloc α20 in
            let* α22 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
              pointer_coercion "Unsize" α21 in
            let* α23 : ref (slice core.fmt.rt.Argument.t) := M.read α22 in
            let* α24 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_v1"] α6 α23 in
            let* α25 : unit := std.io.stdio._print α24 in
            M.alloc α25 in
          M.alloc tt in
        M.alloc tt
      end in
    M.read α1).

(*
fn main() {
    let pressed = WebEvent::KeyPress('x');
    // `to_owned()` creates an owned `String` from a string slice.
    let pasted = WebEvent::Paste("my text".to_owned());
    let click = WebEvent::Click { x: 20, y: 80 };
    let load = WebEvent::PageLoad;
    let unload = WebEvent::PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* pressed : M.Val enums.WebEvent.t :=
      let* α0 : M.Val char.t := M.alloc "x"%char in
      let* α1 : char.t := M.read α0 in
      M.alloc (enums.WebEvent.KeyPress α1) in
    let* pasted : M.Val enums.WebEvent.t :=
      let* α0 : ref str.t := M.read (mk_str "my text") in
      let* α1 : M.Val str.t := deref α0 in
      let* α2 : ref str.t := borrow α1 in
      let* α3 : alloc.string.String.t :=
        (alloc.borrow.ToOwned.to_owned
            (Self := str.t)
            (Trait := ltac:(refine _)))
          α2 in
      M.alloc (enums.WebEvent.Paste α3) in
    let* click : M.Val enums.WebEvent.t :=
      let* α0 : M.Val i64.t := M.alloc 20 in
      let* α1 : i64.t := M.read α0 in
      let* α2 : M.Val i64.t := M.alloc 80 in
      let* α3 : i64.t := M.read α2 in
      M.alloc
        enums.WebEvent.Click
          {|
          enums.WebEvent.Click.x := α1;
          enums.WebEvent.Click.y := α3;
        |} in
    let* load : M.Val enums.WebEvent.t := M.alloc enums.WebEvent.PageLoad in
    let* unload : M.Val enums.WebEvent.t := M.alloc enums.WebEvent.PageUnload in
    let* _ : M.Val unit :=
      let* α0 : enums.WebEvent.t := M.read pressed in
      let* α1 : unit := enums.inspect α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 : enums.WebEvent.t := M.read pasted in
      let* α1 : unit := enums.inspect α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 : enums.WebEvent.t := M.read click in
      let* α1 : unit := enums.inspect α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 : enums.WebEvent.t := M.read load in
      let* α1 : unit := enums.inspect α0 in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* α0 : enums.WebEvent.t := M.read unload in
      let* α1 : unit := enums.inspect α0 in
      M.alloc α1 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
