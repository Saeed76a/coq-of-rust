(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Number.
  Inductive t : Set :=
  | Zero
  | One
  | Two.
End Number.

Module Color.
  Inductive t : Set :=
  | Red
  | Green
  | Blue.
End Color.

(*
fn main() {
    // `enums` can be cast as integers.
    println!("zero is {}", Number::Zero as i32);
    println!("one is {}", Number::One as i32);

    println!("roses are #{:06x}", Color::Red as i32);
    println!("violets are #{:06x}", Color::Blue as i32);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "zero is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val i32.t := cast 0 in
      let* α6 : ref i32.t := borrow α5 in
      let* α7 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α6 in
      let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : ref (array core.fmt.rt.Argument.t) := borrow α9 in
      let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α10 in
      let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α11 in
      let* α13 : ref (slice core.fmt.rt.Argument.t) := M.read α12 in
      let* α14 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α13 in
      let* α15 : unit := std.io.stdio._print α14 in
      M.alloc α15 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "one is "; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val i32.t := cast 1 in
      let* α6 : ref i32.t := borrow α5 in
      let* α7 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_display"] α6 in
      let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : ref (array core.fmt.rt.Argument.t) := borrow α9 in
      let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α10 in
      let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α11 in
      let* α13 : ref (slice core.fmt.rt.Argument.t) := M.read α12 in
      let* α14 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1"] α4 α13 in
      let* α15 : unit := std.io.stdio._print α14 in
      M.alloc α15 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "roses are #"; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val isize.t := BinOp.add enums_c_like.Color.Red 0 in
      let* α6 : M.Val i32.t := cast α5 in
      let* α7 : ref i32.t := borrow α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_lower_hex"] α7 in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α9 ] in
      let* α11 : ref (array core.fmt.rt.Argument.t) := borrow α10 in
      let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α11 in
      let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α12 in
      let* α14 : ref (slice core.fmt.rt.Argument.t) := M.read α13 in
      let* α15 : M.Val usize.t := M.alloc 0 in
      let* α16 : usize.t := M.read α15 in
      let* α17 : M.Val char.t := M.alloc " "%char in
      let* α18 : char.t := M.read α17 in
      let* α19 : M.Val u32.t := M.alloc 8 in
      let* α20 : u32.t := M.read α19 in
      let* α21 : M.Val usize.t := M.alloc 6 in
      let* α22 : usize.t := M.read α21 in
      let* α23 : core.fmt.rt.Count.t := "unimplemented parent_kind" α22 in
      let* α24 : core.fmt.rt.Placeholder.t :=
        core.fmt.rt.Placeholder.t::["new"]
          α16
          α18
          core.fmt.rt.Alignment.Unknown
          α20
          core.fmt.rt.Count.Implied
          α23 in
      let* α25 : M.Val core.fmt.rt.Placeholder.t := M.alloc α24 in
      let* α26 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α25 ] in
      let* α27 : ref (array core.fmt.rt.Placeholder.t) := borrow α26 in
      let* α28 : M.Val (ref (array core.fmt.rt.Placeholder.t)) := M.alloc α27 in
      let* α29 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
        pointer_coercion "Unsize" α28 in
      let* α30 : ref (slice core.fmt.rt.Placeholder.t) := M.read α29 in
      let* α31 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
      let* α32 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1_formatted"] α4 α14 α30 α31 in
      let* α33 : unit := std.io.stdio._print α32 in
      M.alloc α33 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "violets are #"; mk_str "
" ] in
      let* α1 : ref (array (ref str.t)) := borrow α0 in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
      let* α3 : M.Val (ref (slice (ref str.t))) :=
        pointer_coercion "Unsize" α2 in
      let* α4 : ref (slice (ref str.t)) := M.read α3 in
      let* α5 : M.Val isize.t := BinOp.add enums_c_like.Color.Blue 0 in
      let* α6 : M.Val i32.t := cast α5 in
      let* α7 : ref i32.t := borrow α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        core.fmt.rt.Argument.t::["new_lower_hex"] α7 in
      let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
      let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α9 ] in
      let* α11 : ref (array core.fmt.rt.Argument.t) := borrow α10 in
      let* α12 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α11 in
      let* α13 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
        pointer_coercion "Unsize" α12 in
      let* α14 : ref (slice core.fmt.rt.Argument.t) := M.read α13 in
      let* α15 : M.Val usize.t := M.alloc 0 in
      let* α16 : usize.t := M.read α15 in
      let* α17 : M.Val char.t := M.alloc " "%char in
      let* α18 : char.t := M.read α17 in
      let* α19 : M.Val u32.t := M.alloc 8 in
      let* α20 : u32.t := M.read α19 in
      let* α21 : M.Val usize.t := M.alloc 6 in
      let* α22 : usize.t := M.read α21 in
      let* α23 : core.fmt.rt.Count.t := "unimplemented parent_kind" α22 in
      let* α24 : core.fmt.rt.Placeholder.t :=
        core.fmt.rt.Placeholder.t::["new"]
          α16
          α18
          core.fmt.rt.Alignment.Unknown
          α20
          core.fmt.rt.Count.Implied
          α23 in
      let* α25 : M.Val core.fmt.rt.Placeholder.t := M.alloc α24 in
      let* α26 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α25 ] in
      let* α27 : ref (array core.fmt.rt.Placeholder.t) := borrow α26 in
      let* α28 : M.Val (ref (array core.fmt.rt.Placeholder.t)) := M.alloc α27 in
      let* α29 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
        pointer_coercion "Unsize" α28 in
      let* α30 : ref (slice core.fmt.rt.Placeholder.t) := M.read α29 in
      let* α31 : core.fmt.rt.UnsafeArg.t := core.fmt.rt.UnsafeArg.t::["new"] in
      let* α32 : core.fmt.Arguments.t :=
        core.fmt.Arguments.t::["new_v1_formatted"] α4 α14 α30 α31 in
      let* α33 : unit := std.io.stdio._print α32 in
      M.alloc α33 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
