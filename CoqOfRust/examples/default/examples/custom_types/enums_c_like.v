(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Number.
  Inductive t : Set :=
  | Zero
  | One
  | Two.
End Number.

Module Color.
  Inductive t : Set :=
  | Red
  | Green
  | Blue.
End Color.

(*
fn main() {
    // `enums` can be cast as integers.
    println!("zero is {}", Number::Zero as i32);
    println!("one is {}", Number::One as i32);

    println!("roses are #{:06x}", Color::Red as i32);
    println!("violets are #{:06x}", Color::Blue as i32);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "zero is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val i32.t := cast 0 in
        let* α5 : M.Val (ref i32.t) := borrow α4 in
        let* α6 := M.read α5 in
        let* α7 := core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
        let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α9 in
        let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α10 in
        let* α12 := M.read α11 in
        let* α13 := core.fmt.Arguments.t::["new_v1"] α3 α12 in
        let* α14 := std.io.stdio._print α13 in
        M.alloc α14 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "one is "; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val i32.t := cast 1 in
        let* α5 : M.Val (ref i32.t) := borrow α4 in
        let* α6 := M.read α5 in
        let* α7 := core.fmt.rt.Argument.t::["new_display"] α6 in
        let* α8 : M.Val core.fmt.rt.Argument.t := M.alloc α7 in
        let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
        let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α9 in
        let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α10 in
        let* α12 := M.read α11 in
        let* α13 := core.fmt.Arguments.t::["new_v1"] α3 α12 in
        let* α14 := std.io.stdio._print α13 in
        M.alloc α14 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "roses are #"; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val isize.t := BinOp.add enums_c_like.Color.Red 0 in
        let* α5 : M.Val i32.t := cast α4 in
        let* α6 : M.Val (ref i32.t) := borrow α5 in
        let* α7 := M.read α6 in
        let* α8 := core.fmt.rt.Argument.t::["new_lower_hex"] α7 in
        let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
        let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α9 ] in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 := M.read α12 in
        let* α14 : M.Val usize.t := M.alloc 0 in
        let* α15 := M.read α14 in
        let* α16 : M.Val char.t := M.alloc " "%char in
        let* α17 := M.read α16 in
        let* α18 : M.Val u32.t := M.alloc 8 in
        let* α19 := M.read α18 in
        let* α20 : M.Val usize.t := M.alloc 6 in
        let* α21 := M.read α20 in
        let* α22 := "unimplemented parent_kind" α21 in
        let* α23 :=
          core.fmt.rt.Placeholder.t::["new"]
            α15
            α17
            core.fmt.rt.Alignment.Unknown
            α19
            core.fmt.rt.Count.Implied
            α22 in
        let* α24 : M.Val core.fmt.rt.Placeholder.t := M.alloc α23 in
        let* α25 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α24 ] in
        let* α26 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          borrow α25 in
        let* α27 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α26 in
        let* α28 := M.read α27 in
        let* α0 := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α29 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α30 := M.read α29 in
        let* α31 := core.fmt.Arguments.t::["new_v1_formatted"] α3 α13 α28 α30 in
        let* α32 := std.io.stdio._print α31 in
        M.alloc α32 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "violets are #"; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val isize.t := BinOp.add enums_c_like.Color.Blue 0 in
        let* α5 : M.Val i32.t := cast α4 in
        let* α6 : M.Val (ref i32.t) := borrow α5 in
        let* α7 := M.read α6 in
        let* α8 := core.fmt.rt.Argument.t::["new_lower_hex"] α7 in
        let* α9 : M.Val core.fmt.rt.Argument.t := M.alloc α8 in
        let* α10 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α9 ] in
        let* α11 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α10 in
        let* α12 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α11 in
        let* α13 := M.read α12 in
        let* α14 : M.Val usize.t := M.alloc 0 in
        let* α15 := M.read α14 in
        let* α16 : M.Val char.t := M.alloc " "%char in
        let* α17 := M.read α16 in
        let* α18 : M.Val u32.t := M.alloc 8 in
        let* α19 := M.read α18 in
        let* α20 : M.Val usize.t := M.alloc 6 in
        let* α21 := M.read α20 in
        let* α22 := "unimplemented parent_kind" α21 in
        let* α23 :=
          core.fmt.rt.Placeholder.t::["new"]
            α15
            α17
            core.fmt.rt.Alignment.Unknown
            α19
            core.fmt.rt.Count.Implied
            α22 in
        let* α24 : M.Val core.fmt.rt.Placeholder.t := M.alloc α23 in
        let* α25 : M.Val (array core.fmt.rt.Placeholder.t) := M.alloc [ α24 ] in
        let* α26 : M.Val (ref (array core.fmt.rt.Placeholder.t)) :=
          borrow α25 in
        let* α27 : M.Val (ref (slice core.fmt.rt.Placeholder.t)) :=
          pointer_coercion "Unsize" α26 in
        let* α28 := M.read α27 in
        let* α0 := core.fmt.rt.UnsafeArg.t::["new"] in
        let* α29 : M.Val core.fmt.rt.UnsafeArg.t := M.alloc α0 in
        let* α30 := M.read α29 in
        let* α31 := core.fmt.Arguments.t::["new_v1_formatted"] α3 α13 α28 α30 in
        let* α32 := std.io.stdio._print α31 in
        M.alloc α32 in
      M.alloc tt in
    M.alloc tt).
