(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac AliasedResult T :=
  exact (core.result.Result.t T core.num.error.ParseIntError.t).

(*
fn multiply(first_number_str: &str, second_number_str: &str) -> AliasedResult<i32> {
    first_number_str.parse::<i32>().and_then(|first_number| {
        second_number_str
            .parse::<i32>()
            .map(|second_number| first_number * second_number)
    })
}
*)
Definition multiply
    (first_number_str : ref str.t)
    (second_number_str : ref str.t)
    : M ltac:(aliases_for_result.AliasedResult i32.t) :=
  let* first_number_str := M.alloc first_number_str in
  let* second_number_str := M.alloc second_number_str in
  let* α0 : ref str.t := M.read first_number_str in
  let* α1 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
    M.call (str.t::["parse"] α0) in
  M.call
    ((core.result.Result.t i32.t core.num.error.ParseIntError.t)::["and_then"]
      α1
      (fun (α0 : i32.t) =>
        (match_operator
          α0
          [
            fun α =>
              match α with
              | first_number =>
                let* first_number := M.alloc first_number in
                let* α0 : ref str.t := M.read second_number_str in
                let* α1 :
                    core.result.Result.t i32.t core.num.error.ParseIntError.t :=
                  M.call (str.t::["parse"] α0) in
                M.call
                  ((core.result.Result.t
                        i32.t
                        core.num.error.ParseIntError.t)::["map"]
                    α1
                    (fun (α0 : i32.t) =>
                      (match_operator
                        α0
                        [
                          fun α =>
                            match α with
                            | second_number =>
                              let* second_number := M.alloc second_number in
                              let* α0 : i32.t := M.read first_number in
                              let* α1 : i32.t := M.read second_number in
                              BinOp.Panic.mul α0 α1
                            end :
                            M i32.t
                        ]) :
                      M i32.t))
              end :
              M (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          ]) :
        M (core.result.Result.t i32.t core.num.error.ParseIntError.t))).

(*
fn print(result: AliasedResult<i32>) {
    match result {
        Ok(n) => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print
    (result : ltac:(aliases_for_result.AliasedResult i32.t))
    : M unit :=
  let* result := M.alloc result in
  let* α0 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
    M.read result in
  let* α1 : M.Val unit :=
    match_operator
      α0
      [
        fun α =>
          match α with
          | core.result.Result.Ok n =>
            let* n := M.alloc n in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "n is ") in
              let* α1 : ref str.t := M.read (mk_str "
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow n)) in
              let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α5 ] in
              let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α6) in
              let* α8 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α7) in
              let* α9 : core.fmt.Arguments.t :=
                M.call (core.fmt.Arguments.t::["new_v1"] α4 α8) in
              let* α10 : unit := M.call (std.io.stdio._print α9) in
              M.alloc α10 in
            M.alloc tt
          | _ => M.break_match
          end :
          M (M.Val unit);
        fun α =>
          match α with
          | core.result.Result.Err e =>
            let* e := M.alloc e in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "Error: ") in
              let* α1 : ref str.t := M.read (mk_str "
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow e)) in
              let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α5 ] in
              let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α6) in
              let* α8 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α7) in
              let* α9 : core.fmt.Arguments.t :=
                M.call (core.fmt.Arguments.t::["new_v1"] α4 α8) in
              let* α10 : unit := M.call (std.io.stdio._print α9) in
              M.alloc α10 in
            M.alloc tt
          | _ => M.break_match
          end :
          M (M.Val unit)
      ] in
  M.read α1.

(*
fn main() {
    print(multiply("10", "2"));
    print(multiply("t", "2"));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "10") in
    let* α1 : ref str.t := M.read (mk_str "2") in
    let* α2 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
      M.call (aliases_for_result.multiply α0 α1) in
    let* α3 : unit := M.call (aliases_for_result.print α2) in
    M.alloc α3 in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "t") in
    let* α1 : ref str.t := M.read (mk_str "2") in
    let* α2 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
      M.call (aliases_for_result.multiply α0 α1) in
    let* α3 : unit := M.call (aliases_for_result.print α2) in
    M.alloc α3 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
