(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac Result T :=
  exact
    (core.result.Result.t
      T
      (alloc.boxed.Box.t _ (* dyn *) alloc.boxed.Box.Default.A)).

Module  EmptyVec.
Section EmptyVec.
  Inductive t : Set := Build.
End EmptyVec.
End EmptyVec.

Module  Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec_t.
Section Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec_t.
  Ltac Self := exact other_uses_of_question_mark.EmptyVec.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
      let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val str.t)) := deref (mk_str "EmptyVec") in
      let* α3 : ltac:(refine (M.Val (ref str.t))) := borrow α2 in
      let* α4 := core.fmt.Formatter.t::["write_str"] α1 α3 in
      M.alloc α4).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec_t.
End Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec_t.

Module  Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec_t.
Section Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec_t.
  Ltac Self := exact other_uses_of_question_mark.EmptyVec.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "invalid first item to double")
      }
  *)
  Definition fmt
      (self : M.Val (ref ltac:(Self)))
      (f : M.Val (mut_ref core.fmt.Formatter.t))
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine (M.Val core.fmt.Formatter.t)) := deref f in
      let* α1 : ltac:(refine (M.Val (mut_ref core.fmt.Formatter.t))) :=
        borrow_mut α0 in
      let* α2 : ltac:(refine (M.Val (array (ref str.t)))) :=
        M.alloc [ mk_str "invalid first item to double" ] in
      let* α3 : ltac:(refine (M.Val (ref (array (ref str.t))))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
        pointer_coercion "Unsize" α3 in
      let* α5 := core.fmt.Arguments.t::["new_const"] α4 in
      let* α6 : ltac:(refine (M.Val core.fmt.Arguments.t)) := M.alloc α5 in
      let* α7 := core.fmt.Formatter.t::["write_fmt"] α1 α6 in
      M.alloc α7).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait ltac:(Self) := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec_t.
End Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec_t.

Module  Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec_t.
Section Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec_t.
  Ltac Self := exact other_uses_of_question_mark.EmptyVec.t.
  
  Global Instance ℐ : core.error.Error.Required.Trait ltac:(Self) := {
    core.error.Error.source := Datatypes.None;
    core.error.Error.type_id := Datatypes.None;
    core.error.Error.description := Datatypes.None;
    core.error.Error.cause := Datatypes.None;
    core.error.Error.provide := Datatypes.None;
  }.
End Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec_t.
End Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec_t.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(EmptyVec)?;
    let parsed = first.parse::<i32>()?;
    Ok(2 * parsed)
}
*)
Definition double_first
    (vec : M.Val (alloc.vec.Vec.t (ref str.t) alloc.vec.Vec.Default.A))
    : M ltac:(other_uses_of_question_mark.Result i32.t) :=
  let return_ :=
    M.return_ (R := ltac:(other_uses_of_question_mark.Result i32.t)) in
  M.function_body
    (let* first : ltac:(refine (M.Val (ref (ref str.t)))) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)))) :=
        borrow vec in
      let* α1 :=
        (core.ops.deref.Deref.deref
            (Self := alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) := M.alloc α1 in
      let* α3 : ltac:(refine (M.Val (slice (ref str.t)))) := deref α2 in
      let* α4 : ltac:(refine (M.Val (ref (slice (ref str.t))))) := borrow α3 in
      let* α5 := (slice (ref str.t))::["first"] α4 in
      let* α6 :
          ltac:(refine (M.Val (core.option.Option.t (ref (ref str.t))))) :=
        M.alloc α5 in
      let* α7 : ltac:(refine (M.Val other_uses_of_question_mark.EmptyVec.t)) :=
        M.alloc other_uses_of_question_mark.EmptyVec.Build_t in
      let* α8 := (core.option.Option.t (ref (ref str.t)))::["ok_or"] α6 α7 in
      let* α9 :
          ltac:(refine
            (M.Val
              (core.result.Result.t
                (ref (ref str.t))
                other_uses_of_question_mark.EmptyVec.t))) :=
        M.alloc α8 in
      let* α10 :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.result.Result.t
                (ref (ref str.t))
                other_uses_of_question_mark.EmptyVec.t)
            (Trait := ltac:(refine _)))
          α9 in
      let* α11 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  other_uses_of_question_mark.EmptyVec.t)
                (ref (ref str.t))))) :=
        M.alloc α10 in
      let* α12 := M.read α11 in
      let* α13 : ltac:(refine (M.Val (ref (ref str.t)))) :=
        match α12 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result.t
                    i32.t
                    (alloc.boxed.Box.t
                      type not implemented
                      alloc.alloc.Global.t))
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine (M.Val never.t)) := return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      M.copy α13 in
    let* parsed : ltac:(refine (M.Val i32.t)) :=
      let* α0 : ltac:(refine (M.Val (ref str.t))) := deref first in
      let* α1 : ltac:(refine (M.Val str.t)) := deref α0 in
      let* α2 : ltac:(refine (M.Val (ref str.t))) := borrow α1 in
      let* α3 := str.t::["parse"] α2 in
      let* α4 :
          ltac:(refine
            (M.Val
              (core.result.Result.t i32.t core.num.error.ParseIntError.t))) :=
        M.alloc α3 in
      let* α5 :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result.t i32.t core.num.error.ParseIntError.t)
            (Trait := ltac:(refine _)))
          α4 in
      let* α6 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  core.num.error.ParseIntError.t)
                i32.t))) :=
        M.alloc α5 in
      let* α7 := M.read α6 in
      let* α8 : ltac:(refine (M.Val i32.t)) :=
        match α7 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result.t
                    i32.t
                    (alloc.boxed.Box.t
                      type not implemented
                      alloc.alloc.Global.t))
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine (M.Val never.t)) := return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      M.copy α8 in
    let* α0 : ltac:(refine (M.Val i32.t)) := M.alloc 2 in
    let* α1 : ltac:(refine (M.Val i32.t)) := BinOp.mul α0 parsed in
    let* α2 := M.read α1 in
    M.alloc (core.result.Result.Ok α2)).

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print
    (result : M.Val ltac:(other_uses_of_question_mark.Result i32.t))
    : M unit :=
  M.function_body
    (let* α0 := M.read result in
    match α0 with
    | core.result.Result.Ok n =>
      let* n := M.alloc n in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "The first doubled is "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (M.Val (ref i32.t))) := borrow n in
        let* α4 := core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) := M.alloc α4 in
        let* α6 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α6 in
        let* α8 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 := core.fmt.Arguments.t::["new_v1"] α2 α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) := M.alloc α9 in
        let* α11 := std.io.stdio._print α10 in
        M.alloc α11 in
      M.alloc tt
    | core.result.Result.Err e =>
      let* e := M.alloc e in
      let* _ : ltac:(refine (M.Val unit)) :=
        let* α0 : ltac:(refine (M.Val (array (ref str.t)))) :=
          M.alloc [ mk_str "Error: "; mk_str "
" ] in
        let* α1 : ltac:(refine (M.Val (ref (array (ref str.t))))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (ref (slice (ref str.t))))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (M.Val
                (ref
                  (alloc.boxed.Box.t
                    type not implemented
                    alloc.alloc.Global.t)))) :=
          borrow e in
        let* α4 := core.fmt.rt.Argument.t::["new_display"] α3 in
        let* α5 : ltac:(refine (M.Val core.fmt.rt.Argument.t)) := M.alloc α4 in
        let* α6 : ltac:(refine (M.Val (array core.fmt.rt.Argument.t))) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (M.Val (ref (array core.fmt.rt.Argument.t)))) :=
          borrow α6 in
        let* α8 : ltac:(refine (M.Val (ref (slice core.fmt.rt.Argument.t)))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 := core.fmt.Arguments.t::["new_v1"] α2 α8 in
        let* α10 : ltac:(refine (M.Val core.fmt.Arguments.t)) := M.alloc α9 in
        let* α11 := std.io.stdio._print α10 in
        M.alloc α11 in
      M.alloc tt
    end).

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* numbers :
        ltac:(refine
          (M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "93") in
      let* α1 : ltac:(refine (M.Val (ref str.t))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val str.t)) := deref (mk_str "18") in
      let* α3 : ltac:(refine (M.Val (ref str.t))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val (array (ref str.t)))) :=
        M.alloc [ mk_str "42"; α1; α3 ] in
      let* α5 :
          ltac:(refine
            (M.Val
              (alloc.boxed.Box.t (array (ref str.t)) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α4 in
      let* α6 :
          ltac:(refine
            (M.Val
              (alloc.boxed.Box.t (slice (ref str.t)) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α5 in
      let* α7 := (slice (ref str.t))::["into_vec"] α6 in
      M.alloc α7 in
    let* empty :
        ltac:(refine
          (M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t))) :=
      let* α0 := (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)::["new"] in
      M.alloc α0 in
    let* strings :
        ltac:(refine
          (M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t))) :=
      let* α0 : ltac:(refine (M.Val str.t)) := deref (mk_str "93") in
      let* α1 : ltac:(refine (M.Val (ref str.t))) := borrow α0 in
      let* α2 : ltac:(refine (M.Val str.t)) := deref (mk_str "18") in
      let* α3 : ltac:(refine (M.Val (ref str.t))) := borrow α2 in
      let* α4 : ltac:(refine (M.Val (array (ref str.t)))) :=
        M.alloc [ mk_str "tofu"; α1; α3 ] in
      let* α5 :
          ltac:(refine
            (M.Val
              (alloc.boxed.Box.t (array (ref str.t)) alloc.alloc.Global.t))) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α4 in
      let* α6 :
          ltac:(refine
            (M.Val
              (alloc.boxed.Box.t (slice (ref str.t)) alloc.alloc.Global.t))) :=
        pointer_coercion "Unsize" α5 in
      let* α7 := (slice (ref str.t))::["into_vec"] α6 in
      M.alloc α7 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 := other_uses_of_question_mark.double_first numbers in
      let* α1 :
          ltac:(refine
            (M.Val
              (core.result.Result.t
                i32.t
                (alloc.boxed.Box.t
                  type not implemented
                  alloc.alloc.Global.t)))) :=
        M.alloc α0 in
      let* α2 := other_uses_of_question_mark.print α1 in
      M.alloc α2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 := other_uses_of_question_mark.double_first empty in
      let* α1 :
          ltac:(refine
            (M.Val
              (core.result.Result.t
                i32.t
                (alloc.boxed.Box.t
                  type not implemented
                  alloc.alloc.Global.t)))) :=
        M.alloc α0 in
      let* α2 := other_uses_of_question_mark.print α1 in
      M.alloc α2 in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 := other_uses_of_question_mark.double_first strings in
      let* α1 :
          ltac:(refine
            (M.Val
              (core.result.Result.t
                i32.t
                (alloc.boxed.Box.t
                  type not implemented
                  alloc.alloc.Global.t)))) :=
        M.alloc α0 in
      let* α2 := other_uses_of_question_mark.print α1 in
      M.alloc α2 in
    M.alloc tt).
