(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn drink(beverage: &str) {
    // You shouldn't drink too much sugary beverages.
    if beverage == "lemonade" {
        panic!("AAAaaaaa!!!!");
    }

    println!("Some refreshing {} is all I need.", beverage);
}
*)
Definition drink (beverage : ref str.t) : M unit :=
  let* beverage := M.alloc beverage in
  M.function_body
    (let* _ : M.Val unit :=
      let* α0 : M.Val (ref (ref str.t)) := borrow beverage in
      let* α1 := M.read α0 in
      let* α2 : M.Val (ref (ref str.t)) := borrow (mk_str "lemonade") in
      let* α3 := M.read α2 in
      let* α4 :=
        (core.cmp.PartialEq.eq (Self := ref str.t) (Trait := ltac:(refine _)))
          α1
          α3 in
      let* α5 : M.Val bool.t := M.alloc α4 in
      let* α6 : M.Val bool.t := use α5 in
      let* α7 := M.read α6 in
      if (α7 : bool) then
        let* _ : M.Val unit :=
          let* α0 := M.read (mk_str "AAAaaaaa!!!!") in
          let* α1 := std.panicking.begin_panic α0 in
          let* α2 : M.Val never.t := M.alloc α1 in
          never_to_any α2 in
        let* α0 : M.Val unit := M.alloc tt in
        never_to_any α0
      else
        M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Some refreshing "; mk_str " is all I need.
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := borrow α0 in
        let* α2 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 := M.read α2 in
        let* α4 : M.Val (ref (ref str.t)) := borrow beverage in
        let* α5 := M.read α4 in
        let* α6 := core.fmt.rt.Argument.t::["new_display"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) := borrow α8 in
        let* α10 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α9 in
        let* α11 := M.read α10 in
        let* α12 := core.fmt.Arguments.t::["new_v1"] α3 α11 in
        let* α13 := std.io.stdio._print α12 in
        M.alloc α13 in
      M.alloc tt in
    M.alloc tt).

(*
fn main() {
    drink("water");
    drink("lemonade");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* _ : M.Val unit :=
      let* α0 : M.Val str.t := deref (mk_str "water") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 := panic.drink α2 in
      M.alloc α3 in
    let* _ : M.Val unit :=
      let* α0 : M.Val str.t := deref (mk_str "lemonade") in
      let* α1 : M.Val (ref str.t) := borrow α0 in
      let* α2 := M.read α1 in
      let* α3 := panic.drink α2 in
      M.alloc α3 in
    M.alloc tt).
