(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let strings = vec!["42", "tofu", "93", "999", "18"];
    let mut errors = vec![];
    let numbers: Vec<_> = strings
        .into_iter()
        .map(|s| s.parse::<u8>())
        .filter_map(|r| r.map_err(|e| errors.push(e)).ok())
        .collect();
    println!("Numbers: {:?}", numbers);
    println!("Errors: {:?}", errors);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* strings : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
      let* α0 : ref str.t := M.read (mk_str "tofu") in
      let* α1 : M.Val (ref str.t) := M.alloc α0 in
      let* α2 : ref str.t := M.read (mk_str "93") in
      let* α3 : M.Val (ref str.t) := M.alloc α2 in
      let* α4 : ref str.t := M.read (mk_str "999") in
      let* α5 : M.Val (ref str.t) := M.alloc α4 in
      let* α6 : ref str.t := M.read (mk_str "18") in
      let* α7 : M.Val (ref str.t) := M.alloc α6 in
      let* α8 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "42"; α1; α3; α5; α7 ] in
      let* α9 :
          M.Val (alloc.boxed.Box.t (array (ref str.t)) alloc.alloc.Global.t) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α8 in
      let* α10 :
          M.Val (alloc.boxed.Box.t (slice (ref str.t)) alloc.alloc.Global.t) :=
        pointer_coercion "Unsize" α9 in
      let* α11 : alloc.boxed.Box.t (slice (ref str.t)) alloc.alloc.Global.t :=
        M.read α10 in
      let* α12 : alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t :=
        (slice (ref str.t))::["into_vec"] α11 in
      M.alloc α12 in
    let* errors :
        M.Val
          (alloc.vec.Vec.t
            core.num.error.ParseIntError.t
            alloc.alloc.Global.t) :=
      let* α0 :
          alloc.vec.Vec.t core.num.error.ParseIntError.t alloc.alloc.Global.t :=
        (alloc.vec.Vec.t
            core.num.error.ParseIntError.t
            alloc.alloc.Global.t)::["new"] in
      M.alloc α0 in
    let* numbers : M.Val (alloc.vec.Vec.t u8.t alloc.alloc.Global.t) :=
      let* α0 : alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t :=
        M.read strings in
      let* α1 :
          alloc.vec.into_iter.IntoIter.t (ref str.t) alloc.alloc.Global.t :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : type not implemented :=
        M.read
          (let* α0 : ref str.t := M.read s in
          let* α1 : core.result.Result.t u8.t core.num.error.ParseIntError.t :=
            str.t::["parse"] α0 in
          M.alloc α1) in
      let* α3 :
          core.iter.adapters.map.Map.t
            (alloc.vec.into_iter.IntoIter.t (ref str.t) alloc.alloc.Global.t)
            type not implemented :=
        (core.iter.traits.iterator.Iterator.map
            (Self :=
              alloc.vec.into_iter.IntoIter.t (ref str.t) alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α1
          α2 in
      let* α4 : type not implemented :=
        M.read
          (let* α0 : core.result.Result.t u8.t core.num.error.ParseIntError.t :=
            M.read r in
          let* α1 : type not implemented :=
            M.read
              (let* α0 :
                  mut_ref
                    (alloc.vec.Vec.t
                      core.num.error.ParseIntError.t
                      alloc.alloc.Global.t) :=
                borrow_mut errors in
              let* α1 : core.num.error.ParseIntError.t := M.read e in
              let* α2 : unit :=
                (alloc.vec.Vec.t
                      core.num.error.ParseIntError.t
                      alloc.alloc.Global.t)::["push"]
                  α0
                  α1 in
              M.alloc α2) in
          let* α2 : core.result.Result.t u8.t unit :=
            (core.result.Result.t
                  u8.t
                  core.num.error.ParseIntError.t)::["map_err"]
              α0
              α1 in
          let* α3 : core.option.Option.t u8.t :=
            (core.result.Result.t u8.t unit)::["ok"] α2 in
          M.alloc α3) in
      let* α5 :
          core.iter.adapters.filter_map.FilterMap.t
            (core.iter.adapters.map.Map.t
              (alloc.vec.into_iter.IntoIter.t (ref str.t) alloc.alloc.Global.t)
              type not implemented)
            type not implemented :=
        (core.iter.traits.iterator.Iterator.filter_map
            (Self :=
              core.iter.adapters.map.Map.t
                (alloc.vec.into_iter.IntoIter.t
                  (ref str.t)
                  alloc.alloc.Global.t)
                type not implemented)
            (Trait := ltac:(refine _)))
          α3
          α4 in
      let* α6 : alloc.vec.Vec.t u8.t alloc.alloc.Global.t :=
        (core.iter.traits.iterator.Iterator.collect
            (Self :=
              core.iter.adapters.filter_map.FilterMap.t
                (core.iter.adapters.map.Map.t
                  (alloc.vec.into_iter.IntoIter.t
                    (ref str.t)
                    alloc.alloc.Global.t)
                  type not implemented)
                type not implemented)
            (Trait := ltac:(refine _)))
          α5 in
      M.alloc α6 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Numbers: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
        let* α3 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α2 in
        let* α4 : ref (slice (ref str.t)) := M.read α3 in
        let* α5 : ref (alloc.vec.Vec.t u8.t alloc.alloc.Global.t) :=
          borrow numbers in
        let* α6 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : ref (array core.fmt.rt.Argument.t) := borrow α8 in
        let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α9 in
        let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ref (slice core.fmt.rt.Argument.t) := M.read α11 in
        let* α13 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α4 α12 in
        let* α14 : unit := std.io.stdio._print α13 in
        M.alloc α14 in
      M.alloc tt in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "Errors: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (ref (array (ref str.t))) := M.alloc α1 in
        let* α3 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α2 in
        let* α4 : ref (slice (ref str.t)) := M.read α3 in
        let* α5 :
            ref
              (alloc.vec.Vec.t
                core.num.error.ParseIntError.t
                alloc.alloc.Global.t) :=
          borrow errors in
        let* α6 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_debug"] α5 in
        let* α7 : M.Val core.fmt.rt.Argument.t := M.alloc α6 in
        let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
        let* α9 : ref (array core.fmt.rt.Argument.t) := borrow α8 in
        let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α9 in
        let* α11 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ref (slice core.fmt.rt.Argument.t) := M.read α11 in
        let* α13 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α4 α12 in
        let* α14 : unit := std.io.stdio._print α13 in
        M.alloc α14 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
