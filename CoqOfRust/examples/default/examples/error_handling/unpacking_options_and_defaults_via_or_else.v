(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Fruit.
  Inductive t : Set :=
  | Apple
  | Orange
  | Banana
  | Kiwi
  | Lemon.
End Fruit.

Module  Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_or_else_Fruit_t.
Section Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_or_else_Fruit_t.
  Ltac Self := exact unpacking_options_and_defaults_via_or_else.Fruit.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref ltac:(Self))
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* f : M.Val (mut_ref core.fmt.Formatter.t) := M.alloc f in
    M.function_body
      (let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : M.Val core.fmt.Formatter.t := deref α0 in
      let* α2 : mut_ref core.fmt.Formatter.t := borrow_mut α1 in
      let* α3 := M.read self in
      let* α4 : M.Val (ref str.t) :=
        match α3 with
        | unpacking_options_and_defaults_via_or_else.Fruit.Apple  =>
          let* α0 : ref str.t := M.read (mk_str "Apple") in
          let* α1 : M.Val str.t := deref α0 in
          let* α2 : ref str.t := borrow α1 in
          M.alloc α2
        | unpacking_options_and_defaults_via_or_else.Fruit.Orange  =>
          let* α0 : ref str.t := M.read (mk_str "Orange") in
          let* α1 : M.Val str.t := deref α0 in
          let* α2 : ref str.t := borrow α1 in
          M.alloc α2
        | unpacking_options_and_defaults_via_or_else.Fruit.Banana  =>
          let* α0 : ref str.t := M.read (mk_str "Banana") in
          let* α1 : M.Val str.t := deref α0 in
          let* α2 : ref str.t := borrow α1 in
          M.alloc α2
        | unpacking_options_and_defaults_via_or_else.Fruit.Kiwi  =>
          let* α0 : ref str.t := M.read (mk_str "Kiwi") in
          let* α1 : M.Val str.t := deref α0 in
          let* α2 : ref str.t := borrow α1 in
          M.alloc α2
        | unpacking_options_and_defaults_via_or_else.Fruit.Lemon  =>
          let* α0 : ref str.t := M.read (mk_str "Lemon") in
          let* α1 : M.Val str.t := deref α0 in
          let* α2 : ref str.t := borrow α1 in
          M.alloc α2
        end in
      let* α5 : ref str.t := M.read α4 in
      core.fmt.Formatter.t::["write_str"] α2 α5).
  
  Global Instance AssociatedFunction_fmt :
    Notations.DoubleColon ltac:(Self) "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait ltac:(Self) := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_or_else_Fruit_t.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_or_else_Fruit_t.

(*
fn main() {
    let apple = Some(Fruit::Apple);
    let no_fruit: Option<Fruit> = None;
    let get_kiwi_as_fallback = || {
        println!("Providing kiwi as fallback");
        Some(Fruit::Kiwi)
    };
    let get_lemon_as_fallback = || {
        println!("Providing lemon as fallback");
        Some(Fruit::Lemon)
    };

    let first_available_fruit = no_fruit
        .or_else(get_kiwi_as_fallback)
        .or_else(get_lemon_as_fallback);
    println!("first_available_fruit: {:?}", first_available_fruit);
    // Providing kiwi as fallback
    // first_available_fruit: Some(Kiwi)
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* apple :
        M.Val
          (core.option.Option.t
            unpacking_options_and_defaults_via_or_else.Fruit.t) :=
      M.alloc
        (core.option.Option.Some
          unpacking_options_and_defaults_via_or_else.Fruit.Apple) in
    let* no_fruit :
        M.Val
          (core.option.Option.t
            unpacking_options_and_defaults_via_or_else.Fruit.t) :=
      M.alloc core.option.Option.None in
    let* get_kiwi_as_fallback : M.Val type not implemented :=
      M.copy
        (let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "Providing kiwi as fallback
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_const"] α6 in
            let* α8 : unit := std.io.stdio._print α7 in
            M.alloc α8 in
          M.alloc tt in
        M.alloc
          (core.option.Option.Some
            unpacking_options_and_defaults_via_or_else.Fruit.Kiwi)) in
    let* get_lemon_as_fallback : M.Val type not implemented :=
      M.copy
        (let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : M.Val (array (ref str.t)) :=
              M.alloc [ mk_str "Providing lemon as fallback
" ] in
            let* α1 : ref (array (ref str.t)) := borrow α0 in
            let* α2 : M.Val (array (ref str.t)) := deref α1 in
            let* α3 : ref (array (ref str.t)) := borrow α2 in
            let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
            let* α5 : M.Val (ref (slice (ref str.t))) :=
              pointer_coercion "Unsize" α4 in
            let* α6 : ref (slice (ref str.t)) := M.read α5 in
            let* α7 : core.fmt.Arguments.t :=
              core.fmt.Arguments.t::["new_const"] α6 in
            let* α8 : unit := std.io.stdio._print α7 in
            M.alloc α8 in
          M.alloc tt in
        M.alloc
          (core.option.Option.Some
            unpacking_options_and_defaults_via_or_else.Fruit.Lemon)) in
    let* first_available_fruit :
        M.Val
          (core.option.Option.t
            unpacking_options_and_defaults_via_or_else.Fruit.t) :=
      let* α0 :
          core.option.Option.t
            unpacking_options_and_defaults_via_or_else.Fruit.t :=
        M.read no_fruit in
      let* α1 : type not implemented := M.read get_kiwi_as_fallback in
      let* α2 :
          core.option.Option.t
            unpacking_options_and_defaults_via_or_else.Fruit.t :=
        (core.option.Option.t
              unpacking_options_and_defaults_via_or_else.Fruit.t)::["or_else"]
          α0
          α1 in
      let* α3 : type not implemented := M.read get_lemon_as_fallback in
      let* α4 :
          core.option.Option.t
            unpacking_options_and_defaults_via_or_else.Fruit.t :=
        (core.option.Option.t
              unpacking_options_and_defaults_via_or_else.Fruit.t)::["or_else"]
          α2
          α3 in
      M.alloc α4 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str "first_available_fruit: "; mk_str "
" ] in
        let* α1 : ref (array (ref str.t)) := borrow α0 in
        let* α2 : M.Val (array (ref str.t)) := deref α1 in
        let* α3 : ref (array (ref str.t)) := borrow α2 in
        let* α4 : M.Val (ref (array (ref str.t))) := M.alloc α3 in
        let* α5 : M.Val (ref (slice (ref str.t))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ref (slice (ref str.t)) := M.read α5 in
        let* α7 :
            ref
              (core.option.Option.t
                unpacking_options_and_defaults_via_or_else.Fruit.t) :=
          borrow first_available_fruit in
        let* α8 :
            M.Val
              (core.option.Option.t
                unpacking_options_and_defaults_via_or_else.Fruit.t) :=
          deref α7 in
        let* α9 :
            ref
              (core.option.Option.t
                unpacking_options_and_defaults_via_or_else.Fruit.t) :=
          borrow α8 in
        let* α10 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_debug"] α9 in
        let* α11 : M.Val core.fmt.rt.Argument.t := M.alloc α10 in
        let* α12 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α11 ] in
        let* α13 : ref (array core.fmt.rt.Argument.t) := borrow α12 in
        let* α14 : M.Val (array core.fmt.rt.Argument.t) := deref α13 in
        let* α15 : ref (array core.fmt.rt.Argument.t) := borrow α14 in
        let* α16 : M.Val (ref (array core.fmt.rt.Argument.t)) := M.alloc α15 in
        let* α17 : M.Val (ref (slice core.fmt.rt.Argument.t)) :=
          pointer_coercion "Unsize" α16 in
        let* α18 : ref (slice core.fmt.rt.Argument.t) := M.read α17 in
        let* α19 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α6 α18 in
        let* α20 : unit := std.io.stdio._print α19 in
        M.alloc α20 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0).
