(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let strings = vec!["tofu", "93", "18"];
    let (numbers, errors): (Vec<_>, Vec<_>) = strings
        .into_iter()
        .map(|s| s.parse::<i32>())
        .partition(Result::is_ok);
    let numbers: Vec<_> = numbers.into_iter().map(Result::unwrap).collect();
    let errors: Vec<_> = errors.into_iter().map(Result::unwrap_err).collect();
    println!("Numbers: {:?}", numbers);
    println!("Errors: {:?}", errors);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* strings : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
    let* α0 : ref str.t := M.read (mk_str "93") in
    let* α1 : M.Val (ref str.t) := M.alloc α0 in
    let* α2 : ref str.t := M.read (mk_str "18") in
    let* α3 : M.Val (ref str.t) := M.alloc α2 in
    let* α4 : M.Val (array (ref str.t)) := M.alloc [ mk_str "tofu"; α1; α3 ] in
    let* α5 :
        M.Val (alloc.boxed.Box.t (array (ref str.t)) alloc.alloc.Global.t) :=
      M.call ((alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α4) in
    let* α6 : alloc.boxed.Box.t (slice (ref str.t)) alloc.alloc.Global.t :=
      M.read (pointer_coercion "Unsize" α5) in
    let* α7 : alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t :=
      M.call ((slice (ref str.t))::["into_vec"] α6) in
    M.alloc α7 in
  let* '(numbers, errors) :
      M.Val
        ((alloc.vec.Vec.t
          (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          alloc.alloc.Global.t)
        *
        (alloc.vec.Vec.t
          (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          alloc.alloc.Global.t)) :=
    let* α0 : alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t :=
      M.read strings in
    let* α1 : alloc.vec.into_iter.IntoIter.t (ref str.t) alloc.alloc.Global.t :=
      M.call
        ((core.iter.traits.collect.IntoIterator.into_iter
            (Self := alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0) in
    let* α2 : type not implemented :=
      M.read
        (let* α0 : ref str.t := M.read s in
        let* α1 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
          M.call (str.t::["parse"] α0) in
        M.alloc α1) in
    let* α3 :
        core.iter.adapters.map.Map.t
          (alloc.vec.into_iter.IntoIter.t (ref str.t) alloc.alloc.Global.t)
          type not implemented :=
      M.call
        ((core.iter.traits.iterator.Iterator.map
            (Self :=
              alloc.vec.into_iter.IntoIter.t (ref str.t) alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α1
          α2) in
    let* α4 :
        (alloc.vec.Vec.t
          (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          alloc.alloc.Global.t)
        *
        (alloc.vec.Vec.t
          (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          alloc.alloc.Global.t) :=
      M.call
        ((core.iter.traits.iterator.Iterator.partition
            (Self :=
              core.iter.adapters.map.Map.t
                (alloc.vec.into_iter.IntoIter.t
                  (ref str.t)
                  alloc.alloc.Global.t)
                type not implemented)
            (Trait := ltac:(refine _)))
          α3
          (core.result.Result.t
              i32.t
              core.num.error.ParseIntError.t)::["is_ok"]) in
    M.alloc α4 in
  let* numbers : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
    let* α0 :
        alloc.vec.Vec.t
          (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          alloc.alloc.Global.t :=
      M.read numbers in
    let* α1 :
        alloc.vec.into_iter.IntoIter.t
          (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          alloc.alloc.Global.t :=
      M.call
        ((core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              alloc.vec.Vec.t
                (core.result.Result.t i32.t core.num.error.ParseIntError.t)
                alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0) in
    let* α2 :
        core.iter.adapters.map.Map.t
          (alloc.vec.into_iter.IntoIter.t
            (core.result.Result.t i32.t core.num.error.ParseIntError.t)
            alloc.alloc.Global.t)
          _ :=
      M.call
        ((core.iter.traits.iterator.Iterator.map
            (Self :=
              alloc.vec.into_iter.IntoIter.t
                (core.result.Result.t i32.t core.num.error.ParseIntError.t)
                alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α1
          (core.result.Result.t
              i32.t
              core.num.error.ParseIntError.t)::["unwrap"]) in
    let* α3 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t :=
      M.call
        ((core.iter.traits.iterator.Iterator.collect
            (Self :=
              core.iter.adapters.map.Map.t
                (alloc.vec.into_iter.IntoIter.t
                  (core.result.Result.t i32.t core.num.error.ParseIntError.t)
                  alloc.alloc.Global.t)
                _)
            (Trait := ltac:(refine _)))
          α2) in
    M.alloc α3 in
  let* errors :
      M.Val
        (alloc.vec.Vec.t core.num.error.ParseIntError.t alloc.alloc.Global.t) :=
    let* α0 :
        alloc.vec.Vec.t
          (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          alloc.alloc.Global.t :=
      M.read errors in
    let* α1 :
        alloc.vec.into_iter.IntoIter.t
          (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          alloc.alloc.Global.t :=
      M.call
        ((core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              alloc.vec.Vec.t
                (core.result.Result.t i32.t core.num.error.ParseIntError.t)
                alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α0) in
    let* α2 :
        core.iter.adapters.map.Map.t
          (alloc.vec.into_iter.IntoIter.t
            (core.result.Result.t i32.t core.num.error.ParseIntError.t)
            alloc.alloc.Global.t)
          _ :=
      M.call
        ((core.iter.traits.iterator.Iterator.map
            (Self :=
              alloc.vec.into_iter.IntoIter.t
                (core.result.Result.t i32.t core.num.error.ParseIntError.t)
                alloc.alloc.Global.t)
            (Trait := ltac:(refine _)))
          α1
          (core.result.Result.t
              i32.t
              core.num.error.ParseIntError.t)::["unwrap_err"]) in
    let* α3 :
        alloc.vec.Vec.t core.num.error.ParseIntError.t alloc.alloc.Global.t :=
      M.call
        ((core.iter.traits.iterator.Iterator.collect
            (Self :=
              core.iter.adapters.map.Map.t
                (alloc.vec.into_iter.IntoIter.t
                  (core.result.Result.t i32.t core.num.error.ParseIntError.t)
                  alloc.alloc.Global.t)
                _)
            (Trait := ltac:(refine _)))
          α2) in
    M.alloc α3 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "Numbers: "; mk_str "
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow numbers)) in
      let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
      let* α5 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4 ] in
      let* α6 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α5) in
      let* α7 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α6) in
      let* α8 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α2 α7) in
      let* α9 : unit := M.call (std.io.stdio._print α8) in
      M.alloc α9 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : M.Val (array (ref str.t)) :=
        M.alloc [ mk_str "Errors: "; mk_str "
" ] in
      let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
      let* α2 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α1) in
      let* α3 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow errors)) in
      let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
      let* α5 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4 ] in
      let* α6 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α5) in
      let* α7 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α6) in
      let* α8 : core.fmt.Arguments.t :=
        M.call (core.fmt.Arguments.t::["new_v1"] α2 α7) in
      let* α9 : unit := M.call (std.io.stdio._print α8) in
      M.alloc α9 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
