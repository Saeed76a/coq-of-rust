(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Person.
Section Person.
  Record t : Set := {
    job : core.option.Option.t unpacking_options_via_question_mark.Job.t;
  }.
  
  Global Instance Get_job : Notations.Dot "job" := {
    Notations.dot := Ref.map (fun x => x.(job)) (fun v x => x <| job := v |>);
  }.
  Global Instance Get_AF_job : Notations.DoubleColon t "job" := {
    Notations.double_colon (x : M.Val t) := x.["job"];
  }.
End Person.
End Person.

Module  Job.
Section Job.
  Record t : Set := {
    phone_number :
      core.option.Option.t unpacking_options_via_question_mark.PhoneNumber.t;
  }.
  
  Global Instance Get_phone_number : Notations.Dot "phone_number" := {
    Notations.dot :=
      Ref.map
        (fun x => x.(phone_number))
        (fun v x => x <| phone_number := v |>);
  }.
  Global Instance Get_AF_phone_number :
    Notations.DoubleColon t "phone_number" := {
    Notations.double_colon (x : M.Val t) := x.["phone_number"];
  }.
End Job.
End Job.

Module  Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
Section Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
  Ltac Self := exact unpacking_options_via_question_mark.Job.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : M.Val (ref ltac:(Self)))
      : M unpacking_options_via_question_mark.Job.t :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) := M.alloc tt in
      deref self).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.

Module  Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
Section Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
  Ltac Self := exact unpacking_options_via_question_mark.Job.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.

Module  PhoneNumber.
Section PhoneNumber.
  Record t : Set := {
    area_code : core.option.Option.t u8.t;
    number : u32.t;
  }.
  
  Global Instance Get_area_code : Notations.Dot "area_code" := {
    Notations.dot :=
      Ref.map (fun x => x.(area_code)) (fun v x => x <| area_code := v |>);
  }.
  Global Instance Get_AF_area_code : Notations.DoubleColon t "area_code" := {
    Notations.double_colon (x : M.Val t) := x.["area_code"];
  }.
  Global Instance Get_number : Notations.Dot "number" := {
    Notations.dot :=
      Ref.map (fun x => x.(number)) (fun v x => x <| number := v |>);
  }.
  Global Instance Get_AF_number : Notations.DoubleColon t "number" := {
    Notations.double_colon (x : M.Val t) := x.["number"];
  }.
End PhoneNumber.
End PhoneNumber.

Module  Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
Section Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
  Ltac Self := exact unpacking_options_via_question_mark.PhoneNumber.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : M.Val (ref ltac:(Self)))
      : M unpacking_options_via_question_mark.PhoneNumber.t :=
    M.function_body
      (let* _ : ltac:(refine (M.Val unit)) := M.alloc tt in
      let* _ : ltac:(refine (M.Val unit)) := M.alloc tt in
      deref self).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.

Module  Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
Section Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
  Ltac Self := exact unpacking_options_via_question_mark.PhoneNumber.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.

Module  Impl_unpacking_options_via_question_mark_Person_t.
Section Impl_unpacking_options_via_question_mark_Person_t.
  Ltac Self := exact unpacking_options_via_question_mark.Person.t.
  
  (*
      fn work_phone_area_code(&self) -> Option<u8> {
          // This would need many nested `match` statements without the `?` operator.
          // It would take a lot more code - try writing it yourself and see which
          // is easier.
          self.job?.phone_number?.area_code
      }
  *)
  Definition work_phone_area_code
      (self : M.Val (ref ltac:(Self)))
      : M (core.option.Option.t u8.t) :=
    let return_ := M.return_ (R := core.option.Option.t u8.t) in
    M.function_body
      (let* α0 :
          ltac:(refine (M.Val unpacking_options_via_question_mark.Person.t)) :=
        deref self in
      let* α1 :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.option.Option.t unpacking_options_via_question_mark.Job.t)
            (Trait := ltac:(refine _)))
          α0.["job"] in
      let* α2 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.option.Option.t core.convert.Infallible.t)
                unpacking_options_via_question_mark.Job.t))) :=
        M.alloc α1 in
      let* α3 := M.read α2 in
      let* α4 :
          ltac:(refine (M.Val unpacking_options_via_question_mark.Job.t)) :=
        match α3 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := core.option.Option.t u8.t)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine (M.Val never.t)) := return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      let* α5 :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.option.Option.t
                unpacking_options_via_question_mark.PhoneNumber.t)
            (Trait := ltac:(refine _)))
          α4.["phone_number"] in
      let* α6 :
          ltac:(refine
            (M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.option.Option.t core.convert.Infallible.t)
                unpacking_options_via_question_mark.PhoneNumber.t))) :=
        M.alloc α5 in
      let* α7 := M.read α6 in
      let* α8 :
          ltac:(refine
            (M.Val unpacking_options_via_question_mark.PhoneNumber.t)) :=
        match α7 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := core.option.Option.t u8.t)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine (M.Val never.t)) := return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      M.pure α8.["area_code"]).
  
  Global Instance AssociatedFunction_work_phone_area_code :
    Notations.DoubleColon ltac:(Self) "work_phone_area_code" := {
    Notations.double_colon := work_phone_area_code;
  }.
End Impl_unpacking_options_via_question_mark_Person_t.
End Impl_unpacking_options_via_question_mark_Person_t.

(*
fn main() {
    let p = Person {
        job: Some(Job {
            phone_number: Some(PhoneNumber {
                area_code: Some(61),
                number: 439222222,
            }),
        }),
    };

    assert_eq!(p.work_phone_area_code(), Some(61));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  M.function_body
    (let* p :
        ltac:(refine (M.Val unpacking_options_via_question_mark.Person.t)) :=
      let* α0 : ltac:(refine (M.Val u8.t)) := M.alloc 61 in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine (M.Val u32.t)) := M.alloc 439222222 in
      let* α3 := M.read α2 in
      M.alloc
        {|
          unpacking_options_via_question_mark.Person.job :=
            core.option.Option.Some
              {|
                unpacking_options_via_question_mark.Job.phone_number :=
                  core.option.Option.Some
                    {|
                      unpacking_options_via_question_mark.PhoneNumber.area_code :=
                        core.option.Option.Some α1;
                      unpacking_options_via_question_mark.PhoneNumber.number :=
                        α3;
                    |};
              |};
        |} in
    let* _ : ltac:(refine (M.Val unit)) :=
      let* α0 :
          ltac:(refine
            (M.Val (ref unpacking_options_via_question_mark.Person.t))) :=
        borrow p in
      let* α1 :=
        unpacking_options_via_question_mark.Person.t::["work_phone_area_code"]
          α0 in
      let* α2 : ltac:(refine (M.Val (core.option.Option.t u8.t))) :=
        M.alloc α1 in
      let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t u8.t)))) :=
        borrow α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine (M.Val u8.t)) := M.alloc 61 in
      let* α6 := M.read α5 in
      let* α7 : ltac:(refine (M.Val (core.option.Option.t u8.t))) :=
        M.alloc (core.option.Option.Some α6) in
      let* α8 : ltac:(refine (M.Val (ref (core.option.Option.t u8.t)))) :=
        borrow α7 in
      let* α9 := M.read α8 in
      let* α10 :
          ltac:(refine
            (M.Val
              ((ref (core.option.Option.t u8.t))
              *
              (ref (core.option.Option.t u8.t))))) :=
        M.alloc (α4, α9) in
      let* α11 := M.read α10 in
      match α11 with
      | (left_val, right_val) =>
        let* right_val := M.alloc right_val in
        let* left_val := M.alloc left_val in
        let* α0 : ltac:(refine (M.Val (core.option.Option.t u8.t))) :=
          deref left_val in
        let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t u8.t)))) :=
          borrow α0 in
        let* α2 : ltac:(refine (M.Val (core.option.Option.t u8.t))) :=
          deref right_val in
        let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t u8.t)))) :=
          borrow α2 in
        let* α4 :=
          (core.cmp.PartialEq.eq
              (Self := core.option.Option.t u8.t)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* α5 : ltac:(refine (M.Val bool.t)) := M.alloc α4 in
        let* α6 : ltac:(refine (M.Val bool.t)) := UnOp.not α5 in
        let* α7 : ltac:(refine (M.Val bool.t)) := use α6 in
        let* α8 := M.read α7 in
        if (α8 : bool) then
          let* kind : ltac:(refine (M.Val core.panicking.AssertKind.t)) :=
            M.alloc core.panicking.AssertKind.Eq in
          let* _ : ltac:(refine (M.Val never.t)) :=
            let* α0 : ltac:(refine (M.Val (core.option.Option.t u8.t))) :=
              deref left_val in
            let* α1 : ltac:(refine (M.Val (ref (core.option.Option.t u8.t)))) :=
              borrow α0 in
            let* α2 : ltac:(refine (M.Val (core.option.Option.t u8.t))) :=
              deref right_val in
            let* α3 : ltac:(refine (M.Val (ref (core.option.Option.t u8.t)))) :=
              borrow α2 in
            let* α4 :
                ltac:(refine
                  (M.Val (core.option.Option.t core.fmt.Arguments.t))) :=
              M.alloc core.option.Option.None in
            let* α5 := core.panicking.assert_failed kind α1 α3 α4 in
            M.alloc α5 in
          let* α0 : ltac:(refine (M.Val unit)) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt
      end in
    M.alloc tt).
