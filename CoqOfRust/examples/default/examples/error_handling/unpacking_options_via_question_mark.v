(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Person.
Section Person.
  Record t : Set := {
    job : core.option.Option.t unpacking_options_via_question_mark.Job.t;
  }.
  
  Global Instance Get_job : Notations.Dot "job" := {
    Notations.dot := Ref.map (fun x => x.(job)) (fun v x => x <| job := v |>);
  }.
  Global Instance Get_AF_job : Notations.DoubleColon t "job" := {
    Notations.double_colon (x : M.Val t) := x.["job"];
  }.
End Person.
End Person.

Module  Job.
Section Job.
  Record t : Set := {
    phone_number :
      core.option.Option.t unpacking_options_via_question_mark.PhoneNumber.t;
  }.
  
  Global Instance Get_phone_number : Notations.Dot "phone_number" := {
    Notations.dot :=
      Ref.map
        (fun x => x.(phone_number))
        (fun v x => x <| phone_number := v |>);
  }.
  Global Instance Get_AF_phone_number :
    Notations.DoubleColon t "phone_number" := {
    Notations.double_colon (x : M.Val t) := x.["phone_number"];
  }.
End Job.
End Job.

Module  Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
Section Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
  Ltac Self := exact unpacking_options_via_question_mark.Job.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref ltac:(Self))
      : M unpacking_options_via_question_mark.Job.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* _ : M.Val unit := M.alloc tt in
    let* α0 : ref unpacking_options_via_question_mark.Job.t := M.read self in
    M.read (deref α0).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.

Module  Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
Section Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
  Ltac Self := exact unpacking_options_via_question_mark.Job.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.

Module  PhoneNumber.
Section PhoneNumber.
  Record t : Set := {
    area_code : core.option.Option.t u8.t;
    number : u32.t;
  }.
  
  Global Instance Get_area_code : Notations.Dot "area_code" := {
    Notations.dot :=
      Ref.map (fun x => x.(area_code)) (fun v x => x <| area_code := v |>);
  }.
  Global Instance Get_AF_area_code : Notations.DoubleColon t "area_code" := {
    Notations.double_colon (x : M.Val t) := x.["area_code"];
  }.
  Global Instance Get_number : Notations.Dot "number" := {
    Notations.dot :=
      Ref.map (fun x => x.(number)) (fun v x => x <| number := v |>);
  }.
  Global Instance Get_AF_number : Notations.DoubleColon t "number" := {
    Notations.double_colon (x : M.Val t) := x.["number"];
  }.
End PhoneNumber.
End PhoneNumber.

Module  Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
Section Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
  Ltac Self := exact unpacking_options_via_question_mark.PhoneNumber.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref ltac:(Self))
      : M unpacking_options_via_question_mark.PhoneNumber.t :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let* _ : M.Val unit := M.alloc tt in
    let* _ : M.Val unit := M.alloc tt in
    let* α0 : ref unpacking_options_via_question_mark.PhoneNumber.t :=
      M.read self in
    M.read (deref α0).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon ltac:(Self) "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait ltac:(Self) := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.

Module  Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
Section Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
  Ltac Self := exact unpacking_options_via_question_mark.PhoneNumber.t.
  
  Global Instance ℐ : core.marker.Copy.Trait ltac:(Self) := {
  }.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.

Module  Impl_unpacking_options_via_question_mark_Person_t.
Section Impl_unpacking_options_via_question_mark_Person_t.
  Ltac Self := exact unpacking_options_via_question_mark.Person.t.
  
  (*
      fn work_phone_area_code(&self) -> Option<u8> {
          // This would need many nested `match` statements without the `?` operator.
          // It would take a lot more code - try writing it yourself and see which
          // is easier.
          self.job?.phone_number?.area_code
      }
  *)
  Definition work_phone_area_code
      (self : ref ltac:(Self))
      : M (core.option.Option.t u8.t) :=
    let* self : M.Val (ref ltac:(Self)) := M.alloc self in
    let return_ := M.return_ (R := core.option.Option.t u8.t) in
    M.catch_return
      (let* α0 : ref unpacking_options_via_question_mark.Person.t :=
        M.read self in
      let* α1 :
          core.option.Option.t unpacking_options_via_question_mark.Job.t :=
        M.read (deref α0).["job"] in
      let* α2 :
          core.ops.control_flow.ControlFlow.t
            (core.option.Option.t core.convert.Infallible.t)
            unpacking_options_via_question_mark.Job.t :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.option.Option.t unpacking_options_via_question_mark.Job.t)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 : M.Val unpacking_options_via_question_mark.Job.t :=
        match α2 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 : core.option.Option.t core.convert.Infallible.t :=
            M.read residual in
          let* α1 : core.option.Option.t u8.t :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := core.option.Option.t u8.t)
                (Trait := ltac:(refine _)))
              α0 in
          let* α2 : M.Val never.t := return_ α1 in
          let* α3 := M.read α2 in
          let* α4 : unpacking_options_via_question_mark.Job.t :=
            never_to_any α3 in
          M.alloc α4
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      let* α4 :
          core.option.Option.t
            unpacking_options_via_question_mark.PhoneNumber.t :=
        M.read α3.["phone_number"] in
      let* α5 :
          core.ops.control_flow.ControlFlow.t
            (core.option.Option.t core.convert.Infallible.t)
            unpacking_options_via_question_mark.PhoneNumber.t :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.option.Option.t
                unpacking_options_via_question_mark.PhoneNumber.t)
            (Trait := ltac:(refine _)))
          α4 in
      let* α6 : M.Val unpacking_options_via_question_mark.PhoneNumber.t :=
        match α5 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* residual := M.alloc residual in
          let* α0 : core.option.Option.t core.convert.Infallible.t :=
            M.read residual in
          let* α1 : core.option.Option.t u8.t :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := core.option.Option.t u8.t)
                (Trait := ltac:(refine _)))
              α0 in
          let* α2 : M.Val never.t := return_ α1 in
          let* α3 := M.read α2 in
          let* α4 : unpacking_options_via_question_mark.PhoneNumber.t :=
            never_to_any α3 in
          M.alloc α4
        | core.ops.control_flow.ControlFlow.Continue val =>
          let* val := M.alloc val in
          M.pure val
        end in
      M.read α6.["area_code"]).
  
  Global Instance AssociatedFunction_work_phone_area_code :
    Notations.DoubleColon ltac:(Self) "work_phone_area_code" := {
    Notations.double_colon := work_phone_area_code;
  }.
End Impl_unpacking_options_via_question_mark_Person_t.
End Impl_unpacking_options_via_question_mark_Person_t.

(*
fn main() {
    let p = Person {
        job: Some(Job {
            phone_number: Some(PhoneNumber {
                area_code: Some(61),
                number: 439222222,
            }),
        }),
    };

    assert_eq!(p.work_phone_area_code(), Some(61));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* p : M.Val unpacking_options_via_question_mark.Person.t :=
    M.alloc
      {|
        unpacking_options_via_question_mark.Person.job :=
          core.option.Option.Some
            {|
              unpacking_options_via_question_mark.Job.phone_number :=
                core.option.Option.Some
                  {|
                    unpacking_options_via_question_mark.PhoneNumber.area_code :=
                      core.option.Option.Some (Integer.of_Z 61);
                    unpacking_options_via_question_mark.PhoneNumber.number :=
                      Integer.of_Z 439222222;
                  |};
            |};
      |} in
  let* _ : M.Val unit :=
    let* α0 : core.option.Option.t u8.t :=
      unpacking_options_via_question_mark.Person.t::["work_phone_area_code"]
        (borrow p) in
    let* α1 : M.Val (core.option.Option.t u8.t) := M.alloc α0 in
    let* α2 : M.Val (core.option.Option.t u8.t) :=
      M.alloc (core.option.Option.Some (Integer.of_Z 61)) in
    match (borrow α1, borrow α2) with
    | (left_val, right_val) =>
      let* right_val := M.alloc right_val in
      let* left_val := M.alloc left_val in
      let* α0 : ref (core.option.Option.t u8.t) := M.read left_val in
      let* α1 : ref (core.option.Option.t u8.t) := M.read right_val in
      let* α2 : bool.t :=
        (core.cmp.PartialEq.eq
            (Self := core.option.Option.t u8.t)
            (Trait := ltac:(refine _)))
          α0
          α1 in
      if (use (UnOp.not α2) : bool) then
        let* kind : M.Val core.panicking.AssertKind.t :=
          M.alloc core.panicking.AssertKind.Eq in
        let* _ : M.Val never.t :=
          let* α0 : core.panicking.AssertKind.t := M.read kind in
          let* α1 : ref (core.option.Option.t u8.t) := M.read left_val in
          let* α2 : ref (core.option.Option.t u8.t) := M.read right_val in
          let* α3 : never.t :=
            core.panicking.assert_failed α0 α1 α2 core.option.Option.None in
          M.alloc α3 in
        let* α0 : M.Val unit := M.alloc tt in
        let* α1 := M.read α0 in
        let* α2 : unit := never_to_any α1 in
        M.alloc α2
      else
        M.alloc tt
    end in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
