(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() -> Result<(), ParseIntError> {
    let number_str = "10";
    let number = match number_str.parse::<i32>() {
        Ok(number) => number,
        Err(e) => return Err(e),
    };
    println!("{}", number);
    Ok(())
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main
    : M (core.result.Result.t unit core.num.error.ParseIntError.t) :=
  let return_ :=
    M.return_ (R := core.result.Result.t unit core.num.error.ParseIntError.t) in
  M.catch_return
    (let* number_str : M.Val (ref str.t) := M.copy (mk_str "10") in
    let* number : M.Val i32.t :=
      let* α0 : ref str.t := M.read number_str in
      let* α1 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
        str.t::["parse"] α0 in
      let* α2 : M.Val i32.t :=
        match α1 with
        | core.result.Result.Ok number =>
          let* number := M.alloc number in
          M.pure number
        | core.result.Result.Err e =>
          let* e := M.alloc e in
          let* α0 : core.num.error.ParseIntError.t := M.read e in
          let* α1 : M.Val never.t := return_ (core.result.Result.Err α0) in
          let* α2 := M.read α1 in
          let* α3 : i32.t := never_to_any α2 in
          M.alloc α3
        end in
      M.copy α2 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : M.Val (array (ref str.t)) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α0) in
        let* α2 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α1) in
        let* α3 : core.fmt.rt.Argument.t :=
          core.fmt.rt.Argument.t::["new_display"] (borrow number) in
        let* α4 : M.Val core.fmt.rt.Argument.t := M.alloc α3 in
        let* α5 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α4 ] in
        let* α6 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α5) in
        let* α7 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α6) in
        let* α8 : core.fmt.Arguments.t :=
          core.fmt.Arguments.t::["new_v1"] α2 α7 in
        let* α9 : unit := std.io.stdio._print α8 in
        M.alloc α9 in
      M.alloc tt in
    let* α0 :
        M.Val (core.result.Result.t unit core.num.error.ParseIntError.t) :=
      M.alloc (core.result.Result.Ok tt) in
    M.read α0).
