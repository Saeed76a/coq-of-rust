(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Trait *)
Module ProvidedAndRequired.
  Definition provided (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          provided_method.ProvidedAndRequired.required
            (Self := Self)
            (Trait := ℐ))) in
      let* α1 := M.read self in
      let* α2 := M.call (α0 α1) in
      (M.var "BinOp::Panic::add") ((Integer.of_Z 42) : Ty.path "i32") α2
    | _, _ => M.impossible
    end.
  
  Axiom ProvidedMethod_provided :
    M.IsProvidedMethod "provided_method::ProvidedAndRequired" provided.
End ProvidedAndRequired.

Module Impl_provided_method_ProvidedAndRequired_for_i32.
  Definition Self : Ty.t := Ty.path "i32".
  
  (*
      fn required(&self) -> i32 {
          *self
      }
  *)
  Definition required (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (deref α0)
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t := [("required", InstanceField.Method required)].
End Impl_provided_method_ProvidedAndRequired_for_i32.

Module Impl_provided_method_ProvidedAndRequired_for_u32.
  Definition Self : Ty.t := Ty.path "u32".
  
  (*
      fn required(&self) -> i32 {
          *self as i32
      }
  *)
  Definition required (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 := M.read (deref α0) in
      M.pure (rust_cast α1)
    | _, _ => M.impossible
    end.
  
  (*
      fn provided(&self) -> i32 {
          0
      }
  *)
  Definition provided (𝜏 : list Ty.t) (α : list Value.t) : M :=
    match 𝜏, α with
    | [], [self] =>
      let* self := M.alloc self in
      M.pure ((Integer.of_Z 0) : Ty.path "i32")
    | _, _ => M.impossible
    end.
  
  Definition ℐ : Instance.t :=
    [("required", InstanceField.Method required);
      ("provided", InstanceField.Method provided)].
End Impl_provided_method_ProvidedAndRequired_for_u32.

(*
fn main() {
    let x = 5;
    assert_eq!(x.provided(), 47);
    let y = 5u32;
    assert_eq!(y.provided(), 0);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (𝜏 : list Ty.t) (α : list Value.t) : M :=
  match 𝜏, α with
  | [], [] =>
    let* x := M.alloc ((Integer.of_Z 5) : Ty.path "i32") in
    let* _ :=
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          provided_method.ProvidedAndRequired.provided
            (Self := Ty.path "i32")
            (Trait := ℐ))) in
      let* α1 := M.call (α0 (borrow x)) in
      let* α2 := M.alloc α1 in
      let* α3 := M.alloc ((Integer.of_Z 47) : Ty.path "i32") in
      let* α4 := M.alloc (borrow α2, borrow α3) in
      match_operator
        α4
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | (_, _) =>
              let γ0_0 := Tuple.Access.left γ in
              let γ0_1 := Tuple.Access.right γ in
              let* left_val := M.copy γ0_0 in
              let* right_val := M.copy γ0_1 in
              let* α0 := M.read left_val in
              let* α1 := M.read (deref α0) in
              let* α2 := M.read right_val in
              let* α3 := M.read (deref α2) in
              let* α4 :=
                M.alloc
                  ((M.var "UnOp::not") ((M.var "BinOp::Pure::eq") α1 α3)) in
              let* α5 := M.read (use α4) in
              if α5 then
                let* kind := M.alloc core.panicking.AssertKind.Eq in
                let* α0 := M.read kind in
                let* α1 := M.read left_val in
                let* α2 := M.read right_val in
                let* α3 :=
                  M.call
                    ((M.var "core::panicking::assert_failed")
                      α0
                      α1
                      α2
                      core.option.Option.None) in
                let* α0 := M.alloc α3 in
                let* α1 := M.read α0 in
                let* α2 := never_to_any α1 in
                M.alloc α2
              else
                M.alloc tt
            end) :
            Ty.tuple []
        ] in
    let* y := M.alloc ((Integer.of_Z 5) : Ty.path "u32") in
    let* _ :=
      let* α0 :=
        ltac:(M.get_method (fun ℐ =>
          provided_method.ProvidedAndRequired.provided
            (Self := Ty.path "u32")
            (Trait := ℐ))) in
      let* α1 := M.call (α0 (borrow y)) in
      let* α2 := M.alloc α1 in
      let* α3 := M.alloc ((Integer.of_Z 0) : Ty.path "i32") in
      let* α4 := M.alloc (borrow α2, borrow α3) in
      match_operator
        α4
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | (_, _) =>
              let γ0_0 := Tuple.Access.left γ in
              let γ0_1 := Tuple.Access.right γ in
              let* left_val := M.copy γ0_0 in
              let* right_val := M.copy γ0_1 in
              let* α0 := M.read left_val in
              let* α1 := M.read (deref α0) in
              let* α2 := M.read right_val in
              let* α3 := M.read (deref α2) in
              let* α4 :=
                M.alloc
                  ((M.var "UnOp::not") ((M.var "BinOp::Pure::eq") α1 α3)) in
              let* α5 := M.read (use α4) in
              if α5 then
                let* kind := M.alloc core.panicking.AssertKind.Eq in
                let* α0 := M.read kind in
                let* α1 := M.read left_val in
                let* α2 := M.read right_val in
                let* α3 :=
                  M.call
                    ((M.var "core::panicking::assert_failed")
                      α0
                      α1
                      α2
                      core.option.Option.None) in
                let* α0 := M.alloc α3 in
                let* α1 := M.read α0 in
                let* α2 := never_to_any α1 in
                M.alloc α2
              else
                M.alloc tt
            end) :
            Ty.tuple []
        ] in
    let* α0 := M.alloc tt in
    M.read α0
  | _, _ => M.impossible
  end.
