(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  ProvidedAndRequired.
Section ProvidedAndRequired.
  Class Trait (Self : Set) : Type := {
    required : (ref Self) -> M i32.t;
  }.
  
End ProvidedAndRequired.
End ProvidedAndRequired.

Module  Impl_provided_method_ProvidedAndRequired_for_i32_t.
Section Impl_provided_method_ProvidedAndRequired_for_i32_t.
  Definition Self : Set := i32.t.
  
  (*
      fn required(&self) -> i32 {
          *self
      }
  *)
  Definition required (self : ref Self) : M i32.t :=
    let* self := M.alloc self in
    let* α0 : ref i32.t := M.read self in
    M.read (deref α0).
  
  Global Instance AssociatedFunction_required :
    Notations.DoubleColon Self "required" := {
    Notations.double_colon := required;
  }.
  
  Global Instance ℐ :
    provided_method.ProvidedAndRequired.Required.Trait Self := {
    provided_method.ProvidedAndRequired.required := required;
    provided_method.ProvidedAndRequired.provided := Datatypes.None;
  }.
End Impl_provided_method_ProvidedAndRequired_for_i32_t.
End Impl_provided_method_ProvidedAndRequired_for_i32_t.

Module  Impl_provided_method_ProvidedAndRequired_for_u32_t.
Section Impl_provided_method_ProvidedAndRequired_for_u32_t.
  Definition Self : Set := u32.t.
  
  (*
      fn required(&self) -> i32 {
          *self as i32
      }
  *)
  Definition required (self : ref Self) : M i32.t :=
    let* self := M.alloc self in
    let* α0 : ref u32.t := M.read self in
    let* α1 : u32.t := M.read (deref α0) in
    M.pure (rust_cast α1).
  
  Global Instance AssociatedFunction_required :
    Notations.DoubleColon Self "required" := {
    Notations.double_colon := required;
  }.
  
  (*
      fn provided(&self) -> i32 {
          0
      }
  *)
  Definition provided (self : ref Self) : M i32.t :=
    let* self := M.alloc self in
    M.pure ((Integer.of_Z 0) : i32.t).
  
  Global Instance AssociatedFunction_provided :
    Notations.DoubleColon Self "provided" := {
    Notations.double_colon := provided;
  }.
  
  Global Instance ℐ :
    provided_method.ProvidedAndRequired.Required.Trait Self := {
    provided_method.ProvidedAndRequired.required := required;
    provided_method.ProvidedAndRequired.provided := Datatypes.Some provided;
  }.
End Impl_provided_method_ProvidedAndRequired_for_u32_t.
End Impl_provided_method_ProvidedAndRequired_for_u32_t.

(*
fn main() {
    let x = 5;
    assert_eq!(x.provided(), 47);
    let y = 5u32;
    assert_eq!(y.provided(), 0);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* x : M.Val i32.t := M.alloc ((Integer.of_Z 5) : i32.t) in
  let* _ : M.Val unit :=
    let* α0 : (ref i32.t) -> M i32.t :=
      ltac:(M.get_method (fun ℐ =>
        provided_method.ProvidedAndRequired.provided
          (Self := i32.t)
          (Trait := ℐ))) in
    let* α1 : i32.t := M.call (α0 (borrow x)) in
    let* α2 : M.Val i32.t := M.alloc α1 in
    let* α3 : M.Val i32.t := M.alloc ((Integer.of_Z 47) : i32.t) in
    let* α4 : M.Val ((ref i32.t) * (ref i32.t)) :=
      M.alloc (borrow α2, borrow α3) in
    match_operator
      α4
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : ref i32.t := M.read left_val in
            let* α1 : i32.t := M.read (deref α0) in
            let* α2 : ref i32.t := M.read right_val in
            let* α3 : i32.t := M.read (deref α2) in
            let* α4 : M.Val bool.t :=
              M.alloc (UnOp.not (BinOp.Pure.eq α1 α3)) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref i32.t := M.read left_val in
              let* α2 : ref i32.t := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* y : M.Val u32.t := M.alloc ((Integer.of_Z 5) : u32.t) in
  let* _ : M.Val unit :=
    let* α0 : (ref u32.t) -> M i32.t :=
      ltac:(M.get_method (fun ℐ =>
        provided_method.ProvidedAndRequired.provided
          (Self := u32.t)
          (Trait := ℐ))) in
    let* α1 : i32.t := M.call (α0 (borrow y)) in
    let* α2 : M.Val i32.t := M.alloc α1 in
    let* α3 : M.Val i32.t := M.alloc ((Integer.of_Z 0) : i32.t) in
    let* α4 : M.Val ((ref i32.t) * (ref i32.t)) :=
      M.alloc (borrow α2, borrow α3) in
    match_operator
      α4
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : ref i32.t := M.read left_val in
            let* α1 : i32.t := M.read (deref α0) in
            let* α2 : ref i32.t := M.read right_val in
            let* α3 : i32.t := M.read (deref α2) in
            let* α4 : M.Val bool.t :=
              M.alloc (UnOp.not (BinOp.Pure.eq α1 α3)) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref i32.t := M.read left_val in
              let* α2 : ref i32.t := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
