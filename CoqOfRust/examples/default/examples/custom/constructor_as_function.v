(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Constructor.
Section Constructor.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Constructor.
End Constructor.

Module  Impl_core_fmt_Debug_for_constructor_as_function_Constructor_t.
Section Impl_core_fmt_Debug_for_constructor_as_function_Constructor_t.
  Definition Self : Set := constructor_as_function.Constructor.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "Constructor") in
    let* α2 : ref constructor_as_function.Constructor.t := M.read self in
    let* α3 : M.Val (ref i32.t) :=
      M.alloc (borrow (constructor_as_function.Constructor.Get_0 (deref α2))) in
    M.call
      (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
        α0
        α1
        (pointer_coercion "Unsize" (borrow α3))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_constructor_as_function_Constructor_t.
End Impl_core_fmt_Debug_for_constructor_as_function_Constructor_t.

(*
fn main() {
    let v: Vec<_> = vec![1, 2, 3].into_iter().map(Constructor).collect();

    println!("{v:?}");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* v :
      M.Val
        (alloc.vec.Vec.t
          constructor_as_function.Constructor.t
          alloc.alloc.Global.t) :=
    let* α0 :
        (core.iter.adapters.map.Map.t
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
            (i32.t -> M constructor_as_function.Constructor.t))
          ->
          M
            (alloc.vec.Vec.t
              constructor_as_function.Constructor.t
              alloc.alloc.Global.t) :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.collect
          (Self :=
            core.iter.adapters.map.Map.t
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
              (i32.t -> M constructor_as_function.Constructor.t))
          (B :=
            alloc.vec.Vec.t
              constructor_as_function.Constructor.t
              alloc.alloc.Global.t)
          (Trait := ℐ))) in
    let* α1 :
        (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t) ->
          (i32.t -> M constructor_as_function.Constructor.t) ->
          M
            (core.iter.adapters.map.Map.t
              (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
              (i32.t -> M constructor_as_function.Constructor.t)) :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.map
          (Self := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
          (B := constructor_as_function.Constructor.t)
          (F := i32.t -> M constructor_as_function.Constructor.t)
          (Trait := ℐ))) in
    let* α2 : (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) -> M _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.collect.IntoIterator.into_iter
          (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
          (Trait := ℐ))) in
    let* α3 : M.Val (array i32.t) :=
      M.alloc
        [
          (Integer.of_Z 1) : i32.t;
          (Integer.of_Z 2) : i32.t;
          (Integer.of_Z 3) : i32.t
        ] in
    let* α4 : M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t) :=
      M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] α3) in
    let* α5 : alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t :=
      M.read α4 in
    let* α6 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t :=
      M.call ((slice i32.t)::["into_vec"] (pointer_coercion "Unsize" α5)) in
    let* α7 : alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t :=
      M.call (α2 α6) in
    let* α8 :
        core.iter.adapters.map.Map.t
          (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
          (i32.t -> M constructor_as_function.Constructor.t) :=
      M.call
        (α1
          α7
          (fun α =>
            (M.pure (constructor_as_function.Constructor.Build_t α)) : _)) in
    let* α9 :
        alloc.vec.Vec.t
          constructor_as_function.Constructor.t
          alloc.alloc.Global.t :=
      M.call (α0 α8) in
    M.alloc α9 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_debug"] (borrow v)) in
      let* α4 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α3 ] in
      let* α5 : core.fmt.Arguments.t :=
        M.call
          (core.fmt.Arguments.t::["new_v1"]
            (pointer_coercion "Unsize" (borrow α2))
            (pointer_coercion "Unsize" (borrow α4))) in
      let* α6 : unit := M.call (std.io.stdio._print α5) in
      M.alloc α6 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
