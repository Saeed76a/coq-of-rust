(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.



Module  Impl_core_fmt_Debug_for_constructor_as_function_Constructor.
Section Impl_core_fmt_Debug_for_constructor_as_function_Constructor.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "constructor_as_function::Constructor") [].
  
  (*
  Debug
  *)
  Definition fmt (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
    match ùúè, Œ± with
    | [], [self; f] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* Œ±0 := M.read f in
      let* Œ±1 := M.read (mk_str "Constructor") in
      let* Œ±2 := M.read self in
      let* Œ±3 :=
        M.alloc
          (borrow
            ((M.var "constructor_as_function::Constructor::Get_0")
              (deref Œ±2))) in
      M.call
        ((Ty.apply
              (Ty.path "core::fmt::Formatter")
              [])::["debug_tuple_field1_finish"]
          Œ±0
          Œ±1
          (pointer_coercion "Unsize" (borrow Œ±3)))
    | _, _ => M.impossible
    end.
  
  Definition AssociatedFunction_fmt : Instance.t := {
    Notations.double_colon := fmt;
  }.
  
  Definition ‚Ñê : Instance.t := [("fmt", fmt)].
End Impl_core_fmt_Debug_for_constructor_as_function_Constructor.
End Impl_core_fmt_Debug_for_constructor_as_function_Constructor.

(*
fn main() {
    let v: Vec<_> = vec![1, 2, 3].into_iter().map(Constructor).collect();

    println!("{v:?}");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (ùúè : list Ty.t) (Œ± : list Value.t) : M :=
  match ùúè, Œ± with
  | [], [] =>
    let* v :=
      let* Œ±0 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.collect
            (Self :=
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    [Ty.path "i32";
                      Ty.apply (Ty.path "alloc::alloc::Global") []];
                  Ty.function
                    [Ty.path "i32"]
                    (Ty.apply
                      (Ty.path "constructor_as_function::Constructor")
                      [])])
            (B :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.apply (Ty.path "constructor_as_function::Constructor") [];
                  Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ‚Ñê))) in
      let* Œ±1 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.iterator.Iterator.map
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::into_iter::IntoIter")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (B := Ty.apply (Ty.path "constructor_as_function::Constructor") [])
            (F :=
              Ty.function
                [Ty.path "i32"]
                (Ty.apply (Ty.path "constructor_as_function::Constructor") []))
            (Trait := ‚Ñê))) in
      let* Œ±2 :=
        ltac:(M.get_method (fun ‚Ñê =>
          core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [Ty.path "i32"; Ty.apply (Ty.path "alloc::alloc::Global") []])
            (Trait := ‚Ñê))) in
      let* Œ±3 :=
        M.alloc
          [
            (Integer.of_Z 1) : Ty.path "i32";
            (Integer.of_Z 2) : Ty.path "i32";
            (Integer.of_Z 3) : Ty.path "i32"
          ] in
      let* Œ±4 :=
        M.call ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"] Œ±3) in
      let* Œ±5 := M.read Œ±4 in
      let* Œ±6 :=
        M.call
          ((Ty.apply (Ty.path "slice") [Ty.path "i32"])::["into_vec"]
            (pointer_coercion "Unsize" Œ±5)) in
      let* Œ±7 := M.call (Œ±2 Œ±6) in
      let* Œ±8 :=
        M.call
          (Œ±1
            Œ±7
            (fun Œ± =>
              (M.pure (constructor_as_function.Constructor.Build_t Œ±)) : _)) in
      let* Œ±9 := M.call (Œ±0 Œ±8) in
      M.alloc Œ±9 in
    let* _ :=
      let* _ :=
        let* Œ±0 := M.read (mk_str "") in
        let* Œ±1 := M.read (mk_str "
") in
        let* Œ±2 := M.alloc [ Œ±0; Œ±1 ] in
        let* Œ±3 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::rt::Argument") [])::["new_debug"]
              (borrow v)) in
        let* Œ±4 := M.alloc [ Œ±3 ] in
        let* Œ±5 :=
          M.call
            ((Ty.apply (Ty.path "core::fmt::Arguments") [])::["new_v1"]
              (pointer_coercion "Unsize" (borrow Œ±2))
              (pointer_coercion "Unsize" (borrow Œ±4))) in
        let* Œ±6 := M.call ((M.var "std::io::stdio::_print") Œ±5) in
        M.alloc Œ±6 in
      M.alloc tt in
    let* Œ±0 := M.alloc tt in
    M.read Œ±0
  | _, _ => M.impossible
  end.
