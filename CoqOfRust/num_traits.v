(* Generated by coq-of-rust and adapted by hand *)
Require Import CoqOfRust.CoqOfRust.

Module bounds.
  Module Bounded.
    Class Trait (Self : Set) : Set := {
      min_value : M Self;
      max_value : M Self;
    }.
  End Bounded.
  
  Module LowerBounded.
    Class Trait (Self : Set) : Set := {
      min_value : M Self;
    }.
  End LowerBounded.
  
  Module UpperBounded.
    Class Trait (Self : Set) : Set := {
      max_value : M Self;
    }.
  End UpperBounded.
End bounds.

Module identities.
  Module Zero.
    Class Trait (Self : Set) : Set := {
      _ :: core.marker.Sized.Trait Self;
      _ :: core.ops.arith.Add.Trait Self (Rhs := Self);
      zero : (M Self);
      is_zero : (ref Self) -> (M bool);
    }.
  End Zero.
  
  Module One.
    Class Trait (Self : Set) : Set := {
      _ :: core.marker.Sized.Trait Self;
      _ :: core.ops.arith.Mul.Trait Self (Rhs := Self);
      one : (M Self);
    }.
  End One.
  
  Parameter zero :
      forall {T : Set},
      forall `{num_traits.identities.Zero.Trait T}, M T.
  
  Parameter one :
      forall {T : Set},
      forall `{num_traits.identities.One.Trait T}, M T.
End identities.

Module ops.
  Module checked.
    Module CheckedAdd.
      Class Trait (Self : Set) : Set := {
        _ :: core.marker.Sized.Trait Self;
        _ :: core.ops.arith.Add.Trait Self (Rhs := Self);
        checked_add :
          (ref Self) -> (ref Self) -> M (core.option.Option.t Self);
      }.
    End CheckedAdd.
    
    Module CheckedSub.
      Class Trait (Self : Set) : Set := {
        _ :: core.marker.Sized.Trait Self;
        _ :: core.ops.arith.Sub.Trait Self (Rhs := Self);
        checked_sub :
          (ref Self) -> (ref Self) -> (M (core.option.Option.t Self));
      }.
    End CheckedSub.
    
    Module CheckedMul.
      Class Trait (Self : Set) : Set := {
        _ :: core.marker.Sized.Trait Self;
        _ :: core.ops.arith.Mul.Trait Self (Rhs := Self);
        checked_mul :
          (ref Self) -> (ref Self) -> (M (core.option.Option.t Self));
      }.
    End CheckedMul.
    
    Module CheckedDiv.
      Class Trait (Self : Set) : Set := {
        _ :: core.marker.Sized.Trait Self;
        _ :: core.ops.arith.Div.Trait Self (Rhs := Self);
        checked_div :
          (ref Self) -> (ref Self) -> (M (core.option.Option.t Self));
      }.
    End CheckedDiv.
    
    Module CheckedRem.
      Class Trait (Self : Set) : Set := {
        _ :: core.marker.Sized.Trait Self;
        _ :: core.ops.arith.Rem.Trait Self (Rhs := Self);
        checked_rem :
          (ref Self) -> (ref Self) -> (M (core.option.Option.t Self));
      }.
    End CheckedRem.
    
    Module CheckedNeg.
      Class Trait (Self : Set) : Set := {
        _ :: core.marker.Sized.Trait Self;
        checked_neg :
          (ref Self) -> (M (core.option.Option.t Self));
      }.
    End CheckedNeg.
  End checked.

  Module saturating.
    Module Saturating.
      Class Trait (Self : Set) : Set := {
        (* TODO *)
      }.
    End Saturating.
  End saturating.
End ops.

(* moved *)
Module NumOps.
  Unset Primitive Projections.
  Class Trait
      (Self : Set) {(* TODO *) Rhs : Set} {(* TODO *) Output : option Set}
      : Set := {
    _ :: core.ops.arith.Add.Trait Self (Rhs := (Rhs (* @TODO *)));
    _ :: core.ops.arith.Sub.Trait Self (Rhs := (Rhs (* @TODO *)));
    _ :: core.ops.arith.Mul.Trait Self (Rhs := (Rhs (* @TODO *)));
    _ :: core.ops.arith.Div.Trait Self (Rhs := (Rhs (* @TODO *)));
    _ :: core.ops.arith.Rem.Trait Self (Rhs := (Rhs (* @TODO *)));
  }.
  Global Set Primitive Projections.
End NumOps.

(* moved *)
Module Num.
  Class Trait (Self : Set) : Type := {
    _ :: core.cmp.PartialEq.Trait Self (Rhs := Self);
    _ :: num_traits.identities.Zero.Trait Self;
    _ :: num_traits.identities.One.Trait Self;
    _ :: num_traits.NumOps.Trait Self (Rhs := Self) (Output := None);
    FromStrRadixErr : Set;
    from_str_radix :
      (ref str.t) ->
      u32.t ->
      (M (core.result.Result.t Self FromStrRadixErr));
  }.
End Num.

Module sign.
  Module Unsigned.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
      _ :: num_traits.Num.Trait Self;
    }.
    Global Set Primitive Projections.
  End Unsigned.
End sign.
