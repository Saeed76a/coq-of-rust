(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
Require CoqOfRust.ink.ink_env.

Module result_info.
  Module IsResultType.
    Section IsResultType.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End IsResultType.
  End IsResultType.
  Definition IsResultType (T : Set) : Set := IsResultType.t (T := T).
  
  Module IsResultTypeFallback.
    Class Trait (Self : Set) : Type := {
      VALUE `{H' : State.Trait} : bool;
    }.
    
    Global Instance Method_VALUE `{H' : State.Trait} `(Trait)
      : Notation.Dot "VALUE" := {
      Notation.dot := VALUE;
    }.
  End IsResultTypeFallback.
  
  Module
    Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
    Section
      Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
      Context {T : Set}.
      Definition Self := ink.result_info.IsResultType T.
      
      Global Instance I : ink.result_info.IsResultTypeFallback.Trait Self := {
      }.
    End
      Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
    Global Hint Resolve I : core.
  End
    Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
  
  Module IsResultErr.
    Section IsResultErr.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        _ : ref T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End IsResultErr.
  End IsResultErr.
  Definition IsResultErr := @IsResultErr.t.
  
  Module IsResultErrFallback.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
    Global Instance Method_value `{H' : State.Trait} `(Trait)
      : Notation.Dot "value" := {
      Notation.dot (self : ref Self) := (axiom : M (H := H') bool);
    }.
  End IsResultErrFallback.
  
  Module
    Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
    Section
      Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
      Context {T : Set}.
      Definition Self := ink.result_info.IsResultErr T.
      
      Global Instance I : ink.result_info.IsResultErrFallback.Trait Self := {
      }.
    End
      Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
    Global Hint Resolve I : core.
  End
    Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
End result_info.

Module IsResultType.
  Section IsResultType.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End IsResultType.
End IsResultType.
Definition IsResultType (T : Set) : Set := IsResultType.t (T := T).

Module IsResultTypeFallback.
  Class Trait (Self : Set) : Type := {
    VALUE `{H' : State.Trait} : bool;
  }.
  
  Global Instance Method_VALUE `{H' : State.Trait} `(Trait)
    : Notation.Dot "VALUE" := {
    Notation.dot := VALUE;
  }.
End IsResultTypeFallback.

Module
  Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
  Section
    Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
    Context {T : Set}.
    Definition Self := ink.result_info.IsResultType T.
    
    Global Instance I : ink.result_info.IsResultTypeFallback.Trait Self := {
    }.
  End
    Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
  Global Hint Resolve I : core.
End
  Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.

Module IsResultErr.
  Section IsResultErr.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _ : ref T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End IsResultErr.
End IsResultErr.
Definition IsResultErr := @IsResultErr.t.

Module IsResultErrFallback.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
  Global Instance Method_value `{H' : State.Trait} `(Trait)
    : Notation.Dot "value" := {
    Notation.dot (self : ref Self) := (axiom : M (H := H') bool);
  }.
End IsResultErrFallback.

Module
  Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
  Section
    Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
    Context {T : Set}.
    Definition Self := ink.result_info.IsResultErr T.
    
    Global Instance I : ink.result_info.IsResultErrFallback.Trait Self := {
    }.
  End
    Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
  Global Hint Resolve I : core.
End Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.

Module reflect.
  Module contract.
    Module ContractName.
      Class Trait (Self : Set) : Type := {
        NAME `{H' : State.Trait} : ref str;
      }.
      
      Global Instance Method_NAME `{H' : State.Trait} `(Trait)
        : Notation.Dot "NAME" := {
        Notation.dot := NAME;
      }.
    End ContractName.
  End contract.
  
  Module dispatch.
    Module DispatchableMessageInfo.
      Class Trait (Self : Set) : Type := {
        Input : Set;
        Output : Set;
        Storage : Set;
        CALLABLE `{H' : State.Trait}
          :
          (mut_ref Storage) -> Input -> M (H := H') Output;
        MUTATES `{H' : State.Trait} : bool;
        PAYABLE `{H' : State.Trait} : bool;
        SELECTOR `{H' : State.Trait} : list u8;
        LABEL `{H' : State.Trait} : ref str;
      }.
      
      Global Instance Method_Input `(Trait)
        : Notation.DoubleColonType Self "Input" := {
        Notation.double_colon_type := Input;
      }.
      Global Instance Method_Output `(Trait)
        : Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Storage `(Trait)
        : Notation.DoubleColonType Self "Storage" := {
        Notation.double_colon_type := Storage;
      }.
      Global Instance Method_CALLABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "CALLABLE" := {
        Notation.dot := CALLABLE;
      }.
      Global Instance Method_MUTATES `{H' : State.Trait} `(Trait)
        : Notation.Dot "MUTATES" := {
        Notation.dot := MUTATES;
      }.
      Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "PAYABLE" := {
        Notation.dot := PAYABLE;
      }.
      Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
        : Notation.Dot "SELECTOR" := {
        Notation.dot := SELECTOR;
      }.
      Global Instance Method_LABEL `{H' : State.Trait} `(Trait)
        : Notation.Dot "LABEL" := {
        Notation.dot := LABEL;
      }.
    End DispatchableMessageInfo.
    
    Module DispatchableConstructorInfo.
      Class Trait (Self : Set) : Type := {
        Input : Set;
        Storage : Set;
        Output : Set;
        Error : Set;
        IS_RESULT `{H' : State.Trait} : bool;
        CALLABLE `{H' : State.Trait} : Input -> M (H := H') Output;
        PAYABLE `{H' : State.Trait} : bool;
        SELECTOR `{H' : State.Trait} : list u8;
        LABEL `{H' : State.Trait} : ref str;
      }.
      
      Global Instance Method_Input `(Trait)
        : Notation.DoubleColonType Self "Input" := {
        Notation.double_colon_type := Input;
      }.
      Global Instance Method_Storage `(Trait)
        : Notation.DoubleColonType Self "Storage" := {
        Notation.double_colon_type := Storage;
      }.
      Global Instance Method_Output `(Trait)
        : Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Error `(Trait)
        : Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
      Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
        : Notation.Dot "IS_RESULT" := {
        Notation.dot := IS_RESULT;
      }.
      Global Instance Method_CALLABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "CALLABLE" := {
        Notation.dot := CALLABLE;
      }.
      Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "PAYABLE" := {
        Notation.dot := PAYABLE;
      }.
      Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
        : Notation.Dot "SELECTOR" := {
        Notation.dot := SELECTOR;
      }.
      Global Instance Method_LABEL `{H' : State.Trait} `(Trait)
        : Notation.Dot "LABEL" := {
        Notation.dot := LABEL;
      }.
    End DispatchableConstructorInfo.
    
    Module private.
      Module Sealed.
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End Sealed.
    End private.
    
    Module ConstructorOutput.
      Class Trait
          (Self : Set)
          `{ink.reflect.dispatch.private.Sealed.Trait Self}
          {C : Set} :
          Type := {
        IS_RESULT `{H' : State.Trait} : bool;
        Error : Set;
        as_result `{H' : State.Trait}
          :
          (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error));
      }.
      
      Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
        : Notation.Dot "IS_RESULT" := {
        Notation.dot := IS_RESULT;
      }.
      Global Instance Method_Error `(Trait)
        : Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
      Global Instance Method_as_result `{H' : State.Trait} `(Trait)
        : Notation.Dot "as_result" := {
        Notation.dot := as_result;
      }.
    End ConstructorOutput.
    
    Module ConstructorOutputValue.
      Section ConstructorOutputValue.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          _ : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot 0 := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End ConstructorOutputValue.
    End ConstructorOutputValue.
    Definition ConstructorOutputValue := @ConstructorOutputValue.t.
    
    Module
      Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
      Section
        Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
        Context {T : Set}.
        Definition Self := ink.reflect.dispatch.ConstructorOutputValue T.
        
        Global Instance I : ink.reflect.dispatch.private.Sealed.Trait Self := {
        }.
      End
        Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
      Global Hint Resolve I : core.
    End
      Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
    
    Module
      Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
      Section
        Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
        Context {C : Set}.
        Definition Self := ink.reflect.dispatch.ConstructorOutputValue C.
        
        Definition Error : Set := ref unit.
        
        Parameter as_result :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error)).
        
        Global Instance Method_as_result `{H' : State.Trait} :
          Notation.Dot "as_result" := {
          Notation.dot := as_result;
        }.
        
        Global Instance I
          : ink.reflect.dispatch.ConstructorOutput.Trait Self (C := C) := {
          ink.reflect.dispatch.ConstructorOutput.Error := Error;
          ink.reflect.dispatch.ConstructorOutput.as_result `{H' : State.Trait}
            :=
            as_result;
        }.
      End
        Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
      Global Hint Resolve I : core.
    End
      Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
    
    Module
      Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
      Section
        Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
        Context {C E : Set}.
        Definition Self :=
          ink.reflect.dispatch.ConstructorOutputValue (core.result.Result C E).
        
        Definition IS_RESULT `{H' : State.Trait} := Pure true.
        
        Global Instance AssociatedFunction_IS_RESULT `{H' : State.Trait} :
          Notation.DoubleColon Self "IS_RESULT" := {
          Notation.double_colon := IS_RESULT;
        }.
        
        Definition Error : Set := E.
        
        Parameter as_result :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error)).
        
        Global Instance Method_as_result `{H' : State.Trait} :
          Notation.Dot "as_result" := {
          Notation.dot := as_result;
        }.
        
        Global Instance I
          : ink.reflect.dispatch.ConstructorOutput.Trait Self (C := C) := {
          ink.reflect.dispatch.ConstructorOutput.Error := Error;
          ink.reflect.dispatch.ConstructorOutput.as_result `{H' : State.Trait}
            :=
            as_result;
        }.
      End
        Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
      Global Hint Resolve I : core.
    End
      Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
    
    Module DispatchError.
      Inductive t : Set :=
      | InvalidSelector
      | UnknownSelector
      | InvalidParameters
      | CouldNotReadInput
      | PaidUnpayableMessage.
    End DispatchError.
    Definition DispatchError := DispatchError.t.
    
    Module ExecuteDispatchable.
      Class Trait (Self : Set) : Type := {
        execute_dispatchable `{H' : State.Trait}
          :
          Self ->
            M (H := H')
              (core.result.Result unit ink.reflect.dispatch.DispatchError);
      }.
      
      Global Instance Method_execute_dispatchable `{H' : State.Trait} `(Trait)
        : Notation.Dot "execute_dispatchable" := {
        Notation.dot := execute_dispatchable;
      }.
    End ExecuteDispatchable.
    
    Module ContractMessageDecoder.
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
        _
          :
          Sigma
            `(parity_scale_codec.codec.Decode.Trait Type_)
            `(ink.reflect.dispatch.ExecuteDispatchable.Trait Type_),
          unit;
      }.
      
      Global Instance Method_Type_ `(Trait)
        : Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractMessageDecoder.
    
    Module DecodeDispatch.
      Class Trait (Self : Set) `{parity_scale_codec.codec.Decode.Trait Self} :
          Type := {
        decode_dispatch
          `{H' : State.Trait}
          {I : Set}
          `{H'0 : parity_scale_codec.codec.Input.Trait I}
          :
          (mut_ref I) ->
            M (H := H')
              (core.result.Result Self ink.reflect.dispatch.DispatchError);
      }.
      
      Global Instance Method_decode_dispatch `{H' : State.Trait} `(Trait)
        : Notation.Dot "decode_dispatch" := {
        Notation.dot {I : Set} `{H'0 : parity_scale_codec.codec.Input.Trait I}
          :=
          decode_dispatch (I := I) (H'0 := H'0);
      }.
    End DecodeDispatch.
    
    Module ContractConstructorDecoder.
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
        _
          :
          Sigma
            `(ink.reflect.dispatch.DecodeDispatch.Trait Type_)
            `(ink.reflect.dispatch.ExecuteDispatchable.Trait Type_),
          unit;
      }.
      
      Global Instance Method_Type_ `(Trait)
        : Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractConstructorDecoder.
    
    Module Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Global Instance I : core.marker.Copy.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') ink.reflect.dispatch.DispatchError.
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter eq :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref ink.reflect.dispatch.DispatchError) ->
            M (H := H') bool.
      
      Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I
        : core.cmp.PartialEq.Trait Self
            (Rhs := core.cmp.PartialEq.Default.Rhs Self)
          := {
        core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Global Instance I : core.marker.StructuralEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter assert_receiver_is_total_eq :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') unit.
      
      Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_convert_From_for_parity_scale_codec_error_Error.
      Definition Self := parity_scale_codec.error.Error.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink.reflect.dispatch.DispatchError -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink.reflect.dispatch.DispatchError)
          := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End Impl_core_convert_From_for_parity_scale_codec_error_Error.
  End dispatch.
  
  Module event.
    Module ContractEventBase.
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
      }.
      
      Global Instance Method_Type_ `(Trait)
        : Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractEventBase.
  End event.
  
  Module trait_def.
    Module info.
      Module TraitMessageInfo.
        Class Trait (Self : Set) : Type := {
          PAYABLE `{H' : State.Trait} : bool;
          SELECTOR `{H' : State.Trait} : list u8;
        }.
        
        Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
          : Notation.Dot "PAYABLE" := {
          Notation.dot := PAYABLE;
        }.
        Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
          : Notation.Dot "SELECTOR" := {
          Notation.dot := SELECTOR;
        }.
      End TraitMessageInfo.
      
      Module TraitInfo.
        Class Trait (Self : Set) : Type := {
          ID `{H' : State.Trait} : u32;
          PATH `{H' : State.Trait} : ref str;
          NAME `{H' : State.Trait} : ref str;
        }.
        
        Global Instance Method_ID `{H' : State.Trait} `(Trait)
          : Notation.Dot "ID" := {
          Notation.dot := ID;
        }.
        Global Instance Method_PATH `{H' : State.Trait} `(Trait)
          : Notation.Dot "PATH" := {
          Notation.dot := PATH;
        }.
        Global Instance Method_NAME `{H' : State.Trait} `(Trait)
          : Notation.Dot "NAME" := {
          Notation.dot := NAME;
        }.
      End TraitInfo.
    End info.
    
    Module registry.
      Module TraitDefinitionRegistry.
        Section TraitDefinitionRegistry.
          Context {E : Set}.
          Unset Primitive Projections.
          Record t : Set := {
            marker : core.marker.PhantomData (E);
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_marker : Notation.Dot "marker" := {
            Notation.dot '(Build_t x0) := x0;
          }.
          Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
            Notation.double_colon '(Build_t x0) := x0;
          }.
        End TraitDefinitionRegistry.
      End TraitDefinitionRegistry.
      Definition TraitDefinitionRegistry (E : Set) : Set :=
        TraitDefinitionRegistry.t (E := E).
      
      Module
        Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
        Section
          Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
          Context {E : Set}.
          Definition Self :=
            ink.reflect.trait_def.registry.TraitDefinitionRegistry E.
          
          Definition Env : Set := E.
          
          Global Instance I : ink_env.contract.ContractEnv.Trait Self := {
            ink_env.contract.ContractEnv.Env := Env;
          }.
        End
          Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
        Global Hint Resolve I : core.
      End
        Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    End registry.
  End trait_def.
End reflect.

Module codegen.
  Module dispatch.
    Module execution.
      Parameter deny_payment :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          M (H := H')
              (core.result.Result unit ink.reflect.dispatch.DispatchError).
    End execution.
    
    Module info.
      Module ContractCallBuilder.
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait)
          : Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractCallBuilder.
    End info.
    
    Module type_check.
      Module DispatchInput.
        Section DispatchInput.
          Context {T : Set}.
          Unset Primitive Projections.
          Record t : Set := {
            _ : T;
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_0 : Notation.Dot 0 := {
            Notation.dot '(Build_t x0) := x0;
          }.
        End DispatchInput.
      End DispatchInput.
      Definition DispatchInput := @DispatchInput.t.
      
      Module DispatchOutput.
        Section DispatchOutput.
          Context {T : Set}.
          Unset Primitive Projections.
          Record t : Set := {
            _ : T;
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_0 : Notation.Dot 0 := {
            Notation.dot '(Build_t x0) := x0;
          }.
        End DispatchOutput.
      End DispatchOutput.
      Definition DispatchOutput := @DispatchOutput.t.
    End type_check.
  End dispatch.
  
  Module env.
    Module Env.
      Class Trait (Self : Set) : Type := {
        EnvAccess : Set;
        env `{H' : State.Trait} : Self -> M (H := H') EnvAccess;
      }.
      
      Global Instance Method_EnvAccess `(Trait)
        : Notation.DoubleColonType Self "EnvAccess" := {
        Notation.double_colon_type := EnvAccess;
      }.
      Global Instance Method_env `{H' : State.Trait} `(Trait)
        : Notation.Dot "env" := {
        Notation.dot := env;
      }.
    End Env.
    
    Module StaticEnv.
      Class Trait (Self : Set) : Type := {
        EnvAccess : Set;
        env `{H' : State.Trait} : M (H := H') EnvAccess;
      }.
      
      Global Instance Method_EnvAccess `(Trait)
        : Notation.DoubleColonType Self "EnvAccess" := {
        Notation.double_colon_type := EnvAccess;
      }.
      Global Instance Method_env `{H' : State.Trait} `(Trait)
        : Notation.Dot "env" := {
        Notation.dot := env;
      }.
    End StaticEnv.
  End env.
  
  Module event.
    Module emit.
      Module EmitEvent.
        Class Trait
            (Self : Set)
            {C : Set}
            `{ink.reflect.event.ContractEventBase.Trait C} :
            Type := {
          emit_event
            `{H' : State.Trait}
            {E : Set}
            `{H'0
              :
              core.convert.Into.Trait E
                (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
            :
            Self -> E -> M (H := H') unit;
        }.
        
        Global Instance Method_emit_event `{H' : State.Trait} `(Trait)
          : Notation.Dot "emit_event" := {
          Notation.dot
            {E : Set}
            `{H'0
              :
              core.convert.Into.Trait E
                (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
            :=
            emit_event (E := E) (H'0 := H'0);
        }.
      End EmitEvent.
    End emit.
    
    Module topics.
      Module RespectTopicLimit.
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End RespectTopicLimit.
      
      Module EventLenTopics.
        Class Trait (Self : Set) : Type := {
          LenTopics : Set;
        }.
        
        Global Instance Method_LenTopics `(Trait)
          : Notation.DoubleColonType Self "LenTopics" := {
          Notation.double_colon_type := LenTopics;
        }.
      End EventLenTopics.
      
      Module EventRespectsTopicLimit.
        Section EventRespectsTopicLimit.
          Context {Event : Set}.
          Context
            `{ink.codegen.event.topics.EventLenTopics.Trait Event}
            `{ink.codegen.event.topics.RespectTopicLimit.Trait
                  (ink.codegen.event.topics.EventLenTopics.LenTopics
                    (Self := Event))}.
          Unset Primitive Projections.
          Record t : Set := {
            marker : core.marker.PhantomData (Event);
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_marker : Notation.Dot "marker" := {
            Notation.dot '(Build_t x0) := x0;
          }.
          Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
            Notation.double_colon '(Build_t x0) := x0;
          }.
        End EventRespectsTopicLimit.
      End EventRespectsTopicLimit.
      Definition EventRespectsTopicLimit
          (Event : Set)
          `{ink.codegen.event.topics.EventLenTopics.Trait Event}
          `{ink.codegen.event.topics.RespectTopicLimit.Trait
                (ink.codegen.event.topics.EventLenTopics.LenTopics
                  (Self := Event))}
          : Set :=
        EventRespectsTopicLimit.t (Event := Event).
      
      Module EventTopics.
        Inductive t : Set := Build.
      End EventTopics.
      Definition EventTopics := @EventTopics.t.
      
      Module
        Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
        Definition Self := ink.codegen.event.topics.EventTopics.
        
        Global Instance I
          : ink.codegen.event.topics.RespectTopicLimit.Trait Self := {
        }.
        Global Hint Resolve I : core.
      End
        Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
    End topics.
  End event.
  
  Module implies_return.
    Module ImpliesReturn.
      Unset Primitive Projections.
      Class Trait (Self : Set) {T : Set} : Type := {
      }.
      Global Set Primitive Projections.
    End ImpliesReturn.
    
    Module Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
      Section Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
        Context {T : Set}.
        Definition Self := T.
        
        Global Instance I
          : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
        }.
      End Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
      Global Hint Resolve I : core.
    End Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
    
    Module
      Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
      Section
        Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
        Context {T E CallType Args : Set}.
        Definition Self :=
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            (ink_env.call.common.Set_ CallType)
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput Args))
            (ink_env.call.common.Set_ (ink_env.call.common.ReturnType T)).
        
        Global Instance I
          : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
        }.
      End
        Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
      Global Hint Resolve I : core.
    End
      Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
    
    Module
      Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
      Section
        Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
        Context {E CallType Args : Set}.
        Definition Self :=
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            (ink_env.call.common.Set_ CallType)
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput Args))
            (ink_env.call.common.Set_ unit).
        
        Global Instance I
          : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := unit) := {
        }.
      End
        Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
      Global Hint Resolve I : core.
    End
      Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
  End implies_return.
  
  Module trait_def.
    Module call_builder.
      Module TraitCallBuilder.
        Class Trait (Self : Set) : Type := {
          Builder : Set;
          call `{H' : State.Trait} : (ref Self) -> M (H := H') (ref Builder);
          call_mut `{H' : State.Trait}
            :
            (mut_ref Self) -> M (H := H') (mut_ref Builder);
        }.
        
        Global Instance Method_Builder `(Trait)
          : Notation.DoubleColonType Self "Builder" := {
          Notation.double_colon_type := Builder;
        }.
        Global Instance Method_call `{H' : State.Trait} `(Trait)
          : Notation.Dot "call" := {
          Notation.dot := call;
        }.
        Global Instance Method_call_mut `{H' : State.Trait} `(Trait)
          : Notation.Dot "call_mut" := {
          Notation.dot := call_mut;
        }.
      End TraitCallBuilder.
      
      Module TraitCallForwarder.
        Class Trait (Self : Set) : Type := {
          Forwarder : Set;
          _
            :
            Sigma
              `(ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait
                    Forwarder),
            unit;
        }.
        
        Global Instance Method_Forwarder `(Trait)
          : Notation.DoubleColonType Self "Forwarder" := {
          Notation.double_colon_type := Forwarder;
        }.
      End TraitCallForwarder.
      
      (* Module TraitCallForwarderFor.
        Class Trait (Self : Set) : Type := {
          Forwarder : Set;
          _
            :
            Sigma
              `(ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait
                    Forwarder),
            unit;
          forward `{H' : State.Trait}
            :
            (ref Self) -> M (H := H') (ref Forwarder);
          forward_mut `{H' : State.Trait}
            :
            (mut_ref Self) -> M (H := H') (mut_ref Forwarder);
          build `{H' : State.Trait}
            :
            (ref Self) ->
              M (H := H')
                (ref
                  (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                    (Self := Forwarder)));
          build_mut `{H' : State.Trait}
            :
            (mut_ref Self) ->
              M (H := H')
                (mut_ref
                  (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                    (Self := Forwarder)));
        }.
        
        Global Instance Method_Forwarder `(Trait)
          : Notation.DoubleColonType Self "Forwarder" := {
          Notation.double_colon_type := Forwarder;
        }.
        Global Instance Method_forward `{H' : State.Trait} `(Trait)
          : Notation.Dot "forward" := {
          Notation.dot := forward;
        }.
        Global Instance Method_forward_mut `{H' : State.Trait} `(Trait)
          : Notation.Dot "forward_mut" := {
          Notation.dot := forward_mut;
        }.
        Global Instance Method_build `{H' : State.Trait} `(Trait)
          : Notation.Dot "build" := {
          Notation.dot := build;
        }.
        Global Instance Method_build_mut `{H' : State.Trait} `(Trait)
          : Notation.Dot "build_mut" := {
          Notation.dot := build_mut;
        }.
      End TraitCallForwarderFor. *)
    End call_builder.
    
    Module trait_message.
      Module TraitMessagePayable.
        Inductive t : Set := Build.
      End TraitMessagePayable.
      Definition TraitMessagePayable := @TraitMessagePayable.t.
      
      Module TraitMessageSelector.
        Inductive t : Set := Build.
      End TraitMessageSelector.
      Definition TraitMessageSelector := @TraitMessageSelector.t.
    End trait_message.
  End trait_def.
  
  Module utils.
    Module identity_type.
      Parameter consume_type :
          forall `{H' : State.Trait} {T : Set},
          M (H := H') unit.
    End identity_type.
    
    Module same_type.
      Module IsSameType.
        Section IsSameType.
          Context {T : Set}.
          Unset Primitive Projections.
          Record t : Set := {
            _marker : core.marker.PhantomData T;
          }.
          Global Set Primitive Projections.
          
          Global Instance Get__marker : Notation.Dot "_marker" := {
            Notation.dot '(Build_t x0) := x0;
          }.
          Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
            Notation.double_colon '(Build_t x0) := x0;
          }.
        End IsSameType.
      End IsSameType.
      Definition IsSameType (T : Set) : Set := IsSameType.t (T := T).
    End same_type.
  End utils.
End codegen.

Module dispatch.
  Module execution.
    Parameter deny_payment :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        M (H := H')
            (core.result.Result unit ink.reflect.dispatch.DispatchError).
  End execution.
  
  Module info.
    Module ContractCallBuilder.
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
      }.
      
      Global Instance Method_Type_ `(Trait)
        : Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractCallBuilder.
  End info.
  
  Module type_check.
    Module DispatchInput.
      Section DispatchInput.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          _ : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot 0 := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End DispatchInput.
    End DispatchInput.
    Definition DispatchInput := @DispatchInput.t.
    
    Module DispatchOutput.
      Section DispatchOutput.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          _ : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot 0 := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End DispatchOutput.
    End DispatchOutput.
    Definition DispatchOutput := @DispatchOutput.t.
  End type_check.
End dispatch.

Module execution.
  Parameter deny_payment :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') (core.result.Result unit ink.reflect.dispatch.DispatchError).
End execution.

Parameter deny_payment :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') (core.result.Result unit ink.reflect.dispatch.DispatchError).

Module info.
  Module ContractCallBuilder.
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait)
      : Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractCallBuilder.
End info.

Module ContractCallBuilder.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
  }.
  
  Global Instance Method_Type_ `(Trait)
    : Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractCallBuilder.

Module type_check.
  Module DispatchInput.
    Section DispatchInput.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        _ : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End DispatchInput.
  End DispatchInput.
  Definition DispatchInput := @DispatchInput.t.
  
  Module DispatchOutput.
    Section DispatchOutput.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        _ : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End DispatchOutput.
  End DispatchOutput.
  Definition DispatchOutput := @DispatchOutput.t.
End type_check.

Module DispatchInput.
  Section DispatchInput.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _ : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End DispatchInput.
End DispatchInput.
Definition DispatchInput := @DispatchInput.t.

Module DispatchOutput.
  Section DispatchOutput.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _ : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End DispatchOutput.
End DispatchOutput.
Definition DispatchOutput := @DispatchOutput.t.

Module env.
  Module Env.
    Class Trait (Self : Set) : Type := {
      EnvAccess : Set;
      env `{H' : State.Trait} : Self -> M (H := H') EnvAccess;
    }.
    
    Global Instance Method_EnvAccess `(Trait)
      : Notation.DoubleColonType Self "EnvAccess" := {
      Notation.double_colon_type := EnvAccess;
    }.
    Global Instance Method_env `{H' : State.Trait} `(Trait)
      : Notation.Dot "env" := {
      Notation.dot := env;
    }.
  End Env.
  
  Module StaticEnv.
    Class Trait (Self : Set) : Type := {
      EnvAccess : Set;
      env `{H' : State.Trait} : M (H := H') EnvAccess;
    }.
    
    Global Instance Method_EnvAccess `(Trait)
      : Notation.DoubleColonType Self "EnvAccess" := {
      Notation.double_colon_type := EnvAccess;
    }.
    Global Instance Method_env `{H' : State.Trait} `(Trait)
      : Notation.Dot "env" := {
      Notation.dot := env;
    }.
  End StaticEnv.
End env.

Module Env.
  Class Trait (Self : Set) : Type := {
    EnvAccess : Set;
    env `{H' : State.Trait} : Self -> M (H := H') EnvAccess;
  }.
  
  Global Instance Method_EnvAccess `(Trait)
    : Notation.DoubleColonType Self "EnvAccess" := {
    Notation.double_colon_type := EnvAccess;
  }.
  Global Instance Method_env `{H' : State.Trait} `(Trait)
    : Notation.Dot "env" := {
    Notation.dot := env;
  }.
End Env.

Module StaticEnv.
  Class Trait (Self : Set) : Type := {
    EnvAccess : Set;
    env `{H' : State.Trait} : M (H := H') EnvAccess;
  }.
  
  Global Instance Method_EnvAccess `(Trait)
    : Notation.DoubleColonType Self "EnvAccess" := {
    Notation.double_colon_type := EnvAccess;
  }.
  Global Instance Method_env `{H' : State.Trait} `(Trait)
    : Notation.Dot "env" := {
    Notation.dot := env;
  }.
End StaticEnv.

Module event.
  Module emit.
    Module EmitEvent.
      Class Trait
          (Self : Set)
          {C : Set}
          `{ink.reflect.event.ContractEventBase.Trait C} :
          Type := {
        emit_event
          `{H' : State.Trait}
          {E : Set}
          `{H'0
            :
            core.convert.Into.Trait E
              (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
          :
          Self -> E -> M (H := H') unit;
      }.
      
      Global Instance Method_emit_event `{H' : State.Trait} `(Trait)
        : Notation.Dot "emit_event" := {
        Notation.dot
          {E : Set}
          `{H'0
            :
            core.convert.Into.Trait E
              (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
          :=
          emit_event (E := E) (H'0 := H'0);
      }.
    End EmitEvent.
  End emit.
  
  Module topics.
    Module RespectTopicLimit.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End RespectTopicLimit.
    
    Module EventLenTopics.
      Class Trait (Self : Set) : Type := {
        LenTopics : Set;
      }.
      
      Global Instance Method_LenTopics `(Trait)
        : Notation.DoubleColonType Self "LenTopics" := {
        Notation.double_colon_type := LenTopics;
      }.
    End EventLenTopics.
    
    Module EventRespectsTopicLimit.
      Section EventRespectsTopicLimit.
        Context {Event : Set}.
        Context
          `{ink.codegen.event.topics.EventLenTopics.Trait Event}
          `{ink.codegen.event.topics.RespectTopicLimit.Trait
                (ink.codegen.event.topics.EventLenTopics.LenTopics
                  (Self := Event))}.
        Unset Primitive Projections.
        Record t : Set := {
          marker : core.marker.PhantomData (Event);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_marker : Notation.Dot "marker" := {
          Notation.dot '(Build_t x0) := x0;
        }.
        Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
          Notation.double_colon '(Build_t x0) := x0;
        }.
      End EventRespectsTopicLimit.
    End EventRespectsTopicLimit.
    Definition EventRespectsTopicLimit
        (Event : Set)
        `{ink.codegen.event.topics.EventLenTopics.Trait Event}
        `{ink.codegen.event.topics.RespectTopicLimit.Trait
              (ink.codegen.event.topics.EventLenTopics.LenTopics
                (Self := Event))}
        : Set :=
      EventRespectsTopicLimit.t (Event := Event).
    
    Module EventTopics.
      Inductive t : Set := Build.
    End EventTopics.
    Definition EventTopics := @EventTopics.t.
    
    Module
      Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
      Definition Self := ink.codegen.event.topics.EventTopics.
      
      Global Instance I
        : ink.codegen.event.topics.RespectTopicLimit.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
  End topics.
End event.

Module emit.
  Module EmitEvent.
    Class Trait
        (Self : Set)
        {C : Set}
        `{ink.reflect.event.ContractEventBase.Trait C} :
        Type := {
      emit_event
        `{H' : State.Trait}
        {E : Set}
        `{H'0
          :
          core.convert.Into.Trait E
            (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
        :
        Self -> E -> M (H := H') unit;
    }.
    
    Global Instance Method_emit_event `{H' : State.Trait} `(Trait)
      : Notation.Dot "emit_event" := {
      Notation.dot
        {E : Set}
        `{H'0
          :
          core.convert.Into.Trait E
            (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
        :=
        emit_event (E := E) (H'0 := H'0);
    }.
  End EmitEvent.
End emit.

Module EmitEvent.
  Class Trait
      (Self : Set)
      {C : Set}
      `{ink.reflect.event.ContractEventBase.Trait C} :
      Type := {
    emit_event
      `{H' : State.Trait}
      {E : Set}
      `{H'0
        :
        core.convert.Into.Trait E
          (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
      :
      Self -> E -> M (H := H') unit;
  }.
  
  Global Instance Method_emit_event `{H' : State.Trait} `(Trait)
    : Notation.Dot "emit_event" := {
    Notation.dot
      {E : Set}
      `{H'0
        :
        core.convert.Into.Trait E
          (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
      :=
      emit_event (E := E) (H'0 := H'0);
  }.
End EmitEvent.

Module topics.
  Module RespectTopicLimit.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End RespectTopicLimit.
  
  Module EventLenTopics.
    Class Trait (Self : Set) : Type := {
      LenTopics : Set;
    }.
    
    Global Instance Method_LenTopics `(Trait)
      : Notation.DoubleColonType Self "LenTopics" := {
      Notation.double_colon_type := LenTopics;
    }.
  End EventLenTopics.
  
  Module EventRespectsTopicLimit.
    Section EventRespectsTopicLimit.
      Context {Event : Set}.
      Context
        `{ink.codegen.event.topics.EventLenTopics.Trait Event}
        `{ink.codegen.event.topics.RespectTopicLimit.Trait
              (ink.codegen.event.topics.EventLenTopics.LenTopics
                (Self := Event))}.
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (Event);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End EventRespectsTopicLimit.
  End EventRespectsTopicLimit.
  Definition EventRespectsTopicLimit
      (Event : Set)
      `{ink.codegen.event.topics.EventLenTopics.Trait Event}
      `{ink.codegen.event.topics.RespectTopicLimit.Trait
            (ink.codegen.event.topics.EventLenTopics.LenTopics (Self := Event))}
      : Set :=
    EventRespectsTopicLimit.t (Event := Event).
  
  Module EventTopics.
    Inductive t : Set := Build.
  End EventTopics.
  Definition EventTopics := @EventTopics.t.
  
  Module
    Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
    Definition Self := ink.codegen.event.topics.EventTopics.
    
    Global Instance I
      : ink.codegen.event.topics.RespectTopicLimit.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
End topics.

Module EventRespectsTopicLimit.
  Section EventRespectsTopicLimit.
    Context {Event : Set}.
    Context
      `{ink.codegen.event.topics.EventLenTopics.Trait Event}
      `{ink.codegen.event.topics.RespectTopicLimit.Trait
            (ink.codegen.event.topics.EventLenTopics.LenTopics
              (Self := Event))}.
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (Event);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End EventRespectsTopicLimit.
End EventRespectsTopicLimit.
Definition EventRespectsTopicLimit
    (Event : Set)
    `{ink.codegen.event.topics.EventLenTopics.Trait Event}
    `{ink.codegen.event.topics.RespectTopicLimit.Trait
          (ink.codegen.event.topics.EventLenTopics.LenTopics (Self := Event))}
    : Set :=
  EventRespectsTopicLimit.t (Event := Event).

Module RespectTopicLimit.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End RespectTopicLimit.

Module EventTopics.
  Inductive t : Set := Build.
End EventTopics.
Definition EventTopics := @EventTopics.t.

Module
  Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
  Definition Self := ink.codegen.event.topics.EventTopics.
  
  Global Instance I : ink.codegen.event.topics.RespectTopicLimit.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.

Module EventLenTopics.
  Class Trait (Self : Set) : Type := {
    LenTopics : Set;
  }.
  
  Global Instance Method_LenTopics `(Trait)
    : Notation.DoubleColonType Self "LenTopics" := {
    Notation.double_colon_type := LenTopics;
  }.
End EventLenTopics.

Module implies_return.
  Module ImpliesReturn.
    Unset Primitive Projections.
    Class Trait (Self : Set) {T : Set} : Type := {
    }.
    Global Set Primitive Projections.
  End ImpliesReturn.
  
  Module Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
    Section Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
      Context {T : Set}.
      Definition Self := T.
      
      Global Instance I
        : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
      }.
    End Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
    Global Hint Resolve I : core.
  End Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
  
  Module
    Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
    Section
      Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
      Context {T E CallType Args : Set}.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
          E
          (ink_env.call.common.Set_ CallType)
          (ink_env.call.common.Set_
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set_ (ink_env.call.common.ReturnType T)).
      
      Global Instance I
        : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
      }.
    End
      Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
    Global Hint Resolve I : core.
  End
    Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
  
  Module
    Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
    Section
      Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
      Context {E CallType Args : Set}.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
          E
          (ink_env.call.common.Set_ CallType)
          (ink_env.call.common.Set_
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set_ unit).
      
      Global Instance I
        : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := unit) := {
      }.
    End
      Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
    Global Hint Resolve I : core.
  End
    Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
End implies_return.

Module ImpliesReturn.
  Unset Primitive Projections.
  Class Trait (Self : Set) {T : Set} : Type := {
  }.
  Global Set Primitive Projections.
End ImpliesReturn.

Module Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
  Section Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
    Context {T : Set}.
    Definition Self := T.
    
    Global Instance I
      : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
    }.
  End Impl_ink_codegen_implies_return_ImpliesReturn_for_T.
  Global Hint Resolve I : core.
End Impl_ink_codegen_implies_return_ImpliesReturn_for_T.

Module
  Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
  Section
    Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
    Context {T E CallType Args : Set}.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
        E
        (ink_env.call.common.Set_ CallType)
        (ink_env.call.common.Set_
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set_ (ink_env.call.common.ReturnType T)).
    
    Global Instance I
      : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
    }.
  End
    Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
  Global Hint Resolve I : core.
End
  Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.

Module
  Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
  Section
    Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
    Context {E CallType Args : Set}.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
        E
        (ink_env.call.common.Set_ CallType)
        (ink_env.call.common.Set_
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set_ unit).
    
    Global Instance I
      : ink.codegen.implies_return.ImpliesReturn.Trait Self (T := unit) := {
    }.
  End
    Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
  Global Hint Resolve I : core.
End
  Impl_ink_codegen_implies_return_ImpliesReturn_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.

Module trait_def.
  Module call_builder.
    Module TraitCallBuilder.
      Class Trait (Self : Set) : Type := {
        Builder : Set;
        call `{H' : State.Trait} : (ref Self) -> M (H := H') (ref Builder);
        call_mut `{H' : State.Trait}
          :
          (mut_ref Self) -> M (H := H') (mut_ref Builder);
      }.
      
      Global Instance Method_Builder `(Trait)
        : Notation.DoubleColonType Self "Builder" := {
        Notation.double_colon_type := Builder;
      }.
      Global Instance Method_call `{H' : State.Trait} `(Trait)
        : Notation.Dot "call" := {
        Notation.dot := call;
      }.
      Global Instance Method_call_mut `{H' : State.Trait} `(Trait)
        : Notation.Dot "call_mut" := {
        Notation.dot := call_mut;
      }.
    End TraitCallBuilder.
    
    Module TraitCallForwarder.
      Class Trait (Self : Set) : Type := {
        Forwarder : Set;
        _
          :
          Sigma
            `(ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait
                  Forwarder),
          unit;
      }.
      
      Global Instance Method_Forwarder `(Trait)
        : Notation.DoubleColonType Self "Forwarder" := {
        Notation.double_colon_type := Forwarder;
      }.
    End TraitCallForwarder.
    
    (* Module TraitCallForwarderFor.
      Class Trait (Self : Set) : Type := {
        Forwarder : Set;
        _
          :
          Sigma
            `(ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait
                  Forwarder),
          unit;
        forward `{H' : State.Trait} : (ref Self) -> M (H := H') (ref Forwarder);
        forward_mut `{H' : State.Trait}
          :
          (mut_ref Self) -> M (H := H') (mut_ref Forwarder);
        build `{H' : State.Trait}
          :
          (ref Self) ->
            M (H := H')
              (ref
                (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                  (Self := Forwarder)));
        build_mut `{H' : State.Trait}
          :
          (mut_ref Self) ->
            M (H := H')
              (mut_ref
                (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                  (Self := Forwarder)));
      }.
      
      Global Instance Method_Forwarder `(Trait)
        : Notation.DoubleColonType Self "Forwarder" := {
        Notation.double_colon_type := Forwarder;
      }.
      Global Instance Method_forward `{H' : State.Trait} `(Trait)
        : Notation.Dot "forward" := {
        Notation.dot := forward;
      }.
      Global Instance Method_forward_mut `{H' : State.Trait} `(Trait)
        : Notation.Dot "forward_mut" := {
        Notation.dot := forward_mut;
      }.
      Global Instance Method_build `{H' : State.Trait} `(Trait)
        : Notation.Dot "build" := {
        Notation.dot := build;
      }.
      Global Instance Method_build_mut `{H' : State.Trait} `(Trait)
        : Notation.Dot "build_mut" := {
        Notation.dot := build_mut;
      }.
    End TraitCallForwarderFor. *)
  End call_builder.
  
  Module trait_message.
    Module TraitMessagePayable.
      Inductive t : Set := Build.
    End TraitMessagePayable.
    Definition TraitMessagePayable := @TraitMessagePayable.t.
    
    Module TraitMessageSelector.
      Inductive t : Set := Build.
    End TraitMessageSelector.
    Definition TraitMessageSelector := @TraitMessageSelector.t.
  End trait_message.
End trait_def.

Module call_builder.
  Module TraitCallBuilder.
    Class Trait (Self : Set) : Type := {
      Builder : Set;
      call `{H' : State.Trait} : (ref Self) -> M (H := H') (ref Builder);
      call_mut `{H' : State.Trait}
        :
        (mut_ref Self) -> M (H := H') (mut_ref Builder);
    }.
    
    Global Instance Method_Builder `(Trait)
      : Notation.DoubleColonType Self "Builder" := {
      Notation.double_colon_type := Builder;
    }.
    Global Instance Method_call `{H' : State.Trait} `(Trait)
      : Notation.Dot "call" := {
      Notation.dot := call;
    }.
    Global Instance Method_call_mut `{H' : State.Trait} `(Trait)
      : Notation.Dot "call_mut" := {
      Notation.dot := call_mut;
    }.
  End TraitCallBuilder.
  
  Module TraitCallForwarder.
    Class Trait (Self : Set) : Type := {
      Forwarder : Set;
      _
        :
        Sigma
          `(ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait
                Forwarder),
        unit;
    }.
    
    Global Instance Method_Forwarder `(Trait)
      : Notation.DoubleColonType Self "Forwarder" := {
      Notation.double_colon_type := Forwarder;
    }.
  End TraitCallForwarder.
  
  (* Module TraitCallForwarderFor.
    Class Trait (Self : Set) : Type := {
      Forwarder : Set;
      _
        :
        Sigma
          `(ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait
                Forwarder),
        unit;
      forward `{H' : State.Trait} : (ref Self) -> M (H := H') (ref Forwarder);
      forward_mut `{H' : State.Trait}
        :
        (mut_ref Self) -> M (H := H') (mut_ref Forwarder);
      build `{H' : State.Trait}
        :
        (ref Self) ->
          M (H := H')
            (ref
              (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                (Self := Forwarder)));
      build_mut `{H' : State.Trait}
        :
        (mut_ref Self) ->
          M (H := H')
            (mut_ref
              (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                (Self := Forwarder)));
    }.
    
    Global Instance Method_Forwarder `(Trait)
      : Notation.DoubleColonType Self "Forwarder" := {
      Notation.double_colon_type := Forwarder;
    }.
    Global Instance Method_forward `{H' : State.Trait} `(Trait)
      : Notation.Dot "forward" := {
      Notation.dot := forward;
    }.
    Global Instance Method_forward_mut `{H' : State.Trait} `(Trait)
      : Notation.Dot "forward_mut" := {
      Notation.dot := forward_mut;
    }.
    Global Instance Method_build `{H' : State.Trait} `(Trait)
      : Notation.Dot "build" := {
      Notation.dot := build;
    }.
    Global Instance Method_build_mut `{H' : State.Trait} `(Trait)
      : Notation.Dot "build_mut" := {
      Notation.dot := build_mut;
    }.
  End TraitCallForwarderFor. *)
End call_builder.

Module TraitCallBuilder.
  Class Trait (Self : Set) : Type := {
    Builder : Set;
    call `{H' : State.Trait} : (ref Self) -> M (H := H') (ref Builder);
    call_mut `{H' : State.Trait}
      :
      (mut_ref Self) -> M (H := H') (mut_ref Builder);
  }.
  
  Global Instance Method_Builder `(Trait)
    : Notation.DoubleColonType Self "Builder" := {
    Notation.double_colon_type := Builder;
  }.
  Global Instance Method_call `{H' : State.Trait} `(Trait)
    : Notation.Dot "call" := {
    Notation.dot := call;
  }.
  Global Instance Method_call_mut `{H' : State.Trait} `(Trait)
    : Notation.Dot "call_mut" := {
    Notation.dot := call_mut;
  }.
End TraitCallBuilder.

Module TraitCallForwarder.
  Class Trait (Self : Set) : Type := {
    Forwarder : Set;
    _
      :
      Sigma
        `(ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder),
      unit;
  }.
  
  Global Instance Method_Forwarder `(Trait)
    : Notation.DoubleColonType Self "Forwarder" := {
    Notation.double_colon_type := Forwarder;
  }.
End TraitCallForwarder.

(* Module TraitCallForwarderFor.
  Class Trait (Self : Set) : Type := {
    Forwarder : Set;
    _
      :
      Sigma
        `(ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder),
      unit;
    forward `{H' : State.Trait} : (ref Self) -> M (H := H') (ref Forwarder);
    forward_mut `{H' : State.Trait}
      :
      (mut_ref Self) -> M (H := H') (mut_ref Forwarder);
    build `{H' : State.Trait}
      :
      (ref Self) ->
        M (H := H')
          (ref
            (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
              (Self := Forwarder)));
    build_mut `{H' : State.Trait}
      :
      (mut_ref Self) ->
        M (H := H')
          (mut_ref
            (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
              (Self := Forwarder)));
  }.
  
  Global Instance Method_Forwarder `(Trait)
    : Notation.DoubleColonType Self "Forwarder" := {
    Notation.double_colon_type := Forwarder;
  }.
  Global Instance Method_forward `{H' : State.Trait} `(Trait)
    : Notation.Dot "forward" := {
    Notation.dot := forward;
  }.
  Global Instance Method_forward_mut `{H' : State.Trait} `(Trait)
    : Notation.Dot "forward_mut" := {
    Notation.dot := forward_mut;
  }.
  Global Instance Method_build `{H' : State.Trait} `(Trait)
    : Notation.Dot "build" := {
    Notation.dot := build;
  }.
  Global Instance Method_build_mut `{H' : State.Trait} `(Trait)
    : Notation.Dot "build_mut" := {
    Notation.dot := build_mut;
  }.
End TraitCallForwarderFor. *)

Module trait_message.
  Module TraitMessagePayable.
    Inductive t : Set := Build.
  End TraitMessagePayable.
  Definition TraitMessagePayable := @TraitMessagePayable.t.
  
  Module TraitMessageSelector.
    Inductive t : Set := Build.
  End TraitMessageSelector.
  Definition TraitMessageSelector := @TraitMessageSelector.t.
End trait_message.

Module TraitMessagePayable.
  Inductive t : Set := Build.
End TraitMessagePayable.
Definition TraitMessagePayable := @TraitMessagePayable.t.

Module TraitMessageSelector.
  Inductive t : Set := Build.
End TraitMessageSelector.
Definition TraitMessageSelector := @TraitMessageSelector.t.

Module utils.
  Module identity_type.
    Parameter consume_type :
        forall `{H' : State.Trait} {T : Set},
        M (H := H') unit.
  End identity_type.
  
  Module same_type.
    Module IsSameType.
      Section IsSameType.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          _marker : core.marker.PhantomData T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get__marker : Notation.Dot "_marker" := {
          Notation.dot '(Build_t x0) := x0;
        }.
        Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
          Notation.double_colon '(Build_t x0) := x0;
        }.
      End IsSameType.
    End IsSameType.
    Definition IsSameType (T : Set) : Set := IsSameType.t (T := T).
  End same_type.
End utils.

Module identity_type.
  Parameter consume_type :
      forall `{H' : State.Trait} {T : Set},
      M (H := H') unit.
End identity_type.

Parameter consume_type : forall `{H' : State.Trait} {T : Set}, M (H := H') unit.

Module same_type.
  Module IsSameType.
    Section IsSameType.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        _marker : core.marker.PhantomData T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get__marker : Notation.Dot "_marker" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End IsSameType.
  End IsSameType.
  Definition IsSameType (T : Set) : Set := IsSameType.t (T := T).
End same_type.

Module IsSameType.
  Section IsSameType.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _marker : core.marker.PhantomData T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get__marker : Notation.Dot "_marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End IsSameType.
End IsSameType.
Definition IsSameType (T : Set) : Set := IsSameType.t (T := T).

Module contract.
  Module ContractName.
    Class Trait (Self : Set) : Type := {
      NAME `{H' : State.Trait} : ref str;
    }.
    
    Global Instance Method_NAME `{H' : State.Trait} `(Trait)
      : Notation.Dot "NAME" := {
      Notation.dot := NAME;
    }.
  End ContractName.
End contract.

Module ContractName.
  Class Trait (Self : Set) : Type := {
    NAME `{H' : State.Trait} : ref str;
  }.
  
  Global Instance Method_NAME `{H' : State.Trait} `(Trait)
    : Notation.Dot "NAME" := {
    Notation.dot := NAME;
  }.
End ContractName.

Module Wrap_dispatch_1.
  Module dispatch.
    Module DispatchableMessageInfo.
      Class Trait (Self : Set) : Type := {
        Input : Set;
        Output : Set;
        Storage : Set;
        CALLABLE `{H' : State.Trait}
          :
          (mut_ref Storage) -> Input -> M (H := H') Output;
        MUTATES `{H' : State.Trait} : bool;
        PAYABLE `{H' : State.Trait} : bool;
        SELECTOR `{H' : State.Trait} : list u8;
        LABEL `{H' : State.Trait} : ref str;
      }.
      
      Global Instance Method_Input `(Trait)
        : Notation.DoubleColonType Self "Input" := {
        Notation.double_colon_type := Input;
      }.
      Global Instance Method_Output `(Trait)
        : Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Storage `(Trait)
        : Notation.DoubleColonType Self "Storage" := {
        Notation.double_colon_type := Storage;
      }.
      Global Instance Method_CALLABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "CALLABLE" := {
        Notation.dot := CALLABLE;
      }.
      Global Instance Method_MUTATES `{H' : State.Trait} `(Trait)
        : Notation.Dot "MUTATES" := {
        Notation.dot := MUTATES;
      }.
      Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "PAYABLE" := {
        Notation.dot := PAYABLE;
      }.
      Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
        : Notation.Dot "SELECTOR" := {
        Notation.dot := SELECTOR;
      }.
      Global Instance Method_LABEL `{H' : State.Trait} `(Trait)
        : Notation.Dot "LABEL" := {
        Notation.dot := LABEL;
      }.
    End DispatchableMessageInfo.
    
    Module DispatchableConstructorInfo.
      Class Trait (Self : Set) : Type := {
        Input : Set;
        Storage : Set;
        Output : Set;
        Error : Set;
        IS_RESULT `{H' : State.Trait} : bool;
        CALLABLE `{H' : State.Trait} : Input -> M (H := H') Output;
        PAYABLE `{H' : State.Trait} : bool;
        SELECTOR `{H' : State.Trait} : list u8;
        LABEL `{H' : State.Trait} : ref str;
      }.
      
      Global Instance Method_Input `(Trait)
        : Notation.DoubleColonType Self "Input" := {
        Notation.double_colon_type := Input;
      }.
      Global Instance Method_Storage `(Trait)
        : Notation.DoubleColonType Self "Storage" := {
        Notation.double_colon_type := Storage;
      }.
      Global Instance Method_Output `(Trait)
        : Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Error `(Trait)
        : Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
      Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
        : Notation.Dot "IS_RESULT" := {
        Notation.dot := IS_RESULT;
      }.
      Global Instance Method_CALLABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "CALLABLE" := {
        Notation.dot := CALLABLE;
      }.
      Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "PAYABLE" := {
        Notation.dot := PAYABLE;
      }.
      Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
        : Notation.Dot "SELECTOR" := {
        Notation.dot := SELECTOR;
      }.
      Global Instance Method_LABEL `{H' : State.Trait} `(Trait)
        : Notation.Dot "LABEL" := {
        Notation.dot := LABEL;
      }.
    End DispatchableConstructorInfo.
    
    Module private.
      Module Sealed.
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End Sealed.
    End private.
    
    Module ConstructorOutput.
      Class Trait
          (Self : Set)
          `{ink.reflect.dispatch.private.Sealed.Trait Self}
          {C : Set} :
          Type := {
        IS_RESULT `{H' : State.Trait} : bool;
        Error : Set;
        as_result `{H' : State.Trait}
          :
          (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error));
      }.
      
      Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
        : Notation.Dot "IS_RESULT" := {
        Notation.dot := IS_RESULT;
      }.
      Global Instance Method_Error `(Trait)
        : Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
      Global Instance Method_as_result `{H' : State.Trait} `(Trait)
        : Notation.Dot "as_result" := {
        Notation.dot := as_result;
      }.
    End ConstructorOutput.
    
    Module ConstructorOutputValue.
      Section ConstructorOutputValue.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          _ : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot 0 := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End ConstructorOutputValue.
    End ConstructorOutputValue.
    Definition ConstructorOutputValue := @ConstructorOutputValue.t.
    
    Module
      Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
      Section
        Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
        Context {T : Set}.
        Definition Self := ink.reflect.dispatch.ConstructorOutputValue T.
        
        Global Instance I : ink.reflect.dispatch.private.Sealed.Trait Self := {
        }.
      End
        Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
      Global Hint Resolve I : core.
    End
      Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
    
    Module
      Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
      Section
        Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
        Context {C : Set}.
        Definition Self := ink.reflect.dispatch.ConstructorOutputValue C.
        
        Definition Error : Set := ref unit.
        
        Parameter as_result :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error)).
        
        Global Instance Method_as_result `{H' : State.Trait} :
          Notation.Dot "as_result" := {
          Notation.dot := as_result;
        }.
        
        Global Instance I
          : ink.reflect.dispatch.ConstructorOutput.Trait Self (C := C) := {
          ink.reflect.dispatch.ConstructorOutput.Error := Error;
          ink.reflect.dispatch.ConstructorOutput.as_result `{H' : State.Trait}
            :=
            as_result;
        }.
      End
        Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
      Global Hint Resolve I : core.
    End
      Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
    
    Module
      Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
      Section
        Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
        Context {C E : Set}.
        Definition Self :=
          ink.reflect.dispatch.ConstructorOutputValue (core.result.Result C E).
        
        Definition IS_RESULT `{H' : State.Trait} := Pure true.
        
        Global Instance AssociatedFunction_IS_RESULT `{H' : State.Trait} :
          Notation.DoubleColon Self "IS_RESULT" := {
          Notation.double_colon := IS_RESULT;
        }.
        
        Definition Error : Set := E.
        
        Parameter as_result :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error)).
        
        Global Instance Method_as_result `{H' : State.Trait} :
          Notation.Dot "as_result" := {
          Notation.dot := as_result;
        }.
        
        Global Instance I
          : ink.reflect.dispatch.ConstructorOutput.Trait Self (C := C) := {
          ink.reflect.dispatch.ConstructorOutput.Error := Error;
          ink.reflect.dispatch.ConstructorOutput.as_result `{H' : State.Trait}
            :=
            as_result;
        }.
      End
        Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
      Global Hint Resolve I : core.
    End
      Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
    
    Module DispatchError.
      Inductive t : Set :=
      | InvalidSelector
      | UnknownSelector
      | InvalidParameters
      | CouldNotReadInput
      | PaidUnpayableMessage.
    End DispatchError.
    Definition DispatchError := DispatchError.t.
    
    Module ExecuteDispatchable.
      Class Trait (Self : Set) : Type := {
        execute_dispatchable `{H' : State.Trait}
          :
          Self ->
            M (H := H')
              (core.result.Result unit ink.reflect.dispatch.DispatchError);
      }.
      
      Global Instance Method_execute_dispatchable `{H' : State.Trait} `(Trait)
        : Notation.Dot "execute_dispatchable" := {
        Notation.dot := execute_dispatchable;
      }.
    End ExecuteDispatchable.
    
    Module ContractMessageDecoder.
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
        _
          :
          Sigma
            `(parity_scale_codec.codec.Decode.Trait Type_)
            `(ink.reflect.dispatch.ExecuteDispatchable.Trait Type_),
          unit;
      }.
      
      Global Instance Method_Type_ `(Trait)
        : Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractMessageDecoder.
    
    Module DecodeDispatch.
      Class Trait (Self : Set) `{parity_scale_codec.codec.Decode.Trait Self} :
          Type := {
        decode_dispatch
          `{H' : State.Trait}
          {I : Set}
          `{H'0 : parity_scale_codec.codec.Input.Trait I}
          :
          (mut_ref I) ->
            M (H := H')
              (core.result.Result Self ink.reflect.dispatch.DispatchError);
      }.
      
      Global Instance Method_decode_dispatch `{H' : State.Trait} `(Trait)
        : Notation.Dot "decode_dispatch" := {
        Notation.dot {I : Set} `{H'0 : parity_scale_codec.codec.Input.Trait I}
          :=
          decode_dispatch (I := I) (H'0 := H'0);
      }.
    End DecodeDispatch.
    
    Module ContractConstructorDecoder.
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
        _
          :
          Sigma
            `(ink.reflect.dispatch.DecodeDispatch.Trait Type_)
            `(ink.reflect.dispatch.ExecuteDispatchable.Trait Type_),
          unit;
      }.
      
      Global Instance Method_Type_ `(Trait)
        : Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractConstructorDecoder.
    
    Module Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Global Instance I : core.marker.Copy.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') ink.reflect.dispatch.DispatchError.
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter eq :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref ink.reflect.dispatch.DispatchError) ->
            M (H := H') bool.
      
      Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I
        : core.cmp.PartialEq.Trait Self
            (Rhs := core.cmp.PartialEq.Default.Rhs Self)
          := {
        core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Global Instance I : core.marker.StructuralEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter assert_receiver_is_total_eq :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') unit.
      
      Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
      Definition Self := ink.reflect.dispatch.DispatchError.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
    
    Module Impl_core_convert_From_for_parity_scale_codec_error_Error.
      Definition Self := parity_scale_codec.error.Error.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink.reflect.dispatch.DispatchError -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink.reflect.dispatch.DispatchError)
          := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End Impl_core_convert_From_for_parity_scale_codec_error_Error.
  End dispatch.
End Wrap_dispatch_1.
Import Wrap_dispatch_1.

Module DispatchableMessageInfo.
  Class Trait (Self : Set) : Type := {
    Input : Set;
    Output : Set;
    Storage : Set;
    CALLABLE `{H' : State.Trait}
      :
      (mut_ref Storage) -> Input -> M (H := H') Output;
    MUTATES `{H' : State.Trait} : bool;
    PAYABLE `{H' : State.Trait} : bool;
    SELECTOR `{H' : State.Trait} : list u8;
    LABEL `{H' : State.Trait} : ref str;
  }.
  
  Global Instance Method_Input `(Trait)
    : Notation.DoubleColonType Self "Input" := {
    Notation.double_colon_type := Input;
  }.
  Global Instance Method_Output `(Trait)
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_Storage `(Trait)
    : Notation.DoubleColonType Self "Storage" := {
    Notation.double_colon_type := Storage;
  }.
  Global Instance Method_CALLABLE `{H' : State.Trait} `(Trait)
    : Notation.Dot "CALLABLE" := {
    Notation.dot := CALLABLE;
  }.
  Global Instance Method_MUTATES `{H' : State.Trait} `(Trait)
    : Notation.Dot "MUTATES" := {
    Notation.dot := MUTATES;
  }.
  Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
    : Notation.Dot "PAYABLE" := {
    Notation.dot := PAYABLE;
  }.
  Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
    : Notation.Dot "SELECTOR" := {
    Notation.dot := SELECTOR;
  }.
  Global Instance Method_LABEL `{H' : State.Trait} `(Trait)
    : Notation.Dot "LABEL" := {
    Notation.dot := LABEL;
  }.
End DispatchableMessageInfo.

Module DispatchableConstructorInfo.
  Class Trait (Self : Set) : Type := {
    Input : Set;
    Storage : Set;
    Output : Set;
    Error : Set;
    IS_RESULT `{H' : State.Trait} : bool;
    CALLABLE `{H' : State.Trait} : Input -> M (H := H') Output;
    PAYABLE `{H' : State.Trait} : bool;
    SELECTOR `{H' : State.Trait} : list u8;
    LABEL `{H' : State.Trait} : ref str;
  }.
  
  Global Instance Method_Input `(Trait)
    : Notation.DoubleColonType Self "Input" := {
    Notation.double_colon_type := Input;
  }.
  Global Instance Method_Storage `(Trait)
    : Notation.DoubleColonType Self "Storage" := {
    Notation.double_colon_type := Storage;
  }.
  Global Instance Method_Output `(Trait)
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_Error `(Trait)
    : Notation.DoubleColonType Self "Error" := {
    Notation.double_colon_type := Error;
  }.
  Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
    : Notation.Dot "IS_RESULT" := {
    Notation.dot := IS_RESULT;
  }.
  Global Instance Method_CALLABLE `{H' : State.Trait} `(Trait)
    : Notation.Dot "CALLABLE" := {
    Notation.dot := CALLABLE;
  }.
  Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
    : Notation.Dot "PAYABLE" := {
    Notation.dot := PAYABLE;
  }.
  Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
    : Notation.Dot "SELECTOR" := {
    Notation.dot := SELECTOR;
  }.
  Global Instance Method_LABEL `{H' : State.Trait} `(Trait)
    : Notation.Dot "LABEL" := {
    Notation.dot := LABEL;
  }.
End DispatchableConstructorInfo.

Module private.
  Module Sealed.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End Sealed.
End private.

Module Sealed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End Sealed.

Module ConstructorOutput.
  Class Trait
      (Self : Set)
      `{ink.reflect.dispatch.private.Sealed.Trait Self}
      {C : Set} :
      Type := {
    IS_RESULT `{H' : State.Trait} : bool;
    Error : Set;
    as_result `{H' : State.Trait}
      :
      (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error));
  }.
  
  Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
    : Notation.Dot "IS_RESULT" := {
    Notation.dot := IS_RESULT;
  }.
  Global Instance Method_Error `(Trait)
    : Notation.DoubleColonType Self "Error" := {
    Notation.double_colon_type := Error;
  }.
  Global Instance Method_as_result `{H' : State.Trait} `(Trait)
    : Notation.Dot "as_result" := {
    Notation.dot := as_result;
  }.
End ConstructorOutput.

Module ConstructorOutputValue.
  Section ConstructorOutputValue.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _ : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ConstructorOutputValue.
End ConstructorOutputValue.
Definition ConstructorOutputValue := @ConstructorOutputValue.t.

Module
  Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
  Section
    Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
    Context {T : Set}.
    Definition Self := ink.reflect.dispatch.ConstructorOutputValue T.
    
    Global Instance I : ink.reflect.dispatch.private.Sealed.Trait Self := {
    }.
  End
    Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
  Global Hint Resolve I : core.
End
  Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.

Module
  Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
  Section
    Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
    Context {C : Set}.
    Definition Self := ink.reflect.dispatch.ConstructorOutputValue C.
    
    Definition Error : Set := ref unit.
    
    Parameter as_result :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error)).
    
    Global Instance Method_as_result `{H' : State.Trait} :
      Notation.Dot "as_result" := {
      Notation.dot := as_result;
    }.
    
    Global Instance I
      : ink.reflect.dispatch.ConstructorOutput.Trait Self (C := C) := {
      ink.reflect.dispatch.ConstructorOutput.Error := Error;
      ink.reflect.dispatch.ConstructorOutput.as_result `{H' : State.Trait}
        :=
        as_result;
    }.
  End
    Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.
  Global Hint Resolve I : core.
End
  Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_C.

Module
  Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
  Section
    Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
    Context {C E : Set}.
    Definition Self :=
      ink.reflect.dispatch.ConstructorOutputValue (core.result.Result C E).
    
    Definition IS_RESULT `{H' : State.Trait} := Pure true.
    
    Global Instance AssociatedFunction_IS_RESULT `{H' : State.Trait} :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition Error : Set := E.
    
    Parameter as_result :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') (core.result.Result (ref C) (ref Error)).
    
    Global Instance Method_as_result `{H' : State.Trait} :
      Notation.Dot "as_result" := {
      Notation.dot := as_result;
    }.
    
    Global Instance I
      : ink.reflect.dispatch.ConstructorOutput.Trait Self (C := C) := {
      ink.reflect.dispatch.ConstructorOutput.Error := Error;
      ink.reflect.dispatch.ConstructorOutput.as_result `{H' : State.Trait}
        :=
        as_result;
    }.
  End
    Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
  Global Hint Resolve I : core.
End
  Impl_ink_reflect_dispatch_ConstructorOutput_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.

Module ContractMessageDecoder.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
    _
      :
      Sigma
        `(parity_scale_codec.codec.Decode.Trait Type_)
        `(ink.reflect.dispatch.ExecuteDispatchable.Trait Type_),
      unit;
  }.
  
  Global Instance Method_Type_ `(Trait)
    : Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractMessageDecoder.

Module ContractConstructorDecoder.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
    _
      :
      Sigma
        `(ink.reflect.dispatch.DecodeDispatch.Trait Type_)
        `(ink.reflect.dispatch.ExecuteDispatchable.Trait Type_),
      unit;
  }.
  
  Global Instance Method_Type_ `(Trait)
    : Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractConstructorDecoder.

Module ExecuteDispatchable.
  Class Trait (Self : Set) : Type := {
    execute_dispatchable `{H' : State.Trait}
      :
      Self ->
        M (H := H')
          (core.result.Result unit ink.reflect.dispatch.DispatchError);
  }.
  
  Global Instance Method_execute_dispatchable `{H' : State.Trait} `(Trait)
    : Notation.Dot "execute_dispatchable" := {
    Notation.dot := execute_dispatchable;
  }.
End ExecuteDispatchable.

Module DispatchError.
  Inductive t : Set :=
  | InvalidSelector
  | UnknownSelector
  | InvalidParameters
  | CouldNotReadInput
  | PaidUnpayableMessage.
End DispatchError.
Definition DispatchError := DispatchError.t.

Module Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
  Definition Self := ink.reflect.dispatch.DispatchError.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.

Module Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
  Definition Self := ink.reflect.dispatch.DispatchError.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.

Module Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
  Definition Self := ink.reflect.dispatch.DispatchError.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink.reflect.dispatch.DispatchError.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
  Definition Self := ink.reflect.dispatch.DispatchError.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.

Module Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
  Definition Self := ink.reflect.dispatch.DispatchError.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) ->
        (ref ink.reflect.dispatch.DispatchError) ->
        M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.

Module Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
  Definition Self := ink.reflect.dispatch.DispatchError.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.

Module Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
  Definition Self := ink.reflect.dispatch.DispatchError.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.

Module Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
  Definition Self := ink.reflect.dispatch.DispatchError.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.

Module Impl_core_convert_From_for_parity_scale_codec_error_Error.
  Definition Self := parity_scale_codec.error.Error.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink.reflect.dispatch.DispatchError -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := ink.reflect.dispatch.DispatchError)
      := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_parity_scale_codec_error_Error.

Module DecodeDispatch.
  Class Trait (Self : Set) `{parity_scale_codec.codec.Decode.Trait Self} :
      Type := {
    decode_dispatch
      `{H' : State.Trait}
      {I : Set}
      `{H'0 : parity_scale_codec.codec.Input.Trait I}
      :
      (mut_ref I) ->
        M (H := H')
          (core.result.Result Self ink.reflect.dispatch.DispatchError);
  }.
  
  Global Instance Method_decode_dispatch `{H' : State.Trait} `(Trait)
    : Notation.Dot "decode_dispatch" := {
    Notation.dot {I : Set} `{H'0 : parity_scale_codec.codec.Input.Trait I}
      :=
      decode_dispatch (I := I) (H'0 := H'0);
  }.
End DecodeDispatch.

Module Wrap_event_1.
  Module event.
    Module ContractEventBase.
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
      }.
      
      Global Instance Method_Type_ `(Trait)
        : Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractEventBase.
  End event.
End Wrap_event_1.
Import Wrap_event_1.

Module ContractEventBase.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
  }.
  
  Global Instance Method_Type_ `(Trait)
    : Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractEventBase.

Module Wrap_trait_def_1.
  Module trait_def.
    Module info.
      Module TraitMessageInfo.
        Class Trait (Self : Set) : Type := {
          PAYABLE `{H' : State.Trait} : bool;
          SELECTOR `{H' : State.Trait} : list u8;
        }.
        
        Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
          : Notation.Dot "PAYABLE" := {
          Notation.dot := PAYABLE;
        }.
        Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
          : Notation.Dot "SELECTOR" := {
          Notation.dot := SELECTOR;
        }.
      End TraitMessageInfo.
      
      Module TraitInfo.
        Class Trait (Self : Set) : Type := {
          ID `{H' : State.Trait} : u32;
          PATH `{H' : State.Trait} : ref str;
          NAME `{H' : State.Trait} : ref str;
        }.
        
        Global Instance Method_ID `{H' : State.Trait} `(Trait)
          : Notation.Dot "ID" := {
          Notation.dot := ID;
        }.
        Global Instance Method_PATH `{H' : State.Trait} `(Trait)
          : Notation.Dot "PATH" := {
          Notation.dot := PATH;
        }.
        Global Instance Method_NAME `{H' : State.Trait} `(Trait)
          : Notation.Dot "NAME" := {
          Notation.dot := NAME;
        }.
      End TraitInfo.
    End info.
    
    Module registry.
      Module TraitDefinitionRegistry.
        Section TraitDefinitionRegistry.
          Context {E : Set}.
          Unset Primitive Projections.
          Record t : Set := {
            marker : core.marker.PhantomData (E);
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_marker : Notation.Dot "marker" := {
            Notation.dot '(Build_t x0) := x0;
          }.
          Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
            Notation.double_colon '(Build_t x0) := x0;
          }.
        End TraitDefinitionRegistry.
      End TraitDefinitionRegistry.
      Definition TraitDefinitionRegistry (E : Set) : Set :=
        TraitDefinitionRegistry.t (E := E).
      
      Module
        Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
        Section
          Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
          Context {E : Set}.
          Definition Self :=
            ink.reflect.trait_def.registry.TraitDefinitionRegistry E.
          
          Definition Env : Set := E.
          
          Global Instance I : ink_env.contract.ContractEnv.Trait Self := {
            ink_env.contract.ContractEnv.Env := Env;
          }.
        End
          Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
        Global Hint Resolve I : core.
      End
        Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    End registry.
  End trait_def.
End Wrap_trait_def_1.
Import Wrap_trait_def_1.

Module Wrap_info_1.
  Module info.
    Module TraitMessageInfo.
      Class Trait (Self : Set) : Type := {
        PAYABLE `{H' : State.Trait} : bool;
        SELECTOR `{H' : State.Trait} : list u8;
      }.
      
      Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
        : Notation.Dot "PAYABLE" := {
        Notation.dot := PAYABLE;
      }.
      Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
        : Notation.Dot "SELECTOR" := {
        Notation.dot := SELECTOR;
      }.
    End TraitMessageInfo.
    
    Module TraitInfo.
      Class Trait (Self : Set) : Type := {
        ID `{H' : State.Trait} : u32;
        PATH `{H' : State.Trait} : ref str;
        NAME `{H' : State.Trait} : ref str;
      }.
      
      Global Instance Method_ID `{H' : State.Trait} `(Trait)
        : Notation.Dot "ID" := {
        Notation.dot := ID;
      }.
      Global Instance Method_PATH `{H' : State.Trait} `(Trait)
        : Notation.Dot "PATH" := {
        Notation.dot := PATH;
      }.
      Global Instance Method_NAME `{H' : State.Trait} `(Trait)
        : Notation.Dot "NAME" := {
        Notation.dot := NAME;
      }.
    End TraitInfo.
  End info.
End Wrap_info_1.
Import Wrap_info_1.

Module TraitMessageInfo.
  Class Trait (Self : Set) : Type := {
    PAYABLE `{H' : State.Trait} : bool;
    SELECTOR `{H' : State.Trait} : list u8;
  }.
  
  Global Instance Method_PAYABLE `{H' : State.Trait} `(Trait)
    : Notation.Dot "PAYABLE" := {
    Notation.dot := PAYABLE;
  }.
  Global Instance Method_SELECTOR `{H' : State.Trait} `(Trait)
    : Notation.Dot "SELECTOR" := {
    Notation.dot := SELECTOR;
  }.
End TraitMessageInfo.

Module TraitInfo.
  Class Trait (Self : Set) : Type := {
    ID `{H' : State.Trait} : u32;
    PATH `{H' : State.Trait} : ref str;
    NAME `{H' : State.Trait} : ref str;
  }.
  
  Global Instance Method_ID `{H' : State.Trait} `(Trait)
    : Notation.Dot "ID" := {
    Notation.dot := ID;
  }.
  Global Instance Method_PATH `{H' : State.Trait} `(Trait)
    : Notation.Dot "PATH" := {
    Notation.dot := PATH;
  }.
  Global Instance Method_NAME `{H' : State.Trait} `(Trait)
    : Notation.Dot "NAME" := {
    Notation.dot := NAME;
  }.
End TraitInfo.

Module registry.
  Module TraitDefinitionRegistry.
    Section TraitDefinitionRegistry.
      Context {E : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End TraitDefinitionRegistry.
  End TraitDefinitionRegistry.
  Definition TraitDefinitionRegistry (E : Set) : Set :=
    TraitDefinitionRegistry.t (E := E).
  
  Module
    Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    Section
      Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
      Context {E : Set}.
      Definition Self :=
        ink.reflect.trait_def.registry.TraitDefinitionRegistry E.
      
      Definition Env : Set := E.
      
      Global Instance I : ink_env.contract.ContractEnv.Trait Self := {
        ink_env.contract.ContractEnv.Env := Env;
      }.
    End
      Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
End registry.

Module TraitDefinitionRegistry.
  Section TraitDefinitionRegistry.
    Context {E : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End TraitDefinitionRegistry.
End TraitDefinitionRegistry.
Definition TraitDefinitionRegistry (E : Set) : Set :=
  TraitDefinitionRegistry.t (E := E).

Module
  Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
  Section
    Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    Context {E : Set}.
    Definition Self := ink.reflect.trait_def.registry.TraitDefinitionRegistry E.
    
    Definition Env : Set := E.
    
    Global Instance I : ink_env.contract.ContractEnv.Trait Self := {
      ink_env.contract.ContractEnv.Env := Env;
    }.
  End
    Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
  Global Hint Resolve I : core.
End
  Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.

Module chain_extension.
  Module ChainExtensionInstance.
    Class Trait (Self : Set) : Type := {
      Instance : Set;
      instantiate `{H' : State.Trait} : M (H := H') Instance;
    }.
    
    Global Instance Method_Instance `(Trait)
      : Notation.DoubleColonType Self "Instance" := {
      Notation.double_colon_type := Instance;
    }.
    Global Instance Method_instantiate `{H' : State.Trait} `(Trait)
      : Notation.Dot "instantiate" := {
      Notation.dot := instantiate;
    }.
  End ChainExtensionInstance.
  
  Module ChainExtension.
    Class Trait (Self : Set) : Type := {
      ErrorCode : Set;
      _ : Sigma `(ink_env.chain_extension.FromStatusCode.Trait ErrorCode), unit;
    }.
    
    Global Instance Method_ErrorCode `(Trait)
      : Notation.DoubleColonType Self "ErrorCode" := {
      Notation.double_colon_type := ErrorCode;
    }.
  End ChainExtension.
  
  Module private.
    Module IsResultSealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End IsResultSealed.
    
    Module OutputSealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End OutputSealed.
  End private.
  
  Module IsResultType.
    Class Trait
        (Self : Set)
        `{ink.chain_extension.private.IsResultSealed.Trait Self} :
        Type := {
      Ok : Set;
      Err : Set;
    }.
    
    Global Instance Method_Ok `(Trait) : Notation.DoubleColonType Self "Ok" := {
      Notation.double_colon_type := Ok;
    }.
    Global Instance Method_Err `(Trait)
      : Notation.DoubleColonType Self "Err" := {
      Notation.double_colon_type := Err;
    }.
  End IsResultType.
  
  Module
    Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
    Section
      Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
      Context {T E : Set}.
      Definition Self := core.result.Result T E.
      
      Global Instance I
        : ink.chain_extension.private.IsResultSealed.Trait Self := {
      }.
    End
      Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
    Global Hint Resolve I : core.
  End
    Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
  
  Module Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
    Section Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
      Context {T E : Set}.
      Definition Self := core.result.Result T E.
      
      Definition Ok : Set := T.
      
      Definition Err : Set := E.
      
      Global Instance I : ink.chain_extension.IsResultType.Trait Self := {
        ink.chain_extension.IsResultType.Ok := Ok;
        ink.chain_extension.IsResultType.Err := Err;
      }.
    End Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
    Global Hint Resolve I : core.
  End Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
  
  Module Output.
    Class Trait
        (Self : Set)
        `{ink.chain_extension.private.OutputSealed.Trait Self}
        {T E : Set} :
        Type := {
      ReturnType : Set;
    }.
    
    Global Instance Method_ReturnType `(Trait)
      : Notation.DoubleColonType Self "ReturnType" := {
      Notation.double_colon_type := ReturnType;
    }.
  End Output.
  
  Module ValueReturned.
    Inductive t : Set := Build.
  End ValueReturned.
  Definition ValueReturned := @ValueReturned.t.
  
  Module
    Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
    Definition Self := ink.chain_extension.ValueReturned.
    
    Global Instance I : ink.chain_extension.private.OutputSealed.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
  
  Module Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
    Section
      Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
      Context {T E : Set}.
      Definition Self := ink.chain_extension.ValueReturned.
      
      Definition ReturnType : Set := T.
      
      Global Instance I
        : ink.chain_extension.Output.Trait Self (T := T) (E := E) := {
        ink.chain_extension.Output.ReturnType := ReturnType;
      }.
    End Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
    Global Hint Resolve I : core.
  End Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
  
  Module Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
    Section
      Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
      Context {T E : Set}.
      Definition Self := ink.chain_extension.ValueReturned.
      
      Definition ReturnType : Set := core.result.Result T E.
      
      Global Instance I
        : ink.chain_extension.Output.Trait Self (T := T) (E := E) := {
        ink.chain_extension.Output.ReturnType := ReturnType;
      }.
    End Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
    Global Hint Resolve I : core.
  End Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
End chain_extension.

Module ChainExtensionInstance.
  Class Trait (Self : Set) : Type := {
    Instance : Set;
    instantiate `{H' : State.Trait} : M (H := H') Instance;
  }.
  
  Global Instance Method_Instance `(Trait)
    : Notation.DoubleColonType Self "Instance" := {
    Notation.double_colon_type := Instance;
  }.
  Global Instance Method_instantiate `{H' : State.Trait} `(Trait)
    : Notation.Dot "instantiate" := {
    Notation.dot := instantiate;
  }.
End ChainExtensionInstance.

Module ChainExtension.
  Class Trait (Self : Set) : Type := {
    ErrorCode : Set;
    _ : Sigma `(ink_env.chain_extension.FromStatusCode.Trait ErrorCode), unit;
  }.
  
  Global Instance Method_ErrorCode `(Trait)
    : Notation.DoubleColonType Self "ErrorCode" := {
    Notation.double_colon_type := ErrorCode;
  }.
End ChainExtension.

Module IsResultType.
  Class Trait
      (Self : Set)
      `{ink.chain_extension.private.IsResultSealed.Trait Self} :
      Type := {
    Ok : Set;
    Err : Set;
  }.
  
  Global Instance Method_Ok `(Trait) : Notation.DoubleColonType Self "Ok" := {
    Notation.double_colon_type := Ok;
  }.
  Global Instance Method_Err `(Trait) : Notation.DoubleColonType Self "Err" := {
    Notation.double_colon_type := Err;
  }.
End IsResultType.

Module
  Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
  Section
    Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
    Context {T E : Set}.
    Definition Self := core.result.Result T E.
    
    Global Instance I
      : ink.chain_extension.private.IsResultSealed.Trait Self := {
    }.
  End
    Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
  Global Hint Resolve I : core.
End Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.

Module Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
  Section Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
    Context {T E : Set}.
    Definition Self := core.result.Result T E.
    
    Definition Ok : Set := T.
    
    Definition Err : Set := E.
    
    Global Instance I : ink.chain_extension.IsResultType.Trait Self := {
      ink.chain_extension.IsResultType.Ok := Ok;
      ink.chain_extension.IsResultType.Err := Err;
    }.
  End Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
  Global Hint Resolve I : core.
End Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.

Module Output.
  Class Trait
      (Self : Set)
      `{ink.chain_extension.private.OutputSealed.Trait Self}
      {T E : Set} :
      Type := {
    ReturnType : Set;
  }.
  
  Global Instance Method_ReturnType `(Trait)
    : Notation.DoubleColonType Self "ReturnType" := {
    Notation.double_colon_type := ReturnType;
  }.
End Output.

Module ValueReturned.
  Inductive t : Set := Build.
End ValueReturned.
Definition ValueReturned := @ValueReturned.t.

Module
  Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
  Definition Self := ink.chain_extension.ValueReturned.
  
  Global Instance I : ink.chain_extension.private.OutputSealed.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.

Module Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
  Section Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
    Context {T E : Set}.
    Definition Self := ink.chain_extension.ValueReturned.
    
    Definition ReturnType : Set := T.
    
    Global Instance I
      : ink.chain_extension.Output.Trait Self (T := T) (E := E) := {
      ink.chain_extension.Output.ReturnType := ReturnType;
    }.
  End Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
  Global Hint Resolve I : core.
End Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.

Module Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
  Section Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
    Context {T E : Set}.
    Definition Self := ink.chain_extension.ValueReturned.
    
    Definition ReturnType : Set := core.result.Result T E.
    
    Global Instance I
      : ink.chain_extension.Output.Trait Self (T := T) (E := E) := {
      ink.chain_extension.Output.ReturnType := ReturnType;
    }.
  End Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.
  Global Hint Resolve I : core.
End Impl_ink_chain_extension_Output_for_ink_chain_extension_ValueReturned.

Module Wrap_private_1.
  Module private.
    Module IsResultSealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End IsResultSealed.
    
    Module OutputSealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End OutputSealed.
  End private.
End Wrap_private_1.
Import Wrap_private_1.

Module IsResultSealed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End IsResultSealed.

Module OutputSealed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End OutputSealed.

Module contract_ref.
  Module ToAccountId.
    Class Trait (Self : Set) {T : Set} `{ink_env.types.Environment.Trait T} :
        Type := {
      to_account_id `{H' : State.Trait}
        :
        (ref Self) ->
          M (H := H') (ink_env.types.Environment.AccountId (Self := T));
    }.
    
    Global Instance Method_to_account_id `{H' : State.Trait} `(Trait)
      : Notation.Dot "to_account_id" := {
      Notation.dot := to_account_id;
    }.
  End ToAccountId.
End contract_ref.

Module ToAccountId.
  Class Trait (Self : Set) {T : Set} `{ink_env.types.Environment.Trait T} :
      Type := {
    to_account_id `{H' : State.Trait}
      :
      (ref Self) ->
        M (H := H') (ink_env.types.Environment.AccountId (Self := T));
  }.
  
  Global Instance Method_to_account_id `{H' : State.Trait} `(Trait)
    : Notation.Dot "to_account_id" := {
    Notation.dot := to_account_id;
  }.
End ToAccountId.

Module env_access.
  Module EnvAccess.
    Section EnvAccess.
      Context {E : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (ref E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End EnvAccess.
  End EnvAccess.
  Definition EnvAccess (E : Set) : Set := EnvAccess.t (E := E).
  
  Module Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
    Section Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
      Context {E : Set}.
      Definition Self := ink.env_access.EnvAccess E.
      
      Global Instance I : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
  
  Module Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
    Section Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
      Context {E : Set}.
      Definition Self := ink.env_access.EnvAccess E.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') (ink.env_access.EnvAccess E).
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
  
  Module Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
    Section Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
      Context {E : Set}.
      Definition Self := ink.env_access.EnvAccess E.
      
      Parameter default : forall `{H' : State.Trait}, M (H := H') Self.
      
      Global Instance AssociatedFunction_default `{H' : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H' : State.Trait} := default;
      }.
    End Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
    Global Hint Resolve I : core.
  End Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
  
  Module Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
    Section Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
      Context {E : Set}.
      Definition Self := ink.env_access.EnvAccess E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
End env_access.

Module EnvAccess.
  Section EnvAccess.
    Context {E : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (ref E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End EnvAccess.
End EnvAccess.
Definition EnvAccess (E : Set) : Set := EnvAccess.t (E := E).

Module Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
  Section Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
    Context {E : Set}.
    Definition Self := ink.env_access.EnvAccess E.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.

Module Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
  Section Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
    Context {E : Set}.
    Definition Self := ink.env_access.EnvAccess E.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') (ink.env_access.EnvAccess E).
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.

Module Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
  Section Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
    Context {E : Set}.
    Definition Self := ink.env_access.EnvAccess E.
    
    Parameter default : forall `{H' : State.Trait}, M (H := H') Self.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
  Global Hint Resolve I : core.
End Impl_core_default_Default_for_ink_env_access_EnvAccess_E.

Module Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
  Section Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
    Context {E : Set}.
    Definition Self := ink.env_access.EnvAccess E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
