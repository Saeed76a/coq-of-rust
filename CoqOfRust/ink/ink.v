(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
Require CoqOfRust.ink.ink_env.

Module result_info.
  (* Module IsResultType.
    (* Section IsResultType.
      Context `{State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(marker) : M _;
      }.
    End IsResultType. *)
  End IsResultType. *)
  
  
  Module IsResultTypeFallback.
    Section IsResultTypeFallback.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        VALUE : bool;
      }.
      
    End IsResultTypeFallback.
  End IsResultTypeFallback.
  
  Module IsResultErr.
    Section IsResultErr.
      Context `{State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : ref T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
      }.
    End IsResultErr.
  End IsResultErr.
  Definition IsResultErr `{State.Trait} (T : Set) : Set :=
    M.val (IsResultErr.t (T := T)).
  
  Module IsResultErrFallback.
    Section IsResultErrFallback.
      Context `{State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End IsResultErrFallback.
  End IsResultErrFallback.
End result_info.

(* Module IsResultType.
  (* Section IsResultType.
    Context `{State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(marker) : M _;
    }.
  End IsResultType. *)
End IsResultType. *)
Definition IsResultType (T : Set) `{State.Trait} : Set :=
  M.val (IsResultType.t (T := T)).

Module IsResultTypeFallback.
  Section IsResultTypeFallback.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      VALUE : bool;
    }.
    
  End IsResultTypeFallback.
End IsResultTypeFallback.

Module IsResultErr.
  Section IsResultErr.
    Context `{State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : ref T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End IsResultErr.
End IsResultErr.
Definition IsResultErr `{State.Trait} (T : Set) : Set :=
  M.val (IsResultErr.t (T := T)).

Module IsResultErrFallback.
  Section IsResultErrFallback.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End IsResultErrFallback.
End IsResultErrFallback.

Module reflect.
  Module contract.
    Module ContractName.
      Section ContractName.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          NAME : ref str;
        }.
        
      End ContractName.
    End ContractName.
  End contract.
  
  Module dispatch.
    Module DispatchableMessageInfo.
      Section DispatchableMessageInfo.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Input : Set;
          Output : Set;
          Storage : Set;
          CALLABLE : (mut_ref Storage) -> Input -> M Output;
          MUTATES : bool;
          PAYABLE : bool;
          SELECTOR : array u8;
          LABEL : ref str;
        }.
        
        Global Instance Method_Input `(Trait)
          : Notation.DoubleColonType Self "Input" := {
          Notation.double_colon_type := Input;
        }.
        Global Instance Method_Output `(Trait)
          : Notation.DoubleColonType Self "Output" := {
          Notation.double_colon_type := Output;
        }.
        Global Instance Method_Storage `(Trait)
          : Notation.DoubleColonType Self "Storage" := {
          Notation.double_colon_type := Storage;
        }.
      End DispatchableMessageInfo.
    End DispatchableMessageInfo.
    
    Module DispatchableConstructorInfo.
      Section DispatchableConstructorInfo.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Input : Set;
          Storage : Set;
          Output : Set;
          Error : Set;
          IS_RESULT : bool;
          CALLABLE : Input -> M Output;
          PAYABLE : bool;
          SELECTOR : array u8;
          LABEL : ref str;
        }.
        
        Global Instance Method_Input `(Trait)
          : Notation.DoubleColonType Self "Input" := {
          Notation.double_colon_type := Input;
        }.
        Global Instance Method_Storage `(Trait)
          : Notation.DoubleColonType Self "Storage" := {
          Notation.double_colon_type := Storage;
        }.
        Global Instance Method_Output `(Trait)
          : Notation.DoubleColonType Self "Output" := {
          Notation.double_colon_type := Output;
        }.
        Global Instance Method_Error `(Trait)
          : Notation.DoubleColonType Self "Error" := {
          Notation.double_colon_type := Error;
        }.
      End DispatchableConstructorInfo.
    End DispatchableConstructorInfo.
    
    Module private.
      Module Sealed.
        Section Sealed.
          Context `{State.Trait}.
          
          Unset Primitive Projections.
          Class Trait (Self : Set) : Type := {
          }.
          Global Set Primitive Projections.
        End Sealed.
      End Sealed.
    End private.
    
    Module ConstructorOutput.
      Section ConstructorOutput.
        Context `{State.Trait}.
        
        Class Trait
            (Self : Set)
            {C : Set}
            {ℋ_0 : ink.reflect.dispatch.private.Sealed.Trait Self} :
            Type := {
          IS_RESULT : bool;
          Error : Set;
          as_result : (ref Self) -> M (core.result.Result (ref C) (ref Error));
        }.
        
        Global Instance Method_Error `(Trait)
          : Notation.DoubleColonType Self "Error" := {
          Notation.double_colon_type := Error;
        }.
      End ConstructorOutput.
    End ConstructorOutput.
    
    Module ConstructorOutputValue.
      Section ConstructorOutputValue.
        Context `{State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
        }.
      End ConstructorOutputValue.
    End ConstructorOutputValue.
    Definition ConstructorOutputValue `{State.Trait} (T : Set) : Set :=
      M.val (ConstructorOutputValue.t (T := T)).
    
    Module DispatchError.
      Inductive t `{State.Trait} : Set :=
      | InvalidSelector
      | UnknownSelector
      | InvalidParameters
      | CouldNotReadInput
      | PaidUnpayableMessage.
    End DispatchError.
    Definition DispatchError `{State.Trait} : Set := DispatchError.t.
    
    Module ExecuteDispatchable.
      Section ExecuteDispatchable.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          execute_dispatchable
            :
            Self ->
              M (core.result.Result unit ink.reflect.dispatch.DispatchError);
        }.
        
      End ExecuteDispatchable.
    End ExecuteDispatchable.
    
    Module ContractMessageDecoder.
      Section ContractMessageDecoder.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait)
          : Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractMessageDecoder.
    End ContractMessageDecoder.
    
    Module DecodeDispatch.
      Section DecodeDispatch.
        Context `{State.Trait}.
        
        Class Trait
            (Self : Set)
            {ℋ_0 : parity_scale_codec.codec.Decode.Trait Self} :
            Type := {
          decode_dispatch
            {I : Set}
            {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
            :
            (mut_ref I) ->
              M (core.result.Result Self ink.reflect.dispatch.DispatchError);
        }.
        
      End DecodeDispatch.
    End DecodeDispatch.
    
    Module ContractConstructorDecoder.
      Section ContractConstructorDecoder.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait)
          : Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractConstructorDecoder.
    End ContractConstructorDecoder.
  End dispatch.
  
  Module event.
    Module ContractEventBase.
      Section ContractEventBase.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait)
          : Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractEventBase.
    End ContractEventBase.
  End event.
  
  Module trait_def.
    Module info.
      Module TraitMessageInfo.
        Section TraitMessageInfo.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            PAYABLE : bool;
            SELECTOR : array u8;
          }.
          
        End TraitMessageInfo.
      End TraitMessageInfo.
      
      Module TraitInfo.
        Section TraitInfo.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            ID : u32;
            PATH : ref str;
            NAME : ref str;
          }.
          
        End TraitInfo.
      End TraitInfo.
    End info.
    
    Module registry.
      Module TraitDefinitionRegistry.
        Section TraitDefinitionRegistry.
          Context `{State.Trait}.
          
          Context {E : Set}.
          
          Unset Primitive Projections.
          Record t : Set := {
            marker : core.marker.PhantomData (E);
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_marker : Notation.Dot "marker" := {
            Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
          }.
          Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
            Notation.double_colon x
              :=
              let* x := M.read x in Pure x.(marker) : M _;
          }.
        End TraitDefinitionRegistry.
      End TraitDefinitionRegistry.
      Definition TraitDefinitionRegistry (E : Set) `{State.Trait} : Set :=
        M.val (TraitDefinitionRegistry.t (E := E)).
    End registry.
  End trait_def.
End reflect.

Module codegen.
  Module dispatch.
    Module execution.
      Parameter deny_payment :
          forall
            `{State.Trait}
            {E : Set}
            {ℋ_0 : ink_env.types.Environment.Trait E},
          M (core.result.Result unit ink.reflect.dispatch.DispatchError).
    End execution.
    
    Module info.
      Module ContractCallBuilder.
        Section ContractCallBuilder.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            Type_ : Set;
          }.
          
          Global Instance Method_Type_ `(Trait)
            : Notation.DoubleColonType Self "Type_" := {
            Notation.double_colon_type := Type_;
          }.
        End ContractCallBuilder.
      End ContractCallBuilder.
    End info.
    
    Module type_check.
      Module DispatchInput.
        Section DispatchInput.
          Context `{State.Trait}.
          
          Context {T : Set}.
          
          Unset Primitive Projections.
          Record t : Set := {
            x0 : T;
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_0 : Notation.Dot "0" := {
            Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
          }.
        End DispatchInput.
      End DispatchInput.
      Definition DispatchInput `{State.Trait} (T : Set) : Set :=
        M.val (DispatchInput.t (T := T)).
      
      Module DispatchOutput.
        Section DispatchOutput.
          Context `{State.Trait}.
          
          Context {T : Set}.
          
          Unset Primitive Projections.
          Record t : Set := {
            x0 : T;
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_0 : Notation.Dot "0" := {
            Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
          }.
        End DispatchOutput.
      End DispatchOutput.
      Definition DispatchOutput `{State.Trait} (T : Set) : Set :=
        M.val (DispatchOutput.t (T := T)).
    End type_check.
  End dispatch.
  
  Module env.
    Module Env.
      Section Env.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          EnvAccess : Set;
          env : Self -> M EnvAccess;
        }.
        
        Global Instance Method_EnvAccess `(Trait)
          : Notation.DoubleColonType Self "EnvAccess" := {
          Notation.double_colon_type := EnvAccess;
        }.
      End Env.
    End Env.
    
    Module StaticEnv.
      Section StaticEnv.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          EnvAccess : Set;
          env : M EnvAccess;
        }.
        
        Global Instance Method_EnvAccess `(Trait)
          : Notation.DoubleColonType Self "EnvAccess" := {
          Notation.double_colon_type := EnvAccess;
        }.
      End StaticEnv.
    End StaticEnv.
  End env.
  
  Module event.
    Module emit.
      Module EmitEvent.
        Section EmitEvent.
          Context `{State.Trait}.
          
          Class Trait
              (Self : Set)
              {C : Set}
              {ℋ_0 : ink.reflect.event.ContractEventBase.Trait C} :
              Type := {
            emit_event
              {E : Set}
              {ℋ_0 :
                core.convert.Into.Trait E
                  (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
              :
              Self -> E -> M unit;
          }.
          
        End EmitEvent.
      End EmitEvent.
    End emit.
    
    Module topics.
      Module RespectTopicLimit.
        Section RespectTopicLimit.
          Context `{State.Trait}.
          
          Unset Primitive Projections.
          Class Trait (Self : Set) : Type := {
          }.
          Global Set Primitive Projections.
        End RespectTopicLimit.
      End RespectTopicLimit.
      
      Module EventLenTopics.
        Section EventLenTopics.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            LenTopics : Set;
          }.
          
          Global Instance Method_LenTopics `(Trait)
            : Notation.DoubleColonType Self "LenTopics" := {
            Notation.double_colon_type := LenTopics;
          }.
        End EventLenTopics.
      End EventLenTopics.
      
      Module EventRespectsTopicLimit.
        Section EventRespectsTopicLimit.
          Context `{State.Trait}.
          
          Context {Event : Set}.
          
          Context
            {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
            {ℋ_1 :
              ink.codegen.event.topics.RespectTopicLimit.Trait
                  (ink.codegen.event.topics.EventLenTopics.LenTopics
                    (Self := Event))}.
          Unset Primitive Projections.
          Record t : Set := {
            marker : core.marker.PhantomData (Event);
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_marker : Notation.Dot "marker" := {
            Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
          }.
          Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
            Notation.double_colon x
              :=
              let* x := M.read x in Pure x.(marker) : M _;
          }.
        End EventRespectsTopicLimit.
      End EventRespectsTopicLimit.
      Definition EventRespectsTopicLimit
          (Event : Set)
          `{State.Trait}
          {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
          {ℋ_1 :
            ink.codegen.event.topics.RespectTopicLimit.Trait
                (ink.codegen.event.topics.EventLenTopics.LenTopics
                  (Self := Event))}
          : Set :=
        M.val (EventRespectsTopicLimit.t (Event := Event)).
      
      Module EventTopics.
        Section EventTopics.
          Context `{State.Trait}.
          
          Inductive t : Set := Build.
        End EventTopics.
      End EventTopics.
      Definition EventTopics := @EventTopics.t.
    End topics.
  End event.
  
  Module implies_return.
    Module ImpliesReturn.
      Section ImpliesReturn.
        Context `{State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) {T : Set} : Type := {
        }.
        Global Set Primitive Projections.
      End ImpliesReturn.
    End ImpliesReturn.
  End implies_return.
  
  Module trait_def.
    Module call_builder.
      Module TraitCallBuilder.
        Section TraitCallBuilder.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            Builder : Set;
            call : (ref Self) -> M (ref Builder);
            call_mut : (mut_ref Self) -> M (mut_ref Builder);
          }.
          
          Global Instance Method_Builder `(Trait)
            : Notation.DoubleColonType Self "Builder" := {
            Notation.double_colon_type := Builder;
          }.
        End TraitCallBuilder.
      End TraitCallBuilder.
      
      Module TraitCallForwarder.
        Section TraitCallForwarder.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            Forwarder : Set;
          }.
          
          Global Instance Method_Forwarder `(Trait)
            : Notation.DoubleColonType Self "Forwarder" := {
            Notation.double_colon_type := Forwarder;
          }.
        End TraitCallForwarder.
      End TraitCallForwarder.
      
      (* Module TraitCallForwarderFor.
        (* Section TraitCallForwarderFor.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            Forwarder : Set;
            forward : (ref Self) -> M (ref Forwarder);
            forward_mut : (mut_ref Self) -> M (mut_ref Forwarder);
            build
              :
              (ref Self) ->
                M
                  (ref
                    (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                      (Self := Forwarder)));
            build_mut
              :
              (mut_ref Self) ->
                M
                  (mut_ref
                    (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                      (Self := Forwarder)));
          }.
          
          Global Instance Method_Forwarder `(Trait)
            : Notation.DoubleColonType Self "Forwarder" := {
            Notation.double_colon_type := Forwarder;
          }.
        End TraitCallForwarderFor. *)
      End TraitCallForwarderFor. *)
    End call_builder.
    
    Module trait_message.
      Module TraitMessagePayable.
        Section TraitMessagePayable.
          Context `{State.Trait}.
          
          Inductive t : Set := Build.
        End TraitMessagePayable.
      End TraitMessagePayable.
      Definition TraitMessagePayable := @TraitMessagePayable.t.
      
      Module TraitMessageSelector.
        Section TraitMessageSelector.
          Context `{State.Trait}.
          
          Inductive t : Set := Build.
        End TraitMessageSelector.
      End TraitMessageSelector.
      Definition TraitMessageSelector := @TraitMessageSelector.t.
    End trait_message.
  End trait_def.
  
  Module utils.
    Module identity_type.
      Parameter consume_type : forall `{State.Trait} {T : Set}, M unit.
    End identity_type.
    
    Module same_type.
      Module IsSameType.
        Section IsSameType.
          Context `{State.Trait}.
          
          Context {T : Set}.
          
          Unset Primitive Projections.
          Record t : Set := {
            _marker : core.marker.PhantomData T;
          }.
          Global Set Primitive Projections.
          
          Global Instance Get__marker : Notation.Dot "_marker" := {
            Notation.dot x := let* x := M.read x in Pure x.(_marker) : M _;
          }.
          Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
            Notation.double_colon x
              :=
              let* x := M.read x in Pure x.(_marker) : M _;
          }.
        End IsSameType.
      End IsSameType.
      Definition IsSameType (T : Set) `{State.Trait} : Set :=
        M.val (IsSameType.t (T := T)).
    End same_type.
  End utils.
End codegen.

Module dispatch.
  Module execution.
    Parameter deny_payment :
        forall
          `{State.Trait}
          {E : Set}
          {ℋ_0 : ink_env.types.Environment.Trait E},
        M (core.result.Result unit ink.reflect.dispatch.DispatchError).
  End execution.
  
  Module info.
    Module ContractCallBuilder.
      Section ContractCallBuilder.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait)
          : Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractCallBuilder.
    End ContractCallBuilder.
  End info.
  
  Module type_check.
    Module DispatchInput.
      Section DispatchInput.
        Context `{State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
        }.
      End DispatchInput.
    End DispatchInput.
    Definition DispatchInput `{State.Trait} (T : Set) : Set :=
      M.val (DispatchInput.t (T := T)).
    
    Module DispatchOutput.
      Section DispatchOutput.
        Context `{State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
        }.
      End DispatchOutput.
    End DispatchOutput.
    Definition DispatchOutput `{State.Trait} (T : Set) : Set :=
      M.val (DispatchOutput.t (T := T)).
  End type_check.
End dispatch.

Module execution.
  Parameter deny_payment :
      forall `{State.Trait} {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E},
      M (core.result.Result unit ink.reflect.dispatch.DispatchError).
End execution.

Parameter deny_payment :
    forall `{State.Trait} {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E},
    M (core.result.Result unit ink.reflect.dispatch.DispatchError).

Module info.
  Module ContractCallBuilder.
    Section ContractCallBuilder.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
      }.
      
      Global Instance Method_Type_ `(Trait)
        : Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractCallBuilder.
  End ContractCallBuilder.
End info.

Module ContractCallBuilder.
  Section ContractCallBuilder.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait)
      : Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractCallBuilder.
End ContractCallBuilder.

Module type_check.
  Module DispatchInput.
    Section DispatchInput.
      Context `{State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
      }.
    End DispatchInput.
  End DispatchInput.
  Definition DispatchInput `{State.Trait} (T : Set) : Set :=
    M.val (DispatchInput.t (T := T)).
  
  Module DispatchOutput.
    Section DispatchOutput.
      Context `{State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
      }.
    End DispatchOutput.
  End DispatchOutput.
  Definition DispatchOutput `{State.Trait} (T : Set) : Set :=
    M.val (DispatchOutput.t (T := T)).
End type_check.

Module DispatchInput.
  Section DispatchInput.
    Context `{State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End DispatchInput.
End DispatchInput.
Definition DispatchInput `{State.Trait} (T : Set) : Set :=
  M.val (DispatchInput.t (T := T)).

Module DispatchOutput.
  Section DispatchOutput.
    Context `{State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End DispatchOutput.
End DispatchOutput.
Definition DispatchOutput `{State.Trait} (T : Set) : Set :=
  M.val (DispatchOutput.t (T := T)).

Module env.
  Module Env.
    Section Env.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        EnvAccess : Set;
        env : Self -> M EnvAccess;
      }.
      
      Global Instance Method_EnvAccess `(Trait)
        : Notation.DoubleColonType Self "EnvAccess" := {
        Notation.double_colon_type := EnvAccess;
      }.
    End Env.
  End Env.
  
  Module StaticEnv.
    Section StaticEnv.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        EnvAccess : Set;
        env : M EnvAccess;
      }.
      
      Global Instance Method_EnvAccess `(Trait)
        : Notation.DoubleColonType Self "EnvAccess" := {
        Notation.double_colon_type := EnvAccess;
      }.
    End StaticEnv.
  End StaticEnv.
End env.

Module Env.
  Section Env.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      EnvAccess : Set;
      env : Self -> M EnvAccess;
    }.
    
    Global Instance Method_EnvAccess `(Trait)
      : Notation.DoubleColonType Self "EnvAccess" := {
      Notation.double_colon_type := EnvAccess;
    }.
  End Env.
End Env.

Module StaticEnv.
  Section StaticEnv.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      EnvAccess : Set;
      env : M EnvAccess;
    }.
    
    Global Instance Method_EnvAccess `(Trait)
      : Notation.DoubleColonType Self "EnvAccess" := {
      Notation.double_colon_type := EnvAccess;
    }.
  End StaticEnv.
End StaticEnv.

Module event.
  Module emit.
    Module EmitEvent.
      Section EmitEvent.
        Context `{State.Trait}.
        
        Class Trait
            (Self : Set)
            {C : Set}
            {ℋ_0 : ink.reflect.event.ContractEventBase.Trait C} :
            Type := {
          emit_event
            {E : Set}
            {ℋ_0 :
              core.convert.Into.Trait E
                (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
            :
            Self -> E -> M unit;
        }.
        
      End EmitEvent.
    End EmitEvent.
  End emit.
  
  Module topics.
    Module RespectTopicLimit.
      Section RespectTopicLimit.
        Context `{State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End RespectTopicLimit.
    End RespectTopicLimit.
    
    Module EventLenTopics.
      Section EventLenTopics.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          LenTopics : Set;
        }.
        
        Global Instance Method_LenTopics `(Trait)
          : Notation.DoubleColonType Self "LenTopics" := {
          Notation.double_colon_type := LenTopics;
        }.
      End EventLenTopics.
    End EventLenTopics.
    
    Module EventRespectsTopicLimit.
      Section EventRespectsTopicLimit.
        Context `{State.Trait}.
        
        Context {Event : Set}.
        
        Context
          {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
          {ℋ_1 :
            ink.codegen.event.topics.RespectTopicLimit.Trait
                (ink.codegen.event.topics.EventLenTopics.LenTopics
                  (Self := Event))}.
        Unset Primitive Projections.
        Record t : Set := {
          marker : core.marker.PhantomData (Event);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_marker : Notation.Dot "marker" := {
          Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
        }.
        Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
          Notation.double_colon x
            :=
            let* x := M.read x in Pure x.(marker) : M _;
        }.
      End EventRespectsTopicLimit.
    End EventRespectsTopicLimit.
    Definition EventRespectsTopicLimit
        (Event : Set)
        `{State.Trait}
        {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
        {ℋ_1 :
          ink.codegen.event.topics.RespectTopicLimit.Trait
              (ink.codegen.event.topics.EventLenTopics.LenTopics
                (Self := Event))}
        : Set :=
      M.val (EventRespectsTopicLimit.t (Event := Event)).
    
    Module EventTopics.
      Section EventTopics.
        Context `{State.Trait}.
        
        Inductive t : Set := Build.
      End EventTopics.
    End EventTopics.
    Definition EventTopics := @EventTopics.t.
  End topics.
End event.

Module emit.
  Module EmitEvent.
    Section EmitEvent.
      Context `{State.Trait}.
      
      Class Trait
          (Self : Set)
          {C : Set}
          {ℋ_0 : ink.reflect.event.ContractEventBase.Trait C} :
          Type := {
        emit_event
          {E : Set}
          {ℋ_0 :
            core.convert.Into.Trait E
              (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
          :
          Self -> E -> M unit;
      }.
      
    End EmitEvent.
  End EmitEvent.
End emit.

Module EmitEvent.
  Section EmitEvent.
    Context `{State.Trait}.
    
    Class Trait
        (Self : Set)
        {C : Set}
        {ℋ_0 : ink.reflect.event.ContractEventBase.Trait C} :
        Type := {
      emit_event
        {E : Set}
        {ℋ_0 :
          core.convert.Into.Trait E
            (T := ink.reflect.event.ContractEventBase.Type_ (Self := C))}
        :
        Self -> E -> M unit;
    }.
    
  End EmitEvent.
End EmitEvent.

Module topics.
  Module RespectTopicLimit.
    Section RespectTopicLimit.
      Context `{State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End RespectTopicLimit.
  End RespectTopicLimit.
  
  Module EventLenTopics.
    Section EventLenTopics.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        LenTopics : Set;
      }.
      
      Global Instance Method_LenTopics `(Trait)
        : Notation.DoubleColonType Self "LenTopics" := {
        Notation.double_colon_type := LenTopics;
      }.
    End EventLenTopics.
  End EventLenTopics.
  
  Module EventRespectsTopicLimit.
    Section EventRespectsTopicLimit.
      Context `{State.Trait}.
      
      Context {Event : Set}.
      
      Context
        {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
        {ℋ_1 :
          ink.codegen.event.topics.RespectTopicLimit.Trait
              (ink.codegen.event.topics.EventLenTopics.LenTopics
                (Self := Event))}.
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (Event);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(marker) : M _;
      }.
    End EventRespectsTopicLimit.
  End EventRespectsTopicLimit.
  Definition EventRespectsTopicLimit
      (Event : Set)
      `{State.Trait}
      {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
      {ℋ_1 :
        ink.codegen.event.topics.RespectTopicLimit.Trait
            (ink.codegen.event.topics.EventLenTopics.LenTopics (Self := Event))}
      : Set :=
    M.val (EventRespectsTopicLimit.t (Event := Event)).
  
  Module EventTopics.
    Section EventTopics.
      Context `{State.Trait}.
      
      Inductive t : Set := Build.
    End EventTopics.
  End EventTopics.
  Definition EventTopics := @EventTopics.t.
End topics.

Module EventRespectsTopicLimit.
  Section EventRespectsTopicLimit.
    Context `{State.Trait}.
    
    Context {Event : Set}.
    
    Context
      {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
      {ℋ_1 :
        ink.codegen.event.topics.RespectTopicLimit.Trait
            (ink.codegen.event.topics.EventLenTopics.LenTopics
              (Self := Event))}.
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (Event);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(marker) : M _;
    }.
  End EventRespectsTopicLimit.
End EventRespectsTopicLimit.
Definition EventRespectsTopicLimit
    (Event : Set)
    `{State.Trait}
    {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
    {ℋ_1 :
      ink.codegen.event.topics.RespectTopicLimit.Trait
          (ink.codegen.event.topics.EventLenTopics.LenTopics (Self := Event))}
    : Set :=
  M.val (EventRespectsTopicLimit.t (Event := Event)).

Module RespectTopicLimit.
  Section RespectTopicLimit.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End RespectTopicLimit.
End RespectTopicLimit.

Module EventTopics.
  Section EventTopics.
    Context `{State.Trait}.
    
    Inductive t : Set := Build.
  End EventTopics.
End EventTopics.
Definition EventTopics := @EventTopics.t.

Module EventLenTopics.
  Section EventLenTopics.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      LenTopics : Set;
    }.
    
    Global Instance Method_LenTopics `(Trait)
      : Notation.DoubleColonType Self "LenTopics" := {
      Notation.double_colon_type := LenTopics;
    }.
  End EventLenTopics.
End EventLenTopics.

Module implies_return.
  Module ImpliesReturn.
    Section ImpliesReturn.
      Context `{State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) {T : Set} : Type := {
      }.
      Global Set Primitive Projections.
    End ImpliesReturn.
  End ImpliesReturn.
End implies_return.

Module ImpliesReturn.
  Section ImpliesReturn.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) {T : Set} : Type := {
    }.
    Global Set Primitive Projections.
  End ImpliesReturn.
End ImpliesReturn.

Module trait_def.
  Module call_builder.
    Module TraitCallBuilder.
      Section TraitCallBuilder.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Builder : Set;
          call : (ref Self) -> M (ref Builder);
          call_mut : (mut_ref Self) -> M (mut_ref Builder);
        }.
        
        Global Instance Method_Builder `(Trait)
          : Notation.DoubleColonType Self "Builder" := {
          Notation.double_colon_type := Builder;
        }.
      End TraitCallBuilder.
    End TraitCallBuilder.
    
    Module TraitCallForwarder.
      Section TraitCallForwarder.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Forwarder : Set;
        }.
        
        Global Instance Method_Forwarder `(Trait)
          : Notation.DoubleColonType Self "Forwarder" := {
          Notation.double_colon_type := Forwarder;
        }.
      End TraitCallForwarder.
    End TraitCallForwarder.
    
    (* Module TraitCallForwarderFor.
      (* Section TraitCallForwarderFor.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Forwarder : Set;
          forward : (ref Self) -> M (ref Forwarder);
          forward_mut : (mut_ref Self) -> M (mut_ref Forwarder);
          build
            :
            (ref Self) ->
              M
                (ref
                  (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                    (Self := Forwarder)));
          build_mut
            :
            (mut_ref Self) ->
              M
                (mut_ref
                  (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                    (Self := Forwarder)));
        }.
        
        Global Instance Method_Forwarder `(Trait)
          : Notation.DoubleColonType Self "Forwarder" := {
          Notation.double_colon_type := Forwarder;
        }.
      End TraitCallForwarderFor. *)
    End TraitCallForwarderFor. *)
  End call_builder.
  
  Module trait_message.
    Module TraitMessagePayable.
      Section TraitMessagePayable.
        Context `{State.Trait}.
        
        Inductive t : Set := Build.
      End TraitMessagePayable.
    End TraitMessagePayable.
    Definition TraitMessagePayable := @TraitMessagePayable.t.
    
    Module TraitMessageSelector.
      Section TraitMessageSelector.
        Context `{State.Trait}.
        
        Inductive t : Set := Build.
      End TraitMessageSelector.
    End TraitMessageSelector.
    Definition TraitMessageSelector := @TraitMessageSelector.t.
  End trait_message.
End trait_def.

Module call_builder.
  Module TraitCallBuilder.
    Section TraitCallBuilder.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Builder : Set;
        call : (ref Self) -> M (ref Builder);
        call_mut : (mut_ref Self) -> M (mut_ref Builder);
      }.
      
      Global Instance Method_Builder `(Trait)
        : Notation.DoubleColonType Self "Builder" := {
        Notation.double_colon_type := Builder;
      }.
    End TraitCallBuilder.
  End TraitCallBuilder.
  
  Module TraitCallForwarder.
    Section TraitCallForwarder.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Forwarder : Set;
      }.
      
      Global Instance Method_Forwarder `(Trait)
        : Notation.DoubleColonType Self "Forwarder" := {
        Notation.double_colon_type := Forwarder;
      }.
    End TraitCallForwarder.
  End TraitCallForwarder.
  
  (* Module TraitCallForwarderFor.
    (* Section TraitCallForwarderFor.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Forwarder : Set;
        forward : (ref Self) -> M (ref Forwarder);
        forward_mut : (mut_ref Self) -> M (mut_ref Forwarder);
        build
          :
          (ref Self) ->
            M
              (ref
                (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                  (Self := Forwarder)));
        build_mut
          :
          (mut_ref Self) ->
            M
              (mut_ref
                (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                  (Self := Forwarder)));
      }.
      
      Global Instance Method_Forwarder `(Trait)
        : Notation.DoubleColonType Self "Forwarder" := {
        Notation.double_colon_type := Forwarder;
      }.
    End TraitCallForwarderFor. *)
  End TraitCallForwarderFor. *)
End call_builder.

Module TraitCallBuilder.
  Section TraitCallBuilder.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Builder : Set;
      call : (ref Self) -> M (ref Builder);
      call_mut : (mut_ref Self) -> M (mut_ref Builder);
    }.
    
    Global Instance Method_Builder `(Trait)
      : Notation.DoubleColonType Self "Builder" := {
      Notation.double_colon_type := Builder;
    }.
  End TraitCallBuilder.
End TraitCallBuilder.

Module TraitCallForwarder.
  Section TraitCallForwarder.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Forwarder : Set;
    }.
    
    Global Instance Method_Forwarder `(Trait)
      : Notation.DoubleColonType Self "Forwarder" := {
      Notation.double_colon_type := Forwarder;
    }.
  End TraitCallForwarder.
End TraitCallForwarder.

(* Module TraitCallForwarderFor.
  (* Section TraitCallForwarderFor.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Forwarder : Set;
      forward : (ref Self) -> M (ref Forwarder);
      forward_mut : (mut_ref Self) -> M (mut_ref Forwarder);
      build
        :
        (ref Self) ->
          M
            (ref
              (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                (Self := Forwarder)));
      build_mut
        :
        (mut_ref Self) ->
          M
            (mut_ref
              (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                (Self := Forwarder)));
    }.
    
    Global Instance Method_Forwarder `(Trait)
      : Notation.DoubleColonType Self "Forwarder" := {
      Notation.double_colon_type := Forwarder;
    }.
  End TraitCallForwarderFor. *)
End TraitCallForwarderFor. *)

Module trait_message.
  Module TraitMessagePayable.
    Section TraitMessagePayable.
      Context `{State.Trait}.
      
      Inductive t : Set := Build.
    End TraitMessagePayable.
  End TraitMessagePayable.
  Definition TraitMessagePayable := @TraitMessagePayable.t.
  
  Module TraitMessageSelector.
    Section TraitMessageSelector.
      Context `{State.Trait}.
      
      Inductive t : Set := Build.
    End TraitMessageSelector.
  End TraitMessageSelector.
  Definition TraitMessageSelector := @TraitMessageSelector.t.
End trait_message.

Module TraitMessagePayable.
  Section TraitMessagePayable.
    Context `{State.Trait}.
    
    Inductive t : Set := Build.
  End TraitMessagePayable.
End TraitMessagePayable.
Definition TraitMessagePayable := @TraitMessagePayable.t.

Module TraitMessageSelector.
  Section TraitMessageSelector.
    Context `{State.Trait}.
    
    Inductive t : Set := Build.
  End TraitMessageSelector.
End TraitMessageSelector.
Definition TraitMessageSelector := @TraitMessageSelector.t.

Module utils.
  Module identity_type.
    Parameter consume_type : forall `{State.Trait} {T : Set}, M unit.
  End identity_type.
  
  Module same_type.
    Module IsSameType.
      Section IsSameType.
        Context `{State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          _marker : core.marker.PhantomData T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get__marker : Notation.Dot "_marker" := {
          Notation.dot x := let* x := M.read x in Pure x.(_marker) : M _;
        }.
        Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
          Notation.double_colon x
            :=
            let* x := M.read x in Pure x.(_marker) : M _;
        }.
      End IsSameType.
    End IsSameType.
    Definition IsSameType (T : Set) `{State.Trait} : Set :=
      M.val (IsSameType.t (T := T)).
  End same_type.
End utils.

Module identity_type.
  Parameter consume_type : forall `{State.Trait} {T : Set}, M unit.
End identity_type.

Parameter consume_type : forall `{State.Trait} {T : Set}, M unit.

Module same_type.
  Module IsSameType.
    Section IsSameType.
      Context `{State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        _marker : core.marker.PhantomData T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get__marker : Notation.Dot "_marker" := {
        Notation.dot x := let* x := M.read x in Pure x.(_marker) : M _;
      }.
      Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(_marker) : M _;
      }.
    End IsSameType.
  End IsSameType.
  Definition IsSameType (T : Set) `{State.Trait} : Set :=
    M.val (IsSameType.t (T := T)).
End same_type.

Module IsSameType.
  Section IsSameType.
    Context `{State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      _marker : core.marker.PhantomData T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get__marker : Notation.Dot "_marker" := {
      Notation.dot x := let* x := M.read x in Pure x.(_marker) : M _;
    }.
    Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(_marker) : M _;
    }.
  End IsSameType.
End IsSameType.
Definition IsSameType (T : Set) `{State.Trait} : Set :=
  M.val (IsSameType.t (T := T)).

Module contract.
  Module ContractName.
    Section ContractName.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        NAME : ref str;
      }.
      
    End ContractName.
  End ContractName.
End contract.

Module ContractName.
  Section ContractName.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      NAME : ref str;
    }.
    
  End ContractName.
End ContractName.

Module Wrap_dispatch_1.
  Module dispatch.
    Module DispatchableMessageInfo.
      Section DispatchableMessageInfo.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Input : Set;
          Output : Set;
          Storage : Set;
          CALLABLE : (mut_ref Storage) -> Input -> M Output;
          MUTATES : bool;
          PAYABLE : bool;
          SELECTOR : array u8;
          LABEL : ref str;
        }.
        
        Global Instance Method_Input `(Trait)
          : Notation.DoubleColonType Self "Input" := {
          Notation.double_colon_type := Input;
        }.
        Global Instance Method_Output `(Trait)
          : Notation.DoubleColonType Self "Output" := {
          Notation.double_colon_type := Output;
        }.
        Global Instance Method_Storage `(Trait)
          : Notation.DoubleColonType Self "Storage" := {
          Notation.double_colon_type := Storage;
        }.
      End DispatchableMessageInfo.
    End DispatchableMessageInfo.
    
    Module DispatchableConstructorInfo.
      Section DispatchableConstructorInfo.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Input : Set;
          Storage : Set;
          Output : Set;
          Error : Set;
          IS_RESULT : bool;
          CALLABLE : Input -> M Output;
          PAYABLE : bool;
          SELECTOR : array u8;
          LABEL : ref str;
        }.
        
        Global Instance Method_Input `(Trait)
          : Notation.DoubleColonType Self "Input" := {
          Notation.double_colon_type := Input;
        }.
        Global Instance Method_Storage `(Trait)
          : Notation.DoubleColonType Self "Storage" := {
          Notation.double_colon_type := Storage;
        }.
        Global Instance Method_Output `(Trait)
          : Notation.DoubleColonType Self "Output" := {
          Notation.double_colon_type := Output;
        }.
        Global Instance Method_Error `(Trait)
          : Notation.DoubleColonType Self "Error" := {
          Notation.double_colon_type := Error;
        }.
      End DispatchableConstructorInfo.
    End DispatchableConstructorInfo.
    
    Module private.
      Module Sealed.
        Section Sealed.
          Context `{State.Trait}.
          
          Unset Primitive Projections.
          Class Trait (Self : Set) : Type := {
          }.
          Global Set Primitive Projections.
        End Sealed.
      End Sealed.
    End private.
    
    Module ConstructorOutput.
      Section ConstructorOutput.
        Context `{State.Trait}.
        
        Class Trait
            (Self : Set)
            {C : Set}
            {ℋ_0 : ink.reflect.dispatch.private.Sealed.Trait Self} :
            Type := {
          IS_RESULT : bool;
          Error : Set;
          as_result : (ref Self) -> M (core.result.Result (ref C) (ref Error));
        }.
        
        Global Instance Method_Error `(Trait)
          : Notation.DoubleColonType Self "Error" := {
          Notation.double_colon_type := Error;
        }.
      End ConstructorOutput.
    End ConstructorOutput.
    
    Module ConstructorOutputValue.
      Section ConstructorOutputValue.
        Context `{State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
        }.
      End ConstructorOutputValue.
    End ConstructorOutputValue.
    Definition ConstructorOutputValue `{State.Trait} (T : Set) : Set :=
      M.val (ConstructorOutputValue.t (T := T)).
    
    Module DispatchError.
      Inductive t `{State.Trait} : Set :=
      | InvalidSelector
      | UnknownSelector
      | InvalidParameters
      | CouldNotReadInput
      | PaidUnpayableMessage.
    End DispatchError.
    Definition DispatchError `{State.Trait} : Set := DispatchError.t.
    
    Module ExecuteDispatchable.
      Section ExecuteDispatchable.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          execute_dispatchable
            :
            Self ->
              M (core.result.Result unit ink.reflect.dispatch.DispatchError);
        }.
        
      End ExecuteDispatchable.
    End ExecuteDispatchable.
    
    Module ContractMessageDecoder.
      Section ContractMessageDecoder.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait)
          : Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractMessageDecoder.
    End ContractMessageDecoder.
    
    Module DecodeDispatch.
      Section DecodeDispatch.
        Context `{State.Trait}.
        
        Class Trait
            (Self : Set)
            {ℋ_0 : parity_scale_codec.codec.Decode.Trait Self} :
            Type := {
          decode_dispatch
            {I : Set}
            {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
            :
            (mut_ref I) ->
              M (core.result.Result Self ink.reflect.dispatch.DispatchError);
        }.
        
      End DecodeDispatch.
    End DecodeDispatch.
    
    Module ContractConstructorDecoder.
      Section ContractConstructorDecoder.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait)
          : Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractConstructorDecoder.
    End ContractConstructorDecoder.
  End dispatch.
End Wrap_dispatch_1.
Import Wrap_dispatch_1.

Module DispatchableMessageInfo.
  Section DispatchableMessageInfo.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Input : Set;
      Output : Set;
      Storage : Set;
      CALLABLE : (mut_ref Storage) -> Input -> M Output;
      MUTATES : bool;
      PAYABLE : bool;
      SELECTOR : array u8;
      LABEL : ref str;
    }.
    
    Global Instance Method_Input `(Trait)
      : Notation.DoubleColonType Self "Input" := {
      Notation.double_colon_type := Input;
    }.
    Global Instance Method_Output `(Trait)
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_Storage `(Trait)
      : Notation.DoubleColonType Self "Storage" := {
      Notation.double_colon_type := Storage;
    }.
  End DispatchableMessageInfo.
End DispatchableMessageInfo.

Module DispatchableConstructorInfo.
  Section DispatchableConstructorInfo.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Input : Set;
      Storage : Set;
      Output : Set;
      Error : Set;
      IS_RESULT : bool;
      CALLABLE : Input -> M Output;
      PAYABLE : bool;
      SELECTOR : array u8;
      LABEL : ref str;
    }.
    
    Global Instance Method_Input `(Trait)
      : Notation.DoubleColonType Self "Input" := {
      Notation.double_colon_type := Input;
    }.
    Global Instance Method_Storage `(Trait)
      : Notation.DoubleColonType Self "Storage" := {
      Notation.double_colon_type := Storage;
    }.
    Global Instance Method_Output `(Trait)
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_Error `(Trait)
      : Notation.DoubleColonType Self "Error" := {
      Notation.double_colon_type := Error;
    }.
  End DispatchableConstructorInfo.
End DispatchableConstructorInfo.

Module private.
  Module Sealed.
    Section Sealed.
      Context `{State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End Sealed.
  End Sealed.
End private.

Module Sealed.
  Section Sealed.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End Sealed.
End Sealed.

Module ConstructorOutput.
  Section ConstructorOutput.
    Context `{State.Trait}.
    
    Class Trait
        (Self : Set)
        {C : Set}
        {ℋ_0 : ink.reflect.dispatch.private.Sealed.Trait Self} :
        Type := {
      IS_RESULT : bool;
      Error : Set;
      as_result : (ref Self) -> M (core.result.Result (ref C) (ref Error));
    }.
    
    Global Instance Method_Error `(Trait)
      : Notation.DoubleColonType Self "Error" := {
      Notation.double_colon_type := Error;
    }.
  End ConstructorOutput.
End ConstructorOutput.

Module ConstructorOutputValue.
  Section ConstructorOutputValue.
    Context `{State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End ConstructorOutputValue.
End ConstructorOutputValue.
Definition ConstructorOutputValue `{State.Trait} (T : Set) : Set :=
  M.val (ConstructorOutputValue.t (T := T)).

Module ContractMessageDecoder.
  Section ContractMessageDecoder.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait)
      : Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractMessageDecoder.
End ContractMessageDecoder.

Module ContractConstructorDecoder.
  Section ContractConstructorDecoder.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait)
      : Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractConstructorDecoder.
End ContractConstructorDecoder.

Module ExecuteDispatchable.
  Section ExecuteDispatchable.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      execute_dispatchable
        :
        Self -> M (core.result.Result unit ink.reflect.dispatch.DispatchError);
    }.
    
  End ExecuteDispatchable.
End ExecuteDispatchable.

Module DispatchError.
  Inductive t `{State.Trait} : Set :=
  | InvalidSelector
  | UnknownSelector
  | InvalidParameters
  | CouldNotReadInput
  | PaidUnpayableMessage.
End DispatchError.
Definition DispatchError `{State.Trait} : Set := DispatchError.t.

Module DecodeDispatch.
  Section DecodeDispatch.
    Context `{State.Trait}.
    
    Class Trait
        (Self : Set)
        {ℋ_0 : parity_scale_codec.codec.Decode.Trait Self} :
        Type := {
      decode_dispatch {I : Set} {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
        :
        (mut_ref I) ->
          M (core.result.Result Self ink.reflect.dispatch.DispatchError);
    }.
    
  End DecodeDispatch.
End DecodeDispatch.

Module Wrap_event_1.
  Module event.
    Module ContractEventBase.
      Section ContractEventBase.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait)
          : Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractEventBase.
    End ContractEventBase.
  End event.
End Wrap_event_1.
Import Wrap_event_1.

Module ContractEventBase.
  Section ContractEventBase.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait)
      : Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractEventBase.
End ContractEventBase.

Module Wrap_trait_def_1.
  Module trait_def.
    Module info.
      Module TraitMessageInfo.
        Section TraitMessageInfo.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            PAYABLE : bool;
            SELECTOR : array u8;
          }.
          
        End TraitMessageInfo.
      End TraitMessageInfo.
      
      Module TraitInfo.
        Section TraitInfo.
          Context `{State.Trait}.
          
          Class Trait (Self : Set) : Type := {
            ID : u32;
            PATH : ref str;
            NAME : ref str;
          }.
          
        End TraitInfo.
      End TraitInfo.
    End info.
    
    Module registry.
      Module TraitDefinitionRegistry.
        Section TraitDefinitionRegistry.
          Context `{State.Trait}.
          
          Context {E : Set}.
          
          Unset Primitive Projections.
          Record t : Set := {
            marker : core.marker.PhantomData (E);
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_marker : Notation.Dot "marker" := {
            Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
          }.
          Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
            Notation.double_colon x
              :=
              let* x := M.read x in Pure x.(marker) : M _;
          }.
        End TraitDefinitionRegistry.
      End TraitDefinitionRegistry.
      Definition TraitDefinitionRegistry (E : Set) `{State.Trait} : Set :=
        M.val (TraitDefinitionRegistry.t (E := E)).
    End registry.
  End trait_def.
End Wrap_trait_def_1.
Import Wrap_trait_def_1.

Module Wrap_info_1.
  Module info.
    Module TraitMessageInfo.
      Section TraitMessageInfo.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          PAYABLE : bool;
          SELECTOR : array u8;
        }.
        
      End TraitMessageInfo.
    End TraitMessageInfo.
    
    Module TraitInfo.
      Section TraitInfo.
        Context `{State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          ID : u32;
          PATH : ref str;
          NAME : ref str;
        }.
        
      End TraitInfo.
    End TraitInfo.
  End info.
End Wrap_info_1.
Import Wrap_info_1.

Module TraitMessageInfo.
  Section TraitMessageInfo.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      PAYABLE : bool;
      SELECTOR : array u8;
    }.
    
  End TraitMessageInfo.
End TraitMessageInfo.

Module TraitInfo.
  Section TraitInfo.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ID : u32;
      PATH : ref str;
      NAME : ref str;
    }.
    
  End TraitInfo.
End TraitInfo.

Module registry.
  Module TraitDefinitionRegistry.
    Section TraitDefinitionRegistry.
      Context `{State.Trait}.
      
      Context {E : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(marker) : M _;
      }.
    End TraitDefinitionRegistry.
  End TraitDefinitionRegistry.
  Definition TraitDefinitionRegistry (E : Set) `{State.Trait} : Set :=
    M.val (TraitDefinitionRegistry.t (E := E)).
End registry.

Module TraitDefinitionRegistry.
  Section TraitDefinitionRegistry.
    Context `{State.Trait}.
    
    Context {E : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(marker) : M _;
    }.
  End TraitDefinitionRegistry.
End TraitDefinitionRegistry.
Definition TraitDefinitionRegistry (E : Set) `{State.Trait} : Set :=
  M.val (TraitDefinitionRegistry.t (E := E)).

Module chain_extension.
  Module ChainExtensionInstance.
    Section ChainExtensionInstance.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Instance : Set;
        instantiate : M Instance;
      }.
      
      Global Instance Method_Instance `(Trait)
        : Notation.DoubleColonType Self "Instance" := {
        Notation.double_colon_type := Instance;
      }.
    End ChainExtensionInstance.
  End ChainExtensionInstance.
  
  Module ChainExtension.
    Section ChainExtension.
      Context `{State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ErrorCode : Set;
      }.
      
      Global Instance Method_ErrorCode `(Trait)
        : Notation.DoubleColonType Self "ErrorCode" := {
        Notation.double_colon_type := ErrorCode;
      }.
    End ChainExtension.
  End ChainExtension.
  
  Module private.
    Module IsResultSealed.
      Section IsResultSealed.
        Context `{State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End IsResultSealed.
    End IsResultSealed.
    
    Module OutputSealed.
      Section OutputSealed.
        Context `{State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End OutputSealed.
    End OutputSealed.
  End private.
  
  (* Module IsResultType.
    (* Section IsResultType.
      Context `{State.Trait}.
      
      Class Trait
          (Self : Set)
          {ℋ_0 : ink.chain_extension.private.IsResultSealed.Trait Self} :
          Type := {
        Ok : Set;
        Err : Set;
      }.
      
      Global Instance Method_Ok `(Trait)
        : Notation.DoubleColonType Self "Ok" := {
        Notation.double_colon_type := Ok;
      }.
      Global Instance Method_Err `(Trait)
        : Notation.DoubleColonType Self "Err" := {
        Notation.double_colon_type := Err;
      }.
    End IsResultType. *)
  End IsResultType. *)
  
  Module Output.
    Section Output.
      Context `{State.Trait}.
      
      Class Trait
          (Self : Set)
          {T E : Set}
          {ℋ_0 : ink.chain_extension.private.OutputSealed.Trait Self} :
          Type := {
        ReturnType : Set;
      }.
      
      Global Instance Method_ReturnType `(Trait)
        : Notation.DoubleColonType Self "ReturnType" := {
        Notation.double_colon_type := ReturnType;
      }.
    End Output.
  End Output.
  
  Module ValueReturned.
    Section ValueReturned.
      Context `{State.Trait}.
      
      Inductive t : Set := Build.
    End ValueReturned.
  End ValueReturned.
  Definition ValueReturned := @ValueReturned.t.
End chain_extension.

Module ChainExtensionInstance.
  Section ChainExtensionInstance.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Instance : Set;
      instantiate : M Instance;
    }.
    
    Global Instance Method_Instance `(Trait)
      : Notation.DoubleColonType Self "Instance" := {
      Notation.double_colon_type := Instance;
    }.
  End ChainExtensionInstance.
End ChainExtensionInstance.

Module ChainExtension.
  Section ChainExtension.
    Context `{State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ErrorCode : Set;
    }.
    
    Global Instance Method_ErrorCode `(Trait)
      : Notation.DoubleColonType Self "ErrorCode" := {
      Notation.double_colon_type := ErrorCode;
    }.
  End ChainExtension.
End ChainExtension.

(* Module IsResultType.
  (* Section IsResultType.
    Context `{State.Trait}.
    
    Class Trait
        (Self : Set)
        {ℋ_0 : ink.chain_extension.private.IsResultSealed.Trait Self} :
        Type := {
      Ok : Set;
      Err : Set;
    }.
    
    Global Instance Method_Ok `(Trait) : Notation.DoubleColonType Self "Ok" := {
      Notation.double_colon_type := Ok;
    }.
    Global Instance Method_Err `(Trait)
      : Notation.DoubleColonType Self "Err" := {
      Notation.double_colon_type := Err;
    }.
  End IsResultType. *)
End IsResultType. *)

Module Output.
  Section Output.
    Context `{State.Trait}.
    
    Class Trait
        (Self : Set)
        {T E : Set}
        {ℋ_0 : ink.chain_extension.private.OutputSealed.Trait Self} :
        Type := {
      ReturnType : Set;
    }.
    
    Global Instance Method_ReturnType `(Trait)
      : Notation.DoubleColonType Self "ReturnType" := {
      Notation.double_colon_type := ReturnType;
    }.
  End Output.
End Output.

Module ValueReturned.
  Section ValueReturned.
    Context `{State.Trait}.
    
    Inductive t : Set := Build.
  End ValueReturned.
End ValueReturned.
Definition ValueReturned := @ValueReturned.t.

Module Wrap_private_1.
  Module private.
    Module IsResultSealed.
      Section IsResultSealed.
        Context `{State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End IsResultSealed.
    End IsResultSealed.
    
    Module OutputSealed.
      Section OutputSealed.
        Context `{State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End OutputSealed.
    End OutputSealed.
  End private.
End Wrap_private_1.
Import Wrap_private_1.

Module IsResultSealed.
  Section IsResultSealed.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End IsResultSealed.
End IsResultSealed.

Module OutputSealed.
  Section OutputSealed.
    Context `{State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End OutputSealed.
End OutputSealed.

Module contract_ref.
  Module ToAccountId.
    Section ToAccountId.
      Context `{State.Trait}.
      
      Class Trait
          (Self : Set)
          {T : Set}
          {ℋ_0 : ink_env.types.Environment.Trait T} :
          Type := {
        to_account_id
          :
          (ref Self) -> M (ink_env.types.Environment.AccountId (Self := T));
      }.
      
    End ToAccountId.
  End ToAccountId.
End contract_ref.

Module ToAccountId.
  Section ToAccountId.
    Context `{State.Trait}.
    
    Class Trait
        (Self : Set)
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T} :
        Type := {
      to_account_id
        :
        (ref Self) -> M (ink_env.types.Environment.AccountId (Self := T));
    }.
    
  End ToAccountId.
End ToAccountId.

Module env_access.
  Module EnvAccess.
    Section EnvAccess.
      Context `{State.Trait}.
      
      Context {E : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (ref E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(marker) : M _;
      }.
    End EnvAccess.
  End EnvAccess.
  Definition EnvAccess (E : Set) `{State.Trait} : Set :=
    M.val (EnvAccess.t (E := E)).
End env_access.

Module EnvAccess.
  Section EnvAccess.
    Context `{State.Trait}.
    
    Context {E : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (ref E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot x := let* x := M.read x in Pure x.(marker) : M _;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(marker) : M _;
    }.
  End EnvAccess.
End EnvAccess.
Definition EnvAccess (E : Set) `{State.Trait} : Set :=
  M.val (EnvAccess.t (E := E)).
