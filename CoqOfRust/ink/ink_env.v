(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
Require CoqOfRust.num_traits.

Require CoqOfRust.ink.ink_primitives.
Require CoqOfRust.ink.ink_storage_traits.
Require CoqOfRust.ink.parity_scale_codec.
Require CoqOfRust.ink.scale_decode.
Require CoqOfRust.ink.scale_encode.
Require CoqOfRust.ink.ink_engine.

Module arithmetic.
  Module Saturating.
    Section Saturating.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        saturating_add : Self -> Self -> M Self;
        saturating_sub : Self -> Self -> M Self;
        saturating_mul : Self -> Self -> M Self;
        saturating_pow : Self -> usize -> M Self;
      }.
      
    End Saturating.
  End Saturating.
  
  Module BaseArithmetic.
    Section BaseArithmetic.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: core.marker.Sized.Trait Self;
        ℒ_1 :: core.convert.From.Trait Self (T := u8);
        ℒ_2 :: num_traits.bounds.Bounded.Trait Self;
        ℒ_3 :: core.cmp.Ord.Trait Self;
        ℒ_4 :: core.cmp.PartialOrd.Trait Self (Rhs := Self);
        ℒ_5 :: num_traits.identities.Zero.Trait Self;
        ℒ_6 :: num_traits.identities.One.Trait Self;
        ℒ_7 :: num_traits.bounds.Bounded.Trait Self;
        ℒ_8 :: core.ops.arith.Add.Trait Self (Rhs := Self);
        ℒ_9 :: core.ops.arith.AddAssign.Trait Self (Rhs := Self);
        ℒ_10 :: core.ops.arith.Sub.Trait Self (Rhs := Self);
        ℒ_11 :: core.ops.arith.SubAssign.Trait Self (Rhs := Self);
        ℒ_12 :: core.ops.arith.Mul.Trait Self (Rhs := Self);
        ℒ_13 :: core.ops.arith.MulAssign.Trait Self (Rhs := Self);
        ℒ_14 :: core.ops.arith.Div.Trait Self (Rhs := Self);
        ℒ_15 :: core.ops.arith.DivAssign.Trait Self (Rhs := Self);
        ℒ_16 :: num_traits.ops.checked.CheckedMul.Trait Self;
        ℒ_17 :: ink_env.arithmetic.Saturating.Trait Self;
        ℒ_18 :: core.convert.TryFrom.Trait Self (T := u16);
        ℒ_19 :: core.convert.TryFrom.Trait Self (T := u32);
        ℒ_20 :: core.convert.TryFrom.Trait Self (T := u64);
        ℒ_21 :: core.convert.TryFrom.Trait Self (T := u128);
        ℒ_22 :: core.convert.TryFrom.Trait Self (T := usize);
        ℒ_23 :: core.convert.TryInto.Trait Self (T := u16);
        ℒ_24 :: core.convert.TryInto.Trait Self (T := u32);
        ℒ_25 :: core.convert.TryInto.Trait Self (T := u64);
        ℒ_26 :: core.convert.TryInto.Trait Self (T := u128);
        ℒ_27 :: core.convert.TryInto.Trait Self (T := usize);
      }.
      
    End BaseArithmetic.
  End BaseArithmetic.
  
  Module AtLeast32Bit.
    Section AtLeast32Bit.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: ink_env.arithmetic.BaseArithmetic.Trait Self;
        ℒ_1 :: core.convert.From.Trait Self (T := u16);
        ℒ_2 :: core.convert.From.Trait Self (T := u32);
      }.
      
    End AtLeast32Bit.
  End AtLeast32Bit.
  
  Module AtLeast32BitUnsigned.
    Section AtLeast32BitUnsigned.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: ink_env.arithmetic.AtLeast32Bit.Trait Self;
        ℒ_1 :: num_traits.sign.Unsigned.Trait Self;
      }.
      
    End AtLeast32BitUnsigned.
  End AtLeast32BitUnsigned.
End arithmetic.

Module types.
  Module FromLittleEndian.
    Section FromLittleEndian.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Bytes : Set;
        ℒ_0 :: core.default.Default.Trait Bytes;
        ℒ_1 :: core.convert.AsRef.Trait Bytes (T := Slice u8);
        ℒ_2 :: core.convert.AsMut.Trait Bytes (T := Slice u8);
        from_le_bytes : Bytes -> M Self;
      }.
      
      Global Instance Method_Bytes `(Trait) :
        Notation.DoubleColonType Self "Bytes" := {
        Notation.double_colon_type := Bytes;
      }.
    End FromLittleEndian.
  End FromLittleEndian.
  
  Module AccountIdGuard.
    Section AccountIdGuard.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End AccountIdGuard.
  End AccountIdGuard.
  
  Module CodecAsType.
    Section CodecAsType.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: scale_decode.DecodeAsType.Trait Self;
        ℒ_1 :: scale_encode.EncodeAsType.Trait Self;
      }.
      
    End CodecAsType.
  End CodecAsType.
  
  Module Environment.
    Section Environment.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        MAX_EVENT_TOPICS : usize;
        AccountId : Set;
        ℒ_0 :: parity_scale_codec.codec.Codec.Trait AccountId;
        ℒ_1 :: ink_env.types.CodecAsType.Trait AccountId;
        ℒ_2 :: core.clone.Clone.Trait AccountId;
        ℒ_3 ::
          core.cmp.PartialEq.Trait AccountId
            (Rhs := core.cmp.PartialEq.Default.Rhs AccountId);
        ℒ_4 :: core.cmp.Eq.Trait AccountId;
        ℒ_5 :: core.cmp.Ord.Trait AccountId;
        ℒ_6 :: core.convert.AsRef.Trait AccountId (T := Slice u8);
        ℒ_7 :: core.convert.AsMut.Trait AccountId (T := Slice u8);
        Balance : Set;
        ℒ_8 :: parity_scale_codec.codec.Codec.Trait Balance;
        ℒ_9 :: ink_env.types.CodecAsType.Trait Balance;
        ℒ_10 :: core.marker.Copy.Trait Balance;
        ℒ_11 :: core.clone.Clone.Trait Balance;
        ℒ_12 ::
          core.cmp.PartialEq.Trait Balance
            (Rhs := core.cmp.PartialEq.Default.Rhs Balance);
        ℒ_13 :: core.cmp.Eq.Trait Balance;
        ℒ_14 :: ink_env.arithmetic.AtLeast32BitUnsigned.Trait Balance;
        ℒ_15 :: ink_env.types.FromLittleEndian.Trait Balance;
        Hash : Set;
        ℒ_16 :: parity_scale_codec.codec.Codec.Trait Hash;
        ℒ_17 :: ink_env.types.CodecAsType.Trait Hash;
        ℒ_18 :: core.marker.Copy.Trait Hash;
        ℒ_19 :: core.clone.Clone.Trait Hash;
        ℒ_20 :: ink_primitives.types.Clear.Trait Hash;
        ℒ_21 ::
          core.cmp.PartialEq.Trait Hash
            (Rhs := core.cmp.PartialEq.Default.Rhs Hash);
        ℒ_22 :: core.cmp.Eq.Trait Hash;
        ℒ_23 :: core.cmp.Ord.Trait Hash;
        ℒ_24 :: core.convert.AsRef.Trait Hash (T := Slice u8);
        ℒ_25 :: core.convert.AsMut.Trait Hash (T := Slice u8);
        Timestamp : Set;
        ℒ_26 :: parity_scale_codec.codec.Codec.Trait Timestamp;
        ℒ_27 :: ink_env.types.CodecAsType.Trait Timestamp;
        ℒ_28 :: core.marker.Copy.Trait Timestamp;
        ℒ_29 :: core.clone.Clone.Trait Timestamp;
        ℒ_30 ::
          core.cmp.PartialEq.Trait Timestamp
            (Rhs := core.cmp.PartialEq.Default.Rhs Timestamp);
        ℒ_31 :: core.cmp.Eq.Trait Timestamp;
        ℒ_32 :: ink_env.arithmetic.AtLeast32BitUnsigned.Trait Timestamp;
        ℒ_33 :: ink_env.types.FromLittleEndian.Trait Timestamp;
        BlockNumber : Set;
        ℒ_34 :: parity_scale_codec.codec.Codec.Trait BlockNumber;
        ℒ_35 :: ink_env.types.CodecAsType.Trait BlockNumber;
        ℒ_36 :: core.marker.Copy.Trait BlockNumber;
        ℒ_37 :: core.clone.Clone.Trait BlockNumber;
        ℒ_38 ::
          core.cmp.PartialEq.Trait BlockNumber
            (Rhs := core.cmp.PartialEq.Default.Rhs BlockNumber);
        ℒ_39 :: core.cmp.Eq.Trait BlockNumber;
        ℒ_40 :: ink_env.arithmetic.AtLeast32BitUnsigned.Trait BlockNumber;
        ℒ_41 :: ink_env.types.FromLittleEndian.Trait BlockNumber;
        ChainExtension : Set;
      }.
      
      Global Instance Method_AccountId `(Trait) :
        Notation.DoubleColonType Self "AccountId" := {
        Notation.double_colon_type := AccountId;
      }.
      Global Instance Method_Balance `(Trait) :
        Notation.DoubleColonType Self "Balance" := {
        Notation.double_colon_type := Balance;
      }.
      Global Instance Method_Hash `(Trait) :
        Notation.DoubleColonType Self "Hash" := {
        Notation.double_colon_type := Hash;
      }.
      Global Instance Method_Timestamp `(Trait) :
        Notation.DoubleColonType Self "Timestamp" := {
        Notation.double_colon_type := Timestamp;
      }.
      Global Instance Method_BlockNumber `(Trait) :
        Notation.DoubleColonType Self "BlockNumber" := {
        Notation.double_colon_type := BlockNumber;
      }.
      Global Instance Method_ChainExtension `(Trait) :
        Notation.DoubleColonType Self "ChainExtension" := {
        Notation.double_colon_type := ChainExtension;
      }.
    End Environment.
  End Environment.
  
  Module NoChainExtension.
    Inductive t `{ℋ : State.Trait} : Set :=
    .
  End NoChainExtension.
  Definition NoChainExtension `{ℋ : State.Trait} : Set := NoChainExtension.t.
  
  Module DefaultEnvironment.
    Inductive t `{ℋ : State.Trait} : Set :=
    .
  End DefaultEnvironment.
  Definition DefaultEnvironment `{ℋ : State.Trait} : Set :=
    DefaultEnvironment.t.
  
  Definition Balance `{ℋ : State.Trait} : Set := u128.
  
  Definition Timestamp `{ℋ : State.Trait} : Set := u64.
  
  Definition Gas `{ℋ : State.Trait} : Set := u64.
  
  Definition BlockNumber `{ℋ : State.Trait} : Set := u32.
End types.

Module FromLittleEndian.
  Section FromLittleEndian.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Bytes : Set;
      ℒ_0 :: core.default.Default.Trait Bytes;
      ℒ_1 :: core.convert.AsRef.Trait Bytes (T := Slice u8);
      ℒ_2 :: core.convert.AsMut.Trait Bytes (T := Slice u8);
      from_le_bytes : Bytes -> M Self;
    }.
    
    Global Instance Method_Bytes `(Trait) :
      Notation.DoubleColonType Self "Bytes" := {
      Notation.double_colon_type := Bytes;
    }.
  End FromLittleEndian.
End FromLittleEndian.

Module AccountIdGuard.
  Section AccountIdGuard.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End AccountIdGuard.
End AccountIdGuard.

Module CodecAsType.
  Section CodecAsType.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: scale_decode.DecodeAsType.Trait Self;
      ℒ_1 :: scale_encode.EncodeAsType.Trait Self;
    }.
    
  End CodecAsType.
End CodecAsType.

Module Environment.
  Section Environment.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      MAX_EVENT_TOPICS : usize;
      AccountId : Set;
      ℒ_0 :: parity_scale_codec.codec.Codec.Trait AccountId;
      ℒ_1 :: ink_env.types.CodecAsType.Trait AccountId;
      ℒ_2 :: core.clone.Clone.Trait AccountId;
      ℒ_3 ::
        core.cmp.PartialEq.Trait AccountId
          (Rhs := core.cmp.PartialEq.Default.Rhs AccountId);
      ℒ_4 :: core.cmp.Eq.Trait AccountId;
      ℒ_5 :: core.cmp.Ord.Trait AccountId;
      ℒ_6 :: core.convert.AsRef.Trait AccountId (T := Slice u8);
      ℒ_7 :: core.convert.AsMut.Trait AccountId (T := Slice u8);
      Balance : Set;
      ℒ_8 :: parity_scale_codec.codec.Codec.Trait Balance;
      ℒ_9 :: ink_env.types.CodecAsType.Trait Balance;
      ℒ_10 :: core.marker.Copy.Trait Balance;
      ℒ_11 :: core.clone.Clone.Trait Balance;
      ℒ_12 ::
        core.cmp.PartialEq.Trait Balance
          (Rhs := core.cmp.PartialEq.Default.Rhs Balance);
      ℒ_13 :: core.cmp.Eq.Trait Balance;
      ℒ_14 :: ink_env.arithmetic.AtLeast32BitUnsigned.Trait Balance;
      ℒ_15 :: ink_env.types.FromLittleEndian.Trait Balance;
      Hash : Set;
      ℒ_16 :: parity_scale_codec.codec.Codec.Trait Hash;
      ℒ_17 :: ink_env.types.CodecAsType.Trait Hash;
      ℒ_18 :: core.marker.Copy.Trait Hash;
      ℒ_19 :: core.clone.Clone.Trait Hash;
      ℒ_20 :: ink_primitives.types.Clear.Trait Hash;
      ℒ_21 ::
        core.cmp.PartialEq.Trait Hash
          (Rhs := core.cmp.PartialEq.Default.Rhs Hash);
      ℒ_22 :: core.cmp.Eq.Trait Hash;
      ℒ_23 :: core.cmp.Ord.Trait Hash;
      ℒ_24 :: core.convert.AsRef.Trait Hash (T := Slice u8);
      ℒ_25 :: core.convert.AsMut.Trait Hash (T := Slice u8);
      Timestamp : Set;
      ℒ_26 :: parity_scale_codec.codec.Codec.Trait Timestamp;
      ℒ_27 :: ink_env.types.CodecAsType.Trait Timestamp;
      ℒ_28 :: core.marker.Copy.Trait Timestamp;
      ℒ_29 :: core.clone.Clone.Trait Timestamp;
      ℒ_30 ::
        core.cmp.PartialEq.Trait Timestamp
          (Rhs := core.cmp.PartialEq.Default.Rhs Timestamp);
      ℒ_31 :: core.cmp.Eq.Trait Timestamp;
      ℒ_32 :: ink_env.arithmetic.AtLeast32BitUnsigned.Trait Timestamp;
      ℒ_33 :: ink_env.types.FromLittleEndian.Trait Timestamp;
      BlockNumber : Set;
      ℒ_34 :: parity_scale_codec.codec.Codec.Trait BlockNumber;
      ℒ_35 :: ink_env.types.CodecAsType.Trait BlockNumber;
      ℒ_36 :: core.marker.Copy.Trait BlockNumber;
      ℒ_37 :: core.clone.Clone.Trait BlockNumber;
      ℒ_38 ::
        core.cmp.PartialEq.Trait BlockNumber
          (Rhs := core.cmp.PartialEq.Default.Rhs BlockNumber);
      ℒ_39 :: core.cmp.Eq.Trait BlockNumber;
      ℒ_40 :: ink_env.arithmetic.AtLeast32BitUnsigned.Trait BlockNumber;
      ℒ_41 :: ink_env.types.FromLittleEndian.Trait BlockNumber;
      ChainExtension : Set;
    }.
    
    Global Instance Method_AccountId `(Trait) :
      Notation.DoubleColonType Self "AccountId" := {
      Notation.double_colon_type := AccountId;
    }.
    Global Instance Method_Balance `(Trait) :
      Notation.DoubleColonType Self "Balance" := {
      Notation.double_colon_type := Balance;
    }.
    Global Instance Method_Hash `(Trait) :
      Notation.DoubleColonType Self "Hash" := {
      Notation.double_colon_type := Hash;
    }.
    Global Instance Method_Timestamp `(Trait) :
      Notation.DoubleColonType Self "Timestamp" := {
      Notation.double_colon_type := Timestamp;
    }.
    Global Instance Method_BlockNumber `(Trait) :
      Notation.DoubleColonType Self "BlockNumber" := {
      Notation.double_colon_type := BlockNumber;
    }.
    Global Instance Method_ChainExtension `(Trait) :
      Notation.DoubleColonType Self "ChainExtension" := {
      Notation.double_colon_type := ChainExtension;
    }.
  End Environment.
End Environment.

Module NoChainExtension.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End NoChainExtension.
Definition NoChainExtension `{ℋ : State.Trait} : Set := NoChainExtension.t.

Module DefaultEnvironment.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End DefaultEnvironment.
Definition DefaultEnvironment `{ℋ : State.Trait} : Set := DefaultEnvironment.t.

Definition Balance `{ℋ : State.Trait} : Set := u128.

Definition Timestamp `{ℋ : State.Trait} : Set := u64.

Definition Gas `{ℋ : State.Trait} : Set := u64.

Definition BlockNumber `{ℋ : State.Trait} : Set := u32.

Module contract.
  Module ContractEnv.
    Section ContractEnv.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Env : Set;
        ℒ_0 :: ink_env.types.Environment.Trait Env;
      }.
      
      Global Instance Method_Env `(Trait) :
        Notation.DoubleColonType Self "Env" := {
        Notation.double_colon_type := Env;
      }.
    End ContractEnv.
  End ContractEnv.
  
  Module ContractReference.
    Section ContractReference.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
      }.
      
      Global Instance Method_Type_ `(Trait) :
        Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractReference.
  End ContractReference.
End contract.

Module call.
  Module common.
    Module ReturnType.
      Section ReturnType.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : core.marker.PhantomData (T);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
        }.
      End ReturnType.
    End ReturnType.
    Definition ReturnType `{ℋ : State.Trait} (T : Set) : Set :=
      M.val (ReturnType.t (T := T)).
    
    Module Set_.
      Section Set_.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
        }.
      End Set_.
    End Set_.
    Definition Set_ `{ℋ : State.Trait} (T : Set) : Set :=
      M.val (Set_.t (T := T)).
    
    Module Unset_.
      Section Unset_.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : core.marker.PhantomData (T);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
        }.
      End Unset_.
    End Unset_.
    Definition Unset_ `{ℋ : State.Trait} (T : Set) : Set :=
      M.val (Unset_.t (T := T)).
    
    Module Unwrap.
      Section Unwrap.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Output : Set;
          unwrap_or_else
            {F : Set}
            {ℋ_0 : core.ops.function.FnOnce.Trait F (Args := unit)} :
            Self -> F -> M Output;
        }.
        
        Global Instance Method_Output `(Trait) :
          Notation.DoubleColonType Self "Output" := {
          Notation.double_colon_type := Output;
        }.
      End Unwrap.
    End Unwrap.
  End common.
  
  Module selector.
    Module Selector.
      Section Selector.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Record t : Set := {
          bytes : array u8;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_bytes : Notation.Dot "bytes" := {
          Notation.dot x := let* x := M.read x in Pure x.(bytes) : M _;
        }.
        Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
          Notation.double_colon x := let* x := M.read x in Pure x.(bytes) : M _;
        }.
      End Selector.
    End Selector.
    Definition Selector `{ℋ : State.Trait} : Set := M.val Selector.t.
  End selector.
  
  Module execution_input.
    Module ExecutionInput.
      Section ExecutionInput.
        Context `{ℋ : State.Trait}.
        
        Context {Args : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          selector : ink_env.call.selector.Selector;
          args : Args;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_selector : Notation.Dot "selector" := {
          Notation.dot x := let* x := M.read x in Pure x.(selector) : M _;
        }.
        Global Instance Get_AF_selector : Notation.DoubleColon t "selector" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(selector) : M _;
        }.
        Global Instance Get_args : Notation.Dot "args" := {
          Notation.dot x := let* x := M.read x in Pure x.(args) : M _;
        }.
        Global Instance Get_AF_args : Notation.DoubleColon t "args" := {
          Notation.double_colon x := let* x := M.read x in Pure x.(args) : M _;
        }.
      End ExecutionInput.
    End ExecutionInput.
    Definition ExecutionInput (Args : Set) `{ℋ : State.Trait} : Set :=
      M.val (ExecutionInput.t (Args := Args)).
    
    Module ArgumentList.
      Section ArgumentList.
        Context `{ℋ : State.Trait}.
        
        Context {Head Rest : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          head : Head;
          rest : Rest;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_head : Notation.Dot "head" := {
          Notation.dot x := let* x := M.read x in Pure x.(head) : M _;
        }.
        Global Instance Get_AF_head : Notation.DoubleColon t "head" := {
          Notation.double_colon x := let* x := M.read x in Pure x.(head) : M _;
        }.
        Global Instance Get_rest : Notation.Dot "rest" := {
          Notation.dot x := let* x := M.read x in Pure x.(rest) : M _;
        }.
        Global Instance Get_AF_rest : Notation.DoubleColon t "rest" := {
          Notation.double_colon x := let* x := M.read x in Pure x.(rest) : M _;
        }.
      End ArgumentList.
    End ArgumentList.
    Definition ArgumentList (Head Rest : Set) `{ℋ : State.Trait} : Set :=
      M.val (ArgumentList.t (Head := Head) (Rest := Rest)).
    
    Module Argument.
      Section Argument.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          arg : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_arg : Notation.Dot "arg" := {
          Notation.dot x := let* x := M.read x in Pure x.(arg) : M _;
        }.
        Global Instance Get_AF_arg : Notation.DoubleColon t "arg" := {
          Notation.double_colon x := let* x := M.read x in Pure x.(arg) : M _;
        }.
      End Argument.
    End Argument.
    Definition Argument (T : Set) `{ℋ : State.Trait} : Set :=
      M.val (Argument.t (T := T)).
    
    Definition ArgsList `{ℋ : State.Trait} (Head Rest : Set) : Set :=
      ink_env.call.execution_input.ArgumentList
        (ink_env.call.execution_input.Argument Head)
        Rest.
    
    Module ArgumentListEnd.
      Section ArgumentListEnd.
        Context `{ℋ : State.Trait}.
        
        Inductive t : Set := Build.
      End ArgumentListEnd.
    End ArgumentListEnd.
    Definition ArgumentListEnd := @ArgumentListEnd.t.
    
    Definition EmptyArgumentList `{ℋ : State.Trait} : Set :=
      ink_env.call.execution_input.ArgumentList
        ink_env.call.execution_input.ArgumentListEnd
        ink_env.call.execution_input.ArgumentListEnd.
  End execution_input.
  
  Module create_builder.
    Module state.
      Module Salt.
        Inductive t `{ℋ : State.Trait} : Set :=
        .
      End Salt.
      Definition Salt `{ℋ : State.Trait} : Set := Salt.t.
    End state.
    
    Module FromAccountId.
      Section FromAccountId.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) {T : Set} : Type := {
          ℒ_0 :: ink_env.types.Environment.Trait T;
          from_account_id :
            (ink_env.types.Environment.AccountId
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))
              ->
              M Self;
        }.
        
      End FromAccountId.
    End FromAccountId.
    
    Module ConstructorReturnType.
      Section ConstructorReturnType.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) {C : Set} : Type := {
          IS_RESULT : bool;
          Output : Set;
          Error : Set;
          ℒ_0 :: parity_scale_codec.codec.Decode.Trait Error;
          ok : C -> M Output;
        }.
        
        Global Instance Method_Output `(Trait) :
          Notation.DoubleColonType Self "Output" := {
          Notation.double_colon_type := Output;
        }.
        Global Instance Method_Error `(Trait) :
          Notation.DoubleColonType Self "Error" := {
          Notation.double_colon_type := Error;
        }.
      End ConstructorReturnType.
    End ConstructorReturnType.
    
    Module CreateParams.
      Section CreateParams.
        Context `{ℋ : State.Trait}.
        
        Context {E ContractRef Args Salt R : Set}.
        
        Context {ℋ_0 : ink_env.types.Environment.Trait E}.
        Unset Primitive Projections.
        Record t : Set := {
          code_hash : E::type["Hash"];
          gas_limit : u64;
          endowment : E::type["Balance"];
          exec_input : ink_env.call.execution_input.ExecutionInput Args;
          salt_bytes : Salt;
          _return_type : ink_env.call.common.ReturnType R;
          _phantom : core.marker.PhantomData (ContractRef);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_code_hash : Notation.Dot "code_hash" := {
          Notation.dot x := let* x := M.read x in Pure x.(code_hash) : M _;
        }.
        Global Instance Get_AF_code_hash :
          Notation.DoubleColon t "code_hash" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(code_hash) : M _;
        }.
        Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
          Notation.dot x := let* x := M.read x in Pure x.(gas_limit) : M _;
        }.
        Global Instance Get_AF_gas_limit :
          Notation.DoubleColon t "gas_limit" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(gas_limit) : M _;
        }.
        Global Instance Get_endowment : Notation.Dot "endowment" := {
          Notation.dot x := let* x := M.read x in Pure x.(endowment) : M _;
        }.
        Global Instance Get_AF_endowment :
          Notation.DoubleColon t "endowment" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(endowment) : M _;
        }.
        Global Instance Get_exec_input : Notation.Dot "exec_input" := {
          Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
        }.
        Global Instance Get_AF_exec_input :
          Notation.DoubleColon t "exec_input" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(exec_input) : M _;
        }.
        Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
          Notation.dot x := let* x := M.read x in Pure x.(salt_bytes) : M _;
        }.
        Global Instance Get_AF_salt_bytes :
          Notation.DoubleColon t "salt_bytes" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(salt_bytes) : M _;
        }.
        Global Instance Get__return_type : Notation.Dot "_return_type" := {
          Notation.dot x := let* x := M.read x in Pure x.(_return_type) : M _;
        }.
        Global Instance Get_AF__return_type :
          Notation.DoubleColon t "_return_type" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(_return_type) : M _;
        }.
        Global Instance Get__phantom : Notation.Dot "_phantom" := {
          Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
        }.
        Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(_phantom) : M _;
        }.
      End CreateParams.
    End CreateParams.
    Definition CreateParams
        (E ContractRef Args Salt R : Set)
        `{ℋ : State.Trait}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        : Set :=
      M.val
        (CreateParams.t
          (E := E)
          (ContractRef := ContractRef)
          (Args := Args)
          (Salt := Salt)
          (R := R)).
    
    Module CreateBuilder.
      Section CreateBuilder.
        Context `{ℋ : State.Trait}.
        
        Context
          {E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set}.
        
        Context {ℋ_0 : ink_env.types.Environment.Trait E}.
        Unset Primitive Projections.
        Record t : Set := {
          code_hash : CodeHash;
          gas_limit : GasLimit;
          endowment : Endowment;
          exec_input : Args;
          salt : Salt;
          return_type : RetType;
          _phantom : core.marker.PhantomData (E * ContractRef);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_code_hash : Notation.Dot "code_hash" := {
          Notation.dot x := let* x := M.read x in Pure x.(code_hash) : M _;
        }.
        Global Instance Get_AF_code_hash :
          Notation.DoubleColon t "code_hash" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(code_hash) : M _;
        }.
        Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
          Notation.dot x := let* x := M.read x in Pure x.(gas_limit) : M _;
        }.
        Global Instance Get_AF_gas_limit :
          Notation.DoubleColon t "gas_limit" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(gas_limit) : M _;
        }.
        Global Instance Get_endowment : Notation.Dot "endowment" := {
          Notation.dot x := let* x := M.read x in Pure x.(endowment) : M _;
        }.
        Global Instance Get_AF_endowment :
          Notation.DoubleColon t "endowment" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(endowment) : M _;
        }.
        Global Instance Get_exec_input : Notation.Dot "exec_input" := {
          Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
        }.
        Global Instance Get_AF_exec_input :
          Notation.DoubleColon t "exec_input" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(exec_input) : M _;
        }.
        Global Instance Get_salt : Notation.Dot "salt" := {
          Notation.dot x := let* x := M.read x in Pure x.(salt) : M _;
        }.
        Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
          Notation.double_colon x := let* x := M.read x in Pure x.(salt) : M _;
        }.
        Global Instance Get_return_type : Notation.Dot "return_type" := {
          Notation.dot x := let* x := M.read x in Pure x.(return_type) : M _;
        }.
        Global Instance Get_AF_return_type :
          Notation.DoubleColon t "return_type" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(return_type) : M _;
        }.
        Global Instance Get__phantom : Notation.Dot "_phantom" := {
          Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
        }.
        Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(_phantom) : M _;
        }.
      End CreateBuilder.
    End CreateBuilder.
    Definition CreateBuilder
        (E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set)
        `{ℋ : State.Trait}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        : Set :=
      M.val
        (CreateBuilder.t
          (E := E)
          (ContractRef := ContractRef)
          (CodeHash := CodeHash)
          (GasLimit := GasLimit)
          (Endowment := Endowment)
          (Args := Args)
          (Salt := Salt)
          (RetType := RetType)).
  End create_builder.
End call.

Module engine.
  Module off_chain.
    Module call_data.
      Module CallData.
        Section CallData.
          Context `{ℋ : State.Trait}.
          
          Unset Primitive Projections.
          Record t : Set := {
            bytes : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_bytes : Notation.Dot "bytes" := {
            Notation.dot x := let* x := M.read x in Pure x.(bytes) : M _;
          }.
          Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
            Notation.double_colon x :=
              let* x := M.read x in Pure x.(bytes) : M _;
          }.
        End CallData.
      End CallData.
      Definition CallData `{ℋ : State.Trait} : Set := M.val CallData.t.
    End call_data.
    
    Module impls.
      Module TopicsBuilder.
        Section TopicsBuilder.
          Context `{ℋ : State.Trait}.
          
          Unset Primitive Projections.
          Record t : Set := {
            topics :
              alloc.vec.Vec
                (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)
                alloc.vec.Vec.Default.A;
          }.
          Global Set Primitive Projections.
          
          Global Instance Get_topics : Notation.Dot "topics" := {
            Notation.dot x := let* x := M.read x in Pure x.(topics) : M _;
          }.
          Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
            Notation.double_colon x :=
              let* x := M.read x in Pure x.(topics) : M _;
          }.
        End TopicsBuilder.
      End TopicsBuilder.
      Definition TopicsBuilder `{ℋ : State.Trait} : Set :=
        M.val TopicsBuilder.t.
    End impls.
    
    Module EnvInstance.
      Section EnvInstance.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Record t : Set := {
          engine : ink_engine.ext.Engine;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_engine : Notation.Dot "engine" := {
          Notation.dot x := let* x := M.read x in Pure x.(engine) : M _;
        }.
        Global Instance Get_AF_engine : Notation.DoubleColon t "engine" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(engine) : M _;
        }.
      End EnvInstance.
    End EnvInstance.
    Definition EnvInstance `{ℋ : State.Trait} : Set := M.val EnvInstance.t.
    
    Module AccountError.
      Inductive t `{ℋ : State.Trait} : Set :=
      | Decoding (_ : parity_scale_codec.error.Error)
      | UnexpectedUserAccount
      | NoAccountForId (_ : alloc.vec.Vec u8 alloc.vec.Vec.Default.A).
    End AccountError.
    Definition AccountError `{ℋ : State.Trait} : Set := AccountError.t.
    
    Module OffChainError.
      Inductive t `{ℋ : State.Trait} : Set :=
      | Account (_ : ink_env.engine.off_chain.AccountError)
      | UninitializedBlocks
      | UninitializedExecutionContext
      | UnregisteredChainExtension.
    End OffChainError.
    Definition OffChainError `{ℋ : State.Trait} : Set := OffChainError.t.
  End off_chain.
End engine.

Module hash.
  Module private.
    Module Sealed.
      Section Sealed.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End Sealed.
    End Sealed.
  End private.
  
  Module HashOutput.
    Section HashOutput.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: ink_env.hash.private.Sealed.Trait Self;
        Type_ : Set;
        ℒ_1 :: core.default.Default.Trait Type_;
      }.
      
      Global Instance Method_Type_ `(Trait) :
        Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End HashOutput.
  End HashOutput.
  
  Module CryptoHash.
    Section CryptoHash.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: ink_env.hash.HashOutput.Trait Self;
        hash :
          (ref (Slice u8)) ->
            (mut_ref
              (ink_env.hash.HashOutput.Type_
                (Self := Self)
                (Trait := ltac:(try clear Trait; hauto l: on))))
            ->
            M unit;
      }.
      
    End CryptoHash.
  End CryptoHash.
  
  Module Sha2x256.
    Inductive t `{ℋ : State.Trait} : Set :=
    .
  End Sha2x256.
  Definition Sha2x256 `{ℋ : State.Trait} : Set := Sha2x256.t.
  
  Module Keccak256.
    Inductive t `{ℋ : State.Trait} : Set :=
    .
  End Keccak256.
  Definition Keccak256 `{ℋ : State.Trait} : Set := Keccak256.t.
  
  Module Blake2x256.
    Inductive t `{ℋ : State.Trait} : Set :=
    .
  End Blake2x256.
  Definition Blake2x256 `{ℋ : State.Trait} : Set := Blake2x256.t.
  
  Module Blake2x128.
    Inductive t `{ℋ : State.Trait} : Set :=
    .
  End Blake2x128.
  Definition Blake2x128 `{ℋ : State.Trait} : Set := Blake2x128.t.
End hash.

Module topics.
  Module TopicsBuilderBackend.
    Section TopicsBuilderBackend.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) {E : Set} : Type := {
        ℒ_0 :: ink_env.types.Environment.Trait E;
        Output : Set;
        expect : (mut_ref Self) -> usize -> M unit;
        push_topic {T : Set} {ℋ_0 : parity_scale_codec.codec.Encode.Trait T} :
          (mut_ref Self) -> (ref T) -> M unit;
        output : Self -> M Output;
      }.
      
      Global Instance Method_Output `(Trait) :
        Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
    End TopicsBuilderBackend.
  End TopicsBuilderBackend.
  
  Module TopicsBuilder.
    Section TopicsBuilder.
      Context `{ℋ : State.Trait}.
      
      Context {S E B : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        backend : B;
        state : core.marker.PhantomData (S * E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_backend : Notation.Dot "backend" := {
        Notation.dot x := let* x := M.read x in Pure x.(backend) : M _;
      }.
      Global Instance Get_AF_backend : Notation.DoubleColon t "backend" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(backend) : M _;
      }.
      Global Instance Get_state : Notation.Dot "state" := {
        Notation.dot x := let* x := M.read x in Pure x.(state) : M _;
      }.
      Global Instance Get_AF_state : Notation.DoubleColon t "state" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(state) : M _;
      }.
    End TopicsBuilder.
  End TopicsBuilder.
  Definition TopicsBuilder (S E B : Set) `{ℋ : State.Trait} : Set :=
    M.val (TopicsBuilder.t (S := S) (E := E) (B := B)).
  
  Module state.
    Module Uninit.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End Uninit.
    Definition Uninit `{ℋ : State.Trait} : Set := Uninit.t.
    
    Module HasRemainingTopics.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End HasRemainingTopics.
    Definition HasRemainingTopics `{ℋ : State.Trait} : Set :=
      HasRemainingTopics.t.
    
    Module NoRemainingTopics.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End NoRemainingTopics.
    Definition NoRemainingTopics `{ℋ : State.Trait} : Set :=
      NoRemainingTopics.t.
  End state.
  
  Module SomeRemainingTopics.
    Section SomeRemainingTopics.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Next : Set;
      }.
      
      Global Instance Method_Next `(Trait) :
        Notation.DoubleColonType Self "Next" := {
        Notation.double_colon_type := Next;
      }.
    End SomeRemainingTopics.
  End SomeRemainingTopics.
  
  Module EventTopicsAmount.
    Section EventTopicsAmount.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        AMOUNT : usize;
      }.
      
    End EventTopicsAmount.
  End EventTopicsAmount.
  
  Module Topics.
    Section Topics.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        RemainingTopics : Set;
        ℒ_0 :: ink_env.topics.EventTopicsAmount.Trait RemainingTopics;
        topics
          {E B : Set}
          {ℋ_0 : ink_env.types.Environment.Trait E}
          {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :
          (ref Self) ->
            (ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B) ->
            M
              (ink_env.topics.TopicsBuilderBackend.Output
                (Self := B)
                (Trait := ltac:(try clear Trait; hauto l: on)));
      }.
      
      Global Instance Method_RemainingTopics `(Trait) :
        Notation.DoubleColonType Self "RemainingTopics" := {
        Notation.double_colon_type := RemainingTopics;
      }.
    End Topics.
  End Topics.
  
  Module PrefixedValue.
    Section PrefixedValue.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        prefix : ref (Slice u8);
        value : ref T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_prefix : Notation.Dot "prefix" := {
        Notation.dot x := let* x := M.read x in Pure x.(prefix) : M _;
      }.
      Global Instance Get_AF_prefix : Notation.DoubleColon t "prefix" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(prefix) : M _;
      }.
      Global Instance Get_value : Notation.Dot "value" := {
        Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
      }.
      Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
      }.
    End PrefixedValue.
  End PrefixedValue.
  Definition PrefixedValue (T : Set) `{ℋ : State.Trait} : Set :=
    M.val (PrefixedValue.t (T := T)).
End topics.

Module backend_and_call_builder_and_engine_and_engine_test_api_and_error.
  Module Error.
    Inductive t `{ℋ : State.Trait} : Set :=
    | Decode (_ : parity_scale_codec.error.Error)
    | OffChain (_ : ink_env.engine.off_chain.OffChainError)
    | CalleeTrapped
    | CalleeReverted
    | KeyNotFound
    | _BelowSubsistenceThreshold
    | TransferFailed
    | _EndowmentTooLow
    | CodeNotFound
    | NotCallable
    | Unknown
    | LoggingDisabled
    | CallRuntimeFailed
    | EcdsaRecoveryFailed.
  End Error.
  Definition Error `{ℋ : State.Trait} : Set := Error.t.
  
  Definition Result `{ℋ : State.Trait} (T : Set) : Set :=
    core.result.Result
      T
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Module EmittedEvent.
    Section EmittedEvent.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        topics :
          alloc.vec.Vec
            (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)
            alloc.vec.Vec.Default.A;
        data : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_topics : Notation.Dot "topics" := {
        Notation.dot x := let* x := M.read x in Pure x.(topics) : M _;
      }.
      Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(topics) : M _;
      }.
      Global Instance Get_data : Notation.Dot "data" := {
        Notation.dot x := let* x := M.read x in Pure x.(data) : M _;
      }.
      Global Instance Get_AF_data : Notation.DoubleColon t "data" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(data) : M _;
      }.
    End EmittedEvent.
  End EmittedEvent.
  Definition EmittedEvent `{ℋ : State.Trait} : Set := M.val EmittedEvent.t.
  
  Parameter set_account_balance :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      T::type["AccountId"] -> T::type["Balance"] -> M unit.
  
  Parameter get_account_balance :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      T::type["AccountId"] ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            T::type["Balance"]).
  
  Parameter register_chain_extension :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_engine.chain_extension.ChainExtension.Trait E},
      E -> M unit.
  
  Parameter recorded_debug_messages :
      forall `{ℋ : State.Trait},
      M ink_engine.test_api.RecordedDebugMessages.
  
  Parameter set_clear_storage_disabled :
      forall `{ℋ : State.Trait},
      bool -> M unit.
  
  Parameter advance_block :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      M unit.
  
  Parameter set_caller :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T}
        {ℋ_1 :
          core.convert.From.Trait
              (ink_env.types.Environment.AccountId
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))
            (T := array u8)},
      T::type["AccountId"] -> M unit.
  
  Parameter set_callee :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T}
        {ℋ_1 :
          core.convert.From.Trait
              (ink_env.types.Environment.AccountId
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))
            (T := array u8)},
      T::type["AccountId"] -> M unit.
  
  Parameter set_contract :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T}
        {ℋ_1 :
          core.convert.From.Trait
              (ink_env.types.Environment.AccountId
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))
            (T := array u8)},
      T::type["AccountId"] -> M unit.
  
  Parameter is_contract :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T}
        {ℋ_1 :
          core.convert.From.Trait
              (ink_env.types.Environment.AccountId
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))
            (T := array u8)},
      T::type["AccountId"] -> M bool.
  
  Parameter callee :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      M T::type["AccountId"].
  
  Parameter get_contract_storage_rw :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      (ref T::type["AccountId"]) -> M (usize * usize).
  
  Parameter set_value_transferred :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      T::type["Balance"] -> M unit.
  
  Parameter transfer_in :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      T::type["Balance"] -> M unit.
  
  Parameter count_used_storage_cells :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      (ref T::type["AccountId"]) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            usize).
  
  Parameter set_block_timestamp :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      T::type["Timestamp"] -> M unit.
  
  Parameter set_block_number :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T},
      T::type["BlockNumber"] -> M unit.
  
  Module DefaultAccounts.
    Section DefaultAccounts.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait T}.
      Unset Primitive Projections.
      Record t : Set := {
        alice : T::type["AccountId"];
        bob : T::type["AccountId"];
        charlie : T::type["AccountId"];
        django : T::type["AccountId"];
        eve : T::type["AccountId"];
        frank : T::type["AccountId"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_alice : Notation.Dot "alice" := {
        Notation.dot x := let* x := M.read x in Pure x.(alice) : M _;
      }.
      Global Instance Get_AF_alice : Notation.DoubleColon t "alice" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(alice) : M _;
      }.
      Global Instance Get_bob : Notation.Dot "bob" := {
        Notation.dot x := let* x := M.read x in Pure x.(bob) : M _;
      }.
      Global Instance Get_AF_bob : Notation.DoubleColon t "bob" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(bob) : M _;
      }.
      Global Instance Get_charlie : Notation.Dot "charlie" := {
        Notation.dot x := let* x := M.read x in Pure x.(charlie) : M _;
      }.
      Global Instance Get_AF_charlie : Notation.DoubleColon t "charlie" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(charlie) : M _;
      }.
      Global Instance Get_django : Notation.Dot "django" := {
        Notation.dot x := let* x := M.read x in Pure x.(django) : M _;
      }.
      Global Instance Get_AF_django : Notation.DoubleColon t "django" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(django) : M _;
      }.
      Global Instance Get_eve : Notation.Dot "eve" := {
        Notation.dot x := let* x := M.read x in Pure x.(eve) : M _;
      }.
      Global Instance Get_AF_eve : Notation.DoubleColon t "eve" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(eve) : M _;
      }.
      Global Instance Get_frank : Notation.Dot "frank" := {
        Notation.dot x := let* x := M.read x in Pure x.(frank) : M _;
      }.
      Global Instance Get_AF_frank : Notation.DoubleColon t "frank" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(frank) : M _;
      }.
    End DefaultAccounts.
  End DefaultAccounts.
  Definition DefaultAccounts
      (T : Set)
      `{ℋ : State.Trait}
      {ℋ_0 : ink_env.types.Environment.Trait T}
      : Set :=
    M.val (DefaultAccounts.t (T := T)).
  
  Parameter run_test :
      forall
        `{ℋ : State.Trait}
        {T F : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T}
        {ℋ_1 :
          core.ops.function.FnOnce.Trait F
            (Args := ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DefaultAccounts
              T)}
        {ℋ_2 :
          core.convert.From.Trait
              (ink_env.types.Environment.AccountId
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))
            (T := array u8)},
      F ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter default_accounts :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T}
        {ℋ_1 :
          core.convert.From.Trait
              (ink_env.types.Environment.AccountId
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))
            (T := array u8)},
      M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DefaultAccounts
            T).
  
  (* Parameter recorded_events_ret_ty :
      Sigma (Ty : Set) `(core.iter.traits.iterator.Iterator.Trait Ty),
      unit.
  Parameter recorded_events :
      forall `{ℋ : State.Trait},
      M (projT1 recorded_events_ret_ty). *)
  
  Parameter assert_contract_termination :
      forall
        `{ℋ : State.Trait}
        {T F : Set}
        {ℋ_0 : ink_env.types.Environment.Trait T}
        {ℋ_1 : core.ops.function.FnMut.Trait F (Args := unit)}
        {ℋ_2 : core.panic.unwind_safe.UnwindSafe.Trait F}
        {ℋ_3 :
          core.fmt.Debug.Trait
              (ink_env.types.Environment.AccountId
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))}
        {ℋ_4 :
          core.fmt.Debug.Trait
              (ink_env.types.Environment.Balance
                (Self := T)
                (Trait := ltac:(try clear Trait; hauto l: on)))},
      F -> T::type["AccountId"] -> T::type["Balance"] -> M unit.
  
  Module CallFlags.
    Section CallFlags.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        forward_input : bool;
        clone_input : bool;
        tail_call : bool;
        allow_reentry : bool;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_forward_input : Notation.Dot "forward_input" := {
        Notation.dot x := let* x := M.read x in Pure x.(forward_input) : M _;
      }.
      Global Instance Get_AF_forward_input :
        Notation.DoubleColon t "forward_input" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(forward_input) : M _;
      }.
      Global Instance Get_clone_input : Notation.Dot "clone_input" := {
        Notation.dot x := let* x := M.read x in Pure x.(clone_input) : M _;
      }.
      Global Instance Get_AF_clone_input :
        Notation.DoubleColon t "clone_input" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(clone_input) : M _;
      }.
      Global Instance Get_tail_call : Notation.Dot "tail_call" := {
        Notation.dot x := let* x := M.read x in Pure x.(tail_call) : M _;
      }.
      Global Instance Get_AF_tail_call : Notation.DoubleColon t "tail_call" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(tail_call) : M _;
      }.
      Global Instance Get_allow_reentry : Notation.Dot "allow_reentry" := {
        Notation.dot x := let* x := M.read x in Pure x.(allow_reentry) : M _;
      }.
      Global Instance Get_AF_allow_reentry :
        Notation.DoubleColon t "allow_reentry" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(allow_reentry) : M _;
      }.
    End CallFlags.
  End CallFlags.
  Definition CallFlags `{ℋ : State.Trait} : Set := M.val CallFlags.t.
  
  Module CallParams.
    Section CallParams.
      Context `{ℋ : State.Trait}.
      
      Context {E CallType Args R : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        call_type : CallType;
        call_flags :
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags;
        _return_type : ink_env.call.common.ReturnType R;
        exec_input : ink_env.call.execution_input.ExecutionInput Args;
        _phantom : core.marker.PhantomData (E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_call_type : Notation.Dot "call_type" := {
        Notation.dot x := let* x := M.read x in Pure x.(call_type) : M _;
      }.
      Global Instance Get_AF_call_type : Notation.DoubleColon t "call_type" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(call_type) : M _;
      }.
      Global Instance Get_call_flags : Notation.Dot "call_flags" := {
        Notation.dot x := let* x := M.read x in Pure x.(call_flags) : M _;
      }.
      Global Instance Get_AF_call_flags :
        Notation.DoubleColon t "call_flags" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(call_flags) : M _;
      }.
      Global Instance Get__return_type : Notation.Dot "_return_type" := {
        Notation.dot x := let* x := M.read x in Pure x.(_return_type) : M _;
      }.
      Global Instance Get_AF__return_type :
        Notation.DoubleColon t "_return_type" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(_return_type) : M _;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
      }.
      Global Instance Get_AF_exec_input :
        Notation.DoubleColon t "exec_input" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(exec_input) : M _;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(_phantom) : M _;
      }.
    End CallParams.
  End CallParams.
  Definition CallParams
      (E CallType Args R : Set)
      `{ℋ : State.Trait}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      : Set :=
    M.val
      (CallParams.t (E := E) (CallType := CallType) (Args := Args) (R := R)).
  
  Module Call.
    Section Call.
      Context `{ℋ : State.Trait}.
      
      Context {E : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        callee : E::type["AccountId"];
        gas_limit : ink_env.types.Gas;
        transferred_value : E::type["Balance"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_callee : Notation.Dot "callee" := {
        Notation.dot x := let* x := M.read x in Pure x.(callee) : M _;
      }.
      Global Instance Get_AF_callee : Notation.DoubleColon t "callee" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(callee) : M _;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot x := let* x := M.read x in Pure x.(gas_limit) : M _;
      }.
      Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(gas_limit) : M _;
      }.
      Global Instance Get_transferred_value :
        Notation.Dot "transferred_value" := {
        Notation.dot x :=
          let* x := M.read x in Pure x.(transferred_value) : M _;
      }.
      Global Instance Get_AF_transferred_value :
        Notation.DoubleColon t "transferred_value" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(transferred_value) : M _;
      }.
    End Call.
  End Call.
  Definition Call
      (E : Set)
      `{ℋ : State.Trait}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      : Set :=
    M.val (Call.t (E := E)).
  
  Module DelegateCall.
    Section DelegateCall.
      Context `{ℋ : State.Trait}.
      
      Context {E : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        code_hash : E::type["Hash"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot x := let* x := M.read x in Pure x.(code_hash) : M _;
      }.
      Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(code_hash) : M _;
      }.
    End DelegateCall.
  End DelegateCall.
  Definition DelegateCall
      (E : Set)
      `{ℋ : State.Trait}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      : Set :=
    M.val (DelegateCall.t (E := E)).
  
  Module ReturnFlags.
    Section ReturnFlags.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        value : u32;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_value : Notation.Dot "value" := {
        Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
      }.
      Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
      }.
    End ReturnFlags.
  End ReturnFlags.
  Definition ReturnFlags `{ℋ : State.Trait} : Set := M.val ReturnFlags.t.
  
  Module EnvBackend.
    Section EnvBackend.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        set_contract_storage
          {K V : Set}
          {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
          {ℋ_1 : ink_storage_traits.storage.Storable.Trait V} :
          (mut_ref Self) -> (ref K) -> (ref V) -> M (core.option.Option u32);
        get_contract_storage
          {K R : Set}
          {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
          {ℋ_1 : ink_storage_traits.storage.Storable.Trait R} :
          (mut_ref Self) ->
            (ref K) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (core.option.Option R));
        take_contract_storage
          {K R : Set}
          {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
          {ℋ_1 : ink_storage_traits.storage.Storable.Trait R} :
          (mut_ref Self) ->
            (ref K) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (core.option.Option R));
        contains_contract_storage
          {K : Set}
          {ℋ_0 : parity_scale_codec.codec.Encode.Trait K} :
          (mut_ref Self) -> (ref K) -> M (core.option.Option u32);
        clear_contract_storage
          {K : Set}
          {ℋ_0 : parity_scale_codec.codec.Encode.Trait K} :
          (mut_ref Self) -> (ref K) -> M (core.option.Option u32);
        decode_input {T : Set} {ℋ_0 : parity_scale_codec.codec.Decode.Trait T} :
          (mut_ref Self) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                T);
        return_value {R : Set} {ℋ_0 : parity_scale_codec.codec.Encode.Trait R} :
          (mut_ref Self) ->
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
            ->
            (ref R) ->
            M Empty_set;
        debug_message : (mut_ref Self) -> (ref str) -> M unit;
        hash_bytes {H : Set} {ℋ_0 : ink_env.hash.CryptoHash.Trait H} :
          (mut_ref Self) ->
            (ref (Slice u8)) ->
            (mut_ref
              (ink_env.hash.HashOutput.Type_
                (Self := H)
                (Trait := ltac:(try clear Trait; hauto l: on))))
            ->
            M unit;
        hash_encoded
          {H T : Set}
          {ℋ_0 : ink_env.hash.CryptoHash.Trait H}
          {ℋ_1 : parity_scale_codec.codec.Encode.Trait T} :
          (mut_ref Self) ->
            (ref T) ->
            (mut_ref
              (ink_env.hash.HashOutput.Type_
                (Self := H)
                (Trait := ltac:(try clear Trait; hauto l: on))))
            ->
            M unit;
        ecdsa_recover :
          (mut_ref Self) ->
            (ref (array u8)) ->
            (ref (array u8)) ->
            (mut_ref (array u8)) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit);
        ecdsa_to_eth_address :
          (mut_ref Self) ->
            (ref (array u8)) ->
            (mut_ref (array u8)) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit);
        call_chain_extension
          {I T E ErrorCode F D : Set}
          {ℋ_0 : parity_scale_codec.codec.Encode.Trait I}
          {ℋ_1 : parity_scale_codec.codec.Decode.Trait T}
          {ℋ_2 : core.convert.From.Trait E (T := ErrorCode)}
          {ℋ_3 : core.ops.function.FnOnce.Trait F (Args := u32)}
          {ℋ_4 : core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))} :
          (mut_ref Self) ->
            u32 ->
            (ref I) ->
            F ->
            D ->
            M (core.result.Result T E);
        set_code_hash :
          (mut_ref Self) ->
            (ref (Slice u8)) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit);
      }.
      
    End EnvBackend.
  End EnvBackend.
  
  Module TypedEnvBackend.
    Section TypedEnvBackend.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 ::
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
              Self;
        caller {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M E::type["AccountId"];
        transferred_value {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M E::type["Balance"];
        weight_to_fee {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> u64 -> M E::type["Balance"];
        gas_left {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M u64;
        block_timestamp {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M E::type["Timestamp"];
        account_id {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M E::type["AccountId"];
        balance {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M E::type["Balance"];
        block_number {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M E::type["BlockNumber"];
        minimum_balance {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M E::type["Balance"];
        emit_event
          {E Event : Set}
          {ℋ_0 : ink_env.types.Environment.Trait E}
          {ℋ_1 : ink_env.topics.Topics.Trait Event}
          {ℋ_2 : parity_scale_codec.codec.Encode.Trait Event} :
          (mut_ref Self) -> Event -> M unit;
        invoke_contract
          {E Args R : Set}
          {ℋ_0 : ink_env.types.Environment.Trait E}
          {ℋ_1 : parity_scale_codec.codec.Encode.Trait Args}
          {ℋ_2 : parity_scale_codec.codec.Decode.Trait R} :
          (mut_ref Self) ->
            (ref
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
                E
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  E)
                Args
                R))
            ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (ink_primitives.MessageResult R));
        invoke_contract_delegate
          {E Args R : Set}
          {ℋ_0 : ink_env.types.Environment.Trait E}
          {ℋ_1 : parity_scale_codec.codec.Encode.Trait Args}
          {ℋ_2 : parity_scale_codec.codec.Decode.Trait R} :
          (mut_ref Self) ->
            (ref
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
                E
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
                  E)
                Args
                R))
            ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (ink_primitives.MessageResult R));
        instantiate_contract
          {E ContractRef Args Salt R : Set}
          {ℋ_0 : ink_env.types.Environment.Trait E}
          {ℋ_1 :
            ink_env.call.create_builder.FromAccountId.Trait ContractRef
              (T := E)}
          {ℋ_2 : parity_scale_codec.codec.Encode.Trait Args}
          {ℋ_3 : core.convert.AsRef.Trait Salt (T := Slice u8)}
          {ℋ_4 :
            ink_env.call.create_builder.ConstructorReturnType.Trait R
              (C := ContractRef)} :
          (mut_ref Self) ->
            (ref
              (ink_env.call.create_builder.CreateParams
                E
                ContractRef
                Args
                Salt
                R))
            ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (ink_primitives.ConstructorResult
                  (ink_env.call.create_builder.ConstructorReturnType.Output
                    (Self := R)
                    (Trait := ltac:(try clear Trait; hauto l: on)))));
        terminate_contract {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> E::type["AccountId"] -> M Empty_set;
        transfer {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) ->
            E::type["AccountId"] ->
            E::type["Balance"] ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit);
        is_contract {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> (ref E::type["AccountId"]) -> M bool;
        caller_is_origin {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) -> M bool;
        code_hash {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) ->
            (ref E::type["AccountId"]) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                E::type["Hash"]);
        own_code_hash {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
          (mut_ref Self) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                E::type["Hash"]);
        call_runtime
          {E Call : Set}
          {ℋ_0 : ink_env.types.Environment.Trait E}
          {ℋ_1 : parity_scale_codec.codec.Encode.Trait Call} :
          (mut_ref Self) ->
            (ref Call) ->
            M
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit);
      }.
      
    End TypedEnvBackend.
  End TypedEnvBackend.
  
  Module OnInstance.
    Section OnInstance.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 ::
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
              Self;
        ℒ_1 ::
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.Trait
              Self;
        on_instance
          {F R : Set}
          {ℋ_0 : core.ops.function.FnOnce.Trait F (Args := mut_ref Self)} :
          F -> M R;
      }.
      
    End OnInstance.
  End OnInstance.
  
  Module CallBuilder.
    Section CallBuilder.
      Context `{ℋ : State.Trait}.
      
      Context {E CallType Args RetType : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        call_type : CallType;
        call_flags :
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags;
        exec_input : Args;
        return_type : RetType;
        _phantom : core.marker.PhantomData (E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_call_type : Notation.Dot "call_type" := {
        Notation.dot x := let* x := M.read x in Pure x.(call_type) : M _;
      }.
      Global Instance Get_AF_call_type : Notation.DoubleColon t "call_type" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(call_type) : M _;
      }.
      Global Instance Get_call_flags : Notation.Dot "call_flags" := {
        Notation.dot x := let* x := M.read x in Pure x.(call_flags) : M _;
      }.
      Global Instance Get_AF_call_flags :
        Notation.DoubleColon t "call_flags" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(call_flags) : M _;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
      }.
      Global Instance Get_AF_exec_input :
        Notation.DoubleColon t "exec_input" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(exec_input) : M _;
      }.
      Global Instance Get_return_type : Notation.Dot "return_type" := {
        Notation.dot x := let* x := M.read x in Pure x.(return_type) : M _;
      }.
      Global Instance Get_AF_return_type :
        Notation.DoubleColon t "return_type" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(return_type) : M _;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(_phantom) : M _;
      }.
    End CallBuilder.
  End CallBuilder.
  Definition CallBuilder
      (E CallType Args RetType : Set)
      `{ℋ : State.Trait}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      : Set :=
    M.val
      (CallBuilder.t
        (E := E)
        (CallType := CallType)
        (Args := Args)
        (RetType := RetType)).
  
  Parameter build_call :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            (ink_env.call.common.Unset_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                E))
            (ink_env.call.common.Unset_
              (ink_env.call.execution_input.ExecutionInput
                ink_env.call.execution_input.EmptyArgumentList))
            (ink_env.call.common.Unset_ (ink_env.call.common.ReturnType unit))).
End backend_and_call_builder_and_engine_and_engine_test_api_and_error.

Module api.
  Parameter caller :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M E::type["AccountId"].
  
  Parameter transferred_value :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M E::type["Balance"].
  
  Parameter weight_to_fee :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      ink_env.types.Gas -> M E::type["Balance"].
  
  Parameter gas_left :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M ink_env.types.Gas.
  
  Parameter block_timestamp :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M E::type["Timestamp"].
  
  Parameter account_id :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M E::type["AccountId"].
  
  Parameter balance :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M E::type["Balance"].
  
  Parameter block_number :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M E::type["BlockNumber"].
  
  Parameter minimum_balance :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M E::type["Balance"].
  
  Parameter emit_event :
      forall
        `{ℋ : State.Trait}
        {E Event : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.Topics.Trait Event}
        {ℋ_2 : parity_scale_codec.codec.Encode.Trait Event},
      Event -> M unit.
  
  Parameter set_contract_storage :
      forall
        `{ℋ : State.Trait}
        {K V : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
        {ℋ_1 : ink_storage_traits.storage.Storable.Trait V},
      (ref K) -> (ref V) -> M (core.option.Option u32).
  
  Parameter get_contract_storage :
      forall
        `{ℋ : State.Trait}
        {K R : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
        {ℋ_1 : ink_storage_traits.storage.Storable.Trait R},
      (ref K) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (core.option.Option R)).
  
  Parameter take_contract_storage :
      forall
        `{ℋ : State.Trait}
        {K R : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
        {ℋ_1 : ink_storage_traits.storage.Storable.Trait R},
      (ref K) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (core.option.Option R)).
  
  Parameter contains_contract_storage :
      forall
        `{ℋ : State.Trait}
        {K : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K},
      (ref K) -> M (core.option.Option u32).
  
  Parameter clear_contract_storage :
      forall
        `{ℋ : State.Trait}
        {K : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K},
      (ref K) -> M (core.option.Option u32).
  
  Parameter invoke_contract :
      forall
        `{ℋ : State.Trait}
        {E Args R : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : parity_scale_codec.codec.Encode.Trait Args}
        {ℋ_2 : parity_scale_codec.codec.Decode.Trait R},
      (ref
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
            E
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
              E)
            Args
            R))
        ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.MessageResult R)).
  
  Parameter invoke_contract_delegate :
      forall
        `{ℋ : State.Trait}
        {E Args R : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : parity_scale_codec.codec.Encode.Trait Args}
        {ℋ_2 : parity_scale_codec.codec.Decode.Trait R},
      (ref
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
            E
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
              E)
            Args
            R))
        ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.MessageResult R)).
  
  Parameter instantiate_contract :
      forall
        `{ℋ : State.Trait}
        {E ContractRef Args Salt R : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 :
          ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
        {ℋ_2 : parity_scale_codec.codec.Encode.Trait Args}
        {ℋ_3 : core.convert.AsRef.Trait Salt (T := Slice u8)}
        {ℋ_4 :
          ink_env.call.create_builder.ConstructorReturnType.Trait R
            (C := ContractRef)},
      (ref (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
        ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.ConstructorResult
              (ink_env.call.create_builder.ConstructorReturnType.Output
                (Self := R)
                (Trait := ltac:(try clear Trait; hauto l: on))))).
  
  Parameter terminate_contract :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      E::type["AccountId"] -> M Empty_set.
  
  Parameter transfer :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      E::type["AccountId"] ->
        E::type["Balance"] ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter decode_input :
      forall
        `{ℋ : State.Trait}
        {T : Set}
        {ℋ_0 : parity_scale_codec.codec.Decode.Trait T},
      M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            T).
  
  Parameter return_value :
      forall
        `{ℋ : State.Trait}
        {R : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait R},
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
        ->
        (ref R) ->
        M Empty_set.
  
  Parameter debug_message : forall `{ℋ : State.Trait}, (ref str) -> M unit.
  
  Parameter hash_bytes :
      forall
        `{ℋ : State.Trait}
        {H : Set}
        {ℋ_0 : ink_env.hash.CryptoHash.Trait H},
      (ref (Slice u8)) ->
        (mut_ref
          (ink_env.hash.HashOutput.Type_
            (Self := H)
            (Trait := ltac:(try clear Trait; hauto l: on))))
        ->
        M unit.
  
  Parameter hash_encoded :
      forall
        `{ℋ : State.Trait}
        {H T : Set}
        {ℋ_0 : ink_env.hash.CryptoHash.Trait H}
        {ℋ_1 : parity_scale_codec.codec.Encode.Trait T},
      (ref T) ->
        (mut_ref
          (ink_env.hash.HashOutput.Type_
            (Self := H)
            (Trait := ltac:(try clear Trait; hauto l: on))))
        ->
        M unit.
  
  Parameter ecdsa_recover :
      forall `{ℋ : State.Trait},
      (ref (array u8)) ->
        (ref (array u8)) ->
        (mut_ref (array u8)) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter ecdsa_to_eth_address :
      forall `{ℋ : State.Trait},
      (ref (array u8)) ->
        (mut_ref (array u8)) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter is_contract :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      (ref E::type["AccountId"]) -> M bool.
  
  Parameter code_hash :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      (ref E::type["AccountId"]) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            E::type["Hash"]).
  
  Parameter own_code_hash :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            E::type["Hash"]).
  
  Parameter caller_is_origin :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M bool.
  
  Parameter set_code_hash :
      forall `{ℋ : State.Trait},
      (ref (array u8)) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter set_code_hash2 :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      (ref E::type["Hash"]) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter call_runtime :
      forall
        `{ℋ : State.Trait}
        {E Call : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : parity_scale_codec.codec.Encode.Trait Call},
      (ref Call) ->
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
End api.

Parameter caller :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M E::type["AccountId"].

Parameter transferred_value :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M E::type["Balance"].

Parameter weight_to_fee :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    ink_env.types.Gas -> M E::type["Balance"].

Parameter gas_left :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M ink_env.types.Gas.

Parameter block_timestamp :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M E::type["Timestamp"].

Parameter account_id :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M E::type["AccountId"].

Parameter balance :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M E::type["Balance"].

Parameter block_number :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M E::type["BlockNumber"].

Parameter minimum_balance :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M E::type["Balance"].

Parameter emit_event :
    forall
      `{ℋ : State.Trait}
      {E Event : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.Topics.Trait Event}
      {ℋ_2 : parity_scale_codec.codec.Encode.Trait Event},
    Event -> M unit.

Parameter set_contract_storage :
    forall
      `{ℋ : State.Trait}
      {K V : Set}
      {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
      {ℋ_1 : ink_storage_traits.storage.Storable.Trait V},
    (ref K) -> (ref V) -> M (core.option.Option u32).

Parameter get_contract_storage :
    forall
      `{ℋ : State.Trait}
      {K R : Set}
      {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
      {ℋ_1 : ink_storage_traits.storage.Storable.Trait R},
    (ref K) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (core.option.Option R)).

Parameter take_contract_storage :
    forall
      `{ℋ : State.Trait}
      {K R : Set}
      {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
      {ℋ_1 : ink_storage_traits.storage.Storable.Trait R},
    (ref K) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (core.option.Option R)).

Parameter contains_contract_storage :
    forall
      `{ℋ : State.Trait}
      {K : Set}
      {ℋ_0 : parity_scale_codec.codec.Encode.Trait K},
    (ref K) -> M (core.option.Option u32).

Parameter clear_contract_storage :
    forall
      `{ℋ : State.Trait}
      {K : Set}
      {ℋ_0 : parity_scale_codec.codec.Encode.Trait K},
    (ref K) -> M (core.option.Option u32).

Parameter invoke_contract :
    forall
      `{ℋ : State.Trait}
      {E Args R : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : parity_scale_codec.codec.Encode.Trait Args}
      {ℋ_2 : parity_scale_codec.codec.Decode.Trait R},
    (ref
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
          E
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
            E)
          Args
          R))
      ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (ink_primitives.MessageResult R)).

Parameter invoke_contract_delegate :
    forall
      `{ℋ : State.Trait}
      {E Args R : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : parity_scale_codec.codec.Encode.Trait Args}
      {ℋ_2 : parity_scale_codec.codec.Decode.Trait R},
    (ref
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
          E
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
            E)
          Args
          R))
      ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (ink_primitives.MessageResult R)).

Parameter instantiate_contract :
    forall
      `{ℋ : State.Trait}
      {E ContractRef Args Salt R : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 :
        ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
      {ℋ_2 : parity_scale_codec.codec.Encode.Trait Args}
      {ℋ_3 : core.convert.AsRef.Trait Salt (T := Slice u8)}
      {ℋ_4 :
        ink_env.call.create_builder.ConstructorReturnType.Trait R
          (C := ContractRef)},
    (ref (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
      ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (ink_primitives.ConstructorResult
            (ink_env.call.create_builder.ConstructorReturnType.Output
              (Self := R)
              (Trait := ltac:(try clear Trait; hauto l: on))))).

Parameter terminate_contract :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    E::type["AccountId"] -> M Empty_set.

Parameter transfer :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    E::type["AccountId"] ->
      E::type["Balance"] ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter decode_input :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : parity_scale_codec.codec.Decode.Trait T},
    M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          T).

Parameter return_value :
    forall
      `{ℋ : State.Trait}
      {R : Set}
      {ℋ_0 : parity_scale_codec.codec.Encode.Trait R},
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
      ->
      (ref R) ->
      M Empty_set.

Parameter debug_message : forall `{ℋ : State.Trait}, (ref str) -> M unit.

Parameter hash_bytes :
    forall `{ℋ : State.Trait} {H : Set} {ℋ_0 : ink_env.hash.CryptoHash.Trait H},
    (ref (Slice u8)) ->
      (mut_ref
        (ink_env.hash.HashOutput.Type_
          (Self := H)
          (Trait := ltac:(try clear Trait; hauto l: on))))
      ->
      M unit.

Parameter hash_encoded :
    forall
      `{ℋ : State.Trait}
      {H T : Set}
      {ℋ_0 : ink_env.hash.CryptoHash.Trait H}
      {ℋ_1 : parity_scale_codec.codec.Encode.Trait T},
    (ref T) ->
      (mut_ref
        (ink_env.hash.HashOutput.Type_
          (Self := H)
          (Trait := ltac:(try clear Trait; hauto l: on))))
      ->
      M unit.

Parameter ecdsa_recover :
    forall `{ℋ : State.Trait},
    (ref (array u8)) ->
      (ref (array u8)) ->
      (mut_ref (array u8)) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter ecdsa_to_eth_address :
    forall `{ℋ : State.Trait},
    (ref (array u8)) ->
      (mut_ref (array u8)) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

(* Parameter is_contract :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    (ref E::type["AccountId"]) -> M bool. *)

Parameter code_hash :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    (ref E::type["AccountId"]) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          E::type["Hash"]).

Parameter own_code_hash :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          E::type["Hash"]).

Parameter caller_is_origin :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M bool.

Parameter set_code_hash :
    forall `{ℋ : State.Trait},
    (ref (array u8)) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter set_code_hash2 :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    (ref E::type["Hash"]) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter call_runtime :
    forall
      `{ℋ : State.Trait}
      {E Call : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : parity_scale_codec.codec.Encode.Trait Call},
    (ref Call) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Module BaseArithmetic.
  Section BaseArithmetic.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: core.marker.Sized.Trait Self;
      ℒ_1 :: core.convert.From.Trait Self (T := u8);
      ℒ_2 :: num_traits.bounds.Bounded.Trait Self;
      ℒ_3 :: core.cmp.Ord.Trait Self;
      ℒ_4 :: core.cmp.PartialOrd.Trait Self (Rhs := Self);
      ℒ_5 :: num_traits.identities.Zero.Trait Self;
      ℒ_6 :: num_traits.identities.One.Trait Self;
      ℒ_7 :: num_traits.bounds.Bounded.Trait Self;
      ℒ_8 :: core.ops.arith.Add.Trait Self (Rhs := Self);
      ℒ_9 :: core.ops.arith.AddAssign.Trait Self (Rhs := Self);
      ℒ_10 :: core.ops.arith.Sub.Trait Self (Rhs := Self);
      ℒ_11 :: core.ops.arith.SubAssign.Trait Self (Rhs := Self);
      ℒ_12 :: core.ops.arith.Mul.Trait Self (Rhs := Self);
      ℒ_13 :: core.ops.arith.MulAssign.Trait Self (Rhs := Self);
      ℒ_14 :: core.ops.arith.Div.Trait Self (Rhs := Self);
      ℒ_15 :: core.ops.arith.DivAssign.Trait Self (Rhs := Self);
      ℒ_16 :: num_traits.ops.checked.CheckedMul.Trait Self;
      ℒ_17 :: ink_env.arithmetic.Saturating.Trait Self;
      ℒ_18 :: core.convert.TryFrom.Trait Self (T := u16);
      ℒ_19 :: core.convert.TryFrom.Trait Self (T := u32);
      ℒ_20 :: core.convert.TryFrom.Trait Self (T := u64);
      ℒ_21 :: core.convert.TryFrom.Trait Self (T := u128);
      ℒ_22 :: core.convert.TryFrom.Trait Self (T := usize);
      ℒ_23 :: core.convert.TryInto.Trait Self (T := u16);
      ℒ_24 :: core.convert.TryInto.Trait Self (T := u32);
      ℒ_25 :: core.convert.TryInto.Trait Self (T := u64);
      ℒ_26 :: core.convert.TryInto.Trait Self (T := u128);
      ℒ_27 :: core.convert.TryInto.Trait Self (T := usize);
    }.
    
  End BaseArithmetic.
End BaseArithmetic.

Module AtLeast32Bit.
  Section AtLeast32Bit.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: ink_env.arithmetic.BaseArithmetic.Trait Self;
      ℒ_1 :: core.convert.From.Trait Self (T := u16);
      ℒ_2 :: core.convert.From.Trait Self (T := u32);
    }.
    
  End AtLeast32Bit.
End AtLeast32Bit.

Module AtLeast32BitUnsigned.
  Section AtLeast32BitUnsigned.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: ink_env.arithmetic.AtLeast32Bit.Trait Self;
      ℒ_1 :: num_traits.sign.Unsigned.Trait Self;
    }.
    
  End AtLeast32BitUnsigned.
End AtLeast32BitUnsigned.

Module Saturating.
  Section Saturating.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      saturating_add : Self -> Self -> M Self;
      saturating_sub : Self -> Self -> M Self;
      saturating_mul : Self -> Self -> M Self;
      saturating_pow : Self -> usize -> M Self;
    }.
    
  End Saturating.
End Saturating.

Module Error.
  Inductive t `{ℋ : State.Trait} : Set :=
  | Decode (_ : parity_scale_codec.error.Error)
  | OffChain (_ : ink_env.engine.off_chain.OffChainError)
  | CalleeTrapped
  | CalleeReverted
  | KeyNotFound
  | _BelowSubsistenceThreshold
  | TransferFailed
  | _EndowmentTooLow
  | CodeNotFound
  | NotCallable
  | Unknown
  | LoggingDisabled
  | CallRuntimeFailed
  | EcdsaRecoveryFailed.
End Error.
Definition Error `{ℋ : State.Trait} : Set := Error.t.

Definition Result `{ℋ : State.Trait} (T : Set) : Set :=
  core.result.Result
    T
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.

Module EmittedEvent.
  Section EmittedEvent.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      topics :
        alloc.vec.Vec
          (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)
          alloc.vec.Vec.Default.A;
      data : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_topics : Notation.Dot "topics" := {
      Notation.dot x := let* x := M.read x in Pure x.(topics) : M _;
    }.
    Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(topics) : M _;
    }.
    Global Instance Get_data : Notation.Dot "data" := {
      Notation.dot x := let* x := M.read x in Pure x.(data) : M _;
    }.
    Global Instance Get_AF_data : Notation.DoubleColon t "data" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(data) : M _;
    }.
  End EmittedEvent.
End EmittedEvent.
Definition EmittedEvent `{ℋ : State.Trait} : Set := M.val EmittedEvent.t.

Parameter set_account_balance :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    T::type["AccountId"] -> T::type["Balance"] -> M unit.

Parameter get_account_balance :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    T::type["AccountId"] ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          T::type["Balance"]).

Parameter register_chain_extension :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_engine.chain_extension.ChainExtension.Trait E},
    E -> M unit.

Parameter recorded_debug_messages :
    forall `{ℋ : State.Trait},
    M ink_engine.test_api.RecordedDebugMessages.

Parameter set_clear_storage_disabled :
    forall `{ℋ : State.Trait},
    bool -> M unit.

Parameter advance_block :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    M unit.

Parameter set_caller :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T}
      {ℋ_1 :
        core.convert.From.Trait
            (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))
          (T := array u8)},
    T::type["AccountId"] -> M unit.

Parameter set_callee :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T}
      {ℋ_1 :
        core.convert.From.Trait
            (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))
          (T := array u8)},
    T::type["AccountId"] -> M unit.

Parameter set_contract :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T}
      {ℋ_1 :
        core.convert.From.Trait
            (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))
          (T := array u8)},
    T::type["AccountId"] -> M unit.

Parameter is_contract :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T}
      {ℋ_1 :
        core.convert.From.Trait
            (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))
          (T := array u8)},
    T::type["AccountId"] -> M bool.

Parameter callee :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    M T::type["AccountId"].

Parameter get_contract_storage_rw :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    (ref T::type["AccountId"]) -> M (usize * usize).

Parameter set_value_transferred :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    T::type["Balance"] -> M unit.

Parameter transfer_in :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    T::type["Balance"] -> M unit.

Parameter count_used_storage_cells :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    (ref T::type["AccountId"]) ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          usize).

Parameter set_block_timestamp :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    T::type["Timestamp"] -> M unit.

Parameter set_block_number :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T},
    T::type["BlockNumber"] -> M unit.

Parameter run_test :
    forall
      `{ℋ : State.Trait}
      {T F : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T}
      {ℋ_1 :
        core.ops.function.FnOnce.Trait F
          (Args := ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DefaultAccounts
            T)}
      {ℋ_2 :
        core.convert.From.Trait
            (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))
          (T := array u8)},
    F ->
      M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter default_accounts :
    forall
      `{ℋ : State.Trait}
      {T : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T}
      {ℋ_1 :
        core.convert.From.Trait
            (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))
          (T := array u8)},
    M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DefaultAccounts
          T).

Module DefaultAccounts.
  Section DefaultAccounts.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait T}.
    Unset Primitive Projections.
    Record t : Set := {
      alice : T::type["AccountId"];
      bob : T::type["AccountId"];
      charlie : T::type["AccountId"];
      django : T::type["AccountId"];
      eve : T::type["AccountId"];
      frank : T::type["AccountId"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_alice : Notation.Dot "alice" := {
      Notation.dot x := let* x := M.read x in Pure x.(alice) : M _;
    }.
    Global Instance Get_AF_alice : Notation.DoubleColon t "alice" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(alice) : M _;
    }.
    Global Instance Get_bob : Notation.Dot "bob" := {
      Notation.dot x := let* x := M.read x in Pure x.(bob) : M _;
    }.
    Global Instance Get_AF_bob : Notation.DoubleColon t "bob" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(bob) : M _;
    }.
    Global Instance Get_charlie : Notation.Dot "charlie" := {
      Notation.dot x := let* x := M.read x in Pure x.(charlie) : M _;
    }.
    Global Instance Get_AF_charlie : Notation.DoubleColon t "charlie" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(charlie) : M _;
    }.
    Global Instance Get_django : Notation.Dot "django" := {
      Notation.dot x := let* x := M.read x in Pure x.(django) : M _;
    }.
    Global Instance Get_AF_django : Notation.DoubleColon t "django" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(django) : M _;
    }.
    Global Instance Get_eve : Notation.Dot "eve" := {
      Notation.dot x := let* x := M.read x in Pure x.(eve) : M _;
    }.
    Global Instance Get_AF_eve : Notation.DoubleColon t "eve" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(eve) : M _;
    }.
    Global Instance Get_frank : Notation.Dot "frank" := {
      Notation.dot x := let* x := M.read x in Pure x.(frank) : M _;
    }.
    Global Instance Get_AF_frank : Notation.DoubleColon t "frank" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(frank) : M _;
    }.
  End DefaultAccounts.
End DefaultAccounts.
Definition DefaultAccounts
    (T : Set)
    `{ℋ : State.Trait}
    {ℋ_0 : ink_env.types.Environment.Trait T}
    : Set :=
  M.val (DefaultAccounts.t (T := T)).

(* Parameter recorded_events_ret_ty :
    Sigma (Ty : Set) `(core.iter.traits.iterator.Iterator.Trait Ty),
    unit.
Parameter recorded_events :
    forall `{ℋ : State.Trait},
    M (projT1 recorded_events_ret_ty). *)

Parameter assert_contract_termination :
    forall
      `{ℋ : State.Trait}
      {T F : Set}
      {ℋ_0 : ink_env.types.Environment.Trait T}
      {ℋ_1 : core.ops.function.FnMut.Trait F (Args := unit)}
      {ℋ_2 : core.panic.unwind_safe.UnwindSafe.Trait F}
      {ℋ_3 :
        core.fmt.Debug.Trait
            (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))}
      {ℋ_4 :
        core.fmt.Debug.Trait
            (ink_env.types.Environment.Balance
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))},
    F -> T::type["AccountId"] -> T::type["Balance"] -> M unit.

Module OnInstance.
  Section OnInstance.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 ::
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
            Self;
      ℒ_1 ::
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.Trait
            Self;
      on_instance
        {F R : Set}
        {ℋ_0 : core.ops.function.FnOnce.Trait F (Args := mut_ref Self)} :
        F -> M R;
    }.
    
  End OnInstance.
End OnInstance.

Module CallParams.
  Section CallParams.
    Context `{ℋ : State.Trait}.
    
    Context {E CallType Args R : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      call_type : CallType;
      call_flags :
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags;
      _return_type : ink_env.call.common.ReturnType R;
      exec_input : ink_env.call.execution_input.ExecutionInput Args;
      _phantom : core.marker.PhantomData (E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_call_type : Notation.Dot "call_type" := {
      Notation.dot x := let* x := M.read x in Pure x.(call_type) : M _;
    }.
    Global Instance Get_AF_call_type : Notation.DoubleColon t "call_type" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(call_type) : M _;
    }.
    Global Instance Get_call_flags : Notation.Dot "call_flags" := {
      Notation.dot x := let* x := M.read x in Pure x.(call_flags) : M _;
    }.
    Global Instance Get_AF_call_flags : Notation.DoubleColon t "call_flags" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(call_flags) : M _;
    }.
    Global Instance Get__return_type : Notation.Dot "_return_type" := {
      Notation.dot x := let* x := M.read x in Pure x.(_return_type) : M _;
    }.
    Global Instance Get_AF__return_type :
      Notation.DoubleColon t "_return_type" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(_return_type) : M _;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
    }.
    Global Instance Get_AF_exec_input : Notation.DoubleColon t "exec_input" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(exec_input) : M _;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(_phantom) : M _;
    }.
  End CallParams.
End CallParams.
Definition CallParams
    (E CallType Args R : Set)
    `{ℋ : State.Trait}
    {ℋ_0 : ink_env.types.Environment.Trait E}
    : Set :=
  M.val (CallParams.t (E := E) (CallType := CallType) (Args := Args) (R := R)).

Parameter build_call :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
          E
          (ink_env.call.common.Unset_
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
              E))
          (ink_env.call.common.Unset_
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset_ (ink_env.call.common.ReturnType unit))).

Module Call.
  Section Call.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      callee : E::type["AccountId"];
      gas_limit : ink_env.types.Gas;
      transferred_value : E::type["Balance"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_callee : Notation.Dot "callee" := {
      Notation.dot x := let* x := M.read x in Pure x.(callee) : M _;
    }.
    Global Instance Get_AF_callee : Notation.DoubleColon t "callee" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(callee) : M _;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot x := let* x := M.read x in Pure x.(gas_limit) : M _;
    }.
    Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(gas_limit) : M _;
    }.
    Global Instance Get_transferred_value :
      Notation.Dot "transferred_value" := {
      Notation.dot x := let* x := M.read x in Pure x.(transferred_value) : M _;
    }.
    Global Instance Get_AF_transferred_value :
      Notation.DoubleColon t "transferred_value" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(transferred_value) : M _;
    }.
  End Call.
End Call.
Definition Call
    (E : Set)
    `{ℋ : State.Trait}
    {ℋ_0 : ink_env.types.Environment.Trait E}
    : Set :=
  M.val (Call.t (E := E)).

Module DelegateCall.
  Section DelegateCall.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      code_hash : E::type["Hash"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot x := let* x := M.read x in Pure x.(code_hash) : M _;
    }.
    Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(code_hash) : M _;
    }.
  End DelegateCall.
End DelegateCall.
Definition DelegateCall
    (E : Set)
    `{ℋ : State.Trait}
    {ℋ_0 : ink_env.types.Environment.Trait E}
    : Set :=
  M.val (DelegateCall.t (E := E)).

Module CallBuilder.
  Section CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Context {E CallType Args RetType : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      call_type : CallType;
      call_flags :
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags;
      exec_input : Args;
      return_type : RetType;
      _phantom : core.marker.PhantomData (E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_call_type : Notation.Dot "call_type" := {
      Notation.dot x := let* x := M.read x in Pure x.(call_type) : M _;
    }.
    Global Instance Get_AF_call_type : Notation.DoubleColon t "call_type" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(call_type) : M _;
    }.
    Global Instance Get_call_flags : Notation.Dot "call_flags" := {
      Notation.dot x := let* x := M.read x in Pure x.(call_flags) : M _;
    }.
    Global Instance Get_AF_call_flags : Notation.DoubleColon t "call_flags" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(call_flags) : M _;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
    }.
    Global Instance Get_AF_exec_input : Notation.DoubleColon t "exec_input" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(exec_input) : M _;
    }.
    Global Instance Get_return_type : Notation.Dot "return_type" := {
      Notation.dot x := let* x := M.read x in Pure x.(return_type) : M _;
    }.
    Global Instance Get_AF_return_type :
      Notation.DoubleColon t "return_type" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(return_type) : M _;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(_phantom) : M _;
    }.
  End CallBuilder.
End CallBuilder.
Definition CallBuilder
    (E CallType Args RetType : Set)
    `{ℋ : State.Trait}
    {ℋ_0 : ink_env.types.Environment.Trait E}
    : Set :=
  M.val
    (CallBuilder.t
      (E := E)
      (CallType := CallType)
      (Args := Args)
      (RetType := RetType)).

Module ReturnFlags.
  Section ReturnFlags.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      value : u32;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
    }.
  End ReturnFlags.
End ReturnFlags.
Definition ReturnFlags `{ℋ : State.Trait} : Set := M.val ReturnFlags.t.

Module CallFlags.
  Section CallFlags.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      forward_input : bool;
      clone_input : bool;
      tail_call : bool;
      allow_reentry : bool;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_forward_input : Notation.Dot "forward_input" := {
      Notation.dot x := let* x := M.read x in Pure x.(forward_input) : M _;
    }.
    Global Instance Get_AF_forward_input :
      Notation.DoubleColon t "forward_input" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(forward_input) : M _;
    }.
    Global Instance Get_clone_input : Notation.Dot "clone_input" := {
      Notation.dot x := let* x := M.read x in Pure x.(clone_input) : M _;
    }.
    Global Instance Get_AF_clone_input :
      Notation.DoubleColon t "clone_input" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(clone_input) : M _;
    }.
    Global Instance Get_tail_call : Notation.Dot "tail_call" := {
      Notation.dot x := let* x := M.read x in Pure x.(tail_call) : M _;
    }.
    Global Instance Get_AF_tail_call : Notation.DoubleColon t "tail_call" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(tail_call) : M _;
    }.
    Global Instance Get_allow_reentry : Notation.Dot "allow_reentry" := {
      Notation.dot x := let* x := M.read x in Pure x.(allow_reentry) : M _;
    }.
    Global Instance Get_AF_allow_reentry :
      Notation.DoubleColon t "allow_reentry" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(allow_reentry) : M _;
    }.
  End CallFlags.
End CallFlags.
Definition CallFlags `{ℋ : State.Trait} : Set := M.val CallFlags.t.

Module EnvBackend.
  Section EnvBackend.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      set_contract_storage
        {K V : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
        {ℋ_1 : ink_storage_traits.storage.Storable.Trait V} :
        (mut_ref Self) -> (ref K) -> (ref V) -> M (core.option.Option u32);
      get_contract_storage
        {K R : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
        {ℋ_1 : ink_storage_traits.storage.Storable.Trait R} :
        (mut_ref Self) ->
          (ref K) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (core.option.Option R));
      take_contract_storage
        {K R : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K}
        {ℋ_1 : ink_storage_traits.storage.Storable.Trait R} :
        (mut_ref Self) ->
          (ref K) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (core.option.Option R));
      contains_contract_storage
        {K : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K} :
        (mut_ref Self) -> (ref K) -> M (core.option.Option u32);
      clear_contract_storage
        {K : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait K} :
        (mut_ref Self) -> (ref K) -> M (core.option.Option u32);
      decode_input {T : Set} {ℋ_0 : parity_scale_codec.codec.Decode.Trait T} :
        (mut_ref Self) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              T);
      return_value {R : Set} {ℋ_0 : parity_scale_codec.codec.Encode.Trait R} :
        (mut_ref Self) ->
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
          ->
          (ref R) ->
          M Empty_set;
      debug_message : (mut_ref Self) -> (ref str) -> M unit;
      hash_bytes {H : Set} {ℋ_0 : ink_env.hash.CryptoHash.Trait H} :
        (mut_ref Self) ->
          (ref (Slice u8)) ->
          (mut_ref
            (ink_env.hash.HashOutput.Type_
              (Self := H)
              (Trait := ltac:(try clear Trait; hauto l: on))))
          ->
          M unit;
      hash_encoded
        {H T : Set}
        {ℋ_0 : ink_env.hash.CryptoHash.Trait H}
        {ℋ_1 : parity_scale_codec.codec.Encode.Trait T} :
        (mut_ref Self) ->
          (ref T) ->
          (mut_ref
            (ink_env.hash.HashOutput.Type_
              (Self := H)
              (Trait := ltac:(try clear Trait; hauto l: on))))
          ->
          M unit;
      ecdsa_recover :
        (mut_ref Self) ->
          (ref (array u8)) ->
          (ref (array u8)) ->
          (mut_ref (array u8)) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
      ecdsa_to_eth_address :
        (mut_ref Self) ->
          (ref (array u8)) ->
          (mut_ref (array u8)) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
      call_chain_extension
        {I T E ErrorCode F D : Set}
        {ℋ_0 : parity_scale_codec.codec.Encode.Trait I}
        {ℋ_1 : parity_scale_codec.codec.Decode.Trait T}
        {ℋ_2 : core.convert.From.Trait E (T := ErrorCode)}
        {ℋ_3 : core.ops.function.FnOnce.Trait F (Args := u32)}
        {ℋ_4 : core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))} :
        (mut_ref Self) ->
          u32 ->
          (ref I) ->
          F ->
          D ->
          M (core.result.Result T E);
      set_code_hash :
        (mut_ref Self) ->
          (ref (Slice u8)) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
    }.
    
  End EnvBackend.
End EnvBackend.

Module TypedEnvBackend.
  Section TypedEnvBackend.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 ::
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
            Self;
      caller {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M E::type["AccountId"];
      transferred_value {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M E::type["Balance"];
      weight_to_fee {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> u64 -> M E::type["Balance"];
      gas_left {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M u64;
      block_timestamp {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M E::type["Timestamp"];
      account_id {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M E::type["AccountId"];
      balance {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M E::type["Balance"];
      block_number {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M E::type["BlockNumber"];
      minimum_balance {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M E::type["Balance"];
      emit_event
        {E Event : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.Topics.Trait Event}
        {ℋ_2 : parity_scale_codec.codec.Encode.Trait Event} :
        (mut_ref Self) -> Event -> M unit;
      invoke_contract
        {E Args R : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : parity_scale_codec.codec.Encode.Trait Args}
        {ℋ_2 : parity_scale_codec.codec.Decode.Trait R} :
        (mut_ref Self) ->
          (ref
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
              E
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                E)
              Args
              R))
          ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.MessageResult R));
      invoke_contract_delegate
        {E Args R : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : parity_scale_codec.codec.Encode.Trait Args}
        {ℋ_2 : parity_scale_codec.codec.Decode.Trait R} :
        (mut_ref Self) ->
          (ref
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
              E
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
                E)
              Args
              R))
          ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.MessageResult R));
      instantiate_contract
        {E ContractRef Args Salt R : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 :
          ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
        {ℋ_2 : parity_scale_codec.codec.Encode.Trait Args}
        {ℋ_3 : core.convert.AsRef.Trait Salt (T := Slice u8)}
        {ℋ_4 :
          ink_env.call.create_builder.ConstructorReturnType.Trait R
            (C := ContractRef)} :
        (mut_ref Self) ->
          (ref
            (ink_env.call.create_builder.CreateParams
              E
              ContractRef
              Args
              Salt
              R))
          ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.ConstructorResult
                (ink_env.call.create_builder.ConstructorReturnType.Output
                  (Self := R)
                  (Trait := ltac:(try clear Trait; hauto l: on)))));
      terminate_contract {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> E::type["AccountId"] -> M Empty_set;
      transfer {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) ->
          E::type["AccountId"] ->
          E::type["Balance"] ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
      is_contract {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> (ref E::type["AccountId"]) -> M bool;
      caller_is_origin {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) -> M bool;
      code_hash {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) ->
          (ref E::type["AccountId"]) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              E::type["Hash"]);
      own_code_hash {E : Set} {ℋ_0 : ink_env.types.Environment.Trait E} :
        (mut_ref Self) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              E::type["Hash"]);
      call_runtime
        {E Call : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : parity_scale_codec.codec.Encode.Trait Call} :
        (mut_ref Self) ->
          (ref Call) ->
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
    }.
    
  End TypedEnvBackend.
End TypedEnvBackend.

Module common.
  Module ReturnType.
    Section ReturnType.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : core.marker.PhantomData (T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
      }.
    End ReturnType.
  End ReturnType.
  Definition ReturnType `{ℋ : State.Trait} (T : Set) : Set :=
    M.val (ReturnType.t (T := T)).
  
  Module Set_.
    Section Set_.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
      }.
    End Set_.
  End Set_.
  Definition Set_ `{ℋ : State.Trait} (T : Set) : Set := M.val (Set_.t (T := T)).
  
  Module Unset_.
    Section Unset_.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : core.marker.PhantomData (T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
      }.
    End Unset_.
  End Unset_.
  Definition Unset_ `{ℋ : State.Trait} (T : Set) : Set :=
    M.val (Unset_.t (T := T)).
  
  Module Unwrap.
    Section Unwrap.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Output : Set;
        unwrap_or_else
          {F : Set}
          {ℋ_0 : core.ops.function.FnOnce.Trait F (Args := unit)} :
          Self -> F -> M Output;
      }.
      
      Global Instance Method_Output `(Trait) :
        Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
    End Unwrap.
  End Unwrap.
End common.

Module ReturnType.
  Section ReturnType.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End ReturnType.
End ReturnType.
Definition ReturnType `{ℋ : State.Trait} (T : Set) : Set :=
  M.val (ReturnType.t (T := T)).

Module Set_.
  Section Set_.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End Set_.
End Set_.
Definition Set_ `{ℋ : State.Trait} (T : Set) : Set := M.val (Set_.t (T := T)).

Module Unset_.
  Section Unset_.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End Unset_.
End Unset_.
Definition Unset_ `{ℋ : State.Trait} (T : Set) : Set :=
  M.val (Unset_.t (T := T)).

Module Unwrap.
  Section Unwrap.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Output : Set;
      unwrap_or_else
        {F : Set}
        {ℋ_0 : core.ops.function.FnOnce.Trait F (Args := unit)} :
        Self -> F -> M Output;
    }.
    
    Global Instance Method_Output `(Trait) :
      Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
  End Unwrap.
End Unwrap.

Module create_builder.
  Module state.
    Module Salt.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End Salt.
    Definition Salt `{ℋ : State.Trait} : Set := Salt.t.
  End state.
  
  Module FromAccountId.
    Section FromAccountId.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) {T : Set} : Type := {
        ℒ_0 :: ink_env.types.Environment.Trait T;
        from_account_id :
          (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(try clear Trait; hauto l: on)))
            ->
            M Self;
      }.
      
    End FromAccountId.
  End FromAccountId.
  
  Module ConstructorReturnType.
    Section ConstructorReturnType.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) {C : Set} : Type := {
        IS_RESULT : bool;
        Output : Set;
        Error : Set;
        ℒ_0 :: parity_scale_codec.codec.Decode.Trait Error;
        ok : C -> M Output;
      }.
      
      Global Instance Method_Output `(Trait) :
        Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Error `(Trait) :
        Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
    End ConstructorReturnType.
  End ConstructorReturnType.
  
  Module CreateParams.
    Section CreateParams.
      Context `{ℋ : State.Trait}.
      
      Context {E ContractRef Args Salt R : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        code_hash : E::type["Hash"];
        gas_limit : u64;
        endowment : E::type["Balance"];
        exec_input : ink_env.call.execution_input.ExecutionInput Args;
        salt_bytes : Salt;
        _return_type : ink_env.call.common.ReturnType R;
        _phantom : core.marker.PhantomData (ContractRef);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot x := let* x := M.read x in Pure x.(code_hash) : M _;
      }.
      Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(code_hash) : M _;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot x := let* x := M.read x in Pure x.(gas_limit) : M _;
      }.
      Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(gas_limit) : M _;
      }.
      Global Instance Get_endowment : Notation.Dot "endowment" := {
        Notation.dot x := let* x := M.read x in Pure x.(endowment) : M _;
      }.
      Global Instance Get_AF_endowment : Notation.DoubleColon t "endowment" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(endowment) : M _;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
      }.
      Global Instance Get_AF_exec_input :
        Notation.DoubleColon t "exec_input" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(exec_input) : M _;
      }.
      Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
        Notation.dot x := let* x := M.read x in Pure x.(salt_bytes) : M _;
      }.
      Global Instance Get_AF_salt_bytes :
        Notation.DoubleColon t "salt_bytes" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(salt_bytes) : M _;
      }.
      Global Instance Get__return_type : Notation.Dot "_return_type" := {
        Notation.dot x := let* x := M.read x in Pure x.(_return_type) : M _;
      }.
      Global Instance Get_AF__return_type :
        Notation.DoubleColon t "_return_type" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(_return_type) : M _;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(_phantom) : M _;
      }.
    End CreateParams.
  End CreateParams.
  Definition CreateParams
      (E ContractRef Args Salt R : Set)
      `{ℋ : State.Trait}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      : Set :=
    M.val
      (CreateParams.t
        (E := E)
        (ContractRef := ContractRef)
        (Args := Args)
        (Salt := Salt)
        (R := R)).
  
  Module CreateBuilder.
    Section CreateBuilder.
      Context `{ℋ : State.Trait}.
      
      Context
        {E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        code_hash : CodeHash;
        gas_limit : GasLimit;
        endowment : Endowment;
        exec_input : Args;
        salt : Salt;
        return_type : RetType;
        _phantom : core.marker.PhantomData (E * ContractRef);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot x := let* x := M.read x in Pure x.(code_hash) : M _;
      }.
      Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(code_hash) : M _;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot x := let* x := M.read x in Pure x.(gas_limit) : M _;
      }.
      Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(gas_limit) : M _;
      }.
      Global Instance Get_endowment : Notation.Dot "endowment" := {
        Notation.dot x := let* x := M.read x in Pure x.(endowment) : M _;
      }.
      Global Instance Get_AF_endowment : Notation.DoubleColon t "endowment" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(endowment) : M _;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
      }.
      Global Instance Get_AF_exec_input :
        Notation.DoubleColon t "exec_input" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(exec_input) : M _;
      }.
      Global Instance Get_salt : Notation.Dot "salt" := {
        Notation.dot x := let* x := M.read x in Pure x.(salt) : M _;
      }.
      Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(salt) : M _;
      }.
      Global Instance Get_return_type : Notation.Dot "return_type" := {
        Notation.dot x := let* x := M.read x in Pure x.(return_type) : M _;
      }.
      Global Instance Get_AF_return_type :
        Notation.DoubleColon t "return_type" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(return_type) : M _;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(_phantom) : M _;
      }.
    End CreateBuilder.
  End CreateBuilder.
  Definition CreateBuilder
      (E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set)
      `{ℋ : State.Trait}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      : Set :=
    M.val
      (CreateBuilder.t
        (E := E)
        (ContractRef := ContractRef)
        (CodeHash := CodeHash)
        (GasLimit := GasLimit)
        (Endowment := Endowment)
        (Args := Args)
        (Salt := Salt)
        (RetType := RetType)).
End create_builder.

Module state.
  Module Salt.
    Inductive t `{ℋ : State.Trait} : Set :=
    .
  End Salt.
  Definition Salt `{ℋ : State.Trait} : Set := Salt.t.
End state.

Module Salt.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End Salt.
Definition Salt `{ℋ : State.Trait} : Set := Salt.t.

Module FromAccountId.
  Section FromAccountId.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) {T : Set} : Type := {
      ℒ_0 :: ink_env.types.Environment.Trait T;
      from_account_id :
        (ink_env.types.Environment.AccountId
            (Self := T)
            (Trait := ltac:(try clear Trait; hauto l: on)))
          ->
          M Self;
    }.
    
  End FromAccountId.
End FromAccountId.

Module ConstructorReturnType.
  Section ConstructorReturnType.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) {C : Set} : Type := {
      IS_RESULT : bool;
      Output : Set;
      Error : Set;
      ℒ_0 :: parity_scale_codec.codec.Decode.Trait Error;
      ok : C -> M Output;
    }.
    
    Global Instance Method_Output `(Trait) :
      Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_Error `(Trait) :
      Notation.DoubleColonType Self "Error" := {
      Notation.double_colon_type := Error;
    }.
  End ConstructorReturnType.
End ConstructorReturnType.

Module CreateParams.
  Section CreateParams.
    Context `{ℋ : State.Trait}.
    
    Context {E ContractRef Args Salt R : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      code_hash : E::type["Hash"];
      gas_limit : u64;
      endowment : E::type["Balance"];
      exec_input : ink_env.call.execution_input.ExecutionInput Args;
      salt_bytes : Salt;
      _return_type : ink_env.call.common.ReturnType R;
      _phantom : core.marker.PhantomData (ContractRef);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot x := let* x := M.read x in Pure x.(code_hash) : M _;
    }.
    Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(code_hash) : M _;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot x := let* x := M.read x in Pure x.(gas_limit) : M _;
    }.
    Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(gas_limit) : M _;
    }.
    Global Instance Get_endowment : Notation.Dot "endowment" := {
      Notation.dot x := let* x := M.read x in Pure x.(endowment) : M _;
    }.
    Global Instance Get_AF_endowment : Notation.DoubleColon t "endowment" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(endowment) : M _;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
    }.
    Global Instance Get_AF_exec_input : Notation.DoubleColon t "exec_input" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(exec_input) : M _;
    }.
    Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
      Notation.dot x := let* x := M.read x in Pure x.(salt_bytes) : M _;
    }.
    Global Instance Get_AF_salt_bytes : Notation.DoubleColon t "salt_bytes" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(salt_bytes) : M _;
    }.
    Global Instance Get__return_type : Notation.Dot "_return_type" := {
      Notation.dot x := let* x := M.read x in Pure x.(_return_type) : M _;
    }.
    Global Instance Get_AF__return_type :
      Notation.DoubleColon t "_return_type" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(_return_type) : M _;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(_phantom) : M _;
    }.
  End CreateParams.
End CreateParams.
Definition CreateParams
    (E ContractRef Args Salt R : Set)
    `{ℋ : State.Trait}
    {ℋ_0 : ink_env.types.Environment.Trait E}
    : Set :=
  M.val
    (CreateParams.t
      (E := E)
      (ContractRef := ContractRef)
      (Args := Args)
      (Salt := Salt)
      (R := R)).

Module CreateBuilder.
  Section CreateBuilder.
    Context `{ℋ : State.Trait}.
    
    Context {E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      code_hash : CodeHash;
      gas_limit : GasLimit;
      endowment : Endowment;
      exec_input : Args;
      salt : Salt;
      return_type : RetType;
      _phantom : core.marker.PhantomData (E * ContractRef);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot x := let* x := M.read x in Pure x.(code_hash) : M _;
    }.
    Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(code_hash) : M _;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot x := let* x := M.read x in Pure x.(gas_limit) : M _;
    }.
    Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(gas_limit) : M _;
    }.
    Global Instance Get_endowment : Notation.Dot "endowment" := {
      Notation.dot x := let* x := M.read x in Pure x.(endowment) : M _;
    }.
    Global Instance Get_AF_endowment : Notation.DoubleColon t "endowment" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(endowment) : M _;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot x := let* x := M.read x in Pure x.(exec_input) : M _;
    }.
    Global Instance Get_AF_exec_input : Notation.DoubleColon t "exec_input" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(exec_input) : M _;
    }.
    Global Instance Get_salt : Notation.Dot "salt" := {
      Notation.dot x := let* x := M.read x in Pure x.(salt) : M _;
    }.
    Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(salt) : M _;
    }.
    Global Instance Get_return_type : Notation.Dot "return_type" := {
      Notation.dot x := let* x := M.read x in Pure x.(return_type) : M _;
    }.
    Global Instance Get_AF_return_type :
      Notation.DoubleColon t "return_type" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(return_type) : M _;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot x := let* x := M.read x in Pure x.(_phantom) : M _;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(_phantom) : M _;
    }.
  End CreateBuilder.
End CreateBuilder.
Definition CreateBuilder
    (E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set)
    `{ℋ : State.Trait}
    {ℋ_0 : ink_env.types.Environment.Trait E}
    : Set :=
  M.val
    (CreateBuilder.t
      (E := E)
      (ContractRef := ContractRef)
      (CodeHash := CodeHash)
      (GasLimit := GasLimit)
      (Endowment := Endowment)
      (Args := Args)
      (Salt := Salt)
      (RetType := RetType)).

Parameter build_create :
    forall
      `{ℋ : State.Trait}
      {ContractRef : Set}
      {ℋ_0 : ink_env.contract.ContractEnv.Trait ContractRef},
    M
        (ink_env.call.create_builder.CreateBuilder (ℋ_0 := ltac:(sauto lq: on))
          (ink_env.contract.ContractEnv.Env
            (Self := ContractRef)
            (Trait := ltac:(try clear Trait; hauto l: on)))
          ContractRef
          (ink_env.call.common.Unset_
            (ink_env.types.Environment.Hash
              (Self := ink_env.contract.ContractEnv.Env
                (Self := ContractRef)
                (Trait := ltac:(try clear Trait; hauto l: on)))
              (Trait := ltac:(try clear Trait; hauto l: on))))
          (ink_env.call.common.Unset_ u64)
          (ink_env.call.common.Unset_
            (ink_env.types.Environment.Balance
              (Self := ink_env.contract.ContractEnv.Env
                (Self := ContractRef)
                (Trait := ltac:(try clear Trait; hauto l: on)))
              (Trait := ltac:(try clear Trait; hauto l: on))))
          (ink_env.call.common.Unset_
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset_ ink_env.call.create_builder.state.Salt)
          (ink_env.call.common.Unset_ (ink_env.call.common.ReturnType unit))).

Module execution_input.
  Module ExecutionInput.
    Section ExecutionInput.
      Context `{ℋ : State.Trait}.
      
      Context {Args : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        selector : ink_env.call.selector.Selector;
        args : Args;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_selector : Notation.Dot "selector" := {
        Notation.dot x := let* x := M.read x in Pure x.(selector) : M _;
      }.
      Global Instance Get_AF_selector : Notation.DoubleColon t "selector" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(selector) : M _;
      }.
      Global Instance Get_args : Notation.Dot "args" := {
        Notation.dot x := let* x := M.read x in Pure x.(args) : M _;
      }.
      Global Instance Get_AF_args : Notation.DoubleColon t "args" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(args) : M _;
      }.
    End ExecutionInput.
  End ExecutionInput.
  Definition ExecutionInput (Args : Set) `{ℋ : State.Trait} : Set :=
    M.val (ExecutionInput.t (Args := Args)).
  
  Module ArgumentList.
    Section ArgumentList.
      Context `{ℋ : State.Trait}.
      
      Context {Head Rest : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        head : Head;
        rest : Rest;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_head : Notation.Dot "head" := {
        Notation.dot x := let* x := M.read x in Pure x.(head) : M _;
      }.
      Global Instance Get_AF_head : Notation.DoubleColon t "head" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(head) : M _;
      }.
      Global Instance Get_rest : Notation.Dot "rest" := {
        Notation.dot x := let* x := M.read x in Pure x.(rest) : M _;
      }.
      Global Instance Get_AF_rest : Notation.DoubleColon t "rest" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(rest) : M _;
      }.
    End ArgumentList.
  End ArgumentList.
  Definition ArgumentList (Head Rest : Set) `{ℋ : State.Trait} : Set :=
    M.val (ArgumentList.t (Head := Head) (Rest := Rest)).
  
  Module Argument.
    Section Argument.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        arg : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_arg : Notation.Dot "arg" := {
        Notation.dot x := let* x := M.read x in Pure x.(arg) : M _;
      }.
      Global Instance Get_AF_arg : Notation.DoubleColon t "arg" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(arg) : M _;
      }.
    End Argument.
  End Argument.
  Definition Argument (T : Set) `{ℋ : State.Trait} : Set :=
    M.val (Argument.t (T := T)).
  
  Definition ArgsList `{ℋ : State.Trait} (Head Rest : Set) : Set :=
    ink_env.call.execution_input.ArgumentList
      (ink_env.call.execution_input.Argument Head)
      Rest.
  
  Module ArgumentListEnd.
    Section ArgumentListEnd.
      Context `{ℋ : State.Trait}.
      
      Inductive t : Set := Build.
    End ArgumentListEnd.
  End ArgumentListEnd.
  Definition ArgumentListEnd := @ArgumentListEnd.t.
  
  Definition EmptyArgumentList `{ℋ : State.Trait} : Set :=
    ink_env.call.execution_input.ArgumentList
      ink_env.call.execution_input.ArgumentListEnd
      ink_env.call.execution_input.ArgumentListEnd.
End execution_input.

Module ExecutionInput.
  Section ExecutionInput.
    Context `{ℋ : State.Trait}.
    
    Context {Args : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      selector : ink_env.call.selector.Selector;
      args : Args;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_selector : Notation.Dot "selector" := {
      Notation.dot x := let* x := M.read x in Pure x.(selector) : M _;
    }.
    Global Instance Get_AF_selector : Notation.DoubleColon t "selector" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(selector) : M _;
    }.
    Global Instance Get_args : Notation.Dot "args" := {
      Notation.dot x := let* x := M.read x in Pure x.(args) : M _;
    }.
    Global Instance Get_AF_args : Notation.DoubleColon t "args" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(args) : M _;
    }.
  End ExecutionInput.
End ExecutionInput.
Definition ExecutionInput (Args : Set) `{ℋ : State.Trait} : Set :=
  M.val (ExecutionInput.t (Args := Args)).

Module ArgumentList.
  Section ArgumentList.
    Context `{ℋ : State.Trait}.
    
    Context {Head Rest : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      head : Head;
      rest : Rest;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_head : Notation.Dot "head" := {
      Notation.dot x := let* x := M.read x in Pure x.(head) : M _;
    }.
    Global Instance Get_AF_head : Notation.DoubleColon t "head" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(head) : M _;
    }.
    Global Instance Get_rest : Notation.Dot "rest" := {
      Notation.dot x := let* x := M.read x in Pure x.(rest) : M _;
    }.
    Global Instance Get_AF_rest : Notation.DoubleColon t "rest" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(rest) : M _;
    }.
  End ArgumentList.
End ArgumentList.
Definition ArgumentList (Head Rest : Set) `{ℋ : State.Trait} : Set :=
  M.val (ArgumentList.t (Head := Head) (Rest := Rest)).

Definition ArgsList `{ℋ : State.Trait} (Head Rest : Set) : Set :=
  ink_env.call.execution_input.ArgumentList
    (ink_env.call.execution_input.Argument Head)
    Rest.

Module Argument.
  Section Argument.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      arg : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_arg : Notation.Dot "arg" := {
      Notation.dot x := let* x := M.read x in Pure x.(arg) : M _;
    }.
    Global Instance Get_AF_arg : Notation.DoubleColon t "arg" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(arg) : M _;
    }.
  End Argument.
End Argument.
Definition Argument (T : Set) `{ℋ : State.Trait} : Set :=
  M.val (Argument.t (T := T)).

Module ArgumentListEnd.
  Section ArgumentListEnd.
    Context `{ℋ : State.Trait}.
    
    Inductive t : Set := Build.
  End ArgumentListEnd.
End ArgumentListEnd.
Definition ArgumentListEnd := @ArgumentListEnd.t.

Definition EmptyArgumentList `{ℋ : State.Trait} : Set :=
  ink_env.call.execution_input.ArgumentList
    ink_env.call.execution_input.ArgumentListEnd
    ink_env.call.execution_input.ArgumentListEnd.

Module selector.
  Module Selector.
    Section Selector.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        bytes : array u8;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_bytes : Notation.Dot "bytes" := {
        Notation.dot x := let* x := M.read x in Pure x.(bytes) : M _;
      }.
      Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(bytes) : M _;
      }.
    End Selector.
  End Selector.
  Definition Selector `{ℋ : State.Trait} : Set := M.val Selector.t.
End selector.

Module Selector.
  Section Selector.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      bytes : array u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_bytes : Notation.Dot "bytes" := {
      Notation.dot x := let* x := M.read x in Pure x.(bytes) : M _;
    }.
    Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(bytes) : M _;
    }.
  End Selector.
End Selector.
Definition Selector `{ℋ : State.Trait} : Set := M.val Selector.t.

Module chain_extension.
  Module FromStatusCode.
    Section FromStatusCode.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: core.marker.Sized.Trait Self;
        from_status_code : u32 -> M (core.result.Result unit Self);
      }.
      
    End FromStatusCode.
  End FromStatusCode.
  
  Module ChainExtensionMethod.
    Section ChainExtensionMethod.
      Context `{ℋ : State.Trait}.
      
      Context {I O ErrorCode : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        func_id : u32;
        state : core.marker.PhantomData ((I * O) * ErrorCode);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_func_id : Notation.Dot "func_id" := {
        Notation.dot x := let* x := M.read x in Pure x.(func_id) : M _;
      }.
      Global Instance Get_AF_func_id : Notation.DoubleColon t "func_id" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(func_id) : M _;
      }.
      Global Instance Get_state : Notation.Dot "state" := {
        Notation.dot x := let* x := M.read x in Pure x.(state) : M _;
      }.
      Global Instance Get_AF_state : Notation.DoubleColon t "state" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(state) : M _;
      }.
    End ChainExtensionMethod.
  End ChainExtensionMethod.
  Definition ChainExtensionMethod
      (I O ErrorCode : Set)
      `{ℋ : State.Trait}
      : Set :=
    M.val (ChainExtensionMethod.t (I := I) (O := O) (ErrorCode := ErrorCode)).
  
  Module state.
    Module IgnoreErrorCode.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End IgnoreErrorCode.
    Definition IgnoreErrorCode `{ℋ : State.Trait} : Set := IgnoreErrorCode.t.
    
    Module HandleErrorCode.
      Section HandleErrorCode.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          error_code : core.marker.PhantomData (T);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_error_code : Notation.Dot "error_code" := {
          Notation.dot x := let* x := M.read x in Pure x.(error_code) : M _;
        }.
        Global Instance Get_AF_error_code :
          Notation.DoubleColon t "error_code" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(error_code) : M _;
        }.
      End HandleErrorCode.
    End HandleErrorCode.
    Definition HandleErrorCode (T : Set) `{ℋ : State.Trait} : Set :=
      M.val (HandleErrorCode.t (T := T)).
  End state.
  
  Module private.
    Module IsResultTypeSealed.
      Section IsResultTypeSealed.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End IsResultTypeSealed.
    End IsResultTypeSealed.
  End private.
  
  Module IsResultType.
    Section IsResultType.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: ink_env.chain_extension.private.IsResultTypeSealed.Trait Self;
        Ok : Set;
        Err : Set;
      }.
      
      Global Instance Method_Ok `(Trait) :
        Notation.DoubleColonType Self "Ok" := {
        Notation.double_colon_type := Ok;
      }.
      Global Instance Method_Err `(Trait) :
        Notation.DoubleColonType Self "Err" := {
        Notation.double_colon_type := Err;
      }.
    End IsResultType.
  End IsResultType.
End chain_extension.

Module FromStatusCode.
  Section FromStatusCode.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: core.marker.Sized.Trait Self;
      from_status_code : u32 -> M (core.result.Result unit Self);
    }.
    
  End FromStatusCode.
End FromStatusCode.

Module ChainExtensionMethod.
  Section ChainExtensionMethod.
    Context `{ℋ : State.Trait}.
    
    Context {I O ErrorCode : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      func_id : u32;
      state : core.marker.PhantomData ((I * O) * ErrorCode);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_func_id : Notation.Dot "func_id" := {
      Notation.dot x := let* x := M.read x in Pure x.(func_id) : M _;
    }.
    Global Instance Get_AF_func_id : Notation.DoubleColon t "func_id" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(func_id) : M _;
    }.
    Global Instance Get_state : Notation.Dot "state" := {
      Notation.dot x := let* x := M.read x in Pure x.(state) : M _;
    }.
    Global Instance Get_AF_state : Notation.DoubleColon t "state" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(state) : M _;
    }.
  End ChainExtensionMethod.
End ChainExtensionMethod.
Definition ChainExtensionMethod
    (I O ErrorCode : Set)
    `{ℋ : State.Trait}
    : Set :=
  M.val (ChainExtensionMethod.t (I := I) (O := O) (ErrorCode := ErrorCode)).

Module Wrap_state_1.
  Module state.
    Module IgnoreErrorCode.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End IgnoreErrorCode.
    Definition IgnoreErrorCode `{ℋ : State.Trait} : Set := IgnoreErrorCode.t.
    
    Module HandleErrorCode.
      Section HandleErrorCode.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          error_code : core.marker.PhantomData (T);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_error_code : Notation.Dot "error_code" := {
          Notation.dot x := let* x := M.read x in Pure x.(error_code) : M _;
        }.
        Global Instance Get_AF_error_code :
          Notation.DoubleColon t "error_code" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(error_code) : M _;
        }.
      End HandleErrorCode.
    End HandleErrorCode.
    Definition HandleErrorCode (T : Set) `{ℋ : State.Trait} : Set :=
      M.val (HandleErrorCode.t (T := T)).
  End state.
End Wrap_state_1.
Import Wrap_state_1.

Module IgnoreErrorCode.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End IgnoreErrorCode.
Definition IgnoreErrorCode `{ℋ : State.Trait} : Set := IgnoreErrorCode.t.

Module HandleErrorCode.
  Section HandleErrorCode.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      error_code : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_error_code : Notation.Dot "error_code" := {
      Notation.dot x := let* x := M.read x in Pure x.(error_code) : M _;
    }.
    Global Instance Get_AF_error_code : Notation.DoubleColon t "error_code" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(error_code) : M _;
    }.
  End HandleErrorCode.
End HandleErrorCode.
Definition HandleErrorCode (T : Set) `{ℋ : State.Trait} : Set :=
  M.val (HandleErrorCode.t (T := T)).

Module IsResultType.
  Section IsResultType.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: ink_env.chain_extension.private.IsResultTypeSealed.Trait Self;
      Ok : Set;
      Err : Set;
    }.
    
    Global Instance Method_Ok `(Trait) : Notation.DoubleColonType Self "Ok" := {
      Notation.double_colon_type := Ok;
    }.
    Global Instance Method_Err `(Trait) :
      Notation.DoubleColonType Self "Err" := {
      Notation.double_colon_type := Err;
    }.
  End IsResultType.
End IsResultType.

Module private.
  Module IsResultTypeSealed.
    Section IsResultTypeSealed.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End IsResultTypeSealed.
  End IsResultTypeSealed.
End private.

Module IsResultTypeSealed.
  Section IsResultTypeSealed.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End IsResultTypeSealed.
End IsResultTypeSealed.

Module ContractEnv.
  Section ContractEnv.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Env : Set;
      ℒ_0 :: ink_env.types.Environment.Trait Env;
    }.
    
    Global Instance Method_Env `(Trait) :
      Notation.DoubleColonType Self "Env" := {
      Notation.double_colon_type := Env;
    }.
  End ContractEnv.
End ContractEnv.

Module ContractReference.
  Section ContractReference.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait) :
      Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractReference.
End ContractReference.

Module off_chain.
  Module call_data.
    Module CallData.
      Section CallData.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Record t : Set := {
          bytes : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_bytes : Notation.Dot "bytes" := {
          Notation.dot x := let* x := M.read x in Pure x.(bytes) : M _;
        }.
        Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
          Notation.double_colon x := let* x := M.read x in Pure x.(bytes) : M _;
        }.
      End CallData.
    End CallData.
    Definition CallData `{ℋ : State.Trait} : Set := M.val CallData.t.
  End call_data.
  
  Module impls.
    Module TopicsBuilder.
      Section TopicsBuilder.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Record t : Set := {
          topics :
            alloc.vec.Vec
              (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)
              alloc.vec.Vec.Default.A;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_topics : Notation.Dot "topics" := {
          Notation.dot x := let* x := M.read x in Pure x.(topics) : M _;
        }.
        Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
          Notation.double_colon x :=
            let* x := M.read x in Pure x.(topics) : M _;
        }.
      End TopicsBuilder.
    End TopicsBuilder.
    Definition TopicsBuilder `{ℋ : State.Trait} : Set := M.val TopicsBuilder.t.
  End impls.
  
  Module EnvInstance.
    Section EnvInstance.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        engine : ink_engine.ext.Engine;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_engine : Notation.Dot "engine" := {
        Notation.dot x := let* x := M.read x in Pure x.(engine) : M _;
      }.
      Global Instance Get_AF_engine : Notation.DoubleColon t "engine" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(engine) : M _;
      }.
    End EnvInstance.
  End EnvInstance.
  Definition EnvInstance `{ℋ : State.Trait} : Set := M.val EnvInstance.t.
  
  Module AccountError.
    Inductive t `{ℋ : State.Trait} : Set :=
    | Decoding (_ : parity_scale_codec.error.Error)
    | UnexpectedUserAccount
    | NoAccountForId (_ : alloc.vec.Vec u8 alloc.vec.Vec.Default.A).
  End AccountError.
  Definition AccountError `{ℋ : State.Trait} : Set := AccountError.t.
  
  Module OffChainError.
    Inductive t `{ℋ : State.Trait} : Set :=
    | Account (_ : ink_env.engine.off_chain.AccountError)
    | UninitializedBlocks
    | UninitializedExecutionContext
    | UnregisteredChainExtension.
  End OffChainError.
  Definition OffChainError `{ℋ : State.Trait} : Set := OffChainError.t.
End off_chain.

Module call_data.
  Module CallData.
    Section CallData.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        bytes : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_bytes : Notation.Dot "bytes" := {
        Notation.dot x := let* x := M.read x in Pure x.(bytes) : M _;
      }.
      Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(bytes) : M _;
      }.
    End CallData.
  End CallData.
  Definition CallData `{ℋ : State.Trait} : Set := M.val CallData.t.
End call_data.

Module CallData.
  Section CallData.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      bytes : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_bytes : Notation.Dot "bytes" := {
      Notation.dot x := let* x := M.read x in Pure x.(bytes) : M _;
    }.
    Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(bytes) : M _;
    }.
  End CallData.
End CallData.
Definition CallData `{ℋ : State.Trait} : Set := M.val CallData.t.

Module impls.
  Module TopicsBuilder.
    Section TopicsBuilder.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        topics :
          alloc.vec.Vec
            (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)
            alloc.vec.Vec.Default.A;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_topics : Notation.Dot "topics" := {
        Notation.dot x := let* x := M.read x in Pure x.(topics) : M _;
      }.
      Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(topics) : M _;
      }.
    End TopicsBuilder.
  End TopicsBuilder.
  Definition TopicsBuilder `{ℋ : State.Trait} : Set := M.val TopicsBuilder.t.
End impls.

(* Module TopicsBuilder.
  Section TopicsBuilder.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      topics :
        alloc.vec.Vec
          (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)
          alloc.vec.Vec.Default.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_topics : Notation.Dot "topics" := {
      Notation.dot x := let* x := M.read x in Pure x.(topics) : M _;
    }.
    Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(topics) : M _;
    }.
  End TopicsBuilder.
End TopicsBuilder.
Definition TopicsBuilder `{ℋ : State.Trait} : Set := M.val TopicsBuilder.t. *)

Module EnvInstance.
  Section EnvInstance.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      engine : ink_engine.ext.Engine;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_engine : Notation.Dot "engine" := {
      Notation.dot x := let* x := M.read x in Pure x.(engine) : M _;
    }.
    Global Instance Get_AF_engine : Notation.DoubleColon t "engine" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(engine) : M _;
    }.
  End EnvInstance.
End EnvInstance.
Definition EnvInstance `{ℋ : State.Trait} : Set := M.val EnvInstance.t.

Module OffChainError.
  Inductive t `{ℋ : State.Trait} : Set :=
  | Account (_ : ink_env.engine.off_chain.AccountError)
  | UninitializedBlocks
  | UninitializedExecutionContext
  | UnregisteredChainExtension.
End OffChainError.
Definition OffChainError `{ℋ : State.Trait} : Set := OffChainError.t.

Module AccountError.
  Inductive t `{ℋ : State.Trait} : Set :=
  | Decoding (_ : parity_scale_codec.error.Error)
  | UnexpectedUserAccount
  | NoAccountForId (_ : alloc.vec.Vec u8 alloc.vec.Vec.Default.A).
End AccountError.
Definition AccountError `{ℋ : State.Trait} : Set := AccountError.t.

Module HashOutput.
  Section HashOutput.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: ink_env.hash.private.Sealed.Trait Self;
      Type_ : Set;
      ℒ_1 :: core.default.Default.Trait Type_;
    }.
    
    Global Instance Method_Type_ `(Trait) :
      Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End HashOutput.
End HashOutput.

Module CryptoHash.
  Section CryptoHash.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: ink_env.hash.HashOutput.Trait Self;
      hash :
        (ref (Slice u8)) ->
          (mut_ref
            (ink_env.hash.HashOutput.Type_
              (Self := Self)
              (Trait := ltac:(try clear Trait; hauto l: on))))
          ->
          M unit;
    }.
    
  End CryptoHash.
End CryptoHash.

Module Sha2x256.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End Sha2x256.
Definition Sha2x256 `{ℋ : State.Trait} : Set := Sha2x256.t.

Module Keccak256.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End Keccak256.
Definition Keccak256 `{ℋ : State.Trait} : Set := Keccak256.t.

Module Blake2x256.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End Blake2x256.
Definition Blake2x256 `{ℋ : State.Trait} : Set := Blake2x256.t.

Module Blake2x128.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End Blake2x128.
Definition Blake2x128 `{ℋ : State.Trait} : Set := Blake2x128.t.

Module Wrap_private_1.
  Module private.
    Module Sealed.
      Section Sealed.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End Sealed.
    End Sealed.
  End private.
End Wrap_private_1.
Import Wrap_private_1.

Module Sealed.
  Section Sealed.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End Sealed.
End Sealed.

Module TopicsBuilderBackend.
  Section TopicsBuilderBackend.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) {E : Set} : Type := {
      ℒ_0 :: ink_env.types.Environment.Trait E;
      Output : Set;
      expect : (mut_ref Self) -> usize -> M unit;
      push_topic {T : Set} {ℋ_0 : parity_scale_codec.codec.Encode.Trait T} :
        (mut_ref Self) -> (ref T) -> M unit;
      output : Self -> M Output;
    }.
    
    Global Instance Method_Output `(Trait) :
      Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
  End TopicsBuilderBackend.
End TopicsBuilderBackend.

Module TopicsBuilder.
  Section TopicsBuilder.
    Context `{ℋ : State.Trait}.
    
    Context {S E B : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      backend : B;
      state : core.marker.PhantomData (S * E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_backend : Notation.Dot "backend" := {
      Notation.dot x := let* x := M.read x in Pure x.(backend) : M _;
    }.
    Global Instance Get_AF_backend : Notation.DoubleColon t "backend" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(backend) : M _;
    }.
    Global Instance Get_state : Notation.Dot "state" := {
      Notation.dot x := let* x := M.read x in Pure x.(state) : M _;
    }.
    Global Instance Get_AF_state : Notation.DoubleColon t "state" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(state) : M _;
    }.
  End TopicsBuilder.
End TopicsBuilder.
Definition TopicsBuilder (S E B : Set) `{ℋ : State.Trait} : Set :=
  M.val (TopicsBuilder.t (S := S) (E := E) (B := B)).

Module Wrap_state_2.
  Module state.
    Module Uninit.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End Uninit.
    Definition Uninit `{ℋ : State.Trait} : Set := Uninit.t.
    
    Module HasRemainingTopics.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End HasRemainingTopics.
    Definition HasRemainingTopics `{ℋ : State.Trait} : Set :=
      HasRemainingTopics.t.
    
    Module NoRemainingTopics.
      Inductive t `{ℋ : State.Trait} : Set :=
      .
    End NoRemainingTopics.
    Definition NoRemainingTopics `{ℋ : State.Trait} : Set :=
      NoRemainingTopics.t.
  End state.
End Wrap_state_2.
Import Wrap_state_2.

Module Uninit.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End Uninit.
Definition Uninit `{ℋ : State.Trait} : Set := Uninit.t.

Module HasRemainingTopics.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End HasRemainingTopics.
Definition HasRemainingTopics `{ℋ : State.Trait} : Set := HasRemainingTopics.t.

Module NoRemainingTopics.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End NoRemainingTopics.
Definition NoRemainingTopics `{ℋ : State.Trait} : Set := NoRemainingTopics.t.

Module SomeRemainingTopics.
  Section SomeRemainingTopics.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Next : Set;
    }.
    
    Global Instance Method_Next `(Trait) :
      Notation.DoubleColonType Self "Next" := {
      Notation.double_colon_type := Next;
    }.
  End SomeRemainingTopics.
End SomeRemainingTopics.

Module EventTopicsAmount.
  Section EventTopicsAmount.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      AMOUNT : usize;
    }.
    
  End EventTopicsAmount.
End EventTopicsAmount.

Module Topics.
  Section Topics.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      RemainingTopics : Set;
      ℒ_0 :: ink_env.topics.EventTopicsAmount.Trait RemainingTopics;
      topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :
        (ref Self) ->
          (ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B) ->
          M
            (ink_env.topics.TopicsBuilderBackend.Output
              (Self := B)
              (Trait := ltac:(try clear Trait; hauto l: on)));
    }.
    
    Global Instance Method_RemainingTopics `(Trait) :
      Notation.DoubleColonType Self "RemainingTopics" := {
      Notation.double_colon_type := RemainingTopics;
    }.
  End Topics.
End Topics.

Module PrefixedValue.
  Section PrefixedValue.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      prefix : ref (Slice u8);
      value : ref T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_prefix : Notation.Dot "prefix" := {
      Notation.dot x := let* x := M.read x in Pure x.(prefix) : M _;
    }.
    Global Instance Get_AF_prefix : Notation.DoubleColon t "prefix" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(prefix) : M _;
    }.
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
    }.
  End PrefixedValue.
End PrefixedValue.
Definition PrefixedValue (T : Set) `{ℋ : State.Trait} : Set :=
  M.val (PrefixedValue.t (T := T)).
