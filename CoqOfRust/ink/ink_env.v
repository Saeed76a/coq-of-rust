(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module types.
  Module FromLittleEndian.
    Class Trait
        (Self : Set)
        {Bytes : Set}
        `{core.default.Default.Trait Bytes}
        `{core.convert.AsRef.Trait Bytes}
        `{core.convert.AsMut.Trait Bytes} :
        Set := {
      Bytes := Bytes;
      from_le_bytes `{H : State.Trait} : ImplSelf.Bytes -> (M (H := H) Self);
    }.
    
    Global Instance Method_Bytes `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Bytes" := {
      Notation.double_colon_type := Bytes;
    }.
    Global Instance Method_from_le_bytes `{H : State.Trait} `(Trait)
      : Notation.Dot "from_le_bytes" := {
      Notation.dot := from_le_bytes;
    }.
  End FromLittleEndian.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u8.
    Definition Self := u8.
    
    Definition Bytes : Set := list u8.
    
    Definition from_le_bytes
        `{H : State.Trait}
        (bytes : ImplSelf.Bytes)
        : M (H := H) Self :=
      u8::["from_le_bytes"] bytes.
    
    Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.from_le_bytes
        `{H : State.Trait}
        :=
        from_le_bytes;
    }.
  End Impl_ink_env_types_FromLittleEndian_for_u8.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u16.
    Definition Self := u16.
    
    Definition Bytes : Set := list u8.
    
    Definition from_le_bytes
        `{H : State.Trait}
        (bytes : ImplSelf.Bytes)
        : M (H := H) Self :=
      u16::["from_le_bytes"] bytes.
    
    Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.from_le_bytes
        `{H : State.Trait}
        :=
        from_le_bytes;
    }.
  End Impl_ink_env_types_FromLittleEndian_for_u16.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u32.
    Definition Self := u32.
    
    Definition Bytes : Set := list u8.
    
    Definition from_le_bytes
        `{H : State.Trait}
        (bytes : ImplSelf.Bytes)
        : M (H := H) Self :=
      u32::["from_le_bytes"] bytes.
    
    Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.from_le_bytes
        `{H : State.Trait}
        :=
        from_le_bytes;
    }.
  End Impl_ink_env_types_FromLittleEndian_for_u32.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u64.
    Definition Self := u64.
    
    Definition Bytes : Set := list u8.
    
    Definition from_le_bytes
        `{H : State.Trait}
        (bytes : ImplSelf.Bytes)
        : M (H := H) Self :=
      u64::["from_le_bytes"] bytes.
    
    Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.from_le_bytes
        `{H : State.Trait}
        :=
        from_le_bytes;
    }.
  End Impl_ink_env_types_FromLittleEndian_for_u64.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u128.
    Definition Self := u128.
    
    Definition Bytes : Set := list u8.
    
    Definition from_le_bytes
        `{H : State.Trait}
        (bytes : ImplSelf.Bytes)
        : M (H := H) Self :=
      u128::["from_le_bytes"] bytes.
    
    Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.from_le_bytes
        `{H : State.Trait}
        :=
        from_le_bytes;
    }.
  End Impl_ink_env_types_FromLittleEndian_for_u128.
  
  Module AccountIdGuard.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End AccountIdGuard.
  
  Module Impl_ink_env_types_AccountIdGuard_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Global Instance I : ink_env.types.AccountIdGuard.Trait Self :=
      ink_env.types.AccountIdGuard.Build_Trait _.
  End Impl_ink_env_types_AccountIdGuard_for_ink_primitives_types_AccountId.
  
  Module CodecAsType.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End CodecAsType.
  
  Module Impl_ink_env_types_CodecAsType_for_T.
  Section Impl_ink_env_types_CodecAsType_for_T.
    Context {T : Set}.
    
    Definition Self := T.
    
    Global Instance I : ink_env.types.CodecAsType.Trait Self :=
      ink_env.types.CodecAsType.Build_Trait _.
  End Impl_ink_env_types_CodecAsType_for_T.
  End Impl_ink_env_types_CodecAsType_for_T.
  
  Module Environment.
    Class Trait
        (Self : Set)
        {AccountId : Set}
        `{parity_scale_codec.codec.Codec.Trait AccountId}
        `{ink_env.types.CodecAsType.Trait AccountId}
        `{core.clone.Clone.Trait AccountId}
        `{core.cmp.PartialEq.Trait AccountId}
        `{core.cmp.Eq.Trait AccountId}
        `{core.cmp.Ord.Trait AccountId}
        `{core.convert.AsRef.Trait AccountId}
        `{core.convert.AsMut.Trait AccountId}
        {Balance : Set}
        `{parity_scale_codec.codec.Codec.Trait Balance}
        `{ink_env.types.CodecAsType.Trait Balance}
        `{core.marker.Copy.Trait Balance}
        `{core.clone.Clone.Trait Balance}
        `{core.cmp.PartialEq.Trait Balance}
        `{core.cmp.Eq.Trait Balance}
        `{ink_env.arithmetic.AtLeast32BitUnsigned.Trait Balance}
        `{ink_env.types.FromLittleEndian.Trait Balance}
        {Hash : Set}
        `{parity_scale_codec.codec.Codec.Trait Hash}
        `{ink_env.types.CodecAsType.Trait Hash}
        `{core.marker.Copy.Trait Hash}
        `{core.clone.Clone.Trait Hash}
        `{ink_primitives.types.Clear.Trait Hash}
        `{core.cmp.PartialEq.Trait Hash}
        `{core.cmp.Eq.Trait Hash}
        `{core.cmp.Ord.Trait Hash}
        `{core.convert.AsRef.Trait Hash}
        `{core.convert.AsMut.Trait Hash}
        {Timestamp : Set}
        `{parity_scale_codec.codec.Codec.Trait Timestamp}
        `{ink_env.types.CodecAsType.Trait Timestamp}
        `{core.marker.Copy.Trait Timestamp}
        `{core.clone.Clone.Trait Timestamp}
        `{core.cmp.PartialEq.Trait Timestamp}
        `{core.cmp.Eq.Trait Timestamp}
        `{ink_env.arithmetic.AtLeast32BitUnsigned.Trait Timestamp}
        `{ink_env.types.FromLittleEndian.Trait Timestamp}
        {BlockNumber : Set}
        `{parity_scale_codec.codec.Codec.Trait BlockNumber}
        `{ink_env.types.CodecAsType.Trait BlockNumber}
        `{core.marker.Copy.Trait BlockNumber}
        `{core.clone.Clone.Trait BlockNumber}
        `{core.cmp.PartialEq.Trait BlockNumber}
        `{core.cmp.Eq.Trait BlockNumber}
        `{ink_env.arithmetic.AtLeast32BitUnsigned.Trait BlockNumber}
        `{ink_env.types.FromLittleEndian.Trait BlockNumber}
        {ChainExtension : Set} :
        Set := {
      MAX_EVENT_TOPICS `{H : State.Trait} : usize;
      AccountId := AccountId;
      Balance := Balance;
      Hash := Hash;
      Timestamp := Timestamp;
      BlockNumber := BlockNumber;
      ChainExtension := ChainExtension;
    }.
    
    Global Instance Method_MAX_EVENT_TOPICS `{H : State.Trait} `(Trait)
      : Notation.Dot "MAX_EVENT_TOPICS" := {
      Notation.dot := MAX_EVENT_TOPICS;
    }.
    Global Instance Method_AccountId `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "AccountId" := {
      Notation.double_colon_type := AccountId;
    }.
    Global Instance Method_Balance `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Balance" := {
      Notation.double_colon_type := Balance;
    }.
    Global Instance Method_Hash `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Hash" := {
      Notation.double_colon_type := Hash;
    }.
    Global Instance Method_Timestamp `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Timestamp" := {
      Notation.double_colon_type := Timestamp;
    }.
    Global Instance Method_BlockNumber `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "BlockNumber" := {
      Notation.double_colon_type := BlockNumber;
    }.
    Global Instance Method_ChainExtension `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "ChainExtension" := {
      Notation.double_colon_type := ChainExtension;
    }.
  End Environment.
  
  Module NoChainExtension.
    Inductive t : Set :=
    .
  End NoChainExtension.
  Definition NoChainExtension := NoChainExtension.t.
  
  Module DefaultEnvironment.
    Inductive t : Set :=
    .
  End DefaultEnvironment.
  Definition DefaultEnvironment := DefaultEnvironment.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_core_clone_Clone_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.types.DefaultEnvironment :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_types_DefaultEnvironment.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.types.DefaultEnvironment)
        : M (H := H) bool :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_core_cmp_Eq_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_ink_env_types_Environment_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Definition MAX_EVENT_TOPICS := Pure 4.
    
    Global Instance AssociatedFunction_MAX_EVENT_TOPICS `{H : State.Trait} :
      Notation.DoubleColon Self "MAX_EVENT_TOPICS" := {
      Notation.double_colon := MAX_EVENT_TOPICS;
    }.
    
    Definition AccountId : Set := ink_primitives.types.AccountId.
    
    Definition Balance : Set := ink_env.types.Balance.
    
    Definition Hash : Set := ink_primitives.types.Hash.
    
    Definition Timestamp : Set := ink_env.types.Timestamp.
    
    Definition BlockNumber : Set := ink_env.types.BlockNumber.
    
    Definition ChainExtension : Set := ink_env.types.NoChainExtension.
    
    Global Instance I : ink_env.types.Environment.Trait Self := {
      ink_env.types.Environment.MAX_EVENT_TOPICS
        `{H : State.Trait}
        :=
        MAX_EVENT_TOPICS;
    }.
  End Impl_ink_env_types_Environment_for_ink_env_types_DefaultEnvironment.
  
  Definition Balance : Set := u128.
  
  Definition Timestamp : Set := u64.
  
  Definition Gas : Set := u64.
  
  Definition BlockNumber : Set := u32.
End types.

Module FromLittleEndian.
  Class Trait
      (Self : Set)
      {Bytes : Set}
      `{core.default.Default.Trait Bytes}
      `{core.convert.AsRef.Trait Bytes}
      `{core.convert.AsMut.Trait Bytes} :
      Set := {
    Bytes := Bytes;
    from_le_bytes `{H : State.Trait} : ImplSelf.Bytes -> (M (H := H) Self);
  }.
  
  Global Instance Method_Bytes `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Bytes" := {
    Notation.double_colon_type := Bytes;
  }.
  Global Instance Method_from_le_bytes `{H : State.Trait} `(Trait)
    : Notation.Dot "from_le_bytes" := {
    Notation.dot := from_le_bytes;
  }.
End FromLittleEndian.

Module Impl_ink_env_types_FromLittleEndian_for_u8.
  Definition Self := u8.
  
  Definition Bytes : Set := list u8.
  
  Definition from_le_bytes
      `{H : State.Trait}
      (bytes : ImplSelf.Bytes)
      : M (H := H) Self :=
    u8::["from_le_bytes"] bytes.
  
  Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.from_le_bytes
      `{H : State.Trait}
      :=
      from_le_bytes;
  }.
End Impl_ink_env_types_FromLittleEndian_for_u8.

Module Impl_ink_env_types_FromLittleEndian_for_u16.
  Definition Self := u16.
  
  Definition Bytes : Set := list u8.
  
  Definition from_le_bytes
      `{H : State.Trait}
      (bytes : ImplSelf.Bytes)
      : M (H := H) Self :=
    u16::["from_le_bytes"] bytes.
  
  Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.from_le_bytes
      `{H : State.Trait}
      :=
      from_le_bytes;
  }.
End Impl_ink_env_types_FromLittleEndian_for_u16.

Module Impl_ink_env_types_FromLittleEndian_for_u32.
  Definition Self := u32.
  
  Definition Bytes : Set := list u8.
  
  Definition from_le_bytes
      `{H : State.Trait}
      (bytes : ImplSelf.Bytes)
      : M (H := H) Self :=
    u32::["from_le_bytes"] bytes.
  
  Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.from_le_bytes
      `{H : State.Trait}
      :=
      from_le_bytes;
  }.
End Impl_ink_env_types_FromLittleEndian_for_u32.

Module Impl_ink_env_types_FromLittleEndian_for_u64.
  Definition Self := u64.
  
  Definition Bytes : Set := list u8.
  
  Definition from_le_bytes
      `{H : State.Trait}
      (bytes : ImplSelf.Bytes)
      : M (H := H) Self :=
    u64::["from_le_bytes"] bytes.
  
  Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.from_le_bytes
      `{H : State.Trait}
      :=
      from_le_bytes;
  }.
End Impl_ink_env_types_FromLittleEndian_for_u64.

Module Impl_ink_env_types_FromLittleEndian_for_u128.
  Definition Self := u128.
  
  Definition Bytes : Set := list u8.
  
  Definition from_le_bytes
      `{H : State.Trait}
      (bytes : ImplSelf.Bytes)
      : M (H := H) Self :=
    u128::["from_le_bytes"] bytes.
  
  Global Instance AssociatedFunction_from_le_bytes `{H : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.from_le_bytes
      `{H : State.Trait}
      :=
      from_le_bytes;
  }.
End Impl_ink_env_types_FromLittleEndian_for_u128.

Module AccountIdGuard.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End AccountIdGuard.

Module Impl_ink_env_types_AccountIdGuard_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Global Instance I : ink_env.types.AccountIdGuard.Trait Self :=
    ink_env.types.AccountIdGuard.Build_Trait _.
End Impl_ink_env_types_AccountIdGuard_for_ink_primitives_types_AccountId.

Module CodecAsType.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End CodecAsType.

Module Impl_ink_env_types_CodecAsType_for_T.
Section Impl_ink_env_types_CodecAsType_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Global Instance I : ink_env.types.CodecAsType.Trait Self :=
    ink_env.types.CodecAsType.Build_Trait _.
End Impl_ink_env_types_CodecAsType_for_T.
End Impl_ink_env_types_CodecAsType_for_T.

Module Environment.
  Class Trait
      (Self : Set)
      {AccountId : Set}
      `{parity_scale_codec.codec.Codec.Trait AccountId}
      `{ink_env.types.CodecAsType.Trait AccountId}
      `{core.clone.Clone.Trait AccountId}
      `{core.cmp.PartialEq.Trait AccountId}
      `{core.cmp.Eq.Trait AccountId}
      `{core.cmp.Ord.Trait AccountId}
      `{core.convert.AsRef.Trait AccountId}
      `{core.convert.AsMut.Trait AccountId}
      {Balance : Set}
      `{parity_scale_codec.codec.Codec.Trait Balance}
      `{ink_env.types.CodecAsType.Trait Balance}
      `{core.marker.Copy.Trait Balance}
      `{core.clone.Clone.Trait Balance}
      `{core.cmp.PartialEq.Trait Balance}
      `{core.cmp.Eq.Trait Balance}
      `{ink_env.arithmetic.AtLeast32BitUnsigned.Trait Balance}
      `{ink_env.types.FromLittleEndian.Trait Balance}
      {Hash : Set}
      `{parity_scale_codec.codec.Codec.Trait Hash}
      `{ink_env.types.CodecAsType.Trait Hash}
      `{core.marker.Copy.Trait Hash}
      `{core.clone.Clone.Trait Hash}
      `{ink_primitives.types.Clear.Trait Hash}
      `{core.cmp.PartialEq.Trait Hash}
      `{core.cmp.Eq.Trait Hash}
      `{core.cmp.Ord.Trait Hash}
      `{core.convert.AsRef.Trait Hash}
      `{core.convert.AsMut.Trait Hash}
      {Timestamp : Set}
      `{parity_scale_codec.codec.Codec.Trait Timestamp}
      `{ink_env.types.CodecAsType.Trait Timestamp}
      `{core.marker.Copy.Trait Timestamp}
      `{core.clone.Clone.Trait Timestamp}
      `{core.cmp.PartialEq.Trait Timestamp}
      `{core.cmp.Eq.Trait Timestamp}
      `{ink_env.arithmetic.AtLeast32BitUnsigned.Trait Timestamp}
      `{ink_env.types.FromLittleEndian.Trait Timestamp}
      {BlockNumber : Set}
      `{parity_scale_codec.codec.Codec.Trait BlockNumber}
      `{ink_env.types.CodecAsType.Trait BlockNumber}
      `{core.marker.Copy.Trait BlockNumber}
      `{core.clone.Clone.Trait BlockNumber}
      `{core.cmp.PartialEq.Trait BlockNumber}
      `{core.cmp.Eq.Trait BlockNumber}
      `{ink_env.arithmetic.AtLeast32BitUnsigned.Trait BlockNumber}
      `{ink_env.types.FromLittleEndian.Trait BlockNumber}
      {ChainExtension : Set} :
      Set := {
    MAX_EVENT_TOPICS `{H : State.Trait} : usize;
    AccountId := AccountId;
    Balance := Balance;
    Hash := Hash;
    Timestamp := Timestamp;
    BlockNumber := BlockNumber;
    ChainExtension := ChainExtension;
  }.
  
  Global Instance Method_MAX_EVENT_TOPICS `{H : State.Trait} `(Trait)
    : Notation.Dot "MAX_EVENT_TOPICS" := {
    Notation.dot := MAX_EVENT_TOPICS;
  }.
  Global Instance Method_AccountId `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "AccountId" := {
    Notation.double_colon_type := AccountId;
  }.
  Global Instance Method_Balance `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Balance" := {
    Notation.double_colon_type := Balance;
  }.
  Global Instance Method_Hash `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Hash" := {
    Notation.double_colon_type := Hash;
  }.
  Global Instance Method_Timestamp `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Timestamp" := {
    Notation.double_colon_type := Timestamp;
  }.
  Global Instance Method_BlockNumber `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "BlockNumber" := {
    Notation.double_colon_type := BlockNumber;
  }.
  Global Instance Method_ChainExtension `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "ChainExtension" := {
    Notation.double_colon_type := ChainExtension;
  }.
End Environment.

Module NoChainExtension.
  Inductive t : Set :=
  .
End NoChainExtension.
Definition NoChainExtension := NoChainExtension.t.

Module Impl_scale_info_TypeInfo_for_ink_env_types_NoChainExtension.
  Definition Self := ink_env.types.NoChainExtension.
  
  Definition Identity : Set := Self.
  
  Definition type_info
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) scale_info.ty.Type :=
    let* α0 := scale_info.ty.Type::["builder"] tt in
    let* α1 :=
      scale_info.ty.path.Path::["new"] "NoChainExtension" "ink_env::types" in
    let* α2 := α0.["path"] α1 in
    let* α3 := alloc.vec.Vec::["new"] tt in
    let* α4 := α2.["type_params"] α3 in
    let* α5 :=
      α4.["docs"]
        (addr_of
          [ "Placeholder for chains that have no defined chain extension." ]) in
    let* α6 := scale_info.build.Variants::["new"] tt in
    α5.["variant"] α6.
  
  Global Instance AssociatedFunction_type_info `{H : State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info `{H : State.Trait} := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_env_types_NoChainExtension.

Module DefaultEnvironment.
  Inductive t : Set :=
  .
End DefaultEnvironment.
Definition DefaultEnvironment := DefaultEnvironment.t.

Module Impl_scale_info_TypeInfo_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Definition Identity : Set := Self.
  
  Definition type_info
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) scale_info.ty.Type :=
    let* α0 := scale_info.ty.Type::["builder"] tt in
    let* α1 :=
      scale_info.ty.path.Path::["new"] "DefaultEnvironment" "ink_env::types" in
    let* α2 := α0.["path"] α1 in
    let* α3 := alloc.vec.Vec::["new"] tt in
    let* α4 := α2.["type_params"] α3 in
    let* α5 :=
      α4.["docs"]
        (addr_of [ "The fundamental types of the default configuration." ]) in
    let* α6 := scale_info.build.Variants::["new"] tt in
    α5.["variant"] α6.
  
  Global Instance AssociatedFunction_type_info `{H : State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info `{H : State.Trait} := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_env_types_DefaultEnvironment.

Module Impl_core_fmt_Debug_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_types_DefaultEnvironment.

Module Impl_core_clone_Clone_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.types.DefaultEnvironment :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_types_DefaultEnvironment.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_env_types_DefaultEnvironment.

Module Impl_core_cmp_PartialEq_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.types.DefaultEnvironment)
      : M (H := H) bool :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_types_DefaultEnvironment.

Module Impl_core_marker_StructuralEq_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_types_DefaultEnvironment.

Module Impl_core_cmp_Eq_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_types_DefaultEnvironment.

Module Impl_ink_env_types_Environment_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Definition MAX_EVENT_TOPICS := Pure 4.
  
  Global Instance AssociatedFunction_MAX_EVENT_TOPICS `{H : State.Trait} :
    Notation.DoubleColon Self "MAX_EVENT_TOPICS" := {
    Notation.double_colon := MAX_EVENT_TOPICS;
  }.
  
  Definition AccountId : Set := ink_primitives.types.AccountId.
  
  Definition Balance : Set := ink_env.types.Balance.
  
  Definition Hash : Set := ink_primitives.types.Hash.
  
  Definition Timestamp : Set := ink_env.types.Timestamp.
  
  Definition BlockNumber : Set := ink_env.types.BlockNumber.
  
  Definition ChainExtension : Set := ink_env.types.NoChainExtension.
  
  Global Instance I : ink_env.types.Environment.Trait Self := {
    ink_env.types.Environment.MAX_EVENT_TOPICS
      `{H : State.Trait}
      :=
      MAX_EVENT_TOPICS;
  }.
End Impl_ink_env_types_Environment_for_ink_env_types_DefaultEnvironment.

Definition Balance : Set := u128.

Definition Timestamp : Set := u64.

Definition Gas : Set := u64.

Definition BlockNumber : Set := u32.

Module api.
  Definition caller
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) ImplE.AccountId :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => ink_env.backend.TypedEnvBackend.caller instance).
  
  Definition transferred_value
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) ImplE.Balance :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.transferred_value instance).
  
  Definition weight_to_fee
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (gas : ink_env.types.Gas)
      : M (H := H) ImplE.Balance :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.weight_to_fee instance gas).
  
  Definition gas_left
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) ink_env.types.Gas :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => ink_env.backend.TypedEnvBackend.gas_left instance).
  
  Definition block_timestamp
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) ImplE.Timestamp :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.block_timestamp instance).
  
  Definition account_id
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) ImplE.AccountId :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => ink_env.backend.TypedEnvBackend.account_id instance).
  
  Definition balance
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) ImplE.Balance :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => ink_env.backend.TypedEnvBackend.balance instance).
  
  Definition block_number
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) ImplE.BlockNumber :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => ink_env.backend.TypedEnvBackend.block_number instance).
  
  Definition minimum_balance
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) ImplE.Balance :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.minimum_balance instance).
  
  Definition emit_event
      `{H : State.Trait}
      {E Event : Set}
      `{ink_env.types.Environment.Trait E}
      `{ink_env.topics.Topics.Trait Event}
      `{parity_scale_codec.codec.Encode.Trait Event}
      (event : Event)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.emit_event instance event).
  
  Definition set_contract_storage
      `{H : State.Trait}
      {K V : Set}
      `{parity_scale_codec.codec.Encode.Trait K}
      `{ink_storage_traits.storage.Storable.Trait V}
      (key : ref K)
      (value : ref V)
      : M (H := H) (core.option.Option u32) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.set_contract_storage instance key value).
  
  Definition get_contract_storage
      `{H : State.Trait}
      {K R : Set}
      `{parity_scale_codec.codec.Encode.Trait K}
      `{ink_storage_traits.storage.Storable.Trait R}
      (key : ref K)
      : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.get_contract_storage instance key).
  
  Definition take_contract_storage
      `{H : State.Trait}
      {K R : Set}
      `{parity_scale_codec.codec.Encode.Trait K}
      `{ink_storage_traits.storage.Storable.Trait R}
      (key : ref K)
      : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.take_contract_storage instance key).
  
  Definition contains_contract_storage
      `{H : State.Trait}
      {K : Set}
      `{parity_scale_codec.codec.Encode.Trait K}
      (key : ref K)
      : M (H := H) (core.option.Option u32) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.contains_contract_storage instance key).
  
  Definition clear_contract_storage
      `{H : State.Trait}
      {K : Set}
      `{parity_scale_codec.codec.Encode.Trait K}
      (key : ref K)
      : M (H := H) (core.option.Option u32) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.clear_contract_storage instance key).
  
  Definition invoke_contract
      `{H : State.Trait}
      {E Args R : Set}
      `{ink_env.types.Environment.Trait E}
      `{parity_scale_codec.codec.Encode.Trait Args}
      `{parity_scale_codec.codec.Decode.Trait R}
      (params
        :
        ref
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.Call E)
            Args
            R))
      : M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.invoke_contract instance params).
  
  Definition invoke_contract_delegate
      `{H : State.Trait}
      {E Args R : Set}
      `{ink_env.types.Environment.Trait E}
      `{parity_scale_codec.codec.Encode.Trait Args}
      `{parity_scale_codec.codec.Decode.Trait R}
      (params
        :
        ref
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.DelegateCall E)
            Args
            R))
      : M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.invoke_contract_delegate
          instance
          params).
  
  Definition instantiate_contract
      `{H : State.Trait}
      {E ContractRef Args Salt R : Set}
      `{ink_env.types.Environment.Trait E}
      `{ink_env.call.create_builder.FromAccountId.Trait E ContractRef}
      `{parity_scale_codec.codec.Encode.Trait Args}
      `{core.convert.AsRef.Trait Slice Salt}
      `{ink_env.call.create_builder.ConstructorReturnType.Trait ContractRef R}
      (params
        :
        ref
          (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
      :
        M (H := H)
          (ink_env.error.Result
            (ink_primitives.ConstructorResult
              ink_env.call.create_builder.ConstructorReturnType.Output)) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.instantiate_contract instance params).
  
  Definition terminate_contract
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (beneficiary : ImplE.AccountId)
      : M (H := H) Empty_set :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.terminate_contract
          instance
          beneficiary).
  
  Definition transfer
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (destination : ImplE.AccountId)
      (value : ImplE.Balance)
      : M (H := H) (ink_env.error.Result unit) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.transfer instance destination value).
  
  Definition decode_input
      `{H : State.Trait}
      {T : Set}
      `{parity_scale_codec.codec.Decode.Trait T}
      (_ : unit)
      : M (H := H) (ink_env.error.Result T) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => ink_env.backend.EnvBackend.decode_input instance).
  
  Definition return_value
      `{H : State.Trait}
      {R : Set}
      `{parity_scale_codec.codec.Encode.Trait R}
      (return_flags : ink_env.backend.ReturnFlags)
      (return_value : ref R)
      : M (H := H) Empty_set :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.return_value
          instance
          return_flags
          return_value).
  
  Definition debug_message
      `{H : State.Trait}
      (message : ref str)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.debug_message instance message).
  
  Definition hash_bytes
      `{H : State.Trait}
      {H : Set}
      `{ink_env.hash.CryptoHash.Trait H}
      (input : ref Slice)
      (output : mut_ref ink_env.hash.HashOutput.Type)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => instance.["hash_bytes"] input output).
  
  Definition hash_encoded
      `{H : State.Trait}
      {H T : Set}
      `{ink_env.hash.CryptoHash.Trait H}
      `{parity_scale_codec.codec.Encode.Trait T}
      (input : ref T)
      (output : mut_ref ink_env.hash.HashOutput.Type)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => instance.["hash_encoded"] input output).
  
  Definition ecdsa_recover
      `{H : State.Trait}
      (signature : ref list u8)
      (message_hash : ref list u8)
      (output : mut_ref list u8)
      : M (H := H) (ink_env.error.Result unit) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        instance.["ecdsa_recover"] signature message_hash output).
  
  Definition ecdsa_to_eth_address
      `{H : State.Trait}
      (pubkey : ref list u8)
      (output : mut_ref list u8)
      : M (H := H) (ink_env.error.Result unit) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => instance.["ecdsa_to_eth_address"] pubkey output).
  
  Definition is_contract
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (account : ref ImplE.AccountId)
      : M (H := H) bool :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.is_contract instance account).
  
  Definition code_hash
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (account : ref ImplE.AccountId)
      : M (H := H) (ink_env.error.Result ImplE.Hash) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.code_hash instance account).
  
  Definition own_code_hash
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) (ink_env.error.Result ImplE.Hash) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => ink_env.backend.TypedEnvBackend.own_code_hash instance).
  
  Definition caller_is_origin
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      : M (H := H) bool :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.caller_is_origin instance).
  
  Definition set_code_hash
      `{H : State.Trait}
      (code_hash : ref list u8)
      : M (H := H) (ink_env.error.Result unit) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => instance.["set_code_hash"] code_hash).
  
  Definition set_code_hash2
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (code_hash : ref ImplE.Hash)
      : M (H := H) (ink_env.error.Result unit) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* α0 := code_hash.["as_ref"] in
        instance.["set_code_hash"] α0).
  
  Definition call_runtime
      `{H : State.Trait}
      {E Call : Set}
      `{ink_env.types.Environment.Trait E}
      `{parity_scale_codec.codec.Encode.Trait Call}
      (call : ref Call)
      : M (H := H) (ink_env.error.Result unit) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.TypedEnvBackend.call_runtime instance call).
End api.

Definition caller
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) ImplE.AccountId :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.caller instance).

Definition transferred_value
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) ImplE.Balance :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.transferred_value instance).

Definition weight_to_fee
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (gas : ink_env.types.Gas)
    : M (H := H) ImplE.Balance :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.weight_to_fee instance gas).

Definition gas_left
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) ink_env.types.Gas :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.gas_left instance).

Definition block_timestamp
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) ImplE.Timestamp :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.block_timestamp instance).

Definition account_id
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) ImplE.AccountId :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.account_id instance).

Definition balance
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) ImplE.Balance :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.balance instance).

Definition block_number
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) ImplE.BlockNumber :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.block_number instance).

Definition minimum_balance
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) ImplE.Balance :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.minimum_balance instance).

Definition emit_event
    `{H : State.Trait}
    {E Event : Set}
    `{ink_env.types.Environment.Trait E}
    `{ink_env.topics.Topics.Trait Event}
    `{parity_scale_codec.codec.Encode.Trait Event}
    (event : Event)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.emit_event instance event).

Definition set_contract_storage
    `{H : State.Trait}
    {K V : Set}
    `{parity_scale_codec.codec.Encode.Trait K}
    `{ink_storage_traits.storage.Storable.Trait V}
    (key : ref K)
    (value : ref V)
    : M (H := H) (core.option.Option u32) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.EnvBackend.set_contract_storage instance key value).

Definition get_contract_storage
    `{H : State.Trait}
    {K R : Set}
    `{parity_scale_codec.codec.Encode.Trait K}
    `{ink_storage_traits.storage.Storable.Trait R}
    (key : ref K)
    : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.EnvBackend.get_contract_storage instance key).

Definition take_contract_storage
    `{H : State.Trait}
    {K R : Set}
    `{parity_scale_codec.codec.Encode.Trait K}
    `{ink_storage_traits.storage.Storable.Trait R}
    (key : ref K)
    : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.EnvBackend.take_contract_storage instance key).

Definition contains_contract_storage
    `{H : State.Trait}
    {K : Set}
    `{parity_scale_codec.codec.Encode.Trait K}
    (key : ref K)
    : M (H := H) (core.option.Option u32) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.EnvBackend.contains_contract_storage instance key).

Definition clear_contract_storage
    `{H : State.Trait}
    {K : Set}
    `{parity_scale_codec.codec.Encode.Trait K}
    (key : ref K)
    : M (H := H) (core.option.Option u32) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.EnvBackend.clear_contract_storage instance key).

Definition invoke_contract
    `{H : State.Trait}
    {E Args R : Set}
    `{ink_env.types.Environment.Trait E}
    `{parity_scale_codec.codec.Encode.Trait Args}
    `{parity_scale_codec.codec.Decode.Trait R}
    (params
      :
      ref
        (ink_env.call.call_builder.CallParams
          E
          (ink_env.call.call_builder.Call E)
          Args
          R))
    : M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.invoke_contract instance params).

Definition invoke_contract_delegate
    `{H : State.Trait}
    {E Args R : Set}
    `{ink_env.types.Environment.Trait E}
    `{parity_scale_codec.codec.Encode.Trait Args}
    `{parity_scale_codec.codec.Decode.Trait R}
    (params
      :
      ref
        (ink_env.call.call_builder.CallParams
          E
          (ink_env.call.call_builder.DelegateCall E)
          Args
          R))
    : M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.invoke_contract_delegate instance params).

Definition instantiate_contract
    `{H : State.Trait}
    {E ContractRef Args Salt R : Set}
    `{ink_env.types.Environment.Trait E}
    `{ink_env.call.create_builder.FromAccountId.Trait E ContractRef}
    `{parity_scale_codec.codec.Encode.Trait Args}
    `{core.convert.AsRef.Trait Slice Salt}
    `{ink_env.call.create_builder.ConstructorReturnType.Trait ContractRef R}
    (params
      :
      ref (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
    :
      M (H := H)
        (ink_env.error.Result
          (ink_primitives.ConstructorResult
            ink_env.call.create_builder.ConstructorReturnType.Output)) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.instantiate_contract instance params).

Definition terminate_contract
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (beneficiary : ImplE.AccountId)
    : M (H := H) Empty_set :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.terminate_contract instance beneficiary).

Definition transfer
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (destination : ImplE.AccountId)
    (value : ImplE.Balance)
    : M (H := H) (ink_env.error.Result unit) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.transfer instance destination value).

Definition decode_input
    `{H : State.Trait}
    {T : Set}
    `{parity_scale_codec.codec.Decode.Trait T}
    (_ : unit)
    : M (H := H) (ink_env.error.Result T) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.EnvBackend.decode_input instance).

Definition return_value
    `{H : State.Trait}
    {R : Set}
    `{parity_scale_codec.codec.Encode.Trait R}
    (return_flags : ink_env.backend.ReturnFlags)
    (return_value : ref R)
    : M (H := H) Empty_set :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.EnvBackend.return_value
        instance
        return_flags
        return_value).

Definition debug_message
    `{H : State.Trait}
    (message : ref str)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.EnvBackend.debug_message instance message).

Definition hash_bytes
    `{H : State.Trait}
    {H : Set}
    `{ink_env.hash.CryptoHash.Trait H}
    (input : ref Slice)
    (output : mut_ref ink_env.hash.HashOutput.Type)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => instance.["hash_bytes"] input output).

Definition hash_encoded
    `{H : State.Trait}
    {H T : Set}
    `{ink_env.hash.CryptoHash.Trait H}
    `{parity_scale_codec.codec.Encode.Trait T}
    (input : ref T)
    (output : mut_ref ink_env.hash.HashOutput.Type)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => instance.["hash_encoded"] input output).

Definition ecdsa_recover
    `{H : State.Trait}
    (signature : ref list u8)
    (message_hash : ref list u8)
    (output : mut_ref list u8)
    : M (H := H) (ink_env.error.Result unit) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => instance.["ecdsa_recover"] signature message_hash output).

Definition ecdsa_to_eth_address
    `{H : State.Trait}
    (pubkey : ref list u8)
    (output : mut_ref list u8)
    : M (H := H) (ink_env.error.Result unit) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => instance.["ecdsa_to_eth_address"] pubkey output).

Definition is_contract
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (account : ref ImplE.AccountId)
    : M (H := H) bool :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.is_contract instance account).

Definition code_hash
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (account : ref ImplE.AccountId)
    : M (H := H) (ink_env.error.Result ImplE.Hash) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.code_hash instance account).

Definition own_code_hash
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) (ink_env.error.Result ImplE.Hash) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.own_code_hash instance).

Definition caller_is_origin
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    : M (H := H) bool :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => ink_env.backend.TypedEnvBackend.caller_is_origin instance).

Definition set_code_hash
    `{H : State.Trait}
    (code_hash : ref list u8)
    : M (H := H) (ink_env.error.Result unit) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => instance.["set_code_hash"] code_hash).

Definition set_code_hash2
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (code_hash : ref ImplE.Hash)
    : M (H := H) (ink_env.error.Result unit) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* α0 := code_hash.["as_ref"] in
      instance.["set_code_hash"] α0).

Definition call_runtime
    `{H : State.Trait}
    {E Call : Set}
    `{ink_env.types.Environment.Trait E}
    `{parity_scale_codec.codec.Encode.Trait Call}
    (call : ref Call)
    : M (H := H) (ink_env.error.Result unit) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      ink_env.backend.TypedEnvBackend.call_runtime instance call).

Module arithmetic.
  Module BaseArithmetic.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End BaseArithmetic.
  
  Module Impl_ink_env_arithmetic_BaseArithmetic_for_T.
  Section Impl_ink_env_arithmetic_BaseArithmetic_for_T.
    Context {T : Set}.
    
    Definition Self := T.
    
    Global Instance I : ink_env.arithmetic.BaseArithmetic.Trait Self :=
      ink_env.arithmetic.BaseArithmetic.Build_Trait _.
  End Impl_ink_env_arithmetic_BaseArithmetic_for_T.
  End Impl_ink_env_arithmetic_BaseArithmetic_for_T.
  
  Module AtLeast32Bit.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End AtLeast32Bit.
  
  Module Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
  Section Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
    Context {T : Set}.
    
    Definition Self := T.
    
    Global Instance I : ink_env.arithmetic.AtLeast32Bit.Trait Self :=
      ink_env.arithmetic.AtLeast32Bit.Build_Trait _.
  End Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
  End Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
  
  Module AtLeast32BitUnsigned.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End AtLeast32BitUnsigned.
  
  Module Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
  Section Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
    Context {T : Set}.
    
    Definition Self := T.
    
    Global Instance I : ink_env.arithmetic.AtLeast32BitUnsigned.Trait Self :=
      ink_env.arithmetic.AtLeast32BitUnsigned.Build_Trait _.
  End Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
  End Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
  
  Module Saturating.
    Class Trait (Self : Set) : Set := {
      saturating_add `{H : State.Trait} : Self -> Self -> (M (H := H) Self);
      saturating_sub `{H : State.Trait} : Self -> Self -> (M (H := H) Self);
      saturating_mul `{H : State.Trait} : Self -> Self -> (M (H := H) Self);
      saturating_pow `{H : State.Trait} : Self -> usize -> (M (H := H) Self);
    }.
    
    Global Instance Method_saturating_add `{H : State.Trait} `(Trait)
      : Notation.Dot "saturating_add" := {
      Notation.dot := saturating_add;
    }.
    Global Instance Method_saturating_sub `{H : State.Trait} `(Trait)
      : Notation.Dot "saturating_sub" := {
      Notation.dot := saturating_sub;
    }.
    Global Instance Method_saturating_mul `{H : State.Trait} `(Trait)
      : Notation.Dot "saturating_mul" := {
      Notation.dot := saturating_mul;
    }.
    Global Instance Method_saturating_pow `{H : State.Trait} `(Trait)
      : Notation.Dot "saturating_pow" := {
      Notation.dot := saturating_pow;
    }.
  End Saturating.
  
  Module Impl_ink_env_arithmetic_Saturating_for_T.
  Section Impl_ink_env_arithmetic_Saturating_for_T.
    Context {T : Set}.
    
    Definition Self := T.
    
    Definition saturating_add
        `{H : State.Trait}
        (self : Self)
        (o : Self)
        : M (H := H) Self :=
      num_traits.ops.saturating.Saturating.saturating_add self o.
    
    Global Instance Method_saturating_add `{H : State.Trait} :
      Notation.Dot "saturating_add" := {
      Notation.dot := saturating_add;
    }.
    
    Definition saturating_sub
        `{H : State.Trait}
        (self : Self)
        (o : Self)
        : M (H := H) Self :=
      num_traits.ops.saturating.Saturating.saturating_sub self o.
    
    Global Instance Method_saturating_sub `{H : State.Trait} :
      Notation.Dot "saturating_sub" := {
      Notation.dot := saturating_sub;
    }.
    
    Definition saturating_mul
        `{H : State.Trait}
        (self : Self)
        (o : Self)
        : M (H := H) Self :=
      let* α0 := self.["checked_mul"] (addr_of o) in
      α0.["unwrap_or_else"]
        (fun  =>
          let* α0 := T::["zero"] tt in
          let* α1 := self.["lt"] α0 in
          let* α2 := T::["zero"] tt in
          let* α3 := o.["lt"] α2 in
          let* α4 := α1.["ne"] α3 in
          if (α4 : bool) then
            num_traits.bounds.Bounded.min_value tt
          else
            num_traits.bounds.Bounded.max_value tt).
    
    Global Instance Method_saturating_mul `{H : State.Trait} :
      Notation.Dot "saturating_mul" := {
      Notation.dot := saturating_mul;
    }.
    
    Definition saturating_pow
        `{H : State.Trait}
        (self : Self)
        (exp : usize)
        : M (H := H) Self :=
      let* neg :=
        let* α0 := T::["zero"] tt in
        let* α1 := self.["lt"] α0 in
        let* α2 := exp.["rem"] 2 in
        let* α3 := α2.["ne"] 0 in
        α1.["andb"] α3 in
      let* α0 := num_traits.pow.checked_pow self exp in
      α0.["unwrap_or_else"]
        (fun  =>
          if (neg : bool) then
            num_traits.bounds.Bounded.min_value tt
          else
            num_traits.bounds.Bounded.max_value tt).
    
    Global Instance Method_saturating_pow `{H : State.Trait} :
      Notation.Dot "saturating_pow" := {
      Notation.dot := saturating_pow;
    }.
    
    Global Instance I : ink_env.arithmetic.Saturating.Trait Self := {
      ink_env.arithmetic.Saturating.saturating_add
        `{H : State.Trait}
        :=
        saturating_add;
      ink_env.arithmetic.Saturating.saturating_sub
        `{H : State.Trait}
        :=
        saturating_sub;
      ink_env.arithmetic.Saturating.saturating_mul
        `{H : State.Trait}
        :=
        saturating_mul;
      ink_env.arithmetic.Saturating.saturating_pow
        `{H : State.Trait}
        :=
        saturating_pow;
    }.
  End Impl_ink_env_arithmetic_Saturating_for_T.
  End Impl_ink_env_arithmetic_Saturating_for_T.
End arithmetic.

Module BaseArithmetic.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End BaseArithmetic.

Module Impl_ink_env_arithmetic_BaseArithmetic_for_T.
Section Impl_ink_env_arithmetic_BaseArithmetic_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Global Instance I : ink_env.arithmetic.BaseArithmetic.Trait Self :=
    ink_env.arithmetic.BaseArithmetic.Build_Trait _.
End Impl_ink_env_arithmetic_BaseArithmetic_for_T.
End Impl_ink_env_arithmetic_BaseArithmetic_for_T.

Module AtLeast32Bit.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End AtLeast32Bit.

Module Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
Section Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Global Instance I : ink_env.arithmetic.AtLeast32Bit.Trait Self :=
    ink_env.arithmetic.AtLeast32Bit.Build_Trait _.
End Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
End Impl_ink_env_arithmetic_AtLeast32Bit_for_T.

Module AtLeast32BitUnsigned.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End AtLeast32BitUnsigned.

Module Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
Section Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Global Instance I : ink_env.arithmetic.AtLeast32BitUnsigned.Trait Self :=
    ink_env.arithmetic.AtLeast32BitUnsigned.Build_Trait _.
End Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
End Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.

Module Saturating.
  Class Trait (Self : Set) : Set := {
    saturating_add `{H : State.Trait} : Self -> Self -> (M (H := H) Self);
    saturating_sub `{H : State.Trait} : Self -> Self -> (M (H := H) Self);
    saturating_mul `{H : State.Trait} : Self -> Self -> (M (H := H) Self);
    saturating_pow `{H : State.Trait} : Self -> usize -> (M (H := H) Self);
  }.
  
  Global Instance Method_saturating_add `{H : State.Trait} `(Trait)
    : Notation.Dot "saturating_add" := {
    Notation.dot := saturating_add;
  }.
  Global Instance Method_saturating_sub `{H : State.Trait} `(Trait)
    : Notation.Dot "saturating_sub" := {
    Notation.dot := saturating_sub;
  }.
  Global Instance Method_saturating_mul `{H : State.Trait} `(Trait)
    : Notation.Dot "saturating_mul" := {
    Notation.dot := saturating_mul;
  }.
  Global Instance Method_saturating_pow `{H : State.Trait} `(Trait)
    : Notation.Dot "saturating_pow" := {
    Notation.dot := saturating_pow;
  }.
End Saturating.

Module Impl_ink_env_arithmetic_Saturating_for_T.
Section Impl_ink_env_arithmetic_Saturating_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Definition saturating_add
      `{H : State.Trait}
      (self : Self)
      (o : Self)
      : M (H := H) Self :=
    num_traits.ops.saturating.Saturating.saturating_add self o.
  
  Global Instance Method_saturating_add `{H : State.Trait} :
    Notation.Dot "saturating_add" := {
    Notation.dot := saturating_add;
  }.
  
  Definition saturating_sub
      `{H : State.Trait}
      (self : Self)
      (o : Self)
      : M (H := H) Self :=
    num_traits.ops.saturating.Saturating.saturating_sub self o.
  
  Global Instance Method_saturating_sub `{H : State.Trait} :
    Notation.Dot "saturating_sub" := {
    Notation.dot := saturating_sub;
  }.
  
  Definition saturating_mul
      `{H : State.Trait}
      (self : Self)
      (o : Self)
      : M (H := H) Self :=
    let* α0 := self.["checked_mul"] (addr_of o) in
    α0.["unwrap_or_else"]
      (fun  =>
        let* α0 := T::["zero"] tt in
        let* α1 := self.["lt"] α0 in
        let* α2 := T::["zero"] tt in
        let* α3 := o.["lt"] α2 in
        let* α4 := α1.["ne"] α3 in
        if (α4 : bool) then
          num_traits.bounds.Bounded.min_value tt
        else
          num_traits.bounds.Bounded.max_value tt).
  
  Global Instance Method_saturating_mul `{H : State.Trait} :
    Notation.Dot "saturating_mul" := {
    Notation.dot := saturating_mul;
  }.
  
  Definition saturating_pow
      `{H : State.Trait}
      (self : Self)
      (exp : usize)
      : M (H := H) Self :=
    let* neg :=
      let* α0 := T::["zero"] tt in
      let* α1 := self.["lt"] α0 in
      let* α2 := exp.["rem"] 2 in
      let* α3 := α2.["ne"] 0 in
      α1.["andb"] α3 in
    let* α0 := num_traits.pow.checked_pow self exp in
    α0.["unwrap_or_else"]
      (fun  =>
        if (neg : bool) then
          num_traits.bounds.Bounded.min_value tt
        else
          num_traits.bounds.Bounded.max_value tt).
  
  Global Instance Method_saturating_pow `{H : State.Trait} :
    Notation.Dot "saturating_pow" := {
    Notation.dot := saturating_pow;
  }.
  
  Global Instance I : ink_env.arithmetic.Saturating.Trait Self := {
    ink_env.arithmetic.Saturating.saturating_add
      `{H : State.Trait}
      :=
      saturating_add;
    ink_env.arithmetic.Saturating.saturating_sub
      `{H : State.Trait}
      :=
      saturating_sub;
    ink_env.arithmetic.Saturating.saturating_mul
      `{H : State.Trait}
      :=
      saturating_mul;
    ink_env.arithmetic.Saturating.saturating_pow
      `{H : State.Trait}
      :=
      saturating_pow;
  }.
End Impl_ink_env_arithmetic_Saturating_for_T.
End Impl_ink_env_arithmetic_Saturating_for_T.

Module backend.
  Module ReturnFlags.
    Record t : Set := {
      value : u32;
    }.
    
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ReturnFlags.
  Definition ReturnFlags : Set := ReturnFlags.t.
  
  Module Impl_core_default_Default_for_ink_env_backend_ReturnFlags.
    Definition Self := ink_env.backend.ReturnFlags.
    
    Definition default
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) ink_env.backend.ReturnFlags :=
      let* α0 := core.default.Default.default tt in
      Pure {| ink_env.backend.ReturnFlags.value := α0; |}.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_env_backend_ReturnFlags.
  
  Module Impl_ink_env_backend_ReturnFlags.
    Definition Self := ink_env.backend.ReturnFlags.
    
    Definition new_with_reverted
        `{H : State.Trait}
        (has_reverted : bool)
        : M (H := H) Self :=
      let* α0 := Self::["default"] tt in
      α0.["set_reverted"] has_reverted.
    
    Global Instance AssociatedFunction_new_with_reverted `{H : State.Trait} :
      Notation.DoubleColon Self "new_with_reverted" := {
      Notation.double_colon := new_with_reverted;
    }.
    
    Definition set_reverted
        `{H : State.Trait}
        (self : Self)
        (has_reverted : bool)
        : M (H := H) Self :=
      let* _ :=
        match has_reverted with
        | true => self.["value"].["bitor_assign"] (cast has_reverted u32)
        | false =>
          let* α0 := has_reverted.["not"] in
          self.["value"].["bitand_assign"] (cast α0 u32)
        end in
      Pure self.
    
    Global Instance Method_set_reverted `{H : State.Trait} :
      Notation.Dot "set_reverted" := {
      Notation.dot := set_reverted;
    }.
  End Impl_ink_env_backend_ReturnFlags.
  
  Module CallFlags.
    Record t : Set := {
      forward_input : bool;
      clone_input : bool;
      tail_call : bool;
      allow_reentry : bool;
    }.
    
    Global Instance Get_forward_input : Notation.Dot "forward_input" := {
      Notation.dot '(Build_t x0 _ _ _) := x0;
    }.
    Global Instance Get_clone_input : Notation.Dot "clone_input" := {
      Notation.dot '(Build_t _ x1 _ _) := x1;
    }.
    Global Instance Get_tail_call : Notation.Dot "tail_call" := {
      Notation.dot '(Build_t _ _ x2 _) := x2;
    }.
    Global Instance Get_allow_reentry : Notation.Dot "allow_reentry" := {
      Notation.dot '(Build_t _ _ _ x3) := x3;
    }.
  End CallFlags.
  Definition CallFlags : Set := CallFlags.t.
  
  Module Impl_core_marker_Copy_for_ink_env_backend_CallFlags.
    Definition Self := ink_env.backend.CallFlags.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_backend_CallFlags.
  
  Module Impl_core_clone_Clone_for_ink_env_backend_CallFlags.
    Definition Self := ink_env.backend.CallFlags.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.backend.CallFlags :=
      let _ := tt in
      self.["deref"].
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_backend_CallFlags.
  
  Module Impl_core_fmt_Debug_for_ink_env_backend_CallFlags.
    Definition Self := ink_env.backend.CallFlags.
    
    Parameter debug_struct_field4_finish : core.fmt.Formatter -> string -> 
      string -> bool -> 
      string -> bool -> 
      string -> bool -> 
      string -> bool -> 
      M (H := H) core.fmt.Result.
    
    Global Instance Deb_debug_struct_field4_finish : Notation.DoubleColon
      core.fmt.Formatter "debug_struct_field4_finish" := {
      Notation.double_colon := debug_struct_field4_finish; }.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field4_finish"]
        f
        "CallFlags"
        "forward_input"
        (addr_of self.["forward_input"])
        "clone_input"
        (addr_of self.["clone_input"])
        "tail_call"
        (addr_of self.["tail_call"])
        "allow_reentry"
        (addr_of (addr_of self.["allow_reentry"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_backend_CallFlags.
  
  Module Impl_core_default_Default_for_ink_env_backend_CallFlags.
    Definition Self := ink_env.backend.CallFlags.
    
    Definition default
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) ink_env.backend.CallFlags :=
      let* α0 := core.default.Default.default tt in
      let* α1 := core.default.Default.default tt in
      let* α2 := core.default.Default.default tt in
      let* α3 := core.default.Default.default tt in
      Pure
        {|
          ink_env.backend.CallFlags.forward_input := α0;
          ink_env.backend.CallFlags.clone_input := α1;
          ink_env.backend.CallFlags.tail_call := α2;
          ink_env.backend.CallFlags.allow_reentry := α3;
        |}.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_env_backend_CallFlags.
  
  Module Impl_ink_env_backend_CallFlags.
    Definition Self := ink_env.backend.CallFlags.
    
    Definition set_forward_input
        `{H : State.Trait}
        (self : Self)
        (forward_input : bool)
        : M (H := H) Self :=
      let* _ := assign self.["forward_input"] forward_input in
      Pure self.
    
    Global Instance Method_set_forward_input `{H : State.Trait} :
      Notation.Dot "set_forward_input" := {
      Notation.dot := set_forward_input;
    }.
    
    Definition set_clone_input
        `{H : State.Trait}
        (self : Self)
        (clone_input : bool)
        : M (H := H) Self :=
      let* _ := assign self.["clone_input"] clone_input in
      Pure self.
    
    Global Instance Method_set_clone_input `{H : State.Trait} :
      Notation.Dot "set_clone_input" := {
      Notation.dot := set_clone_input;
    }.
    
    Definition set_tail_call
        `{H : State.Trait}
        (self : Self)
        (tail_call : bool)
        : M (H := H) Self :=
      let* _ := assign self.["tail_call"] tail_call in
      Pure self.
    
    Global Instance Method_set_tail_call `{H : State.Trait} :
      Notation.Dot "set_tail_call" := {
      Notation.dot := set_tail_call;
    }.
    
    Definition set_allow_reentry
        `{H : State.Trait}
        (self : Self)
        (allow_reentry : bool)
        : M (H := H) Self :=
      let* _ := assign self.["allow_reentry"] allow_reentry in
      Pure self.
    
    Global Instance Method_set_allow_reentry `{H : State.Trait} :
      Notation.Dot "set_allow_reentry" := {
      Notation.dot := set_allow_reentry;
    }.
    
    Definition into_u32 `{H : State.Trait} (self : Self) : M (H := H) u32 :=
      let* α0 := (cast self.["clone_input"] u32).["shl"] 1 in
      let* α1 := (cast self.["forward_input"] u32).["bitor"] α0 in
      let* α2 := (cast self.["tail_call"] u32).["shl"] 2 in
      let* α3 := α1.["bitor"] α2 in
      let* α4 := (cast self.["allow_reentry"] u32).["shl"] 3 in
      α3.["bitor"] α4.
    
    Global Instance Method_into_u32 `{H : State.Trait} :
      Notation.Dot "into_u32" := {
      Notation.dot := into_u32;
    }.
    
    Definition forward_input
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) bool :=
      Pure self.["forward_input"].
    
    Global Instance Method_forward_input `{H : State.Trait} :
      Notation.Dot "forward_input" := {
      Notation.dot := forward_input;
    }.
    
    Definition clone_input
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) bool :=
      Pure self.["clone_input"].
    
    Global Instance Method_clone_input `{H : State.Trait} :
      Notation.Dot "clone_input" := {
      Notation.dot := clone_input;
    }.
    
    Definition tail_call
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) bool :=
      Pure self.["tail_call"].
    
    Global Instance Method_tail_call `{H : State.Trait} :
      Notation.Dot "tail_call" := {
      Notation.dot := tail_call;
    }.
    
    Definition allow_reentry
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) bool :=
      Pure self.["allow_reentry"].
    
    Global Instance Method_allow_reentry `{H : State.Trait} :
      Notation.Dot "allow_reentry" := {
      Notation.dot := allow_reentry;
    }.
  End Impl_ink_env_backend_CallFlags.
  
  Module EnvBackend.
    Class Trait (Self : Set) : Set := {
      set_contract_storage
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref K) ->
        (ref V) ->
        (M (H := H) (core.option.Option u32));
      get_contract_storage
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref K) ->
        (M (H := H) (ink_env.error.Result (core.option.Option R)));
      take_contract_storage
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref K) ->
        (M (H := H) (ink_env.error.Result (core.option.Option R)));
      contains_contract_storage
        `{H : State.Trait}
        :
        (mut_ref Self) -> (ref K) -> (M (H := H) (core.option.Option u32));
      clear_contract_storage
        `{H : State.Trait}
        :
        (mut_ref Self) -> (ref K) -> (M (H := H) (core.option.Option u32));
      decode_input
        `{H : State.Trait}
        :
        (mut_ref Self) -> (M (H := H) (ink_env.error.Result T));
      return_value
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        ink_env.backend.ReturnFlags ->
        (ref R) ->
        (M (H := H) Empty_set);
      debug_message
        `{H : State.Trait}
        :
        (mut_ref Self) -> (ref str) -> (M (H := H) unit);
      hash_bytes
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref Slice) ->
        (mut_ref ink_env.hash.HashOutput.Type) ->
        (M (H := H) unit);
      hash_encoded
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref T) ->
        (mut_ref ink_env.hash.HashOutput.Type) ->
        (M (H := H) unit);
      ecdsa_recover
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref list u8) ->
        (ref list u8) ->
        (mut_ref list u8) ->
        (M (H := H) (ink_env.error.Result unit));
      ecdsa_to_eth_address
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref list u8) ->
        (mut_ref list u8) ->
        (M (H := H) (ink_env.error.Result unit));
      call_chain_extension
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        u32 ->
        (ref I) ->
        F ->
        D ->
        (M (H := H) (core.result.Result T E));
      set_code_hash
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref Slice) ->
        (M (H := H) (ink_env.error.Result unit));
    }.
    
    Global Instance Method_set_contract_storage `{H : State.Trait} `(Trait)
      : Notation.Dot "set_contract_storage" := {
      Notation.dot := set_contract_storage;
    }.
    Global Instance Method_get_contract_storage `{H : State.Trait} `(Trait)
      : Notation.Dot "get_contract_storage" := {
      Notation.dot := get_contract_storage;
    }.
    Global Instance Method_take_contract_storage `{H : State.Trait} `(Trait)
      : Notation.Dot "take_contract_storage" := {
      Notation.dot := take_contract_storage;
    }.
    Global Instance Method_contains_contract_storage `{H : State.Trait} `(Trait)
      : Notation.Dot "contains_contract_storage" := {
      Notation.dot := contains_contract_storage;
    }.
    Global Instance Method_clear_contract_storage `{H : State.Trait} `(Trait)
      : Notation.Dot "clear_contract_storage" := {
      Notation.dot := clear_contract_storage;
    }.
    Global Instance Method_decode_input `{H : State.Trait} `(Trait)
      : Notation.Dot "decode_input" := {
      Notation.dot := decode_input;
    }.
    Global Instance Method_return_value `{H : State.Trait} `(Trait)
      : Notation.Dot "return_value" := {
      Notation.dot := return_value;
    }.
    Global Instance Method_debug_message `{H : State.Trait} `(Trait)
      : Notation.Dot "debug_message" := {
      Notation.dot := debug_message;
    }.
    Global Instance Method_hash_bytes `{H : State.Trait} `(Trait)
      : Notation.Dot "hash_bytes" := {
      Notation.dot := hash_bytes;
    }.
    Global Instance Method_hash_encoded `{H : State.Trait} `(Trait)
      : Notation.Dot "hash_encoded" := {
      Notation.dot := hash_encoded;
    }.
    Global Instance Method_ecdsa_recover `{H : State.Trait} `(Trait)
      : Notation.Dot "ecdsa_recover" := {
      Notation.dot := ecdsa_recover;
    }.
    Global Instance Method_ecdsa_to_eth_address `{H : State.Trait} `(Trait)
      : Notation.Dot "ecdsa_to_eth_address" := {
      Notation.dot := ecdsa_to_eth_address;
    }.
    Global Instance Method_call_chain_extension `{H : State.Trait} `(Trait)
      : Notation.Dot "call_chain_extension" := {
      Notation.dot := call_chain_extension;
    }.
    Global Instance Method_set_code_hash `{H : State.Trait} `(Trait)
      : Notation.Dot "set_code_hash" := {
      Notation.dot := set_code_hash;
    }.
  End EnvBackend.
  
  Module TypedEnvBackend.
    Class Trait (Self : Set) : Set := {
      caller
        `{H : State.Trait}
        :
        (mut_ref Self) -> (M (H := H) ImplE.AccountId);
      transferred_value
        `{H : State.Trait}
        :
        (mut_ref Self) -> (M (H := H) ImplE.Balance);
      weight_to_fee
        `{H : State.Trait}
        :
        (mut_ref Self) -> u64 -> (M (H := H) ImplE.Balance);
      gas_left `{H : State.Trait} : (mut_ref Self) -> (M (H := H) u64);
      block_timestamp
        `{H : State.Trait}
        :
        (mut_ref Self) -> (M (H := H) ImplE.Timestamp);
      account_id
        `{H : State.Trait}
        :
        (mut_ref Self) -> (M (H := H) ImplE.AccountId);
      balance `{H : State.Trait} : (mut_ref Self) -> (M (H := H) ImplE.Balance);
      block_number
        `{H : State.Trait}
        :
        (mut_ref Self) -> (M (H := H) ImplE.BlockNumber);
      minimum_balance
        `{H : State.Trait}
        :
        (mut_ref Self) -> (M (H := H) ImplE.Balance);
      emit_event
        `{H : State.Trait}
        :
        (mut_ref Self) -> Event -> (M (H := H) unit);
      invoke_contract
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.Call E)
            Args
            R)) ->
        (M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)));
      invoke_contract_delegate
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.DelegateCall E)
            Args
            R)) ->
        (M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)));
      instantiate_contract
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref
          (ink_env.call.create_builder.CreateParams
            E
            ContractRef
            Args
            Salt
            R)) ->
        (M (H := H)
          (ink_env.error.Result
            (ink_primitives.ConstructorResult
              ink_env.call.create_builder.ConstructorReturnType.Output)));
      terminate_contract
        `{H : State.Trait}
        :
        (mut_ref Self) -> ImplE.AccountId -> (M (H := H) Empty_set);
      transfer
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        ImplE.AccountId ->
        ImplE.Balance ->
        (M (H := H) (ink_env.error.Result unit));
      is_contract
        `{H : State.Trait}
        :
        (mut_ref Self) -> (ref ImplE.AccountId) -> (M (H := H) bool);
      caller_is_origin `{H : State.Trait} : (mut_ref Self) -> (M (H := H) bool);
      code_hash
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref ImplE.AccountId) ->
        (M (H := H) (ink_env.error.Result ImplE.Hash));
      own_code_hash
        `{H : State.Trait}
        :
        (mut_ref Self) -> (M (H := H) (ink_env.error.Result ImplE.Hash));
      call_runtime
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref Call) ->
        (M (H := H) (ink_env.error.Result unit));
    }.
    
    Global Instance Method_caller `{H : State.Trait} `(Trait)
      : Notation.Dot "caller" := {
      Notation.dot := caller;
    }.
    Global Instance Method_transferred_value `{H : State.Trait} `(Trait)
      : Notation.Dot "transferred_value" := {
      Notation.dot := transferred_value;
    }.
    Global Instance Method_weight_to_fee `{H : State.Trait} `(Trait)
      : Notation.Dot "weight_to_fee" := {
      Notation.dot := weight_to_fee;
    }.
    Global Instance Method_gas_left `{H : State.Trait} `(Trait)
      : Notation.Dot "gas_left" := {
      Notation.dot := gas_left;
    }.
    Global Instance Method_block_timestamp `{H : State.Trait} `(Trait)
      : Notation.Dot "block_timestamp" := {
      Notation.dot := block_timestamp;
    }.
    Global Instance Method_account_id `{H : State.Trait} `(Trait)
      : Notation.Dot "account_id" := {
      Notation.dot := account_id;
    }.
    Global Instance Method_balance `{H : State.Trait} `(Trait)
      : Notation.Dot "balance" := {
      Notation.dot := balance;
    }.
    Global Instance Method_block_number `{H : State.Trait} `(Trait)
      : Notation.Dot "block_number" := {
      Notation.dot := block_number;
    }.
    Global Instance Method_minimum_balance `{H : State.Trait} `(Trait)
      : Notation.Dot "minimum_balance" := {
      Notation.dot := minimum_balance;
    }.
    Global Instance Method_emit_event `{H : State.Trait} `(Trait)
      : Notation.Dot "emit_event" := {
      Notation.dot := emit_event;
    }.
    Global Instance Method_invoke_contract `{H : State.Trait} `(Trait)
      : Notation.Dot "invoke_contract" := {
      Notation.dot := invoke_contract;
    }.
    Global Instance Method_invoke_contract_delegate `{H : State.Trait} `(Trait)
      : Notation.Dot "invoke_contract_delegate" := {
      Notation.dot := invoke_contract_delegate;
    }.
    Global Instance Method_instantiate_contract `{H : State.Trait} `(Trait)
      : Notation.Dot "instantiate_contract" := {
      Notation.dot := instantiate_contract;
    }.
    Global Instance Method_terminate_contract `{H : State.Trait} `(Trait)
      : Notation.Dot "terminate_contract" := {
      Notation.dot := terminate_contract;
    }.
    Global Instance Method_transfer `{H : State.Trait} `(Trait)
      : Notation.Dot "transfer" := {
      Notation.dot := transfer;
    }.
    Global Instance Method_is_contract `{H : State.Trait} `(Trait)
      : Notation.Dot "is_contract" := {
      Notation.dot := is_contract;
    }.
    Global Instance Method_caller_is_origin `{H : State.Trait} `(Trait)
      : Notation.Dot "caller_is_origin" := {
      Notation.dot := caller_is_origin;
    }.
    Global Instance Method_code_hash `{H : State.Trait} `(Trait)
      : Notation.Dot "code_hash" := {
      Notation.dot := code_hash;
    }.
    Global Instance Method_own_code_hash `{H : State.Trait} `(Trait)
      : Notation.Dot "own_code_hash" := {
      Notation.dot := own_code_hash;
    }.
    Global Instance Method_call_runtime `{H : State.Trait} `(Trait)
      : Notation.Dot "call_runtime" := {
      Notation.dot := call_runtime;
    }.
  End TypedEnvBackend.
End backend.

Module ReturnFlags.
  Record t : Set := {
    value : u32;
  }.
  
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End ReturnFlags.
Definition ReturnFlags : Set := ReturnFlags.t.

Module Impl_core_default_Default_for_ink_env_backend_ReturnFlags.
  Definition Self := ink_env.backend.ReturnFlags.
  
  Definition default
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) ink_env.backend.ReturnFlags :=
    let* α0 := core.default.Default.default tt in
    Pure {| ink_env.backend.ReturnFlags.value := α0; |}.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_env_backend_ReturnFlags.

Module Impl_ink_env_backend_ReturnFlags_2.
  Definition Self := ink_env.backend.ReturnFlags.
  
  Definition new_with_reverted
      `{H : State.Trait}
      (has_reverted : bool)
      : M (H := H) Self :=
    let* α0 := Self::["default"] tt in
    α0.["set_reverted"] has_reverted.
  
  Global Instance AssociatedFunction_new_with_reverted `{H : State.Trait} :
    Notation.DoubleColon Self "new_with_reverted" := {
    Notation.double_colon := new_with_reverted;
  }.
  
  Definition set_reverted
      `{H : State.Trait}
      (self : Self)
      (has_reverted : bool)
      : M (H := H) Self :=
    let* _ :=
      match has_reverted with
      | true => self.["value"].["bitor_assign"] (cast has_reverted u32)
      | false =>
        let* α0 := has_reverted.["not"] in
        self.["value"].["bitand_assign"] (cast α0 u32)
      end in
    Pure self.
  
  Global Instance Method_set_reverted `{H : State.Trait} :
    Notation.Dot "set_reverted" := {
    Notation.dot := set_reverted;
  }.
End Impl_ink_env_backend_ReturnFlags_2.

Module CallFlags.
  Record t : Set := {
    forward_input : bool;
    clone_input : bool;
    tail_call : bool;
    allow_reentry : bool;
  }.
  
  Global Instance Get_forward_input : Notation.Dot "forward_input" := {
    Notation.dot '(Build_t x0 _ _ _) := x0;
  }.
  Global Instance Get_clone_input : Notation.Dot "clone_input" := {
    Notation.dot '(Build_t _ x1 _ _) := x1;
  }.
  Global Instance Get_tail_call : Notation.Dot "tail_call" := {
    Notation.dot '(Build_t _ _ x2 _) := x2;
  }.
  Global Instance Get_allow_reentry : Notation.Dot "allow_reentry" := {
    Notation.dot '(Build_t _ _ _ x3) := x3;
  }.
End CallFlags.
Definition CallFlags : Set := CallFlags.t.

Module Impl_core_marker_Copy_for_ink_env_backend_CallFlags.
  Definition Self := ink_env.backend.CallFlags.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_backend_CallFlags.

Module Impl_core_clone_Clone_for_ink_env_backend_CallFlags.
  Definition Self := ink_env.backend.CallFlags.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.backend.CallFlags :=
    let _ := tt in
    self.["deref"].
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_backend_CallFlags.

Module Impl_core_fmt_Debug_for_ink_env_backend_CallFlags.
  Definition Self := ink_env.backend.CallFlags.
  
  Parameter debug_struct_field4_finish : core.fmt.Formatter -> string -> 
    string -> bool -> 
    string -> bool -> 
    string -> bool -> 
    string -> bool -> 
    M (H := H) core.fmt.Result.
  
  Global Instance Deb_debug_struct_field4_finish : Notation.DoubleColon
    core.fmt.Formatter "debug_struct_field4_finish" := {
    Notation.double_colon := debug_struct_field4_finish; }.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field4_finish"]
      f
      "CallFlags"
      "forward_input"
      (addr_of self.["forward_input"])
      "clone_input"
      (addr_of self.["clone_input"])
      "tail_call"
      (addr_of self.["tail_call"])
      "allow_reentry"
      (addr_of (addr_of self.["allow_reentry"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_backend_CallFlags.

Module Impl_core_default_Default_for_ink_env_backend_CallFlags.
  Definition Self := ink_env.backend.CallFlags.
  
  Definition default
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) ink_env.backend.CallFlags :=
    let* α0 := core.default.Default.default tt in
    let* α1 := core.default.Default.default tt in
    let* α2 := core.default.Default.default tt in
    let* α3 := core.default.Default.default tt in
    Pure
      {|
        ink_env.backend.CallFlags.forward_input := α0;
        ink_env.backend.CallFlags.clone_input := α1;
        ink_env.backend.CallFlags.tail_call := α2;
        ink_env.backend.CallFlags.allow_reentry := α3;
      |}.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_env_backend_CallFlags.

Module Impl_ink_env_backend_CallFlags_2.
  Definition Self := ink_env.backend.CallFlags.
  
  Definition set_forward_input
      `{H : State.Trait}
      (self : Self)
      (forward_input : bool)
      : M (H := H) Self :=
    let* _ := assign self.["forward_input"] forward_input in
    Pure self.
  
  Global Instance Method_set_forward_input `{H : State.Trait} :
    Notation.Dot "set_forward_input" := {
    Notation.dot := set_forward_input;
  }.
  
  Definition set_clone_input
      `{H : State.Trait}
      (self : Self)
      (clone_input : bool)
      : M (H := H) Self :=
    let* _ := assign self.["clone_input"] clone_input in
    Pure self.
  
  Global Instance Method_set_clone_input `{H : State.Trait} :
    Notation.Dot "set_clone_input" := {
    Notation.dot := set_clone_input;
  }.
  
  Definition set_tail_call
      `{H : State.Trait}
      (self : Self)
      (tail_call : bool)
      : M (H := H) Self :=
    let* _ := assign self.["tail_call"] tail_call in
    Pure self.
  
  Global Instance Method_set_tail_call `{H : State.Trait} :
    Notation.Dot "set_tail_call" := {
    Notation.dot := set_tail_call;
  }.
  
  Definition set_allow_reentry
      `{H : State.Trait}
      (self : Self)
      (allow_reentry : bool)
      : M (H := H) Self :=
    let* _ := assign self.["allow_reentry"] allow_reentry in
    Pure self.
  
  Global Instance Method_set_allow_reentry `{H : State.Trait} :
    Notation.Dot "set_allow_reentry" := {
    Notation.dot := set_allow_reentry;
  }.
  
  Definition into_u32 `{H : State.Trait} (self : Self) : M (H := H) u32 :=
    let* α0 := (cast self.["clone_input"] u32).["shl"] 1 in
    let* α1 := (cast self.["forward_input"] u32).["bitor"] α0 in
    let* α2 := (cast self.["tail_call"] u32).["shl"] 2 in
    let* α3 := α1.["bitor"] α2 in
    let* α4 := (cast self.["allow_reentry"] u32).["shl"] 3 in
    α3.["bitor"] α4.
  
  Global Instance Method_into_u32 `{H : State.Trait} :
    Notation.Dot "into_u32" := {
    Notation.dot := into_u32;
  }.
  
  Definition forward_input
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) bool :=
    Pure self.["forward_input"].
  
  Global Instance Method_forward_input `{H : State.Trait} :
    Notation.Dot "forward_input" := {
    Notation.dot := forward_input;
  }.
  
  Definition clone_input
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) bool :=
    Pure self.["clone_input"].
  
  Global Instance Method_clone_input `{H : State.Trait} :
    Notation.Dot "clone_input" := {
    Notation.dot := clone_input;
  }.
  
  Definition tail_call `{H : State.Trait} (self : ref Self) : M (H := H) bool :=
    Pure self.["tail_call"].
  
  Global Instance Method_tail_call `{H : State.Trait} :
    Notation.Dot "tail_call" := {
    Notation.dot := tail_call;
  }.
  
  Definition allow_reentry
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) bool :=
    Pure self.["allow_reentry"].
  
  Global Instance Method_allow_reentry `{H : State.Trait} :
    Notation.Dot "allow_reentry" := {
    Notation.dot := allow_reentry;
  }.
End Impl_ink_env_backend_CallFlags_2.

Module EnvBackend.
  Class Trait (Self : Set) : Set := {
    set_contract_storage
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref K) ->
      (ref V) ->
      (M (H := H) (core.option.Option u32));
    get_contract_storage
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref K) ->
      (M (H := H) (ink_env.error.Result (core.option.Option R)));
    take_contract_storage
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref K) ->
      (M (H := H) (ink_env.error.Result (core.option.Option R)));
    contains_contract_storage
      `{H : State.Trait}
      :
      (mut_ref Self) -> (ref K) -> (M (H := H) (core.option.Option u32));
    clear_contract_storage
      `{H : State.Trait}
      :
      (mut_ref Self) -> (ref K) -> (M (H := H) (core.option.Option u32));
    decode_input
      `{H : State.Trait}
      :
      (mut_ref Self) -> (M (H := H) (ink_env.error.Result T));
    return_value
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      ink_env.backend.ReturnFlags ->
      (ref R) ->
      (M (H := H) Empty_set);
    debug_message
      `{H : State.Trait}
      :
      (mut_ref Self) -> (ref str) -> (M (H := H) unit);
    hash_bytes
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref Slice) ->
      (mut_ref ink_env.hash.HashOutput.Type) ->
      (M (H := H) unit);
    hash_encoded
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref T) ->
      (mut_ref ink_env.hash.HashOutput.Type) ->
      (M (H := H) unit);
    ecdsa_recover
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref list u8) ->
      (ref list u8) ->
      (mut_ref list u8) ->
      (M (H := H) (ink_env.error.Result unit));
    ecdsa_to_eth_address
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref list u8) ->
      (mut_ref list u8) ->
      (M (H := H) (ink_env.error.Result unit));
    call_chain_extension
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      u32 ->
      (ref I) ->
      F ->
      D ->
      (M (H := H) (core.result.Result T E));
    set_code_hash
      `{H : State.Trait}
      :
      (mut_ref Self) -> (ref Slice) -> (M (H := H) (ink_env.error.Result unit));
  }.
  
  Global Instance Method_set_contract_storage `{H : State.Trait} `(Trait)
    : Notation.Dot "set_contract_storage" := {
    Notation.dot := set_contract_storage;
  }.
  Global Instance Method_get_contract_storage `{H : State.Trait} `(Trait)
    : Notation.Dot "get_contract_storage" := {
    Notation.dot := get_contract_storage;
  }.
  Global Instance Method_take_contract_storage `{H : State.Trait} `(Trait)
    : Notation.Dot "take_contract_storage" := {
    Notation.dot := take_contract_storage;
  }.
  Global Instance Method_contains_contract_storage `{H : State.Trait} `(Trait)
    : Notation.Dot "contains_contract_storage" := {
    Notation.dot := contains_contract_storage;
  }.
  Global Instance Method_clear_contract_storage `{H : State.Trait} `(Trait)
    : Notation.Dot "clear_contract_storage" := {
    Notation.dot := clear_contract_storage;
  }.
  Global Instance Method_decode_input `{H : State.Trait} `(Trait)
    : Notation.Dot "decode_input" := {
    Notation.dot := decode_input;
  }.
  Global Instance Method_return_value `{H : State.Trait} `(Trait)
    : Notation.Dot "return_value" := {
    Notation.dot := return_value;
  }.
  Global Instance Method_debug_message `{H : State.Trait} `(Trait)
    : Notation.Dot "debug_message" := {
    Notation.dot := debug_message;
  }.
  Global Instance Method_hash_bytes `{H : State.Trait} `(Trait)
    : Notation.Dot "hash_bytes" := {
    Notation.dot := hash_bytes;
  }.
  Global Instance Method_hash_encoded `{H : State.Trait} `(Trait)
    : Notation.Dot "hash_encoded" := {
    Notation.dot := hash_encoded;
  }.
  Global Instance Method_ecdsa_recover `{H : State.Trait} `(Trait)
    : Notation.Dot "ecdsa_recover" := {
    Notation.dot := ecdsa_recover;
  }.
  Global Instance Method_ecdsa_to_eth_address `{H : State.Trait} `(Trait)
    : Notation.Dot "ecdsa_to_eth_address" := {
    Notation.dot := ecdsa_to_eth_address;
  }.
  Global Instance Method_call_chain_extension `{H : State.Trait} `(Trait)
    : Notation.Dot "call_chain_extension" := {
    Notation.dot := call_chain_extension;
  }.
  Global Instance Method_set_code_hash `{H : State.Trait} `(Trait)
    : Notation.Dot "set_code_hash" := {
    Notation.dot := set_code_hash;
  }.
End EnvBackend.

Module TypedEnvBackend.
  Class Trait (Self : Set) : Set := {
    caller `{H : State.Trait} : (mut_ref Self) -> (M (H := H) ImplE.AccountId);
    transferred_value
      `{H : State.Trait}
      :
      (mut_ref Self) -> (M (H := H) ImplE.Balance);
    weight_to_fee
      `{H : State.Trait}
      :
      (mut_ref Self) -> u64 -> (M (H := H) ImplE.Balance);
    gas_left `{H : State.Trait} : (mut_ref Self) -> (M (H := H) u64);
    block_timestamp
      `{H : State.Trait}
      :
      (mut_ref Self) -> (M (H := H) ImplE.Timestamp);
    account_id
      `{H : State.Trait}
      :
      (mut_ref Self) -> (M (H := H) ImplE.AccountId);
    balance `{H : State.Trait} : (mut_ref Self) -> (M (H := H) ImplE.Balance);
    block_number
      `{H : State.Trait}
      :
      (mut_ref Self) -> (M (H := H) ImplE.BlockNumber);
    minimum_balance
      `{H : State.Trait}
      :
      (mut_ref Self) -> (M (H := H) ImplE.Balance);
    emit_event
      `{H : State.Trait}
      :
      (mut_ref Self) -> Event -> (M (H := H) unit);
    invoke_contract
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref
        (ink_env.call.call_builder.CallParams
          E
          (ink_env.call.call_builder.Call E)
          Args
          R)) ->
      (M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)));
    invoke_contract_delegate
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref
        (ink_env.call.call_builder.CallParams
          E
          (ink_env.call.call_builder.DelegateCall E)
          Args
          R)) ->
      (M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)));
    instantiate_contract
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref
        (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R)) ->
      (M (H := H)
        (ink_env.error.Result
          (ink_primitives.ConstructorResult
            ink_env.call.create_builder.ConstructorReturnType.Output)));
    terminate_contract
      `{H : State.Trait}
      :
      (mut_ref Self) -> ImplE.AccountId -> (M (H := H) Empty_set);
    transfer
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      ImplE.AccountId ->
      ImplE.Balance ->
      (M (H := H) (ink_env.error.Result unit));
    is_contract
      `{H : State.Trait}
      :
      (mut_ref Self) -> (ref ImplE.AccountId) -> (M (H := H) bool);
    caller_is_origin `{H : State.Trait} : (mut_ref Self) -> (M (H := H) bool);
    code_hash
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref ImplE.AccountId) ->
      (M (H := H) (ink_env.error.Result ImplE.Hash));
    own_code_hash
      `{H : State.Trait}
      :
      (mut_ref Self) -> (M (H := H) (ink_env.error.Result ImplE.Hash));
    call_runtime
      `{H : State.Trait}
      :
      (mut_ref Self) -> (ref Call) -> (M (H := H) (ink_env.error.Result unit));
  }.
  
  Global Instance Method_caller `{H : State.Trait} `(Trait)
    : Notation.Dot "caller" := {
    Notation.dot := caller;
  }.
  Global Instance Method_transferred_value `{H : State.Trait} `(Trait)
    : Notation.Dot "transferred_value" := {
    Notation.dot := transferred_value;
  }.
  Global Instance Method_weight_to_fee `{H : State.Trait} `(Trait)
    : Notation.Dot "weight_to_fee" := {
    Notation.dot := weight_to_fee;
  }.
  Global Instance Method_gas_left `{H : State.Trait} `(Trait)
    : Notation.Dot "gas_left" := {
    Notation.dot := gas_left;
  }.
  Global Instance Method_block_timestamp `{H : State.Trait} `(Trait)
    : Notation.Dot "block_timestamp" := {
    Notation.dot := block_timestamp;
  }.
  Global Instance Method_account_id `{H : State.Trait} `(Trait)
    : Notation.Dot "account_id" := {
    Notation.dot := account_id;
  }.
  Global Instance Method_balance `{H : State.Trait} `(Trait)
    : Notation.Dot "balance" := {
    Notation.dot := balance;
  }.
  Global Instance Method_block_number `{H : State.Trait} `(Trait)
    : Notation.Dot "block_number" := {
    Notation.dot := block_number;
  }.
  Global Instance Method_minimum_balance `{H : State.Trait} `(Trait)
    : Notation.Dot "minimum_balance" := {
    Notation.dot := minimum_balance;
  }.
  Global Instance Method_emit_event `{H : State.Trait} `(Trait)
    : Notation.Dot "emit_event" := {
    Notation.dot := emit_event;
  }.
  Global Instance Method_invoke_contract `{H : State.Trait} `(Trait)
    : Notation.Dot "invoke_contract" := {
    Notation.dot := invoke_contract;
  }.
  Global Instance Method_invoke_contract_delegate `{H : State.Trait} `(Trait)
    : Notation.Dot "invoke_contract_delegate" := {
    Notation.dot := invoke_contract_delegate;
  }.
  Global Instance Method_instantiate_contract `{H : State.Trait} `(Trait)
    : Notation.Dot "instantiate_contract" := {
    Notation.dot := instantiate_contract;
  }.
  Global Instance Method_terminate_contract `{H : State.Trait} `(Trait)
    : Notation.Dot "terminate_contract" := {
    Notation.dot := terminate_contract;
  }.
  Global Instance Method_transfer `{H : State.Trait} `(Trait)
    : Notation.Dot "transfer" := {
    Notation.dot := transfer;
  }.
  Global Instance Method_is_contract `{H : State.Trait} `(Trait)
    : Notation.Dot "is_contract" := {
    Notation.dot := is_contract;
  }.
  Global Instance Method_caller_is_origin `{H : State.Trait} `(Trait)
    : Notation.Dot "caller_is_origin" := {
    Notation.dot := caller_is_origin;
  }.
  Global Instance Method_code_hash `{H : State.Trait} `(Trait)
    : Notation.Dot "code_hash" := {
    Notation.dot := code_hash;
  }.
  Global Instance Method_own_code_hash `{H : State.Trait} `(Trait)
    : Notation.Dot "own_code_hash" := {
    Notation.dot := own_code_hash;
  }.
  Global Instance Method_call_runtime `{H : State.Trait} `(Trait)
    : Notation.Dot "call_runtime" := {
    Notation.dot := call_runtime;
  }.
End TypedEnvBackend.

Module call.
  Module call_builder.
    Module CallParams.
      Record t : Set := {
        call_type : CallType;
        call_flags : ink_env.backend.CallFlags;
        _return_type : ink_env.call.common.ReturnType R;
        exec_input : ink_env.call.execution_input.ExecutionInput Args;
        _phantom : core.marker.PhantomData (unit -> E);
      }.
      
      Global Instance Get_call_type : Notation.Dot "call_type" := {
        Notation.dot '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_call_flags : Notation.Dot "call_flags" := {
        Notation.dot '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get__return_type : Notation.Dot "_return_type" := {
        Notation.dot '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ _ _ _ x4) := x4;
      }.
    End CallParams.
    Definition CallParams : Set := CallParams.t.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
    Section
      Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
      Context {E CallType Args R : Set}.
      
      Definition Self := ink_env.call.call_builder.CallParams E CallType Args R.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_struct_field5_finish"]
          f
          "CallParams"
          "call_type"
          (addr_of self.["call_type"])
          "call_flags"
          (addr_of self.["call_flags"])
          "_return_type"
          (addr_of self.["_return_type"])
          "exec_input"
          (addr_of self.["exec_input"])
          "_phantom"
          (addr_of (addr_of self.["_phantom"])).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
    End
      Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
    
    Module Impl_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
      Definition Self := ink_env.call.call_builder.CallParams E CallType Args R.
      
      Definition call_flags
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref ink_env.backend.CallFlags) :=
        Pure (addr_of self.["call_flags"]).
      
      Global Instance Method_call_flags `{H : State.Trait} :
        Notation.Dot "call_flags" := {
        Notation.dot := call_flags;
      }.
      
      Definition exec_input
          `{H : State.Trait}
          (self : ref Self)
          :
            M (H := H)
              (ref (ink_env.call.execution_input.ExecutionInput Args)) :=
        Pure (addr_of self.["exec_input"]).
      
      Global Instance Method_exec_input `{H : State.Trait} :
        Notation.Dot "exec_input" := {
        Notation.dot := exec_input;
      }.
    End Impl_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
    
    Module
      Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallParams
          E
          (ink_env.call.call_builder.Call E)
          Args
          R.
      
      Definition callee
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref ImplE.AccountId) :=
        Pure (addr_of self.["call_type"].["callee"]).
      
      Global Instance Method_callee `{H : State.Trait} :
        Notation.Dot "callee" := {
        Notation.dot := callee;
      }.
      
      Definition gas_limit
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) ink_env.types.Gas :=
        Pure self.["call_type"].["gas_limit"].
      
      Global Instance Method_gas_limit `{H : State.Trait} :
        Notation.Dot "gas_limit" := {
        Notation.dot := gas_limit;
      }.
      
      Definition transferred_value
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref ImplE.Balance) :=
        Pure (addr_of self.["call_type"].["transferred_value"]).
      
      Global Instance Method_transferred_value `{H : State.Trait} :
        Notation.Dot "transferred_value" := {
        Notation.dot := transferred_value;
      }.
    End
      Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R.
    
    Module
      Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallParams
          E
          (ink_env.call.call_builder.DelegateCall E)
          Args
          R.
      
      Definition code_hash
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref ImplE.Hash) :=
        Pure (addr_of self.["call_type"].["code_hash"]).
      
      Global Instance Method_code_hash `{H : State.Trait} :
        Notation.Dot "code_hash" := {
        Notation.dot := code_hash;
      }.
    End
      Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R.
    
    Module
      Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_2.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallParams
          E
          (ink_env.call.call_builder.Call E)
          Args
          R.
      
      Definition invoke `{H : State.Trait} (self : ref Self) : M (H := H) R :=
        let* α0 := ink_env.api.invoke_contract self in
        let* α1 :=
          α0.["unwrap_or_else"]
            (fun env_error =>
              let* α0 := format_argument::["new_debug"] (addr_of env_error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "Cross-contract call failed with " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        α1.["unwrap_or_else"]
          (fun lang_error =>
            let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Cross-contract call failed with " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_invoke `{H : State.Trait} :
        Notation.Dot "invoke" := {
        Notation.dot := invoke;
      }.
      
      Definition try_invoke
          `{H : State.Trait}
          (self : ref Self)
          :
            M (H := H)
              (core.result.Result
                (ink_primitives.MessageResult R)
                ink_env.error.Error) :=
        ink_env.api.invoke_contract self.
      
      Global Instance Method_try_invoke `{H : State.Trait} :
        Notation.Dot "try_invoke" := {
        Notation.dot := try_invoke;
      }.
    End
      Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_2.
    
    Module
      Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_2.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallParams
          E
          (ink_env.call.call_builder.DelegateCall E)
          Args
          R.
      
      Definition invoke `{H : State.Trait} (self : ref Self) : M (H := H) R :=
        let* α0 := ink_env.api.invoke_contract_delegate self in
        let* α1 :=
          α0.["unwrap_or_else"]
            (fun env_error =>
              let* α0 := format_argument::["new_debug"] (addr_of env_error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "Cross-contract call failed with " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        α1.["unwrap_or_else"]
          (fun lang_error =>
            let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Cross-contract call failed with " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_invoke `{H : State.Trait} :
        Notation.Dot "invoke" := {
        Notation.dot := invoke;
      }.
      
      Definition try_invoke
          `{H : State.Trait}
          (self : ref Self)
          :
            M (H := H)
              (core.result.Result
                (ink_primitives.MessageResult R)
                ink_env.error.Error) :=
        ink_env.api.invoke_contract_delegate self.
      
      Global Instance Method_try_invoke `{H : State.Trait} :
        Notation.Dot "try_invoke" := {
        Notation.dot := try_invoke;
      }.
    End
      Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_2.
    
    Definition build_call
        `{H : State.Trait}
        {E : Set}
        `{ink_env.types.Environment.Trait E}
        (_ : unit)
        :
          M (H := H)
            (ink_env.call.call_builder.CallBuilder
              E
              (ink_env.call.common.Unset (ink_env.call.call_builder.Call E))
              (ink_env.call.common.Unset
                (ink_env.call.execution_input.ExecutionInput
                  ink_env.call.execution_input.EmptyArgumentList))
              (ink_env.call.common.Unset
                (ink_env.call.common.ReturnType unit))) :=
      let* α0 := core.default.Default.default tt in
      let* α1 := core.default.Default.default tt in
      let* α2 := core.default.Default.default tt in
      let* α3 := core.default.Default.default tt in
      let* α4 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type := α0;
          ink_env.call.call_builder.CallBuilder.call_flags := α1;
          ink_env.call.call_builder.CallBuilder.exec_input := α2;
          ink_env.call.call_builder.CallBuilder.return_type := α3;
          ink_env.call.call_builder.CallBuilder._phantom := α4;
        |}.
    
    Module Call.
      Record t : Set := {
        callee : ImplE.AccountId;
        gas_limit : ink_env.types.Gas;
        transferred_value : ImplE.Balance;
      }.
      
      Global Instance Get_callee : Notation.Dot "callee" := {
        Notation.dot '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_transferred_value :
          Notation.Dot "transferred_value" := {
        Notation.dot '(Build_t _ _ x2) := x2;
      }.
    End Call.
    Definition Call : Set := Call.t.
    
    Module Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
    Section Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
      Context {E : Set}.
      
      Definition Self := ink_env.call.call_builder.Call E.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ink_env.call.call_builder.Call E) :=
        let* α0 := core.clone.Clone.clone (addr_of self.["callee"]) in
        let* α1 := core.clone.Clone.clone (addr_of self.["gas_limit"]) in
        let* α2 :=
          core.clone.Clone.clone (addr_of self.["transferred_value"]) in
        Pure
          {|
            ink_env.call.call_builder.Call.callee := α0;
            ink_env.call.call_builder.Call.gas_limit := α1;
            ink_env.call.call_builder.Call.transferred_value := α2;
          |}.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
    End Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
    
    Module Impl_ink_env_call_call_builder_Call_E.
      Definition Self := ink_env.call.call_builder.Call E.
      
      Definition new
          `{H : State.Trait}
          (callee : ImplE.AccountId)
          : M (H := H) Self :=
        let* α0 := core.default.Default.default tt in
        let* α1 := ImplE.Balance::["zero"] tt in
        Pure
          {|
            Self.callee := callee;
            Self.gas_limit := α0;
            Self.transferred_value := α1;
          |}.
      
      Global Instance AssociatedFunction_new `{H : State.Trait} :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
    End Impl_ink_env_call_call_builder_Call_E.
    
    Module Impl_ink_env_call_call_builder_Call_E_2.
      Definition Self := ink_env.call.call_builder.Call E.
      
      Definition gas_limit
          `{H : State.Trait}
          (self : Self)
          (gas_limit : ink_env.types.Gas)
          : M (H := H) Self :=
        Pure
          {|
            ink_env.call.call_builder.Call.callee := self.["callee"];
            ink_env.call.call_builder.Call.gas_limit := gas_limit;
            ink_env.call.call_builder.Call.transferred_value :=
              self.["transferred_value"];
          |}.
      
      Global Instance Method_gas_limit `{H : State.Trait} :
        Notation.Dot "gas_limit" := {
        Notation.dot := gas_limit;
      }.
      
      Definition transferred_value
          `{H : State.Trait}
          (self : Self)
          (transferred_value : ImplE.Balance)
          : M (H := H) Self :=
        Pure
          {|
            ink_env.call.call_builder.Call.callee := self.["callee"];
            ink_env.call.call_builder.Call.gas_limit := self.["gas_limit"];
            ink_env.call.call_builder.Call.transferred_value :=
              transferred_value;
          |}.
      
      Global Instance Method_transferred_value `{H : State.Trait} :
        Notation.Dot "transferred_value" := {
        Notation.dot := transferred_value;
      }.
    End Impl_ink_env_call_call_builder_Call_E_2.
    
    Module DelegateCall.
      Record t : Set := {
        code_hash : ImplE.Hash;
      }.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End DelegateCall.
    Definition DelegateCall : Set := DelegateCall.t.
    
    Module Impl_ink_env_call_call_builder_DelegateCall_E.
      Definition Self := ink_env.call.call_builder.DelegateCall E.
      
      Definition new
          `{H : State.Trait}
          (code_hash : ImplE.Hash)
          : M (H := H) Self :=
        Pure
          {| ink_env.call.call_builder.DelegateCall.code_hash := code_hash; |}.
      
      Global Instance AssociatedFunction_new `{H : State.Trait} :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
    End Impl_ink_env_call_call_builder_DelegateCall_E.
    
    Module Impl_ink_env_call_call_builder_DelegateCall_E_2.
      Definition Self := ink_env.call.call_builder.DelegateCall E.
      
      Definition code_hash
          `{H : State.Trait}
          (self : Self)
          (code_hash : ImplE.Hash)
          : M (H := H) Self :=
        Pure
          {| ink_env.call.call_builder.DelegateCall.code_hash := code_hash; |}.
      
      Global Instance Method_code_hash `{H : State.Trait} :
        Notation.Dot "code_hash" := {
        Notation.dot := code_hash;
      }.
    End Impl_ink_env_call_call_builder_DelegateCall_E_2.
    
    Module CallBuilder.
      Record t : Set := {
        call_type : CallType;
        call_flags : ink_env.backend.CallFlags;
        exec_input : Args;
        return_type : RetType;
        _phantom : core.marker.PhantomData (unit -> E);
      }.
      
      Global Instance Get_call_type : Notation.Dot "call_type" := {
        Notation.dot '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_call_flags : Notation.Dot "call_flags" := {
        Notation.dot '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_return_type : Notation.Dot "return_type" := {
        Notation.dot '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ _ _ _ x4) := x4;
      }.
    End CallBuilder.
    Definition CallBuilder : Set := CallBuilder.t.
    
    Module
      Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
    Section
      Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
      Context {E CallType Args RetType : Set}.
      
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder E CallType Args RetType.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          :
            M (H := H)
              (ink_env.call.call_builder.CallBuilder E CallType Args RetType) :=
        let* α0 := core.clone.Clone.clone (addr_of self.["call_type"]) in
        let* α1 := core.clone.Clone.clone (addr_of self.["call_flags"]) in
        let* α2 := core.clone.Clone.clone (addr_of self.["exec_input"]) in
        let* α3 := core.clone.Clone.clone (addr_of self.["return_type"]) in
        let* α4 := core.clone.Clone.clone (addr_of self.["_phantom"]) in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type := α0;
            ink_env.call.call_builder.CallBuilder.call_flags := α1;
            ink_env.call.call_builder.CallBuilder.exec_input := α2;
            ink_env.call.call_builder.CallBuilder.return_type := α3;
            ink_env.call.call_builder.CallBuilder._phantom := α4;
          |}.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End
      Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
    End
      Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Unset CallType)
          Args
          RetType.
      
      Definition call_type
          `{H : State.Trait}
          (self : Self)
          (call_type : NewCallType)
          :
            M (H := H)
              (ink_env.call.call_builder.CallBuilder
                E
                (ink_env.call.common.Set NewCallType)
                Args
                RetType) :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              ink_env.call.common.Set.Build_t call_type;
            ink_env.call.call_builder.CallBuilder.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.call_builder.CallBuilder.return_type :=
              self.["return_type"];
            ink_env.call.call_builder.CallBuilder._phantom := α0;
          |}.
      
      Global Instance Method_call_type `{H : State.Trait} :
        Notation.Dot "call_type" := {
        Notation.dot := call_type;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType.
    
    Module Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder E CallType Args RetType.
      
      Definition call_flags
          `{H : State.Trait}
          (self : Self)
          (call_flags : ink_env.backend.CallFlags)
          :
            M (H := H)
              (ink_env.call.call_builder.CallBuilder E CallType Args RetType) :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              self.["call_type"];
            ink_env.call.call_builder.CallBuilder.call_flags := call_flags;
            ink_env.call.call_builder.CallBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.call_builder.CallBuilder.return_type :=
              self.["return_type"];
            ink_env.call.call_builder.CallBuilder._phantom := α0;
          |}.
      
      Global Instance Method_call_flags `{H : State.Trait} :
        Notation.Dot "call_flags" := {
        Notation.dot := call_flags;
      }.
    End Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple_.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          CallType
          Args
          (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
      
      Definition returns
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (ink_env.call.call_builder.CallBuilder
                E
                CallType
                Args
                (ink_env.call.common.Set (ink_env.call.common.ReturnType R))) :=
        let* α0 := core.default.Default.default tt in
        let* α1 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              self.["call_type"];
            ink_env.call.call_builder.CallBuilder.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.call_builder.CallBuilder.return_type :=
              ink_env.call.common.Set.Build_t α0;
            ink_env.call.call_builder.CallBuilder._phantom := α1;
          |}.
      
      Global Instance Method_returns `{H : State.Trait} :
        Notation.Dot "returns" := {
        Notation.dot := returns;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple_.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_CallType_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          CallType
          (ink_env.call.common.Unset
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          RetType.
      
      Definition exec_input
          `{H : State.Trait}
          (self : Self)
          (exec_input : ink_env.call.execution_input.ExecutionInput Args)
          :
            M (H := H)
              (ink_env.call.call_builder.CallBuilder
                E
                CallType
                (ink_env.call.common.Set
                  (ink_env.call.execution_input.ExecutionInput Args))
                RetType) :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              self.["call_type"];
            ink_env.call.call_builder.CallBuilder.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallBuilder.exec_input :=
              ink_env.call.common.Set.Build_t exec_input;
            ink_env.call.call_builder.CallBuilder.return_type :=
              self.["return_type"];
            ink_env.call.call_builder.CallBuilder._phantom := α0;
          |}.
      
      Global Instance Method_exec_input `{H : State.Trait} :
        Notation.Dot "exec_input" := {
        Notation.dot := exec_input;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_CallType_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_2.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Unset CallType)
          Args
          RetType.
      
      Definition call
          `{H : State.Trait}
          (self : Self)
          (callee : ImplE.AccountId)
          :
            M (H := H)
              (ink_env.call.call_builder.CallBuilder
                E
                (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
                Args
                RetType) :=
        let* α0 := ink_env.call.call_builder.Call::["new"] callee in
        let* α1 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              ink_env.call.common.Set.Build_t α0;
            ink_env.call.call_builder.CallBuilder.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.call_builder.CallBuilder.return_type :=
              self.["return_type"];
            ink_env.call.call_builder.CallBuilder._phantom := α1;
          |}.
      
      Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
        Notation.dot := call;
      }.
      
      Definition delegate
          `{H : State.Trait}
          (self : Self)
          (code_hash : ImplE.Hash)
          :
            M (H := H)
              (ink_env.call.call_builder.CallBuilder
                E
                (ink_env.call.common.Set
                  (ink_env.call.call_builder.DelegateCall E))
                Args
                RetType) :=
        let* α0 := ink_env.call.call_builder.DelegateCall::["new"] code_hash in
        let* α1 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              ink_env.call.common.Set.Build_t α0;
            ink_env.call.call_builder.CallBuilder.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.call_builder.CallBuilder.return_type :=
              self.["return_type"];
            ink_env.call.call_builder.CallBuilder._phantom := α1;
          |}.
      
      Global Instance Method_delegate `{H : State.Trait} :
        Notation.Dot "delegate" := {
        Notation.dot := delegate;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_2.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_Args_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
          Args
          RetType.
      
      Definition gas_limit
          `{H : State.Trait}
          (self : Self)
          (gas_limit : ink_env.types.Gas)
          : M (H := H) Self :=
        let* call_type := self.["call_type"].["value"] in
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              ink_env.call.common.Set.Build_t
                {|
                  ink_env.call.call_builder.Call.callee := call_type.["callee"];
                  ink_env.call.call_builder.Call.gas_limit := gas_limit;
                  ink_env.call.call_builder.Call.transferred_value :=
                    call_type.["transferred_value"];
                |};
            ink_env.call.call_builder.CallBuilder.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.call_builder.CallBuilder.return_type :=
              self.["return_type"];
            ink_env.call.call_builder.CallBuilder._phantom := α0;
          |}.
      
      Global Instance Method_gas_limit `{H : State.Trait} :
        Notation.Dot "gas_limit" := {
        Notation.dot := gas_limit;
      }.
      
      Definition transferred_value
          `{H : State.Trait}
          (self : Self)
          (transferred_value : ImplE.Balance)
          : M (H := H) Self :=
        let* call_type := self.["call_type"].["value"] in
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              ink_env.call.common.Set.Build_t
                {|
                  ink_env.call.call_builder.Call.callee := call_type.["callee"];
                  ink_env.call.call_builder.Call.gas_limit :=
                    call_type.["gas_limit"];
                  ink_env.call.call_builder.Call.transferred_value :=
                    transferred_value;
                |};
            ink_env.call.call_builder.CallBuilder.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.call_builder.CallBuilder.return_type :=
              self.["return_type"];
            ink_env.call.call_builder.CallBuilder._phantom := α0;
          |}.
      
      Global Instance Method_transferred_value `{H : State.Trait} :
        Notation.Dot "transferred_value" := {
        Notation.dot := transferred_value;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_Args_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_Args_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
          Args
          RetType.
      
      Definition code_hash
          `{H : State.Trait}
          (self : Self)
          (code_hash : ImplE.Hash)
          : M (H := H) Self :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallBuilder.call_type :=
              ink_env.call.common.Set.Build_t
                {|
                  ink_env.call.call_builder.DelegateCall.code_hash := code_hash;
                |};
            ink_env.call.call_builder.CallBuilder.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.call_builder.CallBuilder.return_type :=
              self.["return_type"];
            ink_env.call.call_builder.CallBuilder._phantom := α0;
          |}.
      
      Global Instance Method_code_hash `{H : State.Trait} :
        Notation.Dot "code_hash" := {
        Notation.dot := code_hash;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_Args_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
          (ink_env.call.common.Set
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
      
      Definition params
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (ink_env.call.call_builder.CallParams
                E
                (ink_env.call.call_builder.Call E)
                Args
                RetType) :=
        let* α0 := self.["call_type"].["value"] in
        let* α1 := core.default.Default.default tt in
        let* α2 := self.["exec_input"].["value"] in
        Pure
          {|
            ink_env.call.call_builder.CallParams.call_type := α0;
            ink_env.call.call_builder.CallParams.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallParams._return_type := α1;
            ink_env.call.call_builder.CallParams.exec_input := α2;
            ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
          |}.
      
      Global Instance Method_params `{H : State.Trait} :
        Notation.Dot "params" := {
        Notation.dot := params;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
          (ink_env.call.common.Set
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
      
      Definition params
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (ink_env.call.call_builder.CallParams
                E
                (ink_env.call.call_builder.DelegateCall E)
                Args
                RetType) :=
        let* α0 := self.["call_type"].["value"] in
        let* α1 := core.default.Default.default tt in
        let* α2 := self.["exec_input"].["value"] in
        Pure
          {|
            ink_env.call.call_builder.CallParams.call_type := α0;
            ink_env.call.call_builder.CallParams.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallParams._return_type := α1;
            ink_env.call.call_builder.CallParams.exec_input := α2;
            ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
          |}.
      
      Global Instance Method_params `{H : State.Trait} :
        Notation.Dot "params" := {
        Notation.dot := params;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
          (ink_env.call.common.Unset
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset RetType).
      
      Definition params
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (ink_env.call.call_builder.CallParams
                E
                (ink_env.call.call_builder.Call E)
                ink_env.call.execution_input.EmptyArgumentList
                unit) :=
        let* α0 := self.["call_type"].["value"] in
        let* α1 := core.default.Default.default tt in
        let* α2 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallParams.call_type := α0;
            ink_env.call.call_builder.CallParams.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallParams._return_type := α1;
            ink_env.call.call_builder.CallParams.exec_input := α2;
            ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
          |}.
      
      Global Instance Method_params `{H : State.Trait} :
        Notation.Dot "params" := {
        Notation.dot := params;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
          (ink_env.call.common.Unset
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset RetType).
      
      Definition params
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (ink_env.call.call_builder.CallParams
                E
                (ink_env.call.call_builder.DelegateCall E)
                ink_env.call.execution_input.EmptyArgumentList
                unit) :=
        let* α0 := self.["call_type"].["value"] in
        let* α1 := core.default.Default.default tt in
        let* α2 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.call_builder.CallParams.call_type := α0;
            ink_env.call.call_builder.CallParams.call_flags :=
              self.["call_flags"];
            ink_env.call.call_builder.CallParams._return_type := α1;
            ink_env.call.call_builder.CallParams.exec_input := α2;
            ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
          |}.
      
      Global Instance Method_params `{H : State.Trait} :
        Notation.Dot "params" := {
        Notation.dot := params;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple_.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
          (ink_env.call.common.Unset
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
      
      Definition invoke `{H : State.Trait} (self : Self) : M (H := H) unit :=
        let* α0 := self.["params"] in
        α0.["invoke"].
      
      Global Instance Method_invoke `{H : State.Trait} :
        Notation.Dot "invoke" := {
        Notation.dot := invoke;
      }.
      
      Definition try_invoke
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (core.result.Result
                (ink_primitives.MessageResult unit)
                ink_env.error.Error) :=
        let* α0 := self.["params"] in
        α0.["try_invoke"].
      
      Global Instance Method_try_invoke `{H : State.Trait} :
        Notation.Dot "try_invoke" := {
        Notation.dot := try_invoke;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple_.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple_.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
          (ink_env.call.common.Unset
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
      
      Definition invoke `{H : State.Trait} (self : Self) : M (H := H) unit :=
        let* α0 := self.["params"] in
        α0.["invoke"].
      
      Global Instance Method_invoke `{H : State.Trait} :
        Notation.Dot "invoke" := {
        Notation.dot := invoke;
      }.
      
      Definition try_invoke
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (core.result.Result
                (ink_primitives.MessageResult unit)
                ink_env.error.Error) :=
        let* α0 := self.["params"] in
        α0.["try_invoke"].
      
      Global Instance Method_try_invoke `{H : State.Trait} :
        Notation.Dot "try_invoke" := {
        Notation.dot := try_invoke;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple_.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
          (ink_env.call.common.Set
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set (ink_env.call.common.ReturnType R)).
      
      Definition invoke `{H : State.Trait} (self : Self) : M (H := H) R :=
        let* α0 := self.["params"] in
        α0.["invoke"].
      
      Global Instance Method_invoke `{H : State.Trait} :
        Notation.Dot "invoke" := {
        Notation.dot := invoke;
      }.
      
      Definition try_invoke
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (core.result.Result
                (ink_primitives.MessageResult R)
                ink_env.error.Error) :=
        let* α0 := self.["params"] in
        α0.["try_invoke"].
      
      Global Instance Method_try_invoke `{H : State.Trait} :
        Notation.Dot "try_invoke" := {
        Notation.dot := try_invoke;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R.
    
    Module
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R.
      Definition
        Self
        :=
        ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
          (ink_env.call.common.Set
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set (ink_env.call.common.ReturnType R)).
      
      Definition invoke `{H : State.Trait} (self : Self) : M (H := H) R :=
        let* α0 := self.["params"] in
        α0.["invoke"].
      
      Global Instance Method_invoke `{H : State.Trait} :
        Notation.Dot "invoke" := {
        Notation.dot := invoke;
      }.
      
      Definition try_invoke
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (core.result.Result
                (ink_primitives.MessageResult R)
                ink_env.error.Error) :=
        let* α0 := self.["params"] in
        α0.["try_invoke"].
      
      Global Instance Method_try_invoke `{H : State.Trait} :
        Notation.Dot "try_invoke" := {
        Notation.dot := try_invoke;
      }.
    End
      Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R.
  End call_builder.
  
  Module common.
    Module ReturnType.
      Record t : Set := { _ : core.marker.PhantomData (unit -> T);}.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End ReturnType.
    Definition ReturnType := ReturnType.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
    Section Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.ReturnType T.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_tuple_field1_finish"]
          f
          "ReturnType"
          (addr_of (addr_of (self.[0]))).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
    End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
    
    Module Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
    Section Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.ReturnType T.
      
      Definition clone `{H : State.Trait} (self : ref Self) : M (H := H) Self :=
        let* α0 := core.default.Default.default tt in
        Self α0.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
    End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
    
    Module Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
    Section Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.ReturnType T.
      
      Global Instance I : core.marker.Copy.Trait Self :=
        core.marker.Copy.Build_Trait _.
    End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
    End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
    
    Module Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
    Section Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.ReturnType T.
      
      Definition default `{H : State.Trait} (_ : unit) : M (H := H) Self :=
        let* α0 := core.default.Default.default tt in
        Self α0.
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
    End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
    
    Module Set.
      Record t : Set := { _ : T;}.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Set.
    Definition Set := Set.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
    Section Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Set T.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_tuple_field1_finish"]
          f
          "Set"
          (addr_of (addr_of (self.[0]))).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
    End Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
    
    Module Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
    Section Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Set T.
      
      Global Instance I : core.marker.Copy.Trait Self :=
        core.marker.Copy.Build_Trait _.
    End Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
    End Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
    
    Module Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
    Section Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Set T.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ink_env.call.common.Set T) :=
        let* α0 := core.clone.Clone.clone (addr_of (self.[0])) in
        Pure (ink_env.call.common.Set.Build_t α0).
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
    End Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
    
    Module Impl_ink_env_call_common_Set_T.
      Definition Self := ink_env.call.common.Set T.
      
      Definition value `{H : State.Trait} (self : Self) : M (H := H) T :=
        Pure (self.[0]).
      
      Global Instance Method_value `{H : State.Trait} :
        Notation.Dot "value" := {
        Notation.dot := value;
      }.
    End Impl_ink_env_call_common_Set_T.
    
    Module Unset.
      Record t : Set := { _ : core.marker.PhantomData (unit -> T);}.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Unset.
    Definition Unset := Unset.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
    Section Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Unset T.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_tuple_field1_finish"]
          f
          "Unset"
          (addr_of (addr_of (self.[0]))).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
    End Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
    
    Module Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
    Section Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Unset T.
      
      Definition clone `{H : State.Trait} (self : ref Self) : M (H := H) Self :=
        let* α0 := core.default.Default.default tt in
        Self α0.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
    End Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
    
    Module Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
    Section Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Unset T.
      
      Global Instance I : core.marker.Copy.Trait Self :=
        core.marker.Copy.Build_Trait _.
    End Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
    End Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
    
    Module Impl_core_default_Default_for_ink_env_call_common_Unset_T.
    Section Impl_core_default_Default_for_ink_env_call_common_Unset_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Unset T.
      
      Definition default `{H : State.Trait} (_ : unit) : M (H := H) Self :=
        let* α0 := core.default.Default.default tt in
        Self α0.
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End Impl_core_default_Default_for_ink_env_call_common_Unset_T.
    End Impl_core_default_Default_for_ink_env_call_common_Unset_T.
    
    Module Unwrap.
      Class Trait (Self : Set) {Output : Set} : Set := {
        Output := Output;
        unwrap_or_else
          `{H : State.Trait}
          :
          Self -> F -> (M (H := H) ImplSelf.Output);
      }.
      
      Global Instance Method_Output `{H : State.Trait} `(Trait)
        : Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_unwrap_or_else `{H : State.Trait} `(Trait)
        : Notation.Dot "unwrap_or_else" := {
        Notation.dot := unwrap_or_else;
      }.
    End Unwrap.
    
    Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
    Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Unset T.
      
      Definition Output : Set := T.
      
      Definition unwrap_or_else
          `{H : State.Trait}
          (self : Self)
          (f : F)
          : M (H := H) ImplSelf.Output :=
        f tt.
      
      Global Instance Method_unwrap_or_else `{H : State.Trait} :
        Notation.Dot "unwrap_or_else" := {
        Notation.dot := unwrap_or_else;
      }.
      
      Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
        ink_env.call.common.Unwrap.unwrap_or_else
          `{H : State.Trait}
          :=
          unwrap_or_else;
      }.
    End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
    End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
    
    Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
    Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.common.Set T.
      
      Definition Output : Set := T.
      
      Definition unwrap_or_else
          `{H : State.Trait}
          (self : Self)
          (Pattern : F)
          : M (H := H) ImplSelf.Output :=
        self.["value"].
      
      Global Instance Method_unwrap_or_else `{H : State.Trait} :
        Notation.Dot "unwrap_or_else" := {
        Notation.dot := unwrap_or_else;
      }.
      
      Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
        ink_env.call.common.Unwrap.unwrap_or_else
          `{H : State.Trait}
          :=
          unwrap_or_else;
      }.
    End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
    End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
  End common.
  
  Module create_builder.
    Module state.
      Module Salt.
        Inductive t : Set :=
        .
      End Salt.
      Definition Salt := Salt.t.
    End state.
    
    Module FromAccountId.
      Class Trait (Self : Set) {T : Set} : Set := {
        from_account_id
          `{H : State.Trait}
          :
          ink_env.types.Environment.AccountId -> (M (H := H) Self);
      }.
      
      Global Instance Method_from_account_id `{H : State.Trait} `(Trait)
        : Notation.Dot "from_account_id" := {
        Notation.dot := from_account_id;
      }.
    End FromAccountId.
    
    Module ConstructorReturnType.
      Class Trait
          (Self : Set) {C : Set}
          {Output : Set}
          {Error : Set}
          `{parity_scale_codec.codec.Decode.Trait Error} :
          Set := {
        IS_RESULT `{H : State.Trait} : bool;
        Output := Output;
        Error := Error;
        ok `{H : State.Trait} : C -> (M (H := H) ImplSelf.Output);
      }.
      
      Global Instance Method_IS_RESULT `{H : State.Trait} `(Trait)
        : Notation.Dot "IS_RESULT" := {
        Notation.dot := IS_RESULT;
      }.
      Global Instance Method_Output `{H : State.Trait} `(Trait)
        : Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Error `{H : State.Trait} `(Trait)
        : Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
      Global Instance Method_ok `{H : State.Trait} `(Trait)
        : Notation.Dot "ok" := {
        Notation.dot := ok;
      }.
      Global Instance Method_err `{H : State.Trait} `(Trait)
        : Notation.Dot "err" := {
        Notation.dot (_err : ImplSelf.Error) :=
          (Pure core.option.Option.None
          : M (H := H) (core.option.Option ImplSelf.Output));
      }.
    End ConstructorReturnType.
    
    Module Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
    Section Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
      Context {C : Set}.
      
      Definition Self := C.
      
      Definition Output : Set := C.
      
      Definition Error : Set := unit.
      
      Definition ok
          `{H : State.Trait}
          (value : C)
          : M (H := H) ImplSelf.Output :=
        Pure value.
      
      Global Instance AssociatedFunction_ok `{H : State.Trait} :
        Notation.DoubleColon Self "ok" := {
        Notation.double_colon := ok;
      }.
      
      Global Instance I :
          ink_env.call.create_builder.ConstructorReturnType.Trait
            Self
            (C := C) := {
        ink_env.call.create_builder.ConstructorReturnType.ok
          `{H : State.Trait}
          :=
          ok;
      }.
    End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
    End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
    
    Module
      Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
    Section
      Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
      Context {C E : Set}.
      
      Definition Self := core.result.Result C E.
      
      Definition IS_RESULT := Pure true.
      
      Global Instance AssociatedFunction_IS_RESULT `{H : State.Trait} :
        Notation.DoubleColon Self "IS_RESULT" := {
        Notation.double_colon := IS_RESULT;
      }.
      
      Definition Output : Set := core.result.Result C E.
      
      Definition Error : Set := E.
      
      Definition ok
          `{H : State.Trait}
          (value : C)
          : M (H := H) ImplSelf.Output :=
        Pure (core.result.Result.Ok value).
      
      Global Instance AssociatedFunction_ok `{H : State.Trait} :
        Notation.DoubleColon Self "ok" := {
        Notation.double_colon := ok;
      }.
      
      Definition err
          `{H : State.Trait}
          (err : ImplSelf.Error)
          : M (H := H) (core.option.Option ImplSelf.Output) :=
        Pure (core.option.Option.Some (core.result.Result.Err err)).
      
      Global Instance AssociatedFunction_err `{H : State.Trait} :
        Notation.DoubleColon Self "err" := {
        Notation.double_colon := err;
      }.
      
      Global Instance I :
          ink_env.call.create_builder.ConstructorReturnType.Trait
            Self
            (C := C) := {
        ink_env.call.create_builder.ConstructorReturnType.ok
          `{H : State.Trait}
          :=
          ok;
      }.
    End
      Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
    End
      Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
    
    Module CreateParams.
      Record t : Set := {
        code_hash : ImplE.Hash;
        gas_limit : u64;
        endowment : ImplE.Balance;
        exec_input : ink_env.call.execution_input.ExecutionInput Args;
        salt_bytes : Salt;
        _return_type : ink_env.call.common.ReturnType R;
        _phantom : core.marker.PhantomData (unit -> ContractRef);
      }.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
      }.
      Global Instance Get_endowment : Notation.Dot "endowment" := {
        Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
      }.
      Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
        Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
      }.
      Global Instance Get__return_type : Notation.Dot "_return_type" := {
        Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
      }.
    End CreateParams.
    Definition CreateParams : Set := CreateParams.t.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    Section
      Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
      Context {E ContractRef Args Salt R : Set}.
      
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        let names :=
          addr_of
            [
              "code_hash";
              "gas_limit";
              "endowment";
              "exec_input";
              "salt_bytes";
              "_return_type";
              "_phantom"
            ] in
        let values :=
          addr_of
            [
              addr_of self.["code_hash"];
              addr_of self.["gas_limit"];
              addr_of self.["endowment"];
              addr_of self.["exec_input"];
              addr_of self.["salt_bytes"];
              addr_of self.["_return_type"];
              addr_of (addr_of self.["_phantom"])
            ] in
        core.fmt.Formatter::["debug_struct_fields_finish"]
          f
          "CreateParams"
          names
          values.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    End
      Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    
    Module
      Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
      
      Definition code_hash
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref ImplE.Hash) :=
        Pure (addr_of self.["code_hash"]).
      
      Global Instance Method_code_hash `{H : State.Trait} :
        Notation.Dot "code_hash" := {
        Notation.dot := code_hash;
      }.
      
      Definition gas_limit
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) u64 :=
        Pure self.["gas_limit"].
      
      Global Instance Method_gas_limit `{H : State.Trait} :
        Notation.Dot "gas_limit" := {
        Notation.dot := gas_limit;
      }.
      
      Definition endowment
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref ImplE.Balance) :=
        Pure (addr_of self.["endowment"]).
      
      Global Instance Method_endowment `{H : State.Trait} :
        Notation.Dot "endowment" := {
        Notation.dot := endowment;
      }.
      
      Definition exec_input
          `{H : State.Trait}
          (self : ref Self)
          :
            M (H := H)
              (ref (ink_env.call.execution_input.ExecutionInput Args)) :=
        Pure (addr_of self.["exec_input"]).
      
      Global Instance Method_exec_input `{H : State.Trait} :
        Notation.Dot "exec_input" := {
        Notation.dot := exec_input;
      }.
      
      Definition update_selector
          `{H : State.Trait}
          (self : mut_ref Self)
          (selector : ink_env.call.selector.Selector)
          : M (H := H) unit :=
        self.["exec_input"].["update_selector"] selector.
      
      Global Instance Method_update_selector `{H : State.Trait} :
        Notation.Dot "update_selector" := {
        Notation.dot := update_selector;
      }.
    End Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    
    Module
      Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_2.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
      
      Definition salt_bytes
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref Salt) :=
        Pure (addr_of self.["salt_bytes"]).
      
      Global Instance Method_salt_bytes `{H : State.Trait} :
        Notation.Dot "salt_bytes" := {
        Notation.dot := salt_bytes;
      }.
    End
      Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_2.
    
    Module
      Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_3.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
      
      Definition instantiate
          `{H : State.Trait}
          (self : ref Self)
          :
            M (H := H)
              ink_env.call.create_builder.ConstructorReturnType.Output :=
        let* α0 := ink_env.api.instantiate_contract self in
        let* α1 :=
          α0.["unwrap_or_else"]
            (fun env_error =>
              let* α0 := format_argument::["new_debug"] (addr_of env_error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "Cross-contract instantiation failed with " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        α1.["unwrap_or_else"]
          (fun lang_error =>
            let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Received a `LangError` while instantiating: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_instantiate `{H : State.Trait} :
        Notation.Dot "instantiate" := {
        Notation.dot := instantiate;
      }.
      
      Definition try_instantiate
          `{H : State.Trait}
          (self : ref Self)
          :
            M (H := H)
              (core.result.Result
                (ink_primitives.ConstructorResult
                  ink_env.call.create_builder.ConstructorReturnType.Output)
                ink_env.error.Error) :=
        ink_env.api.instantiate_contract self.
      
      Global Instance Method_try_instantiate `{H : State.Trait} :
        Notation.Dot "try_instantiate" := {
        Notation.dot := try_instantiate;
      }.
    End
      Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_3.
    
    Module CreateBuilder.
      Record t : Set := {
        code_hash : CodeHash;
        gas_limit : GasLimit;
        endowment : Endowment;
        exec_input : Args;
        salt : Salt;
        return_type : RetType;
        _phantom : core.marker.PhantomData (unit -> (E * ContractRef));
      }.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
      }.
      Global Instance Get_endowment : Notation.Dot "endowment" := {
        Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
      }.
      Global Instance Get_salt : Notation.Dot "salt" := {
        Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
      }.
      Global Instance Get_return_type : Notation.Dot "return_type" := {
        Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
      }.
    End CreateBuilder.
    Definition CreateBuilder : Set := CreateBuilder.t.
    
    Definition build_create
        `{H : State.Trait}
        {ContractRef : Set}
        `{ink_env.contract.ContractEnv.Trait ContractRef}
        (_ : unit)
        :
          M (H := H)
            (ink_env.call.create_builder.CreateBuilder
              ink_env.contract.ContractEnv.Env
              ContractRef
              (ink_env.call.common.Unset ink_env.types.Environment.Hash)
              (ink_env.call.common.Unset u64)
              (ink_env.call.common.Unset ink_env.types.Environment.Balance)
              (ink_env.call.common.Unset
                (ink_env.call.execution_input.ExecutionInput
                  ink_env.call.execution_input.EmptyArgumentList))
              (ink_env.call.common.Unset ink_env.call.create_builder.state.Salt)
              (ink_env.call.common.Unset
                (ink_env.call.common.ReturnType unit))) :=
      let* α0 := core.default.Default.default tt in
      let* α1 := core.default.Default.default tt in
      let* α2 := core.default.Default.default tt in
      let* α3 := core.default.Default.default tt in
      let* α4 := core.default.Default.default tt in
      let* α5 := core.default.Default.default tt in
      let* α6 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.create_builder.CreateBuilder.code_hash := α0;
          ink_env.call.create_builder.CreateBuilder.gas_limit := α1;
          ink_env.call.create_builder.CreateBuilder.endowment := α2;
          ink_env.call.create_builder.CreateBuilder.exec_input := α3;
          ink_env.call.create_builder.CreateBuilder.salt := α4;
          ink_env.call.create_builder.CreateBuilder.return_type := α5;
          ink_env.call.create_builder.CreateBuilder._phantom := α6;
        |}.
    
    Module
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Unset_ImplE_Hash_GasLimit_Endowment_Args_Salt_RetType.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateBuilder
          E
          ContractRef
          (ink_env.call.common.Unset ImplE.Hash)
          GasLimit
          Endowment
          Args
          Salt
          RetType.
      
      Definition code_hash
          `{H : State.Trait}
          (self : Self)
          (code_hash : ImplE.Hash)
          :
            M (H := H)
              (ink_env.call.create_builder.CreateBuilder
                E
                ContractRef
                (ink_env.call.common.Set ImplE.Hash)
                GasLimit
                Endowment
                Args
                Salt
                RetType) :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.create_builder.CreateBuilder.code_hash :=
              ink_env.call.common.Set.Build_t code_hash;
            ink_env.call.create_builder.CreateBuilder.gas_limit :=
              self.["gas_limit"];
            ink_env.call.create_builder.CreateBuilder.endowment :=
              self.["endowment"];
            ink_env.call.create_builder.CreateBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
            ink_env.call.create_builder.CreateBuilder.return_type :=
              self.["return_type"];
            ink_env.call.create_builder.CreateBuilder._phantom := α0;
          |}.
      
      Global Instance Method_code_hash `{H : State.Trait} :
        Notation.Dot "code_hash" := {
        Notation.dot := code_hash;
      }.
    End
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Unset_ImplE_Hash_GasLimit_Endowment_Args_Salt_RetType.
    
    Module
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_ink_env_call_common_Unset_u64_Endowment_Args_Salt_RetType.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateBuilder
          E
          ContractRef
          CodeHash
          (ink_env.call.common.Unset u64)
          Endowment
          Args
          Salt
          RetType.
      
      Definition gas_limit
          `{H : State.Trait}
          (self : Self)
          (gas_limit : u64)
          :
            M (H := H)
              (ink_env.call.create_builder.CreateBuilder
                E
                ContractRef
                CodeHash
                (ink_env.call.common.Set u64)
                Endowment
                Args
                Salt
                RetType) :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.create_builder.CreateBuilder.code_hash :=
              self.["code_hash"];
            ink_env.call.create_builder.CreateBuilder.gas_limit :=
              ink_env.call.common.Set.Build_t gas_limit;
            ink_env.call.create_builder.CreateBuilder.endowment :=
              self.["endowment"];
            ink_env.call.create_builder.CreateBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
            ink_env.call.create_builder.CreateBuilder.return_type :=
              self.["return_type"];
            ink_env.call.create_builder.CreateBuilder._phantom := α0;
          |}.
      
      Global Instance Method_gas_limit `{H : State.Trait} :
        Notation.Dot "gas_limit" := {
        Notation.dot := gas_limit;
      }.
    End
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_ink_env_call_common_Unset_u64_Endowment_Args_Salt_RetType.
    
    Module
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_ink_env_call_common_Unset_ImplE_Balance_Args_Salt_RetType.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateBuilder
          E
          ContractRef
          CodeHash
          GasLimit
          (ink_env.call.common.Unset ImplE.Balance)
          Args
          Salt
          RetType.
      
      Definition endowment
          `{H : State.Trait}
          (self : Self)
          (endowment : ImplE.Balance)
          :
            M (H := H)
              (ink_env.call.create_builder.CreateBuilder
                E
                ContractRef
                CodeHash
                GasLimit
                (ink_env.call.common.Set ImplE.Balance)
                Args
                Salt
                RetType) :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.create_builder.CreateBuilder.code_hash :=
              self.["code_hash"];
            ink_env.call.create_builder.CreateBuilder.gas_limit :=
              self.["gas_limit"];
            ink_env.call.create_builder.CreateBuilder.endowment :=
              ink_env.call.common.Set.Build_t endowment;
            ink_env.call.create_builder.CreateBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
            ink_env.call.create_builder.CreateBuilder.return_type :=
              self.["return_type"];
            ink_env.call.create_builder.CreateBuilder._phantom := α0;
          |}.
      
      Global Instance Method_endowment `{H : State.Trait} :
        Notation.Dot "endowment" := {
        Notation.dot := endowment;
      }.
    End
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_ink_env_call_common_Unset_ImplE_Balance_Args_Salt_RetType.
    
    Module
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_Salt_RetType.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateBuilder
          E
          ContractRef
          CodeHash
          GasLimit
          Endowment
          (ink_env.call.common.Unset
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          Salt
          RetType.
      
      Definition exec_input
          `{H : State.Trait}
          (self : Self)
          (exec_input : ink_env.call.execution_input.ExecutionInput Args)
          :
            M (H := H)
              (ink_env.call.create_builder.CreateBuilder
                E
                ContractRef
                CodeHash
                GasLimit
                Endowment
                (ink_env.call.common.Set
                  (ink_env.call.execution_input.ExecutionInput Args))
                Salt
                RetType) :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.create_builder.CreateBuilder.code_hash :=
              self.["code_hash"];
            ink_env.call.create_builder.CreateBuilder.gas_limit :=
              self.["gas_limit"];
            ink_env.call.create_builder.CreateBuilder.endowment :=
              self.["endowment"];
            ink_env.call.create_builder.CreateBuilder.exec_input :=
              ink_env.call.common.Set.Build_t exec_input;
            ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
            ink_env.call.create_builder.CreateBuilder.return_type :=
              self.["return_type"];
            ink_env.call.create_builder.CreateBuilder._phantom := α0;
          |}.
      
      Global Instance Method_exec_input `{H : State.Trait} :
        Notation.Dot "exec_input" := {
        Notation.dot := exec_input;
      }.
    End
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_Salt_RetType.
    
    Module
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_ink_env_call_common_Unset_ink_env_call_create_builder_state_Salt_RetType.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateBuilder
          E
          ContractRef
          CodeHash
          GasLimit
          Endowment
          Args
          (ink_env.call.common.Unset ink_env.call.create_builder.state.Salt)
          RetType.
      
      Definition salt_bytes
          `{H : State.Trait}
          (self : Self)
          (salt : Salt)
          :
            M (H := H)
              (ink_env.call.create_builder.CreateBuilder
                E
                ContractRef
                CodeHash
                GasLimit
                Endowment
                Args
                (ink_env.call.common.Set Salt)
                RetType) :=
        let* α0 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.create_builder.CreateBuilder.code_hash :=
              self.["code_hash"];
            ink_env.call.create_builder.CreateBuilder.gas_limit :=
              self.["gas_limit"];
            ink_env.call.create_builder.CreateBuilder.endowment :=
              self.["endowment"];
            ink_env.call.create_builder.CreateBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.create_builder.CreateBuilder.salt :=
              ink_env.call.common.Set.Build_t salt;
            ink_env.call.create_builder.CreateBuilder.return_type :=
              self.["return_type"];
            ink_env.call.create_builder.CreateBuilder._phantom := α0;
          |}.
      
      Global Instance Method_salt_bytes `{H : State.Trait} :
        Notation.Dot "salt_bytes" := {
        Notation.dot := salt_bytes;
      }.
    End
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_ink_env_call_common_Unset_ink_env_call_create_builder_state_Salt_RetType.
    
    Module
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_Salt_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple_.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateBuilder
          E
          ContractRef
          CodeHash
          GasLimit
          Endowment
          Args
          Salt
          (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
      
      Definition returns
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (ink_env.call.create_builder.CreateBuilder
                E
                ContractRef
                CodeHash
                GasLimit
                Endowment
                Args
                Salt
                (ink_env.call.common.Set (ink_env.call.common.ReturnType R))) :=
        let* α0 := core.default.Default.default tt in
        let* α1 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.create_builder.CreateBuilder.code_hash :=
              self.["code_hash"];
            ink_env.call.create_builder.CreateBuilder.gas_limit :=
              self.["gas_limit"];
            ink_env.call.create_builder.CreateBuilder.endowment :=
              self.["endowment"];
            ink_env.call.create_builder.CreateBuilder.exec_input :=
              self.["exec_input"];
            ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
            ink_env.call.create_builder.CreateBuilder.return_type :=
              ink_env.call.common.Set.Build_t α0;
            ink_env.call.create_builder.CreateBuilder._phantom := α1;
          |}.
      
      Global Instance Method_returns `{H : State.Trait} :
        Notation.Dot "returns" := {
        Notation.dot := returns;
      }.
    End
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_Salt_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple_.
    
    Module
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateBuilder
          E
          ContractRef
          (ink_env.call.common.Set ImplE.Hash)
          GasLimit
          (ink_env.call.common.Set ImplE.Balance)
          (ink_env.call.common.Set
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set Salt)
          (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
      
      Definition params
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (ink_env.call.create_builder.CreateParams
                E
                ContractRef
                Args
                Salt
                RetType) :=
        let* α0 := self.["code_hash"].["value"] in
        let* α1 := self.["gas_limit"].["unwrap_or_else"] (fun  => Pure 0) in
        let* α2 := self.["endowment"].["value"] in
        let* α3 := self.["exec_input"].["value"] in
        let* α4 := self.["salt"].["value"] in
        let* α5 := core.default.Default.default tt in
        let* α6 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.create_builder.CreateParams.code_hash := α0;
            ink_env.call.create_builder.CreateParams.gas_limit := α1;
            ink_env.call.create_builder.CreateParams.endowment := α2;
            ink_env.call.create_builder.CreateParams.exec_input := α3;
            ink_env.call.create_builder.CreateParams.salt_bytes := α4;
            ink_env.call.create_builder.CreateParams._return_type := α5;
            ink_env.call.create_builder.CreateParams._phantom := α6;
          |}.
      
      Global Instance Method_params `{H : State.Trait} :
        Notation.Dot "params" := {
        Notation.dot := params;
      }.
    End
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType.
    
    Module
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_2.
      Definition
        Self
        :=
        ink_env.call.create_builder.CreateBuilder
          E
          ContractRef
          (ink_env.call.common.Set ImplE.Hash)
          GasLimit
          (ink_env.call.common.Set ImplE.Balance)
          (ink_env.call.common.Set
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set Salt)
          (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
      
      Definition instantiate
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              ink_env.call.create_builder.ConstructorReturnType.Output :=
        let* α0 := self.["params"] in
        α0.["instantiate"].
      
      Global Instance Method_instantiate `{H : State.Trait} :
        Notation.Dot "instantiate" := {
        Notation.dot := instantiate;
      }.
      
      Definition try_instantiate
          `{H : State.Trait}
          (self : Self)
          :
            M (H := H)
              (core.result.Result
                (ink_primitives.ConstructorResult
                  ink_env.call.create_builder.ConstructorReturnType.Output)
                ink_env.error.Error) :=
        let* α0 := self.["params"] in
        α0.["try_instantiate"].
      
      Global Instance Method_try_instantiate `{H : State.Trait} :
        Notation.Dot "try_instantiate" := {
        Notation.dot := try_instantiate;
      }.
    End
      Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_2.
  End create_builder.
  
  Module execution_input.
    Module ExecutionInput.
      Record t : Set := {
        selector : ink_env.call.selector.Selector;
        args : Args;
      }.
      
      Global Instance Get_selector : Notation.Dot "selector" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_args : Notation.Dot "args" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End ExecutionInput.
    Definition ExecutionInput : Set := ExecutionInput.t.
    
    Module
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
    Section
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
      Context {Args : Set}.
      
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ink_env.call.execution_input.ExecutionInput Args) :=
        let* α0 := core.clone.Clone.clone (addr_of self.["selector"]) in
        let* α1 := core.clone.Clone.clone (addr_of self.["args"]) in
        Pure
          {|
            ink_env.call.execution_input.ExecutionInput.selector := α0;
            ink_env.call.execution_input.ExecutionInput.args := α1;
          |}.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
    End
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
    
    Module
      Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
    Section
      Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
      Context {Args : Set}.
      
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Definition default
          `{H : State.Trait}
          (_ : unit)
          : M (H := H) (ink_env.call.execution_input.ExecutionInput Args) :=
        let* α0 := core.default.Default.default tt in
        let* α1 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.execution_input.ExecutionInput.selector := α0;
            ink_env.call.execution_input.ExecutionInput.args := α1;
          |}.
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
    Section
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
      Context {Args : Set}.
      
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_struct_field2_finish"]
          f
          "ExecutionInput"
          "selector"
          (addr_of self.["selector"])
          "args"
          (addr_of (addr_of self.["args"])).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
    End
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
    
    Module
      Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList.
      Definition
        Self
        :=
        ink_env.call.execution_input.ExecutionInput
          ink_env.call.execution_input.EmptyArgumentList.
      
      Definition new
          `{H : State.Trait}
          (selector : ink_env.call.selector.Selector)
          : M (H := H) Self :=
        let* α0 := ink_env.call.execution_input.ArgumentList::["empty"] tt in
        Pure {| Self.selector := selector; Self.args := α0; |}.
      
      Global Instance AssociatedFunction_new `{H : State.Trait} :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
      
      Definition push_arg
          `{H : State.Trait}
          (self : Self)
          (arg : T)
          :
            M (H := H)
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument T)
                  ink_env.call.execution_input.EmptyArgumentList)) :=
        let* α0 := self.["args"].["push_arg"] arg in
        Pure
          {|
            ink_env.call.execution_input.ExecutionInput.selector :=
              self.["selector"];
            ink_env.call.execution_input.ExecutionInput.args := α0;
          |}.
      
      Global Instance Method_push_arg `{H : State.Trait} :
        Notation.Dot "push_arg" := {
        Notation.dot := push_arg;
      }.
    End
      Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList.
    
    Module
      Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
      Definition
        Self
        :=
        ink_env.call.execution_input.ExecutionInput
          (ink_env.call.execution_input.ArgumentList
            (ink_env.call.execution_input.Argument Head)
            Rest).
      
      Definition push_arg
          `{H : State.Trait}
          (self : Self)
          (arg : T)
          :
            M (H := H)
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgsList
                  T
                  (ink_env.call.execution_input.ArgsList Head Rest))) :=
        let* α0 := self.["args"].["push_arg"] arg in
        Pure
          {|
            ink_env.call.execution_input.ExecutionInput.selector :=
              self.["selector"];
            ink_env.call.execution_input.ExecutionInput.args := α0;
          |}.
      
      Global Instance Method_push_arg `{H : State.Trait} :
        Notation.Dot "push_arg" := {
        Notation.dot := push_arg;
      }.
    End
      Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    
    Module Impl_ink_env_call_execution_input_ExecutionInput_Args.
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Definition update_selector
          `{H : State.Trait}
          (self : mut_ref Self)
          (selector : ink_env.call.selector.Selector)
          : M (H := H) unit :=
        let* _ := assign self.["selector"] selector in
        Pure tt.
      
      Global Instance Method_update_selector `{H : State.Trait} :
        Notation.Dot "update_selector" := {
        Notation.dot := update_selector;
      }.
    End Impl_ink_env_call_execution_input_ExecutionInput_Args.
    
    Module ArgumentList.
      Record t : Set := {
        head : Head;
        rest : Rest;
      }.
      
      Global Instance Get_head : Notation.Dot "head" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_rest : Notation.Dot "rest" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End ArgumentList.
    Definition ArgumentList : Set := ArgumentList.t.
    
    Module
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Section
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Context {Head Rest : Set}.
      
      Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ink_env.call.execution_input.ArgumentList Head Rest) :=
        let* α0 := core.clone.Clone.clone (addr_of self.["head"]) in
        let* α1 := core.clone.Clone.clone (addr_of self.["rest"]) in
        Pure
          {|
            ink_env.call.execution_input.ArgumentList.head := α0;
            ink_env.call.execution_input.ArgumentList.rest := α1;
          |}.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    End
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    
    Module
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Section
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Context {Head Rest : Set}.
      
      Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
      
      Definition default
          `{H : State.Trait}
          (_ : unit)
          : M (H := H) (ink_env.call.execution_input.ArgumentList Head Rest) :=
        let* α0 := core.default.Default.default tt in
        let* α1 := core.default.Default.default tt in
        Pure
          {|
            ink_env.call.execution_input.ArgumentList.head := α0;
            ink_env.call.execution_input.ArgumentList.rest := α1;
          |}.
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Section
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Context {Head Rest : Set}.
      
      Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_struct_field2_finish"]
          f
          "ArgumentList"
          "head"
          (addr_of self.["head"])
          "rest"
          (addr_of (addr_of self.["rest"])).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    End
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    
    Definition ArgsList : Set :=
      ink_env.call.execution_input.ArgumentList
        (ink_env.call.execution_input.Argument Head)
        Rest.
    
    Module Argument.
      Record t : Set := {
        arg : T;
      }.
      
      Global Instance Get_arg : Notation.Dot "arg" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Argument.
    Definition Argument : Set := Argument.t.
    
    Module Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
    Section Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.execution_input.Argument T.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ink_env.call.execution_input.Argument T) :=
        let* α0 := core.clone.Clone.clone (addr_of self.["arg"]) in
        Pure {| ink_env.call.execution_input.Argument.arg := α0; |}.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
    End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
    Section Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.execution_input.Argument T.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_struct_field1_finish"]
          f
          "Argument"
          "arg"
          (addr_of (addr_of self.["arg"])).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
    End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
    
    Module Impl_ink_env_call_execution_input_Argument_T.
      Definition Self := ink_env.call.execution_input.Argument T.
      
      Definition new `{H : State.Trait} (arg : T) : M (H := H) Self :=
        Pure {| Self.arg := arg; |}.
      
      Global Instance AssociatedFunction_new `{H : State.Trait} :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
    End Impl_ink_env_call_execution_input_Argument_T.
    
    Module ArgumentListEnd.
      Inductive t : Set := Build.
    End ArgumentListEnd.
    Definition ArgumentListEnd := ArgumentListEnd.t.
    
    Module
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
      Definition Self := ink_env.call.execution_input.ArgumentListEnd.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) ink_env.call.execution_input.ArgumentListEnd :=
        Pure ink_env.call.execution_input.ArgumentListEnd.Build.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
    
    Module
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
      Definition Self := ink_env.call.execution_input.ArgumentListEnd.
      
      Definition default
          `{H : State.Trait}
          (_ : unit)
          : M (H := H) ink_env.call.execution_input.ArgumentListEnd :=
        Pure {|  |}.
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
      Definition Self := ink_env.call.execution_input.ArgumentListEnd.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["write_str"] f "ArgumentListEnd".
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
    
    Definition EmptyArgumentList : Set :=
      ink_env.call.execution_input.ArgumentList
        ink_env.call.execution_input.ArgumentListEnd
        ink_env.call.execution_input.ArgumentListEnd.
    
    Module Impl_ink_env_call_execution_input_EmptyArgumentList.
      Definition Self := ink_env.call.execution_input.EmptyArgumentList.
      
      Definition empty
          `{H : State.Trait}
          (_ : unit)
          : M (H := H) ink_env.call.execution_input.EmptyArgumentList :=
        Pure
          {|
            ink_env.call.execution_input.ArgumentList.head :=
              ink_env.call.execution_input.ArgumentListEnd.Build;
            ink_env.call.execution_input.ArgumentList.rest :=
              ink_env.call.execution_input.ArgumentListEnd.Build;
          |}.
      
      Global Instance AssociatedFunction_empty `{H : State.Trait} :
        Notation.DoubleColon Self "empty" := {
        Notation.double_colon := empty;
      }.
      
      Definition push_arg
          `{H : State.Trait}
          (self : Self)
          (arg : T)
          :
            M (H := H)
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument T)
                Self) :=
        let* α0 := ink_env.call.execution_input.Argument::["new"] arg in
        Pure
          {|
            ink_env.call.execution_input.ArgumentList.head := α0;
            ink_env.call.execution_input.ArgumentList.rest := self;
          |}.
      
      Global Instance Method_push_arg `{H : State.Trait} :
        Notation.Dot "push_arg" := {
        Notation.dot := push_arg;
      }.
    End Impl_ink_env_call_execution_input_EmptyArgumentList.
    
    Module
      Impl_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
      Definition
        Self
        :=
        ink_env.call.execution_input.ArgumentList
          (ink_env.call.execution_input.Argument Head)
          Rest.
      
      Definition push_arg
          `{H : State.Trait}
          (self : Self)
          (arg : T)
          :
            M (H := H)
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument T)
                Self) :=
        let* α0 := ink_env.call.execution_input.Argument::["new"] arg in
        Pure
          {|
            ink_env.call.execution_input.ArgumentList.head := α0;
            ink_env.call.execution_input.ArgumentList.rest := self;
          |}.
      
      Global Instance Method_push_arg `{H : State.Trait} :
        Notation.Dot "push_arg" := {
        Notation.dot := push_arg;
      }.
    End
      Impl_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
    Section
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
      Context {T : Set}.
      
      Definition Self := ink_env.call.execution_input.Argument T.
      
      Definition size_hint
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) usize :=
        parity_scale_codec.codec.Encode.size_hint (addr_of self.["arg"]).
      
      Global Instance Method_size_hint `{H : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Definition encode_to
          `{H : State.Trait}
          (self : ref Self)
          (output : mut_ref O)
          : M (H := H) unit :=
        parity_scale_codec.codec.Encode.encode_to (addr_of self.["arg"]) output.
      
      Global Instance Method_encode_to `{H : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
      Definition Self := ink_env.call.execution_input.EmptyArgumentList.
      
      Definition size_hint
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) usize :=
        Pure 0.
      
      Global Instance Method_size_hint `{H : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Definition encode_to
          `{H : State.Trait}
          (self : ref Self)
          (_output : mut_ref O)
          : M (H := H) unit :=
        Pure tt.
      
      Global Instance Method_encode_to `{H : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    Section
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
      Context {Head Rest : Set}.
      
      Definition
        Self
        :=
        ink_env.call.execution_input.ArgumentList
          (ink_env.call.execution_input.Argument Head)
          Rest.
      
      Definition size_hint
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) usize :=
        let* α0 :=
          parity_scale_codec.codec.Encode.size_hint (addr_of self.["head"]) in
        let* α1 :=
          parity_scale_codec.codec.Encode.size_hint (addr_of self.["rest"]) in
        α0.["add"] α1.
      
      Global Instance Method_size_hint `{H : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Definition encode_to
          `{H : State.Trait}
          (self : ref Self)
          (output : mut_ref O)
          : M (H := H) unit :=
        let* _ :=
          parity_scale_codec.codec.Encode.encode_to
            (addr_of self.["rest"])
            output in
        let* _ :=
          parity_scale_codec.codec.Encode.encode_to
            (addr_of self.["head"])
            output in
        Pure tt.
      
      Global Instance Method_encode_to `{H : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
    Section
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
      Context {Args : Set}.
      
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Definition size_hint
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) usize :=
        let* α0 :=
          parity_scale_codec.codec.Encode.size_hint
            (addr_of self.["selector"]) in
        let* α1 :=
          parity_scale_codec.codec.Encode.size_hint (addr_of self.["args"]) in
        α0.["add"] α1.
      
      Global Instance Method_size_hint `{H : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Definition encode_to
          `{H : State.Trait}
          (self : ref Self)
          (output : mut_ref O)
          : M (H := H) unit :=
        let* _ :=
          parity_scale_codec.codec.Encode.encode_to
            (addr_of self.["selector"])
            output in
        let* _ :=
          parity_scale_codec.codec.Encode.encode_to
            (addr_of self.["args"])
            output in
        Pure tt.
      
      Global Instance Method_encode_to `{H : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
  End execution_input.
  
  Module selector.
    Module Selector.
      Record t : Set := {
        bytes : list u8;
      }.
      
      Global Instance Get_bytes : Notation.Dot "bytes" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Selector.
    Definition Selector : Set := Selector.t.
    
    Module Impl_core_default_Default_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Definition default
          `{H : State.Trait}
          (_ : unit)
          : M (H := H) ink_env.call.selector.Selector :=
        let* α0 := core.default.Default.default tt in
        Pure {| ink_env.call.selector.Selector.bytes := α0; |}.
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End Impl_core_default_Default_for_ink_env_call_selector_Selector.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
        string -> Array_u8 -> 
        M (H := H) core.fmt.Result.
      
      Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
        core.fmt.Formatter "debug_struct_field1_finish" := {
        Notation.double_colon := debug_struct_field1_finish; }.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_struct_field1_finish"]
          f
          "Selector"
          "bytes"
          (addr_of (addr_of self.["bytes"])).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
    
    Module Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Global Instance I : core.marker.Copy.Trait Self :=
        core.marker.Copy.Build_Trait _.
    End Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
    
    Module Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) ink_env.call.selector.Selector :=
        let _ := tt in
        self.["deref"].
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
        core.marker.StructuralPartialEq.Build_Trait _.
    End Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
    
    Module Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Definition eq
          `{H : State.Trait}
          (self : ref Self)
          (other : ref ink_env.call.selector.Selector)
          : M (H := H) bool :=
        self.["bytes"].["eq"] other.["bytes"].
      
      Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I : core.cmp.PartialEq.Trait Self := {
        core.cmp.PartialEq.eq `{H : State.Trait} := eq;
      }.
    End Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
    
    Module Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Global Instance I : core.marker.StructuralEq.Trait Self :=
        core.marker.StructuralEq.Build_Trait _.
    End Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
    
    Module Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Definition assert_receiver_is_total_eq
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) unit :=
        let _ := tt in
        Pure tt.
      
      Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
    End Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
    
    Module Impl_core_convert_From_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Definition from
          `{H : State.Trait}
          (original : list u8)
          : M (H := H) ink_env.call.selector.Selector :=
        Pure {| ink_env.call.selector.Selector.bytes := original; |}.
      
      Global Instance AssociatedFunction_from `{H : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I : core.convert.From.Trait Self (T := list u8) := {
        core.convert.From.from `{H : State.Trait} := from;
      }.
    End Impl_core_convert_From_for_ink_env_call_selector_Selector.
    
    Module Impl_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Definition new `{H : State.Trait} (bytes : list u8) : M (H := H) Self :=
        Pure {| Self.bytes := bytes; |}.
      
      Global Instance AssociatedFunction_new `{H : State.Trait} :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
      
      Definition to_bytes
          `{H : State.Trait}
          (self : Self)
          : M (H := H) list u8 :=
        Pure self.["bytes"].
      
      Global Instance Method_to_bytes `{H : State.Trait} :
        Notation.Dot "to_bytes" := {
        Notation.dot := to_bytes;
      }.
    End Impl_ink_env_call_selector_Selector.
  End selector.
  
  Module utils.
    
  End utils.
End call.

Module call_builder.
  Module CallParams.
    Record t : Set := {
      call_type : CallType;
      call_flags : ink_env.backend.CallFlags;
      _return_type : ink_env.call.common.ReturnType R;
      exec_input : ink_env.call.execution_input.ExecutionInput Args;
      _phantom : core.marker.PhantomData (unit -> E);
    }.
    
    Global Instance Get_call_type : Notation.Dot "call_type" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_call_flags : Notation.Dot "call_flags" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get__return_type : Notation.Dot "_return_type" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
  End CallParams.
  Definition CallParams : Set := CallParams.t.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
  Section
    Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
    Context {E CallType Args R : Set}.
    
    Definition Self := ink_env.call.call_builder.CallParams E CallType Args R.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field5_finish"]
        f
        "CallParams"
        "call_type"
        (addr_of self.["call_type"])
        "call_flags"
        (addr_of self.["call_flags"])
        "_return_type"
        (addr_of self.["_return_type"])
        "exec_input"
        (addr_of self.["exec_input"])
        "_phantom"
        (addr_of (addr_of self.["_phantom"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
  End
    Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
  
  Module Impl_ink_env_call_call_builder_CallParams_E_CallType_Args_R_2.
    Definition Self := ink_env.call.call_builder.CallParams E CallType Args R.
    
    Definition call_flags
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref ink_env.backend.CallFlags) :=
      Pure (addr_of self.["call_flags"]).
    
    Global Instance Method_call_flags `{H : State.Trait} :
      Notation.Dot "call_flags" := {
      Notation.dot := call_flags;
    }.
    
    Definition exec_input
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref (ink_env.call.execution_input.ExecutionInput Args)) :=
      Pure (addr_of self.["exec_input"]).
    
    Global Instance Method_exec_input `{H : State.Trait} :
      Notation.Dot "exec_input" := {
      Notation.dot := exec_input;
    }.
  End Impl_ink_env_call_call_builder_CallParams_E_CallType_Args_R_2.
  
  Module
    Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_3.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallParams
        E
        (ink_env.call.call_builder.Call E)
        Args
        R.
    
    Definition callee
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref ImplE.AccountId) :=
      Pure (addr_of self.["call_type"].["callee"]).
    
    Global Instance Method_callee `{H : State.Trait} :
      Notation.Dot "callee" := {
      Notation.dot := callee;
    }.
    
    Definition gas_limit
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.types.Gas :=
      Pure self.["call_type"].["gas_limit"].
    
    Global Instance Method_gas_limit `{H : State.Trait} :
      Notation.Dot "gas_limit" := {
      Notation.dot := gas_limit;
    }.
    
    Definition transferred_value
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref ImplE.Balance) :=
      Pure (addr_of self.["call_type"].["transferred_value"]).
    
    Global Instance Method_transferred_value `{H : State.Trait} :
      Notation.Dot "transferred_value" := {
      Notation.dot := transferred_value;
    }.
  End
    Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_3.
  
  Module
    Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_3.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallParams
        E
        (ink_env.call.call_builder.DelegateCall E)
        Args
        R.
    
    Definition code_hash
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref ImplE.Hash) :=
      Pure (addr_of self.["call_type"].["code_hash"]).
    
    Global Instance Method_code_hash `{H : State.Trait} :
      Notation.Dot "code_hash" := {
      Notation.dot := code_hash;
    }.
  End
    Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_3.
  
  Module
    Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_4.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallParams
        E
        (ink_env.call.call_builder.Call E)
        Args
        R.
    
    Definition invoke `{H : State.Trait} (self : ref Self) : M (H := H) R :=
      let* α0 := ink_env.api.invoke_contract self in
      let* α1 :=
        α0.["unwrap_or_else"]
          (fun env_error =>
            let* α0 := format_argument::["new_debug"] (addr_of env_error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Cross-contract call failed with " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      α1.["unwrap_or_else"]
        (fun lang_error =>
          let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Cross-contract call failed with " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_invoke `{H : State.Trait} :
      Notation.Dot "invoke" := {
      Notation.dot := invoke;
    }.
    
    Definition try_invoke
        `{H : State.Trait}
        (self : ref Self)
        :
          M (H := H)
            (core.result.Result
              (ink_primitives.MessageResult R)
              ink_env.error.Error) :=
      ink_env.api.invoke_contract self.
    
    Global Instance Method_try_invoke `{H : State.Trait} :
      Notation.Dot "try_invoke" := {
      Notation.dot := try_invoke;
    }.
  End
    Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_4.
  
  Module
    Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_4.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallParams
        E
        (ink_env.call.call_builder.DelegateCall E)
        Args
        R.
    
    Definition invoke `{H : State.Trait} (self : ref Self) : M (H := H) R :=
      let* α0 := ink_env.api.invoke_contract_delegate self in
      let* α1 :=
        α0.["unwrap_or_else"]
          (fun env_error =>
            let* α0 := format_argument::["new_debug"] (addr_of env_error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Cross-contract call failed with " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      α1.["unwrap_or_else"]
        (fun lang_error =>
          let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Cross-contract call failed with " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_invoke `{H : State.Trait} :
      Notation.Dot "invoke" := {
      Notation.dot := invoke;
    }.
    
    Definition try_invoke
        `{H : State.Trait}
        (self : ref Self)
        :
          M (H := H)
            (core.result.Result
              (ink_primitives.MessageResult R)
              ink_env.error.Error) :=
      ink_env.api.invoke_contract_delegate self.
    
    Global Instance Method_try_invoke `{H : State.Trait} :
      Notation.Dot "try_invoke" := {
      Notation.dot := try_invoke;
    }.
  End
    Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_4.
  
  Definition build_call
      `{H : State.Trait}
      {E : Set}
      `{ink_env.types.Environment.Trait E}
      (_ : unit)
      :
        M (H := H)
          (ink_env.call.call_builder.CallBuilder
            E
            (ink_env.call.common.Unset (ink_env.call.call_builder.Call E))
            (ink_env.call.common.Unset
              (ink_env.call.execution_input.ExecutionInput
                ink_env.call.execution_input.EmptyArgumentList))
            (ink_env.call.common.Unset
              (ink_env.call.common.ReturnType unit))) :=
    let* α0 := core.default.Default.default tt in
    let* α1 := core.default.Default.default tt in
    let* α2 := core.default.Default.default tt in
    let* α3 := core.default.Default.default tt in
    let* α4 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type := α0;
        ink_env.call.call_builder.CallBuilder.call_flags := α1;
        ink_env.call.call_builder.CallBuilder.exec_input := α2;
        ink_env.call.call_builder.CallBuilder.return_type := α3;
        ink_env.call.call_builder.CallBuilder._phantom := α4;
      |}.
  
  Module Call.
    Record t : Set := {
      callee : ImplE.AccountId;
      gas_limit : ink_env.types.Gas;
      transferred_value : ImplE.Balance;
    }.
    
    Global Instance Get_callee : Notation.Dot "callee" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_transferred_value :
        Notation.Dot "transferred_value" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
  End Call.
  Definition Call : Set := Call.t.
  
  Module Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
  Section Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
    Context {E : Set}.
    
    Definition Self := ink_env.call.call_builder.Call E.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ink_env.call.call_builder.Call E) :=
      let* α0 := core.clone.Clone.clone (addr_of self.["callee"]) in
      let* α1 := core.clone.Clone.clone (addr_of self.["gas_limit"]) in
      let* α2 := core.clone.Clone.clone (addr_of self.["transferred_value"]) in
      Pure
        {|
          ink_env.call.call_builder.Call.callee := α0;
          ink_env.call.call_builder.Call.gas_limit := α1;
          ink_env.call.call_builder.Call.transferred_value := α2;
        |}.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
  End Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
  
  Module Impl_ink_env_call_call_builder_Call_E_3.
    Definition Self := ink_env.call.call_builder.Call E.
    
    Definition new
        `{H : State.Trait}
        (callee : ImplE.AccountId)
        : M (H := H) Self :=
      let* α0 := core.default.Default.default tt in
      let* α1 := ImplE.Balance::["zero"] tt in
      Pure
        {|
          Self.callee := callee;
          Self.gas_limit := α0;
          Self.transferred_value := α1;
        |}.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_ink_env_call_call_builder_Call_E_3.
  
  Module Impl_ink_env_call_call_builder_Call_E_4.
    Definition Self := ink_env.call.call_builder.Call E.
    
    Definition gas_limit
        `{H : State.Trait}
        (self : Self)
        (gas_limit : ink_env.types.Gas)
        : M (H := H) Self :=
      Pure
        {|
          ink_env.call.call_builder.Call.callee := self.["callee"];
          ink_env.call.call_builder.Call.gas_limit := gas_limit;
          ink_env.call.call_builder.Call.transferred_value :=
            self.["transferred_value"];
        |}.
    
    Global Instance Method_gas_limit `{H : State.Trait} :
      Notation.Dot "gas_limit" := {
      Notation.dot := gas_limit;
    }.
    
    Definition transferred_value
        `{H : State.Trait}
        (self : Self)
        (transferred_value : ImplE.Balance)
        : M (H := H) Self :=
      Pure
        {|
          ink_env.call.call_builder.Call.callee := self.["callee"];
          ink_env.call.call_builder.Call.gas_limit := self.["gas_limit"];
          ink_env.call.call_builder.Call.transferred_value := transferred_value;
        |}.
    
    Global Instance Method_transferred_value `{H : State.Trait} :
      Notation.Dot "transferred_value" := {
      Notation.dot := transferred_value;
    }.
  End Impl_ink_env_call_call_builder_Call_E_4.
  
  Module DelegateCall.
    Record t : Set := {
      code_hash : ImplE.Hash;
    }.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End DelegateCall.
  Definition DelegateCall : Set := DelegateCall.t.
  
  Module Impl_ink_env_call_call_builder_DelegateCall_E_3.
    Definition Self := ink_env.call.call_builder.DelegateCall E.
    
    Definition new
        `{H : State.Trait}
        (code_hash : ImplE.Hash)
        : M (H := H) Self :=
      Pure {| ink_env.call.call_builder.DelegateCall.code_hash := code_hash; |}.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_ink_env_call_call_builder_DelegateCall_E_3.
  
  Module Impl_ink_env_call_call_builder_DelegateCall_E_4.
    Definition Self := ink_env.call.call_builder.DelegateCall E.
    
    Definition code_hash
        `{H : State.Trait}
        (self : Self)
        (code_hash : ImplE.Hash)
        : M (H := H) Self :=
      Pure {| ink_env.call.call_builder.DelegateCall.code_hash := code_hash; |}.
    
    Global Instance Method_code_hash `{H : State.Trait} :
      Notation.Dot "code_hash" := {
      Notation.dot := code_hash;
    }.
  End Impl_ink_env_call_call_builder_DelegateCall_E_4.
  
  Module CallBuilder.
    Record t : Set := {
      call_type : CallType;
      call_flags : ink_env.backend.CallFlags;
      exec_input : Args;
      return_type : RetType;
      _phantom : core.marker.PhantomData (unit -> E);
    }.
    
    Global Instance Get_call_type : Notation.Dot "call_type" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_call_flags : Notation.Dot "call_flags" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_return_type : Notation.Dot "return_type" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
  End CallBuilder.
  Definition CallBuilder : Set := CallBuilder.t.
  
  Module
    Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
  Section
    Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
    Context {E CallType Args RetType : Set}.
    
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder E CallType Args RetType.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        :
          M (H := H)
            (ink_env.call.call_builder.CallBuilder E CallType Args RetType) :=
      let* α0 := core.clone.Clone.clone (addr_of self.["call_type"]) in
      let* α1 := core.clone.Clone.clone (addr_of self.["call_flags"]) in
      let* α2 := core.clone.Clone.clone (addr_of self.["exec_input"]) in
      let* α3 := core.clone.Clone.clone (addr_of self.["return_type"]) in
      let* α4 := core.clone.Clone.clone (addr_of self.["_phantom"]) in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type := α0;
          ink_env.call.call_builder.CallBuilder.call_flags := α1;
          ink_env.call.call_builder.CallBuilder.exec_input := α2;
          ink_env.call.call_builder.CallBuilder.return_type := α3;
          ink_env.call.call_builder.CallBuilder._phantom := α4;
        |}.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End
    Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
  End
    Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_3.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Unset CallType)
        Args
        RetType.
    
    Definition call_type
        `{H : State.Trait}
        (self : Self)
        (call_type : NewCallType)
        :
          M (H := H)
            (ink_env.call.call_builder.CallBuilder
              E
              (ink_env.call.common.Set NewCallType)
              Args
              RetType) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type :=
            ink_env.call.common.Set.Build_t call_type;
          ink_env.call.call_builder.CallBuilder.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.call_builder.CallBuilder.return_type :=
            self.["return_type"];
          ink_env.call.call_builder.CallBuilder._phantom := α0;
        |}.
    
    Global Instance Method_call_type `{H : State.Trait} :
      Notation.Dot "call_type" := {
      Notation.dot := call_type;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_3.
  
  Module Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder E CallType Args RetType.
    
    Definition call_flags
        `{H : State.Trait}
        (self : Self)
        (call_flags : ink_env.backend.CallFlags)
        :
          M (H := H)
            (ink_env.call.call_builder.CallBuilder E CallType Args RetType) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type := self.["call_type"];
          ink_env.call.call_builder.CallBuilder.call_flags := call_flags;
          ink_env.call.call_builder.CallBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.call_builder.CallBuilder.return_type :=
            self.["return_type"];
          ink_env.call.call_builder.CallBuilder._phantom := α0;
        |}.
    
    Global Instance Method_call_flags `{H : State.Trait} :
      Notation.Dot "call_flags" := {
      Notation.dot := call_flags;
    }.
  End Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        CallType
        Args
        (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
    
    Definition returns
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.call.call_builder.CallBuilder
              E
              CallType
              Args
              (ink_env.call.common.Set (ink_env.call.common.ReturnType R))) :=
      let* α0 := core.default.Default.default tt in
      let* α1 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type := self.["call_type"];
          ink_env.call.call_builder.CallBuilder.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.call_builder.CallBuilder.return_type :=
            ink_env.call.common.Set.Build_t α0;
          ink_env.call.call_builder.CallBuilder._phantom := α1;
        |}.
    
    Global Instance Method_returns `{H : State.Trait} :
      Notation.Dot "returns" := {
      Notation.dot := returns;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_CallType_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_RetType_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        CallType
        (ink_env.call.common.Unset
          (ink_env.call.execution_input.ExecutionInput
            ink_env.call.execution_input.EmptyArgumentList))
        RetType.
    
    Definition exec_input
        `{H : State.Trait}
        (self : Self)
        (exec_input : ink_env.call.execution_input.ExecutionInput Args)
        :
          M (H := H)
            (ink_env.call.call_builder.CallBuilder
              E
              CallType
              (ink_env.call.common.Set
                (ink_env.call.execution_input.ExecutionInput Args))
              RetType) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type := self.["call_type"];
          ink_env.call.call_builder.CallBuilder.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallBuilder.exec_input :=
            ink_env.call.common.Set.Build_t exec_input;
          ink_env.call.call_builder.CallBuilder.return_type :=
            self.["return_type"];
          ink_env.call.call_builder.CallBuilder._phantom := α0;
        |}.
    
    Global Instance Method_exec_input `{H : State.Trait} :
      Notation.Dot "exec_input" := {
      Notation.dot := exec_input;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_CallType_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_RetType_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_4.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Unset CallType)
        Args
        RetType.
    
    Definition call
        `{H : State.Trait}
        (self : Self)
        (callee : ImplE.AccountId)
        :
          M (H := H)
            (ink_env.call.call_builder.CallBuilder
              E
              (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
              Args
              RetType) :=
      let* α0 := ink_env.call.call_builder.Call::["new"] callee in
      let* α1 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type :=
            ink_env.call.common.Set.Build_t α0;
          ink_env.call.call_builder.CallBuilder.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.call_builder.CallBuilder.return_type :=
            self.["return_type"];
          ink_env.call.call_builder.CallBuilder._phantom := α1;
        |}.
    
    Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
      Notation.dot := call;
    }.
    
    Definition delegate
        `{H : State.Trait}
        (self : Self)
        (code_hash : ImplE.Hash)
        :
          M (H := H)
            (ink_env.call.call_builder.CallBuilder
              E
              (ink_env.call.common.Set
                (ink_env.call.call_builder.DelegateCall E))
              Args
              RetType) :=
      let* α0 := ink_env.call.call_builder.DelegateCall::["new"] code_hash in
      let* α1 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type :=
            ink_env.call.common.Set.Build_t α0;
          ink_env.call.call_builder.CallBuilder.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.call_builder.CallBuilder.return_type :=
            self.["return_type"];
          ink_env.call.call_builder.CallBuilder._phantom := α1;
        |}.
    
    Global Instance Method_delegate `{H : State.Trait} :
      Notation.Dot "delegate" := {
      Notation.dot := delegate;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_4.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_Args_RetType_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
        Args
        RetType.
    
    Definition gas_limit
        `{H : State.Trait}
        (self : Self)
        (gas_limit : ink_env.types.Gas)
        : M (H := H) Self :=
      let* call_type := self.["call_type"].["value"] in
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type :=
            ink_env.call.common.Set.Build_t
              {|
                ink_env.call.call_builder.Call.callee := call_type.["callee"];
                ink_env.call.call_builder.Call.gas_limit := gas_limit;
                ink_env.call.call_builder.Call.transferred_value :=
                  call_type.["transferred_value"];
              |};
          ink_env.call.call_builder.CallBuilder.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.call_builder.CallBuilder.return_type :=
            self.["return_type"];
          ink_env.call.call_builder.CallBuilder._phantom := α0;
        |}.
    
    Global Instance Method_gas_limit `{H : State.Trait} :
      Notation.Dot "gas_limit" := {
      Notation.dot := gas_limit;
    }.
    
    Definition transferred_value
        `{H : State.Trait}
        (self : Self)
        (transferred_value : ImplE.Balance)
        : M (H := H) Self :=
      let* call_type := self.["call_type"].["value"] in
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type :=
            ink_env.call.common.Set.Build_t
              {|
                ink_env.call.call_builder.Call.callee := call_type.["callee"];
                ink_env.call.call_builder.Call.gas_limit :=
                  call_type.["gas_limit"];
                ink_env.call.call_builder.Call.transferred_value :=
                  transferred_value;
              |};
          ink_env.call.call_builder.CallBuilder.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.call_builder.CallBuilder.return_type :=
            self.["return_type"];
          ink_env.call.call_builder.CallBuilder._phantom := α0;
        |}.
    
    Global Instance Method_transferred_value `{H : State.Trait} :
      Notation.Dot "transferred_value" := {
      Notation.dot := transferred_value;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_Args_RetType_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_Args_RetType_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
        Args
        RetType.
    
    Definition code_hash
        `{H : State.Trait}
        (self : Self)
        (code_hash : ImplE.Hash)
        : M (H := H) Self :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallBuilder.call_type :=
            ink_env.call.common.Set.Build_t
              {| ink_env.call.call_builder.DelegateCall.code_hash := code_hash;
              |};
          ink_env.call.call_builder.CallBuilder.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.call_builder.CallBuilder.return_type :=
            self.["return_type"];
          ink_env.call.call_builder.CallBuilder._phantom := α0;
        |}.
    
    Global Instance Method_code_hash `{H : State.Trait} :
      Notation.Dot "code_hash" := {
      Notation.dot := code_hash;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_Args_RetType_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
        (ink_env.call.common.Set
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
    
    Definition params
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.call.call_builder.CallParams
              E
              (ink_env.call.call_builder.Call E)
              Args
              RetType) :=
      let* α0 := self.["call_type"].["value"] in
      let* α1 := core.default.Default.default tt in
      let* α2 := self.["exec_input"].["value"] in
      Pure
        {|
          ink_env.call.call_builder.CallParams.call_type := α0;
          ink_env.call.call_builder.CallParams.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallParams._return_type := α1;
          ink_env.call.call_builder.CallParams.exec_input := α2;
          ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
        |}.
    
    Global Instance Method_params `{H : State.Trait} :
      Notation.Dot "params" := {
      Notation.dot := params;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
        (ink_env.call.common.Set
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
    
    Definition params
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.call.call_builder.CallParams
              E
              (ink_env.call.call_builder.DelegateCall E)
              Args
              RetType) :=
      let* α0 := self.["call_type"].["value"] in
      let* α1 := core.default.Default.default tt in
      let* α2 := self.["exec_input"].["value"] in
      Pure
        {|
          ink_env.call.call_builder.CallParams.call_type := α0;
          ink_env.call.call_builder.CallParams.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallParams._return_type := α1;
          ink_env.call.call_builder.CallParams.exec_input := α2;
          ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
        |}.
    
    Global Instance Method_params `{H : State.Trait} :
      Notation.Dot "params" := {
      Notation.dot := params;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
        (ink_env.call.common.Unset
          (ink_env.call.execution_input.ExecutionInput
            ink_env.call.execution_input.EmptyArgumentList))
        (ink_env.call.common.Unset RetType).
    
    Definition params
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.call.call_builder.CallParams
              E
              (ink_env.call.call_builder.Call E)
              ink_env.call.execution_input.EmptyArgumentList
              unit) :=
      let* α0 := self.["call_type"].["value"] in
      let* α1 := core.default.Default.default tt in
      let* α2 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallParams.call_type := α0;
          ink_env.call.call_builder.CallParams.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallParams._return_type := α1;
          ink_env.call.call_builder.CallParams.exec_input := α2;
          ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
        |}.
    
    Global Instance Method_params `{H : State.Trait} :
      Notation.Dot "params" := {
      Notation.dot := params;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
        (ink_env.call.common.Unset
          (ink_env.call.execution_input.ExecutionInput
            ink_env.call.execution_input.EmptyArgumentList))
        (ink_env.call.common.Unset RetType).
    
    Definition params
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.call.call_builder.CallParams
              E
              (ink_env.call.call_builder.DelegateCall E)
              ink_env.call.execution_input.EmptyArgumentList
              unit) :=
      let* α0 := self.["call_type"].["value"] in
      let* α1 := core.default.Default.default tt in
      let* α2 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.call_builder.CallParams.call_type := α0;
          ink_env.call.call_builder.CallParams.call_flags :=
            self.["call_flags"];
          ink_env.call.call_builder.CallParams._return_type := α1;
          ink_env.call.call_builder.CallParams.exec_input := α2;
          ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
        |}.
    
    Global Instance Method_params `{H : State.Trait} :
      Notation.Dot "params" := {
      Notation.dot := params;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
        (ink_env.call.common.Unset
          (ink_env.call.execution_input.ExecutionInput
            ink_env.call.execution_input.EmptyArgumentList))
        (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
    
    Definition invoke `{H : State.Trait} (self : Self) : M (H := H) unit :=
      let* α0 := self.["params"] in
      α0.["invoke"].
    
    Global Instance Method_invoke `{H : State.Trait} :
      Notation.Dot "invoke" := {
      Notation.dot := invoke;
    }.
    
    Definition try_invoke
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (core.result.Result
              (ink_primitives.MessageResult unit)
              ink_env.error.Error) :=
      let* α0 := self.["params"] in
      α0.["try_invoke"].
    
    Global Instance Method_try_invoke `{H : State.Trait} :
      Notation.Dot "try_invoke" := {
      Notation.dot := try_invoke;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
        (ink_env.call.common.Unset
          (ink_env.call.execution_input.ExecutionInput
            ink_env.call.execution_input.EmptyArgumentList))
        (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
    
    Definition invoke `{H : State.Trait} (self : Self) : M (H := H) unit :=
      let* α0 := self.["params"] in
      α0.["invoke"].
    
    Global Instance Method_invoke `{H : State.Trait} :
      Notation.Dot "invoke" := {
      Notation.dot := invoke;
    }.
    
    Definition try_invoke
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (core.result.Result
              (ink_primitives.MessageResult unit)
              ink_env.error.Error) :=
      let* α0 := self.["params"] in
      α0.["try_invoke"].
    
    Global Instance Method_try_invoke `{H : State.Trait} :
      Notation.Dot "try_invoke" := {
      Notation.dot := try_invoke;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
        (ink_env.call.common.Set
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set (ink_env.call.common.ReturnType R)).
    
    Definition invoke `{H : State.Trait} (self : Self) : M (H := H) R :=
      let* α0 := self.["params"] in
      α0.["invoke"].
    
    Global Instance Method_invoke `{H : State.Trait} :
      Notation.Dot "invoke" := {
      Notation.dot := invoke;
    }.
    
    Definition try_invoke
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (core.result.Result
              (ink_primitives.MessageResult R)
              ink_env.error.Error) :=
      let* α0 := self.["params"] in
      α0.["try_invoke"].
    
    Global Instance Method_try_invoke `{H : State.Trait} :
      Notation.Dot "try_invoke" := {
      Notation.dot := try_invoke;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R_2.
  
  Module
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R_2.
    Definition
      Self
      :=
      ink_env.call.call_builder.CallBuilder
        E
        (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
        (ink_env.call.common.Set
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set (ink_env.call.common.ReturnType R)).
    
    Definition invoke `{H : State.Trait} (self : Self) : M (H := H) R :=
      let* α0 := self.["params"] in
      α0.["invoke"].
    
    Global Instance Method_invoke `{H : State.Trait} :
      Notation.Dot "invoke" := {
      Notation.dot := invoke;
    }.
    
    Definition try_invoke
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (core.result.Result
              (ink_primitives.MessageResult R)
              ink_env.error.Error) :=
      let* α0 := self.["params"] in
      α0.["try_invoke"].
    
    Global Instance Method_try_invoke `{H : State.Trait} :
      Notation.Dot "try_invoke" := {
      Notation.dot := try_invoke;
    }.
  End
    Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R_2.
End call_builder.

Module CallParams.
  Record t : Set := {
    call_type : CallType;
    call_flags : ink_env.backend.CallFlags;
    _return_type : ink_env.call.common.ReturnType R;
    exec_input : ink_env.call.execution_input.ExecutionInput Args;
    _phantom : core.marker.PhantomData (unit -> E);
  }.
  
  Global Instance Get_call_type : Notation.Dot "call_type" := {
    Notation.dot '(Build_t x0 _ _ _ _) := x0;
  }.
  Global Instance Get_call_flags : Notation.Dot "call_flags" := {
    Notation.dot '(Build_t _ x1 _ _ _) := x1;
  }.
  Global Instance Get__return_type : Notation.Dot "_return_type" := {
    Notation.dot '(Build_t _ _ x2 _ _) := x2;
  }.
  Global Instance Get_exec_input : Notation.Dot "exec_input" := {
    Notation.dot '(Build_t _ _ _ x3 _) := x3;
  }.
  Global Instance Get__phantom : Notation.Dot "_phantom" := {
    Notation.dot '(Build_t _ _ _ _ x4) := x4;
  }.
End CallParams.
Definition CallParams : Set := CallParams.t.

Module
  Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
Section
  Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
  Context {E CallType Args R : Set}.
  
  Definition Self := ink_env.call.call_builder.CallParams E CallType Args R.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field5_finish"]
      f
      "CallParams"
      "call_type"
      (addr_of self.["call_type"])
      "call_flags"
      (addr_of self.["call_flags"])
      "_return_type"
      (addr_of self.["_return_type"])
      "exec_input"
      (addr_of self.["exec_input"])
      "_phantom"
      (addr_of (addr_of self.["_phantom"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End
  Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.
End
  Impl_core_fmt_Debug_for_ink_env_call_call_builder_CallParams_E_CallType_Args_R.

Module Impl_ink_env_call_call_builder_CallParams_E_CallType_Args_R_3.
  Definition Self := ink_env.call.call_builder.CallParams E CallType Args R.
  
  Definition call_flags
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref ink_env.backend.CallFlags) :=
    Pure (addr_of self.["call_flags"]).
  
  Global Instance Method_call_flags `{H : State.Trait} :
    Notation.Dot "call_flags" := {
    Notation.dot := call_flags;
  }.
  
  Definition exec_input
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref (ink_env.call.execution_input.ExecutionInput Args)) :=
    Pure (addr_of self.["exec_input"]).
  
  Global Instance Method_exec_input `{H : State.Trait} :
    Notation.Dot "exec_input" := {
    Notation.dot := exec_input;
  }.
End Impl_ink_env_call_call_builder_CallParams_E_CallType_Args_R_3.

Module
  Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_5.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallParams
      E
      (ink_env.call.call_builder.Call E)
      Args
      R.
  
  Definition callee
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref ImplE.AccountId) :=
    Pure (addr_of self.["call_type"].["callee"]).
  
  Global Instance Method_callee `{H : State.Trait} : Notation.Dot "callee" := {
    Notation.dot := callee;
  }.
  
  Definition gas_limit
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.types.Gas :=
    Pure self.["call_type"].["gas_limit"].
  
  Global Instance Method_gas_limit `{H : State.Trait} :
    Notation.Dot "gas_limit" := {
    Notation.dot := gas_limit;
  }.
  
  Definition transferred_value
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref ImplE.Balance) :=
    Pure (addr_of self.["call_type"].["transferred_value"]).
  
  Global Instance Method_transferred_value `{H : State.Trait} :
    Notation.Dot "transferred_value" := {
    Notation.dot := transferred_value;
  }.
End
  Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_5.

Module
  Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_5.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallParams
      E
      (ink_env.call.call_builder.DelegateCall E)
      Args
      R.
  
  Definition code_hash
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref ImplE.Hash) :=
    Pure (addr_of self.["call_type"].["code_hash"]).
  
  Global Instance Method_code_hash `{H : State.Trait} :
    Notation.Dot "code_hash" := {
    Notation.dot := code_hash;
  }.
End
  Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_5.

Module
  Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_6.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallParams
      E
      (ink_env.call.call_builder.Call E)
      Args
      R.
  
  Definition invoke `{H : State.Trait} (self : ref Self) : M (H := H) R :=
    let* α0 := ink_env.api.invoke_contract self in
    let* α1 :=
      α0.["unwrap_or_else"]
        (fun env_error =>
          let* α0 := format_argument::["new_debug"] (addr_of env_error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Cross-contract call failed with " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    α1.["unwrap_or_else"]
      (fun lang_error =>
        let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "Cross-contract call failed with " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_invoke `{H : State.Trait} : Notation.Dot "invoke" := {
    Notation.dot := invoke;
  }.
  
  Definition try_invoke
      `{H : State.Trait}
      (self : ref Self)
      :
        M (H := H)
          (core.result.Result
            (ink_primitives.MessageResult R)
            ink_env.error.Error) :=
    ink_env.api.invoke_contract self.
  
  Global Instance Method_try_invoke `{H : State.Trait} :
    Notation.Dot "try_invoke" := {
    Notation.dot := try_invoke;
  }.
End
  Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_Call_E_Args_R_6.

Module
  Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_6.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallParams
      E
      (ink_env.call.call_builder.DelegateCall E)
      Args
      R.
  
  Definition invoke `{H : State.Trait} (self : ref Self) : M (H := H) R :=
    let* α0 := ink_env.api.invoke_contract_delegate self in
    let* α1 :=
      α0.["unwrap_or_else"]
        (fun env_error =>
          let* α0 := format_argument::["new_debug"] (addr_of env_error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Cross-contract call failed with " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    α1.["unwrap_or_else"]
      (fun lang_error =>
        let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "Cross-contract call failed with " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_invoke `{H : State.Trait} : Notation.Dot "invoke" := {
    Notation.dot := invoke;
  }.
  
  Definition try_invoke
      `{H : State.Trait}
      (self : ref Self)
      :
        M (H := H)
          (core.result.Result
            (ink_primitives.MessageResult R)
            ink_env.error.Error) :=
    ink_env.api.invoke_contract_delegate self.
  
  Global Instance Method_try_invoke `{H : State.Trait} :
    Notation.Dot "try_invoke" := {
    Notation.dot := try_invoke;
  }.
End
  Impl_ink_env_call_call_builder_CallParams_E_ink_env_call_call_builder_DelegateCall_E_Args_R_6.

Definition build_call
    `{H : State.Trait}
    {E : Set}
    `{ink_env.types.Environment.Trait E}
    (_ : unit)
    :
      M (H := H)
        (ink_env.call.call_builder.CallBuilder
          E
          (ink_env.call.common.Unset (ink_env.call.call_builder.Call E))
          (ink_env.call.common.Unset
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit))) :=
  let* α0 := core.default.Default.default tt in
  let* α1 := core.default.Default.default tt in
  let* α2 := core.default.Default.default tt in
  let* α3 := core.default.Default.default tt in
  let* α4 := core.default.Default.default tt in
  Pure
    {|
      ink_env.call.call_builder.CallBuilder.call_type := α0;
      ink_env.call.call_builder.CallBuilder.call_flags := α1;
      ink_env.call.call_builder.CallBuilder.exec_input := α2;
      ink_env.call.call_builder.CallBuilder.return_type := α3;
      ink_env.call.call_builder.CallBuilder._phantom := α4;
    |}.

Module Call.
  Record t : Set := {
    callee : ImplE.AccountId;
    gas_limit : ink_env.types.Gas;
    transferred_value : ImplE.Balance;
  }.
  
  Global Instance Get_callee : Notation.Dot "callee" := {
    Notation.dot '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
    Notation.dot '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_transferred_value : Notation.Dot "transferred_value" := {
    Notation.dot '(Build_t _ _ x2) := x2;
  }.
End Call.
Definition Call : Set := Call.t.

Module Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
Section Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
  Context {E : Set}.
  
  Definition Self := ink_env.call.call_builder.Call E.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ink_env.call.call_builder.Call E) :=
    let* α0 := core.clone.Clone.clone (addr_of self.["callee"]) in
    let* α1 := core.clone.Clone.clone (addr_of self.["gas_limit"]) in
    let* α2 := core.clone.Clone.clone (addr_of self.["transferred_value"]) in
    Pure
      {|
        ink_env.call.call_builder.Call.callee := α0;
        ink_env.call.call_builder.Call.gas_limit := α1;
        ink_env.call.call_builder.Call.transferred_value := α2;
      |}.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.
End Impl_core_clone_Clone_for_ink_env_call_call_builder_Call_E.

Module Impl_ink_env_call_call_builder_Call_E_5.
  Definition Self := ink_env.call.call_builder.Call E.
  
  Definition new
      `{H : State.Trait}
      (callee : ImplE.AccountId)
      : M (H := H) Self :=
    let* α0 := core.default.Default.default tt in
    let* α1 := ImplE.Balance::["zero"] tt in
    Pure
      {|
        Self.callee := callee;
        Self.gas_limit := α0;
        Self.transferred_value := α1;
      |}.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_ink_env_call_call_builder_Call_E_5.

Module Impl_ink_env_call_call_builder_Call_E_6.
  Definition Self := ink_env.call.call_builder.Call E.
  
  Definition gas_limit
      `{H : State.Trait}
      (self : Self)
      (gas_limit : ink_env.types.Gas)
      : M (H := H) Self :=
    Pure
      {|
        ink_env.call.call_builder.Call.callee := self.["callee"];
        ink_env.call.call_builder.Call.gas_limit := gas_limit;
        ink_env.call.call_builder.Call.transferred_value :=
          self.["transferred_value"];
      |}.
  
  Global Instance Method_gas_limit `{H : State.Trait} :
    Notation.Dot "gas_limit" := {
    Notation.dot := gas_limit;
  }.
  
  Definition transferred_value
      `{H : State.Trait}
      (self : Self)
      (transferred_value : ImplE.Balance)
      : M (H := H) Self :=
    Pure
      {|
        ink_env.call.call_builder.Call.callee := self.["callee"];
        ink_env.call.call_builder.Call.gas_limit := self.["gas_limit"];
        ink_env.call.call_builder.Call.transferred_value := transferred_value;
      |}.
  
  Global Instance Method_transferred_value `{H : State.Trait} :
    Notation.Dot "transferred_value" := {
    Notation.dot := transferred_value;
  }.
End Impl_ink_env_call_call_builder_Call_E_6.

Module DelegateCall.
  Record t : Set := {
    code_hash : ImplE.Hash;
  }.
  
  Global Instance Get_code_hash : Notation.Dot "code_hash" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End DelegateCall.
Definition DelegateCall : Set := DelegateCall.t.

Module Impl_ink_env_call_call_builder_DelegateCall_E_5.
  Definition Self := ink_env.call.call_builder.DelegateCall E.
  
  Definition new
      `{H : State.Trait}
      (code_hash : ImplE.Hash)
      : M (H := H) Self :=
    Pure {| ink_env.call.call_builder.DelegateCall.code_hash := code_hash; |}.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_ink_env_call_call_builder_DelegateCall_E_5.

Module Impl_ink_env_call_call_builder_DelegateCall_E_6.
  Definition Self := ink_env.call.call_builder.DelegateCall E.
  
  Definition code_hash
      `{H : State.Trait}
      (self : Self)
      (code_hash : ImplE.Hash)
      : M (H := H) Self :=
    Pure {| ink_env.call.call_builder.DelegateCall.code_hash := code_hash; |}.
  
  Global Instance Method_code_hash `{H : State.Trait} :
    Notation.Dot "code_hash" := {
    Notation.dot := code_hash;
  }.
End Impl_ink_env_call_call_builder_DelegateCall_E_6.

Module CallBuilder.
  Record t : Set := {
    call_type : CallType;
    call_flags : ink_env.backend.CallFlags;
    exec_input : Args;
    return_type : RetType;
    _phantom : core.marker.PhantomData (unit -> E);
  }.
  
  Global Instance Get_call_type : Notation.Dot "call_type" := {
    Notation.dot '(Build_t x0 _ _ _ _) := x0;
  }.
  Global Instance Get_call_flags : Notation.Dot "call_flags" := {
    Notation.dot '(Build_t _ x1 _ _ _) := x1;
  }.
  Global Instance Get_exec_input : Notation.Dot "exec_input" := {
    Notation.dot '(Build_t _ _ x2 _ _) := x2;
  }.
  Global Instance Get_return_type : Notation.Dot "return_type" := {
    Notation.dot '(Build_t _ _ _ x3 _) := x3;
  }.
  Global Instance Get__phantom : Notation.Dot "_phantom" := {
    Notation.dot '(Build_t _ _ _ _ x4) := x4;
  }.
End CallBuilder.
Definition CallBuilder : Set := CallBuilder.t.

Module
  Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
Section
  Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
  Context {E CallType Args RetType : Set}.
  
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder E CallType Args RetType.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      :
        M (H := H)
          (ink_env.call.call_builder.CallBuilder E CallType Args RetType) :=
    let* α0 := core.clone.Clone.clone (addr_of self.["call_type"]) in
    let* α1 := core.clone.Clone.clone (addr_of self.["call_flags"]) in
    let* α2 := core.clone.Clone.clone (addr_of self.["exec_input"]) in
    let* α3 := core.clone.Clone.clone (addr_of self.["return_type"]) in
    let* α4 := core.clone.Clone.clone (addr_of self.["_phantom"]) in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type := α0;
        ink_env.call.call_builder.CallBuilder.call_flags := α1;
        ink_env.call.call_builder.CallBuilder.exec_input := α2;
        ink_env.call.call_builder.CallBuilder.return_type := α3;
        ink_env.call.call_builder.CallBuilder._phantom := α4;
      |}.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End
  Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.
End
  Impl_core_clone_Clone_for_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_5.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Unset CallType)
      Args
      RetType.
  
  Definition call_type
      `{H : State.Trait}
      (self : Self)
      (call_type : NewCallType)
      :
        M (H := H)
          (ink_env.call.call_builder.CallBuilder
            E
            (ink_env.call.common.Set NewCallType)
            Args
            RetType) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type :=
          ink_env.call.common.Set.Build_t call_type;
        ink_env.call.call_builder.CallBuilder.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallBuilder.exec_input := self.["exec_input"];
        ink_env.call.call_builder.CallBuilder.return_type :=
          self.["return_type"];
        ink_env.call.call_builder.CallBuilder._phantom := α0;
      |}.
  
  Global Instance Method_call_type `{H : State.Trait} :
    Notation.Dot "call_type" := {
    Notation.dot := call_type;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_5.

Module Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder E CallType Args RetType.
  
  Definition call_flags
      `{H : State.Trait}
      (self : Self)
      (call_flags : ink_env.backend.CallFlags)
      :
        M (H := H)
          (ink_env.call.call_builder.CallBuilder E CallType Args RetType) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type := self.["call_type"];
        ink_env.call.call_builder.CallBuilder.call_flags := call_flags;
        ink_env.call.call_builder.CallBuilder.exec_input := self.["exec_input"];
        ink_env.call.call_builder.CallBuilder.return_type :=
          self.["return_type"];
        ink_env.call.call_builder.CallBuilder._phantom := α0;
      |}.
  
  Global Instance Method_call_flags `{H : State.Trait} :
    Notation.Dot "call_flags" := {
    Notation.dot := call_flags;
  }.
End Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_RetType_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      CallType
      Args
      (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
  
  Definition returns
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.call.call_builder.CallBuilder
            E
            CallType
            Args
            (ink_env.call.common.Set (ink_env.call.common.ReturnType R))) :=
    let* α0 := core.default.Default.default tt in
    let* α1 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type := self.["call_type"];
        ink_env.call.call_builder.CallBuilder.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallBuilder.exec_input := self.["exec_input"];
        ink_env.call.call_builder.CallBuilder.return_type :=
          ink_env.call.common.Set.Build_t α0;
        ink_env.call.call_builder.CallBuilder._phantom := α1;
      |}.
  
  Global Instance Method_returns `{H : State.Trait} :
    Notation.Dot "returns" := {
    Notation.dot := returns;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_CallType_Args_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_CallType_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_RetType_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      CallType
      (ink_env.call.common.Unset
        (ink_env.call.execution_input.ExecutionInput
          ink_env.call.execution_input.EmptyArgumentList))
      RetType.
  
  Definition exec_input
      `{H : State.Trait}
      (self : Self)
      (exec_input : ink_env.call.execution_input.ExecutionInput Args)
      :
        M (H := H)
          (ink_env.call.call_builder.CallBuilder
            E
            CallType
            (ink_env.call.common.Set
              (ink_env.call.execution_input.ExecutionInput Args))
            RetType) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type := self.["call_type"];
        ink_env.call.call_builder.CallBuilder.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallBuilder.exec_input :=
          ink_env.call.common.Set.Build_t exec_input;
        ink_env.call.call_builder.CallBuilder.return_type :=
          self.["return_type"];
        ink_env.call.call_builder.CallBuilder._phantom := α0;
      |}.
  
  Global Instance Method_exec_input `{H : State.Trait} :
    Notation.Dot "exec_input" := {
    Notation.dot := exec_input;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_CallType_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_RetType_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_6.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Unset CallType)
      Args
      RetType.
  
  Definition call
      `{H : State.Trait}
      (self : Self)
      (callee : ImplE.AccountId)
      :
        M (H := H)
          (ink_env.call.call_builder.CallBuilder
            E
            (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
            Args
            RetType) :=
    let* α0 := ink_env.call.call_builder.Call::["new"] callee in
    let* α1 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type :=
          ink_env.call.common.Set.Build_t α0;
        ink_env.call.call_builder.CallBuilder.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallBuilder.exec_input := self.["exec_input"];
        ink_env.call.call_builder.CallBuilder.return_type :=
          self.["return_type"];
        ink_env.call.call_builder.CallBuilder._phantom := α1;
      |}.
  
  Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
    Notation.dot := call;
  }.
  
  Definition delegate
      `{H : State.Trait}
      (self : Self)
      (code_hash : ImplE.Hash)
      :
        M (H := H)
          (ink_env.call.call_builder.CallBuilder
            E
            (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
            Args
            RetType) :=
    let* α0 := ink_env.call.call_builder.DelegateCall::["new"] code_hash in
    let* α1 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type :=
          ink_env.call.common.Set.Build_t α0;
        ink_env.call.call_builder.CallBuilder.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallBuilder.exec_input := self.["exec_input"];
        ink_env.call.call_builder.CallBuilder.return_type :=
          self.["return_type"];
        ink_env.call.call_builder.CallBuilder._phantom := α1;
      |}.
  
  Global Instance Method_delegate `{H : State.Trait} :
    Notation.Dot "delegate" := {
    Notation.dot := delegate;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Unset_CallType_Args_RetType_6.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_Args_RetType_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
      Args
      RetType.
  
  Definition gas_limit
      `{H : State.Trait}
      (self : Self)
      (gas_limit : ink_env.types.Gas)
      : M (H := H) Self :=
    let* call_type := self.["call_type"].["value"] in
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type :=
          ink_env.call.common.Set.Build_t
            {|
              ink_env.call.call_builder.Call.callee := call_type.["callee"];
              ink_env.call.call_builder.Call.gas_limit := gas_limit;
              ink_env.call.call_builder.Call.transferred_value :=
                call_type.["transferred_value"];
            |};
        ink_env.call.call_builder.CallBuilder.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallBuilder.exec_input := self.["exec_input"];
        ink_env.call.call_builder.CallBuilder.return_type :=
          self.["return_type"];
        ink_env.call.call_builder.CallBuilder._phantom := α0;
      |}.
  
  Global Instance Method_gas_limit `{H : State.Trait} :
    Notation.Dot "gas_limit" := {
    Notation.dot := gas_limit;
  }.
  
  Definition transferred_value
      `{H : State.Trait}
      (self : Self)
      (transferred_value : ImplE.Balance)
      : M (H := H) Self :=
    let* call_type := self.["call_type"].["value"] in
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type :=
          ink_env.call.common.Set.Build_t
            {|
              ink_env.call.call_builder.Call.callee := call_type.["callee"];
              ink_env.call.call_builder.Call.gas_limit :=
                call_type.["gas_limit"];
              ink_env.call.call_builder.Call.transferred_value :=
                transferred_value;
            |};
        ink_env.call.call_builder.CallBuilder.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallBuilder.exec_input := self.["exec_input"];
        ink_env.call.call_builder.CallBuilder.return_type :=
          self.["return_type"];
        ink_env.call.call_builder.CallBuilder._phantom := α0;
      |}.
  
  Global Instance Method_transferred_value `{H : State.Trait} :
    Notation.Dot "transferred_value" := {
    Notation.dot := transferred_value;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_Args_RetType_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_Args_RetType_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
      Args
      RetType.
  
  Definition code_hash
      `{H : State.Trait}
      (self : Self)
      (code_hash : ImplE.Hash)
      : M (H := H) Self :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallBuilder.call_type :=
          ink_env.call.common.Set.Build_t
            {| ink_env.call.call_builder.DelegateCall.code_hash := code_hash;
            |};
        ink_env.call.call_builder.CallBuilder.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallBuilder.exec_input := self.["exec_input"];
        ink_env.call.call_builder.CallBuilder.return_type :=
          self.["return_type"];
        ink_env.call.call_builder.CallBuilder._phantom := α0;
      |}.
  
  Global Instance Method_code_hash `{H : State.Trait} :
    Notation.Dot "code_hash" := {
    Notation.dot := code_hash;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_Args_RetType_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
      (ink_env.call.common.Set
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
  
  Definition params
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.Call E)
            Args
            RetType) :=
    let* α0 := self.["call_type"].["value"] in
    let* α1 := core.default.Default.default tt in
    let* α2 := self.["exec_input"].["value"] in
    Pure
      {|
        ink_env.call.call_builder.CallParams.call_type := α0;
        ink_env.call.call_builder.CallParams.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallParams._return_type := α1;
        ink_env.call.call_builder.CallParams.exec_input := α2;
        ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
      |}.
  
  Global Instance Method_params `{H : State.Trait} : Notation.Dot "params" := {
    Notation.dot := params;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
      (ink_env.call.common.Set
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
  
  Definition params
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.DelegateCall E)
            Args
            RetType) :=
    let* α0 := self.["call_type"].["value"] in
    let* α1 := core.default.Default.default tt in
    let* α2 := self.["exec_input"].["value"] in
    Pure
      {|
        ink_env.call.call_builder.CallParams.call_type := α0;
        ink_env.call.call_builder.CallParams.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallParams._return_type := α1;
        ink_env.call.call_builder.CallParams.exec_input := α2;
        ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
      |}.
  
  Global Instance Method_params `{H : State.Trait} : Notation.Dot "params" := {
    Notation.dot := params;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
      (ink_env.call.common.Unset
        (ink_env.call.execution_input.ExecutionInput
          ink_env.call.execution_input.EmptyArgumentList))
      (ink_env.call.common.Unset RetType).
  
  Definition params
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.Call E)
            ink_env.call.execution_input.EmptyArgumentList
            unit) :=
    let* α0 := self.["call_type"].["value"] in
    let* α1 := core.default.Default.default tt in
    let* α2 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallParams.call_type := α0;
        ink_env.call.call_builder.CallParams.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallParams._return_type := α1;
        ink_env.call.call_builder.CallParams.exec_input := α2;
        ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
      |}.
  
  Global Instance Method_params `{H : State.Trait} : Notation.Dot "params" := {
    Notation.dot := params;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
      (ink_env.call.common.Unset
        (ink_env.call.execution_input.ExecutionInput
          ink_env.call.execution_input.EmptyArgumentList))
      (ink_env.call.common.Unset RetType).
  
  Definition params
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.DelegateCall E)
            ink_env.call.execution_input.EmptyArgumentList
            unit) :=
    let* α0 := self.["call_type"].["value"] in
    let* α1 := core.default.Default.default tt in
    let* α2 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.call_builder.CallParams.call_type := α0;
        ink_env.call.call_builder.CallParams.call_flags := self.["call_flags"];
        ink_env.call.call_builder.CallParams._return_type := α1;
        ink_env.call.call_builder.CallParams.exec_input := α2;
        ink_env.call.call_builder.CallParams._phantom := self.["_phantom"];
      |}.
  
  Global Instance Method_params `{H : State.Trait} : Notation.Dot "params" := {
    Notation.dot := params;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_RetType_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
      (ink_env.call.common.Unset
        (ink_env.call.execution_input.ExecutionInput
          ink_env.call.execution_input.EmptyArgumentList))
      (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
  
  Definition invoke `{H : State.Trait} (self : Self) : M (H := H) unit :=
    let* α0 := self.["params"] in
    α0.["invoke"].
  
  Global Instance Method_invoke `{H : State.Trait} : Notation.Dot "invoke" := {
    Notation.dot := invoke;
  }.
  
  Definition try_invoke
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (core.result.Result
            (ink_primitives.MessageResult unit)
            ink_env.error.Error) :=
    let* α0 := self.["params"] in
    α0.["try_invoke"].
  
  Global Instance Method_try_invoke `{H : State.Trait} :
    Notation.Dot "try_invoke" := {
    Notation.dot := try_invoke;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
      (ink_env.call.common.Unset
        (ink_env.call.execution_input.ExecutionInput
          ink_env.call.execution_input.EmptyArgumentList))
      (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
  
  Definition invoke `{H : State.Trait} (self : Self) : M (H := H) unit :=
    let* α0 := self.["params"] in
    α0.["invoke"].
  
  Global Instance Method_invoke `{H : State.Trait} : Notation.Dot "invoke" := {
    Notation.dot := invoke;
  }.
  
  Definition try_invoke
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (core.result.Result
            (ink_primitives.MessageResult unit)
            ink_env.error.Error) :=
    let* α0 := self.["params"] in
    α0.["try_invoke"].
  
  Global Instance Method_try_invoke `{H : State.Trait} :
    Notation.Dot "try_invoke" := {
    Notation.dot := try_invoke;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.Call E))
      (ink_env.call.common.Set
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set (ink_env.call.common.ReturnType R)).
  
  Definition invoke `{H : State.Trait} (self : Self) : M (H := H) R :=
    let* α0 := self.["params"] in
    α0.["invoke"].
  
  Global Instance Method_invoke `{H : State.Trait} : Notation.Dot "invoke" := {
    Notation.dot := invoke;
  }.
  
  Definition try_invoke
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (core.result.Result
            (ink_primitives.MessageResult R)
            ink_env.error.Error) :=
    let* α0 := self.["params"] in
    α0.["try_invoke"].
  
  Global Instance Method_try_invoke `{H : State.Trait} :
    Notation.Dot "try_invoke" := {
    Notation.dot := try_invoke;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_Call_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R_3.

Module
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R_3.
  Definition
    Self
    :=
    ink_env.call.call_builder.CallBuilder
      E
      (ink_env.call.common.Set (ink_env.call.call_builder.DelegateCall E))
      (ink_env.call.common.Set
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set (ink_env.call.common.ReturnType R)).
  
  Definition invoke `{H : State.Trait} (self : Self) : M (H := H) R :=
    let* α0 := self.["params"] in
    α0.["invoke"].
  
  Global Instance Method_invoke `{H : State.Trait} : Notation.Dot "invoke" := {
    Notation.dot := invoke;
  }.
  
  Definition try_invoke
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (core.result.Result
            (ink_primitives.MessageResult R)
            ink_env.error.Error) :=
    let* α0 := self.["params"] in
    α0.["try_invoke"].
  
  Global Instance Method_try_invoke `{H : State.Trait} :
    Notation.Dot "try_invoke" := {
    Notation.dot := try_invoke;
  }.
End
  Impl_ink_env_call_call_builder_CallBuilder_E_ink_env_call_common_Set_ink_env_call_call_builder_DelegateCall_E_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_ink_env_call_common_ReturnType_R_3.

Module common.
  Module ReturnType.
    Record t : Set := { _ : core.marker.PhantomData (unit -> T);}.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ReturnType.
  Definition ReturnType := ReturnType.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
  Section Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.ReturnType T.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "ReturnType"
        (addr_of (addr_of (self.[0]))).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
  End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
  
  Module Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
  Section Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.ReturnType T.
    
    Definition clone `{H : State.Trait} (self : ref Self) : M (H := H) Self :=
      let* α0 := core.default.Default.default tt in
      Self α0.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
  End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
  
  Module Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
  Section Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.ReturnType T.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
  End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
  
  Module Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
  Section Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.ReturnType T.
    
    Definition default `{H : State.Trait} (_ : unit) : M (H := H) Self :=
      let* α0 := core.default.Default.default tt in
      Self α0.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
  End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
  
  Module Set.
    Record t : Set := { _ : T;}.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Set.
  Definition Set := Set.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
  Section Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Set T.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "Set"
        (addr_of (addr_of (self.[0]))).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
  End Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
  
  Module Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
  Section Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Set T.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
  End Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
  
  Module Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
  Section Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Set T.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ink_env.call.common.Set T) :=
      let* α0 := core.clone.Clone.clone (addr_of (self.[0])) in
      Pure (ink_env.call.common.Set.Build_t α0).
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
  End Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
  
  Module Impl_ink_env_call_common_Set_T_2.
    Definition Self := ink_env.call.common.Set T.
    
    Definition value `{H : State.Trait} (self : Self) : M (H := H) T :=
      Pure (self.[0]).
    
    Global Instance Method_value `{H : State.Trait} : Notation.Dot "value" := {
      Notation.dot := value;
    }.
  End Impl_ink_env_call_common_Set_T_2.
  
  Module Unset.
    Record t : Set := { _ : core.marker.PhantomData (unit -> T);}.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Unset.
  Definition Unset := Unset.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
  Section Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Unset T.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "Unset"
        (addr_of (addr_of (self.[0]))).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
  End Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
  
  Module Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
  Section Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Unset T.
    
    Definition clone `{H : State.Trait} (self : ref Self) : M (H := H) Self :=
      let* α0 := core.default.Default.default tt in
      Self α0.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
  End Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
  
  Module Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
  Section Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Unset T.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
  End Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
  
  Module Impl_core_default_Default_for_ink_env_call_common_Unset_T.
  Section Impl_core_default_Default_for_ink_env_call_common_Unset_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Unset T.
    
    Definition default `{H : State.Trait} (_ : unit) : M (H := H) Self :=
      let* α0 := core.default.Default.default tt in
      Self α0.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_env_call_common_Unset_T.
  End Impl_core_default_Default_for_ink_env_call_common_Unset_T.
  
  Module Unwrap.
    Class Trait (Self : Set) {Output : Set} : Set := {
      Output := Output;
      unwrap_or_else
        `{H : State.Trait}
        :
        Self -> F -> (M (H := H) ImplSelf.Output);
    }.
    
    Global Instance Method_Output `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_unwrap_or_else `{H : State.Trait} `(Trait)
      : Notation.Dot "unwrap_or_else" := {
      Notation.dot := unwrap_or_else;
    }.
  End Unwrap.
  
  Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
  Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Unset T.
    
    Definition Output : Set := T.
    
    Definition unwrap_or_else
        `{H : State.Trait}
        (self : Self)
        (f : F)
        : M (H := H) ImplSelf.Output :=
      f tt.
    
    Global Instance Method_unwrap_or_else `{H : State.Trait} :
      Notation.Dot "unwrap_or_else" := {
      Notation.dot := unwrap_or_else;
    }.
    
    Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
      ink_env.call.common.Unwrap.unwrap_or_else
        `{H : State.Trait}
        :=
        unwrap_or_else;
    }.
  End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
  End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
  
  Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
  Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.common.Set T.
    
    Definition Output : Set := T.
    
    Definition unwrap_or_else
        `{H : State.Trait}
        (self : Self)
        (Pattern : F)
        : M (H := H) ImplSelf.Output :=
      self.["value"].
    
    Global Instance Method_unwrap_or_else `{H : State.Trait} :
      Notation.Dot "unwrap_or_else" := {
      Notation.dot := unwrap_or_else;
    }.
    
    Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
      ink_env.call.common.Unwrap.unwrap_or_else
        `{H : State.Trait}
        :=
        unwrap_or_else;
    }.
  End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
  End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
End common.

Module ReturnType.
  Record t : Set := { _ : core.marker.PhantomData (unit -> T);}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End ReturnType.
Definition ReturnType := ReturnType.t.

Module Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
Section Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.ReturnType T.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_tuple_field1_finish"]
      f
      "ReturnType"
      (addr_of (addr_of (self.[0]))).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.

Module Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
Section Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.ReturnType T.
  
  Definition clone `{H : State.Trait} (self : ref Self) : M (H := H) Self :=
    let* α0 := core.default.Default.default tt in
    Self α0.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.

Module Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
Section Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.ReturnType T.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.

Module Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
Section Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.ReturnType T.
  
  Definition default `{H : State.Trait} (_ : unit) : M (H := H) Self :=
    let* α0 := core.default.Default.default tt in
    Self α0.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.

Module Set.
  Record t : Set := { _ : T;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Set.
Definition Set := Set.t.

Module Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
Section Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Set T.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_tuple_field1_finish"]
      f
      "Set"
      (addr_of (addr_of (self.[0]))).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.
End Impl_core_fmt_Debug_for_ink_env_call_common_Set_T.

Module Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
Section Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Set T.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_call_common_Set_T.
End Impl_core_marker_Copy_for_ink_env_call_common_Set_T.

Module Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
Section Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Set T.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ink_env.call.common.Set T) :=
    let* α0 := core.clone.Clone.clone (addr_of (self.[0])) in
    Pure (ink_env.call.common.Set.Build_t α0).
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_call_common_Set_T.
End Impl_core_clone_Clone_for_ink_env_call_common_Set_T.

Module Impl_ink_env_call_common_Set_T_3.
  Definition Self := ink_env.call.common.Set T.
  
  Definition value `{H : State.Trait} (self : Self) : M (H := H) T :=
    Pure (self.[0]).
  
  Global Instance Method_value `{H : State.Trait} : Notation.Dot "value" := {
    Notation.dot := value;
  }.
End Impl_ink_env_call_common_Set_T_3.

Module Unset.
  Record t : Set := { _ : core.marker.PhantomData (unit -> T);}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Unset.
Definition Unset := Unset.t.

Module Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
Section Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Unset T.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_tuple_field1_finish"]
      f
      "Unset"
      (addr_of (addr_of (self.[0]))).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.
End Impl_core_fmt_Debug_for_ink_env_call_common_Unset_T.

Module Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
Section Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Unset T.
  
  Definition clone `{H : State.Trait} (self : ref Self) : M (H := H) Self :=
    let* α0 := core.default.Default.default tt in
    Self α0.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.
End Impl_core_clone_Clone_for_ink_env_call_common_Unset_T.

Module Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
Section Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Unset T.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.
End Impl_core_marker_Copy_for_ink_env_call_common_Unset_T.

Module Impl_core_default_Default_for_ink_env_call_common_Unset_T.
Section Impl_core_default_Default_for_ink_env_call_common_Unset_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Unset T.
  
  Definition default `{H : State.Trait} (_ : unit) : M (H := H) Self :=
    let* α0 := core.default.Default.default tt in
    Self α0.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_env_call_common_Unset_T.
End Impl_core_default_Default_for_ink_env_call_common_Unset_T.

Module Unwrap.
  Class Trait (Self : Set) {Output : Set} : Set := {
    Output := Output;
    unwrap_or_else
      `{H : State.Trait}
      :
      Self -> F -> (M (H := H) ImplSelf.Output);
  }.
  
  Global Instance Method_Output `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_unwrap_or_else `{H : State.Trait} `(Trait)
    : Notation.Dot "unwrap_or_else" := {
    Notation.dot := unwrap_or_else;
  }.
End Unwrap.

Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Unset T.
  
  Definition Output : Set := T.
  
  Definition unwrap_or_else
      `{H : State.Trait}
      (self : Self)
      (f : F)
      : M (H := H) ImplSelf.Output :=
    f tt.
  
  Global Instance Method_unwrap_or_else `{H : State.Trait} :
    Notation.Dot "unwrap_or_else" := {
    Notation.dot := unwrap_or_else;
  }.
  
  Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
    ink_env.call.common.Unwrap.unwrap_or_else
      `{H : State.Trait}
      :=
      unwrap_or_else;
  }.
End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.
End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset_T.

Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.common.Set T.
  
  Definition Output : Set := T.
  
  Definition unwrap_or_else
      `{H : State.Trait}
      (self : Self)
      (Pattern : F)
      : M (H := H) ImplSelf.Output :=
    self.["value"].
  
  Global Instance Method_unwrap_or_else `{H : State.Trait} :
    Notation.Dot "unwrap_or_else" := {
    Notation.dot := unwrap_or_else;
  }.
  
  Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
    ink_env.call.common.Unwrap.unwrap_or_else
      `{H : State.Trait}
      :=
      unwrap_or_else;
  }.
End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.
End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set_T.

Module create_builder.
  Module state.
    Module Salt.
      Inductive t : Set :=
      .
    End Salt.
    Definition Salt := Salt.t.
  End state.
  
  Module FromAccountId.
    Class Trait (Self : Set) {T : Set} : Set := {
      from_account_id
        `{H : State.Trait}
        :
        ink_env.types.Environment.AccountId -> (M (H := H) Self);
    }.
    
    Global Instance Method_from_account_id `{H : State.Trait} `(Trait)
      : Notation.Dot "from_account_id" := {
      Notation.dot := from_account_id;
    }.
  End FromAccountId.
  
  Module ConstructorReturnType.
    Class Trait
        (Self : Set) {C : Set}
        {Output : Set}
        {Error : Set}
        `{parity_scale_codec.codec.Decode.Trait Error} :
        Set := {
      IS_RESULT `{H : State.Trait} : bool;
      Output := Output;
      Error := Error;
      ok `{H : State.Trait} : C -> (M (H := H) ImplSelf.Output);
    }.
    
    Global Instance Method_IS_RESULT `{H : State.Trait} `(Trait)
      : Notation.Dot "IS_RESULT" := {
      Notation.dot := IS_RESULT;
    }.
    Global Instance Method_Output `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_Error `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Error" := {
      Notation.double_colon_type := Error;
    }.
    Global Instance Method_ok `{H : State.Trait} `(Trait)
      : Notation.Dot "ok" := {
      Notation.dot := ok;
    }.
    Global Instance Method_err `{H : State.Trait} `(Trait)
      : Notation.Dot "err" := {
      Notation.dot (_err : ImplSelf.Error) :=
        (Pure core.option.Option.None
        : M (H := H) (core.option.Option ImplSelf.Output));
    }.
  End ConstructorReturnType.
  
  Module Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
  Section Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
    Context {C : Set}.
    
    Definition Self := C.
    
    Definition Output : Set := C.
    
    Definition Error : Set := unit.
    
    Definition ok `{H : State.Trait} (value : C) : M (H := H) ImplSelf.Output :=
      Pure value.
    
    Global Instance AssociatedFunction_ok `{H : State.Trait} :
      Notation.DoubleColon Self "ok" := {
      Notation.double_colon := ok;
    }.
    
    Global Instance I :
        ink_env.call.create_builder.ConstructorReturnType.Trait
          Self
          (C := C) := {
      ink_env.call.create_builder.ConstructorReturnType.ok
        `{H : State.Trait}
        :=
        ok;
    }.
  End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
  End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
  
  Module
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
  Section
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
    Context {C E : Set}.
    
    Definition Self := core.result.Result C E.
    
    Definition IS_RESULT := Pure true.
    
    Global Instance AssociatedFunction_IS_RESULT `{H : State.Trait} :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition Output : Set := core.result.Result C E.
    
    Definition Error : Set := E.
    
    Definition ok `{H : State.Trait} (value : C) : M (H := H) ImplSelf.Output :=
      Pure (core.result.Result.Ok value).
    
    Global Instance AssociatedFunction_ok `{H : State.Trait} :
      Notation.DoubleColon Self "ok" := {
      Notation.double_colon := ok;
    }.
    
    Definition err
        `{H : State.Trait}
        (err : ImplSelf.Error)
        : M (H := H) (core.option.Option ImplSelf.Output) :=
      Pure (core.option.Option.Some (core.result.Result.Err err)).
    
    Global Instance AssociatedFunction_err `{H : State.Trait} :
      Notation.DoubleColon Self "err" := {
      Notation.double_colon := err;
    }.
    
    Global Instance I :
        ink_env.call.create_builder.ConstructorReturnType.Trait
          Self
          (C := C) := {
      ink_env.call.create_builder.ConstructorReturnType.ok
        `{H : State.Trait}
        :=
        ok;
    }.
  End
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
  End
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
  
  Module CreateParams.
    Record t : Set := {
      code_hash : ImplE.Hash;
      gas_limit : u64;
      endowment : ImplE.Balance;
      exec_input : ink_env.call.execution_input.ExecutionInput Args;
      salt_bytes : Salt;
      _return_type : ink_env.call.common.ReturnType R;
      _phantom : core.marker.PhantomData (unit -> ContractRef);
    }.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
    }.
    Global Instance Get_endowment : Notation.Dot "endowment" := {
      Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
    }.
    Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
      Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
    }.
    Global Instance Get__return_type : Notation.Dot "_return_type" := {
      Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
    }.
  End CreateParams.
  Definition CreateParams : Set := CreateParams.t.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
  Section
    Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    Context {E ContractRef Args Salt R : Set}.
    
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      let names :=
        addr_of
          [
            "code_hash";
            "gas_limit";
            "endowment";
            "exec_input";
            "salt_bytes";
            "_return_type";
            "_phantom"
          ] in
      let values :=
        addr_of
          [
            addr_of self.["code_hash"];
            addr_of self.["gas_limit"];
            addr_of self.["endowment"];
            addr_of self.["exec_input"];
            addr_of self.["salt_bytes"];
            addr_of self.["_return_type"];
            addr_of (addr_of self.["_phantom"])
          ] in
      core.fmt.Formatter::["debug_struct_fields_finish"]
        f
        "CreateParams"
        names
        values.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
  End
    Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
  
  Module
    Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_4.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
    
    Definition code_hash
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref ImplE.Hash) :=
      Pure (addr_of self.["code_hash"]).
    
    Global Instance Method_code_hash `{H : State.Trait} :
      Notation.Dot "code_hash" := {
      Notation.dot := code_hash;
    }.
    
    Definition gas_limit
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) u64 :=
      Pure self.["gas_limit"].
    
    Global Instance Method_gas_limit `{H : State.Trait} :
      Notation.Dot "gas_limit" := {
      Notation.dot := gas_limit;
    }.
    
    Definition endowment
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref ImplE.Balance) :=
      Pure (addr_of self.["endowment"]).
    
    Global Instance Method_endowment `{H : State.Trait} :
      Notation.Dot "endowment" := {
      Notation.dot := endowment;
    }.
    
    Definition exec_input
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref (ink_env.call.execution_input.ExecutionInput Args)) :=
      Pure (addr_of self.["exec_input"]).
    
    Global Instance Method_exec_input `{H : State.Trait} :
      Notation.Dot "exec_input" := {
      Notation.dot := exec_input;
    }.
    
    Definition update_selector
        `{H : State.Trait}
        (self : mut_ref Self)
        (selector : ink_env.call.selector.Selector)
        : M (H := H) unit :=
      self.["exec_input"].["update_selector"] selector.
    
    Global Instance Method_update_selector `{H : State.Trait} :
      Notation.Dot "update_selector" := {
      Notation.dot := update_selector;
    }.
  End Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_4.
  
  Module
    Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_5.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
    
    Definition salt_bytes
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref Salt) :=
      Pure (addr_of self.["salt_bytes"]).
    
    Global Instance Method_salt_bytes `{H : State.Trait} :
      Notation.Dot "salt_bytes" := {
      Notation.dot := salt_bytes;
    }.
  End Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_5.
  
  Module
    Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_6.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
    
    Definition instantiate
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.call.create_builder.ConstructorReturnType.Output :=
      let* α0 := ink_env.api.instantiate_contract self in
      let* α1 :=
        α0.["unwrap_or_else"]
          (fun env_error =>
            let* α0 := format_argument::["new_debug"] (addr_of env_error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Cross-contract instantiation failed with " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      α1.["unwrap_or_else"]
        (fun lang_error =>
          let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Received a `LangError` while instantiating: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_instantiate `{H : State.Trait} :
      Notation.Dot "instantiate" := {
      Notation.dot := instantiate;
    }.
    
    Definition try_instantiate
        `{H : State.Trait}
        (self : ref Self)
        :
          M (H := H)
            (core.result.Result
              (ink_primitives.ConstructorResult
                ink_env.call.create_builder.ConstructorReturnType.Output)
              ink_env.error.Error) :=
      ink_env.api.instantiate_contract self.
    
    Global Instance Method_try_instantiate `{H : State.Trait} :
      Notation.Dot "try_instantiate" := {
      Notation.dot := try_instantiate;
    }.
  End Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_6.
  
  Module CreateBuilder.
    Record t : Set := {
      code_hash : CodeHash;
      gas_limit : GasLimit;
      endowment : Endowment;
      exec_input : Args;
      salt : Salt;
      return_type : RetType;
      _phantom : core.marker.PhantomData (unit -> (E * ContractRef));
    }.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
    }.
    Global Instance Get_endowment : Notation.Dot "endowment" := {
      Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
    }.
    Global Instance Get_salt : Notation.Dot "salt" := {
      Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
    }.
    Global Instance Get_return_type : Notation.Dot "return_type" := {
      Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
    }.
  End CreateBuilder.
  Definition CreateBuilder : Set := CreateBuilder.t.
  
  Definition build_create
      `{H : State.Trait}
      {ContractRef : Set}
      `{ink_env.contract.ContractEnv.Trait ContractRef}
      (_ : unit)
      :
        M (H := H)
          (ink_env.call.create_builder.CreateBuilder
            ink_env.contract.ContractEnv.Env
            ContractRef
            (ink_env.call.common.Unset ink_env.types.Environment.Hash)
            (ink_env.call.common.Unset u64)
            (ink_env.call.common.Unset ink_env.types.Environment.Balance)
            (ink_env.call.common.Unset
              (ink_env.call.execution_input.ExecutionInput
                ink_env.call.execution_input.EmptyArgumentList))
            (ink_env.call.common.Unset ink_env.call.create_builder.state.Salt)
            (ink_env.call.common.Unset
              (ink_env.call.common.ReturnType unit))) :=
    let* α0 := core.default.Default.default tt in
    let* α1 := core.default.Default.default tt in
    let* α2 := core.default.Default.default tt in
    let* α3 := core.default.Default.default tt in
    let* α4 := core.default.Default.default tt in
    let* α5 := core.default.Default.default tt in
    let* α6 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.create_builder.CreateBuilder.code_hash := α0;
        ink_env.call.create_builder.CreateBuilder.gas_limit := α1;
        ink_env.call.create_builder.CreateBuilder.endowment := α2;
        ink_env.call.create_builder.CreateBuilder.exec_input := α3;
        ink_env.call.create_builder.CreateBuilder.salt := α4;
        ink_env.call.create_builder.CreateBuilder.return_type := α5;
        ink_env.call.create_builder.CreateBuilder._phantom := α6;
      |}.
  
  Module
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Unset_ImplE_Hash_GasLimit_Endowment_Args_Salt_RetType_2.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateBuilder
        E
        ContractRef
        (ink_env.call.common.Unset ImplE.Hash)
        GasLimit
        Endowment
        Args
        Salt
        RetType.
    
    Definition code_hash
        `{H : State.Trait}
        (self : Self)
        (code_hash : ImplE.Hash)
        :
          M (H := H)
            (ink_env.call.create_builder.CreateBuilder
              E
              ContractRef
              (ink_env.call.common.Set ImplE.Hash)
              GasLimit
              Endowment
              Args
              Salt
              RetType) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.create_builder.CreateBuilder.code_hash :=
            ink_env.call.common.Set.Build_t code_hash;
          ink_env.call.create_builder.CreateBuilder.gas_limit :=
            self.["gas_limit"];
          ink_env.call.create_builder.CreateBuilder.endowment :=
            self.["endowment"];
          ink_env.call.create_builder.CreateBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
          ink_env.call.create_builder.CreateBuilder.return_type :=
            self.["return_type"];
          ink_env.call.create_builder.CreateBuilder._phantom := α0;
        |}.
    
    Global Instance Method_code_hash `{H : State.Trait} :
      Notation.Dot "code_hash" := {
      Notation.dot := code_hash;
    }.
  End
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Unset_ImplE_Hash_GasLimit_Endowment_Args_Salt_RetType_2.
  
  Module
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_ink_env_call_common_Unset_u64_Endowment_Args_Salt_RetType_2.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateBuilder
        E
        ContractRef
        CodeHash
        (ink_env.call.common.Unset u64)
        Endowment
        Args
        Salt
        RetType.
    
    Definition gas_limit
        `{H : State.Trait}
        (self : Self)
        (gas_limit : u64)
        :
          M (H := H)
            (ink_env.call.create_builder.CreateBuilder
              E
              ContractRef
              CodeHash
              (ink_env.call.common.Set u64)
              Endowment
              Args
              Salt
              RetType) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.create_builder.CreateBuilder.code_hash :=
            self.["code_hash"];
          ink_env.call.create_builder.CreateBuilder.gas_limit :=
            ink_env.call.common.Set.Build_t gas_limit;
          ink_env.call.create_builder.CreateBuilder.endowment :=
            self.["endowment"];
          ink_env.call.create_builder.CreateBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
          ink_env.call.create_builder.CreateBuilder.return_type :=
            self.["return_type"];
          ink_env.call.create_builder.CreateBuilder._phantom := α0;
        |}.
    
    Global Instance Method_gas_limit `{H : State.Trait} :
      Notation.Dot "gas_limit" := {
      Notation.dot := gas_limit;
    }.
  End
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_ink_env_call_common_Unset_u64_Endowment_Args_Salt_RetType_2.
  
  Module
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_ink_env_call_common_Unset_ImplE_Balance_Args_Salt_RetType_2.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateBuilder
        E
        ContractRef
        CodeHash
        GasLimit
        (ink_env.call.common.Unset ImplE.Balance)
        Args
        Salt
        RetType.
    
    Definition endowment
        `{H : State.Trait}
        (self : Self)
        (endowment : ImplE.Balance)
        :
          M (H := H)
            (ink_env.call.create_builder.CreateBuilder
              E
              ContractRef
              CodeHash
              GasLimit
              (ink_env.call.common.Set ImplE.Balance)
              Args
              Salt
              RetType) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.create_builder.CreateBuilder.code_hash :=
            self.["code_hash"];
          ink_env.call.create_builder.CreateBuilder.gas_limit :=
            self.["gas_limit"];
          ink_env.call.create_builder.CreateBuilder.endowment :=
            ink_env.call.common.Set.Build_t endowment;
          ink_env.call.create_builder.CreateBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
          ink_env.call.create_builder.CreateBuilder.return_type :=
            self.["return_type"];
          ink_env.call.create_builder.CreateBuilder._phantom := α0;
        |}.
    
    Global Instance Method_endowment `{H : State.Trait} :
      Notation.Dot "endowment" := {
      Notation.dot := endowment;
    }.
  End
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_ink_env_call_common_Unset_ImplE_Balance_Args_Salt_RetType_2.
  
  Module
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_Salt_RetType_2.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateBuilder
        E
        ContractRef
        CodeHash
        GasLimit
        Endowment
        (ink_env.call.common.Unset
          (ink_env.call.execution_input.ExecutionInput
            ink_env.call.execution_input.EmptyArgumentList))
        Salt
        RetType.
    
    Definition exec_input
        `{H : State.Trait}
        (self : Self)
        (exec_input : ink_env.call.execution_input.ExecutionInput Args)
        :
          M (H := H)
            (ink_env.call.create_builder.CreateBuilder
              E
              ContractRef
              CodeHash
              GasLimit
              Endowment
              (ink_env.call.common.Set
                (ink_env.call.execution_input.ExecutionInput Args))
              Salt
              RetType) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.create_builder.CreateBuilder.code_hash :=
            self.["code_hash"];
          ink_env.call.create_builder.CreateBuilder.gas_limit :=
            self.["gas_limit"];
          ink_env.call.create_builder.CreateBuilder.endowment :=
            self.["endowment"];
          ink_env.call.create_builder.CreateBuilder.exec_input :=
            ink_env.call.common.Set.Build_t exec_input;
          ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
          ink_env.call.create_builder.CreateBuilder.return_type :=
            self.["return_type"];
          ink_env.call.create_builder.CreateBuilder._phantom := α0;
        |}.
    
    Global Instance Method_exec_input `{H : State.Trait} :
      Notation.Dot "exec_input" := {
      Notation.dot := exec_input;
    }.
  End
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_Salt_RetType_2.
  
  Module
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_ink_env_call_common_Unset_ink_env_call_create_builder_state_Salt_RetType_2.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateBuilder
        E
        ContractRef
        CodeHash
        GasLimit
        Endowment
        Args
        (ink_env.call.common.Unset ink_env.call.create_builder.state.Salt)
        RetType.
    
    Definition salt_bytes
        `{H : State.Trait}
        (self : Self)
        (salt : Salt)
        :
          M (H := H)
            (ink_env.call.create_builder.CreateBuilder
              E
              ContractRef
              CodeHash
              GasLimit
              Endowment
              Args
              (ink_env.call.common.Set Salt)
              RetType) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.create_builder.CreateBuilder.code_hash :=
            self.["code_hash"];
          ink_env.call.create_builder.CreateBuilder.gas_limit :=
            self.["gas_limit"];
          ink_env.call.create_builder.CreateBuilder.endowment :=
            self.["endowment"];
          ink_env.call.create_builder.CreateBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.create_builder.CreateBuilder.salt :=
            ink_env.call.common.Set.Build_t salt;
          ink_env.call.create_builder.CreateBuilder.return_type :=
            self.["return_type"];
          ink_env.call.create_builder.CreateBuilder._phantom := α0;
        |}.
    
    Global Instance Method_salt_bytes `{H : State.Trait} :
      Notation.Dot "salt_bytes" := {
      Notation.dot := salt_bytes;
    }.
  End
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_ink_env_call_common_Unset_ink_env_call_create_builder_state_Salt_RetType_2.
  
  Module
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_Salt_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__2.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateBuilder
        E
        ContractRef
        CodeHash
        GasLimit
        Endowment
        Args
        Salt
        (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
    
    Definition returns
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.call.create_builder.CreateBuilder
              E
              ContractRef
              CodeHash
              GasLimit
              Endowment
              Args
              Salt
              (ink_env.call.common.Set (ink_env.call.common.ReturnType R))) :=
      let* α0 := core.default.Default.default tt in
      let* α1 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.create_builder.CreateBuilder.code_hash :=
            self.["code_hash"];
          ink_env.call.create_builder.CreateBuilder.gas_limit :=
            self.["gas_limit"];
          ink_env.call.create_builder.CreateBuilder.endowment :=
            self.["endowment"];
          ink_env.call.create_builder.CreateBuilder.exec_input :=
            self.["exec_input"];
          ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
          ink_env.call.create_builder.CreateBuilder.return_type :=
            ink_env.call.common.Set.Build_t α0;
          ink_env.call.create_builder.CreateBuilder._phantom := α1;
        |}.
    
    Global Instance Method_returns `{H : State.Trait} :
      Notation.Dot "returns" := {
      Notation.dot := returns;
    }.
  End
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_Salt_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__2.
  
  Module
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_3.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateBuilder
        E
        ContractRef
        (ink_env.call.common.Set ImplE.Hash)
        GasLimit
        (ink_env.call.common.Set ImplE.Balance)
        (ink_env.call.common.Set
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set Salt)
        (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
    
    Definition params
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.call.create_builder.CreateParams
              E
              ContractRef
              Args
              Salt
              RetType) :=
      let* α0 := self.["code_hash"].["value"] in
      let* α1 := self.["gas_limit"].["unwrap_or_else"] (fun  => Pure 0) in
      let* α2 := self.["endowment"].["value"] in
      let* α3 := self.["exec_input"].["value"] in
      let* α4 := self.["salt"].["value"] in
      let* α5 := core.default.Default.default tt in
      let* α6 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.create_builder.CreateParams.code_hash := α0;
          ink_env.call.create_builder.CreateParams.gas_limit := α1;
          ink_env.call.create_builder.CreateParams.endowment := α2;
          ink_env.call.create_builder.CreateParams.exec_input := α3;
          ink_env.call.create_builder.CreateParams.salt_bytes := α4;
          ink_env.call.create_builder.CreateParams._return_type := α5;
          ink_env.call.create_builder.CreateParams._phantom := α6;
        |}.
    
    Global Instance Method_params `{H : State.Trait} :
      Notation.Dot "params" := {
      Notation.dot := params;
    }.
  End
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_3.
  
  Module
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_4.
    Definition
      Self
      :=
      ink_env.call.create_builder.CreateBuilder
        E
        ContractRef
        (ink_env.call.common.Set ImplE.Hash)
        GasLimit
        (ink_env.call.common.Set ImplE.Balance)
        (ink_env.call.common.Set
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set Salt)
        (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
    
    Definition instantiate
        `{H : State.Trait}
        (self : Self)
        : M (H := H) ink_env.call.create_builder.ConstructorReturnType.Output :=
      let* α0 := self.["params"] in
      α0.["instantiate"].
    
    Global Instance Method_instantiate `{H : State.Trait} :
      Notation.Dot "instantiate" := {
      Notation.dot := instantiate;
    }.
    
    Definition try_instantiate
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (core.result.Result
              (ink_primitives.ConstructorResult
                ink_env.call.create_builder.ConstructorReturnType.Output)
              ink_env.error.Error) :=
      let* α0 := self.["params"] in
      α0.["try_instantiate"].
    
    Global Instance Method_try_instantiate `{H : State.Trait} :
      Notation.Dot "try_instantiate" := {
      Notation.dot := try_instantiate;
    }.
  End
    Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_4.
End create_builder.

Module state.
  Module Salt.
    Inductive t : Set :=
    .
  End Salt.
  Definition Salt := Salt.t.
End state.

Module Salt.
  Inductive t : Set :=
  .
End Salt.
Definition Salt := Salt.t.

Module FromAccountId.
  Class Trait (Self : Set) {T : Set} : Set := {
    from_account_id
      `{H : State.Trait}
      :
      ink_env.types.Environment.AccountId -> (M (H := H) Self);
  }.
  
  Global Instance Method_from_account_id `{H : State.Trait} `(Trait)
    : Notation.Dot "from_account_id" := {
    Notation.dot := from_account_id;
  }.
End FromAccountId.

Module ConstructorReturnType.
  Class Trait
      (Self : Set) {C : Set}
      {Output : Set}
      {Error : Set}
      `{parity_scale_codec.codec.Decode.Trait Error} :
      Set := {
    IS_RESULT `{H : State.Trait} : bool;
    Output := Output;
    Error := Error;
    ok `{H : State.Trait} : C -> (M (H := H) ImplSelf.Output);
  }.
  
  Global Instance Method_IS_RESULT `{H : State.Trait} `(Trait)
    : Notation.Dot "IS_RESULT" := {
    Notation.dot := IS_RESULT;
  }.
  Global Instance Method_Output `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_Error `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Error" := {
    Notation.double_colon_type := Error;
  }.
  Global Instance Method_ok `{H : State.Trait} `(Trait) : Notation.Dot "ok" := {
    Notation.dot := ok;
  }.
  Global Instance Method_err `{H : State.Trait} `(Trait)
    : Notation.Dot "err" := {
    Notation.dot (_err : ImplSelf.Error) :=
      (Pure core.option.Option.None
      : M (H := H) (core.option.Option ImplSelf.Output));
  }.
End ConstructorReturnType.

Module Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
Section Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
  Context {C : Set}.
  
  Definition Self := C.
  
  Definition Output : Set := C.
  
  Definition Error : Set := unit.
  
  Definition ok `{H : State.Trait} (value : C) : M (H := H) ImplSelf.Output :=
    Pure value.
  
  Global Instance AssociatedFunction_ok `{H : State.Trait} :
    Notation.DoubleColon Self "ok" := {
    Notation.double_colon := ok;
  }.
  
  Global Instance I :
      ink_env.call.create_builder.ConstructorReturnType.Trait Self (C := C) := {
    ink_env.call.create_builder.ConstructorReturnType.ok
      `{H : State.Trait}
      :=
      ok;
  }.
End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.

Module
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
Section
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
  Context {C E : Set}.
  
  Definition Self := core.result.Result C E.
  
  Definition IS_RESULT := Pure true.
  
  Global Instance AssociatedFunction_IS_RESULT `{H : State.Trait} :
    Notation.DoubleColon Self "IS_RESULT" := {
    Notation.double_colon := IS_RESULT;
  }.
  
  Definition Output : Set := core.result.Result C E.
  
  Definition Error : Set := E.
  
  Definition ok `{H : State.Trait} (value : C) : M (H := H) ImplSelf.Output :=
    Pure (core.result.Result.Ok value).
  
  Global Instance AssociatedFunction_ok `{H : State.Trait} :
    Notation.DoubleColon Self "ok" := {
    Notation.double_colon := ok;
  }.
  
  Definition err
      `{H : State.Trait}
      (err : ImplSelf.Error)
      : M (H := H) (core.option.Option ImplSelf.Output) :=
    Pure (core.option.Option.Some (core.result.Result.Err err)).
  
  Global Instance AssociatedFunction_err `{H : State.Trait} :
    Notation.DoubleColon Self "err" := {
    Notation.double_colon := err;
  }.
  
  Global Instance I :
      ink_env.call.create_builder.ConstructorReturnType.Trait Self (C := C) := {
    ink_env.call.create_builder.ConstructorReturnType.ok
      `{H : State.Trait}
      :=
      ok;
  }.
End
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
End
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.

Module CreateParams.
  Record t : Set := {
    code_hash : ImplE.Hash;
    gas_limit : u64;
    endowment : ImplE.Balance;
    exec_input : ink_env.call.execution_input.ExecutionInput Args;
    salt_bytes : Salt;
    _return_type : ink_env.call.common.ReturnType R;
    _phantom : core.marker.PhantomData (unit -> ContractRef);
  }.
  
  Global Instance Get_code_hash : Notation.Dot "code_hash" := {
    Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
  }.
  Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
    Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
  }.
  Global Instance Get_endowment : Notation.Dot "endowment" := {
    Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
  }.
  Global Instance Get_exec_input : Notation.Dot "exec_input" := {
    Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
  }.
  Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
    Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
  }.
  Global Instance Get__return_type : Notation.Dot "_return_type" := {
    Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
  }.
  Global Instance Get__phantom : Notation.Dot "_phantom" := {
    Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
  }.
End CreateParams.
Definition CreateParams : Set := CreateParams.t.

Module
  Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
Section
  Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
  Context {E ContractRef Args Salt R : Set}.
  
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    let names :=
      addr_of
        [
          "code_hash";
          "gas_limit";
          "endowment";
          "exec_input";
          "salt_bytes";
          "_return_type";
          "_phantom"
        ] in
    let values :=
      addr_of
        [
          addr_of self.["code_hash"];
          addr_of self.["gas_limit"];
          addr_of self.["endowment"];
          addr_of self.["exec_input"];
          addr_of self.["salt_bytes"];
          addr_of self.["_return_type"];
          addr_of (addr_of self.["_phantom"])
        ] in
    core.fmt.Formatter::["debug_struct_fields_finish"]
      f
      "CreateParams"
      names
      values.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End
  Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
End
  Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.

Module
  Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_7.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
  
  Definition code_hash
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref ImplE.Hash) :=
    Pure (addr_of self.["code_hash"]).
  
  Global Instance Method_code_hash `{H : State.Trait} :
    Notation.Dot "code_hash" := {
    Notation.dot := code_hash;
  }.
  
  Definition gas_limit `{H : State.Trait} (self : ref Self) : M (H := H) u64 :=
    Pure self.["gas_limit"].
  
  Global Instance Method_gas_limit `{H : State.Trait} :
    Notation.Dot "gas_limit" := {
    Notation.dot := gas_limit;
  }.
  
  Definition endowment
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref ImplE.Balance) :=
    Pure (addr_of self.["endowment"]).
  
  Global Instance Method_endowment `{H : State.Trait} :
    Notation.Dot "endowment" := {
    Notation.dot := endowment;
  }.
  
  Definition exec_input
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref (ink_env.call.execution_input.ExecutionInput Args)) :=
    Pure (addr_of self.["exec_input"]).
  
  Global Instance Method_exec_input `{H : State.Trait} :
    Notation.Dot "exec_input" := {
    Notation.dot := exec_input;
  }.
  
  Definition update_selector
      `{H : State.Trait}
      (self : mut_ref Self)
      (selector : ink_env.call.selector.Selector)
      : M (H := H) unit :=
    self.["exec_input"].["update_selector"] selector.
  
  Global Instance Method_update_selector `{H : State.Trait} :
    Notation.Dot "update_selector" := {
    Notation.dot := update_selector;
  }.
End Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_7.

Module
  Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_8.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
  
  Definition salt_bytes
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref Salt) :=
    Pure (addr_of self.["salt_bytes"]).
  
  Global Instance Method_salt_bytes `{H : State.Trait} :
    Notation.Dot "salt_bytes" := {
    Notation.dot := salt_bytes;
  }.
End Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_8.

Module
  Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_9.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
  
  Definition instantiate
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.call.create_builder.ConstructorReturnType.Output :=
    let* α0 := ink_env.api.instantiate_contract self in
    let* α1 :=
      α0.["unwrap_or_else"]
        (fun env_error =>
          let* α0 := format_argument::["new_debug"] (addr_of env_error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Cross-contract instantiation failed with " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    α1.["unwrap_or_else"]
      (fun lang_error =>
        let* α0 := format_argument::["new_debug"] (addr_of lang_error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "Received a `LangError` while instantiating: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_instantiate `{H : State.Trait} :
    Notation.Dot "instantiate" := {
    Notation.dot := instantiate;
  }.
  
  Definition try_instantiate
      `{H : State.Trait}
      (self : ref Self)
      :
        M (H := H)
          (core.result.Result
            (ink_primitives.ConstructorResult
              ink_env.call.create_builder.ConstructorReturnType.Output)
            ink_env.error.Error) :=
    ink_env.api.instantiate_contract self.
  
  Global Instance Method_try_instantiate `{H : State.Trait} :
    Notation.Dot "try_instantiate" := {
    Notation.dot := try_instantiate;
  }.
End Impl_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R_9.

Module CreateBuilder.
  Record t : Set := {
    code_hash : CodeHash;
    gas_limit : GasLimit;
    endowment : Endowment;
    exec_input : Args;
    salt : Salt;
    return_type : RetType;
    _phantom : core.marker.PhantomData (unit -> (E * ContractRef));
  }.
  
  Global Instance Get_code_hash : Notation.Dot "code_hash" := {
    Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
  }.
  Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
    Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
  }.
  Global Instance Get_endowment : Notation.Dot "endowment" := {
    Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
  }.
  Global Instance Get_exec_input : Notation.Dot "exec_input" := {
    Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
  }.
  Global Instance Get_salt : Notation.Dot "salt" := {
    Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
  }.
  Global Instance Get_return_type : Notation.Dot "return_type" := {
    Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
  }.
  Global Instance Get__phantom : Notation.Dot "_phantom" := {
    Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
  }.
End CreateBuilder.
Definition CreateBuilder : Set := CreateBuilder.t.

Definition build_create
    `{H : State.Trait}
    {ContractRef : Set}
    `{ink_env.contract.ContractEnv.Trait ContractRef}
    (_ : unit)
    :
      M (H := H)
        (ink_env.call.create_builder.CreateBuilder
          ink_env.contract.ContractEnv.Env
          ContractRef
          (ink_env.call.common.Unset ink_env.types.Environment.Hash)
          (ink_env.call.common.Unset u64)
          (ink_env.call.common.Unset ink_env.types.Environment.Balance)
          (ink_env.call.common.Unset
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset ink_env.call.create_builder.state.Salt)
          (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit))) :=
  let* α0 := core.default.Default.default tt in
  let* α1 := core.default.Default.default tt in
  let* α2 := core.default.Default.default tt in
  let* α3 := core.default.Default.default tt in
  let* α4 := core.default.Default.default tt in
  let* α5 := core.default.Default.default tt in
  let* α6 := core.default.Default.default tt in
  Pure
    {|
      ink_env.call.create_builder.CreateBuilder.code_hash := α0;
      ink_env.call.create_builder.CreateBuilder.gas_limit := α1;
      ink_env.call.create_builder.CreateBuilder.endowment := α2;
      ink_env.call.create_builder.CreateBuilder.exec_input := α3;
      ink_env.call.create_builder.CreateBuilder.salt := α4;
      ink_env.call.create_builder.CreateBuilder.return_type := α5;
      ink_env.call.create_builder.CreateBuilder._phantom := α6;
    |}.

Module
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Unset_ImplE_Hash_GasLimit_Endowment_Args_Salt_RetType_3.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      (ink_env.call.common.Unset ImplE.Hash)
      GasLimit
      Endowment
      Args
      Salt
      RetType.
  
  Definition code_hash
      `{H : State.Trait}
      (self : Self)
      (code_hash : ImplE.Hash)
      :
        M (H := H)
          (ink_env.call.create_builder.CreateBuilder
            E
            ContractRef
            (ink_env.call.common.Set ImplE.Hash)
            GasLimit
            Endowment
            Args
            Salt
            RetType) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.create_builder.CreateBuilder.code_hash :=
          ink_env.call.common.Set.Build_t code_hash;
        ink_env.call.create_builder.CreateBuilder.gas_limit :=
          self.["gas_limit"];
        ink_env.call.create_builder.CreateBuilder.endowment :=
          self.["endowment"];
        ink_env.call.create_builder.CreateBuilder.exec_input :=
          self.["exec_input"];
        ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
        ink_env.call.create_builder.CreateBuilder.return_type :=
          self.["return_type"];
        ink_env.call.create_builder.CreateBuilder._phantom := α0;
      |}.
  
  Global Instance Method_code_hash `{H : State.Trait} :
    Notation.Dot "code_hash" := {
    Notation.dot := code_hash;
  }.
End
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Unset_ImplE_Hash_GasLimit_Endowment_Args_Salt_RetType_3.

Module
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_ink_env_call_common_Unset_u64_Endowment_Args_Salt_RetType_3.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      CodeHash
      (ink_env.call.common.Unset u64)
      Endowment
      Args
      Salt
      RetType.
  
  Definition gas_limit
      `{H : State.Trait}
      (self : Self)
      (gas_limit : u64)
      :
        M (H := H)
          (ink_env.call.create_builder.CreateBuilder
            E
            ContractRef
            CodeHash
            (ink_env.call.common.Set u64)
            Endowment
            Args
            Salt
            RetType) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.create_builder.CreateBuilder.code_hash :=
          self.["code_hash"];
        ink_env.call.create_builder.CreateBuilder.gas_limit :=
          ink_env.call.common.Set.Build_t gas_limit;
        ink_env.call.create_builder.CreateBuilder.endowment :=
          self.["endowment"];
        ink_env.call.create_builder.CreateBuilder.exec_input :=
          self.["exec_input"];
        ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
        ink_env.call.create_builder.CreateBuilder.return_type :=
          self.["return_type"];
        ink_env.call.create_builder.CreateBuilder._phantom := α0;
      |}.
  
  Global Instance Method_gas_limit `{H : State.Trait} :
    Notation.Dot "gas_limit" := {
    Notation.dot := gas_limit;
  }.
End
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_ink_env_call_common_Unset_u64_Endowment_Args_Salt_RetType_3.

Module
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_ink_env_call_common_Unset_ImplE_Balance_Args_Salt_RetType_3.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      CodeHash
      GasLimit
      (ink_env.call.common.Unset ImplE.Balance)
      Args
      Salt
      RetType.
  
  Definition endowment
      `{H : State.Trait}
      (self : Self)
      (endowment : ImplE.Balance)
      :
        M (H := H)
          (ink_env.call.create_builder.CreateBuilder
            E
            ContractRef
            CodeHash
            GasLimit
            (ink_env.call.common.Set ImplE.Balance)
            Args
            Salt
            RetType) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.create_builder.CreateBuilder.code_hash :=
          self.["code_hash"];
        ink_env.call.create_builder.CreateBuilder.gas_limit :=
          self.["gas_limit"];
        ink_env.call.create_builder.CreateBuilder.endowment :=
          ink_env.call.common.Set.Build_t endowment;
        ink_env.call.create_builder.CreateBuilder.exec_input :=
          self.["exec_input"];
        ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
        ink_env.call.create_builder.CreateBuilder.return_type :=
          self.["return_type"];
        ink_env.call.create_builder.CreateBuilder._phantom := α0;
      |}.
  
  Global Instance Method_endowment `{H : State.Trait} :
    Notation.Dot "endowment" := {
    Notation.dot := endowment;
  }.
End
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_ink_env_call_common_Unset_ImplE_Balance_Args_Salt_RetType_3.

Module
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_Salt_RetType_3.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      CodeHash
      GasLimit
      Endowment
      (ink_env.call.common.Unset
        (ink_env.call.execution_input.ExecutionInput
          ink_env.call.execution_input.EmptyArgumentList))
      Salt
      RetType.
  
  Definition exec_input
      `{H : State.Trait}
      (self : Self)
      (exec_input : ink_env.call.execution_input.ExecutionInput Args)
      :
        M (H := H)
          (ink_env.call.create_builder.CreateBuilder
            E
            ContractRef
            CodeHash
            GasLimit
            Endowment
            (ink_env.call.common.Set
              (ink_env.call.execution_input.ExecutionInput Args))
            Salt
            RetType) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.create_builder.CreateBuilder.code_hash :=
          self.["code_hash"];
        ink_env.call.create_builder.CreateBuilder.gas_limit :=
          self.["gas_limit"];
        ink_env.call.create_builder.CreateBuilder.endowment :=
          self.["endowment"];
        ink_env.call.create_builder.CreateBuilder.exec_input :=
          ink_env.call.common.Set.Build_t exec_input;
        ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
        ink_env.call.create_builder.CreateBuilder.return_type :=
          self.["return_type"];
        ink_env.call.create_builder.CreateBuilder._phantom := α0;
      |}.
  
  Global Instance Method_exec_input `{H : State.Trait} :
    Notation.Dot "exec_input" := {
    Notation.dot := exec_input;
  }.
End
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_ink_env_call_common_Unset_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_Salt_RetType_3.

Module
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_ink_env_call_common_Unset_ink_env_call_create_builder_state_Salt_RetType_3.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      CodeHash
      GasLimit
      Endowment
      Args
      (ink_env.call.common.Unset ink_env.call.create_builder.state.Salt)
      RetType.
  
  Definition salt_bytes
      `{H : State.Trait}
      (self : Self)
      (salt : Salt)
      :
        M (H := H)
          (ink_env.call.create_builder.CreateBuilder
            E
            ContractRef
            CodeHash
            GasLimit
            Endowment
            Args
            (ink_env.call.common.Set Salt)
            RetType) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.create_builder.CreateBuilder.code_hash :=
          self.["code_hash"];
        ink_env.call.create_builder.CreateBuilder.gas_limit :=
          self.["gas_limit"];
        ink_env.call.create_builder.CreateBuilder.endowment :=
          self.["endowment"];
        ink_env.call.create_builder.CreateBuilder.exec_input :=
          self.["exec_input"];
        ink_env.call.create_builder.CreateBuilder.salt :=
          ink_env.call.common.Set.Build_t salt;
        ink_env.call.create_builder.CreateBuilder.return_type :=
          self.["return_type"];
        ink_env.call.create_builder.CreateBuilder._phantom := α0;
      |}.
  
  Global Instance Method_salt_bytes `{H : State.Trait} :
    Notation.Dot "salt_bytes" := {
    Notation.dot := salt_bytes;
  }.
End
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_ink_env_call_common_Unset_ink_env_call_create_builder_state_Salt_RetType_3.

Module
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_Salt_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__3.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      CodeHash
      GasLimit
      Endowment
      Args
      Salt
      (ink_env.call.common.Unset (ink_env.call.common.ReturnType unit)).
  
  Definition returns
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.call.create_builder.CreateBuilder
            E
            ContractRef
            CodeHash
            GasLimit
            Endowment
            Args
            Salt
            (ink_env.call.common.Set (ink_env.call.common.ReturnType R))) :=
    let* α0 := core.default.Default.default tt in
    let* α1 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.create_builder.CreateBuilder.code_hash :=
          self.["code_hash"];
        ink_env.call.create_builder.CreateBuilder.gas_limit :=
          self.["gas_limit"];
        ink_env.call.create_builder.CreateBuilder.endowment :=
          self.["endowment"];
        ink_env.call.create_builder.CreateBuilder.exec_input :=
          self.["exec_input"];
        ink_env.call.create_builder.CreateBuilder.salt := self.["salt"];
        ink_env.call.create_builder.CreateBuilder.return_type :=
          ink_env.call.common.Set.Build_t α0;
        ink_env.call.create_builder.CreateBuilder._phantom := α1;
      |}.
  
  Global Instance Method_returns `{H : State.Trait} :
    Notation.Dot "returns" := {
    Notation.dot := returns;
  }.
End
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_CodeHash_GasLimit_Endowment_Args_Salt_ink_env_call_common_Unset_ink_env_call_common_ReturnType_Tuple__3.

Module
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_5.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      (ink_env.call.common.Set ImplE.Hash)
      GasLimit
      (ink_env.call.common.Set ImplE.Balance)
      (ink_env.call.common.Set
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set Salt)
      (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
  
  Definition params
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.call.create_builder.CreateParams
            E
            ContractRef
            Args
            Salt
            RetType) :=
    let* α0 := self.["code_hash"].["value"] in
    let* α1 := self.["gas_limit"].["unwrap_or_else"] (fun  => Pure 0) in
    let* α2 := self.["endowment"].["value"] in
    let* α3 := self.["exec_input"].["value"] in
    let* α4 := self.["salt"].["value"] in
    let* α5 := core.default.Default.default tt in
    let* α6 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.create_builder.CreateParams.code_hash := α0;
        ink_env.call.create_builder.CreateParams.gas_limit := α1;
        ink_env.call.create_builder.CreateParams.endowment := α2;
        ink_env.call.create_builder.CreateParams.exec_input := α3;
        ink_env.call.create_builder.CreateParams.salt_bytes := α4;
        ink_env.call.create_builder.CreateParams._return_type := α5;
        ink_env.call.create_builder.CreateParams._phantom := α6;
      |}.
  
  Global Instance Method_params `{H : State.Trait} : Notation.Dot "params" := {
    Notation.dot := params;
  }.
End
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_5.

Module
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_6.
  Definition
    Self
    :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      (ink_env.call.common.Set ImplE.Hash)
      GasLimit
      (ink_env.call.common.Set ImplE.Balance)
      (ink_env.call.common.Set
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set Salt)
      (ink_env.call.common.Set (ink_env.call.common.ReturnType RetType)).
  
  Definition instantiate
      `{H : State.Trait}
      (self : Self)
      : M (H := H) ink_env.call.create_builder.ConstructorReturnType.Output :=
    let* α0 := self.["params"] in
    α0.["instantiate"].
  
  Global Instance Method_instantiate `{H : State.Trait} :
    Notation.Dot "instantiate" := {
    Notation.dot := instantiate;
  }.
  
  Definition try_instantiate
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (core.result.Result
            (ink_primitives.ConstructorResult
              ink_env.call.create_builder.ConstructorReturnType.Output)
            ink_env.error.Error) :=
    let* α0 := self.["params"] in
    α0.["try_instantiate"].
  
  Global Instance Method_try_instantiate `{H : State.Trait} :
    Notation.Dot "try_instantiate" := {
    Notation.dot := try_instantiate;
  }.
End
  Impl_ink_env_call_create_builder_CreateBuilder_E_ContractRef_ink_env_call_common_Set_ImplE_Hash_GasLimit_ink_env_call_common_Set_ImplE_Balance_ink_env_call_common_Set_ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set_Salt_ink_env_call_common_Set_ink_env_call_common_ReturnType_RetType_6.

Module execution_input.
  Module ExecutionInput.
    Record t : Set := {
      selector : ink_env.call.selector.Selector;
      args : Args;
    }.
    
    Global Instance Get_selector : Notation.Dot "selector" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_args : Notation.Dot "args" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End ExecutionInput.
  Definition ExecutionInput : Set := ExecutionInput.t.
  
  Module
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
  Section
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
    Context {Args : Set}.
    
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ink_env.call.execution_input.ExecutionInput Args) :=
      let* α0 := core.clone.Clone.clone (addr_of self.["selector"]) in
      let* α1 := core.clone.Clone.clone (addr_of self.["args"]) in
      Pure
        {|
          ink_env.call.execution_input.ExecutionInput.selector := α0;
          ink_env.call.execution_input.ExecutionInput.args := α1;
        |}.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
  End
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
  
  Module
    Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
  Section
    Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
    Context {Args : Set}.
    
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Definition default
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) (ink_env.call.execution_input.ExecutionInput Args) :=
      let* α0 := core.default.Default.default tt in
      let* α1 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.execution_input.ExecutionInput.selector := α0;
          ink_env.call.execution_input.ExecutionInput.args := α1;
        |}.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
  Section
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
    Context {Args : Set}.
    
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field2_finish"]
        f
        "ExecutionInput"
        "selector"
        (addr_of self.["selector"])
        "args"
        (addr_of (addr_of self.["args"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
  
  Module
    Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_2.
    Definition
      Self
      :=
      ink_env.call.execution_input.ExecutionInput
        ink_env.call.execution_input.EmptyArgumentList.
    
    Definition new
        `{H : State.Trait}
        (selector : ink_env.call.selector.Selector)
        : M (H := H) Self :=
      let* α0 := ink_env.call.execution_input.ArgumentList::["empty"] tt in
      Pure {| Self.selector := selector; Self.args := α0; |}.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Definition push_arg
        `{H : State.Trait}
        (self : Self)
        (arg : T)
        :
          M (H := H)
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument T)
                ink_env.call.execution_input.EmptyArgumentList)) :=
      let* α0 := self.["args"].["push_arg"] arg in
      Pure
        {|
          ink_env.call.execution_input.ExecutionInput.selector :=
            self.["selector"];
          ink_env.call.execution_input.ExecutionInput.args := α0;
        |}.
    
    Global Instance Method_push_arg `{H : State.Trait} :
      Notation.Dot "push_arg" := {
      Notation.dot := push_arg;
    }.
  End
    Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_2.
  
  Module
    Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest_2.
    Definition
      Self
      :=
      ink_env.call.execution_input.ExecutionInput
        (ink_env.call.execution_input.ArgumentList
          (ink_env.call.execution_input.Argument Head)
          Rest).
    
    Definition push_arg
        `{H : State.Trait}
        (self : Self)
        (arg : T)
        :
          M (H := H)
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgsList
                T
                (ink_env.call.execution_input.ArgsList Head Rest))) :=
      let* α0 := self.["args"].["push_arg"] arg in
      Pure
        {|
          ink_env.call.execution_input.ExecutionInput.selector :=
            self.["selector"];
          ink_env.call.execution_input.ExecutionInput.args := α0;
        |}.
    
    Global Instance Method_push_arg `{H : State.Trait} :
      Notation.Dot "push_arg" := {
      Notation.dot := push_arg;
    }.
  End
    Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest_2.
  
  Module Impl_ink_env_call_execution_input_ExecutionInput_Args_2.
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Definition update_selector
        `{H : State.Trait}
        (self : mut_ref Self)
        (selector : ink_env.call.selector.Selector)
        : M (H := H) unit :=
      let* _ := assign self.["selector"] selector in
      Pure tt.
    
    Global Instance Method_update_selector `{H : State.Trait} :
      Notation.Dot "update_selector" := {
      Notation.dot := update_selector;
    }.
  End Impl_ink_env_call_execution_input_ExecutionInput_Args_2.
  
  Module ArgumentList.
    Record t : Set := {
      head : Head;
      rest : Rest;
    }.
    
    Global Instance Get_head : Notation.Dot "head" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_rest : Notation.Dot "rest" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End ArgumentList.
  Definition ArgumentList : Set := ArgumentList.t.
  
  Module
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Section
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Context {Head Rest : Set}.
    
    Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ink_env.call.execution_input.ArgumentList Head Rest) :=
      let* α0 := core.clone.Clone.clone (addr_of self.["head"]) in
      let* α1 := core.clone.Clone.clone (addr_of self.["rest"]) in
      Pure
        {|
          ink_env.call.execution_input.ArgumentList.head := α0;
          ink_env.call.execution_input.ArgumentList.rest := α1;
        |}.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  End
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  
  Module
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Section
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Context {Head Rest : Set}.
    
    Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
    
    Definition default
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) (ink_env.call.execution_input.ArgumentList Head Rest) :=
      let* α0 := core.default.Default.default tt in
      let* α1 := core.default.Default.default tt in
      Pure
        {|
          ink_env.call.execution_input.ArgumentList.head := α0;
          ink_env.call.execution_input.ArgumentList.rest := α1;
        |}.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Section
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Context {Head Rest : Set}.
    
    Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field2_finish"]
        f
        "ArgumentList"
        "head"
        (addr_of self.["head"])
        "rest"
        (addr_of (addr_of self.["rest"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  End
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  
  Definition ArgsList : Set :=
    ink_env.call.execution_input.ArgumentList
      (ink_env.call.execution_input.Argument Head)
      Rest.
  
  Module Argument.
    Record t : Set := {
      arg : T;
    }.
    
    Global Instance Get_arg : Notation.Dot "arg" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Argument.
  Definition Argument : Set := Argument.t.
  
  Module Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
  Section Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.execution_input.Argument T.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ink_env.call.execution_input.Argument T) :=
      let* α0 := core.clone.Clone.clone (addr_of self.["arg"]) in
      Pure {| ink_env.call.execution_input.Argument.arg := α0; |}.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
  End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
  Section Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.execution_input.Argument T.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field1_finish"]
        f
        "Argument"
        "arg"
        (addr_of (addr_of self.["arg"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
  
  Module Impl_ink_env_call_execution_input_Argument_T_2.
    Definition Self := ink_env.call.execution_input.Argument T.
    
    Definition new `{H : State.Trait} (arg : T) : M (H := H) Self :=
      Pure {| Self.arg := arg; |}.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_ink_env_call_execution_input_Argument_T_2.
  
  Module ArgumentListEnd.
    Inductive t : Set := Build.
  End ArgumentListEnd.
  Definition ArgumentListEnd := ArgumentListEnd.t.
  
  Module Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
    Definition Self := ink_env.call.execution_input.ArgumentListEnd.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.call.execution_input.ArgumentListEnd :=
      Pure ink_env.call.execution_input.ArgumentListEnd.Build.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
  
  Module
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
    Definition Self := ink_env.call.execution_input.ArgumentListEnd.
    
    Definition default
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) ink_env.call.execution_input.ArgumentListEnd :=
      Pure {|  |}.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
    Definition Self := ink_env.call.execution_input.ArgumentListEnd.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["write_str"] f "ArgumentListEnd".
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
  
  Definition EmptyArgumentList : Set :=
    ink_env.call.execution_input.ArgumentList
      ink_env.call.execution_input.ArgumentListEnd
      ink_env.call.execution_input.ArgumentListEnd.
  
  Module Impl_ink_env_call_execution_input_EmptyArgumentList_2.
    Definition Self := ink_env.call.execution_input.EmptyArgumentList.
    
    Definition empty
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) ink_env.call.execution_input.EmptyArgumentList :=
      Pure
        {|
          ink_env.call.execution_input.ArgumentList.head :=
            ink_env.call.execution_input.ArgumentListEnd.Build;
          ink_env.call.execution_input.ArgumentList.rest :=
            ink_env.call.execution_input.ArgumentListEnd.Build;
        |}.
    
    Global Instance AssociatedFunction_empty `{H : State.Trait} :
      Notation.DoubleColon Self "empty" := {
      Notation.double_colon := empty;
    }.
    
    Definition push_arg
        `{H : State.Trait}
        (self : Self)
        (arg : T)
        :
          M (H := H)
            (ink_env.call.execution_input.ArgumentList
              (ink_env.call.execution_input.Argument T)
              Self) :=
      let* α0 := ink_env.call.execution_input.Argument::["new"] arg in
      Pure
        {|
          ink_env.call.execution_input.ArgumentList.head := α0;
          ink_env.call.execution_input.ArgumentList.rest := self;
        |}.
    
    Global Instance Method_push_arg `{H : State.Trait} :
      Notation.Dot "push_arg" := {
      Notation.dot := push_arg;
    }.
  End Impl_ink_env_call_execution_input_EmptyArgumentList_2.
  
  Module
    Impl_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest_2.
    Definition
      Self
      :=
      ink_env.call.execution_input.ArgumentList
        (ink_env.call.execution_input.Argument Head)
        Rest.
    
    Definition push_arg
        `{H : State.Trait}
        (self : Self)
        (arg : T)
        :
          M (H := H)
            (ink_env.call.execution_input.ArgumentList
              (ink_env.call.execution_input.Argument T)
              Self) :=
      let* α0 := ink_env.call.execution_input.Argument::["new"] arg in
      Pure
        {|
          ink_env.call.execution_input.ArgumentList.head := α0;
          ink_env.call.execution_input.ArgumentList.rest := self;
        |}.
    
    Global Instance Method_push_arg `{H : State.Trait} :
      Notation.Dot "push_arg" := {
      Notation.dot := push_arg;
    }.
  End
    Impl_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest_2.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
    Context {T : Set}.
    
    Definition Self := ink_env.call.execution_input.Argument T.
    
    Definition size_hint
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) usize :=
      parity_scale_codec.codec.Encode.size_hint (addr_of self.["arg"]).
    
    Global Instance Method_size_hint `{H : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Definition encode_to
        `{H : State.Trait}
        (self : ref Self)
        (output : mut_ref O)
        : M (H := H) unit :=
      parity_scale_codec.codec.Encode.encode_to (addr_of self.["arg"]) output.
    
    Global Instance Method_encode_to `{H : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
    Definition Self := ink_env.call.execution_input.EmptyArgumentList.
    
    Definition size_hint
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) usize :=
      Pure 0.
    
    Global Instance Method_size_hint `{H : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Definition encode_to
        `{H : State.Trait}
        (self : ref Self)
        (_output : mut_ref O)
        : M (H := H) unit :=
      Pure tt.
    
    Global Instance Method_encode_to `{H : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    Context {Head Rest : Set}.
    
    Definition
      Self
      :=
      ink_env.call.execution_input.ArgumentList
        (ink_env.call.execution_input.Argument Head)
        Rest.
    
    Definition size_hint
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) usize :=
      let* α0 :=
        parity_scale_codec.codec.Encode.size_hint (addr_of self.["head"]) in
      let* α1 :=
        parity_scale_codec.codec.Encode.size_hint (addr_of self.["rest"]) in
      α0.["add"] α1.
    
    Global Instance Method_size_hint `{H : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Definition encode_to
        `{H : State.Trait}
        (self : ref Self)
        (output : mut_ref O)
        : M (H := H) unit :=
      let* _ :=
        parity_scale_codec.codec.Encode.encode_to
          (addr_of self.["rest"])
          output in
      let* _ :=
        parity_scale_codec.codec.Encode.encode_to
          (addr_of self.["head"])
          output in
      Pure tt.
    
    Global Instance Method_encode_to `{H : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
    Context {Args : Set}.
    
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Definition size_hint
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) usize :=
      let* α0 :=
        parity_scale_codec.codec.Encode.size_hint (addr_of self.["selector"]) in
      let* α1 :=
        parity_scale_codec.codec.Encode.size_hint (addr_of self.["args"]) in
      α0.["add"] α1.
    
    Global Instance Method_size_hint `{H : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Definition encode_to
        `{H : State.Trait}
        (self : ref Self)
        (output : mut_ref O)
        : M (H := H) unit :=
      let* _ :=
        parity_scale_codec.codec.Encode.encode_to
          (addr_of self.["selector"])
          output in
      let* _ :=
        parity_scale_codec.codec.Encode.encode_to
          (addr_of self.["args"])
          output in
      Pure tt.
    
    Global Instance Method_encode_to `{H : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
End execution_input.

Module ExecutionInput.
  Record t : Set := {
    selector : ink_env.call.selector.Selector;
    args : Args;
  }.
  
  Global Instance Get_selector : Notation.Dot "selector" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_args : Notation.Dot "args" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End ExecutionInput.
Definition ExecutionInput : Set := ExecutionInput.t.

Module
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
Section
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
  Context {Args : Set}.
  
  Definition Self := ink_env.call.execution_input.ExecutionInput Args.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ink_env.call.execution_input.ExecutionInput Args) :=
    let* α0 := core.clone.Clone.clone (addr_of self.["selector"]) in
    let* α1 := core.clone.Clone.clone (addr_of self.["args"]) in
    Pure
      {|
        ink_env.call.execution_input.ExecutionInput.selector := α0;
        ink_env.call.execution_input.ExecutionInput.args := α1;
      |}.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
End Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.

Module
  Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
Section
  Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
  Context {Args : Set}.
  
  Definition Self := ink_env.call.execution_input.ExecutionInput Args.
  
  Definition default
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) (ink_env.call.execution_input.ExecutionInput Args) :=
    let* α0 := core.default.Default.default tt in
    let* α1 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.execution_input.ExecutionInput.selector := α0;
        ink_env.call.execution_input.ExecutionInput.args := α1;
      |}.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End
  Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
End
  Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.

Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
Section
  Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
  Context {Args : Set}.
  
  Definition Self := ink_env.call.execution_input.ExecutionInput Args.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field2_finish"]
      f
      "ExecutionInput"
      "selector"
      (addr_of self.["selector"])
      "args"
      (addr_of (addr_of self.["args"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.

Module
  Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_3.
  Definition
    Self
    :=
    ink_env.call.execution_input.ExecutionInput
      ink_env.call.execution_input.EmptyArgumentList.
  
  Definition new
      `{H : State.Trait}
      (selector : ink_env.call.selector.Selector)
      : M (H := H) Self :=
    let* α0 := ink_env.call.execution_input.ArgumentList::["empty"] tt in
    Pure {| Self.selector := selector; Self.args := α0; |}.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition push_arg
      `{H : State.Trait}
      (self : Self)
      (arg : T)
      :
        M (H := H)
          (ink_env.call.execution_input.ExecutionInput
            (ink_env.call.execution_input.ArgumentList
              (ink_env.call.execution_input.Argument T)
              ink_env.call.execution_input.EmptyArgumentList)) :=
    let* α0 := self.["args"].["push_arg"] arg in
    Pure
      {|
        ink_env.call.execution_input.ExecutionInput.selector :=
          self.["selector"];
        ink_env.call.execution_input.ExecutionInput.args := α0;
      |}.
  
  Global Instance Method_push_arg `{H : State.Trait} :
    Notation.Dot "push_arg" := {
    Notation.dot := push_arg;
  }.
End
  Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_EmptyArgumentList_3.

Module
  Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest_3.
  Definition
    Self
    :=
    ink_env.call.execution_input.ExecutionInput
      (ink_env.call.execution_input.ArgumentList
        (ink_env.call.execution_input.Argument Head)
        Rest).
  
  Definition push_arg
      `{H : State.Trait}
      (self : Self)
      (arg : T)
      :
        M (H := H)
          (ink_env.call.execution_input.ExecutionInput
            (ink_env.call.execution_input.ArgsList
              T
              (ink_env.call.execution_input.ArgsList Head Rest))) :=
    let* α0 := self.["args"].["push_arg"] arg in
    Pure
      {|
        ink_env.call.execution_input.ExecutionInput.selector :=
          self.["selector"];
        ink_env.call.execution_input.ExecutionInput.args := α0;
      |}.
  
  Global Instance Method_push_arg `{H : State.Trait} :
    Notation.Dot "push_arg" := {
    Notation.dot := push_arg;
  }.
End
  Impl_ink_env_call_execution_input_ExecutionInput_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest_3.

Module Impl_ink_env_call_execution_input_ExecutionInput_Args_3.
  Definition Self := ink_env.call.execution_input.ExecutionInput Args.
  
  Definition update_selector
      `{H : State.Trait}
      (self : mut_ref Self)
      (selector : ink_env.call.selector.Selector)
      : M (H := H) unit :=
    let* _ := assign self.["selector"] selector in
    Pure tt.
  
  Global Instance Method_update_selector `{H : State.Trait} :
    Notation.Dot "update_selector" := {
    Notation.dot := update_selector;
  }.
End Impl_ink_env_call_execution_input_ExecutionInput_Args_3.

Module ArgumentList.
  Record t : Set := {
    head : Head;
    rest : Rest;
  }.
  
  Global Instance Get_head : Notation.Dot "head" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_rest : Notation.Dot "rest" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End ArgumentList.
Definition ArgumentList : Set := ArgumentList.t.

Module
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
Section
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Context {Head Rest : Set}.
  
  Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ink_env.call.execution_input.ArgumentList Head Rest) :=
    let* α0 := core.clone.Clone.clone (addr_of self.["head"]) in
    let* α1 := core.clone.Clone.clone (addr_of self.["rest"]) in
    Pure
      {|
        ink_env.call.execution_input.ArgumentList.head := α0;
        ink_env.call.execution_input.ArgumentList.rest := α1;
      |}.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
End
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.

Module
  Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
Section
  Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Context {Head Rest : Set}.
  
  Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
  
  Definition default
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) (ink_env.call.execution_input.ArgumentList Head Rest) :=
    let* α0 := core.default.Default.default tt in
    let* α1 := core.default.Default.default tt in
    Pure
      {|
        ink_env.call.execution_input.ArgumentList.head := α0;
        ink_env.call.execution_input.ArgumentList.rest := α1;
      |}.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End
  Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
End
  Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.

Module
  Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
Section
  Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Context {Head Rest : Set}.
  
  Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field2_finish"]
      f
      "ArgumentList"
      "head"
      (addr_of self.["head"])
      "rest"
      (addr_of (addr_of self.["rest"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.

Definition ArgsList : Set :=
  ink_env.call.execution_input.ArgumentList
    (ink_env.call.execution_input.Argument Head)
    Rest.

Module Argument.
  Record t : Set := {
    arg : T;
  }.
  
  Global Instance Get_arg : Notation.Dot "arg" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Argument.
Definition Argument : Set := Argument.t.

Module Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
Section Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.execution_input.Argument T.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ink_env.call.execution_input.Argument T) :=
    let* α0 := core.clone.Clone.clone (addr_of self.["arg"]) in
    Pure {| ink_env.call.execution_input.Argument.arg := α0; |}.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.

Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
Section Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.execution_input.Argument T.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field1_finish"]
      f
      "Argument"
      "arg"
      (addr_of (addr_of self.["arg"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.

Module Impl_ink_env_call_execution_input_Argument_T_3.
  Definition Self := ink_env.call.execution_input.Argument T.
  
  Definition new `{H : State.Trait} (arg : T) : M (H := H) Self :=
    Pure {| Self.arg := arg; |}.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_ink_env_call_execution_input_Argument_T_3.

Module ArgumentListEnd.
  Inductive t : Set := Build.
End ArgumentListEnd.
Definition ArgumentListEnd := ArgumentListEnd.t.

Module Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
  Definition Self := ink_env.call.execution_input.ArgumentListEnd.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.call.execution_input.ArgumentListEnd :=
    Pure ink_env.call.execution_input.ArgumentListEnd.Build.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.

Module
  Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
  Definition Self := ink_env.call.execution_input.ArgumentListEnd.
  
  Definition default
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) ink_env.call.execution_input.ArgumentListEnd :=
    Pure {|  |}.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.

Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
  Definition Self := ink_env.call.execution_input.ArgumentListEnd.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["write_str"] f "ArgumentListEnd".
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.

Definition EmptyArgumentList : Set :=
  ink_env.call.execution_input.ArgumentList
    ink_env.call.execution_input.ArgumentListEnd
    ink_env.call.execution_input.ArgumentListEnd.

Module Impl_ink_env_call_execution_input_EmptyArgumentList_3.
  Definition Self := ink_env.call.execution_input.EmptyArgumentList.
  
  Definition empty
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) ink_env.call.execution_input.EmptyArgumentList :=
    Pure
      {|
        ink_env.call.execution_input.ArgumentList.head :=
          ink_env.call.execution_input.ArgumentListEnd.Build;
        ink_env.call.execution_input.ArgumentList.rest :=
          ink_env.call.execution_input.ArgumentListEnd.Build;
      |}.
  
  Global Instance AssociatedFunction_empty `{H : State.Trait} :
    Notation.DoubleColon Self "empty" := {
    Notation.double_colon := empty;
  }.
  
  Definition push_arg
      `{H : State.Trait}
      (self : Self)
      (arg : T)
      :
        M (H := H)
          (ink_env.call.execution_input.ArgumentList
            (ink_env.call.execution_input.Argument T)
            Self) :=
    let* α0 := ink_env.call.execution_input.Argument::["new"] arg in
    Pure
      {|
        ink_env.call.execution_input.ArgumentList.head := α0;
        ink_env.call.execution_input.ArgumentList.rest := self;
      |}.
  
  Global Instance Method_push_arg `{H : State.Trait} :
    Notation.Dot "push_arg" := {
    Notation.dot := push_arg;
  }.
End Impl_ink_env_call_execution_input_EmptyArgumentList_3.

Module
  Impl_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest_3.
  Definition
    Self
    :=
    ink_env.call.execution_input.ArgumentList
      (ink_env.call.execution_input.Argument Head)
      Rest.
  
  Definition push_arg
      `{H : State.Trait}
      (self : Self)
      (arg : T)
      :
        M (H := H)
          (ink_env.call.execution_input.ArgumentList
            (ink_env.call.execution_input.Argument T)
            Self) :=
    let* α0 := ink_env.call.execution_input.Argument::["new"] arg in
    Pure
      {|
        ink_env.call.execution_input.ArgumentList.head := α0;
        ink_env.call.execution_input.ArgumentList.rest := self;
      |}.
  
  Global Instance Method_push_arg `{H : State.Trait} :
    Notation.Dot "push_arg" := {
    Notation.dot := push_arg;
  }.
End
  Impl_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest_3.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
Section
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
  Context {T : Set}.
  
  Definition Self := ink_env.call.execution_input.Argument T.
  
  Definition size_hint
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) usize :=
    parity_scale_codec.codec.Encode.size_hint (addr_of self.["arg"]).
  
  Global Instance Method_size_hint `{H : State.Trait} :
    Notation.Dot "size_hint" := {
    Notation.dot := size_hint;
  }.
  
  Definition encode_to
      `{H : State.Trait}
      (self : ref Self)
      (output : mut_ref O)
      : M (H := H) unit :=
    parity_scale_codec.codec.Encode.encode_to (addr_of self.["arg"]) output.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
  Definition Self := ink_env.call.execution_input.EmptyArgumentList.
  
  Definition size_hint
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) usize :=
    Pure 0.
  
  Global Instance Method_size_hint `{H : State.Trait} :
    Notation.Dot "size_hint" := {
    Notation.dot := size_hint;
  }.
  
  Definition encode_to
      `{H : State.Trait}
      (self : ref Self)
      (_output : mut_ref O)
      : M (H := H) unit :=
    Pure tt.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
Section
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
  Context {Head Rest : Set}.
  
  Definition
    Self
    :=
    ink_env.call.execution_input.ArgumentList
      (ink_env.call.execution_input.Argument Head)
      Rest.
  
  Definition size_hint
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) usize :=
    let* α0 :=
      parity_scale_codec.codec.Encode.size_hint (addr_of self.["head"]) in
    let* α1 :=
      parity_scale_codec.codec.Encode.size_hint (addr_of self.["rest"]) in
    α0.["add"] α1.
  
  Global Instance Method_size_hint `{H : State.Trait} :
    Notation.Dot "size_hint" := {
    Notation.dot := size_hint;
  }.
  
  Definition encode_to
      `{H : State.Trait}
      (self : ref Self)
      (output : mut_ref O)
      : M (H := H) unit :=
    let* _ :=
      parity_scale_codec.codec.Encode.encode_to
        (addr_of self.["rest"])
        output in
    let* _ :=
      parity_scale_codec.codec.Encode.encode_to
        (addr_of self.["head"])
        output in
    Pure tt.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
Section
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
  Context {Args : Set}.
  
  Definition Self := ink_env.call.execution_input.ExecutionInput Args.
  
  Definition size_hint
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) usize :=
    let* α0 :=
      parity_scale_codec.codec.Encode.size_hint (addr_of self.["selector"]) in
    let* α1 :=
      parity_scale_codec.codec.Encode.size_hint (addr_of self.["args"]) in
    α0.["add"] α1.
  
  Global Instance Method_size_hint `{H : State.Trait} :
    Notation.Dot "size_hint" := {
    Notation.dot := size_hint;
  }.
  
  Definition encode_to
      `{H : State.Trait}
      (self : ref Self)
      (output : mut_ref O)
      : M (H := H) unit :=
    let* _ :=
      parity_scale_codec.codec.Encode.encode_to
        (addr_of self.["selector"])
        output in
    let* _ :=
      parity_scale_codec.codec.Encode.encode_to
        (addr_of self.["args"])
        output in
    Pure tt.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.

Module selector.
  Module Selector.
    Record t : Set := {
      bytes : list u8;
    }.
    
    Global Instance Get_bytes : Notation.Dot "bytes" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Selector.
  Definition Selector : Set := Selector.t.
  
  Module Impl_core_default_Default_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Definition default
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) ink_env.call.selector.Selector :=
      let* α0 := core.default.Default.default tt in
      Pure {| ink_env.call.selector.Selector.bytes := α0; |}.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_env_call_selector_Selector.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
      string -> Array_u8 -> 
      M (H := H) core.fmt.Result.
    
    Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
      core.fmt.Formatter "debug_struct_field1_finish" := {
      Notation.double_colon := debug_struct_field1_finish; }.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field1_finish"]
        f
        "Selector"
        "bytes"
        (addr_of (addr_of self.["bytes"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
  
  Module Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
  
  Module Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.call.selector.Selector :=
      let _ := tt in
      self.["deref"].
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.call.selector.Selector)
        : M (H := H) bool :=
      self.["bytes"].["eq"] other.["bytes"].
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
  
  Module Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      let _ := tt in
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
  
  Module Impl_core_convert_From_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Definition from
        `{H : State.Trait}
        (original : list u8)
        : M (H := H) ink_env.call.selector.Selector :=
      Pure {| ink_env.call.selector.Selector.bytes := original; |}.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I : core.convert.From.Trait Self (T := list u8) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_call_selector_Selector.
  
  Module Impl_ink_env_call_selector_Selector_2.
    Definition Self := ink_env.call.selector.Selector.
    
    Definition new `{H : State.Trait} (bytes : list u8) : M (H := H) Self :=
      Pure {| Self.bytes := bytes; |}.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Definition to_bytes `{H : State.Trait} (self : Self) : M (H := H) list u8 :=
      Pure self.["bytes"].
    
    Global Instance Method_to_bytes `{H : State.Trait} :
      Notation.Dot "to_bytes" := {
      Notation.dot := to_bytes;
    }.
  End Impl_ink_env_call_selector_Selector_2.
End selector.

Module Selector.
  Record t : Set := {
    bytes : list u8;
  }.
  
  Global Instance Get_bytes : Notation.Dot "bytes" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Selector.
Definition Selector : Set := Selector.t.

Module Impl_core_default_Default_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Definition default
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) ink_env.call.selector.Selector :=
    let* α0 := core.default.Default.default tt in
    Pure {| ink_env.call.selector.Selector.bytes := α0; |}.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_env_call_selector_Selector.

Module Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
    string -> Array_u8 -> 
    M (H := H) core.fmt.Result.
  
  Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
    core.fmt.Formatter "debug_struct_field1_finish" := {
    Notation.double_colon := debug_struct_field1_finish; }.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field1_finish"]
      f
      "Selector"
      "bytes"
      (addr_of (addr_of self.["bytes"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.

Module Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_call_selector_Selector.

Module Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.call.selector.Selector :=
    let _ := tt in
    self.["deref"].
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_call_selector_Selector.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.

Module Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.call.selector.Selector)
      : M (H := H) bool :=
    self.["bytes"].["eq"] other.["bytes"].
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.

Module Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.

Module Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    let _ := tt in
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.

Module Impl_core_convert_From_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Definition from
      `{H : State.Trait}
      (original : list u8)
      : M (H := H) ink_env.call.selector.Selector :=
    Pure {| ink_env.call.selector.Selector.bytes := original; |}.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := list u8) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_call_selector_Selector.

Module Impl_parity_scale_codec_codec_Decode_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Definition decode
      `{H : State.Trait}
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : M (H := H) (core.result.Result Self parity_scale_codec.error.Error) :=
    let* __codec_res_edqy :=
      parity_scale_codec.codec.Decode.decode __codec_input_edqy in
    let* α0 :=
      match __codec_res_edqy with
      | core.result.Result.Err e =>
        let* α0 := e.["chain"] "Could not decode `Selector::bytes`" in
        Return (core.result.Result.Err α0)
      | core.result.Result.Ok __codec_res_edqy => Pure __codec_res_edqy
      end in
    Pure
      (core.result.Result.Ok {| ink_env.call.selector.Selector.bytes := α0; |}).
  
  Global Instance AssociatedFunction_decode `{H : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
  }.
End Impl_parity_scale_codec_codec_Decode_for_ink_env_call_selector_Selector.

Module Impl_parity_scale_codec_codec_Encode_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Definition encode_to
      `{H : State.Trait}
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : M (H := H) unit :=
    parity_scale_codec.codec.Encode.encode_to
      (addr_of (addr_of self.["bytes"]))
      __codec_dest_edqy.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Definition encode
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (alloc.vec.Vec Root.core.primitive.u8) :=
    parity_scale_codec.codec.Encode.encode (addr_of (addr_of self.["bytes"])).
  
  Global Instance Method_encode `{H : State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Definition using_encoded
      `{H : State.Trait}
      (self : ref Self)
      (f : F)
      : M (H := H) R :=
    parity_scale_codec.codec.Encode.using_encoded
      (addr_of (addr_of self.["bytes"]))
      f.
  
  Global Instance Method_using_encoded `{H : State.Trait} :
    Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End Impl_parity_scale_codec_codec_Encode_for_ink_env_call_selector_Selector.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Global Instance I : parity_scale_codec.encode_like.EncodeLike.Trait Self :=
    parity_scale_codec.encode_like.EncodeLike.Build_Trait _.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_env_call_selector_Selector.

Module Impl_ink_env_call_selector_Selector_3.
  Definition Self := ink_env.call.selector.Selector.
  
  Definition new `{H : State.Trait} (bytes : list u8) : M (H := H) Self :=
    Pure {| Self.bytes := bytes; |}.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition to_bytes `{H : State.Trait} (self : Self) : M (H := H) list u8 :=
    Pure self.["bytes"].
  
  Global Instance Method_to_bytes `{H : State.Trait} :
    Notation.Dot "to_bytes" := {
    Notation.dot := to_bytes;
  }.
End Impl_ink_env_call_selector_Selector_3.

Module utils.
  
End utils.

Module chain_extension.
  Module FromStatusCode.
    Class Trait (Self : Set) : Set := {
      from_status_code
        `{H : State.Trait}
        :
        u32 -> (M (H := H) (core.result.Result unit Self));
    }.
    
    Global Instance Method_from_status_code `{H : State.Trait} `(Trait)
      : Notation.Dot "from_status_code" := {
      Notation.dot := from_status_code;
    }.
  End FromStatusCode.
  
  Module ChainExtensionMethod.
    Record t : Set := {
      func_id : u32;
      state : core.marker.PhantomData (unit -> (I * O * ErrorCode));
    }.
    
    Global Instance Get_func_id : Notation.Dot "func_id" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_state : Notation.Dot "state" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End ChainExtensionMethod.
  Definition ChainExtensionMethod : Set := ChainExtensionMethod.t.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
  Section
    Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
    Context {I O ErrorCode : Set}.
    
    Definition
      Self
      :=
      ink_env.chain_extension.ChainExtensionMethod I O ErrorCode.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field2_finish"]
        f
        "ChainExtensionMethod"
        "func_id"
        (addr_of self.["func_id"])
        "state"
        (addr_of (addr_of self.["state"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
  End
    Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
  
  Module Impl_ink_env_chain_extension_ChainExtensionMethod_Tuple__Tuple__Tuple_.
    Definition
      Self
      :=
      ink_env.chain_extension.ChainExtensionMethod unit unit unit.
    
    Definition build `{H : State.Trait} (func_id : u32) : M (H := H) Self :=
      let* α0 := core.default.Default.default tt in
      Pure {| Self.func_id := func_id; Self.state := α0; |}.
    
    Global Instance AssociatedFunction_build `{H : State.Trait} :
      Notation.DoubleColon Self "build" := {
      Notation.double_colon := build;
    }.
  End Impl_ink_env_chain_extension_ChainExtensionMethod_Tuple__Tuple__Tuple_.
  
  Module Impl_ink_env_chain_extension_ChainExtensionMethod_Tuple__O_ErrorCode.
    Definition
      Self
      :=
      ink_env.chain_extension.ChainExtensionMethod unit O ErrorCode.
    
    Definition input
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.chain_extension.ChainExtensionMethod I O ErrorCode) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.chain_extension.ChainExtensionMethod.func_id :=
            self.["func_id"];
          ink_env.chain_extension.ChainExtensionMethod.state := α0;
        |}.
    
    Global Instance Method_input `{H : State.Trait} : Notation.Dot "input" := {
      Notation.dot := input;
    }.
  End Impl_ink_env_chain_extension_ChainExtensionMethod_Tuple__O_ErrorCode.
  
  Module Impl_ink_env_chain_extension_ChainExtensionMethod_I_Tuple__ErrorCode.
    Definition
      Self
      :=
      ink_env.chain_extension.ChainExtensionMethod I unit ErrorCode.
    
    Definition output
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.chain_extension.ChainExtensionMethod I O ErrorCode) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.chain_extension.ChainExtensionMethod.func_id :=
            self.["func_id"];
          ink_env.chain_extension.ChainExtensionMethod.state := α0;
        |}.
    
    Global Instance Method_output `{H : State.Trait} :
      Notation.Dot "output" := {
      Notation.dot := output;
    }.
  End Impl_ink_env_chain_extension_ChainExtensionMethod_I_Tuple__ErrorCode.
  
  Module Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_Tuple_.
    Definition Self := ink_env.chain_extension.ChainExtensionMethod I O unit.
    
    Definition ignore_error_code
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.chain_extension.ChainExtensionMethod
              I
              O
              ink_env.chain_extension.state.IgnoreErrorCode) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.chain_extension.ChainExtensionMethod.func_id :=
            self.["func_id"];
          ink_env.chain_extension.ChainExtensionMethod.state := α0;
        |}.
    
    Global Instance Method_ignore_error_code `{H : State.Trait} :
      Notation.Dot "ignore_error_code" := {
      Notation.dot := ignore_error_code;
    }.
    
    Definition handle_error_code
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.chain_extension.ChainExtensionMethod
              I
              O
              (ink_env.chain_extension.state.HandleErrorCode ErrorCode)) :=
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.chain_extension.ChainExtensionMethod.func_id :=
            self.["func_id"];
          ink_env.chain_extension.ChainExtensionMethod.state := α0;
        |}.
    
    Global Instance Method_handle_error_code `{H : State.Trait} :
      Notation.Dot "handle_error_code" := {
      Notation.dot := handle_error_code;
    }.
  End Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_Tuple_.
  
  Module state.
    Module IgnoreErrorCode.
      Inductive t : Set :=
      .
    End IgnoreErrorCode.
    Definition IgnoreErrorCode := IgnoreErrorCode.t.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
      Definition Self := ink_env.chain_extension.state.IgnoreErrorCode.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.intrinsics.unreachable tt.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
    
    Module HandleErrorCode.
      Record t : Set := {
        error_code : core.marker.PhantomData (unit -> T);
      }.
      
      Global Instance Get_error_code : Notation.Dot "error_code" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End HandleErrorCode.
    Definition HandleErrorCode : Set := HandleErrorCode.t.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
    Section
      Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
      Context {T : Set}.
      
      Definition Self := ink_env.chain_extension.state.HandleErrorCode T.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_struct_field1_finish"]
          f
          "HandleErrorCode"
          "error_code"
          (addr_of (addr_of self.["error_code"])).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
    End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
  End state.
  
  Module
    Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_HandleErrorCode_ErrorCode.
    Definition
      Self
      :=
      ink_env.chain_extension.ChainExtensionMethod
        I
        O
        (ink_env.chain_extension.state.HandleErrorCode ErrorCode).
    
    Definition call
        `{H : State.Trait}
        (self : Self)
        (input : ref I)
        :
          M (H := H)
            (core.result.Result
              ink_env.chain_extension.IsResultType.Ok
              ink_env.chain_extension.IsResultType.Err) :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          ink_env.backend.EnvBackend.call_chain_extension
            instance
            self.["func_id"]
            input
            ErrorCode::["from_status_code"]
            (fun output =>
              let* α0 :=
                parity_scale_codec.codec.Decode.decode (addr_of output) in
              α0.["map_err"] core.convert.Into.into)).
    
    Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
      Notation.dot := call;
    }.
  End
    Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_HandleErrorCode_ErrorCode.
  
  Module
    Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_IgnoreErrorCode.
    Definition
      Self
      :=
      ink_env.chain_extension.ChainExtensionMethod
        I
        O
        ink_env.chain_extension.state.IgnoreErrorCode.
    
    Definition call
        `{H : State.Trait}
        (self : Self)
        (input : ref I)
        :
          M (H := H)
            (core.result.Result
              ink_env.chain_extension.IsResultType.Ok
              ink_env.chain_extension.IsResultType.Err) :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          ink_env.backend.EnvBackend.call_chain_extension
            instance
            self.["func_id"]
            input
            (fun _status_code => Pure (core.result.Result.Ok tt))
            (fun output =>
              let* α0 :=
                parity_scale_codec.codec.Decode.decode (addr_of output) in
              α0.["map_err"] core.convert.Into.into)).
    
    Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
      Notation.dot := call;
    }.
  End
    Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_IgnoreErrorCode.
  
  Module
    Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_HandleErrorCode_ErrorCode_2.
    Definition
      Self
      :=
      ink_env.chain_extension.ChainExtensionMethod
        I
        O
        (ink_env.chain_extension.state.HandleErrorCode ErrorCode).
    
    Definition call
        `{H : State.Trait}
        (self : Self)
        (input : ref I)
        : M (H := H) (core.result.Result O ErrorCode) :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          ink_env.backend.EnvBackend.call_chain_extension
            instance
            self.["func_id"]
            input
            ErrorCode::["from_status_code"]
            (fun output =>
              let* decoded :=
                let* α0 :=
                  parity_scale_codec.codec.Decode.decode (addr_of output) in
                α0.["expect"]
                  "encountered error while decoding chain extension method call return value" in
              Pure (core.result.Result.Ok decoded))).
    
    Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
      Notation.dot := call;
    }.
  End
    Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_HandleErrorCode_ErrorCode_2.
  
  Module
    Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_IgnoreErrorCode_2.
    Definition
      Self
      :=
      ink_env.chain_extension.ChainExtensionMethod
        I
        O
        ink_env.chain_extension.state.IgnoreErrorCode.
    
    Definition call
        `{H : State.Trait}
        (self : Self)
        (input : ref I)
        : M (H := H) O :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* α0 :=
            ink_env.backend.EnvBackend.call_chain_extension
              instance
              self.["func_id"]
              input
              (fun _status_code => Pure (core.result.Result.Ok tt))
              (fun output =>
                let* decoded :=
                  let* α0 :=
                    parity_scale_codec.codec.Decode.decode (addr_of output) in
                  α0.["expect"]
                    "encountered error while decoding chain extension method call return value" in
                Pure (core.result.Result.Ok decoded)) in
          α0.["expect"] "assume the chain extension method never fails").
    
    Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
      Notation.dot := call;
    }.
  End
    Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_IgnoreErrorCode_2.
  
  Module IsResultType.
    Class Trait (Self : Set) {Ok : Set} {Err : Set} : Set := {
      Ok := Ok;
      Err := Err;
    }.
    
    Global Instance Method_Ok `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Ok" := {
      Notation.double_colon_type := Ok;
    }.
    Global Instance Method_Err `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Err" := {
      Notation.double_colon_type := Err;
    }.
  End IsResultType.
  
  Module
    Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
  Section
    Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
    Context {T E : Set}.
    
    Definition Self := core.result.Result T E.
    
    Global Instance I :
        ink_env.chain_extension.private.IsResultTypeSealed.Trait Self :=
      ink_env.chain_extension.private.IsResultTypeSealed.Build_Trait _.
  End
    Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
  End
    Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
  
  Module Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
  Section Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
    Context {T E : Set}.
    
    Definition Self := core.result.Result T E.
    
    Definition Ok : Set := T.
    
    Definition Err : Set := E.
    
    Global Instance I : ink_env.chain_extension.IsResultType.Trait Self := {
    }.
  End Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
  End Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
  
  Module private.
    Module IsResultTypeSealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Set := {
      }.
      Global Set Primitive Projections.
    End IsResultTypeSealed.
  End private.
End chain_extension.

Module FromStatusCode.
  Class Trait (Self : Set) : Set := {
    from_status_code
      `{H : State.Trait}
      :
      u32 -> (M (H := H) (core.result.Result unit Self));
  }.
  
  Global Instance Method_from_status_code `{H : State.Trait} `(Trait)
    : Notation.Dot "from_status_code" := {
    Notation.dot := from_status_code;
  }.
End FromStatusCode.

Module ChainExtensionMethod.
  Record t : Set := {
    func_id : u32;
    state : core.marker.PhantomData (unit -> (I * O * ErrorCode));
  }.
  
  Global Instance Get_func_id : Notation.Dot "func_id" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_state : Notation.Dot "state" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End ChainExtensionMethod.
Definition ChainExtensionMethod : Set := ChainExtensionMethod.t.

Module
  Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
Section
  Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
  Context {I O ErrorCode : Set}.
  
  Definition Self := ink_env.chain_extension.ChainExtensionMethod I O ErrorCode.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field2_finish"]
      f
      "ChainExtensionMethod"
      "func_id"
      (addr_of self.["func_id"])
      "state"
      (addr_of (addr_of self.["state"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End
  Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
End
  Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.

Module Impl_ink_env_chain_extension_ChainExtensionMethod_Tuple__Tuple__Tuple__2.
  Definition
    Self
    :=
    ink_env.chain_extension.ChainExtensionMethod unit unit unit.
  
  Definition build `{H : State.Trait} (func_id : u32) : M (H := H) Self :=
    let* α0 := core.default.Default.default tt in
    Pure {| Self.func_id := func_id; Self.state := α0; |}.
  
  Global Instance AssociatedFunction_build `{H : State.Trait} :
    Notation.DoubleColon Self "build" := {
    Notation.double_colon := build;
  }.
End Impl_ink_env_chain_extension_ChainExtensionMethod_Tuple__Tuple__Tuple__2.

Module Impl_ink_env_chain_extension_ChainExtensionMethod_Tuple__O_ErrorCode_2.
  Definition
    Self
    :=
    ink_env.chain_extension.ChainExtensionMethod unit O ErrorCode.
  
  Definition input
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.chain_extension.ChainExtensionMethod I O ErrorCode) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.chain_extension.ChainExtensionMethod.func_id :=
          self.["func_id"];
        ink_env.chain_extension.ChainExtensionMethod.state := α0;
      |}.
  
  Global Instance Method_input `{H : State.Trait} : Notation.Dot "input" := {
    Notation.dot := input;
  }.
End Impl_ink_env_chain_extension_ChainExtensionMethod_Tuple__O_ErrorCode_2.

Module Impl_ink_env_chain_extension_ChainExtensionMethod_I_Tuple__ErrorCode_2.
  Definition
    Self
    :=
    ink_env.chain_extension.ChainExtensionMethod I unit ErrorCode.
  
  Definition output
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.chain_extension.ChainExtensionMethod I O ErrorCode) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.chain_extension.ChainExtensionMethod.func_id :=
          self.["func_id"];
        ink_env.chain_extension.ChainExtensionMethod.state := α0;
      |}.
  
  Global Instance Method_output `{H : State.Trait} : Notation.Dot "output" := {
    Notation.dot := output;
  }.
End Impl_ink_env_chain_extension_ChainExtensionMethod_I_Tuple__ErrorCode_2.

Module Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_Tuple__2.
  Definition Self := ink_env.chain_extension.ChainExtensionMethod I O unit.
  
  Definition ignore_error_code
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.chain_extension.ChainExtensionMethod
            I
            O
            ink_env.chain_extension.state.IgnoreErrorCode) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.chain_extension.ChainExtensionMethod.func_id :=
          self.["func_id"];
        ink_env.chain_extension.ChainExtensionMethod.state := α0;
      |}.
  
  Global Instance Method_ignore_error_code `{H : State.Trait} :
    Notation.Dot "ignore_error_code" := {
    Notation.dot := ignore_error_code;
  }.
  
  Definition handle_error_code
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.chain_extension.ChainExtensionMethod
            I
            O
            (ink_env.chain_extension.state.HandleErrorCode ErrorCode)) :=
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.chain_extension.ChainExtensionMethod.func_id :=
          self.["func_id"];
        ink_env.chain_extension.ChainExtensionMethod.state := α0;
      |}.
  
  Global Instance Method_handle_error_code `{H : State.Trait} :
    Notation.Dot "handle_error_code" := {
    Notation.dot := handle_error_code;
  }.
End Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_Tuple__2.

Module state.
  Module IgnoreErrorCode.
    Inductive t : Set :=
    .
  End IgnoreErrorCode.
  Definition IgnoreErrorCode := IgnoreErrorCode.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
    Definition Self := ink_env.chain_extension.state.IgnoreErrorCode.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
  
  Module HandleErrorCode.
    Record t : Set := {
      error_code : core.marker.PhantomData (unit -> T);
    }.
    
    Global Instance Get_error_code : Notation.Dot "error_code" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End HandleErrorCode.
  Definition HandleErrorCode : Set := HandleErrorCode.t.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
  Section
    Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
    Context {T : Set}.
    
    Definition Self := ink_env.chain_extension.state.HandleErrorCode T.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field1_finish"]
        f
        "HandleErrorCode"
        "error_code"
        (addr_of (addr_of self.["error_code"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
  End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
End state.

Module IgnoreErrorCode.
  Inductive t : Set :=
  .
End IgnoreErrorCode.
Definition IgnoreErrorCode := IgnoreErrorCode.t.

Module Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
  Definition Self := ink_env.chain_extension.state.IgnoreErrorCode.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.

Module HandleErrorCode.
  Record t : Set := {
    error_code : core.marker.PhantomData (unit -> T);
  }.
  
  Global Instance Get_error_code : Notation.Dot "error_code" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End HandleErrorCode.
Definition HandleErrorCode : Set := HandleErrorCode.t.

Module Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
Section Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
  Context {T : Set}.
  
  Definition Self := ink_env.chain_extension.state.HandleErrorCode T.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field1_finish"]
      f
      "HandleErrorCode"
      "error_code"
      (addr_of (addr_of self.["error_code"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.

Module
  Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_HandleErrorCode_ErrorCode_3.
  Definition
    Self
    :=
    ink_env.chain_extension.ChainExtensionMethod
      I
      O
      (ink_env.chain_extension.state.HandleErrorCode ErrorCode).
  
  Definition call
      `{H : State.Trait}
      (self : Self)
      (input : ref I)
      :
        M (H := H)
          (core.result.Result
            ink_env.chain_extension.IsResultType.Ok
            ink_env.chain_extension.IsResultType.Err) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.call_chain_extension
          instance
          self.["func_id"]
          input
          ErrorCode::["from_status_code"]
          (fun output =>
            let* α0 :=
              parity_scale_codec.codec.Decode.decode (addr_of output) in
            α0.["map_err"] core.convert.Into.into)).
  
  Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
    Notation.dot := call;
  }.
End
  Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_HandleErrorCode_ErrorCode_3.

Module
  Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_IgnoreErrorCode_3.
  Definition
    Self
    :=
    ink_env.chain_extension.ChainExtensionMethod
      I
      O
      ink_env.chain_extension.state.IgnoreErrorCode.
  
  Definition call
      `{H : State.Trait}
      (self : Self)
      (input : ref I)
      :
        M (H := H)
          (core.result.Result
            ink_env.chain_extension.IsResultType.Ok
            ink_env.chain_extension.IsResultType.Err) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.call_chain_extension
          instance
          self.["func_id"]
          input
          (fun _status_code => Pure (core.result.Result.Ok tt))
          (fun output =>
            let* α0 :=
              parity_scale_codec.codec.Decode.decode (addr_of output) in
            α0.["map_err"] core.convert.Into.into)).
  
  Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
    Notation.dot := call;
  }.
End
  Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_IgnoreErrorCode_3.

Module
  Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_HandleErrorCode_ErrorCode_4.
  Definition
    Self
    :=
    ink_env.chain_extension.ChainExtensionMethod
      I
      O
      (ink_env.chain_extension.state.HandleErrorCode ErrorCode).
  
  Definition call
      `{H : State.Trait}
      (self : Self)
      (input : ref I)
      : M (H := H) (core.result.Result O ErrorCode) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        ink_env.backend.EnvBackend.call_chain_extension
          instance
          self.["func_id"]
          input
          ErrorCode::["from_status_code"]
          (fun output =>
            let* decoded :=
              let* α0 :=
                parity_scale_codec.codec.Decode.decode (addr_of output) in
              α0.["expect"]
                "encountered error while decoding chain extension method call return value" in
            Pure (core.result.Result.Ok decoded))).
  
  Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
    Notation.dot := call;
  }.
End
  Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_HandleErrorCode_ErrorCode_4.

Module
  Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_IgnoreErrorCode_4.
  Definition
    Self
    :=
    ink_env.chain_extension.ChainExtensionMethod
      I
      O
      ink_env.chain_extension.state.IgnoreErrorCode.
  
  Definition call
      `{H : State.Trait}
      (self : Self)
      (input : ref I)
      : M (H := H) O :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* α0 :=
          ink_env.backend.EnvBackend.call_chain_extension
            instance
            self.["func_id"]
            input
            (fun _status_code => Pure (core.result.Result.Ok tt))
            (fun output =>
              let* decoded :=
                let* α0 :=
                  parity_scale_codec.codec.Decode.decode (addr_of output) in
                α0.["expect"]
                  "encountered error while decoding chain extension method call return value" in
              Pure (core.result.Result.Ok decoded)) in
        α0.["expect"] "assume the chain extension method never fails").
  
  Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
    Notation.dot := call;
  }.
End
  Impl_ink_env_chain_extension_ChainExtensionMethod_I_O_ink_env_chain_extension_state_IgnoreErrorCode_4.

Module IsResultType.
  Class Trait (Self : Set) {Ok : Set} {Err : Set} : Set := {
    Ok := Ok;
    Err := Err;
  }.
  
  Global Instance Method_Ok `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Ok" := {
    Notation.double_colon_type := Ok;
  }.
  Global Instance Method_Err `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Err" := {
    Notation.double_colon_type := Err;
  }.
End IsResultType.

Module
  Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
Section
  Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
  Context {T E : Set}.
  
  Definition Self := core.result.Result T E.
  
  Global Instance I :
      ink_env.chain_extension.private.IsResultTypeSealed.Trait Self :=
    ink_env.chain_extension.private.IsResultTypeSealed.Build_Trait _.
End
  Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
End
  Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.

Module Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
Section Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
  Context {T E : Set}.
  
  Definition Self := core.result.Result T E.
  
  Definition Ok : Set := T.
  
  Definition Err : Set := E.
  
  Global Instance I : ink_env.chain_extension.IsResultType.Trait Self := {
  }.
End Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
End Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.

Module private.
  Module IsResultTypeSealed.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End IsResultTypeSealed.
End private.

Module IsResultTypeSealed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End IsResultTypeSealed.

Module contract.
  Module ContractEnv.
    Class Trait
        (Self : Set)
        {Env : Set}
        `{ink_env.types.Environment.Trait Env} :
        Set := {
      Env := Env;
    }.
    
    Global Instance Method_Env `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Env" := {
      Notation.double_colon_type := Env;
    }.
  End ContractEnv.
  
  Module ContractReference.
    Class Trait (Self : Set) {Type : Set} : Set := {
      Type := Type;
    }.
    
    Global Instance Method_Type `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Type" := {
      Notation.double_colon_type := Type;
    }.
  End ContractReference.
End contract.

Module ContractEnv.
  Class Trait
      (Self : Set)
      {Env : Set}
      `{ink_env.types.Environment.Trait Env} :
      Set := {
    Env := Env;
  }.
  
  Global Instance Method_Env `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Env" := {
    Notation.double_colon_type := Env;
  }.
End ContractEnv.

Module ContractReference.
  Class Trait (Self : Set) {Type : Set} : Set := {
    Type := Type;
  }.
  
  Global Instance Method_Type `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Type" := {
    Notation.double_colon_type := Type;
  }.
End ContractReference.

Module engine.
  Module OnInstance.
    Class Trait (Self : Set) : Set := {
      on_instance `{H : State.Trait} : F -> (M (H := H) R);
    }.
    
    Global Instance Method_on_instance `{H : State.Trait} `(Trait)
      : Notation.Dot "on_instance" := {
      Notation.dot := on_instance;
    }.
  End OnInstance.
  
  Module off_chain.
    Module call_data.
      Module CallData.
        Record t : Set := {
          bytes : alloc.vec.Vec u8;
        }.
        
        Global Instance Get_bytes : Notation.Dot "bytes" := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End CallData.
      Definition CallData : Set := CallData.t.
      
      Module
        Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
          string -> alloc_vec_Vec_u8 -> 
          M (H := H) core.fmt.Result.
        
        Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
          core.fmt.Formatter "debug_struct_field1_finish" := {
          Notation.double_colon := debug_struct_field1_finish; }.
        
        Definition fmt
            `{H : State.Trait}
            (self : ref Self)
            (f : mut_ref core.fmt.Formatter)
            : M (H := H) core.fmt.Result :=
          core.fmt.Formatter::["debug_struct_field1_finish"]
            f
            "CallData"
            "bytes"
            (addr_of (addr_of self.["bytes"])).
        
        Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H : State.Trait} := fmt;
        }.
      End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Definition clone
            `{H : State.Trait}
            (self : ref Self)
            : M (H := H) ink_env.engine.off_chain.call_data.CallData :=
          let* α0 := core.clone.Clone.clone (addr_of self.["bytes"]) in
          Pure {| ink_env.engine.off_chain.call_data.CallData.bytes := α0; |}.
        
        Global Instance Method_clone `{H : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H : State.Trait} := clone;
        }.
      End Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
          core.marker.StructuralPartialEq.Build_Trait _.
      End
        Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Definition eq
            `{H : State.Trait}
            (self : ref Self)
            (other : ref ink_env.engine.off_chain.call_data.CallData)
            : M (H := H) bool :=
          self.["bytes"].["eq"] other.["bytes"].
        
        Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
          Notation.dot := eq;
        }.
        
        Global Instance I : core.cmp.PartialEq.Trait Self := {
          core.cmp.PartialEq.eq `{H : State.Trait} := eq;
        }.
      End
        Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Global Instance I : core.marker.StructuralEq.Trait Self :=
          core.marker.StructuralEq.Build_Trait _.
      End
        Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Definition assert_receiver_is_total_eq
            `{H : State.Trait}
            (self : ref Self)
            : M (H := H) unit :=
          let _ := tt in
          Pure tt.
        
        Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
          Notation.Dot "assert_receiver_is_total_eq" := {
          Notation.dot := assert_receiver_is_total_eq;
        }.
        
        Global Instance I : core.cmp.Eq.Trait Self := {
        }.
      End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module Impl_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Definition new
            `{H : State.Trait}
            (selector : ink_env.call.selector.Selector)
            : M (H := H) Self :=
          let* bytes := selector.["to_bytes"] in
          let* α0 :=
            alloc.boxed.Box::["new"]
              [ bytes[0]; bytes[1]; bytes[2]; bytes[3] ] in
          let* α1 := Slice::["into_vec"] α0 in
          Pure {| Self.bytes := α1; |}.
        
        Global Instance AssociatedFunction_new `{H : State.Trait} :
          Notation.DoubleColon Self "new" := {
          Notation.double_colon := new;
        }.
        
        Definition push_arg
            `{H : State.Trait}
            (self : mut_ref Self)
            (arg : ref A)
            : M (H := H) unit :=
          arg.["encode_to"] (addr_of self.["bytes"]).
        
        Global Instance Method_push_arg `{H : State.Trait} :
          Notation.Dot "push_arg" := {
          Notation.dot := push_arg;
        }.
        
        Definition selector
            `{H : State.Trait}
            (self : ref Self)
            : M (H := H) ink_env.call.selector.Selector :=
          let* _ :=
            if (true : bool) then
              let* _ :=
                let* α0 := self.["bytes"].["len"] in
                let* α1 := α0.["ge"] 4 in
                let* α2 := α1.["not"] in
                if (α2 : bool) then
                  core.panicking.panic "assertion failed: self.bytes.len() >= 4"
                else
                  Pure tt in
              Pure tt
            else
              Pure tt in
          let bytes :=
            [
              self.["bytes"][0];
              self.["bytes"][1];
              self.["bytes"][2];
              self.["bytes"][3]
            ] in
          bytes.["into"].
        
        Global Instance Method_selector `{H : State.Trait} :
          Notation.Dot "selector" := {
          Notation.dot := selector;
        }.
        
        Definition params
            `{H : State.Trait}
            (self : ref Self)
            : M (H := H) (ref Slice) :=
          let* _ :=
            if (true : bool) then
              let* _ :=
                let* α0 := self.["bytes"].["len"] in
                let* α1 := α0.["ge"] 4 in
                let* α2 := α1.["not"] in
                if (α2 : bool) then
                  core.panicking.panic "assertion failed: self.bytes.len() >= 4"
                else
                  Pure tt in
              Pure tt
            else
              Pure tt in
          Pure (addr_of self.["bytes"][RangeFrom {| RangeFrom.start := 4; |}]).
        
        Global Instance Method_params `{H : State.Trait} :
          Notation.Dot "params" := {
          Notation.dot := params;
        }.
        
        Definition to_bytes
            `{H : State.Trait}
            (self : ref Self)
            : M (H := H) (ref Slice) :=
          Pure (addr_of self.["bytes"]).
        
        Global Instance Method_to_bytes `{H : State.Trait} :
          Notation.Dot "to_bytes" := {
          Notation.dot := to_bytes;
        }.
      End Impl_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Definition size_hint
            `{H : State.Trait}
            (self : ref Self)
            : M (H := H) usize :=
          self.["bytes"].["len"].
        
        Global Instance Method_size_hint `{H : State.Trait} :
          Notation.Dot "size_hint" := {
          Notation.dot := size_hint;
        }.
        
        Definition encode_to
            `{H : State.Trait}
            (self : ref Self)
            (dest : mut_ref T)
            : M (H := H) unit :=
          let* _ :=
            let* α0 := self.["bytes"].["as_slice"] in
            dest.["write"] α0 in
          Pure tt.
        
        Global Instance Method_encode_to `{H : State.Trait} :
          Notation.Dot "encode_to" := {
          Notation.dot := encode_to;
        }.
        
        Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
        }.
      End
        Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Definition decode
            `{H : State.Trait}
            (input : mut_ref I)
            :
              M (H := H)
                (core.result.Result Self parity_scale_codec.error.Error) :=
          let* remaining_len :=
            let* α0 := input.["remaining_len"] in
            let* α1 := α0.["unwrap_or"] core.option.Option.None in
            α1.["unwrap_or"] 0 in
          let* bytes := alloc.vec.Vec::["with_capacity"] remaining_len in
          let* _ :=
            loop
              let* α0 := input.["read_byte"] in
              let* α1 := let_if core.result.Result.Ok byte := α0 in
              if (α1 : bool) then
                let* _ := bytes.["push"] byte in
                Pure tt
              else
                let _ := Break in
                Pure tt
              from
              while in
          let* _ :=
            let* α0 := bytes.["len"] in
            let* α1 := α0.["lt"] 4 in
            if (α1 : bool) then
              let* α0 :=
                parity_scale_codec.error.Error::["from"]
                  "require at least 4 bytes for input data" in
              Return (core.result.Result.Err α0)
            else
              Pure tt in
          Pure (core.result.Result.Ok {| Self.bytes := bytes; |}).
        
        Global Instance AssociatedFunction_decode `{H : State.Trait} :
          Notation.DoubleColon Self "decode" := {
          Notation.double_colon := decode;
        }.
        
        Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
          parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
        }.
      End
        Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
    End call_data.
    
    Module impls.
      Definition BUFFER_SIZE `{H : State.Trait} : usize := run (1.["shl"] 14).
      
      Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
        Definition Self := ink_env.hash.Blake2x128.
        
        Definition hash
            `{H : State.Trait}
            (input : ref Slice)
            (output : mut_ref ink_env.hash.HashOutput.Type)
            : M (H := H) unit :=
          let* output :=
            let offset := 0 in
            let slice :=
              addr_of
                output[Range
                    {|
                    Range.start := offset;
                    Range.end := offset.["add"] 16;
                  |}] in
            ink_env.engine.off_chain.impls.hash.as_array slice in
          let* _ := ink_engine.ext.Engine::["hash_blake2_128"] input output in
          Pure tt.
        
        Global Instance AssociatedFunction_hash `{H : State.Trait} :
          Notation.DoubleColon Self "hash" := {
          Notation.double_colon := hash;
        }.
        
        Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
          ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
        }.
      End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
      
      Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
        Definition Self := ink_env.hash.Blake2x256.
        
        Definition hash
            `{H : State.Trait}
            (input : ref Slice)
            (output : mut_ref ink_env.hash.HashOutput.Type)
            : M (H := H) unit :=
          let* output :=
            let offset := 0 in
            let slice :=
              addr_of
                output[Range
                    {|
                    Range.start := offset;
                    Range.end := offset.["add"] 32;
                  |}] in
            ink_env.engine.off_chain.impls.hash.as_array slice in
          let* _ := ink_engine.ext.Engine::["hash_blake2_256"] input output in
          Pure tt.
        
        Global Instance AssociatedFunction_hash `{H : State.Trait} :
          Notation.DoubleColon Self "hash" := {
          Notation.double_colon := hash;
        }.
        
        Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
          ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
        }.
      End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
      
      Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
        Definition Self := ink_env.hash.Sha2x256.
        
        Definition hash
            `{H : State.Trait}
            (input : ref Slice)
            (output : mut_ref ink_env.hash.HashOutput.Type)
            : M (H := H) unit :=
          let* output :=
            let offset := 0 in
            let slice :=
              addr_of
                output[Range
                    {|
                    Range.start := offset;
                    Range.end := offset.["add"] 32;
                  |}] in
            ink_env.engine.off_chain.impls.hash.as_array slice in
          let* _ := ink_engine.ext.Engine::["hash_sha2_256"] input output in
          Pure tt.
        
        Global Instance AssociatedFunction_hash `{H : State.Trait} :
          Notation.DoubleColon Self "hash" := {
          Notation.double_colon := hash;
        }.
        
        Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
          ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
        }.
      End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
      
      Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
        Definition Self := ink_env.hash.Keccak256.
        
        Definition hash
            `{H : State.Trait}
            (input : ref Slice)
            (output : mut_ref ink_env.hash.HashOutput.Type)
            : M (H := H) unit :=
          let* output :=
            let offset := 0 in
            let slice :=
              addr_of
                output[Range
                    {|
                    Range.start := offset;
                    Range.end := offset.["add"] 32;
                  |}] in
            ink_env.engine.off_chain.impls.hash.as_array slice in
          let* _ := ink_engine.ext.Engine::["hash_keccak_256"] input output in
          Pure tt.
        
        Global Instance AssociatedFunction_hash `{H : State.Trait} :
          Notation.DoubleColon Self "hash" := {
          Notation.double_colon := hash;
        }.
        
        Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
          ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
        }.
      End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
      
      Module Impl_core_convert_From_for_ink_env_error_Error.
        Definition Self := ink_env.error.Error.
        
        Definition from
            `{H : State.Trait}
            (ext_error : ink_engine.ext.Error)
            : M (H := H) Self :=
          match ext_error with
          | ink_engine.ext.Error.Unknown => Pure Self::["Unknown"]
          | ink_engine.ext.Error.CalleeTrapped => Pure Self::["CalleeTrapped"]
          | ink_engine.ext.Error.CalleeReverted => Pure Self::["CalleeReverted"]
          | ink_engine.ext.Error.KeyNotFound => Pure Self::["KeyNotFound"]
          | ink_engine.ext.Error._BelowSubsistenceThreshold =>
            Pure Self::["_BelowSubsistenceThreshold"]
          | ink_engine.ext.Error.TransferFailed => Pure Self::["TransferFailed"]
          | ink_engine.ext.Error._EndowmentTooLow =>
            Pure Self::["_EndowmentTooLow"]
          | ink_engine.ext.Error.CodeNotFound => Pure Self::["CodeNotFound"]
          | ink_engine.ext.Error.NotCallable => Pure Self::["NotCallable"]
          | ink_engine.ext.Error.LoggingDisabled =>
            Pure Self::["LoggingDisabled"]
          | ink_engine.ext.Error.EcdsaRecoveryFailed =>
            Pure Self::["EcdsaRecoveryFailed"]
          end.
        
        Global Instance AssociatedFunction_from `{H : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I :
            core.convert.From.Trait Self (T := ink_engine.ext.Error) := {
          core.convert.From.from `{H : State.Trait} := from;
        }.
      End Impl_core_convert_From_for_ink_env_error_Error.
      
      Module TopicsBuilder.
        Record t : Set := {
          topics : alloc.vec.Vec (alloc.vec.Vec u8);
        }.
        
        Global Instance Get_topics : Notation.Dot "topics" := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End TopicsBuilder.
      Definition TopicsBuilder : Set := TopicsBuilder.t.
      
      Module
        Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
        Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
        
        Definition default
            `{H : State.Trait}
            (_ : unit)
            : M (H := H) ink_env.engine.off_chain.impls.TopicsBuilder :=
          let* α0 := core.default.Default.default tt in
          Pure {| ink_env.engine.off_chain.impls.TopicsBuilder.topics := α0; |}.
        
        Global Instance AssociatedFunction_default `{H : State.Trait} :
          Notation.DoubleColon Self "default" := {
          Notation.double_colon := default;
        }.
        
        Global Instance I : core.default.Default.Trait Self := {
          core.default.Default.default `{H : State.Trait} := default;
        }.
      End
        Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      
      Module
        Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      Section
        Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
        Context {E : Set}.
        
        Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
        
        Definition Output : Set := alloc.vec.Vec u8.
        
        Definition expect
            `{H : State.Trait}
            (self : mut_ref Self)
            (_expected_topics : usize)
            : M (H := H) unit :=
          Pure tt.
        
        Global Instance Method_expect `{H : State.Trait} :
          Notation.Dot "expect" := {
          Notation.dot := expect;
        }.
        
        Definition push_topic
            `{H : State.Trait}
            (self : mut_ref Self)
            (topic_value : ref T)
            : M (H := H) unit :=
          let* encoded := topic_value.["encode"] in
          let* len_encoded := encoded.["len"] in
          let result := ink_env.types.Environment.Hash::["CLEAR_HASH"] in
          let* len_result :=
            let* α0 := result.["as_ref"] in
            α0.["len"] in
          let* _ :=
            let* α0 := len_encoded.["le"] len_result in
            if (α0 : bool) then
              let* _ :=
                let* α0 := result.["as_mut"] in
                α0[RangeTo {| RangeTo.end := len_encoded;
                    |}].["copy_from_slice"]
                  (addr_of encoded[RangeFull {|  |}]) in
              Pure tt
            else
              let* hash_output :=
                ink_env.hash.HashOutput.Type::["default"] tt in
              let* _ :=
                ink_env.hash.CryptoHash.hash
                  (addr_of encoded[RangeFull {|  |}])
                  (addr_of hash_output) in
              let* copy_len :=
                let* α0 := hash_output.["len"] in
                core.cmp.min α0 len_result in
              let* _ :=
                let* α0 := result.["as_mut"] in
                α0[Range {| Range.start := 0; Range.end := copy_len;
                    |}].["copy_from_slice"]
                  (addr_of
                    hash_output[Range
                        {|
                        Range.start := 0;
                        Range.end := copy_len;
                      |}]) in
              Pure tt in
          let* off_hash := result.["as_ref"] in
          let* off_hash := off_hash.["to_vec"] in
          let* _ :=
            if (true : bool) then
              let* _ :=
                let* α0 := self.["topics"].["contains"] (addr_of off_hash) in
                let* α1 := α0.["not"] in
                let* α2 := α1.["not"] in
                if (α2 : bool) then
                  let* α0 :=
                    format_arguments::["new_const"]
                      (addr_of [ "duplicate topic hash discovered!" ]) in
                  core.panicking.panic_fmt α0
                else
                  Pure tt in
              Pure tt
            else
              Pure tt in
          let* _ := self.["topics"].["push"] off_hash in
          Pure tt.
        
        Global Instance Method_push_topic `{H : State.Trait} :
          Notation.Dot "push_topic" := {
          Notation.dot := push_topic;
        }.
        
        Definition output
            `{H : State.Trait}
            (self : Self)
            : M (H := H) ImplSelf.Output :=
          let* all := alloc.vec.Vec::["new"] tt in
          let* topics_len_compact :=
            let* α0 := self.["topics"].["len"] in
            Pure
              (addr_of
                (parity_scale_codec.compact.Compact.Build_t (cast α0 u32))) in
          let* topics_encoded :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode
                (addr_of topics_len_compact) in
            Pure (addr_of α0[RangeFull {|  |}]) in
          let* _ :=
            let* α0 := topics_encoded.["to_vec"] in
            all.["append"] (addr_of α0) in
          let* _ :=
            let* α0 := self.["topics"].["into_iter"] in
            α0.["for_each"] (fun v => all.["append"] (addr_of v)) in
          Pure all.
        
        Global Instance Method_output `{H : State.Trait} :
          Notation.Dot "output" := {
          Notation.dot := output;
        }.
        
        Global Instance I :
            ink_env.topics.TopicsBuilderBackend.Trait Self (E := E) := {
          ink_env.topics.TopicsBuilderBackend.expect
            `{H : State.Trait}
            :=
            expect;
          ink_env.topics.TopicsBuilderBackend.push_topic
            `{H : State.Trait}
            :=
            push_topic;
          ink_env.topics.TopicsBuilderBackend.output
            `{H : State.Trait}
            :=
            output;
        }.
      End
        Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      End
        Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      
      Module Impl_ink_env_engine_off_chain_EnvInstance.
        Definition Self := ink_env.engine.off_chain.EnvInstance.
        
        Definition get_property
            `{H : State.Trait}
            (self : mut_ref Self)
            (ext_fn
              :
              (ref ink_engine.ext.Engine) -> (mut_ref (mut_ref Slice)) -> unit)
            : M (H := H) (ink_env.error.Result T) :=
          let* full_scope := repeat 0 in
          let full_scope := addr_of (addr_of full_scope[RangeFull {|  |}]) in
          let* _ := ext_fn (addr_of self.["engine"]) full_scope in
          let* α0 :=
            parity_scale_codec.codec.Decode.decode
              (addr_of (addr_of full_scope[RangeFull {|  |}])) in
          α0.["map_err"] core.convert.Into.into.
        
        Global Instance Method_get_property `{H : State.Trait} :
          Notation.Dot "get_property" := {
          Notation.dot := get_property;
        }.
      End Impl_ink_env_engine_off_chain_EnvInstance.
      
      Module
        Impl_ink_env_backend_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
        Definition Self := ink_env.engine.off_chain.EnvInstance.
        
        Definition set_contract_storage
            `{H : State.Trait}
            (self : mut_ref Self)
            (key : ref K)
            (value : ref V)
            : M (H := H) (core.option.Option u32) :=
          let* v := alloc.vec.Vec::["new"] tt in
          let* _ :=
            ink_storage_traits.storage.Storable.encode value (addr_of v) in
          let* α0 := key.["encode"] in
          self.["engine"].["set_storage"]
            (addr_of α0)
            (addr_of v[RangeFull {|  |}]).
        
        Global Instance Method_set_contract_storage `{H : State.Trait} :
          Notation.Dot "set_contract_storage" := {
          Notation.dot := set_contract_storage;
        }.
        
        Definition get_contract_storage
            `{H : State.Trait}
            (self : mut_ref Self)
            (key : ref K)
            : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
          let* output := repeat 0 in
          let* _ :=
            let* α0 := key.["encode"] in
            let* α1 :=
              self.["engine"].["get_storage"]
                (addr_of α0)
                (addr_of (addr_of output[RangeFull {|  |}])) in
            match α1 with
            | core.result.Result.Ok _ => Pure tt
            | core.result.Result.Err ink_engine.ext.Error.KeyNotFound =>
              Return (core.result.Result.Ok core.option.Option.None)
            | core.result.Result.Err _ =>
              let* α0 :=
                format_arguments::["new_const"]
                  (addr_of [ "encountered unexpected error" ]) in
              core.panicking.panic_fmt α0
            end in
          let* decoded :=
            let* α0 :=
              ink_storage_traits.storage.Storable.decode
                (addr_of (addr_of output[RangeFull {|  |}])) in
            let* α1 := LangItem α0 in
            match α1 with
            | Break {| Break.0 := residual; |} =>
              let* α0 := LangItem residual in
              Return α0
            | Continue {| Continue.0 := val; |} => Pure val
            end in
          Pure (core.result.Result.Ok (core.option.Option.Some decoded)).
        
        Global Instance Method_get_contract_storage `{H : State.Trait} :
          Notation.Dot "get_contract_storage" := {
          Notation.dot := get_contract_storage;
        }.
        
        Definition take_contract_storage
            `{H : State.Trait}
            (self : mut_ref Self)
            (key : ref K)
            : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
          let* output := repeat 0 in
          let* _ :=
            let* α0 := key.["encode"] in
            let* α1 :=
              self.["engine"].["take_storage"]
                (addr_of α0)
                (addr_of (addr_of output[RangeFull {|  |}])) in
            match α1 with
            | core.result.Result.Ok _ => Pure tt
            | core.result.Result.Err ink_engine.ext.Error.KeyNotFound =>
              Return (core.result.Result.Ok core.option.Option.None)
            | core.result.Result.Err _ =>
              let* α0 :=
                format_arguments::["new_const"]
                  (addr_of [ "encountered unexpected error" ]) in
              core.panicking.panic_fmt α0
            end in
          let* decoded :=
            let* α0 :=
              ink_storage_traits.storage.Storable.decode
                (addr_of (addr_of output[RangeFull {|  |}])) in
            let* α1 := LangItem α0 in
            match α1 with
            | Break {| Break.0 := residual; |} =>
              let* α0 := LangItem residual in
              Return α0
            | Continue {| Continue.0 := val; |} => Pure val
            end in
          Pure (core.result.Result.Ok (core.option.Option.Some decoded)).
        
        Global Instance Method_take_contract_storage `{H : State.Trait} :
          Notation.Dot "take_contract_storage" := {
          Notation.dot := take_contract_storage;
        }.
        
        Definition contains_contract_storage
            `{H : State.Trait}
            (self : mut_ref Self)
            (key : ref K)
            : M (H := H) (core.option.Option u32) :=
          let* α0 := key.["encode"] in
          self.["engine"].["contains_storage"] (addr_of α0).
        
        Global Instance Method_contains_contract_storage `{H : State.Trait} :
          Notation.Dot "contains_contract_storage" := {
          Notation.dot := contains_contract_storage;
        }.
        
        Definition clear_contract_storage
            `{H : State.Trait}
            (self : mut_ref Self)
            (key : ref K)
            : M (H := H) (core.option.Option u32) :=
          let* α0 := key.["encode"] in
          self.["engine"].["clear_storage"] (addr_of α0).
        
        Global Instance Method_clear_contract_storage `{H : State.Trait} :
          Notation.Dot "clear_contract_storage" := {
          Notation.dot := clear_contract_storage;
        }.
        
        Definition decode_input
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) (ink_env.error.Result T) :=
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: the off-chain env does not implement `input`"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_decode_input `{H : State.Trait} :
          Notation.Dot "decode_input" := {
          Notation.dot := decode_input;
        }.
        
        Definition return_value
            `{H : State.Trait}
            (self : mut_ref Self)
            (_flags : ink_env.backend.ReturnFlags)
            (_return_value : ref R)
            : M (H := H) Empty_set :=
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: the off-chain env does not implement `return_value`"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_return_value `{H : State.Trait} :
          Notation.Dot "return_value" := {
          Notation.dot := return_value;
        }.
        
        Definition debug_message
            `{H : State.Trait}
            (self : mut_ref Self)
            (message : ref str)
            : M (H := H) unit :=
          self.["engine"].["debug_message"] message.
        
        Global Instance Method_debug_message `{H : State.Trait} :
          Notation.Dot "debug_message" := {
          Notation.dot := debug_message;
        }.
        
        Definition hash_bytes
            `{H : State.Trait}
            (self : mut_ref Self)
            (input : ref Slice)
            (output : mut_ref ink_env.hash.HashOutput.Type)
            : M (H := H) unit :=
          ink_env.hash.CryptoHash.hash input output.
        
        Global Instance Method_hash_bytes `{H : State.Trait} :
          Notation.Dot "hash_bytes" := {
          Notation.dot := hash_bytes;
        }.
        
        Definition hash_encoded
            `{H : State.Trait}
            (self : mut_ref Self)
            (input : ref T)
            (output : mut_ref ink_env.hash.HashOutput.Type)
            : M (H := H) unit :=
          let* enc_input :=
            let* α0 := parity_scale_codec.codec.Encode.encode input in
            Pure (addr_of α0[RangeFull {|  |}]) in
          ink_env.hash.CryptoHash.hash enc_input output.
        
        Global Instance Method_hash_encoded `{H : State.Trait} :
          Notation.Dot "hash_encoded" := {
          Notation.dot := hash_encoded;
        }.
        
        Definition ecdsa_recover
            `{H : State.Trait}
            (self : mut_ref Self)
            (signature : ref list u8)
            (message_hash : ref list u8)
            (output : mut_ref list u8)
            : M (H := H) (ink_env.error.Result unit) :=
          let* recovery_byte :=
            let* α0 := signature[64].["gt"] 26 in
            if (α0 : bool) then
              signature[64].["sub"] 27
            else
              Pure signature[64] in
          let* recovery_id :=
            let* α0 :=
              secp256k1.ecdsa.recovery.RecoveryId::["from_i32"]
                (cast recovery_byte i32) in
            α0.["unwrap_or_else"]
              (fun error =>
                let* α0 := format_argument::["new_display"] (addr_of error) in
                let* α1 :=
                  format_arguments::["new_v1"]
                    (addr_of [ "Unable to parse the recovery id: " ])
                    (addr_of [ α0 ]) in
                core.panicking.panic_fmt α1) in
          let* message :=
            let* α0 := secp256k1.Message::["from_slice"] message_hash in
            α0.["unwrap_or_else"]
              (fun error =>
                let* α0 := format_argument::["new_display"] (addr_of error) in
                let* α1 :=
                  format_arguments::["new_v1"]
                    (addr_of [ "Unable to create the message from hash: " ])
                    (addr_of [ α0 ]) in
                core.panicking.panic_fmt α1) in
          let* signature :=
            let* α0 :=
              secp256k1.ecdsa.recovery.RecoverableSignature::["from_compact"]
                (addr_of
                  signature[Range {| Range.start := 0; Range.end := 64; |}])
                recovery_id in
            α0.["unwrap_or_else"]
              (fun error =>
                let* α0 := format_argument::["new_display"] (addr_of error) in
                let* α1 :=
                  format_arguments::["new_v1"]
                    (addr_of [ "Unable to parse the signature: " ])
                    (addr_of [ α0 ]) in
                core.panicking.panic_fmt α1) in
          let* pub_key :=
            secp256k1.context.global.SECP256K1.["recover_ecdsa"]
              (addr_of message)
              (addr_of signature) in
          match pub_key with
          | core.result.Result.Ok pub_key =>
            let* _ :=
              let* α0 := pub_key.["serialize"] in
              assign output.["deref"] α0 in
            Pure (core.result.Result.Ok tt)
          | core.result.Result.Err _ =>
            Pure
              (core.result.Result.Err ink_env.error.Error.EcdsaRecoveryFailed)
          end.
        
        Global Instance Method_ecdsa_recover `{H : State.Trait} :
          Notation.Dot "ecdsa_recover" := {
          Notation.dot := ecdsa_recover;
        }.
        
        Definition ecdsa_to_eth_address
            `{H : State.Trait}
            (self : mut_ref Self)
            (pubkey : ref list u8)
            (output : mut_ref list u8)
            : M (H := H) (ink_env.error.Result unit) :=
          let* pk :=
            let* α0 := secp256k1.key.PublicKey::["from_slice"] pubkey in
            let* α1 :=
              α0.["map_err"]
                (fun _ => Pure ink_env.error.Error.EcdsaRecoveryFailed) in
            let* α2 := LangItem α1 in
            match α2 with
            | Break {| Break.0 := residual; |} =>
              let* α0 := LangItem residual in
              Return α0
            | Continue {| Continue.0 := val; |} => Pure val
            end in
          let* uncompressed := pk.["serialize_uncompressed"] in
          let* hash := ink_env.hash.HashOutput.Type::["default"] tt in
          let* _ :=
            ink_env.hash.Keccak256::["hash"]
              (addr_of uncompressed[RangeFrom {| RangeFrom.start := 1; |}])
              (addr_of hash) in
          let* _ :=
            let* α0 := output.["as_mut"] in
            α0.["copy_from_slice"]
              (addr_of hash[RangeFrom {| RangeFrom.start := 12; |}]) in
          Pure (core.result.Result.Ok tt).
        
        Global Instance Method_ecdsa_to_eth_address `{H : State.Trait} :
          Notation.Dot "ecdsa_to_eth_address" := {
          Notation.dot := ecdsa_to_eth_address;
        }.
        
        Definition call_chain_extension
            `{H : State.Trait}
            (self : mut_ref Self)
            (func_id : u32)
            (input : ref I)
            (status_to_result : F)
            (decode_to_result : D)
            : M (H := H) (core.result.Result T E) :=
          let* enc_input :=
            let* α0 := parity_scale_codec.codec.Encode.encode input in
            Pure (addr_of α0[RangeFull {|  |}]) in
          let* output := repeat 0 in
          let* _ :=
            self.["engine"].["call_chain_extension"]
              func_id
              enc_input
              (addr_of (addr_of output[RangeFull {|  |}])) in
          let* '(status, out) :=
            let* α0 :=
              parity_scale_codec.codec.Decode.decode
                (addr_of (addr_of output[RangeFull {|  |}])) in
            α0.["unwrap_or_else"]
              (fun error =>
                let* α0 := format_argument::["new_debug"] (addr_of error) in
                let* α1 :=
                  format_arguments::["new_v1"]
                    (addr_of
                      [ "could not decode `call_chain_extension` output: " ])
                    (addr_of [ α0 ]) in
                core.panicking.panic_fmt α1) in
          let* _ :=
            let* α0 := status_to_result status in
            let* α1 := LangItem α0 in
            match α1 with
            | Break {| Break.0 := residual; |} =>
              let* α0 := LangItem residual in
              Return α0
            | Continue {| Continue.0 := val; |} => Pure val
            end in
          let* decoded :=
            let* α0 := decode_to_result (addr_of out[RangeFull {|  |}]) in
            let* α1 := LangItem α0 in
            match α1 with
            | Break {| Break.0 := residual; |} =>
              let* α0 := LangItem residual in
              Return α0
            | Continue {| Continue.0 := val; |} => Pure val
            end in
          Pure (core.result.Result.Ok decoded).
        
        Global Instance Method_call_chain_extension `{H : State.Trait} :
          Notation.Dot "call_chain_extension" := {
          Notation.dot := call_chain_extension;
        }.
        
        Definition set_code_hash
            `{H : State.Trait}
            (self : mut_ref Self)
            (_code_hash : ref Slice)
            : M (H := H) (ink_env.error.Result unit) :=
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not support `set_code_hash`"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_set_code_hash `{H : State.Trait} :
          Notation.Dot "set_code_hash" := {
          Notation.dot := set_code_hash;
        }.
        
        Global Instance I : ink_env.backend.EnvBackend.Trait Self := {
          ink_env.backend.EnvBackend.set_contract_storage
            `{H : State.Trait}
            :=
            set_contract_storage;
          ink_env.backend.EnvBackend.get_contract_storage
            `{H : State.Trait}
            :=
            get_contract_storage;
          ink_env.backend.EnvBackend.take_contract_storage
            `{H : State.Trait}
            :=
            take_contract_storage;
          ink_env.backend.EnvBackend.contains_contract_storage
            `{H : State.Trait}
            :=
            contains_contract_storage;
          ink_env.backend.EnvBackend.clear_contract_storage
            `{H : State.Trait}
            :=
            clear_contract_storage;
          ink_env.backend.EnvBackend.decode_input
            `{H : State.Trait}
            :=
            decode_input;
          ink_env.backend.EnvBackend.return_value
            `{H : State.Trait}
            :=
            return_value;
          ink_env.backend.EnvBackend.debug_message
            `{H : State.Trait}
            :=
            debug_message;
          ink_env.backend.EnvBackend.hash_bytes
            `{H : State.Trait}
            :=
            hash_bytes;
          ink_env.backend.EnvBackend.hash_encoded
            `{H : State.Trait}
            :=
            hash_encoded;
          ink_env.backend.EnvBackend.ecdsa_recover
            `{H : State.Trait}
            :=
            ecdsa_recover;
          ink_env.backend.EnvBackend.ecdsa_to_eth_address
            `{H : State.Trait}
            :=
            ecdsa_to_eth_address;
          ink_env.backend.EnvBackend.call_chain_extension
            `{H : State.Trait}
            :=
            call_chain_extension;
          ink_env.backend.EnvBackend.set_code_hash
            `{H : State.Trait}
            :=
            set_code_hash;
        }.
      End
        Impl_ink_env_backend_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
      
      Module
        Impl_ink_env_backend_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
        Definition Self := ink_env.engine.off_chain.EnvInstance.
        
        Definition caller
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) ImplE.AccountId :=
          let* α0 := self.["get_property"] ink_engine.ext.Engine::["caller"] in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `caller` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_caller `{H : State.Trait} :
          Notation.Dot "caller" := {
          Notation.dot := caller;
        }.
        
        Definition transferred_value
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) ImplE.Balance :=
          let* α0 :=
            self.["get_property"]
              ink_engine.ext.Engine::["value_transferred"] in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `transferred_value` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_transferred_value `{H : State.Trait} :
          Notation.Dot "transferred_value" := {
          Notation.dot := transferred_value;
        }.
        
        Definition gas_left
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) u64 :=
          let* α0 :=
            self.["get_property"] ink_engine.ext.Engine::["gas_left"] in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `gas_left` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_gas_left `{H : State.Trait} :
          Notation.Dot "gas_left" := {
          Notation.dot := gas_left;
        }.
        
        Definition block_timestamp
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) ImplE.Timestamp :=
          let* α0 :=
            self.["get_property"] ink_engine.ext.Engine::["block_timestamp"] in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `block_timestamp` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_block_timestamp `{H : State.Trait} :
          Notation.Dot "block_timestamp" := {
          Notation.dot := block_timestamp;
        }.
        
        Definition account_id
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) ImplE.AccountId :=
          let* α0 := self.["get_property"] ink_engine.ext.Engine::["address"] in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `account_id` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_account_id `{H : State.Trait} :
          Notation.Dot "account_id" := {
          Notation.dot := account_id;
        }.
        
        Definition balance
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) ImplE.Balance :=
          let* α0 := self.["get_property"] ink_engine.ext.Engine::["balance"] in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `balance` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_balance `{H : State.Trait} :
          Notation.Dot "balance" := {
          Notation.dot := balance;
        }.
        
        Definition block_number
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) ImplE.BlockNumber :=
          let* α0 :=
            self.["get_property"] ink_engine.ext.Engine::["block_number"] in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `block_number` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_block_number `{H : State.Trait} :
          Notation.Dot "block_number" := {
          Notation.dot := block_number;
        }.
        
        Definition minimum_balance
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) ImplE.Balance :=
          let* α0 :=
            self.["get_property"] ink_engine.ext.Engine::["minimum_balance"] in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `minimum_balance` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_minimum_balance `{H : State.Trait} :
          Notation.Dot "minimum_balance" := {
          Notation.dot := minimum_balance;
        }.
        
        Definition emit_event
            `{H : State.Trait}
            (self : mut_ref Self)
            (event : Event)
            : M (H := H) unit :=
          let* builder :=
            ink_env.engine.off_chain.impls.TopicsBuilder::["default"] tt in
          let* enc_topics :=
            let* α0 := builder.["into"] in
            event.["topics"] α0 in
          let* enc_data :=
            let* α0 := parity_scale_codec.codec.Encode.encode (addr_of event) in
            Pure (addr_of α0[RangeFull {|  |}]) in
          let* _ :=
            self.["engine"].["deposit_event"]
              (addr_of enc_topics[RangeFull {|  |}])
              enc_data in
          Pure tt.
        
        Global Instance Method_emit_event `{H : State.Trait} :
          Notation.Dot "emit_event" := {
          Notation.dot := emit_event;
        }.
        
        Definition invoke_contract
            `{H : State.Trait}
            (self : mut_ref Self)
            (params
              :
              ref
                (ink_env.call.call_builder.CallParams
                  E
                  (ink_env.call.call_builder.Call E)
                  Args
                  R))
            :
              M (H := H)
                (ink_env.error.Result (ink_primitives.MessageResult R)) :=
          let* _gas_limit := params.["gas_limit"] in
          let* _callee := params.["callee"] in
          let* _call_flags :=
            let* α0 := params.["call_flags"] in
            α0.["into_u32"] in
          let* _transferred_value := params.["transferred_value"] in
          let* _input := params.["exec_input"] in
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not support contract invocation"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_invoke_contract `{H : State.Trait} :
          Notation.Dot "invoke_contract" := {
          Notation.dot := invoke_contract;
        }.
        
        Definition invoke_contract_delegate
            `{H : State.Trait}
            (self : mut_ref Self)
            (params
              :
              ref
                (ink_env.call.call_builder.CallParams
                  E
                  (ink_env.call.call_builder.DelegateCall E)
                  Args
                  R))
            :
              M (H := H)
                (ink_env.error.Result (ink_primitives.MessageResult R)) :=
          let* _code_hash := params.["code_hash"] in
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not support delegated contract invocation"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_invoke_contract_delegate `{H : State.Trait} :
          Notation.Dot "invoke_contract_delegate" := {
          Notation.dot := invoke_contract_delegate;
        }.
        
        Definition instantiate_contract
            `{H : State.Trait}
            (self : mut_ref Self)
            (params
              :
              ref
                (ink_env.call.create_builder.CreateParams
                  E
                  ContractRef
                  Args
                  Salt
                  R))
            :
              M (H := H)
                (ink_env.error.Result
                  (ink_primitives.ConstructorResult
                    ink_env.call.create_builder.ConstructorReturnType.Output)) :=
          let* _code_hash := params.["code_hash"] in
          let* _gas_limit := params.["gas_limit"] in
          let* _endowment := params.["endowment"] in
          let* _input := params.["exec_input"] in
          let* _salt_bytes := params.["salt_bytes"] in
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not support contract instantiation"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_instantiate_contract `{H : State.Trait} :
          Notation.Dot "instantiate_contract" := {
          Notation.dot := instantiate_contract;
        }.
        
        Definition terminate_contract
            `{H : State.Trait}
            (self : mut_ref Self)
            (beneficiary : ImplE.AccountId)
            : M (H := H) Empty_set :=
          let* buffer :=
            parity_scale_codec.codec.Encode.encode (addr_of beneficiary) in
          self.["engine"].["terminate"] (addr_of buffer[RangeFull {|  |}]).
        
        Global Instance Method_terminate_contract `{H : State.Trait} :
          Notation.Dot "terminate_contract" := {
          Notation.dot := terminate_contract;
        }.
        
        Definition transfer
            `{H : State.Trait}
            (self : mut_ref Self)
            (destination : ImplE.AccountId)
            (value : ImplE.Balance)
            : M (H := H) (ink_env.error.Result unit) :=
          let* enc_destination :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of destination) in
            Pure (addr_of α0[RangeFull {|  |}]) in
          let* enc_value :=
            let* α0 := parity_scale_codec.codec.Encode.encode (addr_of value) in
            Pure (addr_of α0[RangeFull {|  |}]) in
          let* α0 := self.["engine"].["transfer"] enc_destination enc_value in
          α0.["map_err"] core.convert.Into.into.
        
        Global Instance Method_transfer `{H : State.Trait} :
          Notation.Dot "transfer" := {
          Notation.dot := transfer;
        }.
        
        Definition weight_to_fee
            `{H : State.Trait}
            (self : mut_ref Self)
            (gas : u64)
            : M (H := H) ImplE.Balance :=
          let* output := repeat 0 in
          let* _ :=
            self.["engine"].["weight_to_fee"]
              gas
              (addr_of (addr_of output[RangeFull {|  |}])) in
          let* α0 :=
            parity_scale_codec.codec.Decode.decode
              (addr_of (addr_of output[RangeFull {|  |}])) in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "could not read `weight_to_fee` property: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1).
        
        Global Instance Method_weight_to_fee `{H : State.Trait} :
          Notation.Dot "weight_to_fee" := {
          Notation.dot := weight_to_fee;
        }.
        
        Definition is_contract
            `{H : State.Trait}
            (self : mut_ref Self)
            (account : ref ImplE.AccountId)
            : M (H := H) bool :=
          let* α0 := parity_scale_codec.codec.Encode.encode (addr_of account) in
          self.["engine"].["is_contract"] α0.
        
        Global Instance Method_is_contract `{H : State.Trait} :
          Notation.Dot "is_contract" := {
          Notation.dot := is_contract;
        }.
        
        Definition caller_is_origin
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) bool :=
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not support cross-contract calls"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_caller_is_origin `{H : State.Trait} :
          Notation.Dot "caller_is_origin" := {
          Notation.dot := caller_is_origin;
        }.
        
        Definition code_hash
            `{H : State.Trait}
            (self : mut_ref Self)
            (_account : ref ImplE.AccountId)
            : M (H := H) (ink_env.error.Result ImplE.Hash) :=
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not support `code_hash`"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_code_hash `{H : State.Trait} :
          Notation.Dot "code_hash" := {
          Notation.dot := code_hash;
        }.
        
        Definition own_code_hash
            `{H : State.Trait}
            (self : mut_ref Self)
            : M (H := H) (ink_env.error.Result ImplE.Hash) :=
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not support `own_code_hash`"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_own_code_hash `{H : State.Trait} :
          Notation.Dot "own_code_hash" := {
          Notation.dot := own_code_hash;
        }.
        
        Definition call_runtime
            `{H : State.Trait}
            (self : mut_ref Self)
            (_call : ref Call)
            : M (H := H) (ink_env.error.Result unit) :=
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not support `call_runtime`"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0.
        
        Global Instance Method_call_runtime `{H : State.Trait} :
          Notation.Dot "call_runtime" := {
          Notation.dot := call_runtime;
        }.
        
        Global Instance I : ink_env.backend.TypedEnvBackend.Trait Self := {
          ink_env.backend.TypedEnvBackend.caller `{H : State.Trait} := caller;
          ink_env.backend.TypedEnvBackend.transferred_value
            `{H : State.Trait}
            :=
            transferred_value;
          ink_env.backend.TypedEnvBackend.weight_to_fee
            `{H : State.Trait}
            :=
            weight_to_fee;
          ink_env.backend.TypedEnvBackend.gas_left
            `{H : State.Trait}
            :=
            gas_left;
          ink_env.backend.TypedEnvBackend.block_timestamp
            `{H : State.Trait}
            :=
            block_timestamp;
          ink_env.backend.TypedEnvBackend.account_id
            `{H : State.Trait}
            :=
            account_id;
          ink_env.backend.TypedEnvBackend.balance `{H : State.Trait} := balance;
          ink_env.backend.TypedEnvBackend.block_number
            `{H : State.Trait}
            :=
            block_number;
          ink_env.backend.TypedEnvBackend.minimum_balance
            `{H : State.Trait}
            :=
            minimum_balance;
          ink_env.backend.TypedEnvBackend.emit_event
            `{H : State.Trait}
            :=
            emit_event;
          ink_env.backend.TypedEnvBackend.invoke_contract
            `{H : State.Trait}
            :=
            invoke_contract;
          ink_env.backend.TypedEnvBackend.invoke_contract_delegate
            `{H : State.Trait}
            :=
            invoke_contract_delegate;
          ink_env.backend.TypedEnvBackend.instantiate_contract
            `{H : State.Trait}
            :=
            instantiate_contract;
          ink_env.backend.TypedEnvBackend.terminate_contract
            `{H : State.Trait}
            :=
            terminate_contract;
          ink_env.backend.TypedEnvBackend.transfer
            `{H : State.Trait}
            :=
            transfer;
          ink_env.backend.TypedEnvBackend.is_contract
            `{H : State.Trait}
            :=
            is_contract;
          ink_env.backend.TypedEnvBackend.caller_is_origin
            `{H : State.Trait}
            :=
            caller_is_origin;
          ink_env.backend.TypedEnvBackend.code_hash
            `{H : State.Trait}
            :=
            code_hash;
          ink_env.backend.TypedEnvBackend.own_code_hash
            `{H : State.Trait}
            :=
            own_code_hash;
          ink_env.backend.TypedEnvBackend.call_runtime
            `{H : State.Trait}
            :=
            call_runtime;
        }.
      End
        Impl_ink_env_backend_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
    End impls.
    
    Module test_api.
      Module EmittedEvent.
        Record t : Set := {
          topics : alloc.vec.Vec (alloc.vec.Vec u8);
          data : alloc.vec.Vec u8;
        }.
        
        Global Instance Get_topics : Notation.Dot "topics" := {
          Notation.dot '(Build_t x0 _) := x0;
        }.
        Global Instance Get_data : Notation.Dot "data" := {
          Notation.dot '(Build_t _ x1) := x1;
        }.
      End EmittedEvent.
      Definition EmittedEvent : Set := EmittedEvent.t.
      
      Module
        Impl_core_clone_Clone_for_ink_env_engine_off_chain_test_api_EmittedEvent.
        Definition Self := ink_env.engine.off_chain.test_api.EmittedEvent.
        
        Definition clone
            `{H : State.Trait}
            (self : ref Self)
            : M (H := H) ink_env.engine.off_chain.test_api.EmittedEvent :=
          let* α0 := core.clone.Clone.clone (addr_of self.["topics"]) in
          let* α1 := core.clone.Clone.clone (addr_of self.["data"]) in
          Pure
            {|
              ink_env.engine.off_chain.test_api.EmittedEvent.topics := α0;
              ink_env.engine.off_chain.test_api.EmittedEvent.data := α1;
            |}.
        
        Global Instance Method_clone `{H : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H : State.Trait} := clone;
        }.
      End
        Impl_core_clone_Clone_for_ink_env_engine_off_chain_test_api_EmittedEvent.
      
      Definition set_account_balance
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (account_id : ImplT.AccountId)
          (new_balance : ImplT.Balance)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode (addr_of account_id) in
              instance.["engine"].["set_balance"] α0 new_balance in
            Pure tt).
      
      Definition get_account_balance
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (account_id : ImplT.AccountId)
          : M (H := H) (ink_env.error.Result ImplT.Balance) :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of account_id) in
            let* α1 := instance.["engine"].["get_balance"] α0 in
            α1.["map_err"] core.convert.Into.into).
      
      Definition register_chain_extension
          `{H : State.Trait}
          {E : Set}
          `{ink_engine.chain_extension.ChainExtension.Trait E}
          (extension : E)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ :=
              let* α0 := alloc.boxed.Box::["new"] extension in
              instance.["engine"].["chain_extension_handler"].["register"] α0 in
            Pure tt).
      
      Definition recorded_debug_messages
          `{H : State.Trait}
          (_ : unit)
          : M (H := H) ink_engine.test_api.RecordedDebugMessages :=
        ink_env.engine.OnInstance.on_instance
          (fun instance => instance.["engine"].["get_emitted_debug_messages"]).
      
      Definition set_clear_storage_disabled
          `{H : State.Trait}
          (_disable : bool)
          : M (H := H) unit :=
        let* _ :=
          let* α0 :=
            format_arguments::["new_v1"]
              (addr_of
                [
                  "not implemented: off-chain environment does not yet support `set_clear_storage_disabled`"
                ])
              (addr_of [ ]) in
          core.panicking.panic_fmt α0 in
        Pure tt.
      
      Definition advance_block
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (_ : unit)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ := instance.["engine"].["advance_block"] in
            Pure tt).
      
      Definition set_caller
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
          (caller : ImplT.AccountId)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode (addr_of caller) in
              instance.["engine"].["set_caller"] α0 in
            Pure tt).
      
      Definition set_callee
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
          (callee : ImplT.AccountId)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode (addr_of callee) in
              instance.["engine"].["set_callee"] α0 in
            Pure tt).
      
      Definition set_contract
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
          (contract : ImplT.AccountId)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode (addr_of contract) in
              instance.["engine"].["set_contract"] α0 in
            Pure tt).
      
      Definition is_contract
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
          (contract : ImplT.AccountId)
          : M (H := H) bool :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of contract) in
            instance.["engine"].["is_contract"] α0).
      
      Definition callee
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (_ : unit)
          : M (H := H) ImplT.AccountId :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* callee := instance.["engine"].["get_callee"] in
            let* α0 :=
              parity_scale_codec.codec.Decode.decode
                (addr_of (addr_of callee[RangeFull {|  |}])) in
            α0.["unwrap_or_else"]
              (fun err =>
                let* α0 := format_argument::["new_display"] (addr_of err) in
                let* α1 :=
                  format_arguments::["new_v1"]
                    (addr_of [ "encoding failed: " ])
                    (addr_of [ α0 ]) in
                core.panicking.panic_fmt α1)).
      
      Definition get_contract_storage_rw
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (account_id : ref ImplT.AccountId)
          : M (H := H) (usize * usize) :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of account_id) in
            instance.["engine"].["get_contract_storage_rw"] α0).
      
      Definition set_value_transferred
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (value : ImplT.Balance)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ := instance.["engine"].["set_value_transferred"] value in
            Pure tt).
      
      Definition transfer_in
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (value : ImplT.Balance)
          : M (H := H) unit :=
        let* _ :=
          ink_env.engine.OnInstance.on_instance
            (fun instance =>
              let* caller :=
                let* α0 :=
                  instance.["engine"].["exec_context"].["caller"].["as_ref"] in
                let* α1 := α0.["expect"] "no caller has been set" in
                let* α2 := α1.["as_bytes"] in
                α2.["to_vec"] in
              let* caller_old_balance :=
                let* α0 := caller.["clone"] in
                let* α1 := instance.["engine"].["get_balance"] α0 in
                α1.["unwrap_or_default"] in
              let* callee := instance.["engine"].["get_callee"] in
              let* contract_old_balance :=
                let* α0 := callee.["clone"] in
                let* α1 := instance.["engine"].["get_balance"] α0 in
                α1.["unwrap_or_default"] in
              let* _ :=
                let* α0 := caller_old_balance.["sub"] value in
                instance.["engine"].["set_balance"] caller α0 in
              let* _ :=
                let* α0 := contract_old_balance.["add"] value in
                instance.["engine"].["set_balance"] callee α0 in
              let* _ := instance.["engine"].["set_value_transferred"] value in
              Pure tt) in
        Pure tt.
      
      Definition count_used_storage_cells
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (account_id : ref ImplT.AccountId)
          : M (H := H) (ink_env.error.Result usize) :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of account_id) in
            let* α1 :=
              instance.["engine"].["count_used_storage_cells"] (addr_of α0) in
            α1.["map_err"] core.convert.Into.into).
      
      Definition set_block_timestamp
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (value : ImplT.Timestamp)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ := instance.["engine"].["set_block_timestamp"] value in
            Pure tt).
      
      Definition set_block_number
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          (value : ImplT.BlockNumber)
          : M (H := H) unit :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ := instance.["engine"].["set_block_number"] value in
            Pure tt).
      
      Definition run_test
          `{H : State.Trait}
          {T F : Set}
          `{ink_env.types.Environment.Trait T}
          `{core.ops.function.FnOnce.Trait
            ((ink_env.engine.off_chain.test_api.DefaultAccounts T))
            F}
          `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
          (f : F)
          : M (H := H) (ink_env.error.Result unit) :=
        let* default_accounts :=
          ink_env.engine.off_chain.test_api.default_accounts tt in
        let* _ :=
          ink_env.engine.OnInstance.on_instance
            (fun instance =>
              let* _ := instance.["engine"].["initialize_or_reset"] in
              let* encoded_alice :=
                parity_scale_codec.codec.Encode.encode
                  (addr_of default_accounts.["alice"]) in
              let* _ :=
                let* α0 := encoded_alice.["clone"] in
                instance.["engine"].["set_caller"] α0 in
              let* _ :=
                let* α0 := encoded_alice.["clone"] in
                instance.["engine"].["set_callee"] α0 in
              let substantial := 1000000 in
              let some := 1000 in
              let* _ :=
                instance.["engine"].["set_balance"] encoded_alice substantial in
              let* _ :=
                let* α0 :=
                  parity_scale_codec.codec.Encode.encode
                    (addr_of default_accounts.["bob"]) in
                instance.["engine"].["set_balance"] α0 some in
              let* _ :=
                let* α0 :=
                  parity_scale_codec.codec.Encode.encode
                    (addr_of default_accounts.["charlie"]) in
                instance.["engine"].["set_balance"] α0 some in
              let* _ :=
                let* α0 :=
                  parity_scale_codec.codec.Encode.encode
                    (addr_of default_accounts.["django"]) in
                instance.["engine"].["set_balance"] α0 0 in
              let* _ :=
                let* α0 :=
                  parity_scale_codec.codec.Encode.encode
                    (addr_of default_accounts.["eve"]) in
                instance.["engine"].["set_balance"] α0 0 in
              let* _ :=
                let* α0 :=
                  parity_scale_codec.codec.Encode.encode
                    (addr_of default_accounts.["frank"]) in
                instance.["engine"].["set_balance"] α0 0 in
              Pure tt) in
        f default_accounts.
      
      Definition default_accounts
          `{H : State.Trait}
          {T : Set}
          `{ink_env.types.Environment.Trait T}
          `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
          (_ : unit)
          : M (H := H) (ink_env.engine.off_chain.test_api.DefaultAccounts T) :=
        let* α0 := repeat 1 in
        let* α1 := ImplT.AccountId::["from"] α0 in
        let* α2 := repeat 2 in
        let* α3 := ImplT.AccountId::["from"] α2 in
        let* α4 := repeat 3 in
        let* α5 := ImplT.AccountId::["from"] α4 in
        let* α6 := repeat 4 in
        let* α7 := ImplT.AccountId::["from"] α6 in
        let* α8 := repeat 5 in
        let* α9 := ImplT.AccountId::["from"] α8 in
        let* α10 := repeat 6 in
        let* α11 := ImplT.AccountId::["from"] α10 in
        Pure
          {|
            ink_env.engine.off_chain.test_api.DefaultAccounts.alice := α1;
            ink_env.engine.off_chain.test_api.DefaultAccounts.bob := α3;
            ink_env.engine.off_chain.test_api.DefaultAccounts.charlie := α5;
            ink_env.engine.off_chain.test_api.DefaultAccounts.django := α7;
            ink_env.engine.off_chain.test_api.DefaultAccounts.eve := α9;
            ink_env.engine.off_chain.test_api.DefaultAccounts.frank := α11;
          |}.
      
      Module DefaultAccounts.
        Record t : Set := {
          alice : ImplT.AccountId;
          bob : ImplT.AccountId;
          charlie : ImplT.AccountId;
          django : ImplT.AccountId;
          eve : ImplT.AccountId;
          frank : ImplT.AccountId;
        }.
        
        Global Instance Get_alice : Notation.Dot "alice" := {
          Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
        }.
        Global Instance Get_bob : Notation.Dot "bob" := {
          Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
        }.
        Global Instance Get_charlie : Notation.Dot "charlie" := {
          Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
        }.
        Global Instance Get_django : Notation.Dot "django" := {
          Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
        }.
        Global Instance Get_eve : Notation.Dot "eve" := {
          Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
        }.
        Global Instance Get_frank : Notation.Dot "frank" := {
          Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
        }.
      End DefaultAccounts.
      Definition DefaultAccounts : Set := DefaultAccounts.t.
      
      Definition recorded_events
          `{H : State.Trait}
          (_ : unit)
          : M (H := H) OpaqueDef :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* α0 := instance.["engine"].["get_emitted_events"] in
            α0.["map"] (fun evt => evt.["into"])).
      
      Definition assert_contract_termination
          `{H : State.Trait}
          {T F : Set}
          `{ink_env.types.Environment.Trait T}
          `{core.ops.function.FnMut.Trait unit F}
          `{core.panic.unwind_safe.UnwindSafe.Trait F}
          `{core.fmt.Debug.Trait ink_env.types.Environment.AccountId}
          `{core.fmt.Debug.Trait ink_env.types.Environment.Balance}
          (should_terminate : F)
          (expected_beneficiary : ImplT.AccountId)
          (expected_value_transferred_to_beneficiary : ImplT.Balance)
          : M (H := H) unit :=
        let* value_any :=
          let* α0 := std.panic.catch_unwind should_terminate in
          α0.["expect_err"] "contract did not terminate" in
        let* encoded_input :=
          let* α0 := value_any.["downcast_ref"] in
          α0.["expect"] "panic object can not be cast" in
        let* '(value_transferred, encoded_beneficiary) :=
          let* α0 :=
            parity_scale_codec.codec.Decode.decode
              (addr_of (addr_of encoded_input[RangeFull {|  |}])) in
          α0.["unwrap_or_else"]
            (fun err =>
              let* α0 := format_argument::["new_display"] (addr_of err) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "input can not be decoded: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        let* beneficiary :=
          let* α0 :=
            parity_scale_codec.codec.Decode.decode
              (addr_of (addr_of encoded_beneficiary[RangeFull {|  |}])) in
          α0.["unwrap_or_else"]
            (fun err =>
              let* α0 := format_argument::["new_display"] (addr_of err) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "input can not be decoded: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        let* _ :=
          match
            (addr_of value_transferred,
              addr_of expected_value_transferred_to_beneficiary)
          with
          | (left_val, right_val) =>
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            let* α2 := α0.["eq"] α1 in
            let* α3 := α2.["not"] in
            if (α3 : bool) then
              let kind := core.panicking.AssertKind.Eq in
              let* _ :=
                let* α0 := left_val.["deref"] in
                let* α1 := right_val.["deref"] in
                core.panicking.assert_failed
                  kind
                  (addr_of α0)
                  (addr_of α1)
                  core.option.Option.None in
              Pure tt
            else
              Pure tt
          end in
        let* _ :=
          match (addr_of beneficiary, addr_of expected_beneficiary) with
          | (left_val, right_val) =>
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            let* α2 := α0.["eq"] α1 in
            let* α3 := α2.["not"] in
            if (α3 : bool) then
              let kind := core.panicking.AssertKind.Eq in
              let* _ :=
                let* α0 := left_val.["deref"] in
                let* α1 := right_val.["deref"] in
                core.panicking.assert_failed
                  kind
                  (addr_of α0)
                  (addr_of α1)
                  core.option.Option.None in
              Pure tt
            else
              Pure tt
          end in
        Pure tt.
    End test_api.
    
    Module types.
      Module
        Impl_core_convert_From_for_ink_env_engine_off_chain_test_api_EmittedEvent.
        Definition Self := ink_env.engine.off_chain.test_api.EmittedEvent.
        
        Definition from
            `{H : State.Trait}
            (evt : ink_engine.test_api.EmittedEvent)
            : M (H := H) Self :=
          Pure
            {|
              ink_env.engine.off_chain.test_api.EmittedEvent.topics :=
                evt.["topics"];
              ink_env.engine.off_chain.test_api.EmittedEvent.data :=
                evt.["data"];
            |}.
        
        Global Instance AssociatedFunction_from `{H : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I :
            core.convert.From.Trait
              Self
              (T := ink_engine.test_api.EmittedEvent) := {
          core.convert.From.from `{H : State.Trait} := from;
        }.
      End
        Impl_core_convert_From_for_ink_env_engine_off_chain_test_api_EmittedEvent.
      
      Module Impl_core_convert_From_for_ink_env_error_Error.
        Definition Self := ink_env.error.Error.
        
        Definition from
            `{H : State.Trait}
            (err : ink_engine.Error)
            : M (H := H) Self :=
          let* e :=
            match err with
            | ink_engine.Error.Account acc =>
              let* α0 := acc.["into"] in
              Pure (ink_env.engine.off_chain.OffChainError.Account α0)
            | ink_engine.Error.UninitializedBlocks =>
              Pure ink_env.engine.off_chain.OffChainError.UninitializedBlocks
            | ink_engine.Error.UninitializedExecutionContext =>
              Pure
                ink_env.engine.off_chain.OffChainError.UninitializedExecutionContext
            | ink_engine.Error.UnregisteredChainExtension =>
              Pure
                ink_env.engine.off_chain.OffChainError.UnregisteredChainExtension
            end in
          Pure (ink_env.error.Error.OffChain e).
        
        Global Instance AssociatedFunction_from `{H : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I :
            core.convert.From.Trait Self (T := ink_engine.Error) := {
          core.convert.From.from `{H : State.Trait} := from;
        }.
      End Impl_core_convert_From_for_ink_env_error_Error.
      
      Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
        Definition Self := ink_env.engine.off_chain.AccountError.
        
        Definition from
            `{H : State.Trait}
            (err : ink_engine.types.AccountError)
            : M (H := H) Self :=
          match err with
          | ink_engine.types.AccountError.Decoding e =>
            Pure (ink_env.engine.off_chain.AccountError.Decoding e)
          | ink_engine.types.AccountError.UnexpectedUserAccount =>
            Pure ink_env.engine.off_chain.AccountError.UnexpectedUserAccount
          | ink_engine.types.AccountError.NoAccountForId acc =>
            Pure (ink_env.engine.off_chain.AccountError.NoAccountForId acc)
          end.
        
        Global Instance AssociatedFunction_from `{H : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I :
            core.convert.From.Trait
              Self
              (T := ink_engine.types.AccountError) := {
          core.convert.From.from `{H : State.Trait} := from;
        }.
      End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
      
      Module Impl_core_convert_From_for_ink_env_error_Error.
        Definition Self := ink_env.error.Error.
        
        Definition from
            `{H : State.Trait}
            (account_error : ink_engine.types.AccountError)
            : M (H := H) Self :=
          let* α0 := account_error.["into"] in
          Pure
            (ink_env.error.Error.OffChain
              (ink_env.engine.off_chain.OffChainError.Account α0)).
        
        Global Instance AssociatedFunction_from `{H : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I :
            core.convert.From.Trait
              Self
              (T := ink_engine.types.AccountError) := {
          core.convert.From.from `{H : State.Trait} := from;
        }.
      End Impl_core_convert_From_for_ink_env_error_Error.
    End types.
    
    Module EnvInstance.
      Record t : Set := {
        engine : ink_engine.ext.Engine;
      }.
      
      Global Instance Get_engine : Notation.Dot "engine" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End EnvInstance.
    Definition EnvInstance : Set := EnvInstance.t.
    
    Module
      Impl_ink_env_engine_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
      Definition Self := ink_env.engine.off_chain.EnvInstance.
      
      Definition on_instance `{H : State.Trait} (f : F) : M (H := H) R :=
        ink_env.engine.off_chain.on_instance.INSTANCE.["with"]
          (fun instance =>
            let* α0 := instance.["borrow_mut"] in
            f (addr_of α0)).
      
      Global Instance AssociatedFunction_on_instance `{H : State.Trait} :
        Notation.DoubleColon Self "on_instance" := {
        Notation.double_colon := on_instance;
      }.
      
      Global Instance I : ink_env.engine.OnInstance.Trait Self := {
        ink_env.engine.OnInstance.on_instance `{H : State.Trait} := on_instance;
      }.
    End Impl_ink_env_engine_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
    
    Module OffChainError.
      Inductive t : Set :=
      | Account (_ : ink_env.engine.off_chain.AccountError)
      | UninitializedBlocks
      | UninitializedExecutionContext
      | UnregisteredChainExtension.
    End OffChainError.
    Definition OffChainError := OffChainError.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        match self with
        | ink_env.engine.off_chain.OffChainError.Account __self_0 =>
          core.fmt.Formatter::["debug_tuple_field1_finish"]
            f
            "Account"
            (addr_of __self_0)
        | ink_env.engine.off_chain.OffChainError.UninitializedBlocks =>
          core.fmt.Formatter::["write_str"] f "UninitializedBlocks"
        |
            ink_env.engine.off_chain.OffChainError.UninitializedExecutionContext
            =>
          core.fmt.Formatter::["write_str"] f "UninitializedExecutionContext"
        | ink_env.engine.off_chain.OffChainError.UnregisteredChainExtension =>
          core.fmt.Formatter::["write_str"] f "UnregisteredChainExtension"
        end.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
    
    Module Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Definition from
          `{H : State.Trait}
          (original : ink_env.engine.off_chain.AccountError)
          : M (H := H) ink_env.engine.off_chain.OffChainError :=
        Pure (ink_env.engine.off_chain.OffChainError.Account original).
      
      Global Instance AssociatedFunction_from `{H : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I :
          core.convert.From.Trait
            Self
            (T := ink_env.engine.off_chain.AccountError) := {
        core.convert.From.from `{H : State.Trait} := from;
      }.
    End Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
        core.marker.StructuralPartialEq.Build_Trait _.
    End
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
    
    Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Definition eq
          `{H : State.Trait}
          (self : ref Self)
          (other : ref ink_env.engine.off_chain.OffChainError)
          : M (H := H) bool :=
        let* __self_tag := core.intrinsics.discriminant_value self in
        let* __arg1_tag := core.intrinsics.discriminant_value other in
        let* α0 := __self_tag.["eq"] __arg1_tag in
        let* α1 :=
          match (self, other) with
          |
              (ink_env.engine.off_chain.OffChainError.Account __self_0,
                ink_env.engine.off_chain.OffChainError.Account __arg1_0)
              =>
            let* α0 := __self_0.["deref"] in
            let* α1 := __arg1_0.["deref"] in
            α0.["eq"] α1
          | _ => Pure true
          end in
        α0.["andb"] α1.
      
      Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I : core.cmp.PartialEq.Trait Self := {
        core.cmp.PartialEq.eq `{H : State.Trait} := eq;
      }.
    End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
    
    Module
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Global Instance I : core.marker.StructuralEq.Trait Self :=
        core.marker.StructuralEq.Build_Trait _.
    End
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
    
    Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Definition assert_receiver_is_total_eq
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) unit :=
        let _ := tt in
        Pure tt.
      
      Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
    End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
    
    Module AccountError.
      Inductive t : Set :=
      | Decoding (_ : parity_scale_codec.error.Error)
      | UnexpectedUserAccount
      | NoAccountForId (_ : alloc.vec.Vec u8).
    End AccountError.
    Definition AccountError := AccountError.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        match self with
        | ink_env.engine.off_chain.AccountError.Decoding __self_0 =>
          core.fmt.Formatter::["debug_tuple_field1_finish"]
            f
            "Decoding"
            (addr_of __self_0)
        | ink_env.engine.off_chain.AccountError.UnexpectedUserAccount =>
          core.fmt.Formatter::["write_str"] f "UnexpectedUserAccount"
        | ink_env.engine.off_chain.AccountError.NoAccountForId __self_0 =>
          core.fmt.Formatter::["debug_tuple_field1_finish"]
            f
            "NoAccountForId"
            (addr_of __self_0)
        end.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
    
    Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Definition from
          `{H : State.Trait}
          (original : parity_scale_codec.error.Error)
          : M (H := H) ink_env.engine.off_chain.AccountError :=
        Pure (ink_env.engine.off_chain.AccountError.Decoding original).
      
      Global Instance AssociatedFunction_from `{H : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I :
          core.convert.From.Trait
            Self
            (T := parity_scale_codec.error.Error) := {
        core.convert.From.from `{H : State.Trait} := from;
      }.
    End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
        core.marker.StructuralPartialEq.Build_Trait _.
    End
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
    
    Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Definition eq
          `{H : State.Trait}
          (self : ref Self)
          (other : ref ink_env.engine.off_chain.AccountError)
          : M (H := H) bool :=
        let* __self_tag := core.intrinsics.discriminant_value self in
        let* __arg1_tag := core.intrinsics.discriminant_value other in
        let* α0 := __self_tag.["eq"] __arg1_tag in
        let* α1 :=
          match (self, other) with
          |
              (ink_env.engine.off_chain.AccountError.Decoding __self_0,
                ink_env.engine.off_chain.AccountError.Decoding __arg1_0)
              =>
            let* α0 := __self_0.["deref"] in
            let* α1 := __arg1_0.["deref"] in
            α0.["eq"] α1
          |
              (ink_env.engine.off_chain.AccountError.NoAccountForId __self_0,
                ink_env.engine.off_chain.AccountError.NoAccountForId __arg1_0)
              =>
            let* α0 := __self_0.["deref"] in
            let* α1 := __arg1_0.["deref"] in
            α0.["eq"] α1
          | _ => Pure true
          end in
        α0.["andb"] α1.
      
      Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I : core.cmp.PartialEq.Trait Self := {
        core.cmp.PartialEq.eq `{H : State.Trait} := eq;
      }.
    End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
    
    Module
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Global Instance I : core.marker.StructuralEq.Trait Self :=
        core.marker.StructuralEq.Build_Trait _.
    End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
    
    Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Definition assert_receiver_is_total_eq
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) unit :=
        let _ := tt in
        let _ := tt in
        Pure tt.
      
      Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
    End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
  End off_chain.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition decode_instantiate_result
      `{H : State.Trait}
      {I E ContractRef R : Set}
      `{parity_scale_codec.codec.Input.Trait I}
      `{ink_env.types.Environment.Trait E}
      `{ink_env.call.create_builder.FromAccountId.Trait E ContractRef}
      `{ink_env.call.create_builder.ConstructorReturnType.Trait ContractRef R}
      (instantiate_result : ink_env.error.Result unit)
      (out_address : mut_ref I)
      (out_return_value : mut_ref I)
      :
        M (H := H)
          (ink_env.error.Result
            (ink_primitives.ConstructorResult
              ink_env.call.create_builder.ConstructorReturnType.Output)) :=
    match instantiate_result with
    | core.result.Result.Ok () =>
      let* account_id :=
        let* α0 := parity_scale_codec.codec.Decode.decode out_address in
        let* α1 := LangItem α0 in
        match α1 with
        | Break {| Break.0 := residual; |} =>
          let* α0 := LangItem residual in
          Return α0
        | Continue {| Continue.0 := val; |} => Pure val
        end in
      let* contract_ref :=
        ink_env.call.create_builder.FromAccountId.from_account_id account_id in
      let* output :=
        ink_env.call.create_builder.ConstructorReturnType.ok contract_ref in
      Pure (core.result.Result.Ok (core.result.Result.Ok output))
    | core.result.Result.Err ink_env.error.Error.CalleeReverted =>
      ink_env.engine.decode_instantiate_err out_return_value
    | core.result.Result.Err actual_error =>
      Pure (core.result.Result.Err actual_error)
    end.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition decode_instantiate_err
      `{H : State.Trait}
      {I E ContractRef R : Set}
      `{parity_scale_codec.codec.Input.Trait I}
      `{ink_env.types.Environment.Trait E}
      `{ink_env.call.create_builder.FromAccountId.Trait E ContractRef}
      `{ink_env.call.create_builder.ConstructorReturnType.Trait ContractRef R}
      (out_return_value : mut_ref I)
      :
        M (H := H)
          (ink_env.error.Result
            (ink_primitives.ConstructorResult
              ink_env.call.create_builder.ConstructorReturnType.Output)) :=
    let* constructor_result_variant :=
      let* α0 := out_return_value.["read_byte"] in
      let* α1 := LangItem α0 in
      match α1 with
      | Break {| Break.0 := residual; |} =>
        let* α0 := LangItem residual in
        Return α0
      | Continue {| Continue.0 := val; |} => Pure val
      end in
    match constructor_result_variant with
    | 0 =>
      if (ink_env.call.create_builder.ConstructorReturnType.IS_RESULT : bool)
      then
        let* result_variant :=
          let* α0 := out_return_value.["read_byte"] in
          let* α1 := LangItem α0 in
          match α1 with
          | Break {| Break.0 := residual; |} =>
            let* α0 := LangItem residual in
            Return α0
          | Continue {| Continue.0 := val; |} => Pure val
          end in
        match result_variant with
        | 0 =>
          let* α0 :=
            format_arguments::["new_const"]
              (addr_of
                [
                  "The callee reverted, but did not encode an error in the output buffer."
                ]) in
          core.panicking.panic_fmt α0
        | 1 =>
          let* contract_err :=
            let* α0 :=
              parity_scale_codec.codec.Decode.decode out_return_value in
            let* α1 := LangItem α0 in
            match α1 with
            | Break {| Break.0 := residual; |} =>
              let* α0 := LangItem residual in
              Return α0
            | Continue {| Continue.0 := val; |} => Pure val
            end in
          let* err :=
            let* α0 :=
              ink_env.call.create_builder.ConstructorReturnType.err
                contract_err in
            α0.["unwrap_or_else"]
              (fun  =>
                let* α0 :=
                  format_arguments::["new_const"]
                    (addr_of
                      [
                        "Expected an error instance for return type where IS_RESULT == true"
                      ]) in
                core.panicking.panic_fmt α0) in
          Pure (core.result.Result.Ok (core.result.Result.Ok err))
        | _ =>
          let* α0 :=
            "Invalid inner constructor Result encoding, expected 0 or 1 as the first byte".["into"] in
          Pure (core.result.Result.Err (ink_env.error.Error.Decode α0))
        end
      else
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of
              [
                "The callee reverted, but did not encode an error in the output buffer."
              ]) in
        core.panicking.panic_fmt α0
    | 1 =>
      let* lang_err :=
        let* α0 := parity_scale_codec.codec.Decode.decode out_return_value in
        let* α1 := LangItem α0 in
        match α1 with
        | Break {| Break.0 := residual; |} =>
          let* α0 := LangItem residual in
          Return α0
        | Continue {| Continue.0 := val; |} => Pure val
        end in
      Pure (core.result.Result.Ok (core.result.Result.Err lang_err))
    | _ =>
      let* α0 :=
        "Invalid outer constructor Result encoding, expected 0 or 1 as the first byte".["into"] in
      Pure (core.result.Result.Err (ink_env.error.Error.Decode α0))
    end.
End engine.

Module OnInstance.
  Class Trait (Self : Set) : Set := {
    on_instance `{H : State.Trait} : F -> (M (H := H) R);
  }.
  
  Global Instance Method_on_instance `{H : State.Trait} `(Trait)
    : Notation.Dot "on_instance" := {
    Notation.dot := on_instance;
  }.
End OnInstance.

Module off_chain.
  Module call_data.
    Module CallData.
      Record t : Set := {
        bytes : alloc.vec.Vec u8;
      }.
      
      Global Instance Get_bytes : Notation.Dot "bytes" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End CallData.
    Definition CallData : Set := CallData.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
        string -> alloc_vec_Vec_u8 -> 
        M (H := H) core.fmt.Result.
      
      Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
        core.fmt.Formatter "debug_struct_field1_finish" := {
        Notation.double_colon := debug_struct_field1_finish; }.
      
      Definition fmt
          `{H : State.Trait}
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M (H := H) core.fmt.Result :=
        core.fmt.Formatter::["debug_struct_field1_finish"]
          f
          "CallData"
          "bytes"
          (addr_of (addr_of self.["bytes"])).
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) ink_env.engine.off_chain.call_data.CallData :=
        let* α0 := core.clone.Clone.clone (addr_of self.["bytes"]) in
        Pure {| ink_env.engine.off_chain.call_data.CallData.bytes := α0; |}.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
        core.marker.StructuralPartialEq.Build_Trait _.
    End
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Definition eq
          `{H : State.Trait}
          (self : ref Self)
          (other : ref ink_env.engine.off_chain.call_data.CallData)
          : M (H := H) bool :=
        self.["bytes"].["eq"] other.["bytes"].
      
      Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I : core.cmp.PartialEq.Trait Self := {
        core.cmp.PartialEq.eq `{H : State.Trait} := eq;
      }.
    End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Global Instance I : core.marker.StructuralEq.Trait Self :=
        core.marker.StructuralEq.Build_Trait _.
    End
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Definition assert_receiver_is_total_eq
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) unit :=
        let _ := tt in
        Pure tt.
      
      Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
    End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module Impl_ink_env_engine_off_chain_call_data_CallData_2.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Definition new
          `{H : State.Trait}
          (selector : ink_env.call.selector.Selector)
          : M (H := H) Self :=
        let* bytes := selector.["to_bytes"] in
        let* α0 :=
          alloc.boxed.Box::["new"] [ bytes[0]; bytes[1]; bytes[2]; bytes[3] ] in
        let* α1 := Slice::["into_vec"] α0 in
        Pure {| Self.bytes := α1; |}.
      
      Global Instance AssociatedFunction_new `{H : State.Trait} :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
      
      Definition push_arg
          `{H : State.Trait}
          (self : mut_ref Self)
          (arg : ref A)
          : M (H := H) unit :=
        arg.["encode_to"] (addr_of self.["bytes"]).
      
      Global Instance Method_push_arg `{H : State.Trait} :
        Notation.Dot "push_arg" := {
        Notation.dot := push_arg;
      }.
      
      Definition selector
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) ink_env.call.selector.Selector :=
        let* _ :=
          if (true : bool) then
            let* _ :=
              let* α0 := self.["bytes"].["len"] in
              let* α1 := α0.["ge"] 4 in
              let* α2 := α1.["not"] in
              if (α2 : bool) then
                core.panicking.panic "assertion failed: self.bytes.len() >= 4"
              else
                Pure tt in
            Pure tt
          else
            Pure tt in
        let bytes :=
          [
            self.["bytes"][0];
            self.["bytes"][1];
            self.["bytes"][2];
            self.["bytes"][3]
          ] in
        bytes.["into"].
      
      Global Instance Method_selector `{H : State.Trait} :
        Notation.Dot "selector" := {
        Notation.dot := selector;
      }.
      
      Definition params
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref Slice) :=
        let* _ :=
          if (true : bool) then
            let* _ :=
              let* α0 := self.["bytes"].["len"] in
              let* α1 := α0.["ge"] 4 in
              let* α2 := α1.["not"] in
              if (α2 : bool) then
                core.panicking.panic "assertion failed: self.bytes.len() >= 4"
              else
                Pure tt in
            Pure tt
          else
            Pure tt in
        Pure (addr_of self.["bytes"][RangeFrom {| RangeFrom.start := 4; |}]).
      
      Global Instance Method_params `{H : State.Trait} :
        Notation.Dot "params" := {
        Notation.dot := params;
      }.
      
      Definition to_bytes
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) (ref Slice) :=
        Pure (addr_of self.["bytes"]).
      
      Global Instance Method_to_bytes `{H : State.Trait} :
        Notation.Dot "to_bytes" := {
        Notation.dot := to_bytes;
      }.
    End Impl_ink_env_engine_off_chain_call_data_CallData_2.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Definition size_hint
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) usize :=
        self.["bytes"].["len"].
      
      Global Instance Method_size_hint `{H : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Definition encode_to
          `{H : State.Trait}
          (self : ref Self)
          (dest : mut_ref T)
          : M (H := H) unit :=
        let* _ :=
          let* α0 := self.["bytes"].["as_slice"] in
          dest.["write"] α0 in
        Pure tt.
      
      Global Instance Method_encode_to `{H : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Definition decode
          `{H : State.Trait}
          (input : mut_ref I)
          :
            M (H := H)
              (core.result.Result Self parity_scale_codec.error.Error) :=
        let* remaining_len :=
          let* α0 := input.["remaining_len"] in
          let* α1 := α0.["unwrap_or"] core.option.Option.None in
          α1.["unwrap_or"] 0 in
        let* bytes := alloc.vec.Vec::["with_capacity"] remaining_len in
        let* _ :=
          loop
            let* α0 := input.["read_byte"] in
            let* α1 := let_if core.result.Result.Ok byte := α0 in
            if (α1 : bool) then
              let* _ := bytes.["push"] byte in
              Pure tt
            else
              let _ := Break in
              Pure tt
            from
            while in
        let* _ :=
          let* α0 := bytes.["len"] in
          let* α1 := α0.["lt"] 4 in
          if (α1 : bool) then
            let* α0 :=
              parity_scale_codec.error.Error::["from"]
                "require at least 4 bytes for input data" in
            Return (core.result.Result.Err α0)
          else
            Pure tt in
        Pure (core.result.Result.Ok {| Self.bytes := bytes; |}).
      
      Global Instance AssociatedFunction_decode `{H : State.Trait} :
        Notation.DoubleColon Self "decode" := {
        Notation.double_colon := decode;
      }.
      
      Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
        parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
      }.
    End
      Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
  End call_data.
  
  Module impls.
    Definition BUFFER_SIZE `{H : State.Trait} : usize := run (1.["shl"] 14).
    
    Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
      Definition Self := ink_env.hash.Blake2x128.
      
      Definition hash
          `{H : State.Trait}
          (input : ref Slice)
          (output : mut_ref ink_env.hash.HashOutput.Type)
          : M (H := H) unit :=
        let* output :=
          let offset := 0 in
          let slice :=
            addr_of
              output[Range
                  {|
                  Range.start := offset;
                  Range.end := offset.["add"] 16;
                |}] in
          ink_env.engine.off_chain.impls.hash.as_array slice in
        let* _ := ink_engine.ext.Engine::["hash_blake2_128"] input output in
        Pure tt.
      
      Global Instance AssociatedFunction_hash `{H : State.Trait} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash;
      }.
      
      Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
        ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
      }.
    End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
    
    Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
      Definition Self := ink_env.hash.Blake2x256.
      
      Definition hash
          `{H : State.Trait}
          (input : ref Slice)
          (output : mut_ref ink_env.hash.HashOutput.Type)
          : M (H := H) unit :=
        let* output :=
          let offset := 0 in
          let slice :=
            addr_of
              output[Range
                  {|
                  Range.start := offset;
                  Range.end := offset.["add"] 32;
                |}] in
          ink_env.engine.off_chain.impls.hash.as_array slice in
        let* _ := ink_engine.ext.Engine::["hash_blake2_256"] input output in
        Pure tt.
      
      Global Instance AssociatedFunction_hash `{H : State.Trait} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash;
      }.
      
      Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
        ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
      }.
    End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
    
    Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
      Definition Self := ink_env.hash.Sha2x256.
      
      Definition hash
          `{H : State.Trait}
          (input : ref Slice)
          (output : mut_ref ink_env.hash.HashOutput.Type)
          : M (H := H) unit :=
        let* output :=
          let offset := 0 in
          let slice :=
            addr_of
              output[Range
                  {|
                  Range.start := offset;
                  Range.end := offset.["add"] 32;
                |}] in
          ink_env.engine.off_chain.impls.hash.as_array slice in
        let* _ := ink_engine.ext.Engine::["hash_sha2_256"] input output in
        Pure tt.
      
      Global Instance AssociatedFunction_hash `{H : State.Trait} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash;
      }.
      
      Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
        ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
      }.
    End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
    
    Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
      Definition Self := ink_env.hash.Keccak256.
      
      Definition hash
          `{H : State.Trait}
          (input : ref Slice)
          (output : mut_ref ink_env.hash.HashOutput.Type)
          : M (H := H) unit :=
        let* output :=
          let offset := 0 in
          let slice :=
            addr_of
              output[Range
                  {|
                  Range.start := offset;
                  Range.end := offset.["add"] 32;
                |}] in
          ink_env.engine.off_chain.impls.hash.as_array slice in
        let* _ := ink_engine.ext.Engine::["hash_keccak_256"] input output in
        Pure tt.
      
      Global Instance AssociatedFunction_hash `{H : State.Trait} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash;
      }.
      
      Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
        ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
      }.
    End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
    
    Module Impl_core_convert_From_for_ink_env_error_Error.
      Definition Self := ink_env.error.Error.
      
      Definition from
          `{H : State.Trait}
          (ext_error : ink_engine.ext.Error)
          : M (H := H) Self :=
        match ext_error with
        | ink_engine.ext.Error.Unknown => Pure Self::["Unknown"]
        | ink_engine.ext.Error.CalleeTrapped => Pure Self::["CalleeTrapped"]
        | ink_engine.ext.Error.CalleeReverted => Pure Self::["CalleeReverted"]
        | ink_engine.ext.Error.KeyNotFound => Pure Self::["KeyNotFound"]
        | ink_engine.ext.Error._BelowSubsistenceThreshold =>
          Pure Self::["_BelowSubsistenceThreshold"]
        | ink_engine.ext.Error.TransferFailed => Pure Self::["TransferFailed"]
        | ink_engine.ext.Error._EndowmentTooLow =>
          Pure Self::["_EndowmentTooLow"]
        | ink_engine.ext.Error.CodeNotFound => Pure Self::["CodeNotFound"]
        | ink_engine.ext.Error.NotCallable => Pure Self::["NotCallable"]
        | ink_engine.ext.Error.LoggingDisabled => Pure Self::["LoggingDisabled"]
        | ink_engine.ext.Error.EcdsaRecoveryFailed =>
          Pure Self::["EcdsaRecoveryFailed"]
        end.
      
      Global Instance AssociatedFunction_from `{H : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I :
          core.convert.From.Trait Self (T := ink_engine.ext.Error) := {
        core.convert.From.from `{H : State.Trait} := from;
      }.
    End Impl_core_convert_From_for_ink_env_error_Error.
    
    Module TopicsBuilder.
      Record t : Set := {
        topics : alloc.vec.Vec (alloc.vec.Vec u8);
      }.
      
      Global Instance Get_topics : Notation.Dot "topics" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End TopicsBuilder.
    Definition TopicsBuilder : Set := TopicsBuilder.t.
    
    Module
      Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
      
      Definition default
          `{H : State.Trait}
          (_ : unit)
          : M (H := H) ink_env.engine.off_chain.impls.TopicsBuilder :=
        let* α0 := core.default.Default.default tt in
        Pure {| ink_env.engine.off_chain.impls.TopicsBuilder.topics := α0; |}.
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End
      Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    
    Module
      Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    Section
      Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      Context {E : Set}.
      
      Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
      
      Definition Output : Set := alloc.vec.Vec u8.
      
      Definition expect
          `{H : State.Trait}
          (self : mut_ref Self)
          (_expected_topics : usize)
          : M (H := H) unit :=
        Pure tt.
      
      Global Instance Method_expect `{H : State.Trait} :
        Notation.Dot "expect" := {
        Notation.dot := expect;
      }.
      
      Definition push_topic
          `{H : State.Trait}
          (self : mut_ref Self)
          (topic_value : ref T)
          : M (H := H) unit :=
        let* encoded := topic_value.["encode"] in
        let* len_encoded := encoded.["len"] in
        let result := ink_env.types.Environment.Hash::["CLEAR_HASH"] in
        let* len_result :=
          let* α0 := result.["as_ref"] in
          α0.["len"] in
        let* _ :=
          let* α0 := len_encoded.["le"] len_result in
          if (α0 : bool) then
            let* _ :=
              let* α0 := result.["as_mut"] in
              α0[RangeTo {| RangeTo.end := len_encoded; |}].["copy_from_slice"]
                (addr_of encoded[RangeFull {|  |}]) in
            Pure tt
          else
            let* hash_output := ink_env.hash.HashOutput.Type::["default"] tt in
            let* _ :=
              ink_env.hash.CryptoHash.hash
                (addr_of encoded[RangeFull {|  |}])
                (addr_of hash_output) in
            let* copy_len :=
              let* α0 := hash_output.["len"] in
              core.cmp.min α0 len_result in
            let* _ :=
              let* α0 := result.["as_mut"] in
              α0[Range {| Range.start := 0; Range.end := copy_len;
                  |}].["copy_from_slice"]
                (addr_of
                  hash_output[Range {| Range.start := 0; Range.end := copy_len;
                    |}]) in
            Pure tt in
        let* off_hash := result.["as_ref"] in
        let* off_hash := off_hash.["to_vec"] in
        let* _ :=
          if (true : bool) then
            let* _ :=
              let* α0 := self.["topics"].["contains"] (addr_of off_hash) in
              let* α1 := α0.["not"] in
              let* α2 := α1.["not"] in
              if (α2 : bool) then
                let* α0 :=
                  format_arguments::["new_const"]
                    (addr_of [ "duplicate topic hash discovered!" ]) in
                core.panicking.panic_fmt α0
              else
                Pure tt in
            Pure tt
          else
            Pure tt in
        let* _ := self.["topics"].["push"] off_hash in
        Pure tt.
      
      Global Instance Method_push_topic `{H : State.Trait} :
        Notation.Dot "push_topic" := {
        Notation.dot := push_topic;
      }.
      
      Definition output
          `{H : State.Trait}
          (self : Self)
          : M (H := H) ImplSelf.Output :=
        let* all := alloc.vec.Vec::["new"] tt in
        let* topics_len_compact :=
          let* α0 := self.["topics"].["len"] in
          Pure
            (addr_of
              (parity_scale_codec.compact.Compact.Build_t (cast α0 u32))) in
        let* topics_encoded :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode
              (addr_of topics_len_compact) in
          Pure (addr_of α0[RangeFull {|  |}]) in
        let* _ :=
          let* α0 := topics_encoded.["to_vec"] in
          all.["append"] (addr_of α0) in
        let* _ :=
          let* α0 := self.["topics"].["into_iter"] in
          α0.["for_each"] (fun v => all.["append"] (addr_of v)) in
        Pure all.
      
      Global Instance Method_output `{H : State.Trait} :
        Notation.Dot "output" := {
        Notation.dot := output;
      }.
      
      Global Instance I :
          ink_env.topics.TopicsBuilderBackend.Trait Self (E := E) := {
        ink_env.topics.TopicsBuilderBackend.expect `{H : State.Trait} := expect;
        ink_env.topics.TopicsBuilderBackend.push_topic
          `{H : State.Trait}
          :=
          push_topic;
        ink_env.topics.TopicsBuilderBackend.output `{H : State.Trait} := output;
      }.
    End
      Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    End
      Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    
    Module Impl_ink_env_engine_off_chain_EnvInstance_2.
      Definition Self := ink_env.engine.off_chain.EnvInstance.
      
      Definition get_property
          `{H : State.Trait}
          (self : mut_ref Self)
          (ext_fn
            :
            (ref ink_engine.ext.Engine) -> (mut_ref (mut_ref Slice)) -> unit)
          : M (H := H) (ink_env.error.Result T) :=
        let* full_scope := repeat 0 in
        let full_scope := addr_of (addr_of full_scope[RangeFull {|  |}]) in
        let* _ := ext_fn (addr_of self.["engine"]) full_scope in
        let* α0 :=
          parity_scale_codec.codec.Decode.decode
            (addr_of (addr_of full_scope[RangeFull {|  |}])) in
        α0.["map_err"] core.convert.Into.into.
      
      Global Instance Method_get_property `{H : State.Trait} :
        Notation.Dot "get_property" := {
        Notation.dot := get_property;
      }.
    End Impl_ink_env_engine_off_chain_EnvInstance_2.
    
    Module
      Impl_ink_env_backend_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
      Definition Self := ink_env.engine.off_chain.EnvInstance.
      
      Definition set_contract_storage
          `{H : State.Trait}
          (self : mut_ref Self)
          (key : ref K)
          (value : ref V)
          : M (H := H) (core.option.Option u32) :=
        let* v := alloc.vec.Vec::["new"] tt in
        let* _ :=
          ink_storage_traits.storage.Storable.encode value (addr_of v) in
        let* α0 := key.["encode"] in
        self.["engine"].["set_storage"]
          (addr_of α0)
          (addr_of v[RangeFull {|  |}]).
      
      Global Instance Method_set_contract_storage `{H : State.Trait} :
        Notation.Dot "set_contract_storage" := {
        Notation.dot := set_contract_storage;
      }.
      
      Definition get_contract_storage
          `{H : State.Trait}
          (self : mut_ref Self)
          (key : ref K)
          : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
        let* output := repeat 0 in
        let* _ :=
          let* α0 := key.["encode"] in
          let* α1 :=
            self.["engine"].["get_storage"]
              (addr_of α0)
              (addr_of (addr_of output[RangeFull {|  |}])) in
          match α1 with
          | core.result.Result.Ok _ => Pure tt
          | core.result.Result.Err ink_engine.ext.Error.KeyNotFound =>
            Return (core.result.Result.Ok core.option.Option.None)
          | core.result.Result.Err _ =>
            let* α0 :=
              format_arguments::["new_const"]
                (addr_of [ "encountered unexpected error" ]) in
            core.panicking.panic_fmt α0
          end in
        let* decoded :=
          let* α0 :=
            ink_storage_traits.storage.Storable.decode
              (addr_of (addr_of output[RangeFull {|  |}])) in
          let* α1 := LangItem α0 in
          match α1 with
          | Break {| Break.0 := residual; |} =>
            let* α0 := LangItem residual in
            Return α0
          | Continue {| Continue.0 := val; |} => Pure val
          end in
        Pure (core.result.Result.Ok (core.option.Option.Some decoded)).
      
      Global Instance Method_get_contract_storage `{H : State.Trait} :
        Notation.Dot "get_contract_storage" := {
        Notation.dot := get_contract_storage;
      }.
      
      Definition take_contract_storage
          `{H : State.Trait}
          (self : mut_ref Self)
          (key : ref K)
          : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
        let* output := repeat 0 in
        let* _ :=
          let* α0 := key.["encode"] in
          let* α1 :=
            self.["engine"].["take_storage"]
              (addr_of α0)
              (addr_of (addr_of output[RangeFull {|  |}])) in
          match α1 with
          | core.result.Result.Ok _ => Pure tt
          | core.result.Result.Err ink_engine.ext.Error.KeyNotFound =>
            Return (core.result.Result.Ok core.option.Option.None)
          | core.result.Result.Err _ =>
            let* α0 :=
              format_arguments::["new_const"]
                (addr_of [ "encountered unexpected error" ]) in
            core.panicking.panic_fmt α0
          end in
        let* decoded :=
          let* α0 :=
            ink_storage_traits.storage.Storable.decode
              (addr_of (addr_of output[RangeFull {|  |}])) in
          let* α1 := LangItem α0 in
          match α1 with
          | Break {| Break.0 := residual; |} =>
            let* α0 := LangItem residual in
            Return α0
          | Continue {| Continue.0 := val; |} => Pure val
          end in
        Pure (core.result.Result.Ok (core.option.Option.Some decoded)).
      
      Global Instance Method_take_contract_storage `{H : State.Trait} :
        Notation.Dot "take_contract_storage" := {
        Notation.dot := take_contract_storage;
      }.
      
      Definition contains_contract_storage
          `{H : State.Trait}
          (self : mut_ref Self)
          (key : ref K)
          : M (H := H) (core.option.Option u32) :=
        let* α0 := key.["encode"] in
        self.["engine"].["contains_storage"] (addr_of α0).
      
      Global Instance Method_contains_contract_storage `{H : State.Trait} :
        Notation.Dot "contains_contract_storage" := {
        Notation.dot := contains_contract_storage;
      }.
      
      Definition clear_contract_storage
          `{H : State.Trait}
          (self : mut_ref Self)
          (key : ref K)
          : M (H := H) (core.option.Option u32) :=
        let* α0 := key.["encode"] in
        self.["engine"].["clear_storage"] (addr_of α0).
      
      Global Instance Method_clear_contract_storage `{H : State.Trait} :
        Notation.Dot "clear_contract_storage" := {
        Notation.dot := clear_contract_storage;
      }.
      
      Definition decode_input
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) (ink_env.error.Result T) :=
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [ "not implemented: the off-chain env does not implement `input`"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_decode_input `{H : State.Trait} :
        Notation.Dot "decode_input" := {
        Notation.dot := decode_input;
      }.
      
      Definition return_value
          `{H : State.Trait}
          (self : mut_ref Self)
          (_flags : ink_env.backend.ReturnFlags)
          (_return_value : ref R)
          : M (H := H) Empty_set :=
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: the off-chain env does not implement `return_value`"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_return_value `{H : State.Trait} :
        Notation.Dot "return_value" := {
        Notation.dot := return_value;
      }.
      
      Definition debug_message
          `{H : State.Trait}
          (self : mut_ref Self)
          (message : ref str)
          : M (H := H) unit :=
        self.["engine"].["debug_message"] message.
      
      Global Instance Method_debug_message `{H : State.Trait} :
        Notation.Dot "debug_message" := {
        Notation.dot := debug_message;
      }.
      
      Definition hash_bytes
          `{H : State.Trait}
          (self : mut_ref Self)
          (input : ref Slice)
          (output : mut_ref ink_env.hash.HashOutput.Type)
          : M (H := H) unit :=
        ink_env.hash.CryptoHash.hash input output.
      
      Global Instance Method_hash_bytes `{H : State.Trait} :
        Notation.Dot "hash_bytes" := {
        Notation.dot := hash_bytes;
      }.
      
      Definition hash_encoded
          `{H : State.Trait}
          (self : mut_ref Self)
          (input : ref T)
          (output : mut_ref ink_env.hash.HashOutput.Type)
          : M (H := H) unit :=
        let* enc_input :=
          let* α0 := parity_scale_codec.codec.Encode.encode input in
          Pure (addr_of α0[RangeFull {|  |}]) in
        ink_env.hash.CryptoHash.hash enc_input output.
      
      Global Instance Method_hash_encoded `{H : State.Trait} :
        Notation.Dot "hash_encoded" := {
        Notation.dot := hash_encoded;
      }.
      
      Definition ecdsa_recover
          `{H : State.Trait}
          (self : mut_ref Self)
          (signature : ref list u8)
          (message_hash : ref list u8)
          (output : mut_ref list u8)
          : M (H := H) (ink_env.error.Result unit) :=
        let* recovery_byte :=
          let* α0 := signature[64].["gt"] 26 in
          if (α0 : bool) then
            signature[64].["sub"] 27
          else
            Pure signature[64] in
        let* recovery_id :=
          let* α0 :=
            secp256k1.ecdsa.recovery.RecoveryId::["from_i32"]
              (cast recovery_byte i32) in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_display"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "Unable to parse the recovery id: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        let* message :=
          let* α0 := secp256k1.Message::["from_slice"] message_hash in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_display"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "Unable to create the message from hash: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        let* signature :=
          let* α0 :=
            secp256k1.ecdsa.recovery.RecoverableSignature::["from_compact"]
              (addr_of
                signature[Range {| Range.start := 0; Range.end := 64; |}])
              recovery_id in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_display"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "Unable to parse the signature: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        let* pub_key :=
          secp256k1.context.global.SECP256K1.["recover_ecdsa"]
            (addr_of message)
            (addr_of signature) in
        match pub_key with
        | core.result.Result.Ok pub_key =>
          let* _ :=
            let* α0 := pub_key.["serialize"] in
            assign output.["deref"] α0 in
          Pure (core.result.Result.Ok tt)
        | core.result.Result.Err _ =>
          Pure (core.result.Result.Err ink_env.error.Error.EcdsaRecoveryFailed)
        end.
      
      Global Instance Method_ecdsa_recover `{H : State.Trait} :
        Notation.Dot "ecdsa_recover" := {
        Notation.dot := ecdsa_recover;
      }.
      
      Definition ecdsa_to_eth_address
          `{H : State.Trait}
          (self : mut_ref Self)
          (pubkey : ref list u8)
          (output : mut_ref list u8)
          : M (H := H) (ink_env.error.Result unit) :=
        let* pk :=
          let* α0 := secp256k1.key.PublicKey::["from_slice"] pubkey in
          let* α1 :=
            α0.["map_err"]
              (fun _ => Pure ink_env.error.Error.EcdsaRecoveryFailed) in
          let* α2 := LangItem α1 in
          match α2 with
          | Break {| Break.0 := residual; |} =>
            let* α0 := LangItem residual in
            Return α0
          | Continue {| Continue.0 := val; |} => Pure val
          end in
        let* uncompressed := pk.["serialize_uncompressed"] in
        let* hash := ink_env.hash.HashOutput.Type::["default"] tt in
        let* _ :=
          ink_env.hash.Keccak256::["hash"]
            (addr_of uncompressed[RangeFrom {| RangeFrom.start := 1; |}])
            (addr_of hash) in
        let* _ :=
          let* α0 := output.["as_mut"] in
          α0.["copy_from_slice"]
            (addr_of hash[RangeFrom {| RangeFrom.start := 12; |}]) in
        Pure (core.result.Result.Ok tt).
      
      Global Instance Method_ecdsa_to_eth_address `{H : State.Trait} :
        Notation.Dot "ecdsa_to_eth_address" := {
        Notation.dot := ecdsa_to_eth_address;
      }.
      
      Definition call_chain_extension
          `{H : State.Trait}
          (self : mut_ref Self)
          (func_id : u32)
          (input : ref I)
          (status_to_result : F)
          (decode_to_result : D)
          : M (H := H) (core.result.Result T E) :=
        let* enc_input :=
          let* α0 := parity_scale_codec.codec.Encode.encode input in
          Pure (addr_of α0[RangeFull {|  |}]) in
        let* output := repeat 0 in
        let* _ :=
          self.["engine"].["call_chain_extension"]
            func_id
            enc_input
            (addr_of (addr_of output[RangeFull {|  |}])) in
        let* '(status, out) :=
          let* α0 :=
            parity_scale_codec.codec.Decode.decode
              (addr_of (addr_of output[RangeFull {|  |}])) in
          α0.["unwrap_or_else"]
            (fun error =>
              let* α0 := format_argument::["new_debug"] (addr_of error) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of
                    [ "could not decode `call_chain_extension` output: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1) in
        let* _ :=
          let* α0 := status_to_result status in
          let* α1 := LangItem α0 in
          match α1 with
          | Break {| Break.0 := residual; |} =>
            let* α0 := LangItem residual in
            Return α0
          | Continue {| Continue.0 := val; |} => Pure val
          end in
        let* decoded :=
          let* α0 := decode_to_result (addr_of out[RangeFull {|  |}]) in
          let* α1 := LangItem α0 in
          match α1 with
          | Break {| Break.0 := residual; |} =>
            let* α0 := LangItem residual in
            Return α0
          | Continue {| Continue.0 := val; |} => Pure val
          end in
        Pure (core.result.Result.Ok decoded).
      
      Global Instance Method_call_chain_extension `{H : State.Trait} :
        Notation.Dot "call_chain_extension" := {
        Notation.dot := call_chain_extension;
      }.
      
      Definition set_code_hash
          `{H : State.Trait}
          (self : mut_ref Self)
          (_code_hash : ref Slice)
          : M (H := H) (ink_env.error.Result unit) :=
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not support `set_code_hash`"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_set_code_hash `{H : State.Trait} :
        Notation.Dot "set_code_hash" := {
        Notation.dot := set_code_hash;
      }.
      
      Global Instance I : ink_env.backend.EnvBackend.Trait Self := {
        ink_env.backend.EnvBackend.set_contract_storage
          `{H : State.Trait}
          :=
          set_contract_storage;
        ink_env.backend.EnvBackend.get_contract_storage
          `{H : State.Trait}
          :=
          get_contract_storage;
        ink_env.backend.EnvBackend.take_contract_storage
          `{H : State.Trait}
          :=
          take_contract_storage;
        ink_env.backend.EnvBackend.contains_contract_storage
          `{H : State.Trait}
          :=
          contains_contract_storage;
        ink_env.backend.EnvBackend.clear_contract_storage
          `{H : State.Trait}
          :=
          clear_contract_storage;
        ink_env.backend.EnvBackend.decode_input
          `{H : State.Trait}
          :=
          decode_input;
        ink_env.backend.EnvBackend.return_value
          `{H : State.Trait}
          :=
          return_value;
        ink_env.backend.EnvBackend.debug_message
          `{H : State.Trait}
          :=
          debug_message;
        ink_env.backend.EnvBackend.hash_bytes `{H : State.Trait} := hash_bytes;
        ink_env.backend.EnvBackend.hash_encoded
          `{H : State.Trait}
          :=
          hash_encoded;
        ink_env.backend.EnvBackend.ecdsa_recover
          `{H : State.Trait}
          :=
          ecdsa_recover;
        ink_env.backend.EnvBackend.ecdsa_to_eth_address
          `{H : State.Trait}
          :=
          ecdsa_to_eth_address;
        ink_env.backend.EnvBackend.call_chain_extension
          `{H : State.Trait}
          :=
          call_chain_extension;
        ink_env.backend.EnvBackend.set_code_hash
          `{H : State.Trait}
          :=
          set_code_hash;
      }.
    End
      Impl_ink_env_backend_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
    
    Module
      Impl_ink_env_backend_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
      Definition Self := ink_env.engine.off_chain.EnvInstance.
      
      Definition caller
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) ImplE.AccountId :=
        let* α0 := self.["get_property"] ink_engine.ext.Engine::["caller"] in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `caller` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_caller `{H : State.Trait} :
        Notation.Dot "caller" := {
        Notation.dot := caller;
      }.
      
      Definition transferred_value
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) ImplE.Balance :=
        let* α0 :=
          self.["get_property"] ink_engine.ext.Engine::["value_transferred"] in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `transferred_value` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_transferred_value `{H : State.Trait} :
        Notation.Dot "transferred_value" := {
        Notation.dot := transferred_value;
      }.
      
      Definition gas_left
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) u64 :=
        let* α0 := self.["get_property"] ink_engine.ext.Engine::["gas_left"] in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `gas_left` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_gas_left `{H : State.Trait} :
        Notation.Dot "gas_left" := {
        Notation.dot := gas_left;
      }.
      
      Definition block_timestamp
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) ImplE.Timestamp :=
        let* α0 :=
          self.["get_property"] ink_engine.ext.Engine::["block_timestamp"] in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `block_timestamp` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_block_timestamp `{H : State.Trait} :
        Notation.Dot "block_timestamp" := {
        Notation.dot := block_timestamp;
      }.
      
      Definition account_id
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) ImplE.AccountId :=
        let* α0 := self.["get_property"] ink_engine.ext.Engine::["address"] in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `account_id` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_account_id `{H : State.Trait} :
        Notation.Dot "account_id" := {
        Notation.dot := account_id;
      }.
      
      Definition balance
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) ImplE.Balance :=
        let* α0 := self.["get_property"] ink_engine.ext.Engine::["balance"] in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `balance` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_balance `{H : State.Trait} :
        Notation.Dot "balance" := {
        Notation.dot := balance;
      }.
      
      Definition block_number
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) ImplE.BlockNumber :=
        let* α0 :=
          self.["get_property"] ink_engine.ext.Engine::["block_number"] in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `block_number` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_block_number `{H : State.Trait} :
        Notation.Dot "block_number" := {
        Notation.dot := block_number;
      }.
      
      Definition minimum_balance
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) ImplE.Balance :=
        let* α0 :=
          self.["get_property"] ink_engine.ext.Engine::["minimum_balance"] in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `minimum_balance` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_minimum_balance `{H : State.Trait} :
        Notation.Dot "minimum_balance" := {
        Notation.dot := minimum_balance;
      }.
      
      Definition emit_event
          `{H : State.Trait}
          (self : mut_ref Self)
          (event : Event)
          : M (H := H) unit :=
        let* builder :=
          ink_env.engine.off_chain.impls.TopicsBuilder::["default"] tt in
        let* enc_topics :=
          let* α0 := builder.["into"] in
          event.["topics"] α0 in
        let* enc_data :=
          let* α0 := parity_scale_codec.codec.Encode.encode (addr_of event) in
          Pure (addr_of α0[RangeFull {|  |}]) in
        let* _ :=
          self.["engine"].["deposit_event"]
            (addr_of enc_topics[RangeFull {|  |}])
            enc_data in
        Pure tt.
      
      Global Instance Method_emit_event `{H : State.Trait} :
        Notation.Dot "emit_event" := {
        Notation.dot := emit_event;
      }.
      
      Definition invoke_contract
          `{H : State.Trait}
          (self : mut_ref Self)
          (params
            :
            ref
              (ink_env.call.call_builder.CallParams
                E
                (ink_env.call.call_builder.Call E)
                Args
                R))
          :
            M (H := H)
              (ink_env.error.Result (ink_primitives.MessageResult R)) :=
        let* _gas_limit := params.["gas_limit"] in
        let* _callee := params.["callee"] in
        let* _call_flags :=
          let* α0 := params.["call_flags"] in
          α0.["into_u32"] in
        let* _transferred_value := params.["transferred_value"] in
        let* _input := params.["exec_input"] in
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not support contract invocation"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_invoke_contract `{H : State.Trait} :
        Notation.Dot "invoke_contract" := {
        Notation.dot := invoke_contract;
      }.
      
      Definition invoke_contract_delegate
          `{H : State.Trait}
          (self : mut_ref Self)
          (params
            :
            ref
              (ink_env.call.call_builder.CallParams
                E
                (ink_env.call.call_builder.DelegateCall E)
                Args
                R))
          :
            M (H := H)
              (ink_env.error.Result (ink_primitives.MessageResult R)) :=
        let* _code_hash := params.["code_hash"] in
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not support delegated contract invocation"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_invoke_contract_delegate `{H : State.Trait} :
        Notation.Dot "invoke_contract_delegate" := {
        Notation.dot := invoke_contract_delegate;
      }.
      
      Definition instantiate_contract
          `{H : State.Trait}
          (self : mut_ref Self)
          (params
            :
            ref
              (ink_env.call.create_builder.CreateParams
                E
                ContractRef
                Args
                Salt
                R))
          :
            M (H := H)
              (ink_env.error.Result
                (ink_primitives.ConstructorResult
                  ink_env.call.create_builder.ConstructorReturnType.Output)) :=
        let* _code_hash := params.["code_hash"] in
        let* _gas_limit := params.["gas_limit"] in
        let* _endowment := params.["endowment"] in
        let* _input := params.["exec_input"] in
        let* _salt_bytes := params.["salt_bytes"] in
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not support contract instantiation"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_instantiate_contract `{H : State.Trait} :
        Notation.Dot "instantiate_contract" := {
        Notation.dot := instantiate_contract;
      }.
      
      Definition terminate_contract
          `{H : State.Trait}
          (self : mut_ref Self)
          (beneficiary : ImplE.AccountId)
          : M (H := H) Empty_set :=
        let* buffer :=
          parity_scale_codec.codec.Encode.encode (addr_of beneficiary) in
        self.["engine"].["terminate"] (addr_of buffer[RangeFull {|  |}]).
      
      Global Instance Method_terminate_contract `{H : State.Trait} :
        Notation.Dot "terminate_contract" := {
        Notation.dot := terminate_contract;
      }.
      
      Definition transfer
          `{H : State.Trait}
          (self : mut_ref Self)
          (destination : ImplE.AccountId)
          (value : ImplE.Balance)
          : M (H := H) (ink_env.error.Result unit) :=
        let* enc_destination :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode (addr_of destination) in
          Pure (addr_of α0[RangeFull {|  |}]) in
        let* enc_value :=
          let* α0 := parity_scale_codec.codec.Encode.encode (addr_of value) in
          Pure (addr_of α0[RangeFull {|  |}]) in
        let* α0 := self.["engine"].["transfer"] enc_destination enc_value in
        α0.["map_err"] core.convert.Into.into.
      
      Global Instance Method_transfer `{H : State.Trait} :
        Notation.Dot "transfer" := {
        Notation.dot := transfer;
      }.
      
      Definition weight_to_fee
          `{H : State.Trait}
          (self : mut_ref Self)
          (gas : u64)
          : M (H := H) ImplE.Balance :=
        let* output := repeat 0 in
        let* _ :=
          self.["engine"].["weight_to_fee"]
            gas
            (addr_of (addr_of output[RangeFull {|  |}])) in
        let* α0 :=
          parity_scale_codec.codec.Decode.decode
            (addr_of (addr_of output[RangeFull {|  |}])) in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not read `weight_to_fee` property: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_weight_to_fee `{H : State.Trait} :
        Notation.Dot "weight_to_fee" := {
        Notation.dot := weight_to_fee;
      }.
      
      Definition is_contract
          `{H : State.Trait}
          (self : mut_ref Self)
          (account : ref ImplE.AccountId)
          : M (H := H) bool :=
        let* α0 := parity_scale_codec.codec.Encode.encode (addr_of account) in
        self.["engine"].["is_contract"] α0.
      
      Global Instance Method_is_contract `{H : State.Trait} :
        Notation.Dot "is_contract" := {
        Notation.dot := is_contract;
      }.
      
      Definition caller_is_origin
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) bool :=
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not support cross-contract calls"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_caller_is_origin `{H : State.Trait} :
        Notation.Dot "caller_is_origin" := {
        Notation.dot := caller_is_origin;
      }.
      
      Definition code_hash
          `{H : State.Trait}
          (self : mut_ref Self)
          (_account : ref ImplE.AccountId)
          : M (H := H) (ink_env.error.Result ImplE.Hash) :=
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not support `code_hash`"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_code_hash `{H : State.Trait} :
        Notation.Dot "code_hash" := {
        Notation.dot := code_hash;
      }.
      
      Definition own_code_hash
          `{H : State.Trait}
          (self : mut_ref Self)
          : M (H := H) (ink_env.error.Result ImplE.Hash) :=
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not support `own_code_hash`"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_own_code_hash `{H : State.Trait} :
        Notation.Dot "own_code_hash" := {
        Notation.dot := own_code_hash;
      }.
      
      Definition call_runtime
          `{H : State.Trait}
          (self : mut_ref Self)
          (_call : ref Call)
          : M (H := H) (ink_env.error.Result unit) :=
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not support `call_runtime`"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0.
      
      Global Instance Method_call_runtime `{H : State.Trait} :
        Notation.Dot "call_runtime" := {
        Notation.dot := call_runtime;
      }.
      
      Global Instance I : ink_env.backend.TypedEnvBackend.Trait Self := {
        ink_env.backend.TypedEnvBackend.caller `{H : State.Trait} := caller;
        ink_env.backend.TypedEnvBackend.transferred_value
          `{H : State.Trait}
          :=
          transferred_value;
        ink_env.backend.TypedEnvBackend.weight_to_fee
          `{H : State.Trait}
          :=
          weight_to_fee;
        ink_env.backend.TypedEnvBackend.gas_left `{H : State.Trait} := gas_left;
        ink_env.backend.TypedEnvBackend.block_timestamp
          `{H : State.Trait}
          :=
          block_timestamp;
        ink_env.backend.TypedEnvBackend.account_id
          `{H : State.Trait}
          :=
          account_id;
        ink_env.backend.TypedEnvBackend.balance `{H : State.Trait} := balance;
        ink_env.backend.TypedEnvBackend.block_number
          `{H : State.Trait}
          :=
          block_number;
        ink_env.backend.TypedEnvBackend.minimum_balance
          `{H : State.Trait}
          :=
          minimum_balance;
        ink_env.backend.TypedEnvBackend.emit_event
          `{H : State.Trait}
          :=
          emit_event;
        ink_env.backend.TypedEnvBackend.invoke_contract
          `{H : State.Trait}
          :=
          invoke_contract;
        ink_env.backend.TypedEnvBackend.invoke_contract_delegate
          `{H : State.Trait}
          :=
          invoke_contract_delegate;
        ink_env.backend.TypedEnvBackend.instantiate_contract
          `{H : State.Trait}
          :=
          instantiate_contract;
        ink_env.backend.TypedEnvBackend.terminate_contract
          `{H : State.Trait}
          :=
          terminate_contract;
        ink_env.backend.TypedEnvBackend.transfer `{H : State.Trait} := transfer;
        ink_env.backend.TypedEnvBackend.is_contract
          `{H : State.Trait}
          :=
          is_contract;
        ink_env.backend.TypedEnvBackend.caller_is_origin
          `{H : State.Trait}
          :=
          caller_is_origin;
        ink_env.backend.TypedEnvBackend.code_hash
          `{H : State.Trait}
          :=
          code_hash;
        ink_env.backend.TypedEnvBackend.own_code_hash
          `{H : State.Trait}
          :=
          own_code_hash;
        ink_env.backend.TypedEnvBackend.call_runtime
          `{H : State.Trait}
          :=
          call_runtime;
      }.
    End
      Impl_ink_env_backend_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
  End impls.
  
  Module test_api.
    Module EmittedEvent.
      Record t : Set := {
        topics : alloc.vec.Vec (alloc.vec.Vec u8);
        data : alloc.vec.Vec u8;
      }.
      
      Global Instance Get_topics : Notation.Dot "topics" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_data : Notation.Dot "data" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End EmittedEvent.
    Definition EmittedEvent : Set := EmittedEvent.t.
    
    Module
      Impl_core_clone_Clone_for_ink_env_engine_off_chain_test_api_EmittedEvent.
      Definition Self := ink_env.engine.off_chain.test_api.EmittedEvent.
      
      Definition clone
          `{H : State.Trait}
          (self : ref Self)
          : M (H := H) ink_env.engine.off_chain.test_api.EmittedEvent :=
        let* α0 := core.clone.Clone.clone (addr_of self.["topics"]) in
        let* α1 := core.clone.Clone.clone (addr_of self.["data"]) in
        Pure
          {|
            ink_env.engine.off_chain.test_api.EmittedEvent.topics := α0;
            ink_env.engine.off_chain.test_api.EmittedEvent.data := α1;
          |}.
      
      Global Instance Method_clone `{H : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H : State.Trait} := clone;
      }.
    End
      Impl_core_clone_Clone_for_ink_env_engine_off_chain_test_api_EmittedEvent.
    
    Definition set_account_balance
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (account_id : ImplT.AccountId)
        (new_balance : ImplT.Balance)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of account_id) in
            instance.["engine"].["set_balance"] α0 new_balance in
          Pure tt).
    
    Definition get_account_balance
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (account_id : ImplT.AccountId)
        : M (H := H) (ink_env.error.Result ImplT.Balance) :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* α0 :=
            parity_scale_codec.codec.Encode.encode (addr_of account_id) in
          let* α1 := instance.["engine"].["get_balance"] α0 in
          α1.["map_err"] core.convert.Into.into).
    
    Definition register_chain_extension
        `{H : State.Trait}
        {E : Set}
        `{ink_engine.chain_extension.ChainExtension.Trait E}
        (extension : E)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ :=
            let* α0 := alloc.boxed.Box::["new"] extension in
            instance.["engine"].["chain_extension_handler"].["register"] α0 in
          Pure tt).
    
    Definition recorded_debug_messages
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) ink_engine.test_api.RecordedDebugMessages :=
      ink_env.engine.OnInstance.on_instance
        (fun instance => instance.["engine"].["get_emitted_debug_messages"]).
    
    Definition set_clear_storage_disabled
        `{H : State.Trait}
        (_disable : bool)
        : M (H := H) unit :=
      let* _ :=
        let* α0 :=
          format_arguments::["new_v1"]
            (addr_of
              [
                "not implemented: off-chain environment does not yet support `set_clear_storage_disabled`"
              ])
            (addr_of [ ]) in
        core.panicking.panic_fmt α0 in
      Pure tt.
    
    Definition advance_block
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (_ : unit)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ := instance.["engine"].["advance_block"] in
          Pure tt).
    
    Definition set_caller
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
        (caller : ImplT.AccountId)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of caller) in
            instance.["engine"].["set_caller"] α0 in
          Pure tt).
    
    Definition set_callee
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
        (callee : ImplT.AccountId)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of callee) in
            instance.["engine"].["set_callee"] α0 in
          Pure tt).
    
    Definition set_contract
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
        (contract : ImplT.AccountId)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode (addr_of contract) in
            instance.["engine"].["set_contract"] α0 in
          Pure tt).
    
    Definition is_contract
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
        (contract : ImplT.AccountId)
        : M (H := H) bool :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* α0 :=
            parity_scale_codec.codec.Encode.encode (addr_of contract) in
          instance.["engine"].["is_contract"] α0).
    
    Definition callee
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (_ : unit)
        : M (H := H) ImplT.AccountId :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* callee := instance.["engine"].["get_callee"] in
          let* α0 :=
            parity_scale_codec.codec.Decode.decode
              (addr_of (addr_of callee[RangeFull {|  |}])) in
          α0.["unwrap_or_else"]
            (fun err =>
              let* α0 := format_argument::["new_display"] (addr_of err) in
              let* α1 :=
                format_arguments::["new_v1"]
                  (addr_of [ "encoding failed: " ])
                  (addr_of [ α0 ]) in
              core.panicking.panic_fmt α1)).
    
    Definition get_contract_storage_rw
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (account_id : ref ImplT.AccountId)
        : M (H := H) (usize * usize) :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* α0 :=
            parity_scale_codec.codec.Encode.encode (addr_of account_id) in
          instance.["engine"].["get_contract_storage_rw"] α0).
    
    Definition set_value_transferred
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (value : ImplT.Balance)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ := instance.["engine"].["set_value_transferred"] value in
          Pure tt).
    
    Definition transfer_in
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (value : ImplT.Balance)
        : M (H := H) unit :=
      let* _ :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* caller :=
              let* α0 :=
                instance.["engine"].["exec_context"].["caller"].["as_ref"] in
              let* α1 := α0.["expect"] "no caller has been set" in
              let* α2 := α1.["as_bytes"] in
              α2.["to_vec"] in
            let* caller_old_balance :=
              let* α0 := caller.["clone"] in
              let* α1 := instance.["engine"].["get_balance"] α0 in
              α1.["unwrap_or_default"] in
            let* callee := instance.["engine"].["get_callee"] in
            let* contract_old_balance :=
              let* α0 := callee.["clone"] in
              let* α1 := instance.["engine"].["get_balance"] α0 in
              α1.["unwrap_or_default"] in
            let* _ :=
              let* α0 := caller_old_balance.["sub"] value in
              instance.["engine"].["set_balance"] caller α0 in
            let* _ :=
              let* α0 := contract_old_balance.["add"] value in
              instance.["engine"].["set_balance"] callee α0 in
            let* _ := instance.["engine"].["set_value_transferred"] value in
            Pure tt) in
      Pure tt.
    
    Definition count_used_storage_cells
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (account_id : ref ImplT.AccountId)
        : M (H := H) (ink_env.error.Result usize) :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* α0 :=
            parity_scale_codec.codec.Encode.encode (addr_of account_id) in
          let* α1 :=
            instance.["engine"].["count_used_storage_cells"] (addr_of α0) in
          α1.["map_err"] core.convert.Into.into).
    
    Definition set_block_timestamp
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (value : ImplT.Timestamp)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ := instance.["engine"].["set_block_timestamp"] value in
          Pure tt).
    
    Definition set_block_number
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        (value : ImplT.BlockNumber)
        : M (H := H) unit :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ := instance.["engine"].["set_block_number"] value in
          Pure tt).
    
    Definition run_test
        `{H : State.Trait}
        {T F : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.ops.function.FnOnce.Trait
          ((ink_env.engine.off_chain.test_api.DefaultAccounts T))
          F}
        `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
        (f : F)
        : M (H := H) (ink_env.error.Result unit) :=
      let* default_accounts :=
        ink_env.engine.off_chain.test_api.default_accounts tt in
      let* _ :=
        ink_env.engine.OnInstance.on_instance
          (fun instance =>
            let* _ := instance.["engine"].["initialize_or_reset"] in
            let* encoded_alice :=
              parity_scale_codec.codec.Encode.encode
                (addr_of default_accounts.["alice"]) in
            let* _ :=
              let* α0 := encoded_alice.["clone"] in
              instance.["engine"].["set_caller"] α0 in
            let* _ :=
              let* α0 := encoded_alice.["clone"] in
              instance.["engine"].["set_callee"] α0 in
            let substantial := 1000000 in
            let some := 1000 in
            let* _ :=
              instance.["engine"].["set_balance"] encoded_alice substantial in
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode
                  (addr_of default_accounts.["bob"]) in
              instance.["engine"].["set_balance"] α0 some in
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode
                  (addr_of default_accounts.["charlie"]) in
              instance.["engine"].["set_balance"] α0 some in
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode
                  (addr_of default_accounts.["django"]) in
              instance.["engine"].["set_balance"] α0 0 in
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode
                  (addr_of default_accounts.["eve"]) in
              instance.["engine"].["set_balance"] α0 0 in
            let* _ :=
              let* α0 :=
                parity_scale_codec.codec.Encode.encode
                  (addr_of default_accounts.["frank"]) in
              instance.["engine"].["set_balance"] α0 0 in
            Pure tt) in
      f default_accounts.
    
    Definition default_accounts
        `{H : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
        (_ : unit)
        : M (H := H) (ink_env.engine.off_chain.test_api.DefaultAccounts T) :=
      let* α0 := repeat 1 in
      let* α1 := ImplT.AccountId::["from"] α0 in
      let* α2 := repeat 2 in
      let* α3 := ImplT.AccountId::["from"] α2 in
      let* α4 := repeat 3 in
      let* α5 := ImplT.AccountId::["from"] α4 in
      let* α6 := repeat 4 in
      let* α7 := ImplT.AccountId::["from"] α6 in
      let* α8 := repeat 5 in
      let* α9 := ImplT.AccountId::["from"] α8 in
      let* α10 := repeat 6 in
      let* α11 := ImplT.AccountId::["from"] α10 in
      Pure
        {|
          ink_env.engine.off_chain.test_api.DefaultAccounts.alice := α1;
          ink_env.engine.off_chain.test_api.DefaultAccounts.bob := α3;
          ink_env.engine.off_chain.test_api.DefaultAccounts.charlie := α5;
          ink_env.engine.off_chain.test_api.DefaultAccounts.django := α7;
          ink_env.engine.off_chain.test_api.DefaultAccounts.eve := α9;
          ink_env.engine.off_chain.test_api.DefaultAccounts.frank := α11;
        |}.
    
    Module DefaultAccounts.
      Record t : Set := {
        alice : ImplT.AccountId;
        bob : ImplT.AccountId;
        charlie : ImplT.AccountId;
        django : ImplT.AccountId;
        eve : ImplT.AccountId;
        frank : ImplT.AccountId;
      }.
      
      Global Instance Get_alice : Notation.Dot "alice" := {
        Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
      }.
      Global Instance Get_bob : Notation.Dot "bob" := {
        Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
      }.
      Global Instance Get_charlie : Notation.Dot "charlie" := {
        Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
      }.
      Global Instance Get_django : Notation.Dot "django" := {
        Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
      }.
      Global Instance Get_eve : Notation.Dot "eve" := {
        Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
      }.
      Global Instance Get_frank : Notation.Dot "frank" := {
        Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
      }.
    End DefaultAccounts.
    Definition DefaultAccounts : Set := DefaultAccounts.t.
    
    Definition recorded_events
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) OpaqueDef :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* α0 := instance.["engine"].["get_emitted_events"] in
          α0.["map"] (fun evt => evt.["into"])).
    
    Definition assert_contract_termination
        `{H : State.Trait}
        {T F : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.ops.function.FnMut.Trait unit F}
        `{core.panic.unwind_safe.UnwindSafe.Trait F}
        `{core.fmt.Debug.Trait ink_env.types.Environment.AccountId}
        `{core.fmt.Debug.Trait ink_env.types.Environment.Balance}
        (should_terminate : F)
        (expected_beneficiary : ImplT.AccountId)
        (expected_value_transferred_to_beneficiary : ImplT.Balance)
        : M (H := H) unit :=
      let* value_any :=
        let* α0 := std.panic.catch_unwind should_terminate in
        α0.["expect_err"] "contract did not terminate" in
      let* encoded_input :=
        let* α0 := value_any.["downcast_ref"] in
        α0.["expect"] "panic object can not be cast" in
      let* '(value_transferred, encoded_beneficiary) :=
        let* α0 :=
          parity_scale_codec.codec.Decode.decode
            (addr_of (addr_of encoded_input[RangeFull {|  |}])) in
        α0.["unwrap_or_else"]
          (fun err =>
            let* α0 := format_argument::["new_display"] (addr_of err) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "input can not be decoded: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      let* beneficiary :=
        let* α0 :=
          parity_scale_codec.codec.Decode.decode
            (addr_of (addr_of encoded_beneficiary[RangeFull {|  |}])) in
        α0.["unwrap_or_else"]
          (fun err =>
            let* α0 := format_argument::["new_display"] (addr_of err) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "input can not be decoded: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      let* _ :=
        match
          (addr_of value_transferred,
            addr_of expected_value_transferred_to_beneficiary)
        with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      let* _ :=
        match (addr_of beneficiary, addr_of expected_beneficiary) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                core.option.Option.None in
            Pure tt
          else
            Pure tt
        end in
      Pure tt.
  End test_api.
  
  Module types.
    Module
      Impl_core_convert_From_for_ink_env_engine_off_chain_test_api_EmittedEvent.
      Definition Self := ink_env.engine.off_chain.test_api.EmittedEvent.
      
      Definition from
          `{H : State.Trait}
          (evt : ink_engine.test_api.EmittedEvent)
          : M (H := H) Self :=
        Pure
          {|
            ink_env.engine.off_chain.test_api.EmittedEvent.topics :=
              evt.["topics"];
            ink_env.engine.off_chain.test_api.EmittedEvent.data := evt.["data"];
          |}.
      
      Global Instance AssociatedFunction_from `{H : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I :
          core.convert.From.Trait
            Self
            (T := ink_engine.test_api.EmittedEvent) := {
        core.convert.From.from `{H : State.Trait} := from;
      }.
    End
      Impl_core_convert_From_for_ink_env_engine_off_chain_test_api_EmittedEvent.
    
    Module Impl_core_convert_From_for_ink_env_error_Error.
      Definition Self := ink_env.error.Error.
      
      Definition from
          `{H : State.Trait}
          (err : ink_engine.Error)
          : M (H := H) Self :=
        let* e :=
          match err with
          | ink_engine.Error.Account acc =>
            let* α0 := acc.["into"] in
            Pure (ink_env.engine.off_chain.OffChainError.Account α0)
          | ink_engine.Error.UninitializedBlocks =>
            Pure ink_env.engine.off_chain.OffChainError.UninitializedBlocks
          | ink_engine.Error.UninitializedExecutionContext =>
            Pure
              ink_env.engine.off_chain.OffChainError.UninitializedExecutionContext
          | ink_engine.Error.UnregisteredChainExtension =>
            Pure
              ink_env.engine.off_chain.OffChainError.UnregisteredChainExtension
          end in
        Pure (ink_env.error.Error.OffChain e).
      
      Global Instance AssociatedFunction_from `{H : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I :
          core.convert.From.Trait Self (T := ink_engine.Error) := {
        core.convert.From.from `{H : State.Trait} := from;
      }.
    End Impl_core_convert_From_for_ink_env_error_Error.
    
    Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Definition from
          `{H : State.Trait}
          (err : ink_engine.types.AccountError)
          : M (H := H) Self :=
        match err with
        | ink_engine.types.AccountError.Decoding e =>
          Pure (ink_env.engine.off_chain.AccountError.Decoding e)
        | ink_engine.types.AccountError.UnexpectedUserAccount =>
          Pure ink_env.engine.off_chain.AccountError.UnexpectedUserAccount
        | ink_engine.types.AccountError.NoAccountForId acc =>
          Pure (ink_env.engine.off_chain.AccountError.NoAccountForId acc)
        end.
      
      Global Instance AssociatedFunction_from `{H : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I :
          core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
        core.convert.From.from `{H : State.Trait} := from;
      }.
    End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
    
    Module Impl_core_convert_From_for_ink_env_error_Error.
      Definition Self := ink_env.error.Error.
      
      Definition from
          `{H : State.Trait}
          (account_error : ink_engine.types.AccountError)
          : M (H := H) Self :=
        let* α0 := account_error.["into"] in
        Pure
          (ink_env.error.Error.OffChain
            (ink_env.engine.off_chain.OffChainError.Account α0)).
      
      Global Instance AssociatedFunction_from `{H : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I :
          core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
        core.convert.From.from `{H : State.Trait} := from;
      }.
    End Impl_core_convert_From_for_ink_env_error_Error.
  End types.
  
  Module EnvInstance.
    Record t : Set := {
      engine : ink_engine.ext.Engine;
    }.
    
    Global Instance Get_engine : Notation.Dot "engine" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End EnvInstance.
  Definition EnvInstance : Set := EnvInstance.t.
  
  Module
    Impl_ink_env_engine_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
    Definition Self := ink_env.engine.off_chain.EnvInstance.
    
    Definition on_instance `{H : State.Trait} (f : F) : M (H := H) R :=
      ink_env.engine.off_chain.on_instance.INSTANCE.["with"]
        (fun instance =>
          let* α0 := instance.["borrow_mut"] in
          f (addr_of α0)).
    
    Global Instance AssociatedFunction_on_instance `{H : State.Trait} :
      Notation.DoubleColon Self "on_instance" := {
      Notation.double_colon := on_instance;
    }.
    
    Global Instance I : ink_env.engine.OnInstance.Trait Self := {
      ink_env.engine.OnInstance.on_instance `{H : State.Trait} := on_instance;
    }.
  End Impl_ink_env_engine_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
  
  Module OffChainError.
    Inductive t : Set :=
    | Account (_ : ink_env.engine.off_chain.AccountError)
    | UninitializedBlocks
    | UninitializedExecutionContext
    | UnregisteredChainExtension.
  End OffChainError.
  Definition OffChainError := OffChainError.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      match self with
      | ink_env.engine.off_chain.OffChainError.Account __self_0 =>
        core.fmt.Formatter::["debug_tuple_field1_finish"]
          f
          "Account"
          (addr_of __self_0)
      | ink_env.engine.off_chain.OffChainError.UninitializedBlocks =>
        core.fmt.Formatter::["write_str"] f "UninitializedBlocks"
      | ink_env.engine.off_chain.OffChainError.UninitializedExecutionContext =>
        core.fmt.Formatter::["write_str"] f "UninitializedExecutionContext"
      | ink_env.engine.off_chain.OffChainError.UnregisteredChainExtension =>
        core.fmt.Formatter::["write_str"] f "UnregisteredChainExtension"
      end.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
  
  Module Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Definition from
        `{H : State.Trait}
        (original : ink_env.engine.off_chain.AccountError)
        : M (H := H) ink_env.engine.off_chain.OffChainError :=
      Pure (ink_env.engine.off_chain.OffChainError.Account original).
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait
          Self
          (T := ink_env.engine.off_chain.AccountError) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.engine.off_chain.OffChainError)
        : M (H := H) bool :=
      let* __self_tag := core.intrinsics.discriminant_value self in
      let* __arg1_tag := core.intrinsics.discriminant_value other in
      let* α0 := __self_tag.["eq"] __arg1_tag in
      let* α1 :=
        match (self, other) with
        |
            (ink_env.engine.off_chain.OffChainError.Account __self_0,
              ink_env.engine.off_chain.OffChainError.Account __arg1_0)
            =>
          let* α0 := __self_0.["deref"] in
          let* α1 := __arg1_0.["deref"] in
          α0.["eq"] α1
        | _ => Pure true
        end in
      α0.["andb"] α1.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
  
  Module
    Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
  
  Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      let _ := tt in
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
  
  Module AccountError.
    Inductive t : Set :=
    | Decoding (_ : parity_scale_codec.error.Error)
    | UnexpectedUserAccount
    | NoAccountForId (_ : alloc.vec.Vec u8).
  End AccountError.
  Definition AccountError := AccountError.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      match self with
      | ink_env.engine.off_chain.AccountError.Decoding __self_0 =>
        core.fmt.Formatter::["debug_tuple_field1_finish"]
          f
          "Decoding"
          (addr_of __self_0)
      | ink_env.engine.off_chain.AccountError.UnexpectedUserAccount =>
        core.fmt.Formatter::["write_str"] f "UnexpectedUserAccount"
      | ink_env.engine.off_chain.AccountError.NoAccountForId __self_0 =>
        core.fmt.Formatter::["debug_tuple_field1_finish"]
          f
          "NoAccountForId"
          (addr_of __self_0)
      end.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
  
  Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Definition from
        `{H : State.Trait}
        (original : parity_scale_codec.error.Error)
        : M (H := H) ink_env.engine.off_chain.AccountError :=
      Pure (ink_env.engine.off_chain.AccountError.Decoding original).
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.engine.off_chain.AccountError)
        : M (H := H) bool :=
      let* __self_tag := core.intrinsics.discriminant_value self in
      let* __arg1_tag := core.intrinsics.discriminant_value other in
      let* α0 := __self_tag.["eq"] __arg1_tag in
      let* α1 :=
        match (self, other) with
        |
            (ink_env.engine.off_chain.AccountError.Decoding __self_0,
              ink_env.engine.off_chain.AccountError.Decoding __arg1_0)
            =>
          let* α0 := __self_0.["deref"] in
          let* α1 := __arg1_0.["deref"] in
          α0.["eq"] α1
        |
            (ink_env.engine.off_chain.AccountError.NoAccountForId __self_0,
              ink_env.engine.off_chain.AccountError.NoAccountForId __arg1_0)
            =>
          let* α0 := __self_0.["deref"] in
          let* α1 := __arg1_0.["deref"] in
          α0.["eq"] α1
        | _ => Pure true
        end in
      α0.["andb"] α1.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
  
  Module
    Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
  
  Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      let _ := tt in
      let _ := tt in
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
End off_chain.

Module call_data.
  Module CallData.
    Record t : Set := {
      bytes : alloc.vec.Vec u8;
    }.
    
    Global Instance Get_bytes : Notation.Dot "bytes" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End CallData.
  Definition CallData : Set := CallData.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
      string -> alloc_vec_Vec_u8 -> 
      M (H := H) core.fmt.Result.
    
    Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
      core.fmt.Formatter "debug_struct_field1_finish" := {
      Notation.double_colon := debug_struct_field1_finish; }.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.fmt.Formatter::["debug_struct_field1_finish"]
        f
        "CallData"
        "bytes"
        (addr_of (addr_of self.["bytes"])).
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.engine.off_chain.call_data.CallData :=
      let* α0 := core.clone.Clone.clone (addr_of self.["bytes"]) in
      Pure {| ink_env.engine.off_chain.call_data.CallData.bytes := α0; |}.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.engine.off_chain.call_data.CallData)
        : M (H := H) bool :=
      self.["bytes"].["eq"] other.["bytes"].
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End
    Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      let _ := tt in
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module Impl_ink_env_engine_off_chain_call_data_CallData_3.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Definition new
        `{H : State.Trait}
        (selector : ink_env.call.selector.Selector)
        : M (H := H) Self :=
      let* bytes := selector.["to_bytes"] in
      let* α0 :=
        alloc.boxed.Box::["new"] [ bytes[0]; bytes[1]; bytes[2]; bytes[3] ] in
      let* α1 := Slice::["into_vec"] α0 in
      Pure {| Self.bytes := α1; |}.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Definition push_arg
        `{H : State.Trait}
        (self : mut_ref Self)
        (arg : ref A)
        : M (H := H) unit :=
      arg.["encode_to"] (addr_of self.["bytes"]).
    
    Global Instance Method_push_arg `{H : State.Trait} :
      Notation.Dot "push_arg" := {
      Notation.dot := push_arg;
    }.
    
    Definition selector
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.call.selector.Selector :=
      let* _ :=
        if (true : bool) then
          let* _ :=
            let* α0 := self.["bytes"].["len"] in
            let* α1 := α0.["ge"] 4 in
            let* α2 := α1.["not"] in
            if (α2 : bool) then
              core.panicking.panic "assertion failed: self.bytes.len() >= 4"
            else
              Pure tt in
          Pure tt
        else
          Pure tt in
      let bytes :=
        [
          self.["bytes"][0];
          self.["bytes"][1];
          self.["bytes"][2];
          self.["bytes"][3]
        ] in
      bytes.["into"].
    
    Global Instance Method_selector `{H : State.Trait} :
      Notation.Dot "selector" := {
      Notation.dot := selector;
    }.
    
    Definition params
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref Slice) :=
      let* _ :=
        if (true : bool) then
          let* _ :=
            let* α0 := self.["bytes"].["len"] in
            let* α1 := α0.["ge"] 4 in
            let* α2 := α1.["not"] in
            if (α2 : bool) then
              core.panicking.panic "assertion failed: self.bytes.len() >= 4"
            else
              Pure tt in
          Pure tt
        else
          Pure tt in
      Pure (addr_of self.["bytes"][RangeFrom {| RangeFrom.start := 4; |}]).
    
    Global Instance Method_params `{H : State.Trait} :
      Notation.Dot "params" := {
      Notation.dot := params;
    }.
    
    Definition to_bytes
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) (ref Slice) :=
      Pure (addr_of self.["bytes"]).
    
    Global Instance Method_to_bytes `{H : State.Trait} :
      Notation.Dot "to_bytes" := {
      Notation.dot := to_bytes;
    }.
  End Impl_ink_env_engine_off_chain_call_data_CallData_3.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Definition size_hint
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) usize :=
      self.["bytes"].["len"].
    
    Global Instance Method_size_hint `{H : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Definition encode_to
        `{H : State.Trait}
        (self : ref Self)
        (dest : mut_ref T)
        : M (H := H) unit :=
      let* _ :=
        let* α0 := self.["bytes"].["as_slice"] in
        dest.["write"] α0 in
      Pure tt.
    
    Global Instance Method_encode_to `{H : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Definition decode
        `{H : State.Trait}
        (input : mut_ref I)
        : M (H := H) (core.result.Result Self parity_scale_codec.error.Error) :=
      let* remaining_len :=
        let* α0 := input.["remaining_len"] in
        let* α1 := α0.["unwrap_or"] core.option.Option.None in
        α1.["unwrap_or"] 0 in
      let* bytes := alloc.vec.Vec::["with_capacity"] remaining_len in
      let* _ :=
        loop
          let* α0 := input.["read_byte"] in
          let* α1 := let_if core.result.Result.Ok byte := α0 in
          if (α1 : bool) then
            let* _ := bytes.["push"] byte in
            Pure tt
          else
            let _ := Break in
            Pure tt
          from
          while in
      let* _ :=
        let* α0 := bytes.["len"] in
        let* α1 := α0.["lt"] 4 in
        if (α1 : bool) then
          let* α0 :=
            parity_scale_codec.error.Error::["from"]
              "require at least 4 bytes for input data" in
          Return (core.result.Result.Err α0)
        else
          Pure tt in
      Pure (core.result.Result.Ok {| Self.bytes := bytes; |}).
    
    Global Instance AssociatedFunction_decode `{H : State.Trait} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode;
    }.
    
    Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
    }.
  End
    Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
End call_data.

Module CallData.
  Record t : Set := {
    bytes : alloc.vec.Vec u8;
  }.
  
  Global Instance Get_bytes : Notation.Dot "bytes" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End CallData.
Definition CallData : Set := CallData.t.

Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Parameter debug_struct_field1_finish : core.fmt.Formatter -> string -> 
    string -> alloc_vec_Vec_u8 -> 
    M (H := H) core.fmt.Result.
  
  Global Instance Deb_debug_struct_field1_finish : Notation.DoubleColon
    core.fmt.Formatter "debug_struct_field1_finish" := {
    Notation.double_colon := debug_struct_field1_finish; }.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field1_finish"]
      f
      "CallData"
      "bytes"
      (addr_of (addr_of self.["bytes"])).
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.

Module Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.engine.off_chain.call_data.CallData :=
    let* α0 := core.clone.Clone.clone (addr_of self.["bytes"]) in
    Pure {| ink_env.engine.off_chain.call_data.CallData.bytes := α0; |}.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.

Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.engine.off_chain.call_data.CallData)
      : M (H := H) bool :=
    self.["bytes"].["eq"] other.["bytes"].
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.

Module
  Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End
  Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.

Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    let _ := tt in
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.

Module Impl_ink_env_engine_off_chain_call_data_CallData_4.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Definition new
      `{H : State.Trait}
      (selector : ink_env.call.selector.Selector)
      : M (H := H) Self :=
    let* bytes := selector.["to_bytes"] in
    let* α0 :=
      alloc.boxed.Box::["new"] [ bytes[0]; bytes[1]; bytes[2]; bytes[3] ] in
    let* α1 := Slice::["into_vec"] α0 in
    Pure {| Self.bytes := α1; |}.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition push_arg
      `{H : State.Trait}
      (self : mut_ref Self)
      (arg : ref A)
      : M (H := H) unit :=
    arg.["encode_to"] (addr_of self.["bytes"]).
  
  Global Instance Method_push_arg `{H : State.Trait} :
    Notation.Dot "push_arg" := {
    Notation.dot := push_arg;
  }.
  
  Definition selector
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.call.selector.Selector :=
    let* _ :=
      if (true : bool) then
        let* _ :=
          let* α0 := self.["bytes"].["len"] in
          let* α1 := α0.["ge"] 4 in
          let* α2 := α1.["not"] in
          if (α2 : bool) then
            core.panicking.panic "assertion failed: self.bytes.len() >= 4"
          else
            Pure tt in
        Pure tt
      else
        Pure tt in
    let bytes :=
      [
        self.["bytes"][0];
        self.["bytes"][1];
        self.["bytes"][2];
        self.["bytes"][3]
      ] in
    bytes.["into"].
  
  Global Instance Method_selector `{H : State.Trait} :
    Notation.Dot "selector" := {
    Notation.dot := selector;
  }.
  
  Definition params
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref Slice) :=
    let* _ :=
      if (true : bool) then
        let* _ :=
          let* α0 := self.["bytes"].["len"] in
          let* α1 := α0.["ge"] 4 in
          let* α2 := α1.["not"] in
          if (α2 : bool) then
            core.panicking.panic "assertion failed: self.bytes.len() >= 4"
          else
            Pure tt in
        Pure tt
      else
        Pure tt in
    Pure (addr_of self.["bytes"][RangeFrom {| RangeFrom.start := 4; |}]).
  
  Global Instance Method_params `{H : State.Trait} : Notation.Dot "params" := {
    Notation.dot := params;
  }.
  
  Definition to_bytes
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) (ref Slice) :=
    Pure (addr_of self.["bytes"]).
  
  Global Instance Method_to_bytes `{H : State.Trait} :
    Notation.Dot "to_bytes" := {
    Notation.dot := to_bytes;
  }.
End Impl_ink_env_engine_off_chain_call_data_CallData_4.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Definition size_hint
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) usize :=
    self.["bytes"].["len"].
  
  Global Instance Method_size_hint `{H : State.Trait} :
    Notation.Dot "size_hint" := {
    Notation.dot := size_hint;
  }.
  
  Definition encode_to
      `{H : State.Trait}
      (self : ref Self)
      (dest : mut_ref T)
      : M (H := H) unit :=
    let* _ :=
      let* α0 := self.["bytes"].["as_slice"] in
      dest.["write"] α0 in
    Pure tt.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.

Module
  Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Definition decode
      `{H : State.Trait}
      (input : mut_ref I)
      : M (H := H) (core.result.Result Self parity_scale_codec.error.Error) :=
    let* remaining_len :=
      let* α0 := input.["remaining_len"] in
      let* α1 := α0.["unwrap_or"] core.option.Option.None in
      α1.["unwrap_or"] 0 in
    let* bytes := alloc.vec.Vec::["with_capacity"] remaining_len in
    let* _ :=
      loop
        let* α0 := input.["read_byte"] in
        let* α1 := let_if core.result.Result.Ok byte := α0 in
        if (α1 : bool) then
          let* _ := bytes.["push"] byte in
          Pure tt
        else
          let _ := Break in
          Pure tt
        from
        while in
    let* _ :=
      let* α0 := bytes.["len"] in
      let* α1 := α0.["lt"] 4 in
      if (α1 : bool) then
        let* α0 :=
          parity_scale_codec.error.Error::["from"]
            "require at least 4 bytes for input data" in
        Return (core.result.Result.Err α0)
      else
        Pure tt in
    Pure (core.result.Result.Ok {| Self.bytes := bytes; |}).
  
  Global Instance AssociatedFunction_decode `{H : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
  }.
End
  Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.

Module impls.
  Definition BUFFER_SIZE `{H : State.Trait} : usize := run (1.["shl"] 14).
  
  Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Definition hash
        `{H : State.Trait}
        (input : ref Slice)
        (output : mut_ref ink_env.hash.HashOutput.Type)
        : M (H := H) unit :=
      let* output :=
        let offset := 0 in
        let slice :=
          addr_of
            output[Range
                {|
                Range.start := offset;
                Range.end := offset.["add"] 16;
              |}] in
        ink_env.engine.off_chain.impls.hash.as_array slice in
      let* _ := ink_engine.ext.Engine::["hash_blake2_128"] input output in
      Pure tt.
    
    Global Instance AssociatedFunction_hash `{H : State.Trait} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash;
    }.
    
    Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
      ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
    }.
  End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
  
  Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Definition hash
        `{H : State.Trait}
        (input : ref Slice)
        (output : mut_ref ink_env.hash.HashOutput.Type)
        : M (H := H) unit :=
      let* output :=
        let offset := 0 in
        let slice :=
          addr_of
            output[Range
                {|
                Range.start := offset;
                Range.end := offset.["add"] 32;
              |}] in
        ink_env.engine.off_chain.impls.hash.as_array slice in
      let* _ := ink_engine.ext.Engine::["hash_blake2_256"] input output in
      Pure tt.
    
    Global Instance AssociatedFunction_hash `{H : State.Trait} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash;
    }.
    
    Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
      ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
    }.
  End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
  
  Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Definition hash
        `{H : State.Trait}
        (input : ref Slice)
        (output : mut_ref ink_env.hash.HashOutput.Type)
        : M (H := H) unit :=
      let* output :=
        let offset := 0 in
        let slice :=
          addr_of
            output[Range
                {|
                Range.start := offset;
                Range.end := offset.["add"] 32;
              |}] in
        ink_env.engine.off_chain.impls.hash.as_array slice in
      let* _ := ink_engine.ext.Engine::["hash_sha2_256"] input output in
      Pure tt.
    
    Global Instance AssociatedFunction_hash `{H : State.Trait} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash;
    }.
    
    Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
      ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
    }.
  End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
  
  Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Definition hash
        `{H : State.Trait}
        (input : ref Slice)
        (output : mut_ref ink_env.hash.HashOutput.Type)
        : M (H := H) unit :=
      let* output :=
        let offset := 0 in
        let slice :=
          addr_of
            output[Range
                {|
                Range.start := offset;
                Range.end := offset.["add"] 32;
              |}] in
        ink_env.engine.off_chain.impls.hash.as_array slice in
      let* _ := ink_engine.ext.Engine::["hash_keccak_256"] input output in
      Pure tt.
    
    Global Instance AssociatedFunction_hash `{H : State.Trait} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash;
    }.
    
    Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
      ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
    }.
  End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
  
  Module Impl_core_convert_From_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Definition from
        `{H : State.Trait}
        (ext_error : ink_engine.ext.Error)
        : M (H := H) Self :=
      match ext_error with
      | ink_engine.ext.Error.Unknown => Pure Self::["Unknown"]
      | ink_engine.ext.Error.CalleeTrapped => Pure Self::["CalleeTrapped"]
      | ink_engine.ext.Error.CalleeReverted => Pure Self::["CalleeReverted"]
      | ink_engine.ext.Error.KeyNotFound => Pure Self::["KeyNotFound"]
      | ink_engine.ext.Error._BelowSubsistenceThreshold =>
        Pure Self::["_BelowSubsistenceThreshold"]
      | ink_engine.ext.Error.TransferFailed => Pure Self::["TransferFailed"]
      | ink_engine.ext.Error._EndowmentTooLow => Pure Self::["_EndowmentTooLow"]
      | ink_engine.ext.Error.CodeNotFound => Pure Self::["CodeNotFound"]
      | ink_engine.ext.Error.NotCallable => Pure Self::["NotCallable"]
      | ink_engine.ext.Error.LoggingDisabled => Pure Self::["LoggingDisabled"]
      | ink_engine.ext.Error.EcdsaRecoveryFailed =>
        Pure Self::["EcdsaRecoveryFailed"]
      end.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := ink_engine.ext.Error) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_error_Error.
  
  Module TopicsBuilder.
    Record t : Set := {
      topics : alloc.vec.Vec (alloc.vec.Vec u8);
    }.
    
    Global Instance Get_topics : Notation.Dot "topics" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End TopicsBuilder.
  Definition TopicsBuilder : Set := TopicsBuilder.t.
  
  Module
    Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
    
    Definition default
        `{H : State.Trait}
        (_ : unit)
        : M (H := H) ink_env.engine.off_chain.impls.TopicsBuilder :=
      let* α0 := core.default.Default.default tt in
      Pure {| ink_env.engine.off_chain.impls.TopicsBuilder.topics := α0; |}.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End
    Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  
  Module
    Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  Section
    Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    Context {E : Set}.
    
    Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
    
    Definition Output : Set := alloc.vec.Vec u8.
    
    Definition expect
        `{H : State.Trait}
        (self : mut_ref Self)
        (_expected_topics : usize)
        : M (H := H) unit :=
      Pure tt.
    
    Global Instance Method_expect `{H : State.Trait} :
      Notation.Dot "expect" := {
      Notation.dot := expect;
    }.
    
    Definition push_topic
        `{H : State.Trait}
        (self : mut_ref Self)
        (topic_value : ref T)
        : M (H := H) unit :=
      let* encoded := topic_value.["encode"] in
      let* len_encoded := encoded.["len"] in
      let result := ink_env.types.Environment.Hash::["CLEAR_HASH"] in
      let* len_result :=
        let* α0 := result.["as_ref"] in
        α0.["len"] in
      let* _ :=
        let* α0 := len_encoded.["le"] len_result in
        if (α0 : bool) then
          let* _ :=
            let* α0 := result.["as_mut"] in
            α0[RangeTo {| RangeTo.end := len_encoded; |}].["copy_from_slice"]
              (addr_of encoded[RangeFull {|  |}]) in
          Pure tt
        else
          let* hash_output := ink_env.hash.HashOutput.Type::["default"] tt in
          let* _ :=
            ink_env.hash.CryptoHash.hash
              (addr_of encoded[RangeFull {|  |}])
              (addr_of hash_output) in
          let* copy_len :=
            let* α0 := hash_output.["len"] in
            core.cmp.min α0 len_result in
          let* _ :=
            let* α0 := result.["as_mut"] in
            α0[Range {| Range.start := 0; Range.end := copy_len;
                |}].["copy_from_slice"]
              (addr_of
                hash_output[Range {| Range.start := 0; Range.end := copy_len;
                  |}]) in
          Pure tt in
      let* off_hash := result.["as_ref"] in
      let* off_hash := off_hash.["to_vec"] in
      let* _ :=
        if (true : bool) then
          let* _ :=
            let* α0 := self.["topics"].["contains"] (addr_of off_hash) in
            let* α1 := α0.["not"] in
            let* α2 := α1.["not"] in
            if (α2 : bool) then
              let* α0 :=
                format_arguments::["new_const"]
                  (addr_of [ "duplicate topic hash discovered!" ]) in
              core.panicking.panic_fmt α0
            else
              Pure tt in
          Pure tt
        else
          Pure tt in
      let* _ := self.["topics"].["push"] off_hash in
      Pure tt.
    
    Global Instance Method_push_topic `{H : State.Trait} :
      Notation.Dot "push_topic" := {
      Notation.dot := push_topic;
    }.
    
    Definition output
        `{H : State.Trait}
        (self : Self)
        : M (H := H) ImplSelf.Output :=
      let* all := alloc.vec.Vec::["new"] tt in
      let* topics_len_compact :=
        let* α0 := self.["topics"].["len"] in
        Pure
          (addr_of
            (parity_scale_codec.compact.Compact.Build_t (cast α0 u32))) in
      let* topics_encoded :=
        let* α0 :=
          parity_scale_codec.codec.Encode.encode (addr_of topics_len_compact) in
        Pure (addr_of α0[RangeFull {|  |}]) in
      let* _ :=
        let* α0 := topics_encoded.["to_vec"] in
        all.["append"] (addr_of α0) in
      let* _ :=
        let* α0 := self.["topics"].["into_iter"] in
        α0.["for_each"] (fun v => all.["append"] (addr_of v)) in
      Pure all.
    
    Global Instance Method_output `{H : State.Trait} :
      Notation.Dot "output" := {
      Notation.dot := output;
    }.
    
    Global Instance I :
        ink_env.topics.TopicsBuilderBackend.Trait Self (E := E) := {
      ink_env.topics.TopicsBuilderBackend.expect `{H : State.Trait} := expect;
      ink_env.topics.TopicsBuilderBackend.push_topic
        `{H : State.Trait}
        :=
        push_topic;
      ink_env.topics.TopicsBuilderBackend.output `{H : State.Trait} := output;
    }.
  End
    Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  End
    Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  
  Module Impl_ink_env_engine_off_chain_EnvInstance_3.
    Definition Self := ink_env.engine.off_chain.EnvInstance.
    
    Definition get_property
        `{H : State.Trait}
        (self : mut_ref Self)
        (ext_fn
          :
          (ref ink_engine.ext.Engine) -> (mut_ref (mut_ref Slice)) -> unit)
        : M (H := H) (ink_env.error.Result T) :=
      let* full_scope := repeat 0 in
      let full_scope := addr_of (addr_of full_scope[RangeFull {|  |}]) in
      let* _ := ext_fn (addr_of self.["engine"]) full_scope in
      let* α0 :=
        parity_scale_codec.codec.Decode.decode
          (addr_of (addr_of full_scope[RangeFull {|  |}])) in
      α0.["map_err"] core.convert.Into.into.
    
    Global Instance Method_get_property `{H : State.Trait} :
      Notation.Dot "get_property" := {
      Notation.dot := get_property;
    }.
  End Impl_ink_env_engine_off_chain_EnvInstance_3.
  
  Module
    Impl_ink_env_backend_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
    Definition Self := ink_env.engine.off_chain.EnvInstance.
    
    Definition set_contract_storage
        `{H : State.Trait}
        (self : mut_ref Self)
        (key : ref K)
        (value : ref V)
        : M (H := H) (core.option.Option u32) :=
      let* v := alloc.vec.Vec::["new"] tt in
      let* _ := ink_storage_traits.storage.Storable.encode value (addr_of v) in
      let* α0 := key.["encode"] in
      self.["engine"].["set_storage"]
        (addr_of α0)
        (addr_of v[RangeFull {|  |}]).
    
    Global Instance Method_set_contract_storage `{H : State.Trait} :
      Notation.Dot "set_contract_storage" := {
      Notation.dot := set_contract_storage;
    }.
    
    Definition get_contract_storage
        `{H : State.Trait}
        (self : mut_ref Self)
        (key : ref K)
        : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
      let* output := repeat 0 in
      let* _ :=
        let* α0 := key.["encode"] in
        let* α1 :=
          self.["engine"].["get_storage"]
            (addr_of α0)
            (addr_of (addr_of output[RangeFull {|  |}])) in
        match α1 with
        | core.result.Result.Ok _ => Pure tt
        | core.result.Result.Err ink_engine.ext.Error.KeyNotFound =>
          Return (core.result.Result.Ok core.option.Option.None)
        | core.result.Result.Err _ =>
          let* α0 :=
            format_arguments::["new_const"]
              (addr_of [ "encountered unexpected error" ]) in
          core.panicking.panic_fmt α0
        end in
      let* decoded :=
        let* α0 :=
          ink_storage_traits.storage.Storable.decode
            (addr_of (addr_of output[RangeFull {|  |}])) in
        let* α1 := LangItem α0 in
        match α1 with
        | Break {| Break.0 := residual; |} =>
          let* α0 := LangItem residual in
          Return α0
        | Continue {| Continue.0 := val; |} => Pure val
        end in
      Pure (core.result.Result.Ok (core.option.Option.Some decoded)).
    
    Global Instance Method_get_contract_storage `{H : State.Trait} :
      Notation.Dot "get_contract_storage" := {
      Notation.dot := get_contract_storage;
    }.
    
    Definition take_contract_storage
        `{H : State.Trait}
        (self : mut_ref Self)
        (key : ref K)
        : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
      let* output := repeat 0 in
      let* _ :=
        let* α0 := key.["encode"] in
        let* α1 :=
          self.["engine"].["take_storage"]
            (addr_of α0)
            (addr_of (addr_of output[RangeFull {|  |}])) in
        match α1 with
        | core.result.Result.Ok _ => Pure tt
        | core.result.Result.Err ink_engine.ext.Error.KeyNotFound =>
          Return (core.result.Result.Ok core.option.Option.None)
        | core.result.Result.Err _ =>
          let* α0 :=
            format_arguments::["new_const"]
              (addr_of [ "encountered unexpected error" ]) in
          core.panicking.panic_fmt α0
        end in
      let* decoded :=
        let* α0 :=
          ink_storage_traits.storage.Storable.decode
            (addr_of (addr_of output[RangeFull {|  |}])) in
        let* α1 := LangItem α0 in
        match α1 with
        | Break {| Break.0 := residual; |} =>
          let* α0 := LangItem residual in
          Return α0
        | Continue {| Continue.0 := val; |} => Pure val
        end in
      Pure (core.result.Result.Ok (core.option.Option.Some decoded)).
    
    Global Instance Method_take_contract_storage `{H : State.Trait} :
      Notation.Dot "take_contract_storage" := {
      Notation.dot := take_contract_storage;
    }.
    
    Definition contains_contract_storage
        `{H : State.Trait}
        (self : mut_ref Self)
        (key : ref K)
        : M (H := H) (core.option.Option u32) :=
      let* α0 := key.["encode"] in
      self.["engine"].["contains_storage"] (addr_of α0).
    
    Global Instance Method_contains_contract_storage `{H : State.Trait} :
      Notation.Dot "contains_contract_storage" := {
      Notation.dot := contains_contract_storage;
    }.
    
    Definition clear_contract_storage
        `{H : State.Trait}
        (self : mut_ref Self)
        (key : ref K)
        : M (H := H) (core.option.Option u32) :=
      let* α0 := key.["encode"] in
      self.["engine"].["clear_storage"] (addr_of α0).
    
    Global Instance Method_clear_contract_storage `{H : State.Trait} :
      Notation.Dot "clear_contract_storage" := {
      Notation.dot := clear_contract_storage;
    }.
    
    Definition decode_input
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) (ink_env.error.Result T) :=
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [ "not implemented: the off-chain env does not implement `input`" ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_decode_input `{H : State.Trait} :
      Notation.Dot "decode_input" := {
      Notation.dot := decode_input;
    }.
    
    Definition return_value
        `{H : State.Trait}
        (self : mut_ref Self)
        (_flags : ink_env.backend.ReturnFlags)
        (_return_value : ref R)
        : M (H := H) Empty_set :=
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: the off-chain env does not implement `return_value`"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_return_value `{H : State.Trait} :
      Notation.Dot "return_value" := {
      Notation.dot := return_value;
    }.
    
    Definition debug_message
        `{H : State.Trait}
        (self : mut_ref Self)
        (message : ref str)
        : M (H := H) unit :=
      self.["engine"].["debug_message"] message.
    
    Global Instance Method_debug_message `{H : State.Trait} :
      Notation.Dot "debug_message" := {
      Notation.dot := debug_message;
    }.
    
    Definition hash_bytes
        `{H : State.Trait}
        (self : mut_ref Self)
        (input : ref Slice)
        (output : mut_ref ink_env.hash.HashOutput.Type)
        : M (H := H) unit :=
      ink_env.hash.CryptoHash.hash input output.
    
    Global Instance Method_hash_bytes `{H : State.Trait} :
      Notation.Dot "hash_bytes" := {
      Notation.dot := hash_bytes;
    }.
    
    Definition hash_encoded
        `{H : State.Trait}
        (self : mut_ref Self)
        (input : ref T)
        (output : mut_ref ink_env.hash.HashOutput.Type)
        : M (H := H) unit :=
      let* enc_input :=
        let* α0 := parity_scale_codec.codec.Encode.encode input in
        Pure (addr_of α0[RangeFull {|  |}]) in
      ink_env.hash.CryptoHash.hash enc_input output.
    
    Global Instance Method_hash_encoded `{H : State.Trait} :
      Notation.Dot "hash_encoded" := {
      Notation.dot := hash_encoded;
    }.
    
    Definition ecdsa_recover
        `{H : State.Trait}
        (self : mut_ref Self)
        (signature : ref list u8)
        (message_hash : ref list u8)
        (output : mut_ref list u8)
        : M (H := H) (ink_env.error.Result unit) :=
      let* recovery_byte :=
        let* α0 := signature[64].["gt"] 26 in
        if (α0 : bool) then
          signature[64].["sub"] 27
        else
          Pure signature[64] in
      let* recovery_id :=
        let* α0 :=
          secp256k1.ecdsa.recovery.RecoveryId::["from_i32"]
            (cast recovery_byte i32) in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_display"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Unable to parse the recovery id: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      let* message :=
        let* α0 := secp256k1.Message::["from_slice"] message_hash in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_display"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Unable to create the message from hash: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      let* signature :=
        let* α0 :=
          secp256k1.ecdsa.recovery.RecoverableSignature::["from_compact"]
            (addr_of signature[Range {| Range.start := 0; Range.end := 64; |}])
            recovery_id in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_display"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Unable to parse the signature: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      let* pub_key :=
        secp256k1.context.global.SECP256K1.["recover_ecdsa"]
          (addr_of message)
          (addr_of signature) in
      match pub_key with
      | core.result.Result.Ok pub_key =>
        let* _ :=
          let* α0 := pub_key.["serialize"] in
          assign output.["deref"] α0 in
        Pure (core.result.Result.Ok tt)
      | core.result.Result.Err _ =>
        Pure (core.result.Result.Err ink_env.error.Error.EcdsaRecoveryFailed)
      end.
    
    Global Instance Method_ecdsa_recover `{H : State.Trait} :
      Notation.Dot "ecdsa_recover" := {
      Notation.dot := ecdsa_recover;
    }.
    
    Definition ecdsa_to_eth_address
        `{H : State.Trait}
        (self : mut_ref Self)
        (pubkey : ref list u8)
        (output : mut_ref list u8)
        : M (H := H) (ink_env.error.Result unit) :=
      let* pk :=
        let* α0 := secp256k1.key.PublicKey::["from_slice"] pubkey in
        let* α1 :=
          α0.["map_err"]
            (fun _ => Pure ink_env.error.Error.EcdsaRecoveryFailed) in
        let* α2 := LangItem α1 in
        match α2 with
        | Break {| Break.0 := residual; |} =>
          let* α0 := LangItem residual in
          Return α0
        | Continue {| Continue.0 := val; |} => Pure val
        end in
      let* uncompressed := pk.["serialize_uncompressed"] in
      let* hash := ink_env.hash.HashOutput.Type::["default"] tt in
      let* _ :=
        ink_env.hash.Keccak256::["hash"]
          (addr_of uncompressed[RangeFrom {| RangeFrom.start := 1; |}])
          (addr_of hash) in
      let* _ :=
        let* α0 := output.["as_mut"] in
        α0.["copy_from_slice"]
          (addr_of hash[RangeFrom {| RangeFrom.start := 12; |}]) in
      Pure (core.result.Result.Ok tt).
    
    Global Instance Method_ecdsa_to_eth_address `{H : State.Trait} :
      Notation.Dot "ecdsa_to_eth_address" := {
      Notation.dot := ecdsa_to_eth_address;
    }.
    
    Definition call_chain_extension
        `{H : State.Trait}
        (self : mut_ref Self)
        (func_id : u32)
        (input : ref I)
        (status_to_result : F)
        (decode_to_result : D)
        : M (H := H) (core.result.Result T E) :=
      let* enc_input :=
        let* α0 := parity_scale_codec.codec.Encode.encode input in
        Pure (addr_of α0[RangeFull {|  |}]) in
      let* output := repeat 0 in
      let* _ :=
        self.["engine"].["call_chain_extension"]
          func_id
          enc_input
          (addr_of (addr_of output[RangeFull {|  |}])) in
      let* '(status, out) :=
        let* α0 :=
          parity_scale_codec.codec.Decode.decode
            (addr_of (addr_of output[RangeFull {|  |}])) in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "could not decode `call_chain_extension` output: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1) in
      let* _ :=
        let* α0 := status_to_result status in
        let* α1 := LangItem α0 in
        match α1 with
        | Break {| Break.0 := residual; |} =>
          let* α0 := LangItem residual in
          Return α0
        | Continue {| Continue.0 := val; |} => Pure val
        end in
      let* decoded :=
        let* α0 := decode_to_result (addr_of out[RangeFull {|  |}]) in
        let* α1 := LangItem α0 in
        match α1 with
        | Break {| Break.0 := residual; |} =>
          let* α0 := LangItem residual in
          Return α0
        | Continue {| Continue.0 := val; |} => Pure val
        end in
      Pure (core.result.Result.Ok decoded).
    
    Global Instance Method_call_chain_extension `{H : State.Trait} :
      Notation.Dot "call_chain_extension" := {
      Notation.dot := call_chain_extension;
    }.
    
    Definition set_code_hash
        `{H : State.Trait}
        (self : mut_ref Self)
        (_code_hash : ref Slice)
        : M (H := H) (ink_env.error.Result unit) :=
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not support `set_code_hash`"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_set_code_hash `{H : State.Trait} :
      Notation.Dot "set_code_hash" := {
      Notation.dot := set_code_hash;
    }.
    
    Global Instance I : ink_env.backend.EnvBackend.Trait Self := {
      ink_env.backend.EnvBackend.set_contract_storage
        `{H : State.Trait}
        :=
        set_contract_storage;
      ink_env.backend.EnvBackend.get_contract_storage
        `{H : State.Trait}
        :=
        get_contract_storage;
      ink_env.backend.EnvBackend.take_contract_storage
        `{H : State.Trait}
        :=
        take_contract_storage;
      ink_env.backend.EnvBackend.contains_contract_storage
        `{H : State.Trait}
        :=
        contains_contract_storage;
      ink_env.backend.EnvBackend.clear_contract_storage
        `{H : State.Trait}
        :=
        clear_contract_storage;
      ink_env.backend.EnvBackend.decode_input
        `{H : State.Trait}
        :=
        decode_input;
      ink_env.backend.EnvBackend.return_value
        `{H : State.Trait}
        :=
        return_value;
      ink_env.backend.EnvBackend.debug_message
        `{H : State.Trait}
        :=
        debug_message;
      ink_env.backend.EnvBackend.hash_bytes `{H : State.Trait} := hash_bytes;
      ink_env.backend.EnvBackend.hash_encoded
        `{H : State.Trait}
        :=
        hash_encoded;
      ink_env.backend.EnvBackend.ecdsa_recover
        `{H : State.Trait}
        :=
        ecdsa_recover;
      ink_env.backend.EnvBackend.ecdsa_to_eth_address
        `{H : State.Trait}
        :=
        ecdsa_to_eth_address;
      ink_env.backend.EnvBackend.call_chain_extension
        `{H : State.Trait}
        :=
        call_chain_extension;
      ink_env.backend.EnvBackend.set_code_hash
        `{H : State.Trait}
        :=
        set_code_hash;
    }.
  End Impl_ink_env_backend_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
  
  Module
    Impl_ink_env_backend_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
    Definition Self := ink_env.engine.off_chain.EnvInstance.
    
    Definition caller
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) ImplE.AccountId :=
      let* α0 := self.["get_property"] ink_engine.ext.Engine::["caller"] in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `caller` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_caller `{H : State.Trait} :
      Notation.Dot "caller" := {
      Notation.dot := caller;
    }.
    
    Definition transferred_value
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) ImplE.Balance :=
      let* α0 :=
        self.["get_property"] ink_engine.ext.Engine::["value_transferred"] in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `transferred_value` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_transferred_value `{H : State.Trait} :
      Notation.Dot "transferred_value" := {
      Notation.dot := transferred_value;
    }.
    
    Definition gas_left
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) u64 :=
      let* α0 := self.["get_property"] ink_engine.ext.Engine::["gas_left"] in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `gas_left` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_gas_left `{H : State.Trait} :
      Notation.Dot "gas_left" := {
      Notation.dot := gas_left;
    }.
    
    Definition block_timestamp
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) ImplE.Timestamp :=
      let* α0 :=
        self.["get_property"] ink_engine.ext.Engine::["block_timestamp"] in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `block_timestamp` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_block_timestamp `{H : State.Trait} :
      Notation.Dot "block_timestamp" := {
      Notation.dot := block_timestamp;
    }.
    
    Definition account_id
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) ImplE.AccountId :=
      let* α0 := self.["get_property"] ink_engine.ext.Engine::["address"] in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `account_id` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_account_id `{H : State.Trait} :
      Notation.Dot "account_id" := {
      Notation.dot := account_id;
    }.
    
    Definition balance
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) ImplE.Balance :=
      let* α0 := self.["get_property"] ink_engine.ext.Engine::["balance"] in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `balance` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_balance `{H : State.Trait} :
      Notation.Dot "balance" := {
      Notation.dot := balance;
    }.
    
    Definition block_number
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) ImplE.BlockNumber :=
      let* α0 :=
        self.["get_property"] ink_engine.ext.Engine::["block_number"] in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `block_number` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_block_number `{H : State.Trait} :
      Notation.Dot "block_number" := {
      Notation.dot := block_number;
    }.
    
    Definition minimum_balance
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) ImplE.Balance :=
      let* α0 :=
        self.["get_property"] ink_engine.ext.Engine::["minimum_balance"] in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `minimum_balance` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_minimum_balance `{H : State.Trait} :
      Notation.Dot "minimum_balance" := {
      Notation.dot := minimum_balance;
    }.
    
    Definition emit_event
        `{H : State.Trait}
        (self : mut_ref Self)
        (event : Event)
        : M (H := H) unit :=
      let* builder :=
        ink_env.engine.off_chain.impls.TopicsBuilder::["default"] tt in
      let* enc_topics :=
        let* α0 := builder.["into"] in
        event.["topics"] α0 in
      let* enc_data :=
        let* α0 := parity_scale_codec.codec.Encode.encode (addr_of event) in
        Pure (addr_of α0[RangeFull {|  |}]) in
      let* _ :=
        self.["engine"].["deposit_event"]
          (addr_of enc_topics[RangeFull {|  |}])
          enc_data in
      Pure tt.
    
    Global Instance Method_emit_event `{H : State.Trait} :
      Notation.Dot "emit_event" := {
      Notation.dot := emit_event;
    }.
    
    Definition invoke_contract
        `{H : State.Trait}
        (self : mut_ref Self)
        (params
          :
          ref
            (ink_env.call.call_builder.CallParams
              E
              (ink_env.call.call_builder.Call E)
              Args
              R))
        : M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)) :=
      let* _gas_limit := params.["gas_limit"] in
      let* _callee := params.["callee"] in
      let* _call_flags :=
        let* α0 := params.["call_flags"] in
        α0.["into_u32"] in
      let* _transferred_value := params.["transferred_value"] in
      let* _input := params.["exec_input"] in
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not support contract invocation"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_invoke_contract `{H : State.Trait} :
      Notation.Dot "invoke_contract" := {
      Notation.dot := invoke_contract;
    }.
    
    Definition invoke_contract_delegate
        `{H : State.Trait}
        (self : mut_ref Self)
        (params
          :
          ref
            (ink_env.call.call_builder.CallParams
              E
              (ink_env.call.call_builder.DelegateCall E)
              Args
              R))
        : M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)) :=
      let* _code_hash := params.["code_hash"] in
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not support delegated contract invocation"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_invoke_contract_delegate `{H : State.Trait} :
      Notation.Dot "invoke_contract_delegate" := {
      Notation.dot := invoke_contract_delegate;
    }.
    
    Definition instantiate_contract
        `{H : State.Trait}
        (self : mut_ref Self)
        (params
          :
          ref
            (ink_env.call.create_builder.CreateParams
              E
              ContractRef
              Args
              Salt
              R))
        :
          M (H := H)
            (ink_env.error.Result
              (ink_primitives.ConstructorResult
                ink_env.call.create_builder.ConstructorReturnType.Output)) :=
      let* _code_hash := params.["code_hash"] in
      let* _gas_limit := params.["gas_limit"] in
      let* _endowment := params.["endowment"] in
      let* _input := params.["exec_input"] in
      let* _salt_bytes := params.["salt_bytes"] in
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not support contract instantiation"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_instantiate_contract `{H : State.Trait} :
      Notation.Dot "instantiate_contract" := {
      Notation.dot := instantiate_contract;
    }.
    
    Definition terminate_contract
        `{H : State.Trait}
        (self : mut_ref Self)
        (beneficiary : ImplE.AccountId)
        : M (H := H) Empty_set :=
      let* buffer :=
        parity_scale_codec.codec.Encode.encode (addr_of beneficiary) in
      self.["engine"].["terminate"] (addr_of buffer[RangeFull {|  |}]).
    
    Global Instance Method_terminate_contract `{H : State.Trait} :
      Notation.Dot "terminate_contract" := {
      Notation.dot := terminate_contract;
    }.
    
    Definition transfer
        `{H : State.Trait}
        (self : mut_ref Self)
        (destination : ImplE.AccountId)
        (value : ImplE.Balance)
        : M (H := H) (ink_env.error.Result unit) :=
      let* enc_destination :=
        let* α0 :=
          parity_scale_codec.codec.Encode.encode (addr_of destination) in
        Pure (addr_of α0[RangeFull {|  |}]) in
      let* enc_value :=
        let* α0 := parity_scale_codec.codec.Encode.encode (addr_of value) in
        Pure (addr_of α0[RangeFull {|  |}]) in
      let* α0 := self.["engine"].["transfer"] enc_destination enc_value in
      α0.["map_err"] core.convert.Into.into.
    
    Global Instance Method_transfer `{H : State.Trait} :
      Notation.Dot "transfer" := {
      Notation.dot := transfer;
    }.
    
    Definition weight_to_fee
        `{H : State.Trait}
        (self : mut_ref Self)
        (gas : u64)
        : M (H := H) ImplE.Balance :=
      let* output := repeat 0 in
      let* _ :=
        self.["engine"].["weight_to_fee"]
          gas
          (addr_of (addr_of output[RangeFull {|  |}])) in
      let* α0 :=
        parity_scale_codec.codec.Decode.decode
          (addr_of (addr_of output[RangeFull {|  |}])) in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not read `weight_to_fee` property: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_weight_to_fee `{H : State.Trait} :
      Notation.Dot "weight_to_fee" := {
      Notation.dot := weight_to_fee;
    }.
    
    Definition is_contract
        `{H : State.Trait}
        (self : mut_ref Self)
        (account : ref ImplE.AccountId)
        : M (H := H) bool :=
      let* α0 := parity_scale_codec.codec.Encode.encode (addr_of account) in
      self.["engine"].["is_contract"] α0.
    
    Global Instance Method_is_contract `{H : State.Trait} :
      Notation.Dot "is_contract" := {
      Notation.dot := is_contract;
    }.
    
    Definition caller_is_origin
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) bool :=
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not support cross-contract calls"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_caller_is_origin `{H : State.Trait} :
      Notation.Dot "caller_is_origin" := {
      Notation.dot := caller_is_origin;
    }.
    
    Definition code_hash
        `{H : State.Trait}
        (self : mut_ref Self)
        (_account : ref ImplE.AccountId)
        : M (H := H) (ink_env.error.Result ImplE.Hash) :=
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not support `code_hash`"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_code_hash `{H : State.Trait} :
      Notation.Dot "code_hash" := {
      Notation.dot := code_hash;
    }.
    
    Definition own_code_hash
        `{H : State.Trait}
        (self : mut_ref Self)
        : M (H := H) (ink_env.error.Result ImplE.Hash) :=
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not support `own_code_hash`"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_own_code_hash `{H : State.Trait} :
      Notation.Dot "own_code_hash" := {
      Notation.dot := own_code_hash;
    }.
    
    Definition call_runtime
        `{H : State.Trait}
        (self : mut_ref Self)
        (_call : ref Call)
        : M (H := H) (ink_env.error.Result unit) :=
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not support `call_runtime`"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0.
    
    Global Instance Method_call_runtime `{H : State.Trait} :
      Notation.Dot "call_runtime" := {
      Notation.dot := call_runtime;
    }.
    
    Global Instance I : ink_env.backend.TypedEnvBackend.Trait Self := {
      ink_env.backend.TypedEnvBackend.caller `{H : State.Trait} := caller;
      ink_env.backend.TypedEnvBackend.transferred_value
        `{H : State.Trait}
        :=
        transferred_value;
      ink_env.backend.TypedEnvBackend.weight_to_fee
        `{H : State.Trait}
        :=
        weight_to_fee;
      ink_env.backend.TypedEnvBackend.gas_left `{H : State.Trait} := gas_left;
      ink_env.backend.TypedEnvBackend.block_timestamp
        `{H : State.Trait}
        :=
        block_timestamp;
      ink_env.backend.TypedEnvBackend.account_id
        `{H : State.Trait}
        :=
        account_id;
      ink_env.backend.TypedEnvBackend.balance `{H : State.Trait} := balance;
      ink_env.backend.TypedEnvBackend.block_number
        `{H : State.Trait}
        :=
        block_number;
      ink_env.backend.TypedEnvBackend.minimum_balance
        `{H : State.Trait}
        :=
        minimum_balance;
      ink_env.backend.TypedEnvBackend.emit_event
        `{H : State.Trait}
        :=
        emit_event;
      ink_env.backend.TypedEnvBackend.invoke_contract
        `{H : State.Trait}
        :=
        invoke_contract;
      ink_env.backend.TypedEnvBackend.invoke_contract_delegate
        `{H : State.Trait}
        :=
        invoke_contract_delegate;
      ink_env.backend.TypedEnvBackend.instantiate_contract
        `{H : State.Trait}
        :=
        instantiate_contract;
      ink_env.backend.TypedEnvBackend.terminate_contract
        `{H : State.Trait}
        :=
        terminate_contract;
      ink_env.backend.TypedEnvBackend.transfer `{H : State.Trait} := transfer;
      ink_env.backend.TypedEnvBackend.is_contract
        `{H : State.Trait}
        :=
        is_contract;
      ink_env.backend.TypedEnvBackend.caller_is_origin
        `{H : State.Trait}
        :=
        caller_is_origin;
      ink_env.backend.TypedEnvBackend.code_hash `{H : State.Trait} := code_hash;
      ink_env.backend.TypedEnvBackend.own_code_hash
        `{H : State.Trait}
        :=
        own_code_hash;
      ink_env.backend.TypedEnvBackend.call_runtime
        `{H : State.Trait}
        :=
        call_runtime;
    }.
  End
    Impl_ink_env_backend_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
End impls.

Definition BUFFER_SIZE `{H : State.Trait} : usize := run (1.["shl"] 14).

Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Definition hash
      `{H : State.Trait}
      (input : ref Slice)
      (output : mut_ref ink_env.hash.HashOutput.Type)
      : M (H := H) unit :=
    let* output :=
      let offset := 0 in
      let slice :=
        addr_of
          output[Range {| Range.start := offset; Range.end := offset.["add"] 16;
            |}] in
      ink_env.engine.off_chain.impls.hash.as_array slice in
    let* _ := ink_engine.ext.Engine::["hash_blake2_128"] input output in
    Pure tt.
  
  Global Instance AssociatedFunction_hash `{H : State.Trait} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash;
  }.
  
  Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
    ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
  }.
End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.

Definition OutputType : Set := list u8.

Definition _ `{H : State.Trait} : unit -> unit :=
  run
    (Pure
      (fun  =>
        let* _ := ink_env.engine.off_chain.impls.hash._.assert_type_eq_all tt in
        Pure tt)).

Module TypeEq.
  Class Trait
      (Self : Set)
      {This : Set}
      `{core.marker.Sized.Trait This} :
      Set := {
    This := This;
  }.
  
  Global Instance Method_This `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "This" := {
    Notation.double_colon_type := This;
  }.
End TypeEq.

Module Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
Section Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Definition This : Set := Self.
  
  Global Instance I :
      ink_env.engine.off_chain.impls.hash._.TypeEq.Trait Self := {
  }.
End Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
End Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.

Definition assert_type_eq_all
    `{H : State.Trait}
    {T U : Set}
    `{core.marker.Sized.Trait T}
    `{ink_env.engine.off_chain.impls.hash._.TypeEq.Trait T}
    `{core.marker.Sized.Trait U}
    (_ : unit)
    : M (H := H) unit :=
  Pure tt.

Definition as_array
    `{H : State.Trait}
    {T : Set}
    (slice : mut_ref Slice)
    : M (H := H) (mut_ref list T) :=
  let* α0 := slice.["as_mut_ptr"] in
  let* α1 := (cast α0 (mut_ref list _)).["deref"] in
  Pure (addr_of α1).

Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Definition hash
      `{H : State.Trait}
      (input : ref Slice)
      (output : mut_ref ink_env.hash.HashOutput.Type)
      : M (H := H) unit :=
    let* output :=
      let offset := 0 in
      let slice :=
        addr_of
          output[Range {| Range.start := offset; Range.end := offset.["add"] 32;
            |}] in
      ink_env.engine.off_chain.impls.hash.as_array slice in
    let* _ := ink_engine.ext.Engine::["hash_blake2_256"] input output in
    Pure tt.
  
  Global Instance AssociatedFunction_hash `{H : State.Trait} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash;
  }.
  
  Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
    ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
  }.
End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.

Definition OutputType : Set := list u8.

Definition _ `{H : State.Trait} : unit -> unit :=
  run
    (Pure
      (fun  =>
        let* _ := ink_env.engine.off_chain.impls.hash._.assert_type_eq_all tt in
        Pure tt)).

Module TypeEq.
  Class Trait
      (Self : Set)
      {This : Set}
      `{core.marker.Sized.Trait This} :
      Set := {
    This := This;
  }.
  
  Global Instance Method_This `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "This" := {
    Notation.double_colon_type := This;
  }.
End TypeEq.

Module Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
Section Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Definition This : Set := Self.
  
  Global Instance I :
      ink_env.engine.off_chain.impls.hash._.TypeEq.Trait Self := {
  }.
End Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
End Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.

Definition assert_type_eq_all
    `{H : State.Trait}
    {T U : Set}
    `{core.marker.Sized.Trait T}
    `{ink_env.engine.off_chain.impls.hash._.TypeEq.Trait T}
    `{core.marker.Sized.Trait U}
    (_ : unit)
    : M (H := H) unit :=
  Pure tt.

Definition as_array
    `{H : State.Trait}
    {T : Set}
    (slice : mut_ref Slice)
    : M (H := H) (mut_ref list T) :=
  let* α0 := slice.["as_mut_ptr"] in
  let* α1 := (cast α0 (mut_ref list _)).["deref"] in
  Pure (addr_of α1).

Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Definition hash
      `{H : State.Trait}
      (input : ref Slice)
      (output : mut_ref ink_env.hash.HashOutput.Type)
      : M (H := H) unit :=
    let* output :=
      let offset := 0 in
      let slice :=
        addr_of
          output[Range {| Range.start := offset; Range.end := offset.["add"] 32;
            |}] in
      ink_env.engine.off_chain.impls.hash.as_array slice in
    let* _ := ink_engine.ext.Engine::["hash_sha2_256"] input output in
    Pure tt.
  
  Global Instance AssociatedFunction_hash `{H : State.Trait} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash;
  }.
  
  Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
    ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
  }.
End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.

Definition OutputType : Set := list u8.

Definition _ `{H : State.Trait} : unit -> unit :=
  run
    (Pure
      (fun  =>
        let* _ := ink_env.engine.off_chain.impls.hash._.assert_type_eq_all tt in
        Pure tt)).

Module TypeEq.
  Class Trait
      (Self : Set)
      {This : Set}
      `{core.marker.Sized.Trait This} :
      Set := {
    This := This;
  }.
  
  Global Instance Method_This `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "This" := {
    Notation.double_colon_type := This;
  }.
End TypeEq.

Module Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
Section Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Definition This : Set := Self.
  
  Global Instance I :
      ink_env.engine.off_chain.impls.hash._.TypeEq.Trait Self := {
  }.
End Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
End Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.

Definition assert_type_eq_all
    `{H : State.Trait}
    {T U : Set}
    `{core.marker.Sized.Trait T}
    `{ink_env.engine.off_chain.impls.hash._.TypeEq.Trait T}
    `{core.marker.Sized.Trait U}
    (_ : unit)
    : M (H := H) unit :=
  Pure tt.

Definition as_array
    `{H : State.Trait}
    {T : Set}
    (slice : mut_ref Slice)
    : M (H := H) (mut_ref list T) :=
  let* α0 := slice.["as_mut_ptr"] in
  let* α1 := (cast α0 (mut_ref list _)).["deref"] in
  Pure (addr_of α1).

Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Definition hash
      `{H : State.Trait}
      (input : ref Slice)
      (output : mut_ref ink_env.hash.HashOutput.Type)
      : M (H := H) unit :=
    let* output :=
      let offset := 0 in
      let slice :=
        addr_of
          output[Range {| Range.start := offset; Range.end := offset.["add"] 32;
            |}] in
      ink_env.engine.off_chain.impls.hash.as_array slice in
    let* _ := ink_engine.ext.Engine::["hash_keccak_256"] input output in
    Pure tt.
  
  Global Instance AssociatedFunction_hash `{H : State.Trait} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash;
  }.
  
  Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
    ink_env.hash.CryptoHash.hash `{H : State.Trait} := hash;
  }.
End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.

Definition OutputType : Set := list u8.

Definition _ `{H : State.Trait} : unit -> unit :=
  run
    (Pure
      (fun  =>
        let* _ := ink_env.engine.off_chain.impls.hash._.assert_type_eq_all tt in
        Pure tt)).

Module TypeEq.
  Class Trait
      (Self : Set)
      {This : Set}
      `{core.marker.Sized.Trait This} :
      Set := {
    This := This;
  }.
  
  Global Instance Method_This `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "This" := {
    Notation.double_colon_type := This;
  }.
End TypeEq.

Module Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
Section Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
  Context {T : Set}.
  
  Definition Self := T.
  
  Definition This : Set := Self.
  
  Global Instance I :
      ink_env.engine.off_chain.impls.hash._.TypeEq.Trait Self := {
  }.
End Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.
End Impl_ink_env_engine_off_chain_impls_hash___TypeEq_for_T.

Definition assert_type_eq_all
    `{H : State.Trait}
    {T U : Set}
    `{core.marker.Sized.Trait T}
    `{ink_env.engine.off_chain.impls.hash._.TypeEq.Trait T}
    `{core.marker.Sized.Trait U}
    (_ : unit)
    : M (H := H) unit :=
  Pure tt.

Definition as_array
    `{H : State.Trait}
    {T : Set}
    (slice : mut_ref Slice)
    : M (H := H) (mut_ref list T) :=
  let* α0 := slice.["as_mut_ptr"] in
  let* α1 := (cast α0 (mut_ref list _)).["deref"] in
  Pure (addr_of α1).

Module Impl_core_convert_From_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Definition from
      `{H : State.Trait}
      (ext_error : ink_engine.ext.Error)
      : M (H := H) Self :=
    match ext_error with
    | ink_engine.ext.Error.Unknown => Pure Self::["Unknown"]
    | ink_engine.ext.Error.CalleeTrapped => Pure Self::["CalleeTrapped"]
    | ink_engine.ext.Error.CalleeReverted => Pure Self::["CalleeReverted"]
    | ink_engine.ext.Error.KeyNotFound => Pure Self::["KeyNotFound"]
    | ink_engine.ext.Error._BelowSubsistenceThreshold =>
      Pure Self::["_BelowSubsistenceThreshold"]
    | ink_engine.ext.Error.TransferFailed => Pure Self::["TransferFailed"]
    | ink_engine.ext.Error._EndowmentTooLow => Pure Self::["_EndowmentTooLow"]
    | ink_engine.ext.Error.CodeNotFound => Pure Self::["CodeNotFound"]
    | ink_engine.ext.Error.NotCallable => Pure Self::["NotCallable"]
    | ink_engine.ext.Error.LoggingDisabled => Pure Self::["LoggingDisabled"]
    | ink_engine.ext.Error.EcdsaRecoveryFailed =>
      Pure Self::["EcdsaRecoveryFailed"]
    end.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := ink_engine.ext.Error) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_error_Error.

Module TopicsBuilder.
  Record t : Set := {
    topics : alloc.vec.Vec (alloc.vec.Vec u8);
  }.
  
  Global Instance Get_topics : Notation.Dot "topics" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End TopicsBuilder.
Definition TopicsBuilder : Set := TopicsBuilder.t.

Module
  Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
  
  Definition default
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) ink_env.engine.off_chain.impls.TopicsBuilder :=
    let* α0 := core.default.Default.default tt in
    Pure {| ink_env.engine.off_chain.impls.TopicsBuilder.topics := α0; |}.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.

Module
  Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
Section
  Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  Context {E : Set}.
  
  Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
  
  Definition Output : Set := alloc.vec.Vec u8.
  
  Definition expect
      `{H : State.Trait}
      (self : mut_ref Self)
      (_expected_topics : usize)
      : M (H := H) unit :=
    Pure tt.
  
  Global Instance Method_expect `{H : State.Trait} : Notation.Dot "expect" := {
    Notation.dot := expect;
  }.
  
  Definition push_topic
      `{H : State.Trait}
      (self : mut_ref Self)
      (topic_value : ref T)
      : M (H := H) unit :=
    let* encoded := topic_value.["encode"] in
    let* len_encoded := encoded.["len"] in
    let result := ink_env.types.Environment.Hash::["CLEAR_HASH"] in
    let* len_result :=
      let* α0 := result.["as_ref"] in
      α0.["len"] in
    let* _ :=
      let* α0 := len_encoded.["le"] len_result in
      if (α0 : bool) then
        let* _ :=
          let* α0 := result.["as_mut"] in
          α0[RangeTo {| RangeTo.end := len_encoded; |}].["copy_from_slice"]
            (addr_of encoded[RangeFull {|  |}]) in
        Pure tt
      else
        let* hash_output := ink_env.hash.HashOutput.Type::["default"] tt in
        let* _ :=
          ink_env.hash.CryptoHash.hash
            (addr_of encoded[RangeFull {|  |}])
            (addr_of hash_output) in
        let* copy_len :=
          let* α0 := hash_output.["len"] in
          core.cmp.min α0 len_result in
        let* _ :=
          let* α0 := result.["as_mut"] in
          α0[Range {| Range.start := 0; Range.end := copy_len;
              |}].["copy_from_slice"]
            (addr_of
              hash_output[Range {| Range.start := 0; Range.end := copy_len;
                |}]) in
        Pure tt in
    let* off_hash := result.["as_ref"] in
    let* off_hash := off_hash.["to_vec"] in
    let* _ :=
      if (true : bool) then
        let* _ :=
          let* α0 := self.["topics"].["contains"] (addr_of off_hash) in
          let* α1 := α0.["not"] in
          let* α2 := α1.["not"] in
          if (α2 : bool) then
            let* α0 :=
              format_arguments::["new_const"]
                (addr_of [ "duplicate topic hash discovered!" ]) in
            core.panicking.panic_fmt α0
          else
            Pure tt in
        Pure tt
      else
        Pure tt in
    let* _ := self.["topics"].["push"] off_hash in
    Pure tt.
  
  Global Instance Method_push_topic `{H : State.Trait} :
    Notation.Dot "push_topic" := {
    Notation.dot := push_topic;
  }.
  
  Definition output
      `{H : State.Trait}
      (self : Self)
      : M (H := H) ImplSelf.Output :=
    let* all := alloc.vec.Vec::["new"] tt in
    let* topics_len_compact :=
      let* α0 := self.["topics"].["len"] in
      Pure
        (addr_of (parity_scale_codec.compact.Compact.Build_t (cast α0 u32))) in
    let* topics_encoded :=
      let* α0 :=
        parity_scale_codec.codec.Encode.encode (addr_of topics_len_compact) in
      Pure (addr_of α0[RangeFull {|  |}]) in
    let* _ :=
      let* α0 := topics_encoded.["to_vec"] in
      all.["append"] (addr_of α0) in
    let* _ :=
      let* α0 := self.["topics"].["into_iter"] in
      α0.["for_each"] (fun v => all.["append"] (addr_of v)) in
    Pure all.
  
  Global Instance Method_output `{H : State.Trait} : Notation.Dot "output" := {
    Notation.dot := output;
  }.
  
  Global Instance I :
      ink_env.topics.TopicsBuilderBackend.Trait Self (E := E) := {
    ink_env.topics.TopicsBuilderBackend.expect `{H : State.Trait} := expect;
    ink_env.topics.TopicsBuilderBackend.push_topic
      `{H : State.Trait}
      :=
      push_topic;
    ink_env.topics.TopicsBuilderBackend.output `{H : State.Trait} := output;
  }.
End
  Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
End
  Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.

Module Impl_ink_env_engine_off_chain_EnvInstance_4.
  Definition Self := ink_env.engine.off_chain.EnvInstance.
  
  Definition get_property
      `{H : State.Trait}
      (self : mut_ref Self)
      (ext_fn
        :
        (ref ink_engine.ext.Engine) -> (mut_ref (mut_ref Slice)) -> unit)
      : M (H := H) (ink_env.error.Result T) :=
    let* full_scope := repeat 0 in
    let full_scope := addr_of (addr_of full_scope[RangeFull {|  |}]) in
    let* _ := ext_fn (addr_of self.["engine"]) full_scope in
    let* α0 :=
      parity_scale_codec.codec.Decode.decode
        (addr_of (addr_of full_scope[RangeFull {|  |}])) in
    α0.["map_err"] core.convert.Into.into.
  
  Global Instance Method_get_property `{H : State.Trait} :
    Notation.Dot "get_property" := {
    Notation.dot := get_property;
  }.
End Impl_ink_env_engine_off_chain_EnvInstance_4.

Module Impl_ink_env_backend_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
  Definition Self := ink_env.engine.off_chain.EnvInstance.
  
  Definition set_contract_storage
      `{H : State.Trait}
      (self : mut_ref Self)
      (key : ref K)
      (value : ref V)
      : M (H := H) (core.option.Option u32) :=
    let* v := alloc.vec.Vec::["new"] tt in
    let* _ := ink_storage_traits.storage.Storable.encode value (addr_of v) in
    let* α0 := key.["encode"] in
    self.["engine"].["set_storage"] (addr_of α0) (addr_of v[RangeFull {|  |}]).
  
  Global Instance Method_set_contract_storage `{H : State.Trait} :
    Notation.Dot "set_contract_storage" := {
    Notation.dot := set_contract_storage;
  }.
  
  Definition get_contract_storage
      `{H : State.Trait}
      (self : mut_ref Self)
      (key : ref K)
      : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
    let* output := repeat 0 in
    let* _ :=
      let* α0 := key.["encode"] in
      let* α1 :=
        self.["engine"].["get_storage"]
          (addr_of α0)
          (addr_of (addr_of output[RangeFull {|  |}])) in
      match α1 with
      | core.result.Result.Ok _ => Pure tt
      | core.result.Result.Err ink_engine.ext.Error.KeyNotFound =>
        Return (core.result.Result.Ok core.option.Option.None)
      | core.result.Result.Err _ =>
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of [ "encountered unexpected error" ]) in
        core.panicking.panic_fmt α0
      end in
    let* decoded :=
      let* α0 :=
        ink_storage_traits.storage.Storable.decode
          (addr_of (addr_of output[RangeFull {|  |}])) in
      let* α1 := LangItem α0 in
      match α1 with
      | Break {| Break.0 := residual; |} =>
        let* α0 := LangItem residual in
        Return α0
      | Continue {| Continue.0 := val; |} => Pure val
      end in
    Pure (core.result.Result.Ok (core.option.Option.Some decoded)).
  
  Global Instance Method_get_contract_storage `{H : State.Trait} :
    Notation.Dot "get_contract_storage" := {
    Notation.dot := get_contract_storage;
  }.
  
  Definition take_contract_storage
      `{H : State.Trait}
      (self : mut_ref Self)
      (key : ref K)
      : M (H := H) (ink_env.error.Result (core.option.Option R)) :=
    let* output := repeat 0 in
    let* _ :=
      let* α0 := key.["encode"] in
      let* α1 :=
        self.["engine"].["take_storage"]
          (addr_of α0)
          (addr_of (addr_of output[RangeFull {|  |}])) in
      match α1 with
      | core.result.Result.Ok _ => Pure tt
      | core.result.Result.Err ink_engine.ext.Error.KeyNotFound =>
        Return (core.result.Result.Ok core.option.Option.None)
      | core.result.Result.Err _ =>
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of [ "encountered unexpected error" ]) in
        core.panicking.panic_fmt α0
      end in
    let* decoded :=
      let* α0 :=
        ink_storage_traits.storage.Storable.decode
          (addr_of (addr_of output[RangeFull {|  |}])) in
      let* α1 := LangItem α0 in
      match α1 with
      | Break {| Break.0 := residual; |} =>
        let* α0 := LangItem residual in
        Return α0
      | Continue {| Continue.0 := val; |} => Pure val
      end in
    Pure (core.result.Result.Ok (core.option.Option.Some decoded)).
  
  Global Instance Method_take_contract_storage `{H : State.Trait} :
    Notation.Dot "take_contract_storage" := {
    Notation.dot := take_contract_storage;
  }.
  
  Definition contains_contract_storage
      `{H : State.Trait}
      (self : mut_ref Self)
      (key : ref K)
      : M (H := H) (core.option.Option u32) :=
    let* α0 := key.["encode"] in
    self.["engine"].["contains_storage"] (addr_of α0).
  
  Global Instance Method_contains_contract_storage `{H : State.Trait} :
    Notation.Dot "contains_contract_storage" := {
    Notation.dot := contains_contract_storage;
  }.
  
  Definition clear_contract_storage
      `{H : State.Trait}
      (self : mut_ref Self)
      (key : ref K)
      : M (H := H) (core.option.Option u32) :=
    let* α0 := key.["encode"] in
    self.["engine"].["clear_storage"] (addr_of α0).
  
  Global Instance Method_clear_contract_storage `{H : State.Trait} :
    Notation.Dot "clear_contract_storage" := {
    Notation.dot := clear_contract_storage;
  }.
  
  Definition decode_input
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) (ink_env.error.Result T) :=
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [ "not implemented: the off-chain env does not implement `input`" ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_decode_input `{H : State.Trait} :
    Notation.Dot "decode_input" := {
    Notation.dot := decode_input;
  }.
  
  Definition return_value
      `{H : State.Trait}
      (self : mut_ref Self)
      (_flags : ink_env.backend.ReturnFlags)
      (_return_value : ref R)
      : M (H := H) Empty_set :=
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: the off-chain env does not implement `return_value`"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_return_value `{H : State.Trait} :
    Notation.Dot "return_value" := {
    Notation.dot := return_value;
  }.
  
  Definition debug_message
      `{H : State.Trait}
      (self : mut_ref Self)
      (message : ref str)
      : M (H := H) unit :=
    self.["engine"].["debug_message"] message.
  
  Global Instance Method_debug_message `{H : State.Trait} :
    Notation.Dot "debug_message" := {
    Notation.dot := debug_message;
  }.
  
  Definition hash_bytes
      `{H : State.Trait}
      (self : mut_ref Self)
      (input : ref Slice)
      (output : mut_ref ink_env.hash.HashOutput.Type)
      : M (H := H) unit :=
    ink_env.hash.CryptoHash.hash input output.
  
  Global Instance Method_hash_bytes `{H : State.Trait} :
    Notation.Dot "hash_bytes" := {
    Notation.dot := hash_bytes;
  }.
  
  Definition hash_encoded
      `{H : State.Trait}
      (self : mut_ref Self)
      (input : ref T)
      (output : mut_ref ink_env.hash.HashOutput.Type)
      : M (H := H) unit :=
    let* enc_input :=
      let* α0 := parity_scale_codec.codec.Encode.encode input in
      Pure (addr_of α0[RangeFull {|  |}]) in
    ink_env.hash.CryptoHash.hash enc_input output.
  
  Global Instance Method_hash_encoded `{H : State.Trait} :
    Notation.Dot "hash_encoded" := {
    Notation.dot := hash_encoded;
  }.
  
  Definition ecdsa_recover
      `{H : State.Trait}
      (self : mut_ref Self)
      (signature : ref list u8)
      (message_hash : ref list u8)
      (output : mut_ref list u8)
      : M (H := H) (ink_env.error.Result unit) :=
    let* recovery_byte :=
      let* α0 := signature[64].["gt"] 26 in
      if (α0 : bool) then
        signature[64].["sub"] 27
      else
        Pure signature[64] in
    let* recovery_id :=
      let* α0 :=
        secp256k1.ecdsa.recovery.RecoveryId::["from_i32"]
          (cast recovery_byte i32) in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_display"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Unable to parse the recovery id: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    let* message :=
      let* α0 := secp256k1.Message::["from_slice"] message_hash in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_display"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Unable to create the message from hash: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    let* signature :=
      let* α0 :=
        secp256k1.ecdsa.recovery.RecoverableSignature::["from_compact"]
          (addr_of signature[Range {| Range.start := 0; Range.end := 64; |}])
          recovery_id in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_display"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Unable to parse the signature: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    let* pub_key :=
      secp256k1.context.global.SECP256K1.["recover_ecdsa"]
        (addr_of message)
        (addr_of signature) in
    match pub_key with
    | core.result.Result.Ok pub_key =>
      let* _ :=
        let* α0 := pub_key.["serialize"] in
        assign output.["deref"] α0 in
      Pure (core.result.Result.Ok tt)
    | core.result.Result.Err _ =>
      Pure (core.result.Result.Err ink_env.error.Error.EcdsaRecoveryFailed)
    end.
  
  Global Instance Method_ecdsa_recover `{H : State.Trait} :
    Notation.Dot "ecdsa_recover" := {
    Notation.dot := ecdsa_recover;
  }.
  
  Definition ecdsa_to_eth_address
      `{H : State.Trait}
      (self : mut_ref Self)
      (pubkey : ref list u8)
      (output : mut_ref list u8)
      : M (H := H) (ink_env.error.Result unit) :=
    let* pk :=
      let* α0 := secp256k1.key.PublicKey::["from_slice"] pubkey in
      let* α1 :=
        α0.["map_err"]
          (fun _ => Pure ink_env.error.Error.EcdsaRecoveryFailed) in
      let* α2 := LangItem α1 in
      match α2 with
      | Break {| Break.0 := residual; |} =>
        let* α0 := LangItem residual in
        Return α0
      | Continue {| Continue.0 := val; |} => Pure val
      end in
    let* uncompressed := pk.["serialize_uncompressed"] in
    let* hash := ink_env.hash.HashOutput.Type::["default"] tt in
    let* _ :=
      ink_env.hash.Keccak256::["hash"]
        (addr_of uncompressed[RangeFrom {| RangeFrom.start := 1; |}])
        (addr_of hash) in
    let* _ :=
      let* α0 := output.["as_mut"] in
      α0.["copy_from_slice"]
        (addr_of hash[RangeFrom {| RangeFrom.start := 12; |}]) in
    Pure (core.result.Result.Ok tt).
  
  Global Instance Method_ecdsa_to_eth_address `{H : State.Trait} :
    Notation.Dot "ecdsa_to_eth_address" := {
    Notation.dot := ecdsa_to_eth_address;
  }.
  
  Definition call_chain_extension
      `{H : State.Trait}
      (self : mut_ref Self)
      (func_id : u32)
      (input : ref I)
      (status_to_result : F)
      (decode_to_result : D)
      : M (H := H) (core.result.Result T E) :=
    let* enc_input :=
      let* α0 := parity_scale_codec.codec.Encode.encode input in
      Pure (addr_of α0[RangeFull {|  |}]) in
    let* output := repeat 0 in
    let* _ :=
      self.["engine"].["call_chain_extension"]
        func_id
        enc_input
        (addr_of (addr_of output[RangeFull {|  |}])) in
    let* '(status, out) :=
      let* α0 :=
        parity_scale_codec.codec.Decode.decode
          (addr_of (addr_of output[RangeFull {|  |}])) in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "could not decode `call_chain_extension` output: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    let* _ :=
      let* α0 := status_to_result status in
      let* α1 := LangItem α0 in
      match α1 with
      | Break {| Break.0 := residual; |} =>
        let* α0 := LangItem residual in
        Return α0
      | Continue {| Continue.0 := val; |} => Pure val
      end in
    let* decoded :=
      let* α0 := decode_to_result (addr_of out[RangeFull {|  |}]) in
      let* α1 := LangItem α0 in
      match α1 with
      | Break {| Break.0 := residual; |} =>
        let* α0 := LangItem residual in
        Return α0
      | Continue {| Continue.0 := val; |} => Pure val
      end in
    Pure (core.result.Result.Ok decoded).
  
  Global Instance Method_call_chain_extension `{H : State.Trait} :
    Notation.Dot "call_chain_extension" := {
    Notation.dot := call_chain_extension;
  }.
  
  Definition set_code_hash
      `{H : State.Trait}
      (self : mut_ref Self)
      (_code_hash : ref Slice)
      : M (H := H) (ink_env.error.Result unit) :=
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not support `set_code_hash`"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_set_code_hash `{H : State.Trait} :
    Notation.Dot "set_code_hash" := {
    Notation.dot := set_code_hash;
  }.
  
  Global Instance I : ink_env.backend.EnvBackend.Trait Self := {
    ink_env.backend.EnvBackend.set_contract_storage
      `{H : State.Trait}
      :=
      set_contract_storage;
    ink_env.backend.EnvBackend.get_contract_storage
      `{H : State.Trait}
      :=
      get_contract_storage;
    ink_env.backend.EnvBackend.take_contract_storage
      `{H : State.Trait}
      :=
      take_contract_storage;
    ink_env.backend.EnvBackend.contains_contract_storage
      `{H : State.Trait}
      :=
      contains_contract_storage;
    ink_env.backend.EnvBackend.clear_contract_storage
      `{H : State.Trait}
      :=
      clear_contract_storage;
    ink_env.backend.EnvBackend.decode_input `{H : State.Trait} := decode_input;
    ink_env.backend.EnvBackend.return_value `{H : State.Trait} := return_value;
    ink_env.backend.EnvBackend.debug_message
      `{H : State.Trait}
      :=
      debug_message;
    ink_env.backend.EnvBackend.hash_bytes `{H : State.Trait} := hash_bytes;
    ink_env.backend.EnvBackend.hash_encoded `{H : State.Trait} := hash_encoded;
    ink_env.backend.EnvBackend.ecdsa_recover
      `{H : State.Trait}
      :=
      ecdsa_recover;
    ink_env.backend.EnvBackend.ecdsa_to_eth_address
      `{H : State.Trait}
      :=
      ecdsa_to_eth_address;
    ink_env.backend.EnvBackend.call_chain_extension
      `{H : State.Trait}
      :=
      call_chain_extension;
    ink_env.backend.EnvBackend.set_code_hash
      `{H : State.Trait}
      :=
      set_code_hash;
  }.
End Impl_ink_env_backend_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.

Module
  Impl_ink_env_backend_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
  Definition Self := ink_env.engine.off_chain.EnvInstance.
  
  Definition caller
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) ImplE.AccountId :=
    let* α0 := self.["get_property"] ink_engine.ext.Engine::["caller"] in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `caller` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_caller `{H : State.Trait} : Notation.Dot "caller" := {
    Notation.dot := caller;
  }.
  
  Definition transferred_value
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) ImplE.Balance :=
    let* α0 :=
      self.["get_property"] ink_engine.ext.Engine::["value_transferred"] in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `transferred_value` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_transferred_value `{H : State.Trait} :
    Notation.Dot "transferred_value" := {
    Notation.dot := transferred_value;
  }.
  
  Definition gas_left
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) u64 :=
    let* α0 := self.["get_property"] ink_engine.ext.Engine::["gas_left"] in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `gas_left` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_gas_left `{H : State.Trait} :
    Notation.Dot "gas_left" := {
    Notation.dot := gas_left;
  }.
  
  Definition block_timestamp
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) ImplE.Timestamp :=
    let* α0 :=
      self.["get_property"] ink_engine.ext.Engine::["block_timestamp"] in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `block_timestamp` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_block_timestamp `{H : State.Trait} :
    Notation.Dot "block_timestamp" := {
    Notation.dot := block_timestamp;
  }.
  
  Definition account_id
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) ImplE.AccountId :=
    let* α0 := self.["get_property"] ink_engine.ext.Engine::["address"] in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `account_id` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_account_id `{H : State.Trait} :
    Notation.Dot "account_id" := {
    Notation.dot := account_id;
  }.
  
  Definition balance
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) ImplE.Balance :=
    let* α0 := self.["get_property"] ink_engine.ext.Engine::["balance"] in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `balance` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_balance `{H : State.Trait} :
    Notation.Dot "balance" := {
    Notation.dot := balance;
  }.
  
  Definition block_number
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) ImplE.BlockNumber :=
    let* α0 := self.["get_property"] ink_engine.ext.Engine::["block_number"] in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `block_number` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_block_number `{H : State.Trait} :
    Notation.Dot "block_number" := {
    Notation.dot := block_number;
  }.
  
  Definition minimum_balance
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) ImplE.Balance :=
    let* α0 :=
      self.["get_property"] ink_engine.ext.Engine::["minimum_balance"] in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `minimum_balance` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_minimum_balance `{H : State.Trait} :
    Notation.Dot "minimum_balance" := {
    Notation.dot := minimum_balance;
  }.
  
  Definition emit_event
      `{H : State.Trait}
      (self : mut_ref Self)
      (event : Event)
      : M (H := H) unit :=
    let* builder :=
      ink_env.engine.off_chain.impls.TopicsBuilder::["default"] tt in
    let* enc_topics :=
      let* α0 := builder.["into"] in
      event.["topics"] α0 in
    let* enc_data :=
      let* α0 := parity_scale_codec.codec.Encode.encode (addr_of event) in
      Pure (addr_of α0[RangeFull {|  |}]) in
    let* _ :=
      self.["engine"].["deposit_event"]
        (addr_of enc_topics[RangeFull {|  |}])
        enc_data in
    Pure tt.
  
  Global Instance Method_emit_event `{H : State.Trait} :
    Notation.Dot "emit_event" := {
    Notation.dot := emit_event;
  }.
  
  Definition invoke_contract
      `{H : State.Trait}
      (self : mut_ref Self)
      (params
        :
        ref
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.Call E)
            Args
            R))
      : M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)) :=
    let* _gas_limit := params.["gas_limit"] in
    let* _callee := params.["callee"] in
    let* _call_flags :=
      let* α0 := params.["call_flags"] in
      α0.["into_u32"] in
    let* _transferred_value := params.["transferred_value"] in
    let* _input := params.["exec_input"] in
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not support contract invocation"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_invoke_contract `{H : State.Trait} :
    Notation.Dot "invoke_contract" := {
    Notation.dot := invoke_contract;
  }.
  
  Definition invoke_contract_delegate
      `{H : State.Trait}
      (self : mut_ref Self)
      (params
        :
        ref
          (ink_env.call.call_builder.CallParams
            E
            (ink_env.call.call_builder.DelegateCall E)
            Args
            R))
      : M (H := H) (ink_env.error.Result (ink_primitives.MessageResult R)) :=
    let* _code_hash := params.["code_hash"] in
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not support delegated contract invocation"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_invoke_contract_delegate `{H : State.Trait} :
    Notation.Dot "invoke_contract_delegate" := {
    Notation.dot := invoke_contract_delegate;
  }.
  
  Definition instantiate_contract
      `{H : State.Trait}
      (self : mut_ref Self)
      (params
        :
        ref
          (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
      :
        M (H := H)
          (ink_env.error.Result
            (ink_primitives.ConstructorResult
              ink_env.call.create_builder.ConstructorReturnType.Output)) :=
    let* _code_hash := params.["code_hash"] in
    let* _gas_limit := params.["gas_limit"] in
    let* _endowment := params.["endowment"] in
    let* _input := params.["exec_input"] in
    let* _salt_bytes := params.["salt_bytes"] in
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not support contract instantiation"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_instantiate_contract `{H : State.Trait} :
    Notation.Dot "instantiate_contract" := {
    Notation.dot := instantiate_contract;
  }.
  
  Definition terminate_contract
      `{H : State.Trait}
      (self : mut_ref Self)
      (beneficiary : ImplE.AccountId)
      : M (H := H) Empty_set :=
    let* buffer :=
      parity_scale_codec.codec.Encode.encode (addr_of beneficiary) in
    self.["engine"].["terminate"] (addr_of buffer[RangeFull {|  |}]).
  
  Global Instance Method_terminate_contract `{H : State.Trait} :
    Notation.Dot "terminate_contract" := {
    Notation.dot := terminate_contract;
  }.
  
  Definition transfer
      `{H : State.Trait}
      (self : mut_ref Self)
      (destination : ImplE.AccountId)
      (value : ImplE.Balance)
      : M (H := H) (ink_env.error.Result unit) :=
    let* enc_destination :=
      let* α0 := parity_scale_codec.codec.Encode.encode (addr_of destination) in
      Pure (addr_of α0[RangeFull {|  |}]) in
    let* enc_value :=
      let* α0 := parity_scale_codec.codec.Encode.encode (addr_of value) in
      Pure (addr_of α0[RangeFull {|  |}]) in
    let* α0 := self.["engine"].["transfer"] enc_destination enc_value in
    α0.["map_err"] core.convert.Into.into.
  
  Global Instance Method_transfer `{H : State.Trait} :
    Notation.Dot "transfer" := {
    Notation.dot := transfer;
  }.
  
  Definition weight_to_fee
      `{H : State.Trait}
      (self : mut_ref Self)
      (gas : u64)
      : M (H := H) ImplE.Balance :=
    let* output := repeat 0 in
    let* _ :=
      self.["engine"].["weight_to_fee"]
        gas
        (addr_of (addr_of output[RangeFull {|  |}])) in
    let* α0 :=
      parity_scale_codec.codec.Decode.decode
        (addr_of (addr_of output[RangeFull {|  |}])) in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "could not read `weight_to_fee` property: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_weight_to_fee `{H : State.Trait} :
    Notation.Dot "weight_to_fee" := {
    Notation.dot := weight_to_fee;
  }.
  
  Definition is_contract
      `{H : State.Trait}
      (self : mut_ref Self)
      (account : ref ImplE.AccountId)
      : M (H := H) bool :=
    let* α0 := parity_scale_codec.codec.Encode.encode (addr_of account) in
    self.["engine"].["is_contract"] α0.
  
  Global Instance Method_is_contract `{H : State.Trait} :
    Notation.Dot "is_contract" := {
    Notation.dot := is_contract;
  }.
  
  Definition caller_is_origin
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) bool :=
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not support cross-contract calls"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_caller_is_origin `{H : State.Trait} :
    Notation.Dot "caller_is_origin" := {
    Notation.dot := caller_is_origin;
  }.
  
  Definition code_hash
      `{H : State.Trait}
      (self : mut_ref Self)
      (_account : ref ImplE.AccountId)
      : M (H := H) (ink_env.error.Result ImplE.Hash) :=
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not support `code_hash`"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_code_hash `{H : State.Trait} :
    Notation.Dot "code_hash" := {
    Notation.dot := code_hash;
  }.
  
  Definition own_code_hash
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) (ink_env.error.Result ImplE.Hash) :=
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not support `own_code_hash`"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_own_code_hash `{H : State.Trait} :
    Notation.Dot "own_code_hash" := {
    Notation.dot := own_code_hash;
  }.
  
  Definition call_runtime
      `{H : State.Trait}
      (self : mut_ref Self)
      (_call : ref Call)
      : M (H := H) (ink_env.error.Result unit) :=
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not support `call_runtime`"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0.
  
  Global Instance Method_call_runtime `{H : State.Trait} :
    Notation.Dot "call_runtime" := {
    Notation.dot := call_runtime;
  }.
  
  Global Instance I : ink_env.backend.TypedEnvBackend.Trait Self := {
    ink_env.backend.TypedEnvBackend.caller `{H : State.Trait} := caller;
    ink_env.backend.TypedEnvBackend.transferred_value
      `{H : State.Trait}
      :=
      transferred_value;
    ink_env.backend.TypedEnvBackend.weight_to_fee
      `{H : State.Trait}
      :=
      weight_to_fee;
    ink_env.backend.TypedEnvBackend.gas_left `{H : State.Trait} := gas_left;
    ink_env.backend.TypedEnvBackend.block_timestamp
      `{H : State.Trait}
      :=
      block_timestamp;
    ink_env.backend.TypedEnvBackend.account_id `{H : State.Trait} := account_id;
    ink_env.backend.TypedEnvBackend.balance `{H : State.Trait} := balance;
    ink_env.backend.TypedEnvBackend.block_number
      `{H : State.Trait}
      :=
      block_number;
    ink_env.backend.TypedEnvBackend.minimum_balance
      `{H : State.Trait}
      :=
      minimum_balance;
    ink_env.backend.TypedEnvBackend.emit_event `{H : State.Trait} := emit_event;
    ink_env.backend.TypedEnvBackend.invoke_contract
      `{H : State.Trait}
      :=
      invoke_contract;
    ink_env.backend.TypedEnvBackend.invoke_contract_delegate
      `{H : State.Trait}
      :=
      invoke_contract_delegate;
    ink_env.backend.TypedEnvBackend.instantiate_contract
      `{H : State.Trait}
      :=
      instantiate_contract;
    ink_env.backend.TypedEnvBackend.terminate_contract
      `{H : State.Trait}
      :=
      terminate_contract;
    ink_env.backend.TypedEnvBackend.transfer `{H : State.Trait} := transfer;
    ink_env.backend.TypedEnvBackend.is_contract
      `{H : State.Trait}
      :=
      is_contract;
    ink_env.backend.TypedEnvBackend.caller_is_origin
      `{H : State.Trait}
      :=
      caller_is_origin;
    ink_env.backend.TypedEnvBackend.code_hash `{H : State.Trait} := code_hash;
    ink_env.backend.TypedEnvBackend.own_code_hash
      `{H : State.Trait}
      :=
      own_code_hash;
    ink_env.backend.TypedEnvBackend.call_runtime
      `{H : State.Trait}
      :=
      call_runtime;
  }.
End
  Impl_ink_env_backend_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.

Module test_api.
  Module EmittedEvent.
    Record t : Set := {
      topics : alloc.vec.Vec (alloc.vec.Vec u8);
      data : alloc.vec.Vec u8;
    }.
    
    Global Instance Get_topics : Notation.Dot "topics" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_data : Notation.Dot "data" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End EmittedEvent.
  Definition EmittedEvent : Set := EmittedEvent.t.
  
  Module
    Impl_core_clone_Clone_for_ink_env_engine_off_chain_test_api_EmittedEvent.
    Definition Self := ink_env.engine.off_chain.test_api.EmittedEvent.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.engine.off_chain.test_api.EmittedEvent :=
      let* α0 := core.clone.Clone.clone (addr_of self.["topics"]) in
      let* α1 := core.clone.Clone.clone (addr_of self.["data"]) in
      Pure
        {|
          ink_env.engine.off_chain.test_api.EmittedEvent.topics := α0;
          ink_env.engine.off_chain.test_api.EmittedEvent.data := α1;
        |}.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_engine_off_chain_test_api_EmittedEvent.
  
  Definition set_account_balance
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (account_id : ImplT.AccountId)
      (new_balance : ImplT.Balance)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode (addr_of account_id) in
          instance.["engine"].["set_balance"] α0 new_balance in
        Pure tt).
  
  Definition get_account_balance
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (account_id : ImplT.AccountId)
      : M (H := H) (ink_env.error.Result ImplT.Balance) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* α0 :=
          parity_scale_codec.codec.Encode.encode (addr_of account_id) in
        let* α1 := instance.["engine"].["get_balance"] α0 in
        α1.["map_err"] core.convert.Into.into).
  
  Definition register_chain_extension
      `{H : State.Trait}
      {E : Set}
      `{ink_engine.chain_extension.ChainExtension.Trait E}
      (extension : E)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ :=
          let* α0 := alloc.boxed.Box::["new"] extension in
          instance.["engine"].["chain_extension_handler"].["register"] α0 in
        Pure tt).
  
  Definition recorded_debug_messages
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) ink_engine.test_api.RecordedDebugMessages :=
    ink_env.engine.OnInstance.on_instance
      (fun instance => instance.["engine"].["get_emitted_debug_messages"]).
  
  Definition set_clear_storage_disabled
      `{H : State.Trait}
      (_disable : bool)
      : M (H := H) unit :=
    let* _ :=
      let* α0 :=
        format_arguments::["new_v1"]
          (addr_of
            [
              "not implemented: off-chain environment does not yet support `set_clear_storage_disabled`"
            ])
          (addr_of [ ]) in
      core.panicking.panic_fmt α0 in
    Pure tt.
  
  Definition advance_block
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (_ : unit)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ := instance.["engine"].["advance_block"] in
        Pure tt).
  
  Definition set_caller
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
      (caller : ImplT.AccountId)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ :=
          let* α0 := parity_scale_codec.codec.Encode.encode (addr_of caller) in
          instance.["engine"].["set_caller"] α0 in
        Pure tt).
  
  Definition set_callee
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
      (callee : ImplT.AccountId)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ :=
          let* α0 := parity_scale_codec.codec.Encode.encode (addr_of callee) in
          instance.["engine"].["set_callee"] α0 in
        Pure tt).
  
  Definition set_contract
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
      (contract : ImplT.AccountId)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode (addr_of contract) in
          instance.["engine"].["set_contract"] α0 in
        Pure tt).
  
  Definition is_contract
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
      (contract : ImplT.AccountId)
      : M (H := H) bool :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* α0 := parity_scale_codec.codec.Encode.encode (addr_of contract) in
        instance.["engine"].["is_contract"] α0).
  
  Definition callee
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (_ : unit)
      : M (H := H) ImplT.AccountId :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* callee := instance.["engine"].["get_callee"] in
        let* α0 :=
          parity_scale_codec.codec.Decode.decode
            (addr_of (addr_of callee[RangeFull {|  |}])) in
        α0.["unwrap_or_else"]
          (fun err =>
            let* α0 := format_argument::["new_display"] (addr_of err) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "encoding failed: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1)).
  
  Definition get_contract_storage_rw
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (account_id : ref ImplT.AccountId)
      : M (H := H) (usize * usize) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* α0 :=
          parity_scale_codec.codec.Encode.encode (addr_of account_id) in
        instance.["engine"].["get_contract_storage_rw"] α0).
  
  Definition set_value_transferred
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (value : ImplT.Balance)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ := instance.["engine"].["set_value_transferred"] value in
        Pure tt).
  
  Definition transfer_in
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (value : ImplT.Balance)
      : M (H := H) unit :=
    let* _ :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* caller :=
            let* α0 :=
              instance.["engine"].["exec_context"].["caller"].["as_ref"] in
            let* α1 := α0.["expect"] "no caller has been set" in
            let* α2 := α1.["as_bytes"] in
            α2.["to_vec"] in
          let* caller_old_balance :=
            let* α0 := caller.["clone"] in
            let* α1 := instance.["engine"].["get_balance"] α0 in
            α1.["unwrap_or_default"] in
          let* callee := instance.["engine"].["get_callee"] in
          let* contract_old_balance :=
            let* α0 := callee.["clone"] in
            let* α1 := instance.["engine"].["get_balance"] α0 in
            α1.["unwrap_or_default"] in
          let* _ :=
            let* α0 := caller_old_balance.["sub"] value in
            instance.["engine"].["set_balance"] caller α0 in
          let* _ :=
            let* α0 := contract_old_balance.["add"] value in
            instance.["engine"].["set_balance"] callee α0 in
          let* _ := instance.["engine"].["set_value_transferred"] value in
          Pure tt) in
    Pure tt.
  
  Definition count_used_storage_cells
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (account_id : ref ImplT.AccountId)
      : M (H := H) (ink_env.error.Result usize) :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* α0 :=
          parity_scale_codec.codec.Encode.encode (addr_of account_id) in
        let* α1 :=
          instance.["engine"].["count_used_storage_cells"] (addr_of α0) in
        α1.["map_err"] core.convert.Into.into).
  
  Definition set_block_timestamp
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (value : ImplT.Timestamp)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ := instance.["engine"].["set_block_timestamp"] value in
        Pure tt).
  
  Definition set_block_number
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      (value : ImplT.BlockNumber)
      : M (H := H) unit :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ := instance.["engine"].["set_block_number"] value in
        Pure tt).
  
  Definition run_test
      `{H : State.Trait}
      {T F : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.ops.function.FnOnce.Trait
        ((ink_env.engine.off_chain.test_api.DefaultAccounts T))
        F}
      `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
      (f : F)
      : M (H := H) (ink_env.error.Result unit) :=
    let* default_accounts :=
      ink_env.engine.off_chain.test_api.default_accounts tt in
    let* _ :=
      ink_env.engine.OnInstance.on_instance
        (fun instance =>
          let* _ := instance.["engine"].["initialize_or_reset"] in
          let* encoded_alice :=
            parity_scale_codec.codec.Encode.encode
              (addr_of default_accounts.["alice"]) in
          let* _ :=
            let* α0 := encoded_alice.["clone"] in
            instance.["engine"].["set_caller"] α0 in
          let* _ :=
            let* α0 := encoded_alice.["clone"] in
            instance.["engine"].["set_callee"] α0 in
          let substantial := 1000000 in
          let some := 1000 in
          let* _ :=
            instance.["engine"].["set_balance"] encoded_alice substantial in
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode
                (addr_of default_accounts.["bob"]) in
            instance.["engine"].["set_balance"] α0 some in
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode
                (addr_of default_accounts.["charlie"]) in
            instance.["engine"].["set_balance"] α0 some in
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode
                (addr_of default_accounts.["django"]) in
            instance.["engine"].["set_balance"] α0 0 in
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode
                (addr_of default_accounts.["eve"]) in
            instance.["engine"].["set_balance"] α0 0 in
          let* _ :=
            let* α0 :=
              parity_scale_codec.codec.Encode.encode
                (addr_of default_accounts.["frank"]) in
            instance.["engine"].["set_balance"] α0 0 in
          Pure tt) in
    f default_accounts.
  
  Definition default_accounts
      `{H : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
      (_ : unit)
      : M (H := H) (ink_env.engine.off_chain.test_api.DefaultAccounts T) :=
    let* α0 := repeat 1 in
    let* α1 := ImplT.AccountId::["from"] α0 in
    let* α2 := repeat 2 in
    let* α3 := ImplT.AccountId::["from"] α2 in
    let* α4 := repeat 3 in
    let* α5 := ImplT.AccountId::["from"] α4 in
    let* α6 := repeat 4 in
    let* α7 := ImplT.AccountId::["from"] α6 in
    let* α8 := repeat 5 in
    let* α9 := ImplT.AccountId::["from"] α8 in
    let* α10 := repeat 6 in
    let* α11 := ImplT.AccountId::["from"] α10 in
    Pure
      {|
        ink_env.engine.off_chain.test_api.DefaultAccounts.alice := α1;
        ink_env.engine.off_chain.test_api.DefaultAccounts.bob := α3;
        ink_env.engine.off_chain.test_api.DefaultAccounts.charlie := α5;
        ink_env.engine.off_chain.test_api.DefaultAccounts.django := α7;
        ink_env.engine.off_chain.test_api.DefaultAccounts.eve := α9;
        ink_env.engine.off_chain.test_api.DefaultAccounts.frank := α11;
      |}.
  
  Module DefaultAccounts.
    Record t : Set := {
      alice : ImplT.AccountId;
      bob : ImplT.AccountId;
      charlie : ImplT.AccountId;
      django : ImplT.AccountId;
      eve : ImplT.AccountId;
      frank : ImplT.AccountId;
    }.
    
    Global Instance Get_alice : Notation.Dot "alice" := {
      Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
    }.
    Global Instance Get_bob : Notation.Dot "bob" := {
      Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
    }.
    Global Instance Get_charlie : Notation.Dot "charlie" := {
      Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
    }.
    Global Instance Get_django : Notation.Dot "django" := {
      Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
    }.
    Global Instance Get_eve : Notation.Dot "eve" := {
      Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
    }.
    Global Instance Get_frank : Notation.Dot "frank" := {
      Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
    }.
  End DefaultAccounts.
  Definition DefaultAccounts : Set := DefaultAccounts.t.
  
  Definition recorded_events
      `{H : State.Trait}
      (_ : unit)
      : M (H := H) OpaqueDef :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* α0 := instance.["engine"].["get_emitted_events"] in
        α0.["map"] (fun evt => evt.["into"])).
  
  Definition assert_contract_termination
      `{H : State.Trait}
      {T F : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.ops.function.FnMut.Trait unit F}
      `{core.panic.unwind_safe.UnwindSafe.Trait F}
      `{core.fmt.Debug.Trait ink_env.types.Environment.AccountId}
      `{core.fmt.Debug.Trait ink_env.types.Environment.Balance}
      (should_terminate : F)
      (expected_beneficiary : ImplT.AccountId)
      (expected_value_transferred_to_beneficiary : ImplT.Balance)
      : M (H := H) unit :=
    let* value_any :=
      let* α0 := std.panic.catch_unwind should_terminate in
      α0.["expect_err"] "contract did not terminate" in
    let* encoded_input :=
      let* α0 := value_any.["downcast_ref"] in
      α0.["expect"] "panic object can not be cast" in
    let* '(value_transferred, encoded_beneficiary) :=
      let* α0 :=
        parity_scale_codec.codec.Decode.decode
          (addr_of (addr_of encoded_input[RangeFull {|  |}])) in
      α0.["unwrap_or_else"]
        (fun err =>
          let* α0 := format_argument::["new_display"] (addr_of err) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "input can not be decoded: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    let* beneficiary :=
      let* α0 :=
        parity_scale_codec.codec.Decode.decode
          (addr_of (addr_of encoded_beneficiary[RangeFull {|  |}])) in
      α0.["unwrap_or_else"]
        (fun err =>
          let* α0 := format_argument::["new_display"] (addr_of err) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "input can not be decoded: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1) in
    let* _ :=
      match
        (addr_of value_transferred,
          addr_of expected_value_transferred_to_beneficiary)
      with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    let* _ :=
      match (addr_of beneficiary, addr_of expected_beneficiary) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              core.option.Option.None in
          Pure tt
        else
          Pure tt
      end in
    Pure tt.
End test_api.

Module EmittedEvent.
  Record t : Set := {
    topics : alloc.vec.Vec (alloc.vec.Vec u8);
    data : alloc.vec.Vec u8;
  }.
  
  Global Instance Get_topics : Notation.Dot "topics" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_data : Notation.Dot "data" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End EmittedEvent.
Definition EmittedEvent : Set := EmittedEvent.t.

Module Impl_core_clone_Clone_for_ink_env_engine_off_chain_test_api_EmittedEvent.
  Definition Self := ink_env.engine.off_chain.test_api.EmittedEvent.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.engine.off_chain.test_api.EmittedEvent :=
    let* α0 := core.clone.Clone.clone (addr_of self.["topics"]) in
    let* α1 := core.clone.Clone.clone (addr_of self.["data"]) in
    Pure
      {|
        ink_env.engine.off_chain.test_api.EmittedEvent.topics := α0;
        ink_env.engine.off_chain.test_api.EmittedEvent.data := α1;
      |}.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_engine_off_chain_test_api_EmittedEvent.

Definition set_account_balance
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (account_id : ImplT.AccountId)
    (new_balance : ImplT.Balance)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ :=
        let* α0 :=
          parity_scale_codec.codec.Encode.encode (addr_of account_id) in
        instance.["engine"].["set_balance"] α0 new_balance in
      Pure tt).

Definition get_account_balance
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (account_id : ImplT.AccountId)
    : M (H := H) (ink_env.error.Result ImplT.Balance) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* α0 := parity_scale_codec.codec.Encode.encode (addr_of account_id) in
      let* α1 := instance.["engine"].["get_balance"] α0 in
      α1.["map_err"] core.convert.Into.into).

Definition register_chain_extension
    `{H : State.Trait}
    {E : Set}
    `{ink_engine.chain_extension.ChainExtension.Trait E}
    (extension : E)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ :=
        let* α0 := alloc.boxed.Box::["new"] extension in
        instance.["engine"].["chain_extension_handler"].["register"] α0 in
      Pure tt).

Definition recorded_debug_messages
    `{H : State.Trait}
    (_ : unit)
    : M (H := H) ink_engine.test_api.RecordedDebugMessages :=
  ink_env.engine.OnInstance.on_instance
    (fun instance => instance.["engine"].["get_emitted_debug_messages"]).

Definition set_clear_storage_disabled
    `{H : State.Trait}
    (_disable : bool)
    : M (H := H) unit :=
  let* _ :=
    let* α0 :=
      format_arguments::["new_v1"]
        (addr_of
          [
            "not implemented: off-chain environment does not yet support `set_clear_storage_disabled`"
          ])
        (addr_of [ ]) in
    core.panicking.panic_fmt α0 in
  Pure tt.

Definition advance_block
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (_ : unit)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ := instance.["engine"].["advance_block"] in
      Pure tt).

Definition set_caller
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
    (caller : ImplT.AccountId)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ :=
        let* α0 := parity_scale_codec.codec.Encode.encode (addr_of caller) in
        instance.["engine"].["set_caller"] α0 in
      Pure tt).

Definition set_callee
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
    (callee : ImplT.AccountId)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ :=
        let* α0 := parity_scale_codec.codec.Encode.encode (addr_of callee) in
        instance.["engine"].["set_callee"] α0 in
      Pure tt).

Definition set_contract
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
    (contract : ImplT.AccountId)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ :=
        let* α0 := parity_scale_codec.codec.Encode.encode (addr_of contract) in
        instance.["engine"].["set_contract"] α0 in
      Pure tt).

Definition is_contract
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
    (contract : ImplT.AccountId)
    : M (H := H) bool :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* α0 := parity_scale_codec.codec.Encode.encode (addr_of contract) in
      instance.["engine"].["is_contract"] α0).

Definition callee
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (_ : unit)
    : M (H := H) ImplT.AccountId :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* callee := instance.["engine"].["get_callee"] in
      let* α0 :=
        parity_scale_codec.codec.Decode.decode
          (addr_of (addr_of callee[RangeFull {|  |}])) in
      α0.["unwrap_or_else"]
        (fun err =>
          let* α0 := format_argument::["new_display"] (addr_of err) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "encoding failed: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1)).

Definition get_contract_storage_rw
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (account_id : ref ImplT.AccountId)
    : M (H := H) (usize * usize) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* α0 := parity_scale_codec.codec.Encode.encode (addr_of account_id) in
      instance.["engine"].["get_contract_storage_rw"] α0).

Definition set_value_transferred
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (value : ImplT.Balance)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ := instance.["engine"].["set_value_transferred"] value in
      Pure tt).

Definition transfer_in
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (value : ImplT.Balance)
    : M (H := H) unit :=
  let* _ :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* caller :=
          let* α0 :=
            instance.["engine"].["exec_context"].["caller"].["as_ref"] in
          let* α1 := α0.["expect"] "no caller has been set" in
          let* α2 := α1.["as_bytes"] in
          α2.["to_vec"] in
        let* caller_old_balance :=
          let* α0 := caller.["clone"] in
          let* α1 := instance.["engine"].["get_balance"] α0 in
          α1.["unwrap_or_default"] in
        let* callee := instance.["engine"].["get_callee"] in
        let* contract_old_balance :=
          let* α0 := callee.["clone"] in
          let* α1 := instance.["engine"].["get_balance"] α0 in
          α1.["unwrap_or_default"] in
        let* _ :=
          let* α0 := caller_old_balance.["sub"] value in
          instance.["engine"].["set_balance"] caller α0 in
        let* _ :=
          let* α0 := contract_old_balance.["add"] value in
          instance.["engine"].["set_balance"] callee α0 in
        let* _ := instance.["engine"].["set_value_transferred"] value in
        Pure tt) in
  Pure tt.

Definition count_used_storage_cells
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (account_id : ref ImplT.AccountId)
    : M (H := H) (ink_env.error.Result usize) :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* α0 := parity_scale_codec.codec.Encode.encode (addr_of account_id) in
      let* α1 :=
        instance.["engine"].["count_used_storage_cells"] (addr_of α0) in
      α1.["map_err"] core.convert.Into.into).

Definition set_block_timestamp
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (value : ImplT.Timestamp)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ := instance.["engine"].["set_block_timestamp"] value in
      Pure tt).

Definition set_block_number
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    (value : ImplT.BlockNumber)
    : M (H := H) unit :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* _ := instance.["engine"].["set_block_number"] value in
      Pure tt).

Definition run_test
    `{H : State.Trait}
    {T F : Set}
    `{ink_env.types.Environment.Trait T}
    `{core.ops.function.FnOnce.Trait
      ((ink_env.engine.off_chain.test_api.DefaultAccounts T))
      F}
    `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
    (f : F)
    : M (H := H) (ink_env.error.Result unit) :=
  let* default_accounts :=
    ink_env.engine.off_chain.test_api.default_accounts tt in
  let* _ :=
    ink_env.engine.OnInstance.on_instance
      (fun instance =>
        let* _ := instance.["engine"].["initialize_or_reset"] in
        let* encoded_alice :=
          parity_scale_codec.codec.Encode.encode
            (addr_of default_accounts.["alice"]) in
        let* _ :=
          let* α0 := encoded_alice.["clone"] in
          instance.["engine"].["set_caller"] α0 in
        let* _ :=
          let* α0 := encoded_alice.["clone"] in
          instance.["engine"].["set_callee"] α0 in
        let substantial := 1000000 in
        let some := 1000 in
        let* _ :=
          instance.["engine"].["set_balance"] encoded_alice substantial in
        let* _ :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode
              (addr_of default_accounts.["bob"]) in
          instance.["engine"].["set_balance"] α0 some in
        let* _ :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode
              (addr_of default_accounts.["charlie"]) in
          instance.["engine"].["set_balance"] α0 some in
        let* _ :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode
              (addr_of default_accounts.["django"]) in
          instance.["engine"].["set_balance"] α0 0 in
        let* _ :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode
              (addr_of default_accounts.["eve"]) in
          instance.["engine"].["set_balance"] α0 0 in
        let* _ :=
          let* α0 :=
            parity_scale_codec.codec.Encode.encode
              (addr_of default_accounts.["frank"]) in
          instance.["engine"].["set_balance"] α0 0 in
        Pure tt) in
  f default_accounts.

Definition default_accounts
    `{H : State.Trait}
    {T : Set}
    `{ink_env.types.Environment.Trait T}
    `{core.convert.From.Trait list u8 ink_env.types.Environment.AccountId}
    (_ : unit)
    : M (H := H) (ink_env.engine.off_chain.test_api.DefaultAccounts T) :=
  let* α0 := repeat 1 in
  let* α1 := ImplT.AccountId::["from"] α0 in
  let* α2 := repeat 2 in
  let* α3 := ImplT.AccountId::["from"] α2 in
  let* α4 := repeat 3 in
  let* α5 := ImplT.AccountId::["from"] α4 in
  let* α6 := repeat 4 in
  let* α7 := ImplT.AccountId::["from"] α6 in
  let* α8 := repeat 5 in
  let* α9 := ImplT.AccountId::["from"] α8 in
  let* α10 := repeat 6 in
  let* α11 := ImplT.AccountId::["from"] α10 in
  Pure
    {|
      ink_env.engine.off_chain.test_api.DefaultAccounts.alice := α1;
      ink_env.engine.off_chain.test_api.DefaultAccounts.bob := α3;
      ink_env.engine.off_chain.test_api.DefaultAccounts.charlie := α5;
      ink_env.engine.off_chain.test_api.DefaultAccounts.django := α7;
      ink_env.engine.off_chain.test_api.DefaultAccounts.eve := α9;
      ink_env.engine.off_chain.test_api.DefaultAccounts.frank := α11;
    |}.

Module DefaultAccounts.
  Record t : Set := {
    alice : ImplT.AccountId;
    bob : ImplT.AccountId;
    charlie : ImplT.AccountId;
    django : ImplT.AccountId;
    eve : ImplT.AccountId;
    frank : ImplT.AccountId;
  }.
  
  Global Instance Get_alice : Notation.Dot "alice" := {
    Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
  }.
  Global Instance Get_bob : Notation.Dot "bob" := {
    Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
  }.
  Global Instance Get_charlie : Notation.Dot "charlie" := {
    Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
  }.
  Global Instance Get_django : Notation.Dot "django" := {
    Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
  }.
  Global Instance Get_eve : Notation.Dot "eve" := {
    Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
  }.
  Global Instance Get_frank : Notation.Dot "frank" := {
    Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
  }.
End DefaultAccounts.
Definition DefaultAccounts : Set := DefaultAccounts.t.

Definition recorded_events
    `{H : State.Trait}
    (_ : unit)
    : M (H := H) OpaqueDef :=
  ink_env.engine.OnInstance.on_instance
    (fun instance =>
      let* α0 := instance.["engine"].["get_emitted_events"] in
      α0.["map"] (fun evt => evt.["into"])).

Error OpaqueTy.

Definition assert_contract_termination
    `{H : State.Trait}
    {T F : Set}
    `{ink_env.types.Environment.Trait T}
    `{core.ops.function.FnMut.Trait unit F}
    `{core.panic.unwind_safe.UnwindSafe.Trait F}
    `{core.fmt.Debug.Trait ink_env.types.Environment.AccountId}
    `{core.fmt.Debug.Trait ink_env.types.Environment.Balance}
    (should_terminate : F)
    (expected_beneficiary : ImplT.AccountId)
    (expected_value_transferred_to_beneficiary : ImplT.Balance)
    : M (H := H) unit :=
  let* value_any :=
    let* α0 := std.panic.catch_unwind should_terminate in
    α0.["expect_err"] "contract did not terminate" in
  let* encoded_input :=
    let* α0 := value_any.["downcast_ref"] in
    α0.["expect"] "panic object can not be cast" in
  let* '(value_transferred, encoded_beneficiary) :=
    let* α0 :=
      parity_scale_codec.codec.Decode.decode
        (addr_of (addr_of encoded_input[RangeFull {|  |}])) in
    α0.["unwrap_or_else"]
      (fun err =>
        let* α0 := format_argument::["new_display"] (addr_of err) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "input can not be decoded: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1) in
  let* beneficiary :=
    let* α0 :=
      parity_scale_codec.codec.Decode.decode
        (addr_of (addr_of encoded_beneficiary[RangeFull {|  |}])) in
    α0.["unwrap_or_else"]
      (fun err =>
        let* α0 := format_argument::["new_display"] (addr_of err) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "input can not be decoded: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1) in
  let* _ :=
    match
      (addr_of value_transferred,
        addr_of expected_value_transferred_to_beneficiary)
    with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* _ :=
    match (addr_of beneficiary, addr_of expected_beneficiary) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            core.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  Pure tt.

Module types.
  Module
    Impl_core_convert_From_for_ink_env_engine_off_chain_test_api_EmittedEvent.
    Definition Self := ink_env.engine.off_chain.test_api.EmittedEvent.
    
    Definition from
        `{H : State.Trait}
        (evt : ink_engine.test_api.EmittedEvent)
        : M (H := H) Self :=
      Pure
        {|
          ink_env.engine.off_chain.test_api.EmittedEvent.topics :=
            evt.["topics"];
          ink_env.engine.off_chain.test_api.EmittedEvent.data := evt.["data"];
        |}.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait
          Self
          (T := ink_engine.test_api.EmittedEvent) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_engine_off_chain_test_api_EmittedEvent.
  
  Module Impl_core_convert_From_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Definition from
        `{H : State.Trait}
        (err : ink_engine.Error)
        : M (H := H) Self :=
      let* e :=
        match err with
        | ink_engine.Error.Account acc =>
          let* α0 := acc.["into"] in
          Pure (ink_env.engine.off_chain.OffChainError.Account α0)
        | ink_engine.Error.UninitializedBlocks =>
          Pure ink_env.engine.off_chain.OffChainError.UninitializedBlocks
        | ink_engine.Error.UninitializedExecutionContext =>
          Pure
            ink_env.engine.off_chain.OffChainError.UninitializedExecutionContext
        | ink_engine.Error.UnregisteredChainExtension =>
          Pure ink_env.engine.off_chain.OffChainError.UnregisteredChainExtension
        end in
      Pure (ink_env.error.Error.OffChain e).
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := ink_engine.Error) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_error_Error.
  
  Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Definition from
        `{H : State.Trait}
        (err : ink_engine.types.AccountError)
        : M (H := H) Self :=
      match err with
      | ink_engine.types.AccountError.Decoding e =>
        Pure (ink_env.engine.off_chain.AccountError.Decoding e)
      | ink_engine.types.AccountError.UnexpectedUserAccount =>
        Pure ink_env.engine.off_chain.AccountError.UnexpectedUserAccount
      | ink_engine.types.AccountError.NoAccountForId acc =>
        Pure (ink_env.engine.off_chain.AccountError.NoAccountForId acc)
      end.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
  
  Module Impl_core_convert_From_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Definition from
        `{H : State.Trait}
        (account_error : ink_engine.types.AccountError)
        : M (H := H) Self :=
      let* α0 := account_error.["into"] in
      Pure
        (ink_env.error.Error.OffChain
          (ink_env.engine.off_chain.OffChainError.Account α0)).
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_error_Error.
End types.

Module
  Impl_core_convert_From_for_ink_env_engine_off_chain_test_api_EmittedEvent.
  Definition Self := ink_env.engine.off_chain.test_api.EmittedEvent.
  
  Definition from
      `{H : State.Trait}
      (evt : ink_engine.test_api.EmittedEvent)
      : M (H := H) Self :=
    Pure
      {|
        ink_env.engine.off_chain.test_api.EmittedEvent.topics := evt.["topics"];
        ink_env.engine.off_chain.test_api.EmittedEvent.data := evt.["data"];
      |}.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := ink_engine.test_api.EmittedEvent) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_engine_off_chain_test_api_EmittedEvent.

Module Impl_core_convert_From_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Definition from
      `{H : State.Trait}
      (err : ink_engine.Error)
      : M (H := H) Self :=
    let* e :=
      match err with
      | ink_engine.Error.Account acc =>
        let* α0 := acc.["into"] in
        Pure (ink_env.engine.off_chain.OffChainError.Account α0)
      | ink_engine.Error.UninitializedBlocks =>
        Pure ink_env.engine.off_chain.OffChainError.UninitializedBlocks
      | ink_engine.Error.UninitializedExecutionContext =>
        Pure
          ink_env.engine.off_chain.OffChainError.UninitializedExecutionContext
      | ink_engine.Error.UnregisteredChainExtension =>
        Pure ink_env.engine.off_chain.OffChainError.UnregisteredChainExtension
      end in
    Pure (ink_env.error.Error.OffChain e).
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := ink_engine.Error) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_error_Error.

Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Definition from
      `{H : State.Trait}
      (err : ink_engine.types.AccountError)
      : M (H := H) Self :=
    match err with
    | ink_engine.types.AccountError.Decoding e =>
      Pure (ink_env.engine.off_chain.AccountError.Decoding e)
    | ink_engine.types.AccountError.UnexpectedUserAccount =>
      Pure ink_env.engine.off_chain.AccountError.UnexpectedUserAccount
    | ink_engine.types.AccountError.NoAccountForId acc =>
      Pure (ink_env.engine.off_chain.AccountError.NoAccountForId acc)
    end.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_convert_From_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Definition from
      `{H : State.Trait}
      (account_error : ink_engine.types.AccountError)
      : M (H := H) Self :=
    let* α0 := account_error.["into"] in
    Pure
      (ink_env.error.Error.OffChain
        (ink_env.engine.off_chain.OffChainError.Account α0)).
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_error_Error.

Module EnvInstance.
  Record t : Set := {
    engine : ink_engine.ext.Engine;
  }.
  
  Global Instance Get_engine : Notation.Dot "engine" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End EnvInstance.
Definition EnvInstance : Set := EnvInstance.t.

Module Impl_ink_env_engine_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
  Definition Self := ink_env.engine.off_chain.EnvInstance.
  
  Definition on_instance `{H : State.Trait} (f : F) : M (H := H) R :=
    ink_env.engine.off_chain.on_instance.INSTANCE.["with"]
      (fun instance =>
        let* α0 := instance.["borrow_mut"] in
        f (addr_of α0)).
  
  Global Instance AssociatedFunction_on_instance `{H : State.Trait} :
    Notation.DoubleColon Self "on_instance" := {
    Notation.double_colon := on_instance;
  }.
  
  Global Instance I : ink_env.engine.OnInstance.Trait Self := {
    ink_env.engine.OnInstance.on_instance `{H : State.Trait} := on_instance;
  }.
End Impl_ink_env_engine_OnInstance_for_ink_env_engine_off_chain_EnvInstance.

Definition
    INSTANCE
    `{H : State.Trait} :
    std.thread.local.LocalKey
      (core.cell.RefCell ink_env.engine.off_chain.EnvInstance) :=
  run
    (std.thread.local.LocalKey::["new"]
      ink_env.engine.off_chain.on_instance.INSTANCE.__getit).

Definition __init
    `{H : State.Trait}
    (_ : unit)
    : M (H := H) (core.cell.RefCell ink_env.engine.off_chain.EnvInstance) :=
  let* α0 := ink_engine.ext.Engine::["new"] tt in
  core.cell.RefCell::["new"]
    {| ink_env.engine.off_chain.EnvInstance.engine := α0; |}.

Definition __getit
    `{H : State.Trait}
    (init
      :
      core.option.Option
        (mut_ref
          (core.option.Option
            (core.cell.RefCell ink_env.engine.off_chain.EnvInstance))))
    :
      M (H := H)
        (core.option.Option
          (ref (core.cell.RefCell ink_env.engine.off_chain.EnvInstance))) :=
  ink_env.engine.off_chain.on_instance.INSTANCE.__getit.__KEY.["get"]
    (fun  =>
      let* _ :=
        let* α0 := let_if core.option.Option.Some init := init in
        if (α0 : bool) then
          let* α0 := init.["take"] in
          let* α1 := let_if core.option.Option.Some value := α0 in
          if (α1 : bool) then
            let* _ := Return value in
            Pure tt
          else
            if (true : bool) then
              let* _ :=
                let* α0 :=
                  format_arguments::["new_v1"]
                    (addr_of
                      [
                        "internal error: entered unreachable code: missing default value"
                      ])
                    (addr_of [ ]) in
                core.panicking.panic_fmt α0 in
              Pure tt
            else
              Pure tt
        else
          Pure tt in
      ink_env.engine.off_chain.on_instance.INSTANCE.__init tt).

Definition
    __KEY
    `{H : State.Trait} :
    std.sys.common.thread_local.fast_local.Key
      (core.cell.RefCell ink_env.engine.off_chain.EnvInstance) :=
  run
    ((std.sys.common.thread_local.fast_local.Key
          (core.cell.RefCell ink_env.engine.off_chain.EnvInstance))::["new"]
      tt).

Module OffChainError.
  Inductive t : Set :=
  | Account (_ : ink_env.engine.off_chain.AccountError)
  | UninitializedBlocks
  | UninitializedExecutionContext
  | UnregisteredChainExtension.
End OffChainError.
Definition OffChainError := OffChainError.t.

Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    match self with
    | ink_env.engine.off_chain.OffChainError.Account __self_0 =>
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "Account"
        (addr_of __self_0)
    | ink_env.engine.off_chain.OffChainError.UninitializedBlocks =>
      core.fmt.Formatter::["write_str"] f "UninitializedBlocks"
    | ink_env.engine.off_chain.OffChainError.UninitializedExecutionContext =>
      core.fmt.Formatter::["write_str"] f "UninitializedExecutionContext"
    | ink_env.engine.off_chain.OffChainError.UnregisteredChainExtension =>
      core.fmt.Formatter::["write_str"] f "UnregisteredChainExtension"
    end.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.

Module Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Definition from
      `{H : State.Trait}
      (original : ink_env.engine.off_chain.AccountError)
      : M (H := H) ink_env.engine.off_chain.OffChainError :=
    Pure (ink_env.engine.off_chain.OffChainError.Account original).
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait
        Self
        (T := ink_env.engine.off_chain.AccountError) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.

Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.engine.off_chain.OffChainError)
      : M (H := H) bool :=
    let* __self_tag := core.intrinsics.discriminant_value self in
    let* __arg1_tag := core.intrinsics.discriminant_value other in
    let* α0 := __self_tag.["eq"] __arg1_tag in
    let* α1 :=
      match (self, other) with
      |
          (ink_env.engine.off_chain.OffChainError.Account __self_0,
            ink_env.engine.off_chain.OffChainError.Account __arg1_0)
          =>
        let* α0 := __self_0.["deref"] in
        let* α1 := __arg1_0.["deref"] in
        α0.["eq"] α1
      | _ => Pure true
      end in
    α0.["andb"] α1.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.

Module Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.

Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    let _ := tt in
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.

Module AccountError.
  Inductive t : Set :=
  | Decoding (_ : parity_scale_codec.error.Error)
  | UnexpectedUserAccount
  | NoAccountForId (_ : alloc.vec.Vec u8).
End AccountError.
Definition AccountError := AccountError.t.

Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    match self with
    | ink_env.engine.off_chain.AccountError.Decoding __self_0 =>
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "Decoding"
        (addr_of __self_0)
    | ink_env.engine.off_chain.AccountError.UnexpectedUserAccount =>
      core.fmt.Formatter::["write_str"] f "UnexpectedUserAccount"
    | ink_env.engine.off_chain.AccountError.NoAccountForId __self_0 =>
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "NoAccountForId"
        (addr_of __self_0)
    end.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Definition from
      `{H : State.Trait}
      (original : parity_scale_codec.error.Error)
      : M (H := H) ink_env.engine.off_chain.AccountError :=
    Pure (ink_env.engine.off_chain.AccountError.Decoding original).
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.engine.off_chain.AccountError)
      : M (H := H) bool :=
    let* __self_tag := core.intrinsics.discriminant_value self in
    let* __arg1_tag := core.intrinsics.discriminant_value other in
    let* α0 := __self_tag.["eq"] __arg1_tag in
    let* α1 :=
      match (self, other) with
      |
          (ink_env.engine.off_chain.AccountError.Decoding __self_0,
            ink_env.engine.off_chain.AccountError.Decoding __arg1_0)
          =>
        let* α0 := __self_0.["deref"] in
        let* α1 := __arg1_0.["deref"] in
        α0.["eq"] α1
      |
          (ink_env.engine.off_chain.AccountError.NoAccountForId __self_0,
            ink_env.engine.off_chain.AccountError.NoAccountForId __arg1_0)
          =>
        let* α0 := __self_0.["deref"] in
        let* α1 := __arg1_0.["deref"] in
        α0.["eq"] α1
      | _ => Pure true
      end in
    α0.["andb"] α1.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    let _ := tt in
    let _ := tt in
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition decode_instantiate_result
    `{H : State.Trait}
    {I E ContractRef R : Set}
    `{parity_scale_codec.codec.Input.Trait I}
    `{ink_env.types.Environment.Trait E}
    `{ink_env.call.create_builder.FromAccountId.Trait E ContractRef}
    `{ink_env.call.create_builder.ConstructorReturnType.Trait ContractRef R}
    (instantiate_result : ink_env.error.Result unit)
    (out_address : mut_ref I)
    (out_return_value : mut_ref I)
    :
      M (H := H)
        (ink_env.error.Result
          (ink_primitives.ConstructorResult
            ink_env.call.create_builder.ConstructorReturnType.Output)) :=
  match instantiate_result with
  | core.result.Result.Ok () =>
    let* account_id :=
      let* α0 := parity_scale_codec.codec.Decode.decode out_address in
      let* α1 := LangItem α0 in
      match α1 with
      | Break {| Break.0 := residual; |} =>
        let* α0 := LangItem residual in
        Return α0
      | Continue {| Continue.0 := val; |} => Pure val
      end in
    let* contract_ref :=
      ink_env.call.create_builder.FromAccountId.from_account_id account_id in
    let* output :=
      ink_env.call.create_builder.ConstructorReturnType.ok contract_ref in
    Pure (core.result.Result.Ok (core.result.Result.Ok output))
  | core.result.Result.Err ink_env.error.Error.CalleeReverted =>
    ink_env.engine.decode_instantiate_err out_return_value
  | core.result.Result.Err actual_error =>
    Pure (core.result.Result.Err actual_error)
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition decode_instantiate_err
    `{H : State.Trait}
    {I E ContractRef R : Set}
    `{parity_scale_codec.codec.Input.Trait I}
    `{ink_env.types.Environment.Trait E}
    `{ink_env.call.create_builder.FromAccountId.Trait E ContractRef}
    `{ink_env.call.create_builder.ConstructorReturnType.Trait ContractRef R}
    (out_return_value : mut_ref I)
    :
      M (H := H)
        (ink_env.error.Result
          (ink_primitives.ConstructorResult
            ink_env.call.create_builder.ConstructorReturnType.Output)) :=
  let* constructor_result_variant :=
    let* α0 := out_return_value.["read_byte"] in
    let* α1 := LangItem α0 in
    match α1 with
    | Break {| Break.0 := residual; |} =>
      let* α0 := LangItem residual in
      Return α0
    | Continue {| Continue.0 := val; |} => Pure val
    end in
  match constructor_result_variant with
  | 0 =>
    if (ink_env.call.create_builder.ConstructorReturnType.IS_RESULT : bool) then
      let* result_variant :=
        let* α0 := out_return_value.["read_byte"] in
        let* α1 := LangItem α0 in
        match α1 with
        | Break {| Break.0 := residual; |} =>
          let* α0 := LangItem residual in
          Return α0
        | Continue {| Continue.0 := val; |} => Pure val
        end in
      match result_variant with
      | 0 =>
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of
              [
                "The callee reverted, but did not encode an error in the output buffer."
              ]) in
        core.panicking.panic_fmt α0
      | 1 =>
        let* contract_err :=
          let* α0 := parity_scale_codec.codec.Decode.decode out_return_value in
          let* α1 := LangItem α0 in
          match α1 with
          | Break {| Break.0 := residual; |} =>
            let* α0 := LangItem residual in
            Return α0
          | Continue {| Continue.0 := val; |} => Pure val
          end in
        let* err :=
          let* α0 :=
            ink_env.call.create_builder.ConstructorReturnType.err
              contract_err in
          α0.["unwrap_or_else"]
            (fun  =>
              let* α0 :=
                format_arguments::["new_const"]
                  (addr_of
                    [
                      "Expected an error instance for return type where IS_RESULT == true"
                    ]) in
              core.panicking.panic_fmt α0) in
        Pure (core.result.Result.Ok (core.result.Result.Ok err))
      | _ =>
        let* α0 :=
          "Invalid inner constructor Result encoding, expected 0 or 1 as the first byte".["into"] in
        Pure (core.result.Result.Err (ink_env.error.Error.Decode α0))
      end
    else
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of
            [
              "The callee reverted, but did not encode an error in the output buffer."
            ]) in
      core.panicking.panic_fmt α0
  | 1 =>
    let* lang_err :=
      let* α0 := parity_scale_codec.codec.Decode.decode out_return_value in
      let* α1 := LangItem α0 in
      match α1 with
      | Break {| Break.0 := residual; |} =>
        let* α0 := LangItem residual in
        Return α0
      | Continue {| Continue.0 := val; |} => Pure val
      end in
    Pure (core.result.Result.Ok (core.result.Result.Err lang_err))
  | _ =>
    let* α0 :=
      "Invalid outer constructor Result encoding, expected 0 or 1 as the first byte".["into"] in
    Pure (core.result.Result.Err (ink_env.error.Error.Decode α0))
  end.

Module error.
  Module Error.
    Inductive t : Set :=
    | Decode (_ : parity_scale_codec.error.Error)
    | OffChain (_ : ink_env.engine.off_chain.OffChainError)
    | CalleeTrapped
    | CalleeReverted
    | KeyNotFound
    | _BelowSubsistenceThreshold
    | TransferFailed
    | _EndowmentTooLow
    | CodeNotFound
    | NotCallable
    | Unknown
    | LoggingDisabled
    | CallRuntimeFailed
    | EcdsaRecoveryFailed.
  End Error.
  Definition Error := Error.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      match self with
      | ink_env.error.Error.Decode __self_0 =>
        core.fmt.Formatter::["debug_tuple_field1_finish"]
          f
          "Decode"
          (addr_of __self_0)
      | ink_env.error.Error.OffChain __self_0 =>
        core.fmt.Formatter::["debug_tuple_field1_finish"]
          f
          "OffChain"
          (addr_of __self_0)
      | ink_env.error.Error.CalleeTrapped =>
        core.fmt.Formatter::["write_str"] f "CalleeTrapped"
      | ink_env.error.Error.CalleeReverted =>
        core.fmt.Formatter::["write_str"] f "CalleeReverted"
      | ink_env.error.Error.KeyNotFound =>
        core.fmt.Formatter::["write_str"] f "KeyNotFound"
      | ink_env.error.Error._BelowSubsistenceThreshold =>
        core.fmt.Formatter::["write_str"] f "_BelowSubsistenceThreshold"
      | ink_env.error.Error.TransferFailed =>
        core.fmt.Formatter::["write_str"] f "TransferFailed"
      | ink_env.error.Error._EndowmentTooLow =>
        core.fmt.Formatter::["write_str"] f "_EndowmentTooLow"
      | ink_env.error.Error.CodeNotFound =>
        core.fmt.Formatter::["write_str"] f "CodeNotFound"
      | ink_env.error.Error.NotCallable =>
        core.fmt.Formatter::["write_str"] f "NotCallable"
      | ink_env.error.Error.Unknown =>
        core.fmt.Formatter::["write_str"] f "Unknown"
      | ink_env.error.Error.LoggingDisabled =>
        core.fmt.Formatter::["write_str"] f "LoggingDisabled"
      | ink_env.error.Error.CallRuntimeFailed =>
        core.fmt.Formatter::["write_str"] f "CallRuntimeFailed"
      | ink_env.error.Error.EcdsaRecoveryFailed =>
        core.fmt.Formatter::["write_str"] f "EcdsaRecoveryFailed"
      end.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_error_Error.
  
  Module Impl_core_convert_From_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Definition from
        `{H : State.Trait}
        (original : parity_scale_codec.error.Error)
        : M (H := H) ink_env.error.Error :=
      Pure (ink_env.error.Error.Decode original).
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_error_Error.
  
  Module Impl_core_convert_From_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Definition from
        `{H : State.Trait}
        (original : ink_env.engine.off_chain.OffChainError)
        : M (H := H) ink_env.error.Error :=
      Pure (ink_env.error.Error.OffChain original).
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait
          Self
          (T := ink_env.engine.off_chain.OffChainError) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_env_error_Error.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_error_Error.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.error.Error)
        : M (H := H) bool :=
      let* __self_tag := core.intrinsics.discriminant_value self in
      let* __arg1_tag := core.intrinsics.discriminant_value other in
      let* α0 := __self_tag.["eq"] __arg1_tag in
      let* α1 :=
        match (self, other) with
        |
            (ink_env.error.Error.Decode __self_0,
              ink_env.error.Error.Decode __arg1_0)
            =>
          let* α0 := __self_0.["deref"] in
          let* α1 := __arg1_0.["deref"] in
          α0.["eq"] α1
        |
            (ink_env.error.Error.OffChain __self_0,
              ink_env.error.Error.OffChain __arg1_0)
            =>
          let* α0 := __self_0.["deref"] in
          let* α1 := __arg1_0.["deref"] in
          α0.["eq"] α1
        | _ => Pure true
        end in
      α0.["andb"] α1.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_error_Error.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_error_Error.
  
  Module Impl_core_cmp_Eq_for_ink_env_error_Error.
    Definition Self := ink_env.error.Error.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      let _ := tt in
      let _ := tt in
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_error_Error.
  
  Definition Result : Set := core.result.Result T ink_env.error.Error.
End error.

Module Error.
  Inductive t : Set :=
  | Decode (_ : parity_scale_codec.error.Error)
  | OffChain (_ : ink_env.engine.off_chain.OffChainError)
  | CalleeTrapped
  | CalleeReverted
  | KeyNotFound
  | _BelowSubsistenceThreshold
  | TransferFailed
  | _EndowmentTooLow
  | CodeNotFound
  | NotCallable
  | Unknown
  | LoggingDisabled
  | CallRuntimeFailed
  | EcdsaRecoveryFailed.
End Error.
Definition Error := Error.t.

Module Impl_core_fmt_Debug_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    match self with
    | ink_env.error.Error.Decode __self_0 =>
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "Decode"
        (addr_of __self_0)
    | ink_env.error.Error.OffChain __self_0 =>
      core.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "OffChain"
        (addr_of __self_0)
    | ink_env.error.Error.CalleeTrapped =>
      core.fmt.Formatter::["write_str"] f "CalleeTrapped"
    | ink_env.error.Error.CalleeReverted =>
      core.fmt.Formatter::["write_str"] f "CalleeReverted"
    | ink_env.error.Error.KeyNotFound =>
      core.fmt.Formatter::["write_str"] f "KeyNotFound"
    | ink_env.error.Error._BelowSubsistenceThreshold =>
      core.fmt.Formatter::["write_str"] f "_BelowSubsistenceThreshold"
    | ink_env.error.Error.TransferFailed =>
      core.fmt.Formatter::["write_str"] f "TransferFailed"
    | ink_env.error.Error._EndowmentTooLow =>
      core.fmt.Formatter::["write_str"] f "_EndowmentTooLow"
    | ink_env.error.Error.CodeNotFound =>
      core.fmt.Formatter::["write_str"] f "CodeNotFound"
    | ink_env.error.Error.NotCallable =>
      core.fmt.Formatter::["write_str"] f "NotCallable"
    | ink_env.error.Error.Unknown =>
      core.fmt.Formatter::["write_str"] f "Unknown"
    | ink_env.error.Error.LoggingDisabled =>
      core.fmt.Formatter::["write_str"] f "LoggingDisabled"
    | ink_env.error.Error.CallRuntimeFailed =>
      core.fmt.Formatter::["write_str"] f "CallRuntimeFailed"
    | ink_env.error.Error.EcdsaRecoveryFailed =>
      core.fmt.Formatter::["write_str"] f "EcdsaRecoveryFailed"
    end.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_error_Error.

Module Impl_core_convert_From_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Definition from
      `{H : State.Trait}
      (original : parity_scale_codec.error.Error)
      : M (H := H) ink_env.error.Error :=
    Pure (ink_env.error.Error.Decode original).
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_error_Error.

Module Impl_core_convert_From_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Definition from
      `{H : State.Trait}
      (original : ink_env.engine.off_chain.OffChainError)
      : M (H := H) ink_env.error.Error :=
    Pure (ink_env.error.Error.OffChain original).
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait
        Self
        (T := ink_env.engine.off_chain.OffChainError) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_env_error_Error.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_env_error_Error.

Module Impl_core_cmp_PartialEq_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.error.Error)
      : M (H := H) bool :=
    let* __self_tag := core.intrinsics.discriminant_value self in
    let* __arg1_tag := core.intrinsics.discriminant_value other in
    let* α0 := __self_tag.["eq"] __arg1_tag in
    let* α1 :=
      match (self, other) with
      |
          (ink_env.error.Error.Decode __self_0,
            ink_env.error.Error.Decode __arg1_0)
          =>
        let* α0 := __self_0.["deref"] in
        let* α1 := __arg1_0.["deref"] in
        α0.["eq"] α1
      |
          (ink_env.error.Error.OffChain __self_0,
            ink_env.error.Error.OffChain __arg1_0)
          =>
        let* α0 := __self_0.["deref"] in
        let* α1 := __arg1_0.["deref"] in
        α0.["eq"] α1
      | _ => Pure true
      end in
    α0.["andb"] α1.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_error_Error.

Module Impl_core_marker_StructuralEq_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_error_Error.

Module Impl_core_cmp_Eq_for_ink_env_error_Error.
  Definition Self := ink_env.error.Error.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    let _ := tt in
    let _ := tt in
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_error_Error.

Definition Result : Set := core.result.Result T ink_env.error.Error.

Module hash.
  Module HashOutput.
    Class Trait
        (Self : Set)
        {Type : Set}
        `{core.default.Default.Trait Type} :
        Set := {
      Type := Type;
    }.
    
    Global Instance Method_Type `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Type" := {
      Notation.double_colon_type := Type;
    }.
  End HashOutput.
  
  Module CryptoHash.
    Class Trait (Self : Set) : Set := {
      hash
        `{H : State.Trait}
        :
        (ref Slice) ->
        (mut_ref ink_env.hash.HashOutput.Type) ->
        (M (H := H) unit);
    }.
    
    Global Instance Method_hash `{H : State.Trait} `(Trait)
      : Notation.Dot "hash" := {
      Notation.dot := hash;
    }.
  End CryptoHash.
  
  Module Sha2x256.
    Inductive t : Set :=
    .
  End Sha2x256.
  Definition Sha2x256 := Sha2x256.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_marker_Copy_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_clone_Clone_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.hash.Sha2x256 :=
      self.["deref"].
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.hash.Sha2x256)
        : M (H := H) bool :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_cmp_Eq_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_hash_Sha2x256.
  
  Module Keccak256.
    Inductive t : Set :=
    .
  End Keccak256.
  Definition Keccak256 := Keccak256.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_hash_Keccak256.
  
  Module Impl_core_marker_Copy_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_hash_Keccak256.
  
  Module Impl_core_clone_Clone_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.hash.Keccak256 :=
      self.["deref"].
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_hash_Keccak256.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Keccak256.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.hash.Keccak256)
        : M (H := H) bool :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_hash_Keccak256.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_hash_Keccak256.
  
  Module Impl_core_cmp_Eq_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_hash_Keccak256.
  
  Module Blake2x256.
    Inductive t : Set :=
    .
  End Blake2x256.
  Definition Blake2x256 := Blake2x256.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_marker_Copy_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_clone_Clone_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.hash.Blake2x256 :=
      self.["deref"].
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.hash.Blake2x256)
        : M (H := H) bool :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_cmp_Eq_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_hash_Blake2x256.
  
  Module Blake2x128.
    Inductive t : Set :=
    .
  End Blake2x128.
  Definition Blake2x128 := Blake2x128.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Definition fmt
        `{H : State.Trait}
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M (H := H) core.fmt.Result :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_marker_Copy_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_clone_Clone_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Definition clone
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) ink_env.hash.Blake2x128 :=
      self.["deref"].
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Definition eq
        `{H : State.Trait}
        (self : ref Self)
        (other : ref ink_env.hash.Blake2x128)
        : M (H := H) bool :=
      core.intrinsics.unreachable tt.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_cmp_Eq_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Definition assert_receiver_is_total_eq
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) unit :=
      Pure tt.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_env_hash_Blake2x128.
  
  Module private.
    Module Sealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Set := {
      }.
      Global Set Primitive Projections.
    End Sealed.
  End private.
  
  Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Global Instance I : ink_env.hash.private.Sealed.Trait Self :=
      ink_env.hash.private.Sealed.Build_Trait _.
  End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Sha2x256.
  
  Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Global Instance I : ink_env.hash.private.Sealed.Trait Self :=
      ink_env.hash.private.Sealed.Build_Trait _.
  End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Keccak256.
  
  Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Global Instance I : ink_env.hash.private.Sealed.Trait Self :=
      ink_env.hash.private.Sealed.Build_Trait _.
  End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x256.
  
  Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Global Instance I : ink_env.hash.private.Sealed.Trait Self :=
      ink_env.hash.private.Sealed.Build_Trait _.
  End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x128.
  
  Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Definition Type : Set := list u8.
    
    Global Instance I : ink_env.hash.HashOutput.Trait Self := {
    }.
  End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Sha2x256.
  
  Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Definition Type : Set := list u8.
    
    Global Instance I : ink_env.hash.HashOutput.Trait Self := {
    }.
  End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Keccak256.
  
  Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Definition Type : Set := list u8.
    
    Global Instance I : ink_env.hash.HashOutput.Trait Self := {
    }.
  End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x256.
  
  Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Definition Type : Set := list u8.
    
    Global Instance I : ink_env.hash.HashOutput.Trait Self := {
    }.
  End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x128.
End hash.

Module HashOutput.
  Class Trait
      (Self : Set)
      {Type : Set}
      `{core.default.Default.Trait Type} :
      Set := {
    Type := Type;
  }.
  
  Global Instance Method_Type `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Type" := {
    Notation.double_colon_type := Type;
  }.
End HashOutput.

Module CryptoHash.
  Class Trait (Self : Set) : Set := {
    hash
      `{H : State.Trait}
      :
      (ref Slice) ->
      (mut_ref ink_env.hash.HashOutput.Type) ->
      (M (H := H) unit);
  }.
  
  Global Instance Method_hash `{H : State.Trait} `(Trait)
    : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
End CryptoHash.

Module Sha2x256.
  Inductive t : Set :=
  .
End Sha2x256.
Definition Sha2x256 := Sha2x256.t.

Module Impl_core_fmt_Debug_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_hash_Sha2x256.

Module Impl_core_marker_Copy_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_hash_Sha2x256.

Module Impl_core_clone_Clone_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.hash.Sha2x256 :=
    self.["deref"].
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_hash_Sha2x256.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Sha2x256.

Module Impl_core_cmp_PartialEq_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.hash.Sha2x256)
      : M (H := H) bool :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_hash_Sha2x256.

Module Impl_core_marker_StructuralEq_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_hash_Sha2x256.

Module Impl_core_cmp_Eq_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_hash_Sha2x256.

Module Keccak256.
  Inductive t : Set :=
  .
End Keccak256.
Definition Keccak256 := Keccak256.t.

Module Impl_core_fmt_Debug_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_hash_Keccak256.

Module Impl_core_marker_Copy_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_hash_Keccak256.

Module Impl_core_clone_Clone_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.hash.Keccak256 :=
    self.["deref"].
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_hash_Keccak256.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Keccak256.

Module Impl_core_cmp_PartialEq_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.hash.Keccak256)
      : M (H := H) bool :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_hash_Keccak256.

Module Impl_core_marker_StructuralEq_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_hash_Keccak256.

Module Impl_core_cmp_Eq_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_hash_Keccak256.

Module Blake2x256.
  Inductive t : Set :=
  .
End Blake2x256.
Definition Blake2x256 := Blake2x256.t.

Module Impl_core_fmt_Debug_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_hash_Blake2x256.

Module Impl_core_marker_Copy_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_hash_Blake2x256.

Module Impl_core_clone_Clone_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.hash.Blake2x256 :=
    self.["deref"].
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_hash_Blake2x256.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x256.

Module Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.hash.Blake2x256)
      : M (H := H) bool :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x256.

Module Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x256.

Module Impl_core_cmp_Eq_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_hash_Blake2x256.

Module Blake2x128.
  Inductive t : Set :=
  .
End Blake2x128.
Definition Blake2x128 := Blake2x128.t.

Module Impl_core_fmt_Debug_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_hash_Blake2x128.

Module Impl_core_marker_Copy_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_env_hash_Blake2x128.

Module Impl_core_clone_Clone_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Definition clone
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) ink_env.hash.Blake2x128 :=
    self.["deref"].
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_env_hash_Blake2x128.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x128.

Module Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Definition eq
      `{H : State.Trait}
      (self : ref Self)
      (other : ref ink_env.hash.Blake2x128)
      : M (H := H) bool :=
    core.intrinsics.unreachable tt.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x128.

Module Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x128.

Module Impl_core_cmp_Eq_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Definition assert_receiver_is_total_eq
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) unit :=
    Pure tt.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_env_hash_Blake2x128.

Module private.
  Module Sealed.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End Sealed.
End private.

Module Sealed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End Sealed.

Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Global Instance I : ink_env.hash.private.Sealed.Trait Self :=
    ink_env.hash.private.Sealed.Build_Trait _.
End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Sha2x256.

Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Global Instance I : ink_env.hash.private.Sealed.Trait Self :=
    ink_env.hash.private.Sealed.Build_Trait _.
End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Keccak256.

Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Global Instance I : ink_env.hash.private.Sealed.Trait Self :=
    ink_env.hash.private.Sealed.Build_Trait _.
End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x256.

Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Global Instance I : ink_env.hash.private.Sealed.Trait Self :=
    ink_env.hash.private.Sealed.Build_Trait _.
End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x128.

Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Definition Type : Set := list u8.
  
  Global Instance I : ink_env.hash.HashOutput.Trait Self := {
  }.
End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Sha2x256.

Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Definition Type : Set := list u8.
  
  Global Instance I : ink_env.hash.HashOutput.Trait Self := {
  }.
End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Keccak256.

Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Definition Type : Set := list u8.
  
  Global Instance I : ink_env.hash.HashOutput.Trait Self := {
  }.
End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x256.

Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Definition Type : Set := list u8.
  
  Global Instance I : ink_env.hash.HashOutput.Trait Self := {
  }.
End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x128.

Module topics.
  Module TopicsBuilderBackend.
    Class Trait (Self : Set) {E : Set} {Output : Set} : Set := {
      Output := Output;
      expect `{H : State.Trait} : (mut_ref Self) -> usize -> (M (H := H) unit);
      push_topic
        `{H : State.Trait}
        :
        (mut_ref Self) -> (ref T) -> (M (H := H) unit);
      output `{H : State.Trait} : Self -> (M (H := H) ImplSelf.Output);
    }.
    
    Global Instance Method_Output `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_expect `{H : State.Trait} `(Trait)
      : Notation.Dot "expect" := {
      Notation.dot := expect;
    }.
    Global Instance Method_push_topic `{H : State.Trait} `(Trait)
      : Notation.Dot "push_topic" := {
      Notation.dot := push_topic;
    }.
    Global Instance Method_output `{H : State.Trait} `(Trait)
      : Notation.Dot "output" := {
      Notation.dot := output;
    }.
  End TopicsBuilderBackend.
  
  Module TopicsBuilder.
    Record t : Set := {
      backend : B;
      state : core.marker.PhantomData (unit -> (S * E));
    }.
    
    Global Instance Get_backend : Notation.Dot "backend" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_state : Notation.Dot "state" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End TopicsBuilder.
  Definition TopicsBuilder : Set := TopicsBuilder.t.
  
  Module
    Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
  Section
    Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
    Context {E B : Set}.
    
    Definition
      Self
      :=
      ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B.
    
    Definition from `{H : State.Trait} (backend : B) : M (H := H) Self :=
      let* α0 := core.default.Default.default tt in
      Pure {| Self.backend := backend; Self.state := α0; |}.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I : core.convert.From.Trait Self (T := B) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End
    Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
  End
    Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
  
  Module state.
    Module Uninit.
      Inductive t : Set :=
      .
    End Uninit.
    Definition Uninit := Uninit.t.
    
    Module HasRemainingTopics.
      Inductive t : Set :=
      .
    End HasRemainingTopics.
    Definition HasRemainingTopics := HasRemainingTopics.t.
    
    Module NoRemainingTopics.
      Inductive t : Set :=
      .
    End NoRemainingTopics.
    Definition NoRemainingTopics := NoRemainingTopics.t.
  End state.
  
  Module Impl_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
    Definition
      Self
      :=
      ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B.
    
    Definition build
        `{H : State.Trait}
        (self : Self)
        :
          M (H := H)
            (ink_env.topics.TopicsBuilder
              ink_env.topics.Topics.RemainingTopics
              E
              B) :=
      let* _ :=
        self.["backend"].["expect"] ink_env.topics.EventTopicsAmount.AMOUNT in
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.topics.TopicsBuilder.backend := self.["backend"];
          ink_env.topics.TopicsBuilder.state := α0;
        |}.
    
    Global Instance Method_build `{H : State.Trait} : Notation.Dot "build" := {
      Notation.dot := build;
    }.
  End Impl_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
  
  Module Impl_ink_env_topics_TopicsBuilder_S_E_B.
    Definition Self := ink_env.topics.TopicsBuilder S E B.
    
    Definition push_topic
        `{H : State.Trait}
        (self : Self)
        (value : ref T)
        :
          M (H := H)
            (ink_env.topics.TopicsBuilder
              ink_env.topics.SomeRemainingTopics.Next
              E
              B) :=
      let* _ := self.["backend"].["push_topic"] value in
      let* α0 := core.default.Default.default tt in
      Pure
        {|
          ink_env.topics.TopicsBuilder.backend := self.["backend"];
          ink_env.topics.TopicsBuilder.state := α0;
        |}.
    
    Global Instance Method_push_topic `{H : State.Trait} :
      Notation.Dot "push_topic" := {
      Notation.dot := push_topic;
    }.
  End Impl_ink_env_topics_TopicsBuilder_S_E_B.
  
  Module
    Impl_ink_env_topics_TopicsBuilder_ink_env_topics_state_NoRemainingTopics_E_B.
    Definition
      Self
      :=
      ink_env.topics.TopicsBuilder ink_env.topics.state.NoRemainingTopics E B.
    
    Definition finish
        `{H : State.Trait}
        (self : Self)
        : M (H := H) ink_env.topics.TopicsBuilderBackend.Output :=
      self.["backend"].["output"].
    
    Global Instance Method_finish `{H : State.Trait} :
      Notation.Dot "finish" := {
      Notation.dot := finish;
    }.
  End
    Impl_ink_env_topics_TopicsBuilder_ink_env_topics_state_NoRemainingTopics_E_B.
  
  Module SomeRemainingTopics.
    Class Trait (Self : Set) {Next : Set} : Set := {
      Next := Next;
    }.
    
    Global Instance Method_Next `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "Next" := {
      Notation.double_colon_type := Next;
    }.
  End SomeRemainingTopics.
  
  Module EventTopicsAmount.
    Class Trait (Self : Set) : Set := {
      AMOUNT `{H : State.Trait} : usize;
    }.
    
    Global Instance Method_AMOUNT `{H : State.Trait} `(Trait)
      : Notation.Dot "AMOUNT" := {
      Notation.dot := AMOUNT;
    }.
  End EventTopicsAmount.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 2.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 3.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 4.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 5.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 6.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 7.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 8.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 9.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 10.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 11.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 12.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 13.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 14.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 15.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 16.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 17.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 18.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 19.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 20.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 21.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 22.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 23.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 24.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 25.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 26.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 27.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 28.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 29.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 30.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 31.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 32.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := ink_env.topics.state.NoRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    }.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT := Pure 1.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_ink_env_topics_state_NoRemainingTopics.
    Definition Self := ink_env.topics.state.NoRemainingTopics.
    
    Definition AMOUNT := Pure 0.
    
    Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
    }.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_ink_env_topics_state_NoRemainingTopics.
  
  Module Topics.
    Class Trait
        (Self : Set)
        {RemainingTopics : Set}
        `{ink_env.topics.EventTopicsAmount.Trait RemainingTopics} :
        Set := {
      RemainingTopics := RemainingTopics;
      topics
        `{H : State.Trait}
        :
        (ref Self) ->
        (ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B) ->
        (M (H := H) ink_env.topics.TopicsBuilderBackend.Output);
    }.
    
    Global Instance Method_RemainingTopics `{H : State.Trait} `(Trait)
      : Notation.DoubleColonType Self "RemainingTopics" := {
      Notation.double_colon_type := RemainingTopics;
    }.
    Global Instance Method_topics `{H : State.Trait} `(Trait)
      : Notation.Dot "topics" := {
      Notation.dot := topics;
    }.
  End Topics.
  
  Module PrefixedValue.
    Record t : Set := {
      prefix : ref Slice;
      value : ref T;
    }.
    
    Global Instance Get_prefix : Notation.Dot "prefix" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End PrefixedValue.
  Definition PrefixedValue : Set := PrefixedValue.t.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
    Context {X : Set}.
    
    Definition Self := ink_env.topics.PrefixedValue X.
    
    Definition size_hint
        `{H : State.Trait}
        (self : ref Self)
        : M (H := H) usize :=
      let* α0 := self.["prefix"].["size_hint"] in
      let* α1 := self.["value"].["size_hint"] in
      α0.["add"] α1.
    
    Global Instance Method_size_hint `{H : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Definition encode_to
        `{H : State.Trait}
        (self : ref Self)
        (dest : mut_ref T)
        : M (H := H) unit :=
      let* _ := self.["prefix"].["encode_to"] dest in
      let* _ := self.["value"].["encode_to"] dest in
      Pure tt.
    
    Global Instance Method_encode_to `{H : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
  End Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
End topics.

Module TopicsBuilderBackend.
  Class Trait (Self : Set) {E : Set} {Output : Set} : Set := {
    Output := Output;
    expect `{H : State.Trait} : (mut_ref Self) -> usize -> (M (H := H) unit);
    push_topic
      `{H : State.Trait}
      :
      (mut_ref Self) -> (ref T) -> (M (H := H) unit);
    output `{H : State.Trait} : Self -> (M (H := H) ImplSelf.Output);
  }.
  
  Global Instance Method_Output `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_expect `{H : State.Trait} `(Trait)
    : Notation.Dot "expect" := {
    Notation.dot := expect;
  }.
  Global Instance Method_push_topic `{H : State.Trait} `(Trait)
    : Notation.Dot "push_topic" := {
    Notation.dot := push_topic;
  }.
  Global Instance Method_output `{H : State.Trait} `(Trait)
    : Notation.Dot "output" := {
    Notation.dot := output;
  }.
End TopicsBuilderBackend.

Module TopicsBuilder.
  Record t : Set := {
    backend : B;
    state : core.marker.PhantomData (unit -> (S * E));
  }.
  
  Global Instance Get_backend : Notation.Dot "backend" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_state : Notation.Dot "state" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End TopicsBuilder.
Definition TopicsBuilder : Set := TopicsBuilder.t.

Module
  Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
Section
  Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
  Context {E B : Set}.
  
  Definition
    Self
    :=
    ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B.
  
  Definition from `{H : State.Trait} (backend : B) : M (H := H) Self :=
    let* α0 := core.default.Default.default tt in
    Pure {| Self.backend := backend; Self.state := α0; |}.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := B) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End
  Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
End
  Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.

Module state.
  Module Uninit.
    Inductive t : Set :=
    .
  End Uninit.
  Definition Uninit := Uninit.t.
  
  Module HasRemainingTopics.
    Inductive t : Set :=
    .
  End HasRemainingTopics.
  Definition HasRemainingTopics := HasRemainingTopics.t.
  
  Module NoRemainingTopics.
    Inductive t : Set :=
    .
  End NoRemainingTopics.
  Definition NoRemainingTopics := NoRemainingTopics.t.
End state.

Module Uninit.
  Inductive t : Set :=
  .
End Uninit.
Definition Uninit := Uninit.t.

Module HasRemainingTopics.
  Inductive t : Set :=
  .
End HasRemainingTopics.
Definition HasRemainingTopics := HasRemainingTopics.t.

Module NoRemainingTopics.
  Inductive t : Set :=
  .
End NoRemainingTopics.
Definition NoRemainingTopics := NoRemainingTopics.t.

Module Impl_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B_2.
  Definition
    Self
    :=
    ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B.
  
  Definition build
      `{H : State.Trait}
      (self : Self)
      :
        M (H := H)
          (ink_env.topics.TopicsBuilder
            ink_env.topics.Topics.RemainingTopics
            E
            B) :=
    let* _ :=
      self.["backend"].["expect"] ink_env.topics.EventTopicsAmount.AMOUNT in
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.topics.TopicsBuilder.backend := self.["backend"];
        ink_env.topics.TopicsBuilder.state := α0;
      |}.
  
  Global Instance Method_build `{H : State.Trait} : Notation.Dot "build" := {
    Notation.dot := build;
  }.
End Impl_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B_2.

Module Impl_ink_env_topics_TopicsBuilder_S_E_B_2.
  Definition Self := ink_env.topics.TopicsBuilder S E B.
  
  Definition push_topic
      `{H : State.Trait}
      (self : Self)
      (value : ref T)
      :
        M (H := H)
          (ink_env.topics.TopicsBuilder
            ink_env.topics.SomeRemainingTopics.Next
            E
            B) :=
    let* _ := self.["backend"].["push_topic"] value in
    let* α0 := core.default.Default.default tt in
    Pure
      {|
        ink_env.topics.TopicsBuilder.backend := self.["backend"];
        ink_env.topics.TopicsBuilder.state := α0;
      |}.
  
  Global Instance Method_push_topic `{H : State.Trait} :
    Notation.Dot "push_topic" := {
    Notation.dot := push_topic;
  }.
End Impl_ink_env_topics_TopicsBuilder_S_E_B_2.

Module
  Impl_ink_env_topics_TopicsBuilder_ink_env_topics_state_NoRemainingTopics_E_B_2.
  Definition
    Self
    :=
    ink_env.topics.TopicsBuilder ink_env.topics.state.NoRemainingTopics E B.
  
  Definition finish
      `{H : State.Trait}
      (self : Self)
      : M (H := H) ink_env.topics.TopicsBuilderBackend.Output :=
    self.["backend"].["output"].
  
  Global Instance Method_finish `{H : State.Trait} : Notation.Dot "finish" := {
    Notation.dot := finish;
  }.
End
  Impl_ink_env_topics_TopicsBuilder_ink_env_topics_state_NoRemainingTopics_E_B_2.

Module SomeRemainingTopics.
  Class Trait (Self : Set) {Next : Set} : Set := {
    Next := Next;
  }.
  
  Global Instance Method_Next `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "Next" := {
    Notation.double_colon_type := Next;
  }.
End SomeRemainingTopics.

Module EventTopicsAmount.
  Class Trait (Self : Set) : Set := {
    AMOUNT `{H : State.Trait} : usize;
  }.
  
  Global Instance Method_AMOUNT `{H : State.Trait} `(Trait)
    : Notation.Dot "AMOUNT" := {
    Notation.dot := AMOUNT;
  }.
End EventTopicsAmount.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 2.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 3.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 4.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 5.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 6.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 7.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 8.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 9.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 10.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 11.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 12.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 13.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 14.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 15.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 16.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 17.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 18.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 19.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 20.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 21.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 22.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 23.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 24.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 25.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 26.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 27.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 28.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 29.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 30.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 31.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 32.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := ink_env.topics.state.NoRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
  }.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT := Pure 1.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_ink_env_topics_state_NoRemainingTopics.
  Definition Self := ink_env.topics.state.NoRemainingTopics.
  
  Definition AMOUNT := Pure 0.
  
  Global Instance AssociatedFunction_AMOUNT `{H : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H : State.Trait} := AMOUNT;
  }.
End
  Impl_ink_env_topics_EventTopicsAmount_for_ink_env_topics_state_NoRemainingTopics.

Module Topics.
  Class Trait
      (Self : Set)
      {RemainingTopics : Set}
      `{ink_env.topics.EventTopicsAmount.Trait RemainingTopics} :
      Set := {
    RemainingTopics := RemainingTopics;
    topics
      `{H : State.Trait}
      :
      (ref Self) ->
      (ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B) ->
      (M (H := H) ink_env.topics.TopicsBuilderBackend.Output);
  }.
  
  Global Instance Method_RemainingTopics `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "RemainingTopics" := {
    Notation.double_colon_type := RemainingTopics;
  }.
  Global Instance Method_topics `{H : State.Trait} `(Trait)
    : Notation.Dot "topics" := {
    Notation.dot := topics;
  }.
End Topics.

Module PrefixedValue.
  Record t : Set := {
    prefix : ref Slice;
    value : ref T;
  }.
  
  Global Instance Get_prefix : Notation.Dot "prefix" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End PrefixedValue.
Definition PrefixedValue : Set := PrefixedValue.t.

Module Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
Section Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
  Context {X : Set}.
  
  Definition Self := ink_env.topics.PrefixedValue X.
  
  Definition size_hint
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) usize :=
    let* α0 := self.["prefix"].["size_hint"] in
    let* α1 := self.["value"].["size_hint"] in
    α0.["add"] α1.
  
  Global Instance Method_size_hint `{H : State.Trait} :
    Notation.Dot "size_hint" := {
    Notation.dot := size_hint;
  }.
  
  Definition encode_to
      `{H : State.Trait}
      (self : ref Self)
      (dest : mut_ref T)
      : M (H := H) unit :=
    let* _ := self.["prefix"].["encode_to"] dest in
    let* _ := self.["value"].["encode_to"] dest in
    Pure tt.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
End Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
