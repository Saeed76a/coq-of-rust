(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
Require CoqOfRust.num_traits.

Require CoqOfRust.ink.alloc.
Require CoqOfRust.ink.ink_primitives.
Require CoqOfRust.ink.ink_storage_traits.
Require CoqOfRust.ink.parity_scale_codec.
Require CoqOfRust.ink.scale_decode.
Require CoqOfRust.ink.scale_encode.
Require CoqOfRust.ink.ink_engine.

Module arithmetic.
  Module Saturating.
    Class Trait (Self : Set) : Type := {
      saturating_add `{H' : State.Trait} : Self -> Self -> M (H := H') Self;
      saturating_sub `{H' : State.Trait} : Self -> Self -> M (H := H') Self;
      saturating_mul `{H' : State.Trait} : Self -> Self -> M (H := H') Self;
      saturating_pow `{H' : State.Trait} : Self -> usize -> M (H := H') Self;
    }.
    
    Global Instance Method_saturating_add `{H' : State.Trait} `(Trait)
      : Notation.Dot "saturating_add" := {
      Notation.dot := saturating_add;
    }.
    Global Instance Method_saturating_sub `{H' : State.Trait} `(Trait)
      : Notation.Dot "saturating_sub" := {
      Notation.dot := saturating_sub;
    }.
    Global Instance Method_saturating_mul `{H' : State.Trait} `(Trait)
      : Notation.Dot "saturating_mul" := {
      Notation.dot := saturating_mul;
    }.
    Global Instance Method_saturating_pow `{H' : State.Trait} `(Trait)
      : Notation.Dot "saturating_pow" := {
      Notation.dot := saturating_pow;
    }.
  End Saturating.
  
  Module BaseArithmetic.
    Unset Primitive Projections.
    Class Trait
        (Self : Set)
        `{core.marker.Sized.Trait Self}
        `{core.convert.From.Trait Self (T := u8)}
        `{num_traits.bounds.Bounded.Trait Self}
        `{core.cmp.Ord.Trait Self}
        `{core.cmp.PartialOrd.Trait Self (Rhs := Self)}
        `{num_traits.identities.Zero.Trait Self}
        `{num_traits.identities.One.Trait Self}
        `{num_traits.bounds.Bounded.Trait Self}
        `{core.ops.arith.Add.Trait Self (Rhs := Self)}
        `{core.ops.arith.AddAssign.Trait Self (Rhs := Self)}
        `{core.ops.arith.Sub.Trait Self (Rhs := Self)}
        `{core.ops.arith.SubAssign.Trait Self (Rhs := Self)}
        `{core.ops.arith.Mul.Trait Self (Rhs := Self)}
        `{core.ops.arith.MulAssign.Trait Self (Rhs := Self)}
        `{core.ops.arith.Div.Trait Self (Rhs := Self)}
        `{core.ops.arith.DivAssign.Trait Self (Rhs := Self)}
        `{num_traits.ops.checked.CheckedMul.Trait Self}
        `{ink_env.arithmetic.Saturating.Trait Self}
        `{core.convert.TryFrom.Trait Self (T := u16)}
        `{core.convert.TryFrom.Trait Self (T := u32)}
        `{core.convert.TryFrom.Trait Self (T := u64)}
        `{core.convert.TryFrom.Trait Self (T := u128)}
        `{core.convert.TryFrom.Trait Self (T := usize)}
        `{core.convert.TryInto.Trait Self (T := u16)}
        `{core.convert.TryInto.Trait Self (T := u32)}
        `{core.convert.TryInto.Trait Self (T := u64)}
        `{core.convert.TryInto.Trait Self (T := u128)}
        `{core.convert.TryInto.Trait Self (T := usize)} :
        Type := {
    }.
    Global Set Primitive Projections.
  End BaseArithmetic.
  
  Module Impl_ink_env_arithmetic_BaseArithmetic_for_T.
    Section Impl_ink_env_arithmetic_BaseArithmetic_for_T.
      Context {T : Set}.
      Definition Self := T.
      
      Global Instance I : ink_env.arithmetic.BaseArithmetic.Trait Self := {
      }.
    End Impl_ink_env_arithmetic_BaseArithmetic_for_T.
    Global Hint Resolve I : core.
  End Impl_ink_env_arithmetic_BaseArithmetic_for_T.
  
  Module AtLeast32Bit.
    Unset Primitive Projections.
    Class Trait
        (Self : Set)
        `{ink_env.arithmetic.BaseArithmetic.Trait Self}
        `{core.convert.From.Trait Self (T := u16)}
        `{core.convert.From.Trait Self (T := u32)} :
        Type := {
    }.
    Global Set Primitive Projections.
  End AtLeast32Bit.
  
  Module Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
    Section Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
      Context {T : Set}.
      Definition Self := T.
      
      Global Instance I : ink_env.arithmetic.AtLeast32Bit.Trait Self := {
      }.
    End Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
    Global Hint Resolve I : core.
  End Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
  
  Module AtLeast32BitUnsigned.
    Unset Primitive Projections.
    Class Trait
        (Self : Set)
        `{ink_env.arithmetic.AtLeast32Bit.Trait Self}
        `{num_traits.sign.Unsigned.Trait Self} :
        Type := {
    }.
    Global Set Primitive Projections.
  End AtLeast32BitUnsigned.
  
  Module Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
    Section Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
      Context {T : Set}.
      Definition Self := T.
      
      Global Instance I
        : ink_env.arithmetic.AtLeast32BitUnsigned.Trait Self := {
      }.
    End Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
    Global Hint Resolve I : core.
  End Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
  
  Module Impl_ink_env_arithmetic_Saturating_for_T.
    Section Impl_ink_env_arithmetic_Saturating_for_T.
      Context {T : Set}.
      Definition Self := T.
      
      Parameter saturating_add :
          forall `{H' : State.Trait},
          Self -> Self -> M (H := H') Self.
      
      Global Instance Method_saturating_add `{H' : State.Trait} :
        Notation.Dot "saturating_add" := {
        Notation.dot := saturating_add;
      }.
      
      Parameter saturating_sub :
          forall `{H' : State.Trait},
          Self -> Self -> M (H := H') Self.
      
      Global Instance Method_saturating_sub `{H' : State.Trait} :
        Notation.Dot "saturating_sub" := {
        Notation.dot := saturating_sub;
      }.
      
      Parameter saturating_mul :
          forall `{H' : State.Trait},
          Self -> Self -> M (H := H') Self.
      
      Global Instance Method_saturating_mul `{H' : State.Trait} :
        Notation.Dot "saturating_mul" := {
        Notation.dot := saturating_mul;
      }.
      
      Parameter saturating_pow :
          forall `{H' : State.Trait},
          Self -> usize -> M (H := H') Self.
      
      Global Instance Method_saturating_pow `{H' : State.Trait} :
        Notation.Dot "saturating_pow" := {
        Notation.dot := saturating_pow;
      }.
      
      Global Instance I : ink_env.arithmetic.Saturating.Trait Self := {
        ink_env.arithmetic.Saturating.saturating_add `{H' : State.Trait}
          :=
          saturating_add;
        ink_env.arithmetic.Saturating.saturating_sub `{H' : State.Trait}
          :=
          saturating_sub;
        ink_env.arithmetic.Saturating.saturating_mul `{H' : State.Trait}
          :=
          saturating_mul;
        ink_env.arithmetic.Saturating.saturating_pow `{H' : State.Trait}
          :=
          saturating_pow;
      }.
    End Impl_ink_env_arithmetic_Saturating_for_T.
    Global Hint Resolve I : core.
  End Impl_ink_env_arithmetic_Saturating_for_T.
End arithmetic.

Module types.
  Module FromLittleEndian.
    Class Trait (Self : Set) : Type := {
      Bytes : Set;
      _
        :
        Sigma
          `(core.default.Default.Trait Bytes)
          `(core.convert.AsRef.Trait Bytes (T := Slice u8))
          `(core.convert.AsMut.Trait Bytes (T := Slice u8)),
        unit;
      from_le_bytes `{H' : State.Trait} : Bytes -> M (H := H') Self;
    }.
    
    Global Instance Method_Bytes `(Trait)
      : Notation.DoubleColonType Self "Bytes" := {
      Notation.double_colon_type := Bytes;
    }.
    Global Instance Method_from_le_bytes `{H' : State.Trait} `(Trait)
      : Notation.Dot "from_le_bytes" := {
      Notation.dot := from_le_bytes;
    }.
  End FromLittleEndian.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u8.
    Definition Self := u8.
    
    Definition Bytes : Set := list u8.
    
    Parameter from_le_bytes :
        forall `{H' : State.Trait},
        Bytes -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    #[refine]
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.Bytes := Bytes;
      ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
        :=
        from_le_bytes;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_types_FromLittleEndian_for_u8.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u16.
    Definition Self := u16.
    
    Definition Bytes : Set := list u8.
    
    Parameter from_le_bytes :
        forall `{H' : State.Trait},
        Bytes -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    #[refine]
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.Bytes := Bytes;
      ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
        :=
        from_le_bytes;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_types_FromLittleEndian_for_u16.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u32.
    Definition Self := u32.
    
    Definition Bytes : Set := list u8.
    
    Parameter from_le_bytes :
        forall `{H' : State.Trait},
        Bytes -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    #[refine]
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.Bytes := Bytes;
      ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
        :=
        from_le_bytes;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_types_FromLittleEndian_for_u32.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u64.
    Definition Self := u64.
    
    Definition Bytes : Set := list u8.
    
    Parameter from_le_bytes :
        forall `{H' : State.Trait},
        Bytes -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    #[refine]
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.Bytes := Bytes;
      ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
        :=
        from_le_bytes;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_types_FromLittleEndian_for_u64.
  
  Module Impl_ink_env_types_FromLittleEndian_for_u128.
    Definition Self := u128.
    
    Definition Bytes : Set := list u8.
    
    Parameter from_le_bytes :
        forall `{H' : State.Trait},
        Bytes -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
      Notation.DoubleColon Self "from_le_bytes" := {
      Notation.double_colon := from_le_bytes;
    }.
    
    #[refine]
    Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
      ink_env.types.FromLittleEndian.Bytes := Bytes;
      ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
        :=
        from_le_bytes;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_types_FromLittleEndian_for_u128.
  
  Module AccountIdGuard.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End AccountIdGuard.
  
  Module Impl_ink_env_types_AccountIdGuard_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Global Instance I : ink_env.types.AccountIdGuard.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_types_AccountIdGuard_for_ink_primitives_types_AccountId.
  
  Module CodecAsType.
    Unset Primitive Projections.
    Class Trait
        (Self : Set)
        `{scale_decode.DecodeAsType.Trait Self}
        `{scale_encode.EncodeAsType.Trait Self} :
        Type := {
    }.
    Global Set Primitive Projections.
  End CodecAsType.
  
  Module Impl_ink_env_types_CodecAsType_for_T.
    Section Impl_ink_env_types_CodecAsType_for_T.
      Context {T : Set}.
      Definition Self := T.
      
      Global Instance I : ink_env.types.CodecAsType.Trait Self := {
      }.
    End Impl_ink_env_types_CodecAsType_for_T.
    Global Hint Resolve I : core.
  End Impl_ink_env_types_CodecAsType_for_T.
  
  Module Environment.
    Class Trait (Self : Set) : Type := {
      MAX_EVENT_TOPICS `{H' : State.Trait} : usize;
      AccountId : Set;
      _
        :
        Sigma
          `(parity_scale_codec.codec.Codec.Trait AccountId)
          `(ink_env.types.CodecAsType.Trait AccountId)
          `(core.clone.Clone.Trait AccountId)
          `(core.cmp.PartialEq.Trait AccountId
              (Rhs := core.cmp.PartialEq.Default.Rhs Self))
          `(core.cmp.Eq.Trait AccountId)
          `(core.cmp.Ord.Trait AccountId)
          `(core.convert.AsRef.Trait AccountId (T := Slice u8))
          `(core.convert.AsMut.Trait AccountId (T := Slice u8)),
        unit;
      Balance : Set;
      _
        :
        Sigma
          `(parity_scale_codec.codec.Codec.Trait Balance)
          `(ink_env.types.CodecAsType.Trait Balance)
          `(core.marker.Copy.Trait Balance)
          `(core.clone.Clone.Trait Balance)
          `(core.cmp.PartialEq.Trait Balance
              (Rhs := core.cmp.PartialEq.Default.Rhs Self))
          `(core.cmp.Eq.Trait Balance)
          `(ink_env.arithmetic.AtLeast32BitUnsigned.Trait Balance)
          `(ink_env.types.FromLittleEndian.Trait Balance),
        unit;
      Hash : Set;
      _
        :
        Sigma
          `(parity_scale_codec.codec.Codec.Trait Hash)
          `(ink_env.types.CodecAsType.Trait Hash)
          `(core.marker.Copy.Trait Hash)
          `(core.clone.Clone.Trait Hash)
          `(ink_primitives.types.Clear.Trait Hash)
          `(core.cmp.PartialEq.Trait Hash
              (Rhs := core.cmp.PartialEq.Default.Rhs Self))
          `(core.cmp.Eq.Trait Hash)
          `(core.cmp.Ord.Trait Hash)
          `(core.convert.AsRef.Trait Hash (T := Slice u8))
          `(core.convert.AsMut.Trait Hash (T := Slice u8)),
        unit;
      Timestamp : Set;
      _
        :
        Sigma
          `(parity_scale_codec.codec.Codec.Trait Timestamp)
          `(ink_env.types.CodecAsType.Trait Timestamp)
          `(core.marker.Copy.Trait Timestamp)
          `(core.clone.Clone.Trait Timestamp)
          `(core.cmp.PartialEq.Trait Timestamp
              (Rhs := core.cmp.PartialEq.Default.Rhs Self))
          `(core.cmp.Eq.Trait Timestamp)
          `(ink_env.arithmetic.AtLeast32BitUnsigned.Trait Timestamp)
          `(ink_env.types.FromLittleEndian.Trait Timestamp),
        unit;
      BlockNumber : Set;
      _
        :
        Sigma
          `(parity_scale_codec.codec.Codec.Trait BlockNumber)
          `(ink_env.types.CodecAsType.Trait BlockNumber)
          `(core.marker.Copy.Trait BlockNumber)
          `(core.clone.Clone.Trait BlockNumber)
          `(core.cmp.PartialEq.Trait BlockNumber
              (Rhs := core.cmp.PartialEq.Default.Rhs Self))
          `(core.cmp.Eq.Trait BlockNumber)
          `(ink_env.arithmetic.AtLeast32BitUnsigned.Trait BlockNumber)
          `(ink_env.types.FromLittleEndian.Trait BlockNumber),
        unit;
      ChainExtension : Set;
    }.
    
    Global Instance Method_MAX_EVENT_TOPICS `{H' : State.Trait} `(Trait)
      : Notation.Dot "MAX_EVENT_TOPICS" := {
      Notation.dot := MAX_EVENT_TOPICS;
    }.
    Global Instance Method_AccountId `(Trait)
      : Notation.DoubleColonType Self "AccountId" := {
      Notation.double_colon_type := AccountId;
    }.
    Global Instance Method_Balance `(Trait)
      : Notation.DoubleColonType Self "Balance" := {
      Notation.double_colon_type := Balance;
    }.
    Global Instance Method_Hash `(Trait)
      : Notation.DoubleColonType Self "Hash" := {
      Notation.double_colon_type := Hash;
    }.
    Global Instance Method_Timestamp `(Trait)
      : Notation.DoubleColonType Self "Timestamp" := {
      Notation.double_colon_type := Timestamp;
    }.
    Global Instance Method_BlockNumber `(Trait)
      : Notation.DoubleColonType Self "BlockNumber" := {
      Notation.double_colon_type := BlockNumber;
    }.
    Global Instance Method_ChainExtension `(Trait)
      : Notation.DoubleColonType Self "ChainExtension" := {
      Notation.double_colon_type := ChainExtension;
    }.
  End Environment.
  
  Module NoChainExtension.
    Inductive t : Set :=
    .
  End NoChainExtension.
  Definition NoChainExtension := NoChainExtension.t.
  
  Module DefaultEnvironment.
    Inductive t : Set :=
    .
  End DefaultEnvironment.
  Definition DefaultEnvironment := DefaultEnvironment.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_core_clone_Clone_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_env.types.DefaultEnvironment.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_types_DefaultEnvironment.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref ink_env.types.DefaultEnvironment) ->
          M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_core_cmp_Eq_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_types_DefaultEnvironment.
  
  Module Impl_ink_env_types_Environment_for_ink_env_types_DefaultEnvironment.
    Definition Self := ink_env.types.DefaultEnvironment.
    
    Definition MAX_EVENT_TOPICS `{H' : State.Trait} := Pure 4.
    
    Global Instance AssociatedFunction_MAX_EVENT_TOPICS `{H' : State.Trait} :
      Notation.DoubleColon Self "MAX_EVENT_TOPICS" := {
      Notation.double_colon := MAX_EVENT_TOPICS;
    }.
    
    Definition AccountId : Set := ink_primitives.types.AccountId.
    
    Definition Balance : Set := ink_env.types.Balance.
    
    Definition Hash : Set := ink_primitives.types.Hash.
    
    Definition Timestamp : Set := ink_env.types.Timestamp.
    
    Definition BlockNumber : Set := ink_env.types.BlockNumber.
    
    Definition ChainExtension : Set := ink_env.types.NoChainExtension.
    
    #[refine]
    Global Instance I : ink_env.types.Environment.Trait Self := {
      ink_env.types.Environment.MAX_EVENT_TOPICS `{H' : State.Trait}
        :=
        MAX_EVENT_TOPICS;
      ink_env.types.Environment.AccountId := AccountId;
      ink_env.types.Environment.Balance := Balance;
      ink_env.types.Environment.Hash := Hash;
      ink_env.types.Environment.Timestamp := Timestamp;
      ink_env.types.Environment.BlockNumber := BlockNumber;
      ink_env.types.Environment.ChainExtension := ChainExtension;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_types_Environment_for_ink_env_types_DefaultEnvironment.
  
  Definition Balance : Set := u128.
  
  Definition Timestamp : Set := u64.
  
  Definition Gas : Set := u64.
  
  Definition BlockNumber : Set := u32.
End types.

Module FromLittleEndian.
  Class Trait (Self : Set) : Type := {
    Bytes : Set;
    _
      :
      Sigma
        `(core.default.Default.Trait Bytes)
        `(core.convert.AsRef.Trait Bytes (T := Slice u8))
        `(core.convert.AsMut.Trait Bytes (T := Slice u8)),
      unit;
    from_le_bytes `{H' : State.Trait} : Bytes -> M (H := H') Self;
  }.
  
  Global Instance Method_Bytes `(Trait)
    : Notation.DoubleColonType Self "Bytes" := {
    Notation.double_colon_type := Bytes;
  }.
  Global Instance Method_from_le_bytes `{H' : State.Trait} `(Trait)
    : Notation.Dot "from_le_bytes" := {
    Notation.dot := from_le_bytes;
  }.
End FromLittleEndian.

Module Impl_ink_env_types_FromLittleEndian_for_u8.
  Definition Self := u8.
  
  Definition Bytes : Set := list u8.
  
  Parameter from_le_bytes :
      forall `{H' : State.Trait},
      Bytes -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  #[refine]
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.Bytes := Bytes;
    ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
      :=
      from_le_bytes;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_types_FromLittleEndian_for_u8.

Module Impl_ink_env_types_FromLittleEndian_for_u16.
  Definition Self := u16.
  
  Definition Bytes : Set := list u8.
  
  Parameter from_le_bytes :
      forall `{H' : State.Trait},
      Bytes -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  #[refine]
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.Bytes := Bytes;
    ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
      :=
      from_le_bytes;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_types_FromLittleEndian_for_u16.

Module Impl_ink_env_types_FromLittleEndian_for_u32.
  Definition Self := u32.
  
  Definition Bytes : Set := list u8.
  
  Parameter from_le_bytes :
      forall `{H' : State.Trait},
      Bytes -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  #[refine]
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.Bytes := Bytes;
    ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
      :=
      from_le_bytes;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_types_FromLittleEndian_for_u32.

Module Impl_ink_env_types_FromLittleEndian_for_u64.
  Definition Self := u64.
  
  Definition Bytes : Set := list u8.
  
  Parameter from_le_bytes :
      forall `{H' : State.Trait},
      Bytes -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  #[refine]
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.Bytes := Bytes;
    ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
      :=
      from_le_bytes;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_types_FromLittleEndian_for_u64.

Module Impl_ink_env_types_FromLittleEndian_for_u128.
  Definition Self := u128.
  
  Definition Bytes : Set := list u8.
  
  Parameter from_le_bytes :
      forall `{H' : State.Trait},
      Bytes -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from_le_bytes `{H' : State.Trait} :
    Notation.DoubleColon Self "from_le_bytes" := {
    Notation.double_colon := from_le_bytes;
  }.
  
  #[refine]
  Global Instance I : ink_env.types.FromLittleEndian.Trait Self := {
    ink_env.types.FromLittleEndian.Bytes := Bytes;
    ink_env.types.FromLittleEndian.from_le_bytes `{H' : State.Trait}
      :=
      from_le_bytes;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_types_FromLittleEndian_for_u128.

Module AccountIdGuard.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End AccountIdGuard.

Module Impl_ink_env_types_AccountIdGuard_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Global Instance I : ink_env.types.AccountIdGuard.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_types_AccountIdGuard_for_ink_primitives_types_AccountId.

Module CodecAsType.
  Unset Primitive Projections.
  Class Trait
      (Self : Set)
      `{scale_decode.DecodeAsType.Trait Self}
      `{scale_encode.EncodeAsType.Trait Self} :
      Type := {
  }.
  Global Set Primitive Projections.
End CodecAsType.

Module Impl_ink_env_types_CodecAsType_for_T.
  Section Impl_ink_env_types_CodecAsType_for_T.
    Context {T : Set}.
    Definition Self := T.
    
    Global Instance I : ink_env.types.CodecAsType.Trait Self := {
    }.
  End Impl_ink_env_types_CodecAsType_for_T.
  Global Hint Resolve I : core.
End Impl_ink_env_types_CodecAsType_for_T.

Module Environment.
  Class Trait (Self : Set) : Type := {
    MAX_EVENT_TOPICS `{H' : State.Trait} : usize;
    AccountId : Set;
    _
      :
      Sigma
        `(parity_scale_codec.codec.Codec.Trait AccountId)
        `(ink_env.types.CodecAsType.Trait AccountId)
        `(core.clone.Clone.Trait AccountId)
        `(core.cmp.PartialEq.Trait AccountId
            (Rhs := core.cmp.PartialEq.Default.Rhs Self))
        `(core.cmp.Eq.Trait AccountId)
        `(core.cmp.Ord.Trait AccountId)
        `(core.convert.AsRef.Trait AccountId (T := Slice u8))
        `(core.convert.AsMut.Trait AccountId (T := Slice u8)),
      unit;
    Balance : Set;
    _
      :
      Sigma
        `(parity_scale_codec.codec.Codec.Trait Balance)
        `(ink_env.types.CodecAsType.Trait Balance)
        `(core.marker.Copy.Trait Balance)
        `(core.clone.Clone.Trait Balance)
        `(core.cmp.PartialEq.Trait Balance
            (Rhs := core.cmp.PartialEq.Default.Rhs Self))
        `(core.cmp.Eq.Trait Balance)
        `(ink_env.arithmetic.AtLeast32BitUnsigned.Trait Balance)
        `(ink_env.types.FromLittleEndian.Trait Balance),
      unit;
    Hash : Set;
    _
      :
      Sigma
        `(parity_scale_codec.codec.Codec.Trait Hash)
        `(ink_env.types.CodecAsType.Trait Hash)
        `(core.marker.Copy.Trait Hash)
        `(core.clone.Clone.Trait Hash)
        `(ink_primitives.types.Clear.Trait Hash)
        `(core.cmp.PartialEq.Trait Hash
            (Rhs := core.cmp.PartialEq.Default.Rhs Self))
        `(core.cmp.Eq.Trait Hash)
        `(core.cmp.Ord.Trait Hash)
        `(core.convert.AsRef.Trait Hash (T := Slice u8))
        `(core.convert.AsMut.Trait Hash (T := Slice u8)),
      unit;
    Timestamp : Set;
    _
      :
      Sigma
        `(parity_scale_codec.codec.Codec.Trait Timestamp)
        `(ink_env.types.CodecAsType.Trait Timestamp)
        `(core.marker.Copy.Trait Timestamp)
        `(core.clone.Clone.Trait Timestamp)
        `(core.cmp.PartialEq.Trait Timestamp
            (Rhs := core.cmp.PartialEq.Default.Rhs Self))
        `(core.cmp.Eq.Trait Timestamp)
        `(ink_env.arithmetic.AtLeast32BitUnsigned.Trait Timestamp)
        `(ink_env.types.FromLittleEndian.Trait Timestamp),
      unit;
    BlockNumber : Set;
    _
      :
      Sigma
        `(parity_scale_codec.codec.Codec.Trait BlockNumber)
        `(ink_env.types.CodecAsType.Trait BlockNumber)
        `(core.marker.Copy.Trait BlockNumber)
        `(core.clone.Clone.Trait BlockNumber)
        `(core.cmp.PartialEq.Trait BlockNumber
            (Rhs := core.cmp.PartialEq.Default.Rhs Self))
        `(core.cmp.Eq.Trait BlockNumber)
        `(ink_env.arithmetic.AtLeast32BitUnsigned.Trait BlockNumber)
        `(ink_env.types.FromLittleEndian.Trait BlockNumber),
      unit;
    ChainExtension : Set;
  }.
  
  Global Instance Method_MAX_EVENT_TOPICS `{H' : State.Trait} `(Trait)
    : Notation.Dot "MAX_EVENT_TOPICS" := {
    Notation.dot := MAX_EVENT_TOPICS;
  }.
  Global Instance Method_AccountId `(Trait)
    : Notation.DoubleColonType Self "AccountId" := {
    Notation.double_colon_type := AccountId;
  }.
  Global Instance Method_Balance `(Trait)
    : Notation.DoubleColonType Self "Balance" := {
    Notation.double_colon_type := Balance;
  }.
  Global Instance Method_Hash `(Trait)
    : Notation.DoubleColonType Self "Hash" := {
    Notation.double_colon_type := Hash;
  }.
  Global Instance Method_Timestamp `(Trait)
    : Notation.DoubleColonType Self "Timestamp" := {
    Notation.double_colon_type := Timestamp;
  }.
  Global Instance Method_BlockNumber `(Trait)
    : Notation.DoubleColonType Self "BlockNumber" := {
    Notation.double_colon_type := BlockNumber;
  }.
  Global Instance Method_ChainExtension `(Trait)
    : Notation.DoubleColonType Self "ChainExtension" := {
    Notation.double_colon_type := ChainExtension;
  }.
End Environment.

Module NoChainExtension.
  Inductive t : Set :=
  .
End NoChainExtension.
Definition NoChainExtension := NoChainExtension.t.

Module Impl_scale_info_TypeInfo_for_ink_env_types_NoChainExtension.
  Definition Self := ink_env.types.NoChainExtension.
  
  Definition Identity : Set := Self.
  
  Parameter type_info :
      forall `{H' : State.Trait},
      M (H := H') scale_info.ty.Type_.
  
  Global Instance AssociatedFunction_type_info `{H' : State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info `{H' : State.Trait} := type_info;
  }.
  Global Hint Resolve I : core.
End Impl_scale_info_TypeInfo_for_ink_env_types_NoChainExtension.

Module DefaultEnvironment.
  Inductive t : Set :=
  .
End DefaultEnvironment.
Definition DefaultEnvironment := DefaultEnvironment.t.

Module Impl_scale_info_TypeInfo_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Definition Identity : Set := Self.
  
  Parameter type_info :
      forall `{H' : State.Trait},
      M (H := H') scale_info.ty.Type_.
  
  Global Instance AssociatedFunction_type_info `{H' : State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info `{H' : State.Trait} := type_info;
  }.
  Global Hint Resolve I : core.
End Impl_scale_info_TypeInfo_for_ink_env_types_DefaultEnvironment.

Module Impl_core_fmt_Debug_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_types_DefaultEnvironment.

Module Impl_core_clone_Clone_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_env.types.DefaultEnvironment.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_types_DefaultEnvironment.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_env_types_DefaultEnvironment.

Module Impl_core_cmp_PartialEq_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) -> (ref ink_env.types.DefaultEnvironment) -> M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_types_DefaultEnvironment.

Module Impl_core_marker_StructuralEq_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_env_types_DefaultEnvironment.

Module Impl_core_cmp_Eq_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_types_DefaultEnvironment.

Module Impl_ink_env_types_Environment_for_ink_env_types_DefaultEnvironment.
  Definition Self := ink_env.types.DefaultEnvironment.
  
  Definition MAX_EVENT_TOPICS `{H' : State.Trait} := Pure 4.
  
  Global Instance AssociatedFunction_MAX_EVENT_TOPICS `{H' : State.Trait} :
    Notation.DoubleColon Self "MAX_EVENT_TOPICS" := {
    Notation.double_colon := MAX_EVENT_TOPICS;
  }.
  
  Definition AccountId : Set := ink_primitives.types.AccountId.
  
  Definition Balance : Set := ink_env.types.Balance.
  
  Definition Hash : Set := ink_primitives.types.Hash.
  
  Definition Timestamp : Set := ink_env.types.Timestamp.
  
  Definition BlockNumber : Set := ink_env.types.BlockNumber.
  
  Definition ChainExtension : Set := ink_env.types.NoChainExtension.
  
  #[refine]
  Global Instance I : ink_env.types.Environment.Trait Self := {
    ink_env.types.Environment.MAX_EVENT_TOPICS `{H' : State.Trait}
      :=
      MAX_EVENT_TOPICS;
    ink_env.types.Environment.AccountId := AccountId;
    ink_env.types.Environment.Balance := Balance;
    ink_env.types.Environment.Hash := Hash;
    ink_env.types.Environment.Timestamp := Timestamp;
    ink_env.types.Environment.BlockNumber := BlockNumber;
    ink_env.types.Environment.ChainExtension := ChainExtension;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_types_Environment_for_ink_env_types_DefaultEnvironment.

Definition Balance : Set := u128.

Definition Timestamp : Set := u64.

Definition Gas : Set := u64.

Definition BlockNumber : Set := u32.

Module contract.
  Module ContractEnv.
    Class Trait (Self : Set) : Type := {
      Env : Set;
      _ : Sigma `(ink_env.types.Environment.Trait Env), unit;
    }.
    
    Global Instance Method_Env `(Trait)
      : Notation.DoubleColonType Self "Env" := {
      Notation.double_colon_type := Env;
    }.
  End ContractEnv.
  
  Module ContractReference.
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait)
      : Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractReference.
End contract.

Module call.
  Module common.
    Module ReturnType.
      Section ReturnType.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          _ : core.marker.PhantomData (T);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot 0 := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End ReturnType.
    End ReturnType.
    Definition ReturnType := @ReturnType.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
      Section Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.ReturnType T.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
    
    Module Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
      Section Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.ReturnType T.
        
        Parameter clone :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') Self.
        
        Global Instance Method_clone `{H' : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H' : State.Trait} := clone;
        }.
      End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
    
    Module Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
      Section Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.ReturnType T.
        
        Global Instance I : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
      Global Hint Resolve I : core.
    End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
    
    Module Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
      Section Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.ReturnType T.
        
        Parameter default : forall `{H' : State.Trait}, M (H := H') Self.
        
        Global Instance AssociatedFunction_default `{H' : State.Trait} :
          Notation.DoubleColon Self "default" := {
          Notation.double_colon := default;
        }.
        
        Global Instance I : core.default.Default.Trait Self := {
          core.default.Default.default `{H' : State.Trait} := default;
        }.
      End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
      Global Hint Resolve I : core.
    End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
    
    Module Set_.
      Section Set_.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          _ : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot 0 := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End Set_.
    End Set_.
    Definition Set_ := @Set_.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
      Section Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Set_ T.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
    
    Module Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
      Section Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Set_ T.
        
        Global Instance I : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
      Global Hint Resolve I : core.
    End Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
    
    Module Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
      Section Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Set_ T.
        
        Parameter clone :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') (ink_env.call.common.Set_ T).
        
        Global Instance Method_clone `{H' : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H' : State.Trait} := clone;
        }.
      End Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
    
    Module Unset_.
      Section Unset_.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          _ : core.marker.PhantomData (T);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot 0 := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End Unset_.
    End Unset_.
    Definition Unset_ := @Unset_.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
      Section Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Unset_ T.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
    
    Module Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
      Section Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Unset_ T.
        
        Parameter clone :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') Self.
        
        Global Instance Method_clone `{H' : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H' : State.Trait} := clone;
        }.
      End Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
    
    Module Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
      Section Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Unset_ T.
        
        Global Instance I : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
      Global Hint Resolve I : core.
    End Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
    
    Module Impl_core_default_Default_for_ink_env_call_common_Unset__T.
      Section Impl_core_default_Default_for_ink_env_call_common_Unset__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Unset_ T.
        
        Parameter default : forall `{H' : State.Trait}, M (H := H') Self.
        
        Global Instance AssociatedFunction_default `{H' : State.Trait} :
          Notation.DoubleColon Self "default" := {
          Notation.double_colon := default;
        }.
        
        Global Instance I : core.default.Default.Trait Self := {
          core.default.Default.default `{H' : State.Trait} := default;
        }.
      End Impl_core_default_Default_for_ink_env_call_common_Unset__T.
      Global Hint Resolve I : core.
    End Impl_core_default_Default_for_ink_env_call_common_Unset__T.
    
    Module Unwrap.
      Class Trait (Self : Set) : Type := {
        Output : Set;
        unwrap_or_else
          `{H' : State.Trait}
          {F : Set}
          `{H'0 : core.ops.function.FnOnce.Trait F (Args := unit)}
          :
          Self -> F -> M (H := H') Output;
      }.
      
      Global Instance Method_Output `(Trait)
        : Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_unwrap_or_else `{H' : State.Trait} `(Trait)
        : Notation.Dot "unwrap_or_else" := {
        Notation.dot
          {F : Set}
          `{H'0 : core.ops.function.FnOnce.Trait F (Args := unit)}
          :=
          unwrap_or_else (F := F) (H'0 := H'0);
      }.
    End Unwrap.
    
    Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
      Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Unset_ T.
        
        Definition Output : Set := T.
        
        Parameter unwrap_or_else :
            forall
              `{H' : State.Trait}
              {F : Set}
              `{core.ops.function.FnOnce.Trait F (Args := unit)},
            Self -> F -> M (H := H') Output.
        
        Global Instance Method_unwrap_or_else `{H' : State.Trait} :
          Notation.Dot "unwrap_or_else" := {
          Notation.dot := unwrap_or_else;
        }.
        
        Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
          ink_env.call.common.Unwrap.Output := Output;
          ink_env.call.common.Unwrap.unwrap_or_else `{H' : State.Trait}
            :=
            unwrap_or_else;
        }.
      End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
      Global Hint Resolve I : core.
    End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
    
    Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
      Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
        Context {T : Set}.
        Definition Self := ink_env.call.common.Set_ T.
        
        Definition Output : Set := T.
        
        Parameter unwrap_or_else :
            forall
              `{H' : State.Trait}
              {F : Set}
              `{core.ops.function.FnOnce.Trait F (Args := unit)},
            Self -> F -> M (H := H') Output.
        
        Global Instance Method_unwrap_or_else `{H' : State.Trait} :
          Notation.Dot "unwrap_or_else" := {
          Notation.dot := unwrap_or_else;
        }.
        
        Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
          ink_env.call.common.Unwrap.Output := Output;
          ink_env.call.common.Unwrap.unwrap_or_else `{H' : State.Trait}
            :=
            unwrap_or_else;
        }.
      End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
      Global Hint Resolve I : core.
    End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
  End common.
  
  Module selector.
    Module Selector.
      Unset Primitive Projections.
      Record t : Set := {
        bytes : list u8;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_bytes : Notation.Dot "bytes" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End Selector.
    Definition Selector : Set := Selector.t.
    
    Module Impl_core_default_Default_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Parameter default :
          forall `{H' : State.Trait},
          M (H := H') ink_env.call.selector.Selector.
      
      Global Instance AssociatedFunction_default `{H' : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H' : State.Trait} := default;
      }.
      Global Hint Resolve I : core.
    End Impl_core_default_Default_for_ink_env_call_selector_Selector.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
    
    Module Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Global Instance I : core.marker.Copy.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
    
    Module Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') ink_env.call.selector.Selector.
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
    
    Module Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Parameter eq :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref ink_env.call.selector.Selector) ->
            M (H := H') bool.
      
      Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I
        : core.cmp.PartialEq.Trait Self
            (Rhs := core.cmp.PartialEq.Default.Rhs Self)
          := {
        core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
    
    Module Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Global Instance I : core.marker.StructuralEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
    
    Module Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Parameter assert_receiver_is_total_eq :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') unit.
      
      Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
    
    Module Impl_core_convert_From_for_ink_env_call_selector_Selector.
      Definition Self := ink_env.call.selector.Selector.
      
      Parameter from :
          forall `{H' : State.Trait},
          (list u8) -> M (H := H') ink_env.call.selector.Selector.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I : core.convert.From.Trait Self (T := list u8) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End Impl_core_convert_From_for_ink_env_call_selector_Selector.
  End selector.
  
  Module execution_input.
    Module ExecutionInput.
      Section ExecutionInput.
        Context {Args : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          selector : ink_env.call.selector.Selector;
          args : Args;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_selector : Notation.Dot "selector" := {
          Notation.dot '(Build_t x0 _) := x0;
        }.
        Global Instance Get_AF_selector : Notation.DoubleColon t "selector" := {
          Notation.double_colon '(Build_t x0 _) := x0;
        }.
        Global Instance Get_args : Notation.Dot "args" := {
          Notation.dot '(Build_t _ x1) := x1;
        }.
        Global Instance Get_AF_args : Notation.DoubleColon t "args" := {
          Notation.double_colon '(Build_t _ x1) := x1;
        }.
      End ExecutionInput.
    End ExecutionInput.
    Definition ExecutionInput (Args : Set) : Set :=
      ExecutionInput.t (Args := Args).
    
    Module
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
      Section
        Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
        Context {Args : Set}.
        Definition Self := ink_env.call.execution_input.ExecutionInput Args.
        
        Parameter clone :
            forall `{H' : State.Trait},
            (ref Self) ->
              M (H := H') (ink_env.call.execution_input.ExecutionInput Args).
        
        Global Instance Method_clone `{H' : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H' : State.Trait} := clone;
        }.
      End
        Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
      Global Hint Resolve I : core.
    End
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
    
    Module
      Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
      Section
        Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
        Context {Args : Set}.
        Definition Self := ink_env.call.execution_input.ExecutionInput Args.
        
        Parameter default :
            forall `{H' : State.Trait},
            M (H := H') (ink_env.call.execution_input.ExecutionInput Args).
        
        Global Instance AssociatedFunction_default `{H' : State.Trait} :
          Notation.DoubleColon Self "default" := {
          Notation.double_colon := default;
        }.
        
        Global Instance I : core.default.Default.Trait Self := {
          core.default.Default.default `{H' : State.Trait} := default;
        }.
      End
        Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
      Global Hint Resolve I : core.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
      Section
        Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
        Context {Args : Set}.
        Definition Self := ink_env.call.execution_input.ExecutionInput Args.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End
        Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
      Global Hint Resolve I : core.
    End
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
    
    Module ArgumentList.
      Section ArgumentList.
        Context {Head Rest : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          head : Head;
          rest : Rest;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_head : Notation.Dot "head" := {
          Notation.dot '(Build_t x0 _) := x0;
        }.
        Global Instance Get_AF_head : Notation.DoubleColon t "head" := {
          Notation.double_colon '(Build_t x0 _) := x0;
        }.
        Global Instance Get_rest : Notation.Dot "rest" := {
          Notation.dot '(Build_t _ x1) := x1;
        }.
        Global Instance Get_AF_rest : Notation.DoubleColon t "rest" := {
          Notation.double_colon '(Build_t _ x1) := x1;
        }.
      End ArgumentList.
    End ArgumentList.
    Definition ArgumentList (Head Rest : Set) : Set :=
      ArgumentList.t (Head := Head) (Rest := Rest).
    
    Module
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Section
        Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
        Context {Head Rest : Set}.
        Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
        
        Parameter clone :
            forall `{H' : State.Trait},
            (ref Self) ->
              M (H := H') (ink_env.call.execution_input.ArgumentList Head Rest).
        
        Global Instance Method_clone `{H' : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H' : State.Trait} := clone;
        }.
      End
        Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Global Hint Resolve I : core.
    End
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    
    Module
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Section
        Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
        Context {Head Rest : Set}.
        Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
        
        Parameter default :
            forall `{H' : State.Trait},
            M (H := H') (ink_env.call.execution_input.ArgumentList Head Rest).
        
        Global Instance AssociatedFunction_default `{H' : State.Trait} :
          Notation.DoubleColon Self "default" := {
          Notation.double_colon := default;
        }.
        
        Global Instance I : core.default.Default.Trait Self := {
          core.default.Default.default `{H' : State.Trait} := default;
        }.
      End
        Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Global Hint Resolve I : core.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Section
        Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
        Context {Head Rest : Set}.
        Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End
        Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Global Hint Resolve I : core.
    End
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    
    Module Argument.
      Section Argument.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          arg : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_arg : Notation.Dot "arg" := {
          Notation.dot '(Build_t x0) := x0;
        }.
        Global Instance Get_AF_arg : Notation.DoubleColon t "arg" := {
          Notation.double_colon '(Build_t x0) := x0;
        }.
      End Argument.
    End Argument.
    Definition Argument (T : Set) : Set := Argument.t (T := T).
    
    Definition ArgsList (Head Rest : Set) : Set :=
      ink_env.call.execution_input.ArgumentList
        (ink_env.call.execution_input.Argument Head)
        Rest.
    
    Module Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
      Section Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
        Context {T : Set}.
        Definition Self := ink_env.call.execution_input.Argument T.
        
        Parameter clone :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') (ink_env.call.execution_input.Argument T).
        
        Global Instance Method_clone `{H' : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H' : State.Trait} := clone;
        }.
      End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
      Section Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
        Context {T : Set}.
        Definition Self := ink_env.call.execution_input.Argument T.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
    
    Module ArgumentListEnd.
      Inductive t : Set := Build.
    End ArgumentListEnd.
    Definition ArgumentListEnd := @ArgumentListEnd.t.
    
    Module
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
      Definition Self := ink_env.call.execution_input.ArgumentListEnd.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) ->
            M (H := H') ink_env.call.execution_input.ArgumentListEnd.
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
    
    Module
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
      Definition Self := ink_env.call.execution_input.ArgumentListEnd.
      
      Parameter default :
          forall `{H' : State.Trait},
          M (H := H') ink_env.call.execution_input.ArgumentListEnd.
      
      Global Instance AssociatedFunction_default `{H' : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H' : State.Trait} := default;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
    
    Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
      Definition Self := ink_env.call.execution_input.ArgumentListEnd.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
    
    Definition EmptyArgumentList : Set :=
      ink_env.call.execution_input.ArgumentList
        ink_env.call.execution_input.ArgumentListEnd
        ink_env.call.execution_input.ArgumentListEnd.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
      Section
        Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
        Context {T : Set}.
        Definition Self := ink_env.call.execution_input.Argument T.
        
        Parameter size_hint :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') usize.
        
        Global Instance Method_size_hint `{H' : State.Trait} :
          Notation.Dot "size_hint" := {
          Notation.dot := size_hint;
        }.
        
        Parameter encode_to :
            forall
              `{H' : State.Trait}
              {O : Set}
              `{parity_scale_codec.codec.Output.Trait O}
              `{core.marker.Sized.Trait O},
            (ref Self) -> (mut_ref O) -> M (H := H') unit.
        
        Global Instance Method_encode_to `{H' : State.Trait} :
          Notation.Dot "encode_to" := {
          Notation.dot := encode_to;
        }.
        
        Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
        }.
      End
        Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
      Global Hint Resolve I : core.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
      Definition Self := ink_env.call.execution_input.EmptyArgumentList.
      
      Parameter size_hint :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') usize.
      
      Global Instance Method_size_hint `{H' : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Parameter encode_to :
          forall
            `{H' : State.Trait}
            {O : Set}
            `{parity_scale_codec.codec.Output.Trait O}
            `{core.marker.Sized.Trait O},
          (ref Self) -> (mut_ref O) -> M (H := H') unit.
      
      Global Instance Method_encode_to `{H' : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
      Section
        Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
        Context {Head Rest : Set}.
        Definition Self :=
          ink_env.call.execution_input.ArgumentList
            (ink_env.call.execution_input.Argument Head)
            Rest.
        
        Parameter size_hint :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') usize.
        
        Global Instance Method_size_hint `{H' : State.Trait} :
          Notation.Dot "size_hint" := {
          Notation.dot := size_hint;
        }.
        
        Parameter encode_to :
            forall
              `{H' : State.Trait}
              {O : Set}
              `{parity_scale_codec.codec.Output.Trait O}
              `{core.marker.Sized.Trait O},
            (ref Self) -> (mut_ref O) -> M (H := H') unit.
        
        Global Instance Method_encode_to `{H' : State.Trait} :
          Notation.Dot "encode_to" := {
          Notation.dot := encode_to;
        }.
        
        Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
        }.
      End
        Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
      Global Hint Resolve I : core.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
      Section
        Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
        Context {Args : Set}.
        Definition Self := ink_env.call.execution_input.ExecutionInput Args.
        
        Parameter size_hint :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') usize.
        
        Global Instance Method_size_hint `{H' : State.Trait} :
          Notation.Dot "size_hint" := {
          Notation.dot := size_hint;
        }.
        
        Parameter encode_to :
            forall
              `{H' : State.Trait}
              {O : Set}
              `{parity_scale_codec.codec.Output.Trait O}
              `{core.marker.Sized.Trait O},
            (ref Self) -> (mut_ref O) -> M (H := H') unit.
        
        Global Instance Method_encode_to `{H' : State.Trait} :
          Notation.Dot "encode_to" := {
          Notation.dot := encode_to;
        }.
        
        Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
        }.
      End
        Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
      Global Hint Resolve I : core.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
  End execution_input.
  
  Module create_builder.
    Module state.
      Module Salt.
        Inductive t : Set :=
        .
      End Salt.
      Definition Salt := Salt.t.
    End state.
    
    Module FromAccountId.
      Class Trait (Self : Set) {T : Set} `{ink_env.types.Environment.Trait T} :
          Type := {
        from_account_id `{H' : State.Trait}
          :
          (ink_env.types.Environment.AccountId (Self := T)) -> M (H := H') Self;
      }.
      
      Global Instance Method_from_account_id `{H' : State.Trait} `(Trait)
        : Notation.Dot "from_account_id" := {
        Notation.dot := from_account_id;
      }.
    End FromAccountId.
    
    Module ConstructorReturnType.
      Class Trait (Self : Set) {C : Set} : Type := {
        IS_RESULT `{H' : State.Trait} : bool;
        Output : Set;
        Error : Set;
        _ : Sigma `(parity_scale_codec.codec.Decode.Trait Error), unit;
        ok `{H' : State.Trait} : C -> M (H := H') Output;
      }.
      
      Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
        : Notation.Dot "IS_RESULT" := {
        Notation.dot := IS_RESULT;
      }.
      Global Instance Method_Output `(Trait)
        : Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Error `(Trait)
        : Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
      Global Instance Method_ok `{H' : State.Trait} `(Trait)
        : Notation.Dot "ok" := {
        Notation.dot := ok;
      }.
      Global Instance Method_err `{H' : State.Trait} `(Trait)
        : Notation.Dot "err" := {
        Notation.dot (_err : Error)
          :=
          (axiom : M (H := H') (core.option.Option Output));
      }.
    End ConstructorReturnType.
    
    Module Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
      Section Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
        Context {C : Set}.
        Definition Self := C.
        
        Definition Output : Set := C.
        
        Definition Error : Set := unit.
        
        Parameter ok : forall `{H' : State.Trait}, C -> M (H := H') Output.
        
        Global Instance AssociatedFunction_ok `{H' : State.Trait} :
          Notation.DoubleColon Self "ok" := {
          Notation.double_colon := ok;
        }.
        
        #[refine]
        Global Instance I
          : ink_env.call.create_builder.ConstructorReturnType.Trait Self
              (C := C)
            := {
          ink_env.call.create_builder.ConstructorReturnType.Output := Output;
          ink_env.call.create_builder.ConstructorReturnType.Error := Error;
          ink_env.call.create_builder.ConstructorReturnType.ok
            `{H' : State.Trait}
            :=
            ok;
        }.
        eauto.
        Defined.
      End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
      Global Hint Resolve I : core.
    End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
    
    Module
      Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
      Section
        Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
        Context {C E : Set}.
        Definition Self := core.result.Result C E.
        
        Definition IS_RESULT `{H' : State.Trait} := Pure true.
        
        Global Instance AssociatedFunction_IS_RESULT `{H' : State.Trait} :
          Notation.DoubleColon Self "IS_RESULT" := {
          Notation.double_colon := IS_RESULT;
        }.
        
        Definition Output : Set := core.result.Result C E.
        
        Definition Error : Set := E.
        
        Parameter ok : forall `{H' : State.Trait}, C -> M (H := H') Output.
        
        Global Instance AssociatedFunction_ok `{H' : State.Trait} :
          Notation.DoubleColon Self "ok" := {
          Notation.double_colon := ok;
        }.
        
        Parameter err :
            forall `{H' : State.Trait},
            Error -> M (H := H') (core.option.Option Output).
        
        Global Instance AssociatedFunction_err `{H' : State.Trait} :
          Notation.DoubleColon Self "err" := {
          Notation.double_colon := err;
        }.
        
        #[refine]
        Global Instance I
          : ink_env.call.create_builder.ConstructorReturnType.Trait Self
              (C := C)
            := {
          ink_env.call.create_builder.ConstructorReturnType.Output := Output;
          ink_env.call.create_builder.ConstructorReturnType.Error := Error;
          ink_env.call.create_builder.ConstructorReturnType.ok
            `{H' : State.Trait}
            :=
            ok;
        }.
        eauto.
        Defined.
      End
        Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
      Global Hint Resolve I : core.
    End
      Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
    
    Module CreateParams.
      Section CreateParams.
        Context {E ContractRef Args Salt R : Set}.
        Context `{ink_env.types.Environment.Trait E}.
        Unset Primitive Projections.
        Record t : Set := {
          code_hash : E::type["Hash"];
          gas_limit : u64;
          endowment : E::type["Balance"];
          exec_input : ink_env.call.execution_input.ExecutionInput Args;
          salt_bytes : Salt;
          _return_type : ink_env.call.common.ReturnType R;
          _phantom : core.marker.PhantomData (ContractRef);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_code_hash : Notation.Dot "code_hash" := {
          Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
        }.
        Global Instance Get_AF_code_hash
          : Notation.DoubleColon t "code_hash" := {
          Notation.double_colon '(Build_t x0 _ _ _ _ _ _) := x0;
        }.
        Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
          Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
        }.
        Global Instance Get_AF_gas_limit
          : Notation.DoubleColon t "gas_limit" := {
          Notation.double_colon '(Build_t _ x1 _ _ _ _ _) := x1;
        }.
        Global Instance Get_endowment : Notation.Dot "endowment" := {
          Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
        }.
        Global Instance Get_AF_endowment
          : Notation.DoubleColon t "endowment" := {
          Notation.double_colon '(Build_t _ _ x2 _ _ _ _) := x2;
        }.
        Global Instance Get_exec_input : Notation.Dot "exec_input" := {
          Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
        }.
        Global Instance Get_AF_exec_input
          : Notation.DoubleColon t "exec_input" := {
          Notation.double_colon '(Build_t _ _ _ x3 _ _ _) := x3;
        }.
        Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
          Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
        }.
        Global Instance Get_AF_salt_bytes
          : Notation.DoubleColon t "salt_bytes" := {
          Notation.double_colon '(Build_t _ _ _ _ x4 _ _) := x4;
        }.
        Global Instance Get__return_type : Notation.Dot "_return_type" := {
          Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
        }.
        Global Instance Get_AF__return_type
          : Notation.DoubleColon t "_return_type" := {
          Notation.double_colon '(Build_t _ _ _ _ _ x5 _) := x5;
        }.
        Global Instance Get__phantom : Notation.Dot "_phantom" := {
          Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
        }.
        Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
          Notation.double_colon '(Build_t _ _ _ _ _ _ x6) := x6;
        }.
      End CreateParams.
    End CreateParams.
    Definition CreateParams
        (E ContractRef Args Salt R : Set)
        `{ink_env.types.Environment.Trait E}
        : Set :=
      CreateParams.t
        (E := E)
        (ContractRef := ContractRef)
        (Args := Args)
        (Salt := Salt)
        (R := R).
    
    Module
      Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
      Section
        Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
        Context {E ContractRef Args Salt R : Set}.
        Definition Self :=
          ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End
        Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
      Global Hint Resolve I : core.
    End
      Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    
    Module CreateBuilder.
      Section CreateBuilder.
        Context
          {E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set}.
        Context `{ink_env.types.Environment.Trait E}.
        Unset Primitive Projections.
        Record t : Set := {
          code_hash : CodeHash;
          gas_limit : GasLimit;
          endowment : Endowment;
          exec_input : Args;
          salt : Salt;
          return_type : RetType;
          _phantom : core.marker.PhantomData (E * ContractRef);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_code_hash : Notation.Dot "code_hash" := {
          Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
        }.
        Global Instance Get_AF_code_hash
          : Notation.DoubleColon t "code_hash" := {
          Notation.double_colon '(Build_t x0 _ _ _ _ _ _) := x0;
        }.
        Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
          Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
        }.
        Global Instance Get_AF_gas_limit
          : Notation.DoubleColon t "gas_limit" := {
          Notation.double_colon '(Build_t _ x1 _ _ _ _ _) := x1;
        }.
        Global Instance Get_endowment : Notation.Dot "endowment" := {
          Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
        }.
        Global Instance Get_AF_endowment
          : Notation.DoubleColon t "endowment" := {
          Notation.double_colon '(Build_t _ _ x2 _ _ _ _) := x2;
        }.
        Global Instance Get_exec_input : Notation.Dot "exec_input" := {
          Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
        }.
        Global Instance Get_AF_exec_input
          : Notation.DoubleColon t "exec_input" := {
          Notation.double_colon '(Build_t _ _ _ x3 _ _ _) := x3;
        }.
        Global Instance Get_salt : Notation.Dot "salt" := {
          Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
        }.
        Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
          Notation.double_colon '(Build_t _ _ _ _ x4 _ _) := x4;
        }.
        Global Instance Get_return_type : Notation.Dot "return_type" := {
          Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
        }.
        Global Instance Get_AF_return_type
          : Notation.DoubleColon t "return_type" := {
          Notation.double_colon '(Build_t _ _ _ _ _ x5 _) := x5;
        }.
        Global Instance Get__phantom : Notation.Dot "_phantom" := {
          Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
        }.
        Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
          Notation.double_colon '(Build_t _ _ _ _ _ _ x6) := x6;
        }.
      End CreateBuilder.
    End CreateBuilder.
    Definition CreateBuilder
        (E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set)
        `{ink_env.types.Environment.Trait E}
        : Set :=
      CreateBuilder.t
        (E := E)
        (ContractRef := ContractRef)
        (CodeHash := CodeHash)
        (GasLimit := GasLimit)
        (Endowment := Endowment)
        (Args := Args)
        (Salt := Salt)
        (RetType := RetType).
  End create_builder.
End call.

Module engine.
  Module off_chain.
    Module call_data.
      Module CallData.
        Unset Primitive Projections.
        Record t : Set := {
          bytes : alloc.vec.Vec u8;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_bytes : Notation.Dot "bytes" := {
          Notation.dot '(Build_t x0) := x0;
        }.
        Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
          Notation.double_colon '(Build_t x0) := x0;
        }.
      End CallData.
      Definition CallData : Set := CallData.t.
      
      Module
        Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
        Global Hint Resolve I : core.
      End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Parameter clone :
            forall `{H' : State.Trait},
            (ref Self) ->
              M (H := H') ink_env.engine.off_chain.call_data.CallData.
        
        Global Instance Method_clone `{H' : State.Trait} :
          Notation.Dot "clone" := {
          Notation.dot := clone;
        }.
        
        Global Instance I : core.clone.Clone.Trait Self := {
          core.clone.Clone.clone `{H' : State.Trait} := clone;
        }.
        Global Hint Resolve I : core.
      End Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
        }.
        Global Hint Resolve I : core.
      End
        Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Parameter eq :
            forall `{H' : State.Trait},
            (ref Self) ->
              (ref ink_env.engine.off_chain.call_data.CallData) ->
              M (H := H') bool.
        
        Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
          Notation.dot := eq;
        }.
        
        Global Instance I
          : core.cmp.PartialEq.Trait Self
              (Rhs := core.cmp.PartialEq.Default.Rhs Self)
            := {
          core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
        }.
        Global Hint Resolve I : core.
      End
        Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Global Instance I : core.marker.StructuralEq.Trait Self := {
        }.
        Global Hint Resolve I : core.
      End
        Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Parameter assert_receiver_is_total_eq :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') unit.
        
        Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
          Notation.Dot "assert_receiver_is_total_eq" := {
          Notation.dot := assert_receiver_is_total_eq;
        }.
        
        Global Instance I : core.cmp.Eq.Trait Self := {
        }.
        Global Hint Resolve I : core.
      End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Parameter size_hint :
            forall `{H' : State.Trait},
            (ref Self) -> M (H := H') usize.
        
        Global Instance Method_size_hint `{H' : State.Trait} :
          Notation.Dot "size_hint" := {
          Notation.dot := size_hint;
        }.
        
        Parameter encode_to :
            forall
              `{H' : State.Trait}
              {T : Set}
              `{parity_scale_codec.codec.Output.Trait T}
              `{core.marker.Sized.Trait T},
            (ref Self) -> (mut_ref T) -> M (H := H') unit.
        
        Global Instance Method_encode_to `{H' : State.Trait} :
          Notation.Dot "encode_to" := {
          Notation.dot := encode_to;
        }.
        
        Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
        }.
        Global Hint Resolve I : core.
      End
        Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
      
      Module
        Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
        Definition Self := ink_env.engine.off_chain.call_data.CallData.
        
        Parameter decode :
            forall
              `{H' : State.Trait}
              {I : Set}
              `{parity_scale_codec.codec.Input.Trait I},
            (mut_ref I) ->
              M (H := H')
                (core.result.Result Self parity_scale_codec.error.Error).
        
        Global Instance AssociatedFunction_decode `{H' : State.Trait} :
          Notation.DoubleColon Self "decode" := {
          Notation.double_colon := decode;
        }.
        
        Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
          parity_scale_codec.codec.Decode.decode `{H' : State.Trait} := decode;
        }.
        Global Hint Resolve I : core.
      End
        Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
    End call_data.
    
    Module impls.
      Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
        Definition Self := ink_env.hash.Blake2x128.
        
        Parameter hash :
            forall `{H' : State.Trait},
            (ref (Slice u8)) ->
              (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
              M (H := H') unit.
        
        Global Instance AssociatedFunction_hash `{H' : State.Trait} :
          Notation.DoubleColon Self "hash" := {
          Notation.double_colon := hash;
        }.
        
        Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
          ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
        }.
        Global Hint Resolve I : core.
      End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
      
      Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
        Definition Self := ink_env.hash.Blake2x256.
        
        Parameter hash :
            forall `{H' : State.Trait},
            (ref (Slice u8)) ->
              (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
              M (H := H') unit.
        
        Global Instance AssociatedFunction_hash `{H' : State.Trait} :
          Notation.DoubleColon Self "hash" := {
          Notation.double_colon := hash;
        }.
        
        Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
          ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
        }.
        Global Hint Resolve I : core.
      End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
      
      Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
        Definition Self := ink_env.hash.Sha2x256.
        
        Parameter hash :
            forall `{H' : State.Trait},
            (ref (Slice u8)) ->
              (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
              M (H := H') unit.
        
        Global Instance AssociatedFunction_hash `{H' : State.Trait} :
          Notation.DoubleColon Self "hash" := {
          Notation.double_colon := hash;
        }.
        
        Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
          ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
        }.
        Global Hint Resolve I : core.
      End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
      
      Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
        Definition Self := ink_env.hash.Keccak256.
        
        Parameter hash :
            forall `{H' : State.Trait},
            (ref (Slice u8)) ->
              (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
              M (H := H') unit.
        
        Global Instance AssociatedFunction_hash `{H' : State.Trait} :
          Notation.DoubleColon Self "hash" := {
          Notation.double_colon := hash;
        }.
        
        Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
          ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
        }.
        Global Hint Resolve I : core.
      End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
      
      Module
        Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
        Definition Self :=
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
        
        Parameter from :
            forall `{H' : State.Trait},
            ink_engine.ext.Error -> M (H := H') Self.
        
        Global Instance AssociatedFunction_from `{H' : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I
          : core.convert.From.Trait Self (T := ink_engine.ext.Error) := {
          core.convert.From.from `{H' : State.Trait} := from;
        }.
        Global Hint Resolve I : core.
      End
        Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
      
      Module TopicsBuilder.
        Unset Primitive Projections.
        Record t : Set := {
          topics : alloc.vec.Vec (alloc.vec.Vec u8);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_topics : Notation.Dot "topics" := {
          Notation.dot '(Build_t x0) := x0;
        }.
        Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
          Notation.double_colon '(Build_t x0) := x0;
        }.
      End TopicsBuilder.
      Definition TopicsBuilder : Set := TopicsBuilder.t.
      
      Module
        Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
        Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
        
        Parameter default :
            forall `{H' : State.Trait},
            M (H := H') ink_env.engine.off_chain.impls.TopicsBuilder.
        
        Global Instance AssociatedFunction_default `{H' : State.Trait} :
          Notation.DoubleColon Self "default" := {
          Notation.double_colon := default;
        }.
        
        Global Instance I : core.default.Default.Trait Self := {
          core.default.Default.default `{H' : State.Trait} := default;
        }.
        Global Hint Resolve I : core.
      End
        Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      
      Module
        Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
        Section
          Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
          Context {E : Set}.
          Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
          
          Definition Output : Set := alloc.vec.Vec u8.
          
          Parameter expect :
              forall `{H' : State.Trait},
              (mut_ref Self) -> usize -> M (H := H') unit.
          
          Global Instance Method_expect `{H' : State.Trait} :
            Notation.Dot "expect" := {
            Notation.dot := expect;
          }.
          
          Parameter push_topic :
              forall
                `{H' : State.Trait}
                {T : Set}
                `{parity_scale_codec.codec.Encode.Trait T},
              (mut_ref Self) -> (ref T) -> M (H := H') unit.
          
          Global Instance Method_push_topic `{H' : State.Trait} :
            Notation.Dot "push_topic" := {
            Notation.dot := push_topic;
          }.
          
          Parameter output :
              forall `{H' : State.Trait},
              Self -> M (H := H') Output.
          
          Global Instance Method_output `{H' : State.Trait} :
            Notation.Dot "output" := {
            Notation.dot := output;
          }.
          
          Global Instance I
            : ink_env.topics.TopicsBuilderBackend.Trait Self (E := E) := {
            ink_env.topics.TopicsBuilderBackend.Output := Output;
            ink_env.topics.TopicsBuilderBackend.expect `{H' : State.Trait}
              :=
              expect;
            ink_env.topics.TopicsBuilderBackend.push_topic `{H' : State.Trait}
              :=
              push_topic;
            ink_env.topics.TopicsBuilderBackend.output `{H' : State.Trait}
              :=
              output;
          }.
        End
          Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
        Global Hint Resolve I : core.
      End
        Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      
      Module
        Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
        Definition Self := ink_env.engine.off_chain.EnvInstance.
        
        Parameter set_contract_storage :
            forall
              `{H' : State.Trait}
              {K V : Set}
              `{parity_scale_codec.codec.Encode.Trait K}
              `{ink_storage_traits.storage.Storable.Trait V},
            (mut_ref Self) ->
              (ref K) ->
              (ref V) ->
              M (H := H') (core.option.Option u32).
        
        Global Instance Method_set_contract_storage `{H' : State.Trait} :
          Notation.Dot "set_contract_storage" := {
          Notation.dot := set_contract_storage;
        }.
        
        Parameter get_contract_storage :
            forall
              `{H' : State.Trait}
              {K R : Set}
              `{parity_scale_codec.codec.Encode.Trait K}
              `{ink_storage_traits.storage.Storable.Trait R},
            (mut_ref Self) ->
              (ref K) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  (core.option.Option R)).
        
        Global Instance Method_get_contract_storage `{H' : State.Trait} :
          Notation.Dot "get_contract_storage" := {
          Notation.dot := get_contract_storage;
        }.
        
        Parameter take_contract_storage :
            forall
              `{H' : State.Trait}
              {K R : Set}
              `{parity_scale_codec.codec.Encode.Trait K}
              `{ink_storage_traits.storage.Storable.Trait R},
            (mut_ref Self) ->
              (ref K) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  (core.option.Option R)).
        
        Global Instance Method_take_contract_storage `{H' : State.Trait} :
          Notation.Dot "take_contract_storage" := {
          Notation.dot := take_contract_storage;
        }.
        
        Parameter contains_contract_storage :
            forall
              `{H' : State.Trait}
              {K : Set}
              `{parity_scale_codec.codec.Encode.Trait K},
            (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32).
        
        Global Instance Method_contains_contract_storage `{H' : State.Trait} :
          Notation.Dot "contains_contract_storage" := {
          Notation.dot := contains_contract_storage;
        }.
        
        Parameter clear_contract_storage :
            forall
              `{H' : State.Trait}
              {K : Set}
              `{parity_scale_codec.codec.Encode.Trait K},
            (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32).
        
        Global Instance Method_clear_contract_storage `{H' : State.Trait} :
          Notation.Dot "clear_contract_storage" := {
          Notation.dot := clear_contract_storage;
        }.
        
        Parameter decode_input :
            forall
              `{H' : State.Trait}
              {T : Set}
              `{parity_scale_codec.codec.Decode.Trait T},
            (mut_ref Self) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  T).
        
        Global Instance Method_decode_input `{H' : State.Trait} :
          Notation.Dot "decode_input" := {
          Notation.dot := decode_input;
        }.
        
        Parameter return_value :
            forall
              `{H' : State.Trait}
              {R : Set}
              `{parity_scale_codec.codec.Encode.Trait R},
            (mut_ref Self) ->
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
              ->
              (ref R) ->
              M (H := H') Empty_set.
        
        Global Instance Method_return_value `{H' : State.Trait} :
          Notation.Dot "return_value" := {
          Notation.dot := return_value;
        }.
        
        Parameter debug_message :
            forall `{H' : State.Trait},
            (mut_ref Self) -> (ref str) -> M (H := H') unit.
        
        Global Instance Method_debug_message `{H' : State.Trait} :
          Notation.Dot "debug_message" := {
          Notation.dot := debug_message;
        }.
        
        Parameter hash_bytes :
            forall
              `{H' : State.Trait}
              {H : Set}
              `{ink_env.hash.CryptoHash.Trait H},
            (mut_ref Self) ->
              (ref (Slice u8)) ->
              (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
              M (H := H') unit.
        
        Global Instance Method_hash_bytes `{H' : State.Trait} :
          Notation.Dot "hash_bytes" := {
          Notation.dot := hash_bytes;
        }.
        
        Parameter hash_encoded :
            forall
              `{H' : State.Trait}
              {H T : Set}
              `{ink_env.hash.CryptoHash.Trait H}
              `{parity_scale_codec.codec.Encode.Trait T},
            (mut_ref Self) ->
              (ref T) ->
              (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
              M (H := H') unit.
        
        Global Instance Method_hash_encoded `{H' : State.Trait} :
          Notation.Dot "hash_encoded" := {
          Notation.dot := hash_encoded;
        }.
        
        Parameter ecdsa_recover :
            forall `{H' : State.Trait},
            (mut_ref Self) ->
              (ref (list u8)) ->
              (ref (list u8)) ->
              (mut_ref (list u8)) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  unit).
        
        Global Instance Method_ecdsa_recover `{H' : State.Trait} :
          Notation.Dot "ecdsa_recover" := {
          Notation.dot := ecdsa_recover;
        }.
        
        Parameter ecdsa_to_eth_address :
            forall `{H' : State.Trait},
            (mut_ref Self) ->
              (ref (list u8)) ->
              (mut_ref (list u8)) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  unit).
        
        Global Instance Method_ecdsa_to_eth_address `{H' : State.Trait} :
          Notation.Dot "ecdsa_to_eth_address" := {
          Notation.dot := ecdsa_to_eth_address;
        }.
        
        Parameter call_chain_extension :
            forall
              `{H' : State.Trait}
              {I T E ErrorCode F D : Set}
              `{parity_scale_codec.codec.Encode.Trait I}
              `{parity_scale_codec.codec.Decode.Trait T}
              `{core.convert.From.Trait E (T := ErrorCode)}
              `{core.ops.function.FnOnce.Trait F (Args := u32)}
              `{core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))},
            (mut_ref Self) ->
              u32 ->
              (ref I) ->
              F ->
              D ->
              M (H := H') (core.result.Result T E).
        
        Global Instance Method_call_chain_extension `{H' : State.Trait} :
          Notation.Dot "call_chain_extension" := {
          Notation.dot := call_chain_extension;
        }.
        
        Parameter set_code_hash :
            forall `{H' : State.Trait},
            (mut_ref Self) ->
              (ref (Slice u8)) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  unit).
        
        Global Instance Method_set_code_hash `{H' : State.Trait} :
          Notation.Dot "set_code_hash" := {
          Notation.dot := set_code_hash;
        }.
        
        Global Instance I
          : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
                Self
            := {
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.set_contract_storage
            `{H' : State.Trait}
            :=
            set_contract_storage;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.get_contract_storage
            `{H' : State.Trait}
            :=
            get_contract_storage;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.take_contract_storage
            `{H' : State.Trait}
            :=
            take_contract_storage;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.contains_contract_storage
            `{H' : State.Trait}
            :=
            contains_contract_storage;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.clear_contract_storage
            `{H' : State.Trait}
            :=
            clear_contract_storage;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.decode_input
            `{H' : State.Trait}
            :=
            decode_input;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.return_value
            `{H' : State.Trait}
            :=
            return_value;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.debug_message
            `{H' : State.Trait}
            :=
            debug_message;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.hash_bytes
            `{H' : State.Trait}
            :=
            hash_bytes;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.hash_encoded
            `{H' : State.Trait}
            :=
            hash_encoded;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.ecdsa_recover
            `{H' : State.Trait}
            :=
            ecdsa_recover;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.ecdsa_to_eth_address
            `{H' : State.Trait}
            :=
            ecdsa_to_eth_address;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.call_chain_extension
            `{H' : State.Trait}
            :=
            call_chain_extension;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.set_code_hash
            `{H' : State.Trait}
            :=
            set_code_hash;
        }.
        Global Hint Resolve I : core.
      End
        Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
      
      Module
        Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
        Definition Self := ink_env.engine.off_chain.EnvInstance.
        
        Parameter caller :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') E::type["AccountId"].
        
        Global Instance Method_caller `{H' : State.Trait} :
          Notation.Dot "caller" := {
          Notation.dot := caller;
        }.
        
        Parameter transferred_value :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') E::type["Balance"].
        
        Global Instance Method_transferred_value `{H' : State.Trait} :
          Notation.Dot "transferred_value" := {
          Notation.dot := transferred_value;
        }.
        
        Parameter gas_left :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') u64.
        
        Global Instance Method_gas_left `{H' : State.Trait} :
          Notation.Dot "gas_left" := {
          Notation.dot := gas_left;
        }.
        
        Parameter block_timestamp :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') E::type["Timestamp"].
        
        Global Instance Method_block_timestamp `{H' : State.Trait} :
          Notation.Dot "block_timestamp" := {
          Notation.dot := block_timestamp;
        }.
        
        Parameter account_id :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') E::type["AccountId"].
        
        Global Instance Method_account_id `{H' : State.Trait} :
          Notation.Dot "account_id" := {
          Notation.dot := account_id;
        }.
        
        Parameter balance :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') E::type["Balance"].
        
        Global Instance Method_balance `{H' : State.Trait} :
          Notation.Dot "balance" := {
          Notation.dot := balance;
        }.
        
        Parameter block_number :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') E::type["BlockNumber"].
        
        Global Instance Method_block_number `{H' : State.Trait} :
          Notation.Dot "block_number" := {
          Notation.dot := block_number;
        }.
        
        Parameter minimum_balance :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') E::type["Balance"].
        
        Global Instance Method_minimum_balance `{H' : State.Trait} :
          Notation.Dot "minimum_balance" := {
          Notation.dot := minimum_balance;
        }.
        
        Parameter emit_event :
            forall
              `{H' : State.Trait}
              {E Event : Set}
              `{ink_env.types.Environment.Trait E}
              `{ink_env.topics.Topics.Trait Event}
              `{parity_scale_codec.codec.Encode.Trait Event},
            (mut_ref Self) -> Event -> M (H := H') unit.
        
        Global Instance Method_emit_event `{H' : State.Trait} :
          Notation.Dot "emit_event" := {
          Notation.dot := emit_event;
        }.
        
        Parameter invoke_contract :
            forall
              `{H' : State.Trait}
              {E Args R : Set}
              `{ink_env.types.Environment.Trait E}
              `{parity_scale_codec.codec.Encode.Trait Args}
              `{parity_scale_codec.codec.Decode.Trait R},
            (mut_ref Self) ->
              (ref
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
                  E
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    E)
                  Args
                  R))
              ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  (ink_primitives.MessageResult R)).
        
        Global Instance Method_invoke_contract `{H' : State.Trait} :
          Notation.Dot "invoke_contract" := {
          Notation.dot := invoke_contract;
        }.
        
        Parameter invoke_contract_delegate :
            forall
              `{H' : State.Trait}
              {E Args R : Set}
              `{ink_env.types.Environment.Trait E}
              `{parity_scale_codec.codec.Encode.Trait Args}
              `{parity_scale_codec.codec.Decode.Trait R},
            (mut_ref Self) ->
              (ref
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
                  E
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
                    E)
                  Args
                  R))
              ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  (ink_primitives.MessageResult R)).
        
        Global Instance Method_invoke_contract_delegate `{H' : State.Trait} :
          Notation.Dot "invoke_contract_delegate" := {
          Notation.dot := invoke_contract_delegate;
        }.
        
        Parameter instantiate_contract :
            forall
              `{H' : State.Trait}
              {E ContractRef Args Salt R : Set}
              `{ink_env.types.Environment.Trait E}
              `{ink_env.call.create_builder.FromAccountId.Trait ContractRef
                  (T := E)}
              `{parity_scale_codec.codec.Encode.Trait Args}
              `{core.convert.AsRef.Trait Salt (T := Slice u8)}
              `{ink_env.call.create_builder.ConstructorReturnType.Trait R
                  (C := ContractRef)},
            (mut_ref Self) ->
              (ref
                (ink_env.call.create_builder.CreateParams
                  E
                  ContractRef
                  Args
                  Salt
                  R))
              ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  (ink_primitives.ConstructorResult
                    (ink_env.call.create_builder.ConstructorReturnType.Output
                      (Self := R)))).
        
        Global Instance Method_instantiate_contract `{H' : State.Trait} :
          Notation.Dot "instantiate_contract" := {
          Notation.dot := instantiate_contract;
        }.
        
        Parameter terminate_contract :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> E::type["AccountId"] -> M (H := H') Empty_set.
        
        Global Instance Method_terminate_contract `{H' : State.Trait} :
          Notation.Dot "terminate_contract" := {
          Notation.dot := terminate_contract;
        }.
        
        Parameter transfer :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) ->
              E::type["AccountId"] ->
              E::type["Balance"] ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  unit).
        
        Global Instance Method_transfer `{H' : State.Trait} :
          Notation.Dot "transfer" := {
          Notation.dot := transfer;
        }.
        
        Parameter weight_to_fee :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> u64 -> M (H := H') E::type["Balance"].
        
        Global Instance Method_weight_to_fee `{H' : State.Trait} :
          Notation.Dot "weight_to_fee" := {
          Notation.dot := weight_to_fee;
        }.
        
        Parameter is_contract :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> (ref E::type["AccountId"]) -> M (H := H') bool.
        
        Global Instance Method_is_contract `{H' : State.Trait} :
          Notation.Dot "is_contract" := {
          Notation.dot := is_contract;
        }.
        
        Parameter caller_is_origin :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) -> M (H := H') bool.
        
        Global Instance Method_caller_is_origin `{H' : State.Trait} :
          Notation.Dot "caller_is_origin" := {
          Notation.dot := caller_is_origin;
        }.
        
        Parameter code_hash :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) ->
              (ref E::type["AccountId"]) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  E::type["Hash"]).
        
        Global Instance Method_code_hash `{H' : State.Trait} :
          Notation.Dot "code_hash" := {
          Notation.dot := code_hash;
        }.
        
        Parameter own_code_hash :
            forall
              `{H' : State.Trait}
              {E : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  E::type["Hash"]).
        
        Global Instance Method_own_code_hash `{H' : State.Trait} :
          Notation.Dot "own_code_hash" := {
          Notation.dot := own_code_hash;
        }.
        
        Parameter call_runtime :
            forall
              `{H' : State.Trait}
              {E Call : Set}
              `{ink_env.types.Environment.Trait E},
            (mut_ref Self) ->
              (ref Call) ->
              M (H := H')
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                  unit).
        
        Global Instance Method_call_runtime `{H' : State.Trait} :
          Notation.Dot "call_runtime" := {
          Notation.dot := call_runtime;
        }.
        
        Global Instance I
          : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.Trait
                Self
            := {
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.caller
            `{H' : State.Trait}
            :=
            caller;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.transferred_value
            `{H' : State.Trait}
            :=
            transferred_value;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.weight_to_fee
            `{H' : State.Trait}
            :=
            weight_to_fee;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.gas_left
            `{H' : State.Trait}
            :=
            gas_left;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.block_timestamp
            `{H' : State.Trait}
            :=
            block_timestamp;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.account_id
            `{H' : State.Trait}
            :=
            account_id;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.balance
            `{H' : State.Trait}
            :=
            balance;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.block_number
            `{H' : State.Trait}
            :=
            block_number;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.minimum_balance
            `{H' : State.Trait}
            :=
            minimum_balance;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.emit_event
            `{H' : State.Trait}
            :=
            emit_event;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.invoke_contract
            `{H' : State.Trait}
            :=
            invoke_contract;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.invoke_contract_delegate
            `{H' : State.Trait}
            :=
            invoke_contract_delegate;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.instantiate_contract
            `{H' : State.Trait}
            :=
            instantiate_contract;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.terminate_contract
            `{H' : State.Trait}
            :=
            terminate_contract;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.transfer
            `{H' : State.Trait}
            :=
            transfer;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.is_contract
            `{H' : State.Trait}
            :=
            is_contract;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.caller_is_origin
            `{H' : State.Trait}
            :=
            caller_is_origin;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.code_hash
            `{H' : State.Trait}
            :=
            code_hash;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.own_code_hash
            `{H' : State.Trait}
            :=
            own_code_hash;
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.call_runtime
            `{H' : State.Trait}
            :=
            call_runtime;
        }.
        Global Hint Resolve I : core.
      End
        Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
    End impls.
    
    Module types.
      Module
        Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
        Definition Self :=
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EmittedEvent.
        
        Parameter from :
            forall `{H' : State.Trait},
            ink_engine.test_api.EmittedEvent -> M (H := H') Self.
        
        Global Instance AssociatedFunction_from `{H' : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I
          : core.convert.From.Trait Self (T := ink_engine.test_api.EmittedEvent)
            := {
          core.convert.From.from `{H' : State.Trait} := from;
        }.
        Global Hint Resolve I : core.
      End
        Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
      
      Module
        Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
        Definition Self :=
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
        
        Parameter from :
            forall `{H' : State.Trait},
            ink_engine.Error -> M (H := H') Self.
        
        Global Instance AssociatedFunction_from `{H' : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I
          : core.convert.From.Trait Self (T := ink_engine.Error) := {
          core.convert.From.from `{H' : State.Trait} := from;
        }.
        Global Hint Resolve I : core.
      End
        Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
      
      Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
        Definition Self := ink_env.engine.off_chain.AccountError.
        
        Parameter from :
            forall `{H' : State.Trait},
            ink_engine.types.AccountError -> M (H := H') Self.
        
        Global Instance AssociatedFunction_from `{H' : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I
          : core.convert.From.Trait Self (T := ink_engine.types.AccountError)
            := {
          core.convert.From.from `{H' : State.Trait} := from;
        }.
        Global Hint Resolve I : core.
      End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
      
      Module
        Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
        Definition Self :=
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
        
        Parameter from :
            forall `{H' : State.Trait},
            ink_engine.types.AccountError -> M (H := H') Self.
        
        Global Instance AssociatedFunction_from `{H' : State.Trait} :
          Notation.DoubleColon Self "from" := {
          Notation.double_colon := from;
        }.
        
        Global Instance I
          : core.convert.From.Trait Self (T := ink_engine.types.AccountError)
            := {
          core.convert.From.from `{H' : State.Trait} := from;
        }.
        Global Hint Resolve I : core.
      End
        Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    End types.
    
    Module EnvInstance.
      Unset Primitive Projections.
      Record t : Set := {
        engine : ink_engine.ext.Engine;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_engine : Notation.Dot "engine" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_engine : Notation.DoubleColon t "engine" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End EnvInstance.
    Definition EnvInstance : Set := EnvInstance.t.
    
    Module
      Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
      Definition Self := ink_env.engine.off_chain.EnvInstance.
      
      Parameter on_instance :
          forall
            `{H' : State.Trait}
            {F R : Set}
            `{core.ops.function.FnOnce.Trait F (Args := mut_ref Self)},
          F -> M (H := H') R.
      
      Global Instance AssociatedFunction_on_instance `{H' : State.Trait} :
        Notation.DoubleColon Self "on_instance" := {
        Notation.double_colon := on_instance;
      }.
      
      Global Instance I
        : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.OnInstance.Trait
              Self
          := {
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.OnInstance.on_instance
          `{H' : State.Trait}
          :=
          on_instance;
      }.
      Global Hint Resolve I : core.
    End
      Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
    
    Module AccountError.
      Inductive t : Set :=
      | Decoding (_ : parity_scale_codec.error.Error)
      | UnexpectedUserAccount
      | NoAccountForId (_ : alloc.vec.Vec u8).
    End AccountError.
    Definition AccountError := AccountError.t.
    
    Module OffChainError.
      Inductive t : Set :=
      | Account (_ : ink_env.engine.off_chain.AccountError)
      | UninitializedBlocks
      | UninitializedExecutionContext
      | UnregisteredChainExtension.
    End OffChainError.
    Definition OffChainError := OffChainError.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
    
    Module Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_env.engine.off_chain.AccountError ->
            M (H := H') ink_env.engine.off_chain.OffChainError.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self
            (T := ink_env.engine.off_chain.AccountError)
          := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
    
    Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Parameter eq :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref ink_env.engine.off_chain.OffChainError) ->
            M (H := H') bool.
      
      Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I
        : core.cmp.PartialEq.Trait Self
            (Rhs := core.cmp.PartialEq.Default.Rhs Self)
          := {
        core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
    
    Module
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Global Instance I : core.marker.StructuralEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
    
    Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
      Definition Self := ink_env.engine.off_chain.OffChainError.
      
      Parameter assert_receiver_is_total_eq :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') unit.
      
      Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
    
    Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
    
    Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Parameter from :
          forall `{H' : State.Trait},
          parity_scale_codec.error.Error ->
            M (H := H') ink_env.engine.off_chain.AccountError.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := parity_scale_codec.error.Error)
          := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
    
    Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Parameter eq :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref ink_env.engine.off_chain.AccountError) ->
            M (H := H') bool.
      
      Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I
        : core.cmp.PartialEq.Trait Self
            (Rhs := core.cmp.PartialEq.Default.Rhs Self)
          := {
        core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
    
    Module
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Global Instance I : core.marker.StructuralEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
    
    Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Parameter assert_receiver_is_total_eq :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') unit.
      
      Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
  End off_chain.
End engine.

Module hash.
  Module private.
    Module Sealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End Sealed.
  End private.
  
  Module HashOutput.
    Class Trait (Self : Set) `{ink_env.hash.private.Sealed.Trait Self} :
        Type := {
      Type_ : Set;
      _ : Sigma `(core.default.Default.Trait Type_), unit;
    }.
    
    Global Instance Method_Type_ `(Trait)
      : Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End HashOutput.
  
  Module CryptoHash.
    Class Trait (Self : Set) `{ink_env.hash.HashOutput.Trait Self} : Type := {
      hash `{H' : State.Trait}
        :
        (ref (Slice u8)) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
          M (H := H') unit;
    }.
    
    Global Instance Method_hash `{H' : State.Trait} `(Trait)
      : Notation.Dot "hash" := {
      Notation.dot := hash;
    }.
  End CryptoHash.
  
  Module Sha2x256.
    Inductive t : Set :=
    .
  End Sha2x256.
  Definition Sha2x256 := Sha2x256.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_marker_Copy_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_clone_Clone_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_env.hash.Sha2x256.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) -> (ref ink_env.hash.Sha2x256) -> M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_env_hash_Sha2x256.
  
  Module Impl_core_cmp_Eq_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_hash_Sha2x256.
  
  Module Keccak256.
    Inductive t : Set :=
    .
  End Keccak256.
  Definition Keccak256 := Keccak256.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_hash_Keccak256.
  
  Module Impl_core_marker_Copy_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_hash_Keccak256.
  
  Module Impl_core_clone_Clone_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_env.hash.Keccak256.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_hash_Keccak256.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Keccak256.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) -> (ref ink_env.hash.Keccak256) -> M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_hash_Keccak256.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_env_hash_Keccak256.
  
  Module Impl_core_cmp_Eq_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_hash_Keccak256.
  
  Module Blake2x256.
    Inductive t : Set :=
    .
  End Blake2x256.
  Definition Blake2x256 := Blake2x256.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_marker_Copy_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_clone_Clone_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_env.hash.Blake2x256.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) -> (ref ink_env.hash.Blake2x256) -> M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x256.
  
  Module Impl_core_cmp_Eq_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_hash_Blake2x256.
  
  Module Blake2x128.
    Inductive t : Set :=
    .
  End Blake2x128.
  Definition Blake2x128 := Blake2x128.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_marker_Copy_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_clone_Clone_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_env.hash.Blake2x128.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) -> (ref ink_env.hash.Blake2x128) -> M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x128.
  
  Module Impl_core_cmp_Eq_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_hash_Blake2x128.
  
  Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Global Instance I : ink_env.hash.private.Sealed.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Sha2x256.
  
  Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Global Instance I : ink_env.hash.private.Sealed.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Keccak256.
  
  Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Global Instance I : ink_env.hash.private.Sealed.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x256.
  
  Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Global Instance I : ink_env.hash.private.Sealed.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x128.
  
  Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Definition Type : Set := list u8.
    
    #[refine]
    Global Instance I : ink_env.hash.HashOutput.Trait Self := {
      ink_env.hash.HashOutput.Type := Type;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Sha2x256.
  
  Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Definition Type : Set := list u8.
    
    #[refine]
    Global Instance I : ink_env.hash.HashOutput.Trait Self := {
      ink_env.hash.HashOutput.Type := Type;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Keccak256.
  
  Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Definition Type : Set := list u8.
    
    #[refine]
    Global Instance I : ink_env.hash.HashOutput.Trait Self := {
      ink_env.hash.HashOutput.Type := Type;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x256.
  
  Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Definition Type : Set := list u8.
    
    #[refine]
    Global Instance I : ink_env.hash.HashOutput.Trait Self := {
      ink_env.hash.HashOutput.Type := Type;
    }.
    eauto.
    Defined.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x128.
End hash.

Module topics.
  Module TopicsBuilderBackend.
    Class Trait (Self : Set) {E : Set} `{ink_env.types.Environment.Trait E} :
        Type := {
      Output : Set;
      expect `{H' : State.Trait} : (mut_ref Self) -> usize -> M (H := H') unit;
      push_topic
        `{H' : State.Trait}
        {T : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait T}
        :
        (mut_ref Self) -> (ref T) -> M (H := H') unit;
      output `{H' : State.Trait} : Self -> M (H := H') Output;
    }.
    
    Global Instance Method_Output `(Trait)
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_expect `{H' : State.Trait} `(Trait)
      : Notation.Dot "expect" := {
      Notation.dot := expect;
    }.
    Global Instance Method_push_topic `{H' : State.Trait} `(Trait)
      : Notation.Dot "push_topic" := {
      Notation.dot {T : Set} `{H'0 : parity_scale_codec.codec.Encode.Trait T}
        :=
        push_topic (T := T) (H'0 := H'0);
    }.
    Global Instance Method_output `{H' : State.Trait} `(Trait)
      : Notation.Dot "output" := {
      Notation.dot := output;
    }.
  End TopicsBuilderBackend.
  
  Module TopicsBuilder.
    Section TopicsBuilder.
      Context {S E B : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        backend : B;
        state : core.marker.PhantomData (S * E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_backend : Notation.Dot "backend" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_backend : Notation.DoubleColon t "backend" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get_state : Notation.Dot "state" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF_state : Notation.DoubleColon t "state" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End TopicsBuilder.
  End TopicsBuilder.
  Definition TopicsBuilder (S E B : Set) : Set :=
    TopicsBuilder.t (S := S) (E := E) (B := B).
  
  Module
    Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
    Section
      Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
      Context {E B : Set}.
      Definition Self :=
        ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B.
      
      Parameter from : forall `{H' : State.Trait}, B -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I : core.convert.From.Trait Self (T := B) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
    End
      Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
    Global Hint Resolve I : core.
  End
    Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
  
  Module state.
    Module Uninit.
      Inductive t : Set :=
      .
    End Uninit.
    Definition Uninit := Uninit.t.
    
    Module HasRemainingTopics.
      Inductive t : Set :=
      .
    End HasRemainingTopics.
    Definition HasRemainingTopics := HasRemainingTopics.t.
    
    Module NoRemainingTopics.
      Inductive t : Set :=
      .
    End NoRemainingTopics.
    Definition NoRemainingTopics := NoRemainingTopics.t.
  End state.
  
  Module SomeRemainingTopics.
    Class Trait (Self : Set) : Type := {
      Next : Set;
    }.
    
    Global Instance Method_Next `(Trait)
      : Notation.DoubleColonType Self "Next" := {
      Notation.double_colon_type := Next;
    }.
  End SomeRemainingTopics.
  
  Module EventTopicsAmount.
    Class Trait (Self : Set) : Type := {
      AMOUNT `{H' : State.Trait} : usize;
    }.
    
    Global Instance Method_AMOUNT `{H' : State.Trait} `(Trait)
      : Notation.Dot "AMOUNT" := {
      Notation.dot := AMOUNT;
    }.
  End EventTopicsAmount.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
      ink_env.topics.SomeRemainingTopics.Next := Next;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 2.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 3.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 4.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 5.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 6.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 7.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 8.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 9.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 10.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 11.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 12.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 13.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 14.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 15.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 16.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 17.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 18.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 19.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 20.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 21.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 22.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 23.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 24.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 25.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 26.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 27.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 28.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 29.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 30.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 31.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 32.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition Next : Set := ink_env.topics.state.NoRemainingTopics.
    
    Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
      ink_env.topics.SomeRemainingTopics.Next := Next;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
    Definition Self := list ink_env.topics.state.HasRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 1.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  
  Module
    Impl_ink_env_topics_EventTopicsAmount_for_ink_env_topics_state_NoRemainingTopics.
    Definition Self := ink_env.topics.state.NoRemainingTopics.
    
    Definition AMOUNT `{H' : State.Trait} := Pure 0.
    
    Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_ink_env_topics_state_NoRemainingTopics.
  
  Module Topics.
    Class Trait (Self : Set) : Type := {
      RemainingTopics : Set;
      _ : Sigma `(ink_env.topics.EventTopicsAmount.Trait RemainingTopics), unit;
      topics
        `{H' : State.Trait}
        {E B : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
        :
        (ref Self) ->
          (ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B) ->
          M (H := H') (ink_env.topics.TopicsBuilderBackend.Output (Self := B));
    }.
    
    Global Instance Method_RemainingTopics `(Trait)
      : Notation.DoubleColonType Self "RemainingTopics" := {
      Notation.double_colon_type := RemainingTopics;
    }.
    Global Instance Method_topics `{H' : State.Trait} `(Trait)
      : Notation.Dot "topics" := {
      Notation.dot
        {E B : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
        :=
        topics (E := E) (B := B) (H'0 := H'0) (H'1 := H'1);
    }.
  End Topics.
  
  Module PrefixedValue.
    Section PrefixedValue.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        prefix : ref (Slice u8);
        value : ref T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_prefix : Notation.Dot "prefix" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_prefix : Notation.DoubleColon t "prefix" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get_value : Notation.Dot "value" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End PrefixedValue.
  End PrefixedValue.
  Definition PrefixedValue (T : Set) : Set := PrefixedValue.t (T := T).
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
    Section
      Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
      Context {X : Set}.
      Definition Self := ink_env.topics.PrefixedValue X.
      
      Parameter size_hint :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') usize.
      
      Global Instance Method_size_hint `{H' : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Parameter encode_to :
          forall
            `{H' : State.Trait}
            {T : Set}
            `{parity_scale_codec.codec.Output.Trait T}
            `{core.marker.Sized.Trait T},
          (ref Self) -> (mut_ref T) -> M (H := H') unit.
      
      Global Instance Method_encode_to `{H' : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
    Global Hint Resolve I : core.
  End Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
End topics.

Module backend_and_call_builder_and_engine_and_engine_test_api_and_error.
  Module Error.
    Inductive t : Set :=
    | Decode (_ : parity_scale_codec.error.Error)
    | OffChain (_ : ink_env.engine.off_chain.OffChainError)
    | CalleeTrapped
    | CalleeReverted
    | KeyNotFound
    | _BelowSubsistenceThreshold
    | TransferFailed
    | _EndowmentTooLow
    | CodeNotFound
    | NotCallable
    | Unknown
    | LoggingDisabled
    | CallRuntimeFailed
    | EcdsaRecoveryFailed.
  End Error.
  Definition Error := Error.t.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  
  Module
    Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Parameter from :
        forall `{H' : State.Trait},
        parity_scale_codec.error.Error ->
          M (H := H')
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I
      : core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  
  Module
    Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Parameter from :
        forall `{H' : State.Trait},
        ink_env.engine.off_chain.OffChainError ->
          M (H := H')
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I
      : core.convert.From.Trait Self
          (T := ink_env.engine.off_chain.OffChainError)
        := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_marker_StructuralPartialEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  
  Module
    Impl_core_cmp_PartialEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)
          ->
          M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_cmp_PartialEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  
  Module
    Impl_core_marker_StructuralEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_marker_StructuralEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  
  Module
    Impl_core_cmp_Eq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_cmp_Eq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  
  Definition Result (T : Set) : Set :=
    core.result.Result
      T
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Module EmittedEvent.
    Unset Primitive Projections.
    Record t : Set := {
      topics : alloc.vec.Vec (alloc.vec.Vec u8);
      data : alloc.vec.Vec u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_topics : Notation.Dot "topics" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_data : Notation.Dot "data" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_data : Notation.DoubleColon t "data" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End EmittedEvent.
  Definition EmittedEvent : Set := EmittedEvent.t.
  
  Module
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EmittedEvent.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) ->
          M (H := H')
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EmittedEvent.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
  
  Parameter set_account_balance :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      T::type["AccountId"] -> T::type["Balance"] -> M (H := H') unit.
  
  Parameter get_account_balance :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      T::type["AccountId"] ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            T::type["Balance"]).
  
  Parameter register_chain_extension :
      forall
        `{H' : State.Trait}
        {E : Set}
        `{ink_engine.chain_extension.ChainExtension.Trait E},
      E -> M (H := H') unit.
  
  Parameter recorded_debug_messages :
      forall `{H' : State.Trait},
      M (H := H') ink_engine.test_api.RecordedDebugMessages.
  
  Parameter set_clear_storage_disabled :
      forall `{H' : State.Trait},
      bool -> M (H := H') unit.
  
  Parameter advance_block :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      M (H := H') unit.
  
  Parameter set_caller :
      forall
        `{H' : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait
              (ink_env.types.Environment.AccountId (Self := T))
            (T := list u8)},
      T::type["AccountId"] -> M (H := H') unit.
  
  Parameter set_callee :
      forall
        `{H' : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait
              (ink_env.types.Environment.AccountId (Self := T))
            (T := list u8)},
      T::type["AccountId"] -> M (H := H') unit.
  
  Parameter set_contract :
      forall
        `{H' : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait
              (ink_env.types.Environment.AccountId (Self := T))
            (T := list u8)},
      T::type["AccountId"] -> M (H := H') unit.
  
  Parameter is_contract :
      forall
        `{H' : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait
              (ink_env.types.Environment.AccountId (Self := T))
            (T := list u8)},
      T::type["AccountId"] -> M (H := H') bool.
  
  Parameter callee :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      M (H := H') T::type["AccountId"].
  
  Parameter get_contract_storage_rw :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      (ref T::type["AccountId"]) -> M (H := H') (usize * usize).
  
  Parameter set_value_transferred :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      T::type["Balance"] -> M (H := H') unit.
  
  Parameter transfer_in :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      T::type["Balance"] -> M (H := H') unit.
  
  Parameter count_used_storage_cells :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      (ref T::type["AccountId"]) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            usize).
  
  Parameter set_block_timestamp :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      T::type["Timestamp"] -> M (H := H') unit.
  
  Parameter set_block_number :
      forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
      T::type["BlockNumber"] -> M (H := H') unit.
  
  Module DefaultAccounts.
    Section DefaultAccounts.
      Context {T : Set}.
      Context `{ink_env.types.Environment.Trait T}.
      Unset Primitive Projections.
      Record t : Set := {
        alice : T::type["AccountId"];
        bob : T::type["AccountId"];
        charlie : T::type["AccountId"];
        django : T::type["AccountId"];
        eve : T::type["AccountId"];
        frank : T::type["AccountId"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_alice : Notation.Dot "alice" := {
        Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
      }.
      Global Instance Get_AF_alice : Notation.DoubleColon t "alice" := {
        Notation.double_colon '(Build_t x0 _ _ _ _ _) := x0;
      }.
      Global Instance Get_bob : Notation.Dot "bob" := {
        Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
      }.
      Global Instance Get_AF_bob : Notation.DoubleColon t "bob" := {
        Notation.double_colon '(Build_t _ x1 _ _ _ _) := x1;
      }.
      Global Instance Get_charlie : Notation.Dot "charlie" := {
        Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
      }.
      Global Instance Get_AF_charlie : Notation.DoubleColon t "charlie" := {
        Notation.double_colon '(Build_t _ _ x2 _ _ _) := x2;
      }.
      Global Instance Get_django : Notation.Dot "django" := {
        Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
      }.
      Global Instance Get_AF_django : Notation.DoubleColon t "django" := {
        Notation.double_colon '(Build_t _ _ _ x3 _ _) := x3;
      }.
      Global Instance Get_eve : Notation.Dot "eve" := {
        Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
      }.
      Global Instance Get_AF_eve : Notation.DoubleColon t "eve" := {
        Notation.double_colon '(Build_t _ _ _ _ x4 _) := x4;
      }.
      Global Instance Get_frank : Notation.Dot "frank" := {
        Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
      }.
      Global Instance Get_AF_frank : Notation.DoubleColon t "frank" := {
        Notation.double_colon '(Build_t _ _ _ _ _ x5) := x5;
      }.
    End DefaultAccounts.
  End DefaultAccounts.
  Definition DefaultAccounts
      (T : Set)
      `{ink_env.types.Environment.Trait T}
      : Set :=
    DefaultAccounts.t (T := T).
  
  Parameter run_test :
      forall
        `{H' : State.Trait}
        {T F : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.ops.function.FnOnce.Trait F
            (Args := ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DefaultAccounts
              T)}
        `{core.convert.From.Trait
              (ink_env.types.Environment.AccountId (Self := T))
            (T := list u8)},
      F ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter default_accounts :
      forall
        `{H' : State.Trait}
        {T : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.convert.From.Trait
              (ink_env.types.Environment.AccountId (Self := T))
            (T := list u8)},
      M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DefaultAccounts
            T).
  
  Parameter recorded_events_ret_ty :
      Sigma (Ty : Set) `(core.iter.traits.iterator.Iterator.Trait Ty),
      unit.
  Parameter recorded_events :
      forall `{H' : State.Trait},
      M (H := H') (projT1 recorded_events_ret_ty).
  
  Parameter assert_contract_termination :
      forall
        `{H' : State.Trait}
        {T F : Set}
        `{ink_env.types.Environment.Trait T}
        `{core.ops.function.FnMut.Trait F (Args := unit)}
        `{core.panic.unwind_safe.UnwindSafe.Trait F}
        `{core.fmt.Debug.Trait
              (ink_env.types.Environment.AccountId (Self := T))}
        `{core.fmt.Debug.Trait (ink_env.types.Environment.Balance (Self := T))},
      F -> T::type["AccountId"] -> T::type["Balance"] -> M (H := H') unit.
  
  Module CallFlags.
    Unset Primitive Projections.
    Record t : Set := {
      forward_input : bool;
      clone_input : bool;
      tail_call : bool;
      allow_reentry : bool;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_forward_input : Notation.Dot "forward_input" := {
      Notation.dot '(Build_t x0 _ _ _) := x0;
    }.
    Global Instance Get_AF_forward_input
      : Notation.DoubleColon t "forward_input" := {
      Notation.double_colon '(Build_t x0 _ _ _) := x0;
    }.
    Global Instance Get_clone_input : Notation.Dot "clone_input" := {
      Notation.dot '(Build_t _ x1 _ _) := x1;
    }.
    Global Instance Get_AF_clone_input
      : Notation.DoubleColon t "clone_input" := {
      Notation.double_colon '(Build_t _ x1 _ _) := x1;
    }.
    Global Instance Get_tail_call : Notation.Dot "tail_call" := {
      Notation.dot '(Build_t _ _ x2 _) := x2;
    }.
    Global Instance Get_AF_tail_call : Notation.DoubleColon t "tail_call" := {
      Notation.double_colon '(Build_t _ _ x2 _) := x2;
    }.
    Global Instance Get_allow_reentry : Notation.Dot "allow_reentry" := {
      Notation.dot '(Build_t _ _ _ x3) := x3;
    }.
    Global Instance Get_AF_allow_reentry
      : Notation.DoubleColon t "allow_reentry" := {
      Notation.double_colon '(Build_t _ _ _ x3) := x3;
    }.
  End CallFlags.
  Definition CallFlags : Set := CallFlags.t.
  
  Module CallParams.
    Section CallParams.
      Context {E CallType Args R : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        call_type : CallType;
        call_flags
          :
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags;
        _return_type : ink_env.call.common.ReturnType R;
        exec_input : ink_env.call.execution_input.ExecutionInput Args;
        _phantom : core.marker.PhantomData (E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_call_type : Notation.Dot "call_type" := {
        Notation.dot '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_AF_call_type : Notation.DoubleColon t "call_type" := {
        Notation.double_colon '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_call_flags : Notation.Dot "call_flags" := {
        Notation.dot '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get_AF_call_flags
        : Notation.DoubleColon t "call_flags" := {
        Notation.double_colon '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get__return_type : Notation.Dot "_return_type" := {
        Notation.dot '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_AF__return_type
        : Notation.DoubleColon t "_return_type" := {
        Notation.double_colon '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get_AF_exec_input
        : Notation.DoubleColon t "exec_input" := {
        Notation.double_colon '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ _ _ _ x4) := x4;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon '(Build_t _ _ _ _ x4) := x4;
      }.
    End CallParams.
  End CallParams.
  Definition CallParams
      (E CallType Args R : Set)
      `{ink_env.types.Environment.Trait E}
      : Set :=
    CallParams.t (E := E) (CallType := CallType) (Args := Args) (R := R).
  
  Module Call.
    Section Call.
      Context {E : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        callee : E::type["AccountId"];
        gas_limit : ink_env.types.Gas;
        transferred_value : E::type["Balance"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_callee : Notation.Dot "callee" := {
        Notation.dot '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_AF_callee : Notation.DoubleColon t "callee" := {
        Notation.double_colon '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
        Notation.double_colon '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_transferred_value
        : Notation.Dot "transferred_value" := {
        Notation.dot '(Build_t _ _ x2) := x2;
      }.
      Global Instance Get_AF_transferred_value
        : Notation.DoubleColon t "transferred_value" := {
        Notation.double_colon '(Build_t _ _ x2) := x2;
      }.
    End Call.
  End Call.
  Definition Call (E : Set) `{ink_env.types.Environment.Trait E} : Set :=
    Call.t (E := E).
  
  Module DelegateCall.
    Section DelegateCall.
      Context {E : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        code_hash : E::type["Hash"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End DelegateCall.
  End DelegateCall.
  Definition DelegateCall
      (E : Set)
      `{ink_env.types.Environment.Trait E}
      : Set :=
    DelegateCall.t (E := E).
  
  Module ReturnFlags.
    Unset Primitive Projections.
    Record t : Set := {
      value : u32;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End ReturnFlags.
  Definition ReturnFlags : Set := ReturnFlags.t.
  
  Module EnvBackend.
    Class Trait (Self : Set) : Type := {
      set_contract_storage
        `{H' : State.Trait}
        {K V : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        `{H'1 : ink_storage_traits.storage.Storable.Trait V}
        :
        (mut_ref Self) ->
          (ref K) ->
          (ref V) ->
          M (H := H') (core.option.Option u32);
      get_contract_storage
        `{H' : State.Trait}
        {K R : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        `{H'1 : ink_storage_traits.storage.Storable.Trait R}
        :
        (mut_ref Self) ->
          (ref K) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (core.option.Option R));
      take_contract_storage
        `{H' : State.Trait}
        {K R : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        `{H'1 : ink_storage_traits.storage.Storable.Trait R}
        :
        (mut_ref Self) ->
          (ref K) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (core.option.Option R));
      contains_contract_storage
        `{H' : State.Trait}
        {K : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        :
        (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32);
      clear_contract_storage
        `{H' : State.Trait}
        {K : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        :
        (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32);
      decode_input
        `{H' : State.Trait}
        {T : Set}
        `{H'0 : parity_scale_codec.codec.Decode.Trait T}
        :
        (mut_ref Self) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              T);
      return_value
        `{H' : State.Trait}
        {R : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait R}
        :
        (mut_ref Self) ->
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
          ->
          (ref R) ->
          M (H := H') Empty_set;
      debug_message `{H' : State.Trait}
        :
        (mut_ref Self) -> (ref str) -> M (H := H') unit;
      hash_bytes
        `{H' : State.Trait}
        {H : Set}
        `{H'0 : ink_env.hash.CryptoHash.Trait H}
        :
        (mut_ref Self) ->
          (ref (Slice u8)) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
          M (H := H') unit;
      hash_encoded
        `{H' : State.Trait}
        {H T : Set}
        `{H'0 : ink_env.hash.CryptoHash.Trait H}
        `{H'1 : parity_scale_codec.codec.Encode.Trait T}
        :
        (mut_ref Self) ->
          (ref T) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
          M (H := H') unit;
      ecdsa_recover `{H' : State.Trait}
        :
        (mut_ref Self) ->
          (ref (list u8)) ->
          (ref (list u8)) ->
          (mut_ref (list u8)) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
      ecdsa_to_eth_address `{H' : State.Trait}
        :
        (mut_ref Self) ->
          (ref (list u8)) ->
          (mut_ref (list u8)) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
      call_chain_extension
        `{H' : State.Trait}
        {I T E ErrorCode F D : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait I}
        `{H'1 : parity_scale_codec.codec.Decode.Trait T}
        `{H'2 : core.convert.From.Trait E (T := ErrorCode)}
        `{H'3 : core.ops.function.FnOnce.Trait F (Args := u32)}
        `{H'4 : core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))}
        :
        (mut_ref Self) ->
          u32 ->
          (ref I) ->
          F ->
          D ->
          M (H := H') (core.result.Result T E);
      set_code_hash `{H' : State.Trait}
        :
        (mut_ref Self) ->
          (ref (Slice u8)) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
    }.
    
    Global Instance Method_set_contract_storage `{H' : State.Trait} `(Trait)
      : Notation.Dot "set_contract_storage" := {
      Notation.dot
        {K V : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        `{H'1 : ink_storage_traits.storage.Storable.Trait V}
        :=
        set_contract_storage (K := K) (V := V) (H'0 := H'0) (H'1 := H'1);
    }.
    Global Instance Method_get_contract_storage `{H' : State.Trait} `(Trait)
      : Notation.Dot "get_contract_storage" := {
      Notation.dot
        {K R : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        `{H'1 : ink_storage_traits.storage.Storable.Trait R}
        :=
        get_contract_storage (K := K) (R := R) (H'0 := H'0) (H'1 := H'1);
    }.
    Global Instance Method_take_contract_storage `{H' : State.Trait} `(Trait)
      : Notation.Dot "take_contract_storage" := {
      Notation.dot
        {K R : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        `{H'1 : ink_storage_traits.storage.Storable.Trait R}
        :=
        take_contract_storage (K := K) (R := R) (H'0 := H'0) (H'1 := H'1);
    }.
    Global Instance
        Method_contains_contract_storage
        `{H' : State.Trait}
        `(Trait)
      : Notation.Dot "contains_contract_storage" := {
      Notation.dot {K : Set} `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        :=
        contains_contract_storage (K := K) (H'0 := H'0);
    }.
    Global Instance Method_clear_contract_storage `{H' : State.Trait} `(Trait)
      : Notation.Dot "clear_contract_storage" := {
      Notation.dot {K : Set} `{H'0 : parity_scale_codec.codec.Encode.Trait K}
        :=
        clear_contract_storage (K := K) (H'0 := H'0);
    }.
    Global Instance Method_decode_input `{H' : State.Trait} `(Trait)
      : Notation.Dot "decode_input" := {
      Notation.dot {T : Set} `{H'0 : parity_scale_codec.codec.Decode.Trait T}
        :=
        decode_input (T := T) (H'0 := H'0);
    }.
    Global Instance Method_return_value `{H' : State.Trait} `(Trait)
      : Notation.Dot "return_value" := {
      Notation.dot {R : Set} `{H'0 : parity_scale_codec.codec.Encode.Trait R}
        :=
        return_value (R := R) (H'0 := H'0);
    }.
    Global Instance Method_debug_message `{H' : State.Trait} `(Trait)
      : Notation.Dot "debug_message" := {
      Notation.dot := debug_message;
    }.
    Global Instance Method_hash_bytes `{H' : State.Trait} `(Trait)
      : Notation.Dot "hash_bytes" := {
      Notation.dot {H : Set} `{H'0 : ink_env.hash.CryptoHash.Trait H}
        :=
        hash_bytes (H := H) (H'0 := H'0);
    }.
    Global Instance Method_hash_encoded `{H' : State.Trait} `(Trait)
      : Notation.Dot "hash_encoded" := {
      Notation.dot
        {H T : Set}
        `{H'0 : ink_env.hash.CryptoHash.Trait H}
        `{H'1 : parity_scale_codec.codec.Encode.Trait T}
        :=
        hash_encoded (H := H) (T := T) (H'0 := H'0) (H'1 := H'1);
    }.
    Global Instance Method_ecdsa_recover `{H' : State.Trait} `(Trait)
      : Notation.Dot "ecdsa_recover" := {
      Notation.dot := ecdsa_recover;
    }.
    Global Instance Method_ecdsa_to_eth_address `{H' : State.Trait} `(Trait)
      : Notation.Dot "ecdsa_to_eth_address" := {
      Notation.dot := ecdsa_to_eth_address;
    }.
    Global Instance Method_call_chain_extension `{H' : State.Trait} `(Trait)
      : Notation.Dot "call_chain_extension" := {
      Notation.dot
        {I T E ErrorCode F D : Set}
        `{H'0 : parity_scale_codec.codec.Encode.Trait I}
        `{H'1 : parity_scale_codec.codec.Decode.Trait T}
        `{H'2 : core.convert.From.Trait E (T := ErrorCode)}
        `{H'3 : core.ops.function.FnOnce.Trait F (Args := u32)}
        `{H'4 : core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))}
        :=
        call_chain_extension
            (I := I)
            (T := T)
            (E := E)
            (ErrorCode := ErrorCode)
            (F := F)
            (D := D)
          (H'0 := H'0)
          (H'1 := H'1)
          (H'2 := H'2)
          (H'3 := H'3)
          (H'4 := H'4);
    }.
    Global Instance Method_set_code_hash `{H' : State.Trait} `(Trait)
      : Notation.Dot "set_code_hash" := {
      Notation.dot := set_code_hash;
    }.
  End EnvBackend.
  
  Module TypedEnvBackend.
    Class Trait
        (Self : Set)
        `{ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
              Self} :
        Type := {
      caller
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') E::type["AccountId"];
      transferred_value
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') E::type["Balance"];
      weight_to_fee
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> u64 -> M (H := H') E::type["Balance"];
      gas_left
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') u64;
      block_timestamp
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') E::type["Timestamp"];
      account_id
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') E::type["AccountId"];
      balance
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') E::type["Balance"];
      block_number
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') E::type["BlockNumber"];
      minimum_balance
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') E::type["Balance"];
      emit_event
        `{H' : State.Trait}
        {E Event : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : ink_env.topics.Topics.Trait Event}
        `{H'2 : parity_scale_codec.codec.Encode.Trait Event}
        :
        (mut_ref Self) -> Event -> M (H := H') unit;
      invoke_contract
        `{H' : State.Trait}
        {E Args R : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : parity_scale_codec.codec.Encode.Trait Args}
        `{H'2 : parity_scale_codec.codec.Decode.Trait R}
        :
        (mut_ref Self) ->
          (ref
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
              E
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                E)
              Args
              R))
          ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.MessageResult R));
      invoke_contract_delegate
        `{H' : State.Trait}
        {E Args R : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : parity_scale_codec.codec.Encode.Trait Args}
        `{H'2 : parity_scale_codec.codec.Decode.Trait R}
        :
        (mut_ref Self) ->
          (ref
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
              E
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
                E)
              Args
              R))
          ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.MessageResult R));
      instantiate_contract
        `{H' : State.Trait}
        {E ContractRef Args Salt R : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1
          :
          ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
        `{H'2 : parity_scale_codec.codec.Encode.Trait Args}
        `{H'3 : core.convert.AsRef.Trait Salt (T := Slice u8)}
        `{H'4
          :
          ink_env.call.create_builder.ConstructorReturnType.Trait R
            (C := ContractRef)}
        :
        (mut_ref Self) ->
          (ref
            (ink_env.call.create_builder.CreateParams
              E
              ContractRef
              Args
              Salt
              R))
          ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.ConstructorResult
                (ink_env.call.create_builder.ConstructorReturnType.Output
                  (Self := R))));
      terminate_contract
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> E::type["AccountId"] -> M (H := H') Empty_set;
      transfer
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) ->
          E::type["AccountId"] ->
          E::type["Balance"] ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
      is_contract
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> (ref E::type["AccountId"]) -> M (H := H') bool;
      caller_is_origin
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) -> M (H := H') bool;
      code_hash
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) ->
          (ref E::type["AccountId"]) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              E::type["Hash"]);
      own_code_hash
        `{H' : State.Trait}
        {E : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        :
        (mut_ref Self) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              E::type["Hash"]);
      call_runtime
        `{H' : State.Trait}
        {E Call : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : parity_scale_codec.codec.Encode.Trait Call}
        :
        (mut_ref Self) ->
          (ref Call) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit);
    }.
    
    Global Instance Method_caller `{H' : State.Trait} `(Trait)
      : Notation.Dot "caller" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        caller (E := E) (H'0 := H'0);
    }.
    Global Instance Method_transferred_value `{H' : State.Trait} `(Trait)
      : Notation.Dot "transferred_value" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        transferred_value (E := E) (H'0 := H'0);
    }.
    Global Instance Method_weight_to_fee `{H' : State.Trait} `(Trait)
      : Notation.Dot "weight_to_fee" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        weight_to_fee (E := E) (H'0 := H'0);
    }.
    Global Instance Method_gas_left `{H' : State.Trait} `(Trait)
      : Notation.Dot "gas_left" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        gas_left (E := E) (H'0 := H'0);
    }.
    Global Instance Method_block_timestamp `{H' : State.Trait} `(Trait)
      : Notation.Dot "block_timestamp" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        block_timestamp (E := E) (H'0 := H'0);
    }.
    Global Instance Method_account_id `{H' : State.Trait} `(Trait)
      : Notation.Dot "account_id" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        account_id (E := E) (H'0 := H'0);
    }.
    Global Instance Method_balance `{H' : State.Trait} `(Trait)
      : Notation.Dot "balance" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        balance (E := E) (H'0 := H'0);
    }.
    Global Instance Method_block_number `{H' : State.Trait} `(Trait)
      : Notation.Dot "block_number" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        block_number (E := E) (H'0 := H'0);
    }.
    Global Instance Method_minimum_balance `{H' : State.Trait} `(Trait)
      : Notation.Dot "minimum_balance" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        minimum_balance (E := E) (H'0 := H'0);
    }.
    Global Instance Method_emit_event `{H' : State.Trait} `(Trait)
      : Notation.Dot "emit_event" := {
      Notation.dot
        {E Event : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : ink_env.topics.Topics.Trait Event}
        `{H'2 : parity_scale_codec.codec.Encode.Trait Event}
        :=
        emit_event (E := E) (Event := Event)
          (H'0 := H'0)
          (H'1 := H'1)
          (H'2 := H'2);
    }.
    Global Instance Method_invoke_contract `{H' : State.Trait} `(Trait)
      : Notation.Dot "invoke_contract" := {
      Notation.dot
        {E Args R : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : parity_scale_codec.codec.Encode.Trait Args}
        `{H'2 : parity_scale_codec.codec.Decode.Trait R}
        :=
        invoke_contract (E := E) (Args := Args) (R := R)
          (H'0 := H'0)
          (H'1 := H'1)
          (H'2 := H'2);
    }.
    Global Instance Method_invoke_contract_delegate `{H' : State.Trait} `(Trait)
      : Notation.Dot "invoke_contract_delegate" := {
      Notation.dot
        {E Args R : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : parity_scale_codec.codec.Encode.Trait Args}
        `{H'2 : parity_scale_codec.codec.Decode.Trait R}
        :=
        invoke_contract_delegate (E := E) (Args := Args) (R := R)
          (H'0 := H'0)
          (H'1 := H'1)
          (H'2 := H'2);
    }.
    Global Instance Method_instantiate_contract `{H' : State.Trait} `(Trait)
      : Notation.Dot "instantiate_contract" := {
      Notation.dot
        {E ContractRef Args Salt R : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1
          :
          ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
        `{H'2 : parity_scale_codec.codec.Encode.Trait Args}
        `{H'3 : core.convert.AsRef.Trait Salt (T := Slice u8)}
        `{H'4
          :
          ink_env.call.create_builder.ConstructorReturnType.Trait R
            (C := ContractRef)}
        :=
        instantiate_contract
            (E := E)
            (ContractRef := ContractRef)
            (Args := Args)
            (Salt := Salt)
            (R := R)
          (H'0 := H'0)
          (H'1 := H'1)
          (H'2 := H'2)
          (H'3 := H'3)
          (H'4 := H'4);
    }.
    Global Instance Method_terminate_contract `{H' : State.Trait} `(Trait)
      : Notation.Dot "terminate_contract" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        terminate_contract (E := E) (H'0 := H'0);
    }.
    Global Instance Method_transfer `{H' : State.Trait} `(Trait)
      : Notation.Dot "transfer" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        transfer (E := E) (H'0 := H'0);
    }.
    Global Instance Method_is_contract `{H' : State.Trait} `(Trait)
      : Notation.Dot "is_contract" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        is_contract (E := E) (H'0 := H'0);
    }.
    Global Instance Method_caller_is_origin `{H' : State.Trait} `(Trait)
      : Notation.Dot "caller_is_origin" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        caller_is_origin (E := E) (H'0 := H'0);
    }.
    Global Instance Method_code_hash `{H' : State.Trait} `(Trait)
      : Notation.Dot "code_hash" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        code_hash (E := E) (H'0 := H'0);
    }.
    Global Instance Method_own_code_hash `{H' : State.Trait} `(Trait)
      : Notation.Dot "own_code_hash" := {
      Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
        :=
        own_code_hash (E := E) (H'0 := H'0);
    }.
    Global Instance Method_call_runtime `{H' : State.Trait} `(Trait)
      : Notation.Dot "call_runtime" := {
      Notation.dot
        {E Call : Set}
        `{H'0 : ink_env.types.Environment.Trait E}
        `{H'1 : parity_scale_codec.codec.Encode.Trait Call}
        :=
        call_runtime (E := E) (Call := Call) (H'0 := H'0) (H'1 := H'1);
    }.
  End TypedEnvBackend.
  
  Module OnInstance.
    Class Trait
        (Self : Set)
        `{ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
              Self}
        `{ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.Trait
              Self} :
        Type := {
      on_instance
        `{H' : State.Trait}
        {F R : Set}
        `{H'0 : core.ops.function.FnOnce.Trait F (Args := mut_ref Self)}
        :
        F -> M (H := H') R;
    }.
    
    Global Instance Method_on_instance `{H' : State.Trait} `(Trait)
      : Notation.Dot "on_instance" := {
      Notation.dot
        {F R : Set}
        `{H'0 : core.ops.function.FnOnce.Trait F (Args := mut_ref Self)}
        :=
        on_instance (F := F) (R := R) (H'0 := H'0);
    }.
  End OnInstance.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallParams_E_CallType_Args_R.
    Section
      Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallParams_E_CallType_Args_R.
      Context {E CallType Args R : Set}.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
          E
          CallType
          Args
          R.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallParams_E_CallType_Args_R.
    Global Hint Resolve I : core.
  End
    Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallParams_E_CallType_Args_R.
  
  Module CallBuilder.
    Section CallBuilder.
      Context {E CallType Args RetType : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        call_type : CallType;
        call_flags
          :
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags;
        exec_input : Args;
        return_type : RetType;
        _phantom : core.marker.PhantomData (E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_call_type : Notation.Dot "call_type" := {
        Notation.dot '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_AF_call_type : Notation.DoubleColon t "call_type" := {
        Notation.double_colon '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_call_flags : Notation.Dot "call_flags" := {
        Notation.dot '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get_AF_call_flags
        : Notation.DoubleColon t "call_flags" := {
        Notation.double_colon '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_AF_exec_input
        : Notation.DoubleColon t "exec_input" := {
        Notation.double_colon '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_return_type : Notation.Dot "return_type" := {
        Notation.dot '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get_AF_return_type
        : Notation.DoubleColon t "return_type" := {
        Notation.double_colon '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ _ _ _ x4) := x4;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon '(Build_t _ _ _ _ x4) := x4;
      }.
    End CallBuilder.
  End CallBuilder.
  Definition CallBuilder
      (E CallType Args RetType : Set)
      `{ink_env.types.Environment.Trait E}
      : Set :=
    CallBuilder.t
      (E := E)
      (CallType := CallType)
      (Args := Args)
      (RetType := RetType).
  
  Parameter build_call :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            (ink_env.call.common.Unset_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                E))
            (ink_env.call.common.Unset_
              (ink_env.call.execution_input.ExecutionInput
                ink_env.call.execution_input.EmptyArgumentList))
            (ink_env.call.common.Unset_ (ink_env.call.common.ReturnType unit))).
  
  Module
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Call_E.
    Section
      Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Call_E.
      Context {E : Set}.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
          E.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                E).
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End
      Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Call_E.
    Global Hint Resolve I : core.
  End
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Call_E.
  
  Module
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_CallType_Args_RetType.
    Section
      Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_CallType_Args_RetType.
      Context {E CallType Args RetType : Set}.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
          E
          CallType
          Args
          RetType.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                E
                CallType
                Args
                RetType).
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End
      Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_CallType_Args_RetType.
    Global Hint Resolve I : core.
  End
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_CallType_Args_RetType.
  
  Module
    Impl_core_default_Default_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_ReturnFlags.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags.
    
    Parameter default :
        forall `{H' : State.Trait},
        M (H := H')
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_default_Default_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_ReturnFlags.
  
  Module
    Impl_core_marker_Copy_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_marker_Copy_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
  
  Module
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) ->
          M (H := H')
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
  
  Module
    Impl_core_default_Default_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
    
    Parameter default :
        forall `{H' : State.Trait},
        M (H := H')
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_default_Default_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
End backend_and_call_builder_and_engine_and_engine_test_api_and_error.

Module api.
  Parameter caller :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') E::type["AccountId"].
  
  Parameter transferred_value :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') E::type["Balance"].
  
  Parameter weight_to_fee :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      ink_env.types.Gas -> M (H := H') E::type["Balance"].
  
  Parameter gas_left :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') ink_env.types.Gas.
  
  Parameter block_timestamp :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') E::type["Timestamp"].
  
  Parameter account_id :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') E::type["AccountId"].
  
  Parameter balance :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') E::type["Balance"].
  
  Parameter block_number :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') E::type["BlockNumber"].
  
  Parameter minimum_balance :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') E::type["Balance"].
  
  Parameter emit_event :
      forall
        `{H' : State.Trait}
        {E Event : Set}
        `{ink_env.types.Environment.Trait E}
        `{ink_env.topics.Topics.Trait Event}
        `{parity_scale_codec.codec.Encode.Trait Event},
      Event -> M (H := H') unit.
  
  Parameter set_contract_storage :
      forall
        `{H' : State.Trait}
        {K V : Set}
        `{parity_scale_codec.codec.Encode.Trait K}
        `{ink_storage_traits.storage.Storable.Trait V},
      (ref K) -> (ref V) -> M (H := H') (core.option.Option u32).
  
  Parameter get_contract_storage :
      forall
        `{H' : State.Trait}
        {K R : Set}
        `{parity_scale_codec.codec.Encode.Trait K}
        `{ink_storage_traits.storage.Storable.Trait R},
      (ref K) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (core.option.Option R)).
  
  Parameter take_contract_storage :
      forall
        `{H' : State.Trait}
        {K R : Set}
        `{parity_scale_codec.codec.Encode.Trait K}
        `{ink_storage_traits.storage.Storable.Trait R},
      (ref K) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (core.option.Option R)).
  
  Parameter contains_contract_storage :
      forall
        `{H' : State.Trait}
        {K : Set}
        `{parity_scale_codec.codec.Encode.Trait K},
      (ref K) -> M (H := H') (core.option.Option u32).
  
  Parameter clear_contract_storage :
      forall
        `{H' : State.Trait}
        {K : Set}
        `{parity_scale_codec.codec.Encode.Trait K},
      (ref K) -> M (H := H') (core.option.Option u32).
  
  Parameter invoke_contract :
      forall
        `{H' : State.Trait}
        {E Args R : Set}
        `{ink_env.types.Environment.Trait E}
        `{parity_scale_codec.codec.Encode.Trait Args}
        `{parity_scale_codec.codec.Decode.Trait R},
      (ref
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
            E
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
              E)
            Args
            R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.MessageResult R)).
  
  Parameter invoke_contract_delegate :
      forall
        `{H' : State.Trait}
        {E Args R : Set}
        `{ink_env.types.Environment.Trait E}
        `{parity_scale_codec.codec.Encode.Trait Args}
        `{parity_scale_codec.codec.Decode.Trait R},
      (ref
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
            E
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
              E)
            Args
            R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.MessageResult R)).
  
  Parameter instantiate_contract :
      forall
        `{H' : State.Trait}
        {E ContractRef Args Salt R : Set}
        `{ink_env.types.Environment.Trait E}
        `{ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
        `{parity_scale_codec.codec.Encode.Trait Args}
        `{core.convert.AsRef.Trait Salt (T := Slice u8)}
        `{ink_env.call.create_builder.ConstructorReturnType.Trait R
            (C := ContractRef)},
      (ref (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.ConstructorResult
              (ink_env.call.create_builder.ConstructorReturnType.Output
                (Self := R)))).
  
  Parameter terminate_contract :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      E::type["AccountId"] -> M (H := H') Empty_set.
  
  Parameter transfer :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      E::type["AccountId"] ->
        E::type["Balance"] ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter decode_input :
      forall
        `{H' : State.Trait}
        {T : Set}
        `{parity_scale_codec.codec.Decode.Trait T},
      M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            T).
  
  Parameter return_value :
      forall
        `{H' : State.Trait}
        {R : Set}
        `{parity_scale_codec.codec.Encode.Trait R},
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
        ->
        (ref R) ->
        M (H := H') Empty_set.
  
  Parameter debug_message :
      forall `{H' : State.Trait},
      (ref str) -> M (H := H') unit.
  
  Parameter hash_bytes :
      forall `{H' : State.Trait} {H : Set} `{ink_env.hash.CryptoHash.Trait H},
      (ref (Slice u8)) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
        M (H := H') unit.
  
  Parameter hash_encoded :
      forall
        `{H' : State.Trait}
        {H T : Set}
        `{ink_env.hash.CryptoHash.Trait H}
        `{parity_scale_codec.codec.Encode.Trait T},
      (ref T) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
        M (H := H') unit.
  
  Parameter ecdsa_recover :
      forall `{H' : State.Trait},
      (ref (list u8)) ->
        (ref (list u8)) ->
        (mut_ref (list u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter ecdsa_to_eth_address :
      forall `{H' : State.Trait},
      (ref (list u8)) ->
        (mut_ref (list u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter is_contract :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (ref E::type["AccountId"]) -> M (H := H') bool.
  
  Parameter code_hash :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (ref E::type["AccountId"]) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            E::type["Hash"]).
  
  Parameter own_code_hash :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            E::type["Hash"]).
  
  Parameter caller_is_origin :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      M (H := H') bool.
  
  Parameter set_code_hash :
      forall `{H' : State.Trait},
      (ref (list u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter set_code_hash2 :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (ref E::type["Hash"]) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Parameter call_runtime :
      forall
        `{H' : State.Trait}
        {E Call : Set}
        `{ink_env.types.Environment.Trait E}
        `{parity_scale_codec.codec.Encode.Trait Call},
      (ref Call) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
End api.

Parameter caller :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') E::type["AccountId"].

Parameter transferred_value :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') E::type["Balance"].

Parameter weight_to_fee :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    ink_env.types.Gas -> M (H := H') E::type["Balance"].

Parameter gas_left :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') ink_env.types.Gas.

Parameter block_timestamp :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') E::type["Timestamp"].

Parameter account_id :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') E::type["AccountId"].

Parameter balance :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') E::type["Balance"].

Parameter block_number :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') E::type["BlockNumber"].

Parameter minimum_balance :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') E::type["Balance"].

Parameter emit_event :
    forall
      `{H' : State.Trait}
      {E Event : Set}
      `{ink_env.types.Environment.Trait E}
      `{ink_env.topics.Topics.Trait Event}
      `{parity_scale_codec.codec.Encode.Trait Event},
    Event -> M (H := H') unit.

Parameter set_contract_storage :
    forall
      `{H' : State.Trait}
      {K V : Set}
      `{parity_scale_codec.codec.Encode.Trait K}
      `{ink_storage_traits.storage.Storable.Trait V},
    (ref K) -> (ref V) -> M (H := H') (core.option.Option u32).

Parameter get_contract_storage :
    forall
      `{H' : State.Trait}
      {K R : Set}
      `{parity_scale_codec.codec.Encode.Trait K}
      `{ink_storage_traits.storage.Storable.Trait R},
    (ref K) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (core.option.Option R)).

Parameter take_contract_storage :
    forall
      `{H' : State.Trait}
      {K R : Set}
      `{parity_scale_codec.codec.Encode.Trait K}
      `{ink_storage_traits.storage.Storable.Trait R},
    (ref K) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (core.option.Option R)).

Parameter contains_contract_storage :
    forall
      `{H' : State.Trait}
      {K : Set}
      `{parity_scale_codec.codec.Encode.Trait K},
    (ref K) -> M (H := H') (core.option.Option u32).

Parameter clear_contract_storage :
    forall
      `{H' : State.Trait}
      {K : Set}
      `{parity_scale_codec.codec.Encode.Trait K},
    (ref K) -> M (H := H') (core.option.Option u32).

Parameter invoke_contract :
    forall
      `{H' : State.Trait}
      {E Args R : Set}
      `{ink_env.types.Environment.Trait E}
      `{parity_scale_codec.codec.Encode.Trait Args}
      `{parity_scale_codec.codec.Decode.Trait R},
    (ref
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
          E
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
            E)
          Args
          R))
      ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (ink_primitives.MessageResult R)).

Parameter invoke_contract_delegate :
    forall
      `{H' : State.Trait}
      {E Args R : Set}
      `{ink_env.types.Environment.Trait E}
      `{parity_scale_codec.codec.Encode.Trait Args}
      `{parity_scale_codec.codec.Decode.Trait R},
    (ref
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
          E
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
            E)
          Args
          R))
      ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (ink_primitives.MessageResult R)).

Parameter instantiate_contract :
    forall
      `{H' : State.Trait}
      {E ContractRef Args Salt R : Set}
      `{ink_env.types.Environment.Trait E}
      `{ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
      `{parity_scale_codec.codec.Encode.Trait Args}
      `{core.convert.AsRef.Trait Salt (T := Slice u8)}
      `{ink_env.call.create_builder.ConstructorReturnType.Trait R
          (C := ContractRef)},
    (ref (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
      ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          (ink_primitives.ConstructorResult
            (ink_env.call.create_builder.ConstructorReturnType.Output
              (Self := R)))).

Parameter terminate_contract :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    E::type["AccountId"] -> M (H := H') Empty_set.

Parameter transfer :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    E::type["AccountId"] ->
      E::type["Balance"] ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter decode_input :
    forall
      `{H' : State.Trait}
      {T : Set}
      `{parity_scale_codec.codec.Decode.Trait T},
    M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          T).

Parameter return_value :
    forall
      `{H' : State.Trait}
      {R : Set}
      `{parity_scale_codec.codec.Encode.Trait R},
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
      ->
      (ref R) ->
      M (H := H') Empty_set.

Parameter debug_message :
    forall `{H' : State.Trait},
    (ref str) -> M (H := H') unit.

Parameter hash_bytes :
    forall `{H' : State.Trait} {H : Set} `{ink_env.hash.CryptoHash.Trait H},
    (ref (Slice u8)) ->
      (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
      M (H := H') unit.

Parameter hash_encoded :
    forall
      `{H' : State.Trait}
      {H T : Set}
      `{ink_env.hash.CryptoHash.Trait H}
      `{parity_scale_codec.codec.Encode.Trait T},
    (ref T) ->
      (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
      M (H := H') unit.

Parameter ecdsa_recover :
    forall `{H' : State.Trait},
    (ref (list u8)) ->
      (ref (list u8)) ->
      (mut_ref (list u8)) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter ecdsa_to_eth_address :
    forall `{H' : State.Trait},
    (ref (list u8)) ->
      (mut_ref (list u8)) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter is_contract :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    (ref E::type["AccountId"]) -> M (H := H') bool.

Parameter code_hash :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    (ref E::type["AccountId"]) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          E::type["Hash"]).

Parameter own_code_hash :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          E::type["Hash"]).

Parameter caller_is_origin :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H') bool.

Parameter set_code_hash :
    forall `{H' : State.Trait},
    (ref (list u8)) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter set_code_hash2 :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    (ref E::type["Hash"]) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter call_runtime :
    forall
      `{H' : State.Trait}
      {E Call : Set}
      `{ink_env.types.Environment.Trait E}
      `{parity_scale_codec.codec.Encode.Trait Call},
    (ref Call) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Module BaseArithmetic.
  Unset Primitive Projections.
  Class Trait
      (Self : Set)
      `{core.marker.Sized.Trait Self}
      `{core.convert.From.Trait Self (T := u8)}
      `{num_traits.bounds.Bounded.Trait Self}
      `{core.cmp.Ord.Trait Self}
      `{core.cmp.PartialOrd.Trait Self (Rhs := Self)}
      `{num_traits.identities.Zero.Trait Self}
      `{num_traits.identities.One.Trait Self}
      `{num_traits.bounds.Bounded.Trait Self}
      `{core.ops.arith.Add.Trait Self (Rhs := Self)}
      `{core.ops.arith.AddAssign.Trait Self (Rhs := Self)}
      `{core.ops.arith.Sub.Trait Self (Rhs := Self)}
      `{core.ops.arith.SubAssign.Trait Self (Rhs := Self)}
      `{core.ops.arith.Mul.Trait Self (Rhs := Self)}
      `{core.ops.arith.MulAssign.Trait Self (Rhs := Self)}
      `{core.ops.arith.Div.Trait Self (Rhs := Self)}
      `{core.ops.arith.DivAssign.Trait Self (Rhs := Self)}
      `{num_traits.ops.checked.CheckedMul.Trait Self}
      `{ink_env.arithmetic.Saturating.Trait Self}
      `{core.convert.TryFrom.Trait Self (T := u16)}
      `{core.convert.TryFrom.Trait Self (T := u32)}
      `{core.convert.TryFrom.Trait Self (T := u64)}
      `{core.convert.TryFrom.Trait Self (T := u128)}
      `{core.convert.TryFrom.Trait Self (T := usize)}
      `{core.convert.TryInto.Trait Self (T := u16)}
      `{core.convert.TryInto.Trait Self (T := u32)}
      `{core.convert.TryInto.Trait Self (T := u64)}
      `{core.convert.TryInto.Trait Self (T := u128)}
      `{core.convert.TryInto.Trait Self (T := usize)} :
      Type := {
  }.
  Global Set Primitive Projections.
End BaseArithmetic.

Module Impl_ink_env_arithmetic_BaseArithmetic_for_T.
  Section Impl_ink_env_arithmetic_BaseArithmetic_for_T.
    Context {T : Set}.
    Definition Self := T.
    
    Global Instance I : ink_env.arithmetic.BaseArithmetic.Trait Self := {
    }.
  End Impl_ink_env_arithmetic_BaseArithmetic_for_T.
  Global Hint Resolve I : core.
End Impl_ink_env_arithmetic_BaseArithmetic_for_T.

Module AtLeast32Bit.
  Unset Primitive Projections.
  Class Trait
      (Self : Set)
      `{ink_env.arithmetic.BaseArithmetic.Trait Self}
      `{core.convert.From.Trait Self (T := u16)}
      `{core.convert.From.Trait Self (T := u32)} :
      Type := {
  }.
  Global Set Primitive Projections.
End AtLeast32Bit.

Module Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
  Section Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
    Context {T : Set}.
    Definition Self := T.
    
    Global Instance I : ink_env.arithmetic.AtLeast32Bit.Trait Self := {
    }.
  End Impl_ink_env_arithmetic_AtLeast32Bit_for_T.
  Global Hint Resolve I : core.
End Impl_ink_env_arithmetic_AtLeast32Bit_for_T.

Module AtLeast32BitUnsigned.
  Unset Primitive Projections.
  Class Trait
      (Self : Set)
      `{ink_env.arithmetic.AtLeast32Bit.Trait Self}
      `{num_traits.sign.Unsigned.Trait Self} :
      Type := {
  }.
  Global Set Primitive Projections.
End AtLeast32BitUnsigned.

Module Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
  Section Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
    Context {T : Set}.
    Definition Self := T.
    
    Global Instance I : ink_env.arithmetic.AtLeast32BitUnsigned.Trait Self := {
    }.
  End Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.
  Global Hint Resolve I : core.
End Impl_ink_env_arithmetic_AtLeast32BitUnsigned_for_T.

Module Saturating.
  Class Trait (Self : Set) : Type := {
    saturating_add `{H' : State.Trait} : Self -> Self -> M (H := H') Self;
    saturating_sub `{H' : State.Trait} : Self -> Self -> M (H := H') Self;
    saturating_mul `{H' : State.Trait} : Self -> Self -> M (H := H') Self;
    saturating_pow `{H' : State.Trait} : Self -> usize -> M (H := H') Self;
  }.
  
  Global Instance Method_saturating_add `{H' : State.Trait} `(Trait)
    : Notation.Dot "saturating_add" := {
    Notation.dot := saturating_add;
  }.
  Global Instance Method_saturating_sub `{H' : State.Trait} `(Trait)
    : Notation.Dot "saturating_sub" := {
    Notation.dot := saturating_sub;
  }.
  Global Instance Method_saturating_mul `{H' : State.Trait} `(Trait)
    : Notation.Dot "saturating_mul" := {
    Notation.dot := saturating_mul;
  }.
  Global Instance Method_saturating_pow `{H' : State.Trait} `(Trait)
    : Notation.Dot "saturating_pow" := {
    Notation.dot := saturating_pow;
  }.
End Saturating.

Module Impl_ink_env_arithmetic_Saturating_for_T.
  Section Impl_ink_env_arithmetic_Saturating_for_T.
    Context {T : Set}.
    Definition Self := T.
    
    Parameter saturating_add :
        forall `{H' : State.Trait},
        Self -> Self -> M (H := H') Self.
    
    Global Instance Method_saturating_add `{H' : State.Trait} :
      Notation.Dot "saturating_add" := {
      Notation.dot := saturating_add;
    }.
    
    Parameter saturating_sub :
        forall `{H' : State.Trait},
        Self -> Self -> M (H := H') Self.
    
    Global Instance Method_saturating_sub `{H' : State.Trait} :
      Notation.Dot "saturating_sub" := {
      Notation.dot := saturating_sub;
    }.
    
    Parameter saturating_mul :
        forall `{H' : State.Trait},
        Self -> Self -> M (H := H') Self.
    
    Global Instance Method_saturating_mul `{H' : State.Trait} :
      Notation.Dot "saturating_mul" := {
      Notation.dot := saturating_mul;
    }.
    
    Parameter saturating_pow :
        forall `{H' : State.Trait},
        Self -> usize -> M (H := H') Self.
    
    Global Instance Method_saturating_pow `{H' : State.Trait} :
      Notation.Dot "saturating_pow" := {
      Notation.dot := saturating_pow;
    }.
    
    Global Instance I : ink_env.arithmetic.Saturating.Trait Self := {
      ink_env.arithmetic.Saturating.saturating_add `{H' : State.Trait}
        :=
        saturating_add;
      ink_env.arithmetic.Saturating.saturating_sub `{H' : State.Trait}
        :=
        saturating_sub;
      ink_env.arithmetic.Saturating.saturating_mul `{H' : State.Trait}
        :=
        saturating_mul;
      ink_env.arithmetic.Saturating.saturating_pow `{H' : State.Trait}
        :=
        saturating_pow;
    }.
  End Impl_ink_env_arithmetic_Saturating_for_T.
  Global Hint Resolve I : core.
End Impl_ink_env_arithmetic_Saturating_for_T.

Module Error.
  Inductive t : Set :=
  | Decode (_ : parity_scale_codec.error.Error)
  | OffChain (_ : ink_env.engine.off_chain.OffChainError)
  | CalleeTrapped
  | CalleeReverted
  | KeyNotFound
  | _BelowSubsistenceThreshold
  | TransferFailed
  | _EndowmentTooLow
  | CodeNotFound
  | NotCallable
  | Unknown
  | LoggingDisabled
  | CallRuntimeFailed
  | EcdsaRecoveryFailed.
End Error.
Definition Error := Error.t.

Module
  Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Parameter from :
      forall `{H' : State.Trait},
      parity_scale_codec.error.Error ->
        M (H := H')
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink_env.engine.off_chain.OffChainError ->
        M (H := H')
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := ink_env.engine.off_chain.OffChainError)
      := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralPartialEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module
  Impl_core_cmp_PartialEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) ->
        (ref
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)
        ->
        M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_cmp_PartialEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module
  Impl_core_marker_StructuralEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralEq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module
  Impl_core_cmp_Eq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_cmp_Eq_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Definition Result (T : Set) : Set :=
  core.result.Result
    T
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.

Module EmittedEvent.
  Unset Primitive Projections.
  Record t : Set := {
    topics : alloc.vec.Vec (alloc.vec.Vec u8);
    data : alloc.vec.Vec u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_topics : Notation.Dot "topics" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
    Notation.double_colon '(Build_t x0 _) := x0;
  }.
  Global Instance Get_data : Notation.Dot "data" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
  Global Instance Get_AF_data : Notation.DoubleColon t "data" := {
    Notation.double_colon '(Build_t _ x1) := x1;
  }.
End EmittedEvent.
Definition EmittedEvent : Set := EmittedEvent.t.

Module
  Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EmittedEvent.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) ->
        M (H := H')
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EmittedEvent.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.

Parameter set_account_balance :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    T::type["AccountId"] -> T::type["Balance"] -> M (H := H') unit.

Parameter get_account_balance :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    T::type["AccountId"] ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          T::type["Balance"]).

Parameter register_chain_extension :
    forall
      `{H' : State.Trait}
      {E : Set}
      `{ink_engine.chain_extension.ChainExtension.Trait E},
    E -> M (H := H') unit.

Parameter recorded_debug_messages :
    forall `{H' : State.Trait},
    M (H := H') ink_engine.test_api.RecordedDebugMessages.

Parameter set_clear_storage_disabled :
    forall `{H' : State.Trait},
    bool -> M (H := H') unit.

Parameter advance_block :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    M (H := H') unit.

Parameter set_caller :
    forall
      `{H' : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait
            (ink_env.types.Environment.AccountId (Self := T))
          (T := list u8)},
    T::type["AccountId"] -> M (H := H') unit.

Parameter set_callee :
    forall
      `{H' : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait
            (ink_env.types.Environment.AccountId (Self := T))
          (T := list u8)},
    T::type["AccountId"] -> M (H := H') unit.

Parameter set_contract :
    forall
      `{H' : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait
            (ink_env.types.Environment.AccountId (Self := T))
          (T := list u8)},
    T::type["AccountId"] -> M (H := H') unit.



Parameter callee :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    M (H := H') T::type["AccountId"].

Parameter get_contract_storage_rw :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    (ref T::type["AccountId"]) -> M (H := H') (usize * usize).

Parameter set_value_transferred :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    T::type["Balance"] -> M (H := H') unit.

Parameter transfer_in :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    T::type["Balance"] -> M (H := H') unit.

Parameter count_used_storage_cells :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    (ref T::type["AccountId"]) ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          usize).

Parameter set_block_timestamp :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    T::type["Timestamp"] -> M (H := H') unit.

Parameter set_block_number :
    forall `{H' : State.Trait} {T : Set} `{ink_env.types.Environment.Trait T},
    T::type["BlockNumber"] -> M (H := H') unit.

Parameter run_test :
    forall
      `{H' : State.Trait}
      {T F : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.ops.function.FnOnce.Trait F
          (Args := ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DefaultAccounts
            T)}
      `{core.convert.From.Trait
            (ink_env.types.Environment.AccountId (Self := T))
          (T := list u8)},
    F ->
      M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
          unit).

Parameter default_accounts :
    forall
      `{H' : State.Trait}
      {T : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.convert.From.Trait
            (ink_env.types.Environment.AccountId (Self := T))
          (T := list u8)},
    M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DefaultAccounts
          T).

Module DefaultAccounts.
  Section DefaultAccounts.
    Context {T : Set}.
    Context `{ink_env.types.Environment.Trait T}.
    Unset Primitive Projections.
    Record t : Set := {
      alice : T::type["AccountId"];
      bob : T::type["AccountId"];
      charlie : T::type["AccountId"];
      django : T::type["AccountId"];
      eve : T::type["AccountId"];
      frank : T::type["AccountId"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_alice : Notation.Dot "alice" := {
      Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
    }.
    Global Instance Get_AF_alice : Notation.DoubleColon t "alice" := {
      Notation.double_colon '(Build_t x0 _ _ _ _ _) := x0;
    }.
    Global Instance Get_bob : Notation.Dot "bob" := {
      Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
    }.
    Global Instance Get_AF_bob : Notation.DoubleColon t "bob" := {
      Notation.double_colon '(Build_t _ x1 _ _ _ _) := x1;
    }.
    Global Instance Get_charlie : Notation.Dot "charlie" := {
      Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
    }.
    Global Instance Get_AF_charlie : Notation.DoubleColon t "charlie" := {
      Notation.double_colon '(Build_t _ _ x2 _ _ _) := x2;
    }.
    Global Instance Get_django : Notation.Dot "django" := {
      Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
    }.
    Global Instance Get_AF_django : Notation.DoubleColon t "django" := {
      Notation.double_colon '(Build_t _ _ _ x3 _ _) := x3;
    }.
    Global Instance Get_eve : Notation.Dot "eve" := {
      Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
    }.
    Global Instance Get_AF_eve : Notation.DoubleColon t "eve" := {
      Notation.double_colon '(Build_t _ _ _ _ x4 _) := x4;
    }.
    Global Instance Get_frank : Notation.Dot "frank" := {
      Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
    }.
    Global Instance Get_AF_frank : Notation.DoubleColon t "frank" := {
      Notation.double_colon '(Build_t _ _ _ _ _ x5) := x5;
    }.
  End DefaultAccounts.
End DefaultAccounts.
Definition DefaultAccounts
    (T : Set)
    `{ink_env.types.Environment.Trait T}
    : Set :=
  DefaultAccounts.t (T := T).

Parameter recorded_events_ret_ty :
    Sigma (Ty : Set) `(core.iter.traits.iterator.Iterator.Trait Ty),
    unit.
Parameter recorded_events :
    forall `{H' : State.Trait},
    M (H := H') (projT1 recorded_events_ret_ty).

Parameter assert_contract_termination :
    forall
      `{H' : State.Trait}
      {T F : Set}
      `{ink_env.types.Environment.Trait T}
      `{core.ops.function.FnMut.Trait F (Args := unit)}
      `{core.panic.unwind_safe.UnwindSafe.Trait F}
      `{core.fmt.Debug.Trait (ink_env.types.Environment.AccountId (Self := T))}
      `{core.fmt.Debug.Trait (ink_env.types.Environment.Balance (Self := T))},
    F -> T::type["AccountId"] -> T::type["Balance"] -> M (H := H') unit.

Module OnInstance.
  Class Trait
      (Self : Set)
      `{ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
            Self}
      `{ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.Trait
            Self} :
      Type := {
    on_instance
      `{H' : State.Trait}
      {F R : Set}
      `{H'0 : core.ops.function.FnOnce.Trait F (Args := mut_ref Self)}
      :
      F -> M (H := H') R;
  }.
  
  Global Instance Method_on_instance `{H' : State.Trait} `(Trait)
    : Notation.Dot "on_instance" := {
    Notation.dot
      {F R : Set}
      `{H'0 : core.ops.function.FnOnce.Trait F (Args := mut_ref Self)}
      :=
      on_instance (F := F) (R := R) (H'0 := H'0);
  }.
End OnInstance.

Module CallParams.
  Section CallParams.
    Context {E CallType Args R : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      call_type : CallType;
      call_flags
        :
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags;
      _return_type : ink_env.call.common.ReturnType R;
      exec_input : ink_env.call.execution_input.ExecutionInput Args;
      _phantom : core.marker.PhantomData (E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_call_type : Notation.Dot "call_type" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_AF_call_type : Notation.DoubleColon t "call_type" := {
      Notation.double_colon '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_call_flags : Notation.Dot "call_flags" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_AF_call_flags : Notation.DoubleColon t "call_flags" := {
      Notation.double_colon '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get__return_type : Notation.Dot "_return_type" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_AF__return_type
      : Notation.DoubleColon t "_return_type" := {
      Notation.double_colon '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get_AF_exec_input : Notation.DoubleColon t "exec_input" := {
      Notation.double_colon '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon '(Build_t _ _ _ _ x4) := x4;
    }.
  End CallParams.
End CallParams.
Definition CallParams
    (E CallType Args R : Set)
    `{ink_env.types.Environment.Trait E}
    : Set :=
  CallParams.t (E := E) (CallType := CallType) (Args := Args) (R := R).

Module
  Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallParams_E_CallType_Args_R.
  Section
    Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallParams_E_CallType_Args_R.
    Context {E CallType Args R : Set}.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
        E
        CallType
        Args
        R.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallParams_E_CallType_Args_R.
  Global Hint Resolve I : core.
End
  Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallParams_E_CallType_Args_R.

Parameter build_call :
    forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
    M (H := H')
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
          E
          (ink_env.call.common.Unset_
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
              E))
          (ink_env.call.common.Unset_
            (ink_env.call.execution_input.ExecutionInput
              ink_env.call.execution_input.EmptyArgumentList))
          (ink_env.call.common.Unset_ (ink_env.call.common.ReturnType unit))).

Module Call.
  Section Call.
    Context {E : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      callee : E::type["AccountId"];
      gas_limit : ink_env.types.Gas;
      transferred_value : E::type["Balance"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_callee : Notation.Dot "callee" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_AF_callee : Notation.DoubleColon t "callee" := {
      Notation.double_colon '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
      Notation.double_colon '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_transferred_value
      : Notation.Dot "transferred_value" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
    Global Instance Get_AF_transferred_value
      : Notation.DoubleColon t "transferred_value" := {
      Notation.double_colon '(Build_t _ _ x2) := x2;
    }.
  End Call.
End Call.
Definition Call (E : Set) `{ink_env.types.Environment.Trait E} : Set :=
  Call.t (E := E).

Module
  Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Call_E.
  Section
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Call_E.
    Context {E : Set}.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
        E.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
              E).
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Call_E.
  Global Hint Resolve I : core.
End
  Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Call_E.

Module DelegateCall.
  Section DelegateCall.
    Context {E : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      code_hash : E::type["Hash"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End DelegateCall.
End DelegateCall.
Definition DelegateCall (E : Set) `{ink_env.types.Environment.Trait E} : Set :=
  DelegateCall.t (E := E).

Module CallBuilder.
  Section CallBuilder.
    Context {E CallType Args RetType : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      call_type : CallType;
      call_flags
        :
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags;
      exec_input : Args;
      return_type : RetType;
      _phantom : core.marker.PhantomData (E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_call_type : Notation.Dot "call_type" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_AF_call_type : Notation.DoubleColon t "call_type" := {
      Notation.double_colon '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_call_flags : Notation.Dot "call_flags" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_AF_call_flags : Notation.DoubleColon t "call_flags" := {
      Notation.double_colon '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_AF_exec_input : Notation.DoubleColon t "exec_input" := {
      Notation.double_colon '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_return_type : Notation.Dot "return_type" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get_AF_return_type
      : Notation.DoubleColon t "return_type" := {
      Notation.double_colon '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon '(Build_t _ _ _ _ x4) := x4;
    }.
  End CallBuilder.
End CallBuilder.
Definition CallBuilder
    (E CallType Args RetType : Set)
    `{ink_env.types.Environment.Trait E}
    : Set :=
  CallBuilder.t
    (E := E)
    (CallType := CallType)
    (Args := Args)
    (RetType := RetType).

Module
  Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_CallType_Args_RetType.
  Section
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_CallType_Args_RetType.
    Context {E CallType Args RetType : Set}.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
        E
        CallType
        Args
        RetType.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              CallType
              Args
              RetType).
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End
    Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_CallType_Args_RetType.
  Global Hint Resolve I : core.
End
  Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_CallType_Args_RetType.

Module ReturnFlags.
  Unset Primitive Projections.
  Record t : Set := {
    value : u32;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot '(Build_t x0) := x0;
  }.
  Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
    Notation.double_colon '(Build_t x0) := x0;
  }.
End ReturnFlags.
Definition ReturnFlags : Set := ReturnFlags.t.

Module
  Impl_core_default_Default_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_ReturnFlags.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags.
  
  Parameter default :
      forall `{H' : State.Trait},
      M (H := H')
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags.
  
  Global Instance AssociatedFunction_default `{H' : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H' : State.Trait} := default;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_default_Default_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_ReturnFlags.

Module CallFlags.
  Unset Primitive Projections.
  Record t : Set := {
    forward_input : bool;
    clone_input : bool;
    tail_call : bool;
    allow_reentry : bool;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_forward_input : Notation.Dot "forward_input" := {
    Notation.dot '(Build_t x0 _ _ _) := x0;
  }.
  Global Instance Get_AF_forward_input
    : Notation.DoubleColon t "forward_input" := {
    Notation.double_colon '(Build_t x0 _ _ _) := x0;
  }.
  Global Instance Get_clone_input : Notation.Dot "clone_input" := {
    Notation.dot '(Build_t _ x1 _ _) := x1;
  }.
  Global Instance Get_AF_clone_input : Notation.DoubleColon t "clone_input" := {
    Notation.double_colon '(Build_t _ x1 _ _) := x1;
  }.
  Global Instance Get_tail_call : Notation.Dot "tail_call" := {
    Notation.dot '(Build_t _ _ x2 _) := x2;
  }.
  Global Instance Get_AF_tail_call : Notation.DoubleColon t "tail_call" := {
    Notation.double_colon '(Build_t _ _ x2 _) := x2;
  }.
  Global Instance Get_allow_reentry : Notation.Dot "allow_reentry" := {
    Notation.dot '(Build_t _ _ _ x3) := x3;
  }.
  Global Instance Get_AF_allow_reentry
    : Notation.DoubleColon t "allow_reentry" := {
    Notation.double_colon '(Build_t _ _ _ x3) := x3;
  }.
End CallFlags.
Definition CallFlags : Set := CallFlags.t.

Module
  Impl_core_marker_Copy_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_Copy_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.

Module
  Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) ->
        M (H := H')
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_clone_Clone_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.

Module
  Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_fmt_Debug_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.

Module
  Impl_core_default_Default_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
  
  Parameter default :
      forall `{H' : State.Trait},
      M (H := H')
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallFlags.
  
  Global Instance AssociatedFunction_default `{H' : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H' : State.Trait} := default;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_default_Default_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallFlags.

Module EnvBackend.
  Class Trait (Self : Set) : Type := {
    set_contract_storage
      `{H' : State.Trait}
      {K V : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      `{H'1 : ink_storage_traits.storage.Storable.Trait V}
      :
      (mut_ref Self) ->
        (ref K) ->
        (ref V) ->
        M (H := H') (core.option.Option u32);
    get_contract_storage
      `{H' : State.Trait}
      {K R : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      `{H'1 : ink_storage_traits.storage.Storable.Trait R}
      :
      (mut_ref Self) ->
        (ref K) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (core.option.Option R));
    take_contract_storage
      `{H' : State.Trait}
      {K R : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      `{H'1 : ink_storage_traits.storage.Storable.Trait R}
      :
      (mut_ref Self) ->
        (ref K) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (core.option.Option R));
    contains_contract_storage
      `{H' : State.Trait}
      {K : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      :
      (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32);
    clear_contract_storage
      `{H' : State.Trait}
      {K : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      :
      (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32);
    decode_input
      `{H' : State.Trait}
      {T : Set}
      `{H'0 : parity_scale_codec.codec.Decode.Trait T}
      :
      (mut_ref Self) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            T);
    return_value
      `{H' : State.Trait}
      {R : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait R}
      :
      (mut_ref Self) ->
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
        ->
        (ref R) ->
        M (H := H') Empty_set;
    debug_message `{H' : State.Trait}
      :
      (mut_ref Self) -> (ref str) -> M (H := H') unit;
    hash_bytes
      `{H' : State.Trait}
      {H : Set}
      `{H'0 : ink_env.hash.CryptoHash.Trait H}
      :
      (mut_ref Self) ->
        (ref (Slice u8)) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
        M (H := H') unit;
    hash_encoded
      `{H' : State.Trait}
      {H T : Set}
      `{H'0 : ink_env.hash.CryptoHash.Trait H}
      `{H'1 : parity_scale_codec.codec.Encode.Trait T}
      :
      (mut_ref Self) ->
        (ref T) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
        M (H := H') unit;
    ecdsa_recover `{H' : State.Trait}
      :
      (mut_ref Self) ->
        (ref (list u8)) ->
        (ref (list u8)) ->
        (mut_ref (list u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit);
    ecdsa_to_eth_address `{H' : State.Trait}
      :
      (mut_ref Self) ->
        (ref (list u8)) ->
        (mut_ref (list u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit);
    call_chain_extension
      `{H' : State.Trait}
      {I T E ErrorCode F D : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait I}
      `{H'1 : parity_scale_codec.codec.Decode.Trait T}
      `{H'2 : core.convert.From.Trait E (T := ErrorCode)}
      `{H'3 : core.ops.function.FnOnce.Trait F (Args := u32)}
      `{H'4 : core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))}
      :
      (mut_ref Self) ->
        u32 ->
        (ref I) ->
        F ->
        D ->
        M (H := H') (core.result.Result T E);
    set_code_hash `{H' : State.Trait}
      :
      (mut_ref Self) ->
        (ref (Slice u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit);
  }.
  
  Global Instance Method_set_contract_storage `{H' : State.Trait} `(Trait)
    : Notation.Dot "set_contract_storage" := {
    Notation.dot
      {K V : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      `{H'1 : ink_storage_traits.storage.Storable.Trait V}
      :=
      set_contract_storage (K := K) (V := V) (H'0 := H'0) (H'1 := H'1);
  }.
  Global Instance Method_get_contract_storage `{H' : State.Trait} `(Trait)
    : Notation.Dot "get_contract_storage" := {
    Notation.dot
      {K R : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      `{H'1 : ink_storage_traits.storage.Storable.Trait R}
      :=
      get_contract_storage (K := K) (R := R) (H'0 := H'0) (H'1 := H'1);
  }.
  Global Instance Method_take_contract_storage `{H' : State.Trait} `(Trait)
    : Notation.Dot "take_contract_storage" := {
    Notation.dot
      {K R : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      `{H'1 : ink_storage_traits.storage.Storable.Trait R}
      :=
      take_contract_storage (K := K) (R := R) (H'0 := H'0) (H'1 := H'1);
  }.
  Global Instance Method_contains_contract_storage `{H' : State.Trait} `(Trait)
    : Notation.Dot "contains_contract_storage" := {
    Notation.dot {K : Set} `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      :=
      contains_contract_storage (K := K) (H'0 := H'0);
  }.
  Global Instance Method_clear_contract_storage `{H' : State.Trait} `(Trait)
    : Notation.Dot "clear_contract_storage" := {
    Notation.dot {K : Set} `{H'0 : parity_scale_codec.codec.Encode.Trait K}
      :=
      clear_contract_storage (K := K) (H'0 := H'0);
  }.
  Global Instance Method_decode_input `{H' : State.Trait} `(Trait)
    : Notation.Dot "decode_input" := {
    Notation.dot {T : Set} `{H'0 : parity_scale_codec.codec.Decode.Trait T}
      :=
      decode_input (T := T) (H'0 := H'0);
  }.
  Global Instance Method_return_value `{H' : State.Trait} `(Trait)
    : Notation.Dot "return_value" := {
    Notation.dot {R : Set} `{H'0 : parity_scale_codec.codec.Encode.Trait R}
      :=
      return_value (R := R) (H'0 := H'0);
  }.
  Global Instance Method_debug_message `{H' : State.Trait} `(Trait)
    : Notation.Dot "debug_message" := {
    Notation.dot := debug_message;
  }.
  Global Instance Method_hash_bytes `{H' : State.Trait} `(Trait)
    : Notation.Dot "hash_bytes" := {
    Notation.dot {H : Set} `{H'0 : ink_env.hash.CryptoHash.Trait H}
      :=
      hash_bytes (H := H) (H'0 := H'0);
  }.
  Global Instance Method_hash_encoded `{H' : State.Trait} `(Trait)
    : Notation.Dot "hash_encoded" := {
    Notation.dot
      {H T : Set}
      `{H'0 : ink_env.hash.CryptoHash.Trait H}
      `{H'1 : parity_scale_codec.codec.Encode.Trait T}
      :=
      hash_encoded (H := H) (T := T) (H'0 := H'0) (H'1 := H'1);
  }.
  Global Instance Method_ecdsa_recover `{H' : State.Trait} `(Trait)
    : Notation.Dot "ecdsa_recover" := {
    Notation.dot := ecdsa_recover;
  }.
  Global Instance Method_ecdsa_to_eth_address `{H' : State.Trait} `(Trait)
    : Notation.Dot "ecdsa_to_eth_address" := {
    Notation.dot := ecdsa_to_eth_address;
  }.
  Global Instance Method_call_chain_extension `{H' : State.Trait} `(Trait)
    : Notation.Dot "call_chain_extension" := {
    Notation.dot
      {I T E ErrorCode F D : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait I}
      `{H'1 : parity_scale_codec.codec.Decode.Trait T}
      `{H'2 : core.convert.From.Trait E (T := ErrorCode)}
      `{H'3 : core.ops.function.FnOnce.Trait F (Args := u32)}
      `{H'4 : core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))}
      :=
      call_chain_extension
          (I := I)
          (T := T)
          (E := E)
          (ErrorCode := ErrorCode)
          (F := F)
          (D := D)
        (H'0 := H'0)
        (H'1 := H'1)
        (H'2 := H'2)
        (H'3 := H'3)
        (H'4 := H'4);
  }.
  Global Instance Method_set_code_hash `{H' : State.Trait} `(Trait)
    : Notation.Dot "set_code_hash" := {
    Notation.dot := set_code_hash;
  }.
End EnvBackend.

Module TypedEnvBackend.
  Class Trait
      (Self : Set)
      `{ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
            Self} :
      Type := {
    caller
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') E::type["AccountId"];
    transferred_value
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') E::type["Balance"];
    weight_to_fee
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> u64 -> M (H := H') E::type["Balance"];
    gas_left
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') u64;
    block_timestamp
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') E::type["Timestamp"];
    account_id
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') E::type["AccountId"];
    balance
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') E::type["Balance"];
    block_number
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') E::type["BlockNumber"];
    minimum_balance
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') E::type["Balance"];
    emit_event
      `{H' : State.Trait}
      {E Event : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : ink_env.topics.Topics.Trait Event}
      `{H'2 : parity_scale_codec.codec.Encode.Trait Event}
      :
      (mut_ref Self) -> Event -> M (H := H') unit;
    invoke_contract
      `{H' : State.Trait}
      {E Args R : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : parity_scale_codec.codec.Encode.Trait Args}
      `{H'2 : parity_scale_codec.codec.Decode.Trait R}
      :
      (mut_ref Self) ->
        (ref
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
            E
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
              E)
            Args
            R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.MessageResult R));
    invoke_contract_delegate
      `{H' : State.Trait}
      {E Args R : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : parity_scale_codec.codec.Encode.Trait Args}
      `{H'2 : parity_scale_codec.codec.Decode.Trait R}
      :
      (mut_ref Self) ->
        (ref
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
            E
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
              E)
            Args
            R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.MessageResult R));
    instantiate_contract
      `{H' : State.Trait}
      {E ContractRef Args Salt R : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1
        :
        ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
      `{H'2 : parity_scale_codec.codec.Encode.Trait Args}
      `{H'3 : core.convert.AsRef.Trait Salt (T := Slice u8)}
      `{H'4
        :
        ink_env.call.create_builder.ConstructorReturnType.Trait R
          (C := ContractRef)}
      :
      (mut_ref Self) ->
        (ref
          (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.ConstructorResult
              (ink_env.call.create_builder.ConstructorReturnType.Output
                (Self := R))));
    terminate_contract
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> E::type["AccountId"] -> M (H := H') Empty_set;
    transfer
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) ->
        E::type["AccountId"] ->
        E::type["Balance"] ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit);
    is_contract
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> (ref E::type["AccountId"]) -> M (H := H') bool;
    caller_is_origin
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) -> M (H := H') bool;
    code_hash
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) ->
        (ref E::type["AccountId"]) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            E::type["Hash"]);
    own_code_hash
      `{H' : State.Trait}
      {E : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      :
      (mut_ref Self) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            E::type["Hash"]);
    call_runtime
      `{H' : State.Trait}
      {E Call : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : parity_scale_codec.codec.Encode.Trait Call}
      :
      (mut_ref Self) ->
        (ref Call) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit);
  }.
  
  Global Instance Method_caller `{H' : State.Trait} `(Trait)
    : Notation.Dot "caller" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      caller (E := E) (H'0 := H'0);
  }.
  Global Instance Method_transferred_value `{H' : State.Trait} `(Trait)
    : Notation.Dot "transferred_value" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      transferred_value (E := E) (H'0 := H'0);
  }.
  Global Instance Method_weight_to_fee `{H' : State.Trait} `(Trait)
    : Notation.Dot "weight_to_fee" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      weight_to_fee (E := E) (H'0 := H'0);
  }.
  Global Instance Method_gas_left `{H' : State.Trait} `(Trait)
    : Notation.Dot "gas_left" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      gas_left (E := E) (H'0 := H'0);
  }.
  Global Instance Method_block_timestamp `{H' : State.Trait} `(Trait)
    : Notation.Dot "block_timestamp" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      block_timestamp (E := E) (H'0 := H'0);
  }.
  Global Instance Method_account_id `{H' : State.Trait} `(Trait)
    : Notation.Dot "account_id" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      account_id (E := E) (H'0 := H'0);
  }.
  Global Instance Method_balance `{H' : State.Trait} `(Trait)
    : Notation.Dot "balance" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      balance (E := E) (H'0 := H'0);
  }.
  Global Instance Method_block_number `{H' : State.Trait} `(Trait)
    : Notation.Dot "block_number" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      block_number (E := E) (H'0 := H'0);
  }.
  Global Instance Method_minimum_balance `{H' : State.Trait} `(Trait)
    : Notation.Dot "minimum_balance" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      minimum_balance (E := E) (H'0 := H'0);
  }.
  Global Instance Method_emit_event `{H' : State.Trait} `(Trait)
    : Notation.Dot "emit_event" := {
    Notation.dot
      {E Event : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : ink_env.topics.Topics.Trait Event}
      `{H'2 : parity_scale_codec.codec.Encode.Trait Event}
      :=
      emit_event (E := E) (Event := Event)
        (H'0 := H'0)
        (H'1 := H'1)
        (H'2 := H'2);
  }.
  Global Instance Method_invoke_contract `{H' : State.Trait} `(Trait)
    : Notation.Dot "invoke_contract" := {
    Notation.dot
      {E Args R : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : parity_scale_codec.codec.Encode.Trait Args}
      `{H'2 : parity_scale_codec.codec.Decode.Trait R}
      :=
      invoke_contract (E := E) (Args := Args) (R := R)
        (H'0 := H'0)
        (H'1 := H'1)
        (H'2 := H'2);
  }.
  Global Instance Method_invoke_contract_delegate `{H' : State.Trait} `(Trait)
    : Notation.Dot "invoke_contract_delegate" := {
    Notation.dot
      {E Args R : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : parity_scale_codec.codec.Encode.Trait Args}
      `{H'2 : parity_scale_codec.codec.Decode.Trait R}
      :=
      invoke_contract_delegate (E := E) (Args := Args) (R := R)
        (H'0 := H'0)
        (H'1 := H'1)
        (H'2 := H'2);
  }.
  Global Instance Method_instantiate_contract `{H' : State.Trait} `(Trait)
    : Notation.Dot "instantiate_contract" := {
    Notation.dot
      {E ContractRef Args Salt R : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1
        :
        ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
      `{H'2 : parity_scale_codec.codec.Encode.Trait Args}
      `{H'3 : core.convert.AsRef.Trait Salt (T := Slice u8)}
      `{H'4
        :
        ink_env.call.create_builder.ConstructorReturnType.Trait R
          (C := ContractRef)}
      :=
      instantiate_contract
          (E := E)
          (ContractRef := ContractRef)
          (Args := Args)
          (Salt := Salt)
          (R := R)
        (H'0 := H'0)
        (H'1 := H'1)
        (H'2 := H'2)
        (H'3 := H'3)
        (H'4 := H'4);
  }.
  Global Instance Method_terminate_contract `{H' : State.Trait} `(Trait)
    : Notation.Dot "terminate_contract" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      terminate_contract (E := E) (H'0 := H'0);
  }.
  Global Instance Method_transfer `{H' : State.Trait} `(Trait)
    : Notation.Dot "transfer" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      transfer (E := E) (H'0 := H'0);
  }.
  Global Instance Method_is_contract `{H' : State.Trait} `(Trait)
    : Notation.Dot "is_contract" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      is_contract (E := E) (H'0 := H'0);
  }.
  Global Instance Method_caller_is_origin `{H' : State.Trait} `(Trait)
    : Notation.Dot "caller_is_origin" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      caller_is_origin (E := E) (H'0 := H'0);
  }.
  Global Instance Method_code_hash `{H' : State.Trait} `(Trait)
    : Notation.Dot "code_hash" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      code_hash (E := E) (H'0 := H'0);
  }.
  Global Instance Method_own_code_hash `{H' : State.Trait} `(Trait)
    : Notation.Dot "own_code_hash" := {
    Notation.dot {E : Set} `{H'0 : ink_env.types.Environment.Trait E}
      :=
      own_code_hash (E := E) (H'0 := H'0);
  }.
  Global Instance Method_call_runtime `{H' : State.Trait} `(Trait)
    : Notation.Dot "call_runtime" := {
    Notation.dot
      {E Call : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : parity_scale_codec.codec.Encode.Trait Call}
      :=
      call_runtime (E := E) (Call := Call) (H'0 := H'0) (H'1 := H'1);
  }.
End TypedEnvBackend.

Module common.
  Module ReturnType.
    Section ReturnType.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        _ : core.marker.PhantomData (T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End ReturnType.
  End ReturnType.
  Definition ReturnType := @ReturnType.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
    Section Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.ReturnType T.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
  
  Module Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
    Section Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.ReturnType T.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') Self.
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
  
  Module Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
    Section Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.ReturnType T.
      
      Global Instance I : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
  
  Module Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
    Section Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.ReturnType T.
      
      Parameter default : forall `{H' : State.Trait}, M (H := H') Self.
      
      Global Instance AssociatedFunction_default `{H' : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H' : State.Trait} := default;
      }.
    End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
    Global Hint Resolve I : core.
  End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
  
  Module Set_.
    Section Set_.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        _ : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Set_.
  End Set_.
  Definition Set_ := @Set_.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
    Section Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Set_ T.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
  
  Module Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
    Section Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Set_ T.
      
      Global Instance I : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
  
  Module Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
    Section Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Set_ T.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') (ink_env.call.common.Set_ T).
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
  
  Module Unset_.
    Section Unset_.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        _ : core.marker.PhantomData (T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Unset_.
  End Unset_.
  Definition Unset_ := @Unset_.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
    Section Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Unset_ T.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
  
  Module Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
    Section Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Unset_ T.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') Self.
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
  
  Module Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
    Section Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Unset_ T.
      
      Global Instance I : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
  
  Module Impl_core_default_Default_for_ink_env_call_common_Unset__T.
    Section Impl_core_default_Default_for_ink_env_call_common_Unset__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Unset_ T.
      
      Parameter default : forall `{H' : State.Trait}, M (H := H') Self.
      
      Global Instance AssociatedFunction_default `{H' : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H' : State.Trait} := default;
      }.
    End Impl_core_default_Default_for_ink_env_call_common_Unset__T.
    Global Hint Resolve I : core.
  End Impl_core_default_Default_for_ink_env_call_common_Unset__T.
  
  Module Unwrap.
    Class Trait (Self : Set) : Type := {
      Output : Set;
      unwrap_or_else
        `{H' : State.Trait}
        {F : Set}
        `{H'0 : core.ops.function.FnOnce.Trait F (Args := unit)}
        :
        Self -> F -> M (H := H') Output;
    }.
    
    Global Instance Method_Output `(Trait)
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_unwrap_or_else `{H' : State.Trait} `(Trait)
      : Notation.Dot "unwrap_or_else" := {
      Notation.dot
        {F : Set}
        `{H'0 : core.ops.function.FnOnce.Trait F (Args := unit)}
        :=
        unwrap_or_else (F := F) (H'0 := H'0);
    }.
  End Unwrap.
  
  Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
    Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Unset_ T.
      
      Definition Output : Set := T.
      
      Parameter unwrap_or_else :
          forall
            `{H' : State.Trait}
            {F : Set}
            `{core.ops.function.FnOnce.Trait F (Args := unit)},
          Self -> F -> M (H := H') Output.
      
      Global Instance Method_unwrap_or_else `{H' : State.Trait} :
        Notation.Dot "unwrap_or_else" := {
        Notation.dot := unwrap_or_else;
      }.
      
      Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
        ink_env.call.common.Unwrap.Output := Output;
        ink_env.call.common.Unwrap.unwrap_or_else `{H' : State.Trait}
          :=
          unwrap_or_else;
      }.
    End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
    Global Hint Resolve I : core.
  End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
  
  Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
    Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
      Context {T : Set}.
      Definition Self := ink_env.call.common.Set_ T.
      
      Definition Output : Set := T.
      
      Parameter unwrap_or_else :
          forall
            `{H' : State.Trait}
            {F : Set}
            `{core.ops.function.FnOnce.Trait F (Args := unit)},
          Self -> F -> M (H := H') Output.
      
      Global Instance Method_unwrap_or_else `{H' : State.Trait} :
        Notation.Dot "unwrap_or_else" := {
        Notation.dot := unwrap_or_else;
      }.
      
      Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
        ink_env.call.common.Unwrap.Output := Output;
        ink_env.call.common.Unwrap.unwrap_or_else `{H' : State.Trait}
          :=
          unwrap_or_else;
      }.
    End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
    Global Hint Resolve I : core.
  End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
End common.

Module ReturnType.
  Section ReturnType.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _ : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ReturnType.
End ReturnType.
Definition ReturnType := @ReturnType.t.

Module Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
  Section Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.ReturnType T.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_call_common_ReturnType_T.

Module Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
  Section Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.ReturnType T.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') Self.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_call_common_ReturnType_T.

Module Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
  Section Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.ReturnType T.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_call_common_ReturnType_T.

Module Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
  Section Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.ReturnType T.
    
    Parameter default : forall `{H' : State.Trait}, M (H := H') Self.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.
  Global Hint Resolve I : core.
End Impl_core_default_Default_for_ink_env_call_common_ReturnType_T.

Module Set_.
  Section Set_.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _ : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Set_.
End Set_.
Definition Set_ := @Set_.t.

Module Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
  Section Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Set_ T.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_call_common_Set__T.

Module Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
  Section Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Set_ T.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_ink_env_call_common_Set__T.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_call_common_Set__T.

Module Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
  Section Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Set_ T.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') (ink_env.call.common.Set_ T).
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_common_Set__T.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_call_common_Set__T.

Module Unset_.
  Section Unset_.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _ : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Unset_.
End Unset_.
Definition Unset_ := @Unset_.t.

Module Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
  Section Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Unset_ T.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_call_common_Unset__T.

Module Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
  Section Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Unset_ T.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') Self.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_call_common_Unset__T.

Module Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
  Section Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Unset_ T.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_call_common_Unset__T.

Module Impl_core_default_Default_for_ink_env_call_common_Unset__T.
  Section Impl_core_default_Default_for_ink_env_call_common_Unset__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Unset_ T.
    
    Parameter default : forall `{H' : State.Trait}, M (H := H') Self.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_env_call_common_Unset__T.
  Global Hint Resolve I : core.
End Impl_core_default_Default_for_ink_env_call_common_Unset__T.

Module Unwrap.
  Class Trait (Self : Set) : Type := {
    Output : Set;
    unwrap_or_else
      `{H' : State.Trait}
      {F : Set}
      `{H'0 : core.ops.function.FnOnce.Trait F (Args := unit)}
      :
      Self -> F -> M (H := H') Output;
  }.
  
  Global Instance Method_Output `(Trait)
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_unwrap_or_else `{H' : State.Trait} `(Trait)
    : Notation.Dot "unwrap_or_else" := {
    Notation.dot
      {F : Set}
      `{H'0 : core.ops.function.FnOnce.Trait F (Args := unit)}
      :=
      unwrap_or_else (F := F) (H'0 := H'0);
  }.
End Unwrap.

Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
  Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Unset_ T.
    
    Definition Output : Set := T.
    
    Parameter unwrap_or_else :
        forall
          `{H' : State.Trait}
          {F : Set}
          `{core.ops.function.FnOnce.Trait F (Args := unit)},
        Self -> F -> M (H := H') Output.
    
    Global Instance Method_unwrap_or_else `{H' : State.Trait} :
      Notation.Dot "unwrap_or_else" := {
      Notation.dot := unwrap_or_else;
    }.
    
    Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
      ink_env.call.common.Unwrap.Output := Output;
      ink_env.call.common.Unwrap.unwrap_or_else `{H' : State.Trait}
        :=
        unwrap_or_else;
    }.
  End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.
  Global Hint Resolve I : core.
End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Unset__T.

Module Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
  Section Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
    Context {T : Set}.
    Definition Self := ink_env.call.common.Set_ T.
    
    Definition Output : Set := T.
    
    Parameter unwrap_or_else :
        forall
          `{H' : State.Trait}
          {F : Set}
          `{core.ops.function.FnOnce.Trait F (Args := unit)},
        Self -> F -> M (H := H') Output.
    
    Global Instance Method_unwrap_or_else `{H' : State.Trait} :
      Notation.Dot "unwrap_or_else" := {
      Notation.dot := unwrap_or_else;
    }.
    
    Global Instance I : ink_env.call.common.Unwrap.Trait Self := {
      ink_env.call.common.Unwrap.Output := Output;
      ink_env.call.common.Unwrap.unwrap_or_else `{H' : State.Trait}
        :=
        unwrap_or_else;
    }.
  End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.
  Global Hint Resolve I : core.
End Impl_ink_env_call_common_Unwrap_for_ink_env_call_common_Set__T.

Module create_builder.
  Module state.
    Module Salt.
      Inductive t : Set :=
      .
    End Salt.
    Definition Salt := Salt.t.
  End state.
  
  Module FromAccountId.
    Class Trait (Self : Set) {T : Set} `{ink_env.types.Environment.Trait T} :
        Type := {
      from_account_id `{H' : State.Trait}
        :
        (ink_env.types.Environment.AccountId (Self := T)) -> M (H := H') Self;
    }.
    
    Global Instance Method_from_account_id `{H' : State.Trait} `(Trait)
      : Notation.Dot "from_account_id" := {
      Notation.dot := from_account_id;
    }.
  End FromAccountId.
  
  Module ConstructorReturnType.
    Class Trait (Self : Set) {C : Set} : Type := {
      IS_RESULT `{H' : State.Trait} : bool;
      Output : Set;
      Error : Set;
      _ : Sigma `(parity_scale_codec.codec.Decode.Trait Error), unit;
      ok `{H' : State.Trait} : C -> M (H := H') Output;
    }.
    
    Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
      : Notation.Dot "IS_RESULT" := {
      Notation.dot := IS_RESULT;
    }.
    Global Instance Method_Output `(Trait)
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_Error `(Trait)
      : Notation.DoubleColonType Self "Error" := {
      Notation.double_colon_type := Error;
    }.
    Global Instance Method_ok `{H' : State.Trait} `(Trait)
      : Notation.Dot "ok" := {
      Notation.dot := ok;
    }.
    Global Instance Method_err `{H' : State.Trait} `(Trait)
      : Notation.Dot "err" := {
      Notation.dot (_err : Error)
        :=
        (axiom : M (H := H') (core.option.Option Output));
    }.
  End ConstructorReturnType.
  
  Module Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
    Section Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
      Context {C : Set}.
      Definition Self := C.
      
      Definition Output : Set := C.
      
      Definition Error : Set := unit.
      
      Parameter ok : forall `{H' : State.Trait}, C -> M (H := H') Output.
      
      Global Instance AssociatedFunction_ok `{H' : State.Trait} :
        Notation.DoubleColon Self "ok" := {
        Notation.double_colon := ok;
      }.
      
      #[refine]
      Global Instance I
        : ink_env.call.create_builder.ConstructorReturnType.Trait Self (C := C)
          := {
        ink_env.call.create_builder.ConstructorReturnType.Output := Output;
        ink_env.call.create_builder.ConstructorReturnType.Error := Error;
        ink_env.call.create_builder.ConstructorReturnType.ok `{H' : State.Trait}
          :=
          ok;
      }.
      eauto.
      Defined.
    End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
    Global Hint Resolve I : core.
  End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
  
  Module
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
    Section
      Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
      Context {C E : Set}.
      Definition Self := core.result.Result C E.
      
      Definition IS_RESULT `{H' : State.Trait} := Pure true.
      
      Global Instance AssociatedFunction_IS_RESULT `{H' : State.Trait} :
        Notation.DoubleColon Self "IS_RESULT" := {
        Notation.double_colon := IS_RESULT;
      }.
      
      Definition Output : Set := core.result.Result C E.
      
      Definition Error : Set := E.
      
      Parameter ok : forall `{H' : State.Trait}, C -> M (H := H') Output.
      
      Global Instance AssociatedFunction_ok `{H' : State.Trait} :
        Notation.DoubleColon Self "ok" := {
        Notation.double_colon := ok;
      }.
      
      Parameter err :
          forall `{H' : State.Trait},
          Error -> M (H := H') (core.option.Option Output).
      
      Global Instance AssociatedFunction_err `{H' : State.Trait} :
        Notation.DoubleColon Self "err" := {
        Notation.double_colon := err;
      }.
      
      #[refine]
      Global Instance I
        : ink_env.call.create_builder.ConstructorReturnType.Trait Self (C := C)
          := {
        ink_env.call.create_builder.ConstructorReturnType.Output := Output;
        ink_env.call.create_builder.ConstructorReturnType.Error := Error;
        ink_env.call.create_builder.ConstructorReturnType.ok `{H' : State.Trait}
          :=
          ok;
      }.
      eauto.
      Defined.
    End
      Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
  
  Module CreateParams.
    Section CreateParams.
      Context {E ContractRef Args Salt R : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        code_hash : E::type["Hash"];
        gas_limit : u64;
        endowment : E::type["Balance"];
        exec_input : ink_env.call.execution_input.ExecutionInput Args;
        salt_bytes : Salt;
        _return_type : ink_env.call.common.ReturnType R;
        _phantom : core.marker.PhantomData (ContractRef);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
      }.
      Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
        Notation.double_colon '(Build_t x0 _ _ _ _ _ _) := x0;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
      }.
      Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
        Notation.double_colon '(Build_t _ x1 _ _ _ _ _) := x1;
      }.
      Global Instance Get_endowment : Notation.Dot "endowment" := {
        Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
      }.
      Global Instance Get_AF_endowment : Notation.DoubleColon t "endowment" := {
        Notation.double_colon '(Build_t _ _ x2 _ _ _ _) := x2;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
      }.
      Global Instance Get_AF_exec_input
        : Notation.DoubleColon t "exec_input" := {
        Notation.double_colon '(Build_t _ _ _ x3 _ _ _) := x3;
      }.
      Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
        Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
      }.
      Global Instance Get_AF_salt_bytes
        : Notation.DoubleColon t "salt_bytes" := {
        Notation.double_colon '(Build_t _ _ _ _ x4 _ _) := x4;
      }.
      Global Instance Get__return_type : Notation.Dot "_return_type" := {
        Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
      }.
      Global Instance Get_AF__return_type
        : Notation.DoubleColon t "_return_type" := {
        Notation.double_colon '(Build_t _ _ _ _ _ x5 _) := x5;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon '(Build_t _ _ _ _ _ _ x6) := x6;
      }.
    End CreateParams.
  End CreateParams.
  Definition CreateParams
      (E ContractRef Args Salt R : Set)
      `{ink_env.types.Environment.Trait E}
      : Set :=
    CreateParams.t
      (E := E)
      (ContractRef := ContractRef)
      (Args := Args)
      (Salt := Salt)
      (R := R).
  
  Module
    Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    Section
      Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
      Context {E ContractRef Args Salt R : Set}.
      Definition Self :=
        ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    Global Hint Resolve I : core.
  End
    Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
  
  Module CreateBuilder.
    Section CreateBuilder.
      Context
        {E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        code_hash : CodeHash;
        gas_limit : GasLimit;
        endowment : Endowment;
        exec_input : Args;
        salt : Salt;
        return_type : RetType;
        _phantom : core.marker.PhantomData (E * ContractRef);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
      }.
      Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
        Notation.double_colon '(Build_t x0 _ _ _ _ _ _) := x0;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
      }.
      Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
        Notation.double_colon '(Build_t _ x1 _ _ _ _ _) := x1;
      }.
      Global Instance Get_endowment : Notation.Dot "endowment" := {
        Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
      }.
      Global Instance Get_AF_endowment : Notation.DoubleColon t "endowment" := {
        Notation.double_colon '(Build_t _ _ x2 _ _ _ _) := x2;
      }.
      Global Instance Get_exec_input : Notation.Dot "exec_input" := {
        Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
      }.
      Global Instance Get_AF_exec_input
        : Notation.DoubleColon t "exec_input" := {
        Notation.double_colon '(Build_t _ _ _ x3 _ _ _) := x3;
      }.
      Global Instance Get_salt : Notation.Dot "salt" := {
        Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
      }.
      Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
        Notation.double_colon '(Build_t _ _ _ _ x4 _ _) := x4;
      }.
      Global Instance Get_return_type : Notation.Dot "return_type" := {
        Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
      }.
      Global Instance Get_AF_return_type
        : Notation.DoubleColon t "return_type" := {
        Notation.double_colon '(Build_t _ _ _ _ _ x5 _) := x5;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon '(Build_t _ _ _ _ _ _ x6) := x6;
      }.
    End CreateBuilder.
  End CreateBuilder.
  Definition CreateBuilder
      (E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set)
      `{ink_env.types.Environment.Trait E}
      : Set :=
    CreateBuilder.t
      (E := E)
      (ContractRef := ContractRef)
      (CodeHash := CodeHash)
      (GasLimit := GasLimit)
      (Endowment := Endowment)
      (Args := Args)
      (Salt := Salt)
      (RetType := RetType).
End create_builder.

Module state.
  Module Salt.
    Inductive t : Set :=
    .
  End Salt.
  Definition Salt := Salt.t.
End state.

Module Salt.
  Inductive t : Set :=
  .
End Salt.
Definition Salt := Salt.t.

Module FromAccountId.
  Class Trait (Self : Set) {T : Set} `{ink_env.types.Environment.Trait T} :
      Type := {
    from_account_id `{H' : State.Trait}
      :
      (ink_env.types.Environment.AccountId (Self := T)) -> M (H := H') Self;
  }.
  
  Global Instance Method_from_account_id `{H' : State.Trait} `(Trait)
    : Notation.Dot "from_account_id" := {
    Notation.dot := from_account_id;
  }.
End FromAccountId.

Module ConstructorReturnType.
  Class Trait (Self : Set) {C : Set} : Type := {
    IS_RESULT `{H' : State.Trait} : bool;
    Output : Set;
    Error : Set;
    _ : Sigma `(parity_scale_codec.codec.Decode.Trait Error), unit;
    ok `{H' : State.Trait} : C -> M (H := H') Output;
  }.
  
  Global Instance Method_IS_RESULT `{H' : State.Trait} `(Trait)
    : Notation.Dot "IS_RESULT" := {
    Notation.dot := IS_RESULT;
  }.
  Global Instance Method_Output `(Trait)
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_Error `(Trait)
    : Notation.DoubleColonType Self "Error" := {
    Notation.double_colon_type := Error;
  }.
  Global Instance Method_ok `{H' : State.Trait} `(Trait)
    : Notation.Dot "ok" := {
    Notation.dot := ok;
  }.
  Global Instance Method_err `{H' : State.Trait} `(Trait)
    : Notation.Dot "err" := {
    Notation.dot (_err : Error)
      :=
      (axiom : M (H := H') (core.option.Option Output));
  }.
End ConstructorReturnType.

Module Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
  Section Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
    Context {C : Set}.
    Definition Self := C.
    
    Definition Output : Set := C.
    
    Definition Error : Set := unit.
    
    Parameter ok : forall `{H' : State.Trait}, C -> M (H := H') Output.
    
    Global Instance AssociatedFunction_ok `{H' : State.Trait} :
      Notation.DoubleColon Self "ok" := {
      Notation.double_colon := ok;
    }.
    
    #[refine]
    Global Instance I
      : ink_env.call.create_builder.ConstructorReturnType.Trait Self (C := C)
        := {
      ink_env.call.create_builder.ConstructorReturnType.Output := Output;
      ink_env.call.create_builder.ConstructorReturnType.Error := Error;
      ink_env.call.create_builder.ConstructorReturnType.ok `{H' : State.Trait}
        :=
        ok;
    }.
    eauto.
    Defined.
  End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.
  Global Hint Resolve I : core.
End Impl_ink_env_call_create_builder_ConstructorReturnType_for_C.

Module
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
  Section
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
    Context {C E : Set}.
    Definition Self := core.result.Result C E.
    
    Definition IS_RESULT `{H' : State.Trait} := Pure true.
    
    Global Instance AssociatedFunction_IS_RESULT `{H' : State.Trait} :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition Output : Set := core.result.Result C E.
    
    Definition Error : Set := E.
    
    Parameter ok : forall `{H' : State.Trait}, C -> M (H := H') Output.
    
    Global Instance AssociatedFunction_ok `{H' : State.Trait} :
      Notation.DoubleColon Self "ok" := {
      Notation.double_colon := ok;
    }.
    
    Parameter err :
        forall `{H' : State.Trait},
        Error -> M (H := H') (core.option.Option Output).
    
    Global Instance AssociatedFunction_err `{H' : State.Trait} :
      Notation.DoubleColon Self "err" := {
      Notation.double_colon := err;
    }.
    
    #[refine]
    Global Instance I
      : ink_env.call.create_builder.ConstructorReturnType.Trait Self (C := C)
        := {
      ink_env.call.create_builder.ConstructorReturnType.Output := Output;
      ink_env.call.create_builder.ConstructorReturnType.Error := Error;
      ink_env.call.create_builder.ConstructorReturnType.ok `{H' : State.Trait}
        :=
        ok;
    }.
    eauto.
    Defined.
  End
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.
  Global Hint Resolve I : core.
End
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_C_E.

Module CreateParams.
  Section CreateParams.
    Context {E ContractRef Args Salt R : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      code_hash : E::type["Hash"];
      gas_limit : u64;
      endowment : E::type["Balance"];
      exec_input : ink_env.call.execution_input.ExecutionInput Args;
      salt_bytes : Salt;
      _return_type : ink_env.call.common.ReturnType R;
      _phantom : core.marker.PhantomData (ContractRef);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
    }.
    Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
      Notation.double_colon '(Build_t x0 _ _ _ _ _ _) := x0;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
    }.
    Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
      Notation.double_colon '(Build_t _ x1 _ _ _ _ _) := x1;
    }.
    Global Instance Get_endowment : Notation.Dot "endowment" := {
      Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
    }.
    Global Instance Get_AF_endowment : Notation.DoubleColon t "endowment" := {
      Notation.double_colon '(Build_t _ _ x2 _ _ _ _) := x2;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
    }.
    Global Instance Get_AF_exec_input : Notation.DoubleColon t "exec_input" := {
      Notation.double_colon '(Build_t _ _ _ x3 _ _ _) := x3;
    }.
    Global Instance Get_salt_bytes : Notation.Dot "salt_bytes" := {
      Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
    }.
    Global Instance Get_AF_salt_bytes : Notation.DoubleColon t "salt_bytes" := {
      Notation.double_colon '(Build_t _ _ _ _ x4 _ _) := x4;
    }.
    Global Instance Get__return_type : Notation.Dot "_return_type" := {
      Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
    }.
    Global Instance Get_AF__return_type
      : Notation.DoubleColon t "_return_type" := {
      Notation.double_colon '(Build_t _ _ _ _ _ x5 _) := x5;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon '(Build_t _ _ _ _ _ _ x6) := x6;
    }.
  End CreateParams.
End CreateParams.
Definition CreateParams
    (E ContractRef Args Salt R : Set)
    `{ink_env.types.Environment.Trait E}
    : Set :=
  CreateParams.t
    (E := E)
    (ContractRef := ContractRef)
    (Args := Args)
    (Salt := Salt)
    (R := R).

Module
  Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
  Section
    Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
    Context {E ContractRef Args Salt R : Set}.
    Definition Self :=
      ink_env.call.create_builder.CreateParams E ContractRef Args Salt R.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.
  Global Hint Resolve I : core.
End
  Impl_core_fmt_Debug_for_ink_env_call_create_builder_CreateParams_E_ContractRef_Args_Salt_R.

Module CreateBuilder.
  Section CreateBuilder.
    Context {E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      code_hash : CodeHash;
      gas_limit : GasLimit;
      endowment : Endowment;
      exec_input : Args;
      salt : Salt;
      return_type : RetType;
      _phantom : core.marker.PhantomData (E * ContractRef);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot '(Build_t x0 _ _ _ _ _ _) := x0;
    }.
    Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
      Notation.double_colon '(Build_t x0 _ _ _ _ _ _) := x0;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot '(Build_t _ x1 _ _ _ _ _) := x1;
    }.
    Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
      Notation.double_colon '(Build_t _ x1 _ _ _ _ _) := x1;
    }.
    Global Instance Get_endowment : Notation.Dot "endowment" := {
      Notation.dot '(Build_t _ _ x2 _ _ _ _) := x2;
    }.
    Global Instance Get_AF_endowment : Notation.DoubleColon t "endowment" := {
      Notation.double_colon '(Build_t _ _ x2 _ _ _ _) := x2;
    }.
    Global Instance Get_exec_input : Notation.Dot "exec_input" := {
      Notation.dot '(Build_t _ _ _ x3 _ _ _) := x3;
    }.
    Global Instance Get_AF_exec_input : Notation.DoubleColon t "exec_input" := {
      Notation.double_colon '(Build_t _ _ _ x3 _ _ _) := x3;
    }.
    Global Instance Get_salt : Notation.Dot "salt" := {
      Notation.dot '(Build_t _ _ _ _ x4 _ _) := x4;
    }.
    Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
      Notation.double_colon '(Build_t _ _ _ _ x4 _ _) := x4;
    }.
    Global Instance Get_return_type : Notation.Dot "return_type" := {
      Notation.dot '(Build_t _ _ _ _ _ x5 _) := x5;
    }.
    Global Instance Get_AF_return_type
      : Notation.DoubleColon t "return_type" := {
      Notation.double_colon '(Build_t _ _ _ _ _ x5 _) := x5;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ _ _ _ _ _ x6) := x6;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon '(Build_t _ _ _ _ _ _ x6) := x6;
    }.
  End CreateBuilder.
End CreateBuilder.
Definition CreateBuilder
    (E ContractRef CodeHash GasLimit Endowment Args Salt RetType : Set)
    `{ink_env.types.Environment.Trait E}
    : Set :=
  CreateBuilder.t
    (E := E)
    (ContractRef := ContractRef)
    (CodeHash := CodeHash)
    (GasLimit := GasLimit)
    (Endowment := Endowment)
    (Args := Args)
    (Salt := Salt)
    (RetType := RetType).

Module execution_input.
  Module ExecutionInput.
    Section ExecutionInput.
      Context {Args : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        selector : ink_env.call.selector.Selector;
        args : Args;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_selector : Notation.Dot "selector" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_selector : Notation.DoubleColon t "selector" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get_args : Notation.Dot "args" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF_args : Notation.DoubleColon t "args" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End ExecutionInput.
  End ExecutionInput.
  Definition ExecutionInput (Args : Set) : Set :=
    ExecutionInput.t (Args := Args).
  
  Module
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
    Section
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
      Context {Args : Set}.
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) ->
            M (H := H') (ink_env.call.execution_input.ExecutionInput Args).
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
    Global Hint Resolve I : core.
  End
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
  
  Module
    Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
    Section
      Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
      Context {Args : Set}.
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Parameter default :
          forall `{H' : State.Trait},
          M (H := H') (ink_env.call.execution_input.ExecutionInput Args).
      
      Global Instance AssociatedFunction_default `{H' : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H' : State.Trait} := default;
      }.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
    Global Hint Resolve I : core.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
    Section
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
      Context {Args : Set}.
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
  
  Module ArgumentList.
    Section ArgumentList.
      Context {Head Rest : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        head : Head;
        rest : Rest;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_head : Notation.Dot "head" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_head : Notation.DoubleColon t "head" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get_rest : Notation.Dot "rest" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF_rest : Notation.DoubleColon t "rest" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End ArgumentList.
  End ArgumentList.
  Definition ArgumentList (Head Rest : Set) : Set :=
    ArgumentList.t (Head := Head) (Rest := Rest).
  
  Module
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Section
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Context {Head Rest : Set}.
      Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) ->
            M (H := H') (ink_env.call.execution_input.ArgumentList Head Rest).
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End
      Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Global Hint Resolve I : core.
  End
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  
  Module
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Section
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Context {Head Rest : Set}.
      Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
      
      Parameter default :
          forall `{H' : State.Trait},
          M (H := H') (ink_env.call.execution_input.ArgumentList Head Rest).
      
      Global Instance AssociatedFunction_default `{H' : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H' : State.Trait} := default;
      }.
    End
      Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Global Hint Resolve I : core.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  
  Module
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Section
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
      Context {Head Rest : Set}.
      Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Global Hint Resolve I : core.
  End
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  
  Module Argument.
    Section Argument.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        arg : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_arg : Notation.Dot "arg" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_arg : Notation.DoubleColon t "arg" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End Argument.
  End Argument.
  Definition Argument (T : Set) : Set := Argument.t (T := T).
  
  Definition ArgsList (Head Rest : Set) : Set :=
    ink_env.call.execution_input.ArgumentList
      (ink_env.call.execution_input.Argument Head)
      Rest.
  
  Module Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
    Section Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
      Context {T : Set}.
      Definition Self := ink_env.call.execution_input.Argument T.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') (ink_env.call.execution_input.Argument T).
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
    End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
    Section Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
      Context {T : Set}.
      Definition Self := ink_env.call.execution_input.Argument T.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
  
  Module ArgumentListEnd.
    Inductive t : Set := Build.
  End ArgumentListEnd.
  Definition ArgumentListEnd := @ArgumentListEnd.t.
  
  Module Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
    Definition Self := ink_env.call.execution_input.ArgumentListEnd.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_env.call.execution_input.ArgumentListEnd.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
  
  Module
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
    Definition Self := ink_env.call.execution_input.ArgumentListEnd.
    
    Parameter default :
        forall `{H' : State.Trait},
        M (H := H') ink_env.call.execution_input.ArgumentListEnd.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
    Definition Self := ink_env.call.execution_input.ArgumentListEnd.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
  
  Definition EmptyArgumentList : Set :=
    ink_env.call.execution_input.ArgumentList
      ink_env.call.execution_input.ArgumentListEnd
      ink_env.call.execution_input.ArgumentListEnd.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
    Section
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
      Context {T : Set}.
      Definition Self := ink_env.call.execution_input.Argument T.
      
      Parameter size_hint :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') usize.
      
      Global Instance Method_size_hint `{H' : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Parameter encode_to :
          forall
            `{H' : State.Trait}
            {O : Set}
            `{parity_scale_codec.codec.Output.Trait O}
            `{core.marker.Sized.Trait O},
          (ref Self) -> (mut_ref O) -> M (H := H') unit.
      
      Global Instance Method_encode_to `{H' : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
    Global Hint Resolve I : core.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
    Definition Self := ink_env.call.execution_input.EmptyArgumentList.
    
    Parameter size_hint :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') usize.
    
    Global Instance Method_size_hint `{H' : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {O : Set}
          `{parity_scale_codec.codec.Output.Trait O}
          `{core.marker.Sized.Trait O},
        (ref Self) -> (mut_ref O) -> M (H := H') unit.
    
    Global Instance Method_encode_to `{H' : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    Section
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
      Context {Head Rest : Set}.
      Definition Self :=
        ink_env.call.execution_input.ArgumentList
          (ink_env.call.execution_input.Argument Head)
          Rest.
      
      Parameter size_hint :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') usize.
      
      Global Instance Method_size_hint `{H' : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Parameter encode_to :
          forall
            `{H' : State.Trait}
            {O : Set}
            `{parity_scale_codec.codec.Output.Trait O}
            `{core.marker.Sized.Trait O},
          (ref Self) -> (mut_ref O) -> M (H := H') unit.
      
      Global Instance Method_encode_to `{H' : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    Global Hint Resolve I : core.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
    Section
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
      Context {Args : Set}.
      Definition Self := ink_env.call.execution_input.ExecutionInput Args.
      
      Parameter size_hint :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') usize.
      
      Global Instance Method_size_hint `{H' : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Parameter encode_to :
          forall
            `{H' : State.Trait}
            {O : Set}
            `{parity_scale_codec.codec.Output.Trait O}
            `{core.marker.Sized.Trait O},
          (ref Self) -> (mut_ref O) -> M (H := H') unit.
      
      Global Instance Method_encode_to `{H' : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
    Global Hint Resolve I : core.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
End execution_input.

Module ExecutionInput.
  Section ExecutionInput.
    Context {Args : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      selector : ink_env.call.selector.Selector;
      args : Args;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_selector : Notation.Dot "selector" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_selector : Notation.DoubleColon t "selector" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_args : Notation.Dot "args" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_args : Notation.DoubleColon t "args" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End ExecutionInput.
End ExecutionInput.
Definition ExecutionInput (Args : Set) : Set := ExecutionInput.t (Args := Args).

Module
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
  Section
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
    Context {Args : Set}.
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) ->
          M (H := H') (ink_env.call.execution_input.ExecutionInput Args).
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_call_execution_input_ExecutionInput_Args.

Module
  Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
  Section
    Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
    Context {Args : Set}.
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Parameter default :
        forall `{H' : State.Trait},
        M (H := H') (ink_env.call.execution_input.ExecutionInput Args).
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.
  Global Hint Resolve I : core.
End
  Impl_core_default_Default_for_ink_env_call_execution_input_ExecutionInput_Args.

Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
  Section
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
    Context {Args : Set}.
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ExecutionInput_Args.

Module ArgumentList.
  Section ArgumentList.
    Context {Head Rest : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      head : Head;
      rest : Rest;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_head : Notation.Dot "head" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_head : Notation.DoubleColon t "head" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_rest : Notation.Dot "rest" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_rest : Notation.DoubleColon t "rest" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End ArgumentList.
End ArgumentList.
Definition ArgumentList (Head Rest : Set) : Set :=
  ArgumentList.t (Head := Head) (Rest := Rest).

Module
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Section
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Context {Head Rest : Set}.
    Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) ->
          M (H := H') (ink_env.call.execution_input.ArgumentList Head Rest).
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End
    Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Global Hint Resolve I : core.
End
  Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentList_Head_Rest.

Module
  Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Section
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Context {Head Rest : Set}.
    Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
    
    Parameter default :
        forall `{H' : State.Trait},
        M (H := H') (ink_env.call.execution_input.ArgumentList Head Rest).
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
  End
    Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Global Hint Resolve I : core.
End
  Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentList_Head_Rest.

Module
  Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Section
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
    Context {Head Rest : Set}.
    Definition Self := ink_env.call.execution_input.ArgumentList Head Rest.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentList_Head_Rest.

Definition ArgsList (Head Rest : Set) : Set :=
  ink_env.call.execution_input.ArgumentList
    (ink_env.call.execution_input.Argument Head)
    Rest.

Module Argument.
  Section Argument.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      arg : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_arg : Notation.Dot "arg" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_arg : Notation.DoubleColon t "arg" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End Argument.
End Argument.
Definition Argument (T : Set) : Set := Argument.t (T := T).

Module Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
  Section Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
    Context {T : Set}.
    Definition Self := ink_env.call.execution_input.Argument T.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') (ink_env.call.execution_input.Argument T).
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_call_execution_input_Argument_T.

Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
  Section Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
    Context {T : Set}.
    Definition Self := ink_env.call.execution_input.Argument T.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_Argument_T.

Module ArgumentListEnd.
  Inductive t : Set := Build.
End ArgumentListEnd.
Definition ArgumentListEnd := @ArgumentListEnd.t.

Module Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.
  Definition Self := ink_env.call.execution_input.ArgumentListEnd.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_env.call.execution_input.ArgumentListEnd.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_call_execution_input_ArgumentListEnd.

Module
  Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.
  Definition Self := ink_env.call.execution_input.ArgumentListEnd.
  
  Parameter default :
      forall `{H' : State.Trait},
      M (H := H') ink_env.call.execution_input.ArgumentListEnd.
  
  Global Instance AssociatedFunction_default `{H' : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H' : State.Trait} := default;
  }.
  Global Hint Resolve I : core.
End Impl_core_default_Default_for_ink_env_call_execution_input_ArgumentListEnd.

Module Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.
  Definition Self := ink_env.call.execution_input.ArgumentListEnd.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_call_execution_input_ArgumentListEnd.

Definition EmptyArgumentList : Set :=
  ink_env.call.execution_input.ArgumentList
    ink_env.call.execution_input.ArgumentListEnd
    ink_env.call.execution_input.ArgumentListEnd.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
    Context {T : Set}.
    Definition Self := ink_env.call.execution_input.Argument T.
    
    Parameter size_hint :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') usize.
    
    Global Instance Method_size_hint `{H' : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {O : Set}
          `{parity_scale_codec.codec.Output.Trait O}
          `{core.marker.Sized.Trait O},
        (ref Self) -> (mut_ref O) -> M (H := H') unit.
    
    Global Instance Method_encode_to `{H' : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_Argument_T.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.
  Definition Self := ink_env.call.execution_input.EmptyArgumentList.
  
  Parameter size_hint :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') usize.
  
  Global Instance Method_size_hint `{H' : State.Trait} :
    Notation.Dot "size_hint" := {
    Notation.dot := size_hint;
  }.
  
  Parameter encode_to :
      forall
        `{H' : State.Trait}
        {O : Set}
        `{parity_scale_codec.codec.Output.Trait O}
        `{core.marker.Sized.Trait O},
      (ref Self) -> (mut_ref O) -> M (H := H') unit.
  
  Global Instance Method_encode_to `{H' : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_EmptyArgumentList.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
    Context {Head Rest : Set}.
    Definition Self :=
      ink_env.call.execution_input.ArgumentList
        (ink_env.call.execution_input.Argument Head)
        Rest.
    
    Parameter size_hint :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') usize.
    
    Global Instance Method_size_hint `{H' : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {O : Set}
          `{parity_scale_codec.codec.Output.Trait O}
          `{core.marker.Sized.Trait O},
        (ref Self) -> (mut_ref O) -> M (H := H') unit.
    
    Global Instance Method_encode_to `{H' : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ArgumentList_ink_env_call_execution_input_Argument_Head_Rest.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
    Context {Args : Set}.
    Definition Self := ink_env.call.execution_input.ExecutionInput Args.
    
    Parameter size_hint :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') usize.
    
    Global Instance Method_size_hint `{H' : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {O : Set}
          `{parity_scale_codec.codec.Output.Trait O}
          `{core.marker.Sized.Trait O},
        (ref Self) -> (mut_ref O) -> M (H := H') unit.
    
    Global Instance Method_encode_to `{H' : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_call_execution_input_ExecutionInput_Args.

Module selector.
  Module Selector.
    Unset Primitive Projections.
    Record t : Set := {
      bytes : list u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_bytes : Notation.Dot "bytes" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End Selector.
  Definition Selector : Set := Selector.t.
  
  Module Impl_core_default_Default_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Parameter default :
        forall `{H' : State.Trait},
        M (H := H') ink_env.call.selector.Selector.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
    Global Hint Resolve I : core.
  End Impl_core_default_Default_for_ink_env_call_selector_Selector.
  
  Module Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
  
  Module Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
  
  Module Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_env.call.selector.Selector.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) -> (ref ink_env.call.selector.Selector) -> M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
  
  Module Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
  
  Module Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
  
  Module Impl_core_convert_From_for_ink_env_call_selector_Selector.
    Definition Self := ink_env.call.selector.Selector.
    
    Parameter from :
        forall `{H' : State.Trait},
        (list u8) -> M (H := H') ink_env.call.selector.Selector.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I : core.convert.From.Trait Self (T := list u8) := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_From_for_ink_env_call_selector_Selector.
End selector.

Module Selector.
  Unset Primitive Projections.
  Record t : Set := {
    bytes : list u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_bytes : Notation.Dot "bytes" := {
    Notation.dot '(Build_t x0) := x0;
  }.
  Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
    Notation.double_colon '(Build_t x0) := x0;
  }.
End Selector.
Definition Selector : Set := Selector.t.

Module Impl_core_default_Default_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter default :
      forall `{H' : State.Trait},
      M (H := H') ink_env.call.selector.Selector.
  
  Global Instance AssociatedFunction_default `{H' : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H' : State.Trait} := default;
  }.
  Global Hint Resolve I : core.
End Impl_core_default_Default_for_ink_env_call_selector_Selector.

Module Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_call_selector_Selector.

Module Impl_core_marker_Copy_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_call_selector_Selector.

Module Impl_core_clone_Clone_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_env.call.selector.Selector.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_call_selector_Selector.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_env_call_selector_Selector.

Module Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) -> (ref ink_env.call.selector.Selector) -> M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_call_selector_Selector.

Module Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_env_call_selector_Selector.

Module Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_call_selector_Selector.

Module Impl_core_convert_From_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter from :
      forall `{H' : State.Trait},
      (list u8) -> M (H := H') ink_env.call.selector.Selector.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := list u8) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_ink_env_call_selector_Selector.

Module Impl_parity_scale_codec_codec_Decode_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter decode :
      forall
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
      (mut_ref __CodecInputEdqy) ->
        M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode `{H' : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode `{H' : State.Trait} := decode;
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_env_call_selector_Selector.

Module Impl_parity_scale_codec_codec_Encode_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Parameter encode_to :
      forall
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy},
      (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
  
  Global Instance Method_encode_to `{H' : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Parameter encode :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') (alloc.vec.Vec Root.core.primitive.u8).
  
  Global Instance Method_encode `{H' : State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Parameter using_encoded :
      forall
        `{H' : State.Trait}
        {R F : Set}
        `{core.ops.function.FnOnce.Trait F
            (Args := ref (Slice Root.core.primitive.u8))},
      (ref Self) -> F -> M (H := H') R.
  
  Global Instance Method_using_encoded `{H' : State.Trait} :
    Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_env_call_selector_Selector.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_env_call_selector_Selector.
  Definition Self := ink_env.call.selector.Selector.
  
  Global Instance I
    : parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
      := {
  }.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_env_call_selector_Selector.

Module chain_extension.
  Module FromStatusCode.
    Class Trait (Self : Set) `{core.marker.Sized.Trait Self} : Type := {
      from_status_code `{H' : State.Trait}
        :
        u32 -> M (H := H') (core.result.Result unit Self);
    }.
    
    Global Instance Method_from_status_code `{H' : State.Trait} `(Trait)
      : Notation.Dot "from_status_code" := {
      Notation.dot := from_status_code;
    }.
  End FromStatusCode.
  
  Module ChainExtensionMethod.
    Section ChainExtensionMethod.
      Context {I O ErrorCode : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        func_id : u32;
        state : core.marker.PhantomData ((I * O) * ErrorCode);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_func_id : Notation.Dot "func_id" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_func_id : Notation.DoubleColon t "func_id" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get_state : Notation.Dot "state" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF_state : Notation.DoubleColon t "state" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End ChainExtensionMethod.
  End ChainExtensionMethod.
  Definition ChainExtensionMethod (I O ErrorCode : Set) : Set :=
    ChainExtensionMethod.t (I := I) (O := O) (ErrorCode := ErrorCode).
  
  Module
    Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
    Section
      Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
      Context {I O ErrorCode : Set}.
      Definition Self :=
        ink_env.chain_extension.ChainExtensionMethod I O ErrorCode.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End
      Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
    Global Hint Resolve I : core.
  End
    Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
  
  Module state.
    Module IgnoreErrorCode.
      Inductive t : Set :=
      .
    End IgnoreErrorCode.
    Definition IgnoreErrorCode := IgnoreErrorCode.t.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
      Definition Self := ink_env.chain_extension.state.IgnoreErrorCode.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
    
    Module HandleErrorCode.
      Section HandleErrorCode.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          error_code : core.marker.PhantomData (T);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_error_code : Notation.Dot "error_code" := {
          Notation.dot '(Build_t x0) := x0;
        }.
        Global Instance Get_AF_error_code
          : Notation.DoubleColon t "error_code" := {
          Notation.double_colon '(Build_t x0) := x0;
        }.
      End HandleErrorCode.
    End HandleErrorCode.
    Definition HandleErrorCode (T : Set) : Set := HandleErrorCode.t (T := T).
    
    Module
      Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
      Section
        Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
        Context {T : Set}.
        Definition Self := ink_env.chain_extension.state.HandleErrorCode T.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End
        Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
  End state.
  
  Module private.
    Module IsResultTypeSealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End IsResultTypeSealed.
  End private.
  
  Module IsResultType.
    Class Trait
        (Self : Set)
        `{ink_env.chain_extension.private.IsResultTypeSealed.Trait Self} :
        Type := {
      Ok : Set;
      Err : Set;
    }.
    
    Global Instance Method_Ok `(Trait) : Notation.DoubleColonType Self "Ok" := {
      Notation.double_colon_type := Ok;
    }.
    Global Instance Method_Err `(Trait)
      : Notation.DoubleColonType Self "Err" := {
      Notation.double_colon_type := Err;
    }.
  End IsResultType.
  
  Module
    Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
    Section
      Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
      Context {T E : Set}.
      Definition Self := core.result.Result T E.
      
      Global Instance I
        : ink_env.chain_extension.private.IsResultTypeSealed.Trait Self := {
      }.
    End
      Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
  
  Module Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
    Section
      Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
      Context {T E : Set}.
      Definition Self := core.result.Result T E.
      
      Definition Ok : Set := T.
      
      Definition Err : Set := E.
      
      Global Instance I : ink_env.chain_extension.IsResultType.Trait Self := {
        ink_env.chain_extension.IsResultType.Ok := Ok;
        ink_env.chain_extension.IsResultType.Err := Err;
      }.
    End Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
    Global Hint Resolve I : core.
  End Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
End chain_extension.

Module FromStatusCode.
  Class Trait (Self : Set) `{core.marker.Sized.Trait Self} : Type := {
    from_status_code `{H' : State.Trait}
      :
      u32 -> M (H := H') (core.result.Result unit Self);
  }.
  
  Global Instance Method_from_status_code `{H' : State.Trait} `(Trait)
    : Notation.Dot "from_status_code" := {
    Notation.dot := from_status_code;
  }.
End FromStatusCode.

Module ChainExtensionMethod.
  Section ChainExtensionMethod.
    Context {I O ErrorCode : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      func_id : u32;
      state : core.marker.PhantomData ((I * O) * ErrorCode);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_func_id : Notation.Dot "func_id" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_func_id : Notation.DoubleColon t "func_id" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_state : Notation.Dot "state" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_state : Notation.DoubleColon t "state" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End ChainExtensionMethod.
End ChainExtensionMethod.
Definition ChainExtensionMethod (I O ErrorCode : Set) : Set :=
  ChainExtensionMethod.t (I := I) (O := O) (ErrorCode := ErrorCode).

Module
  Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
  Section
    Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
    Context {I O ErrorCode : Set}.
    Definition Self :=
      ink_env.chain_extension.ChainExtensionMethod I O ErrorCode.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.
  Global Hint Resolve I : core.
End
  Impl_core_fmt_Debug_for_ink_env_chain_extension_ChainExtensionMethod_I_O_ErrorCode.

Module Wrap_state_1.
  Module state.
    Module IgnoreErrorCode.
      Inductive t : Set :=
      .
    End IgnoreErrorCode.
    Definition IgnoreErrorCode := IgnoreErrorCode.t.
    
    Module
      Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
      Definition Self := ink_env.chain_extension.state.IgnoreErrorCode.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
    
    Module HandleErrorCode.
      Section HandleErrorCode.
        Context {T : Set}.
        Unset Primitive Projections.
        Record t : Set := {
          error_code : core.marker.PhantomData (T);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_error_code : Notation.Dot "error_code" := {
          Notation.dot '(Build_t x0) := x0;
        }.
        Global Instance Get_AF_error_code
          : Notation.DoubleColon t "error_code" := {
          Notation.double_colon '(Build_t x0) := x0;
        }.
      End HandleErrorCode.
    End HandleErrorCode.
    Definition HandleErrorCode (T : Set) : Set := HandleErrorCode.t (T := T).
    
    Module
      Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
      Section
        Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
        Context {T : Set}.
        Definition Self := ink_env.chain_extension.state.HandleErrorCode T.
        
        Parameter fmt :
            forall `{H' : State.Trait},
            (ref Self) ->
              (mut_ref core.fmt.Formatter) ->
              M (H := H') core.fmt.Result.
        
        Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
          Notation.dot := fmt;
        }.
        
        Global Instance I : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
        }.
      End
        Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
  End state.
End Wrap_state_1.
Import Wrap_state_1.

Module IgnoreErrorCode.
  Inductive t : Set :=
  .
End IgnoreErrorCode.
Definition IgnoreErrorCode := IgnoreErrorCode.t.

Module Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.
  Definition Self := ink_env.chain_extension.state.IgnoreErrorCode.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_IgnoreErrorCode.

Module HandleErrorCode.
  Section HandleErrorCode.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      error_code : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_error_code : Notation.Dot "error_code" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_error_code : Notation.DoubleColon t "error_code" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End HandleErrorCode.
End HandleErrorCode.
Definition HandleErrorCode (T : Set) : Set := HandleErrorCode.t (T := T).

Module Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
  Section
    Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
    Context {T : Set}.
    Definition Self := ink_env.chain_extension.state.HandleErrorCode T.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_chain_extension_state_HandleErrorCode_T.

Module IsResultType.
  Class Trait
      (Self : Set)
      `{ink_env.chain_extension.private.IsResultTypeSealed.Trait Self} :
      Type := {
    Ok : Set;
    Err : Set;
  }.
  
  Global Instance Method_Ok `(Trait) : Notation.DoubleColonType Self "Ok" := {
    Notation.double_colon_type := Ok;
  }.
  Global Instance Method_Err `(Trait) : Notation.DoubleColonType Self "Err" := {
    Notation.double_colon_type := Err;
  }.
End IsResultType.

Module
  Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
  Section
    Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
    Context {T E : Set}.
    Definition Self := core.result.Result T E.
    
    Global Instance I
      : ink_env.chain_extension.private.IsResultTypeSealed.Trait Self := {
    }.
  End
    Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.
  Global Hint Resolve I : core.
End
  Impl_ink_env_chain_extension_private_IsResultTypeSealed_for_core_result_Result_T_E.

Module Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
  Section Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
    Context {T E : Set}.
    Definition Self := core.result.Result T E.
    
    Definition Ok : Set := T.
    
    Definition Err : Set := E.
    
    Global Instance I : ink_env.chain_extension.IsResultType.Trait Self := {
      ink_env.chain_extension.IsResultType.Ok := Ok;
      ink_env.chain_extension.IsResultType.Err := Err;
    }.
  End Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.
  Global Hint Resolve I : core.
End Impl_ink_env_chain_extension_IsResultType_for_core_result_Result_T_E.

Module private.
  Module IsResultTypeSealed.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End IsResultTypeSealed.
End private.

Module IsResultTypeSealed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End IsResultTypeSealed.

Module ContractEnv.
  Class Trait (Self : Set) : Type := {
    Env : Set;
    _ : Sigma `(ink_env.types.Environment.Trait Env), unit;
  }.
  
  Global Instance Method_Env `(Trait) : Notation.DoubleColonType Self "Env" := {
    Notation.double_colon_type := Env;
  }.
End ContractEnv.

Module ContractReference.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
  }.
  
  Global Instance Method_Type_ `(Trait)
    : Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractReference.

Module off_chain.
  Module call_data.
    Module CallData.
      Unset Primitive Projections.
      Record t : Set := {
        bytes : alloc.vec.Vec u8;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_bytes : Notation.Dot "bytes" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End CallData.
    Definition CallData : Set := CallData.t.
    
    Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
      Global Hint Resolve I : core.
    End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Parameter clone :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') ink_env.engine.off_chain.call_data.CallData.
      
      Global Instance Method_clone `{H' : State.Trait} :
        Notation.Dot "clone" := {
        Notation.dot := clone;
      }.
      
      Global Instance I : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone `{H' : State.Trait} := clone;
      }.
      Global Hint Resolve I : core.
    End Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Parameter eq :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref ink_env.engine.off_chain.call_data.CallData) ->
            M (H := H') bool.
      
      Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
        Notation.dot := eq;
      }.
      
      Global Instance I
        : core.cmp.PartialEq.Trait Self
            (Rhs := core.cmp.PartialEq.Default.Rhs Self)
          := {
        core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Global Instance I : core.marker.StructuralEq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Parameter assert_receiver_is_total_eq :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') unit.
      
      Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
        Notation.Dot "assert_receiver_is_total_eq" := {
        Notation.dot := assert_receiver_is_total_eq;
      }.
      
      Global Instance I : core.cmp.Eq.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Parameter size_hint :
          forall `{H' : State.Trait},
          (ref Self) -> M (H := H') usize.
      
      Global Instance Method_size_hint `{H' : State.Trait} :
        Notation.Dot "size_hint" := {
        Notation.dot := size_hint;
      }.
      
      Parameter encode_to :
          forall
            `{H' : State.Trait}
            {T : Set}
            `{parity_scale_codec.codec.Output.Trait T}
            `{core.marker.Sized.Trait T},
          (ref Self) -> (mut_ref T) -> M (H := H') unit.
      
      Global Instance Method_encode_to `{H' : State.Trait} :
        Notation.Dot "encode_to" := {
        Notation.dot := encode_to;
      }.
      
      Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
      }.
      Global Hint Resolve I : core.
    End
      Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
    
    Module
      Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
      Definition Self := ink_env.engine.off_chain.call_data.CallData.
      
      Parameter decode :
          forall
            `{H' : State.Trait}
            {I : Set}
            `{parity_scale_codec.codec.Input.Trait I},
          (mut_ref I) ->
            M (H := H')
              (core.result.Result Self parity_scale_codec.error.Error).
      
      Global Instance AssociatedFunction_decode `{H' : State.Trait} :
        Notation.DoubleColon Self "decode" := {
        Notation.double_colon := decode;
      }.
      
      Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
        parity_scale_codec.codec.Decode.decode `{H' : State.Trait} := decode;
      }.
      Global Hint Resolve I : core.
    End
      Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
  End call_data.
  
  Module impls.
    Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
      Definition Self := ink_env.hash.Blake2x128.
      
      Parameter hash :
          forall `{H' : State.Trait},
          (ref (Slice u8)) ->
            (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
            M (H := H') unit.
      
      Global Instance AssociatedFunction_hash `{H' : State.Trait} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash;
      }.
      
      Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
        ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
      }.
      Global Hint Resolve I : core.
    End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
    
    Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
      Definition Self := ink_env.hash.Blake2x256.
      
      Parameter hash :
          forall `{H' : State.Trait},
          (ref (Slice u8)) ->
            (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
            M (H := H') unit.
      
      Global Instance AssociatedFunction_hash `{H' : State.Trait} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash;
      }.
      
      Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
        ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
      }.
      Global Hint Resolve I : core.
    End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
    
    Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
      Definition Self := ink_env.hash.Sha2x256.
      
      Parameter hash :
          forall `{H' : State.Trait},
          (ref (Slice u8)) ->
            (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
            M (H := H') unit.
      
      Global Instance AssociatedFunction_hash `{H' : State.Trait} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash;
      }.
      
      Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
        ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
      }.
      Global Hint Resolve I : core.
    End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
    
    Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
      Definition Self := ink_env.hash.Keccak256.
      
      Parameter hash :
          forall `{H' : State.Trait},
          (ref (Slice u8)) ->
            (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
            M (H := H') unit.
      
      Global Instance AssociatedFunction_hash `{H' : State.Trait} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash;
      }.
      
      Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
        ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
      }.
      Global Hint Resolve I : core.
    End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
    
    Module
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.ext.Error -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.ext.Error) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    
    Module TopicsBuilder.
      Unset Primitive Projections.
      Record t : Set := {
        topics : alloc.vec.Vec (alloc.vec.Vec u8);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_topics : Notation.Dot "topics" := {
        Notation.dot '(Build_t x0) := x0;
      }.
      Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
        Notation.double_colon '(Build_t x0) := x0;
      }.
    End TopicsBuilder.
    Definition TopicsBuilder : Set := TopicsBuilder.t.
    
    Module
      Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
      
      Parameter default :
          forall `{H' : State.Trait},
          M (H := H') ink_env.engine.off_chain.impls.TopicsBuilder.
      
      Global Instance AssociatedFunction_default `{H' : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H' : State.Trait} := default;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    
    Module
      Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      Section
        Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
        Context {E : Set}.
        Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
        
        Definition Output : Set := alloc.vec.Vec u8.
        
        Parameter expect :
            forall `{H' : State.Trait},
            (mut_ref Self) -> usize -> M (H := H') unit.
        
        Global Instance Method_expect `{H' : State.Trait} :
          Notation.Dot "expect" := {
          Notation.dot := expect;
        }.
        
        Parameter push_topic :
            forall
              `{H' : State.Trait}
              {T : Set}
              `{parity_scale_codec.codec.Encode.Trait T},
            (mut_ref Self) -> (ref T) -> M (H := H') unit.
        
        Global Instance Method_push_topic `{H' : State.Trait} :
          Notation.Dot "push_topic" := {
          Notation.dot := push_topic;
        }.
        
        Parameter output :
            forall `{H' : State.Trait},
            Self -> M (H := H') Output.
        
        Global Instance Method_output `{H' : State.Trait} :
          Notation.Dot "output" := {
          Notation.dot := output;
        }.
        
        Global Instance I
          : ink_env.topics.TopicsBuilderBackend.Trait Self (E := E) := {
          ink_env.topics.TopicsBuilderBackend.Output := Output;
          ink_env.topics.TopicsBuilderBackend.expect `{H' : State.Trait}
            :=
            expect;
          ink_env.topics.TopicsBuilderBackend.push_topic `{H' : State.Trait}
            :=
            push_topic;
          ink_env.topics.TopicsBuilderBackend.output `{H' : State.Trait}
            :=
            output;
        }.
      End
        Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      Global Hint Resolve I : core.
    End
      Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    
    Module
      Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
      Definition Self := ink_env.engine.off_chain.EnvInstance.
      
      Parameter set_contract_storage :
          forall
            `{H' : State.Trait}
            {K V : Set}
            `{parity_scale_codec.codec.Encode.Trait K}
            `{ink_storage_traits.storage.Storable.Trait V},
          (mut_ref Self) ->
            (ref K) ->
            (ref V) ->
            M (H := H') (core.option.Option u32).
      
      Global Instance Method_set_contract_storage `{H' : State.Trait} :
        Notation.Dot "set_contract_storage" := {
        Notation.dot := set_contract_storage;
      }.
      
      Parameter get_contract_storage :
          forall
            `{H' : State.Trait}
            {K R : Set}
            `{parity_scale_codec.codec.Encode.Trait K}
            `{ink_storage_traits.storage.Storable.Trait R},
          (mut_ref Self) ->
            (ref K) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (core.option.Option R)).
      
      Global Instance Method_get_contract_storage `{H' : State.Trait} :
        Notation.Dot "get_contract_storage" := {
        Notation.dot := get_contract_storage;
      }.
      
      Parameter take_contract_storage :
          forall
            `{H' : State.Trait}
            {K R : Set}
            `{parity_scale_codec.codec.Encode.Trait K}
            `{ink_storage_traits.storage.Storable.Trait R},
          (mut_ref Self) ->
            (ref K) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (core.option.Option R)).
      
      Global Instance Method_take_contract_storage `{H' : State.Trait} :
        Notation.Dot "take_contract_storage" := {
        Notation.dot := take_contract_storage;
      }.
      
      Parameter contains_contract_storage :
          forall
            `{H' : State.Trait}
            {K : Set}
            `{parity_scale_codec.codec.Encode.Trait K},
          (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32).
      
      Global Instance Method_contains_contract_storage `{H' : State.Trait} :
        Notation.Dot "contains_contract_storage" := {
        Notation.dot := contains_contract_storage;
      }.
      
      Parameter clear_contract_storage :
          forall
            `{H' : State.Trait}
            {K : Set}
            `{parity_scale_codec.codec.Encode.Trait K},
          (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32).
      
      Global Instance Method_clear_contract_storage `{H' : State.Trait} :
        Notation.Dot "clear_contract_storage" := {
        Notation.dot := clear_contract_storage;
      }.
      
      Parameter decode_input :
          forall
            `{H' : State.Trait}
            {T : Set}
            `{parity_scale_codec.codec.Decode.Trait T},
          (mut_ref Self) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                T).
      
      Global Instance Method_decode_input `{H' : State.Trait} :
        Notation.Dot "decode_input" := {
        Notation.dot := decode_input;
      }.
      
      Parameter return_value :
          forall
            `{H' : State.Trait}
            {R : Set}
            `{parity_scale_codec.codec.Encode.Trait R},
          (mut_ref Self) ->
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
            ->
            (ref R) ->
            M (H := H') Empty_set.
      
      Global Instance Method_return_value `{H' : State.Trait} :
        Notation.Dot "return_value" := {
        Notation.dot := return_value;
      }.
      
      Parameter debug_message :
          forall `{H' : State.Trait},
          (mut_ref Self) -> (ref str) -> M (H := H') unit.
      
      Global Instance Method_debug_message `{H' : State.Trait} :
        Notation.Dot "debug_message" := {
        Notation.dot := debug_message;
      }.
      
      Parameter hash_bytes :
          forall
            `{H' : State.Trait}
            {H : Set}
            `{ink_env.hash.CryptoHash.Trait H},
          (mut_ref Self) ->
            (ref (Slice u8)) ->
            (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
            M (H := H') unit.
      
      Global Instance Method_hash_bytes `{H' : State.Trait} :
        Notation.Dot "hash_bytes" := {
        Notation.dot := hash_bytes;
      }.
      
      Parameter hash_encoded :
          forall
            `{H' : State.Trait}
            {H T : Set}
            `{ink_env.hash.CryptoHash.Trait H}
            `{parity_scale_codec.codec.Encode.Trait T},
          (mut_ref Self) ->
            (ref T) ->
            (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
            M (H := H') unit.
      
      Global Instance Method_hash_encoded `{H' : State.Trait} :
        Notation.Dot "hash_encoded" := {
        Notation.dot := hash_encoded;
      }.
      
      Parameter ecdsa_recover :
          forall `{H' : State.Trait},
          (mut_ref Self) ->
            (ref (list u8)) ->
            (ref (list u8)) ->
            (mut_ref (list u8)) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit).
      
      Global Instance Method_ecdsa_recover `{H' : State.Trait} :
        Notation.Dot "ecdsa_recover" := {
        Notation.dot := ecdsa_recover;
      }.
      
      Parameter ecdsa_to_eth_address :
          forall `{H' : State.Trait},
          (mut_ref Self) ->
            (ref (list u8)) ->
            (mut_ref (list u8)) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit).
      
      Global Instance Method_ecdsa_to_eth_address `{H' : State.Trait} :
        Notation.Dot "ecdsa_to_eth_address" := {
        Notation.dot := ecdsa_to_eth_address;
      }.
      
      Parameter call_chain_extension :
          forall
            `{H' : State.Trait}
            {I T E ErrorCode F D : Set}
            `{parity_scale_codec.codec.Encode.Trait I}
            `{parity_scale_codec.codec.Decode.Trait T}
            `{core.convert.From.Trait E (T := ErrorCode)}
            `{core.ops.function.FnOnce.Trait F (Args := u32)}
            `{core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))},
          (mut_ref Self) ->
            u32 ->
            (ref I) ->
            F ->
            D ->
            M (H := H') (core.result.Result T E).
      
      Global Instance Method_call_chain_extension `{H' : State.Trait} :
        Notation.Dot "call_chain_extension" := {
        Notation.dot := call_chain_extension;
      }.
      
      Parameter set_code_hash :
          forall `{H' : State.Trait},
          (mut_ref Self) ->
            (ref (Slice u8)) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit).
      
      Global Instance Method_set_code_hash `{H' : State.Trait} :
        Notation.Dot "set_code_hash" := {
        Notation.dot := set_code_hash;
      }.
      
      Global Instance I
        : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
              Self
          := {
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.set_contract_storage
          `{H' : State.Trait}
          :=
          set_contract_storage;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.get_contract_storage
          `{H' : State.Trait}
          :=
          get_contract_storage;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.take_contract_storage
          `{H' : State.Trait}
          :=
          take_contract_storage;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.contains_contract_storage
          `{H' : State.Trait}
          :=
          contains_contract_storage;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.clear_contract_storage
          `{H' : State.Trait}
          :=
          clear_contract_storage;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.decode_input
          `{H' : State.Trait}
          :=
          decode_input;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.return_value
          `{H' : State.Trait}
          :=
          return_value;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.debug_message
          `{H' : State.Trait}
          :=
          debug_message;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.hash_bytes
          `{H' : State.Trait}
          :=
          hash_bytes;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.hash_encoded
          `{H' : State.Trait}
          :=
          hash_encoded;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.ecdsa_recover
          `{H' : State.Trait}
          :=
          ecdsa_recover;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.ecdsa_to_eth_address
          `{H' : State.Trait}
          :=
          ecdsa_to_eth_address;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.call_chain_extension
          `{H' : State.Trait}
          :=
          call_chain_extension;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.set_code_hash
          `{H' : State.Trait}
          :=
          set_code_hash;
      }.
      Global Hint Resolve I : core.
    End
      Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
    
    Module
      Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
      Definition Self := ink_env.engine.off_chain.EnvInstance.
      
      Parameter caller :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') E::type["AccountId"].
      
      Global Instance Method_caller `{H' : State.Trait} :
        Notation.Dot "caller" := {
        Notation.dot := caller;
      }.
      
      Parameter transferred_value :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') E::type["Balance"].
      
      Global Instance Method_transferred_value `{H' : State.Trait} :
        Notation.Dot "transferred_value" := {
        Notation.dot := transferred_value;
      }.
      
      Parameter gas_left :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') u64.
      
      Global Instance Method_gas_left `{H' : State.Trait} :
        Notation.Dot "gas_left" := {
        Notation.dot := gas_left;
      }.
      
      Parameter block_timestamp :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') E::type["Timestamp"].
      
      Global Instance Method_block_timestamp `{H' : State.Trait} :
        Notation.Dot "block_timestamp" := {
        Notation.dot := block_timestamp;
      }.
      
      Parameter account_id :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') E::type["AccountId"].
      
      Global Instance Method_account_id `{H' : State.Trait} :
        Notation.Dot "account_id" := {
        Notation.dot := account_id;
      }.
      
      Parameter balance :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') E::type["Balance"].
      
      Global Instance Method_balance `{H' : State.Trait} :
        Notation.Dot "balance" := {
        Notation.dot := balance;
      }.
      
      Parameter block_number :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') E::type["BlockNumber"].
      
      Global Instance Method_block_number `{H' : State.Trait} :
        Notation.Dot "block_number" := {
        Notation.dot := block_number;
      }.
      
      Parameter minimum_balance :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') E::type["Balance"].
      
      Global Instance Method_minimum_balance `{H' : State.Trait} :
        Notation.Dot "minimum_balance" := {
        Notation.dot := minimum_balance;
      }.
      
      Parameter emit_event :
          forall
            `{H' : State.Trait}
            {E Event : Set}
            `{ink_env.types.Environment.Trait E}
            `{ink_env.topics.Topics.Trait Event}
            `{parity_scale_codec.codec.Encode.Trait Event},
          (mut_ref Self) -> Event -> M (H := H') unit.
      
      Global Instance Method_emit_event `{H' : State.Trait} :
        Notation.Dot "emit_event" := {
        Notation.dot := emit_event;
      }.
      
      Parameter invoke_contract :
          forall
            `{H' : State.Trait}
            {E Args R : Set}
            `{ink_env.types.Environment.Trait E}
            `{parity_scale_codec.codec.Encode.Trait Args}
            `{parity_scale_codec.codec.Decode.Trait R},
          (mut_ref Self) ->
            (ref
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
                E
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  E)
                Args
                R))
            ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (ink_primitives.MessageResult R)).
      
      Global Instance Method_invoke_contract `{H' : State.Trait} :
        Notation.Dot "invoke_contract" := {
        Notation.dot := invoke_contract;
      }.
      
      Parameter invoke_contract_delegate :
          forall
            `{H' : State.Trait}
            {E Args R : Set}
            `{ink_env.types.Environment.Trait E}
            `{parity_scale_codec.codec.Encode.Trait Args}
            `{parity_scale_codec.codec.Decode.Trait R},
          (mut_ref Self) ->
            (ref
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
                E
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
                  E)
                Args
                R))
            ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (ink_primitives.MessageResult R)).
      
      Global Instance Method_invoke_contract_delegate `{H' : State.Trait} :
        Notation.Dot "invoke_contract_delegate" := {
        Notation.dot := invoke_contract_delegate;
      }.
      
      Parameter instantiate_contract :
          forall
            `{H' : State.Trait}
            {E ContractRef Args Salt R : Set}
            `{ink_env.types.Environment.Trait E}
            `{ink_env.call.create_builder.FromAccountId.Trait ContractRef
                (T := E)}
            `{parity_scale_codec.codec.Encode.Trait Args}
            `{core.convert.AsRef.Trait Salt (T := Slice u8)}
            `{ink_env.call.create_builder.ConstructorReturnType.Trait R
                (C := ContractRef)},
          (mut_ref Self) ->
            (ref
              (ink_env.call.create_builder.CreateParams
                E
                ContractRef
                Args
                Salt
                R))
            ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                (ink_primitives.ConstructorResult
                  (ink_env.call.create_builder.ConstructorReturnType.Output
                    (Self := R)))).
      
      Global Instance Method_instantiate_contract `{H' : State.Trait} :
        Notation.Dot "instantiate_contract" := {
        Notation.dot := instantiate_contract;
      }.
      
      Parameter terminate_contract :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> E::type["AccountId"] -> M (H := H') Empty_set.
      
      Global Instance Method_terminate_contract `{H' : State.Trait} :
        Notation.Dot "terminate_contract" := {
        Notation.dot := terminate_contract;
      }.
      
      Parameter transfer :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) ->
            E::type["AccountId"] ->
            E::type["Balance"] ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit).
      
      Global Instance Method_transfer `{H' : State.Trait} :
        Notation.Dot "transfer" := {
        Notation.dot := transfer;
      }.
      
      Parameter weight_to_fee :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> u64 -> M (H := H') E::type["Balance"].
      
      Global Instance Method_weight_to_fee `{H' : State.Trait} :
        Notation.Dot "weight_to_fee" := {
        Notation.dot := weight_to_fee;
      }.
      
      Parameter is_contract :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> (ref E::type["AccountId"]) -> M (H := H') bool.
      
      Global Instance Method_is_contract `{H' : State.Trait} :
        Notation.Dot "is_contract" := {
        Notation.dot := is_contract;
      }.
      
      Parameter caller_is_origin :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) -> M (H := H') bool.
      
      Global Instance Method_caller_is_origin `{H' : State.Trait} :
        Notation.Dot "caller_is_origin" := {
        Notation.dot := caller_is_origin;
      }.
      
      Parameter code_hash :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) ->
            (ref E::type["AccountId"]) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                E::type["Hash"]).
      
      Global Instance Method_code_hash `{H' : State.Trait} :
        Notation.Dot "code_hash" := {
        Notation.dot := code_hash;
      }.
      
      Parameter own_code_hash :
          forall
            `{H' : State.Trait}
            {E : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                E::type["Hash"]).
      
      Global Instance Method_own_code_hash `{H' : State.Trait} :
        Notation.Dot "own_code_hash" := {
        Notation.dot := own_code_hash;
      }.
      
      Parameter call_runtime :
          forall
            `{H' : State.Trait}
            {E Call : Set}
            `{ink_env.types.Environment.Trait E},
          (mut_ref Self) ->
            (ref Call) ->
            M (H := H')
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
                unit).
      
      Global Instance Method_call_runtime `{H' : State.Trait} :
        Notation.Dot "call_runtime" := {
        Notation.dot := call_runtime;
      }.
      
      Global Instance I
        : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.Trait
              Self
          := {
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.caller
          `{H' : State.Trait}
          :=
          caller;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.transferred_value
          `{H' : State.Trait}
          :=
          transferred_value;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.weight_to_fee
          `{H' : State.Trait}
          :=
          weight_to_fee;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.gas_left
          `{H' : State.Trait}
          :=
          gas_left;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.block_timestamp
          `{H' : State.Trait}
          :=
          block_timestamp;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.account_id
          `{H' : State.Trait}
          :=
          account_id;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.balance
          `{H' : State.Trait}
          :=
          balance;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.block_number
          `{H' : State.Trait}
          :=
          block_number;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.minimum_balance
          `{H' : State.Trait}
          :=
          minimum_balance;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.emit_event
          `{H' : State.Trait}
          :=
          emit_event;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.invoke_contract
          `{H' : State.Trait}
          :=
          invoke_contract;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.invoke_contract_delegate
          `{H' : State.Trait}
          :=
          invoke_contract_delegate;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.instantiate_contract
          `{H' : State.Trait}
          :=
          instantiate_contract;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.terminate_contract
          `{H' : State.Trait}
          :=
          terminate_contract;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.transfer
          `{H' : State.Trait}
          :=
          transfer;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.is_contract
          `{H' : State.Trait}
          :=
          is_contract;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.caller_is_origin
          `{H' : State.Trait}
          :=
          caller_is_origin;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.code_hash
          `{H' : State.Trait}
          :=
          code_hash;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.own_code_hash
          `{H' : State.Trait}
          :=
          own_code_hash;
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.call_runtime
          `{H' : State.Trait}
          :=
          call_runtime;
      }.
      Global Hint Resolve I : core.
    End
      Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
  End impls.
  
  Module types.
    Module
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EmittedEvent.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.test_api.EmittedEvent -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.test_api.EmittedEvent)
          := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
    
    Module
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.Error -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.Error) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    
    Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.types.AccountError -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
    
    Module
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.types.AccountError -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  End types.
  
  Module EnvInstance.
    Unset Primitive Projections.
    Record t : Set := {
      engine : ink_engine.ext.Engine;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_engine : Notation.Dot "engine" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_engine : Notation.DoubleColon t "engine" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End EnvInstance.
  Definition EnvInstance : Set := EnvInstance.t.
  
  Module
    Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
    Definition Self := ink_env.engine.off_chain.EnvInstance.
    
    Parameter on_instance :
        forall
          `{H' : State.Trait}
          {F R : Set}
          `{core.ops.function.FnOnce.Trait F (Args := mut_ref Self)},
        F -> M (H := H') R.
    
    Global Instance AssociatedFunction_on_instance `{H' : State.Trait} :
      Notation.DoubleColon Self "on_instance" := {
      Notation.double_colon := on_instance;
    }.
    
    Global Instance I
      : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.OnInstance.Trait
            Self
        := {
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.OnInstance.on_instance
        `{H' : State.Trait}
        :=
        on_instance;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
  
  Module AccountError.
    Inductive t : Set :=
    | Decoding (_ : parity_scale_codec.error.Error)
    | UnexpectedUserAccount
    | NoAccountForId (_ : alloc.vec.Vec u8).
  End AccountError.
  Definition AccountError := AccountError.t.
  
  Module OffChainError.
    Inductive t : Set :=
    | Account (_ : ink_env.engine.off_chain.AccountError)
    | UninitializedBlocks
    | UninitializedExecutionContext
    | UnregisteredChainExtension.
  End OffChainError.
  Definition OffChainError := OffChainError.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
  
  Module Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Parameter from :
        forall `{H' : State.Trait},
        ink_env.engine.off_chain.AccountError ->
          M (H := H') ink_env.engine.off_chain.OffChainError.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I
      : core.convert.From.Trait Self
          (T := ink_env.engine.off_chain.AccountError)
        := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref ink_env.engine.off_chain.OffChainError) ->
          M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
  
  Module
    Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
  
  Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
    Definition Self := ink_env.engine.off_chain.OffChainError.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
  
  Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
  
  Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Parameter from :
        forall `{H' : State.Trait},
        parity_scale_codec.error.Error ->
          M (H := H') ink_env.engine.off_chain.AccountError.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I
      : core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
  
  Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref ink_env.engine.off_chain.AccountError) ->
          M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
  
  Module
    Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
  
  Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
    Definition Self := ink_env.engine.off_chain.AccountError.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
End off_chain.

Module call_data.
  Module CallData.
    Unset Primitive Projections.
    Record t : Set := {
      bytes : alloc.vec.Vec u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_bytes : Notation.Dot "bytes" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End CallData.
  Definition CallData : Set := CallData.t.
  
  Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_env.engine.off_chain.call_data.CallData.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref ink_env.engine.off_chain.call_data.CallData) ->
          M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Parameter size_hint :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') usize.
    
    Global Instance Method_size_hint `{H' : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {T : Set}
          `{parity_scale_codec.codec.Output.Trait T}
          `{core.marker.Sized.Trait T},
        (ref Self) -> (mut_ref T) -> M (H := H') unit.
    
    Global Instance Method_encode_to `{H' : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
  
  Module
    Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
    Definition Self := ink_env.engine.off_chain.call_data.CallData.
    
    Parameter decode :
        forall
          `{H' : State.Trait}
          {I : Set}
          `{parity_scale_codec.codec.Input.Trait I},
        (mut_ref I) ->
          M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode `{H' : State.Trait} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode;
    }.
    
    Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode `{H' : State.Trait} := decode;
    }.
    Global Hint Resolve I : core.
  End
    Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
End call_data.

Module CallData.
  Unset Primitive Projections.
  Record t : Set := {
    bytes : alloc.vec.Vec u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_bytes : Notation.Dot "bytes" := {
    Notation.dot '(Build_t x0) := x0;
  }.
  Global Instance Get_AF_bytes : Notation.DoubleColon t "bytes" := {
    Notation.double_colon '(Build_t x0) := x0;
  }.
End CallData.
Definition CallData : Set := CallData.t.

Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_call_data_CallData.

Module Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_env.engine.off_chain.call_data.CallData.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_engine_off_chain_call_data_CallData.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_call_data_CallData.

Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) ->
        (ref ink_env.engine.off_chain.call_data.CallData) ->
        M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_call_data_CallData.

Module
  Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_call_data_CallData.

Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_call_data_CallData.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Parameter size_hint :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') usize.
  
  Global Instance Method_size_hint `{H' : State.Trait} :
    Notation.Dot "size_hint" := {
    Notation.dot := size_hint;
  }.
  
  Parameter encode_to :
      forall
        `{H' : State.Trait}
        {T : Set}
        `{parity_scale_codec.codec.Output.Trait T}
        `{core.marker.Sized.Trait T},
      (ref Self) -> (mut_ref T) -> M (H := H') unit.
  
  Global Instance Method_encode_to `{H' : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_env_engine_off_chain_call_data_CallData.

Module
  Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.
  Definition Self := ink_env.engine.off_chain.call_data.CallData.
  
  Parameter decode :
      forall
        `{H' : State.Trait}
        {I : Set}
        `{parity_scale_codec.codec.Input.Trait I},
      (mut_ref I) ->
        M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode `{H' : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode `{H' : State.Trait} := decode;
  }.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Decode_for_ink_env_engine_off_chain_call_data_CallData.

Module impls.
  Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
    Definition Self := ink_env.hash.Blake2x128.
    
    Parameter hash :
        forall `{H' : State.Trait},
        (ref (Slice u8)) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
          M (H := H') unit.
    
    Global Instance AssociatedFunction_hash `{H' : State.Trait} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash;
    }.
    
    Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
      ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
  
  Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
    Definition Self := ink_env.hash.Blake2x256.
    
    Parameter hash :
        forall `{H' : State.Trait},
        (ref (Slice u8)) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
          M (H := H') unit.
    
    Global Instance AssociatedFunction_hash `{H' : State.Trait} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash;
    }.
    
    Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
      ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
  
  Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
    Definition Self := ink_env.hash.Sha2x256.
    
    Parameter hash :
        forall `{H' : State.Trait},
        (ref (Slice u8)) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
          M (H := H') unit.
    
    Global Instance AssociatedFunction_hash `{H' : State.Trait} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash;
    }.
    
    Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
      ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
  
  Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
    Definition Self := ink_env.hash.Keccak256.
    
    Parameter hash :
        forall `{H' : State.Trait},
        (ref (Slice u8)) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
          M (H := H') unit.
    
    Global Instance AssociatedFunction_hash `{H' : State.Trait} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash;
    }.
    
    Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
      ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
    }.
    Global Hint Resolve I : core.
  End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
  
  Module
    Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    Definition Self :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
    
    Parameter from :
        forall `{H' : State.Trait},
        ink_engine.ext.Error -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I
      : core.convert.From.Trait Self (T := ink_engine.ext.Error) := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  
  Module TopicsBuilder.
    Unset Primitive Projections.
    Record t : Set := {
      topics : alloc.vec.Vec (alloc.vec.Vec u8);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_topics : Notation.Dot "topics" := {
      Notation.dot '(Build_t x0) := x0;
    }.
    Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
      Notation.double_colon '(Build_t x0) := x0;
    }.
  End TopicsBuilder.
  Definition TopicsBuilder : Set := TopicsBuilder.t.
  
  Module
    Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
    
    Parameter default :
        forall `{H' : State.Trait},
        M (H := H') ink_env.engine.off_chain.impls.TopicsBuilder.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
    Global Hint Resolve I : core.
  End
    Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  
  Module
    Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    Section
      Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
      Context {E : Set}.
      Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
      
      Definition Output : Set := alloc.vec.Vec u8.
      
      Parameter expect :
          forall `{H' : State.Trait},
          (mut_ref Self) -> usize -> M (H := H') unit.
      
      Global Instance Method_expect `{H' : State.Trait} :
        Notation.Dot "expect" := {
        Notation.dot := expect;
      }.
      
      Parameter push_topic :
          forall
            `{H' : State.Trait}
            {T : Set}
            `{parity_scale_codec.codec.Encode.Trait T},
          (mut_ref Self) -> (ref T) -> M (H := H') unit.
      
      Global Instance Method_push_topic `{H' : State.Trait} :
        Notation.Dot "push_topic" := {
        Notation.dot := push_topic;
      }.
      
      Parameter output : forall `{H' : State.Trait}, Self -> M (H := H') Output.
      
      Global Instance Method_output `{H' : State.Trait} :
        Notation.Dot "output" := {
        Notation.dot := output;
      }.
      
      Global Instance I
        : ink_env.topics.TopicsBuilderBackend.Trait Self (E := E) := {
        ink_env.topics.TopicsBuilderBackend.Output := Output;
        ink_env.topics.TopicsBuilderBackend.expect `{H' : State.Trait}
          :=
          expect;
        ink_env.topics.TopicsBuilderBackend.push_topic `{H' : State.Trait}
          :=
          push_topic;
        ink_env.topics.TopicsBuilderBackend.output `{H' : State.Trait}
          :=
          output;
      }.
    End
      Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  
  Module
    Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
    Definition Self := ink_env.engine.off_chain.EnvInstance.
    
    Parameter set_contract_storage :
        forall
          `{H' : State.Trait}
          {K V : Set}
          `{parity_scale_codec.codec.Encode.Trait K}
          `{ink_storage_traits.storage.Storable.Trait V},
        (mut_ref Self) ->
          (ref K) ->
          (ref V) ->
          M (H := H') (core.option.Option u32).
    
    Global Instance Method_set_contract_storage `{H' : State.Trait} :
      Notation.Dot "set_contract_storage" := {
      Notation.dot := set_contract_storage;
    }.
    
    Parameter get_contract_storage :
        forall
          `{H' : State.Trait}
          {K R : Set}
          `{parity_scale_codec.codec.Encode.Trait K}
          `{ink_storage_traits.storage.Storable.Trait R},
        (mut_ref Self) ->
          (ref K) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (core.option.Option R)).
    
    Global Instance Method_get_contract_storage `{H' : State.Trait} :
      Notation.Dot "get_contract_storage" := {
      Notation.dot := get_contract_storage;
    }.
    
    Parameter take_contract_storage :
        forall
          `{H' : State.Trait}
          {K R : Set}
          `{parity_scale_codec.codec.Encode.Trait K}
          `{ink_storage_traits.storage.Storable.Trait R},
        (mut_ref Self) ->
          (ref K) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (core.option.Option R)).
    
    Global Instance Method_take_contract_storage `{H' : State.Trait} :
      Notation.Dot "take_contract_storage" := {
      Notation.dot := take_contract_storage;
    }.
    
    Parameter contains_contract_storage :
        forall
          `{H' : State.Trait}
          {K : Set}
          `{parity_scale_codec.codec.Encode.Trait K},
        (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32).
    
    Global Instance Method_contains_contract_storage `{H' : State.Trait} :
      Notation.Dot "contains_contract_storage" := {
      Notation.dot := contains_contract_storage;
    }.
    
    Parameter clear_contract_storage :
        forall
          `{H' : State.Trait}
          {K : Set}
          `{parity_scale_codec.codec.Encode.Trait K},
        (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32).
    
    Global Instance Method_clear_contract_storage `{H' : State.Trait} :
      Notation.Dot "clear_contract_storage" := {
      Notation.dot := clear_contract_storage;
    }.
    
    Parameter decode_input :
        forall
          `{H' : State.Trait}
          {T : Set}
          `{parity_scale_codec.codec.Decode.Trait T},
        (mut_ref Self) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              T).
    
    Global Instance Method_decode_input `{H' : State.Trait} :
      Notation.Dot "decode_input" := {
      Notation.dot := decode_input;
    }.
    
    Parameter return_value :
        forall
          `{H' : State.Trait}
          {R : Set}
          `{parity_scale_codec.codec.Encode.Trait R},
        (mut_ref Self) ->
          ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
          ->
          (ref R) ->
          M (H := H') Empty_set.
    
    Global Instance Method_return_value `{H' : State.Trait} :
      Notation.Dot "return_value" := {
      Notation.dot := return_value;
    }.
    
    Parameter debug_message :
        forall `{H' : State.Trait},
        (mut_ref Self) -> (ref str) -> M (H := H') unit.
    
    Global Instance Method_debug_message `{H' : State.Trait} :
      Notation.Dot "debug_message" := {
      Notation.dot := debug_message;
    }.
    
    Parameter hash_bytes :
        forall `{H' : State.Trait} {H : Set} `{ink_env.hash.CryptoHash.Trait H},
        (mut_ref Self) ->
          (ref (Slice u8)) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
          M (H := H') unit.
    
    Global Instance Method_hash_bytes `{H' : State.Trait} :
      Notation.Dot "hash_bytes" := {
      Notation.dot := hash_bytes;
    }.
    
    Parameter hash_encoded :
        forall
          `{H' : State.Trait}
          {H T : Set}
          `{ink_env.hash.CryptoHash.Trait H}
          `{parity_scale_codec.codec.Encode.Trait T},
        (mut_ref Self) ->
          (ref T) ->
          (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
          M (H := H') unit.
    
    Global Instance Method_hash_encoded `{H' : State.Trait} :
      Notation.Dot "hash_encoded" := {
      Notation.dot := hash_encoded;
    }.
    
    Parameter ecdsa_recover :
        forall `{H' : State.Trait},
        (mut_ref Self) ->
          (ref (list u8)) ->
          (ref (list u8)) ->
          (mut_ref (list u8)) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit).
    
    Global Instance Method_ecdsa_recover `{H' : State.Trait} :
      Notation.Dot "ecdsa_recover" := {
      Notation.dot := ecdsa_recover;
    }.
    
    Parameter ecdsa_to_eth_address :
        forall `{H' : State.Trait},
        (mut_ref Self) ->
          (ref (list u8)) ->
          (mut_ref (list u8)) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit).
    
    Global Instance Method_ecdsa_to_eth_address `{H' : State.Trait} :
      Notation.Dot "ecdsa_to_eth_address" := {
      Notation.dot := ecdsa_to_eth_address;
    }.
    
    Parameter call_chain_extension :
        forall
          `{H' : State.Trait}
          {I T E ErrorCode F D : Set}
          `{parity_scale_codec.codec.Encode.Trait I}
          `{parity_scale_codec.codec.Decode.Trait T}
          `{core.convert.From.Trait E (T := ErrorCode)}
          `{core.ops.function.FnOnce.Trait F (Args := u32)}
          `{core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))},
        (mut_ref Self) ->
          u32 ->
          (ref I) ->
          F ->
          D ->
          M (H := H') (core.result.Result T E).
    
    Global Instance Method_call_chain_extension `{H' : State.Trait} :
      Notation.Dot "call_chain_extension" := {
      Notation.dot := call_chain_extension;
    }.
    
    Parameter set_code_hash :
        forall `{H' : State.Trait},
        (mut_ref Self) ->
          (ref (Slice u8)) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit).
    
    Global Instance Method_set_code_hash `{H' : State.Trait} :
      Notation.Dot "set_code_hash" := {
      Notation.dot := set_code_hash;
    }.
    
    Global Instance I
      : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
            Self
        := {
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.set_contract_storage
        `{H' : State.Trait}
        :=
        set_contract_storage;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.get_contract_storage
        `{H' : State.Trait}
        :=
        get_contract_storage;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.take_contract_storage
        `{H' : State.Trait}
        :=
        take_contract_storage;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.contains_contract_storage
        `{H' : State.Trait}
        :=
        contains_contract_storage;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.clear_contract_storage
        `{H' : State.Trait}
        :=
        clear_contract_storage;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.decode_input
        `{H' : State.Trait}
        :=
        decode_input;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.return_value
        `{H' : State.Trait}
        :=
        return_value;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.debug_message
        `{H' : State.Trait}
        :=
        debug_message;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.hash_bytes
        `{H' : State.Trait}
        :=
        hash_bytes;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.hash_encoded
        `{H' : State.Trait}
        :=
        hash_encoded;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.ecdsa_recover
        `{H' : State.Trait}
        :=
        ecdsa_recover;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.ecdsa_to_eth_address
        `{H' : State.Trait}
        :=
        ecdsa_to_eth_address;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.call_chain_extension
        `{H' : State.Trait}
        :=
        call_chain_extension;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.set_code_hash
        `{H' : State.Trait}
        :=
        set_code_hash;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
  
  Module
    Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
    Definition Self := ink_env.engine.off_chain.EnvInstance.
    
    Parameter caller :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') E::type["AccountId"].
    
    Global Instance Method_caller `{H' : State.Trait} :
      Notation.Dot "caller" := {
      Notation.dot := caller;
    }.
    
    Parameter transferred_value :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') E::type["Balance"].
    
    Global Instance Method_transferred_value `{H' : State.Trait} :
      Notation.Dot "transferred_value" := {
      Notation.dot := transferred_value;
    }.
    
    Parameter gas_left :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') u64.
    
    Global Instance Method_gas_left `{H' : State.Trait} :
      Notation.Dot "gas_left" := {
      Notation.dot := gas_left;
    }.
    
    Parameter block_timestamp :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') E::type["Timestamp"].
    
    Global Instance Method_block_timestamp `{H' : State.Trait} :
      Notation.Dot "block_timestamp" := {
      Notation.dot := block_timestamp;
    }.
    
    Parameter account_id :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') E::type["AccountId"].
    
    Global Instance Method_account_id `{H' : State.Trait} :
      Notation.Dot "account_id" := {
      Notation.dot := account_id;
    }.
    
    Parameter balance :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') E::type["Balance"].
    
    Global Instance Method_balance `{H' : State.Trait} :
      Notation.Dot "balance" := {
      Notation.dot := balance;
    }.
    
    Parameter block_number :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') E::type["BlockNumber"].
    
    Global Instance Method_block_number `{H' : State.Trait} :
      Notation.Dot "block_number" := {
      Notation.dot := block_number;
    }.
    
    Parameter minimum_balance :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') E::type["Balance"].
    
    Global Instance Method_minimum_balance `{H' : State.Trait} :
      Notation.Dot "minimum_balance" := {
      Notation.dot := minimum_balance;
    }.
    
    Parameter emit_event :
        forall
          `{H' : State.Trait}
          {E Event : Set}
          `{ink_env.types.Environment.Trait E}
          `{ink_env.topics.Topics.Trait Event}
          `{parity_scale_codec.codec.Encode.Trait Event},
        (mut_ref Self) -> Event -> M (H := H') unit.
    
    Global Instance Method_emit_event `{H' : State.Trait} :
      Notation.Dot "emit_event" := {
      Notation.dot := emit_event;
    }.
    
    Parameter invoke_contract :
        forall
          `{H' : State.Trait}
          {E Args R : Set}
          `{ink_env.types.Environment.Trait E}
          `{parity_scale_codec.codec.Encode.Trait Args}
          `{parity_scale_codec.codec.Decode.Trait R},
        (mut_ref Self) ->
          (ref
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
              E
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                E)
              Args
              R))
          ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.MessageResult R)).
    
    Global Instance Method_invoke_contract `{H' : State.Trait} :
      Notation.Dot "invoke_contract" := {
      Notation.dot := invoke_contract;
    }.
    
    Parameter invoke_contract_delegate :
        forall
          `{H' : State.Trait}
          {E Args R : Set}
          `{ink_env.types.Environment.Trait E}
          `{parity_scale_codec.codec.Encode.Trait Args}
          `{parity_scale_codec.codec.Decode.Trait R},
        (mut_ref Self) ->
          (ref
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
              E
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
                E)
              Args
              R))
          ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.MessageResult R)).
    
    Global Instance Method_invoke_contract_delegate `{H' : State.Trait} :
      Notation.Dot "invoke_contract_delegate" := {
      Notation.dot := invoke_contract_delegate;
    }.
    
    Parameter instantiate_contract :
        forall
          `{H' : State.Trait}
          {E ContractRef Args Salt R : Set}
          `{ink_env.types.Environment.Trait E}
          `{ink_env.call.create_builder.FromAccountId.Trait ContractRef
              (T := E)}
          `{parity_scale_codec.codec.Encode.Trait Args}
          `{core.convert.AsRef.Trait Salt (T := Slice u8)}
          `{ink_env.call.create_builder.ConstructorReturnType.Trait R
              (C := ContractRef)},
        (mut_ref Self) ->
          (ref
            (ink_env.call.create_builder.CreateParams
              E
              ContractRef
              Args
              Salt
              R))
          ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              (ink_primitives.ConstructorResult
                (ink_env.call.create_builder.ConstructorReturnType.Output
                  (Self := R)))).
    
    Global Instance Method_instantiate_contract `{H' : State.Trait} :
      Notation.Dot "instantiate_contract" := {
      Notation.dot := instantiate_contract;
    }.
    
    Parameter terminate_contract :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> E::type["AccountId"] -> M (H := H') Empty_set.
    
    Global Instance Method_terminate_contract `{H' : State.Trait} :
      Notation.Dot "terminate_contract" := {
      Notation.dot := terminate_contract;
    }.
    
    Parameter transfer :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) ->
          E::type["AccountId"] ->
          E::type["Balance"] ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit).
    
    Global Instance Method_transfer `{H' : State.Trait} :
      Notation.Dot "transfer" := {
      Notation.dot := transfer;
    }.
    
    Parameter weight_to_fee :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> u64 -> M (H := H') E::type["Balance"].
    
    Global Instance Method_weight_to_fee `{H' : State.Trait} :
      Notation.Dot "weight_to_fee" := {
      Notation.dot := weight_to_fee;
    }.
    
    Parameter is_contract :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> (ref E::type["AccountId"]) -> M (H := H') bool.
    
    Global Instance Method_is_contract `{H' : State.Trait} :
      Notation.Dot "is_contract" := {
      Notation.dot := is_contract;
    }.
    
    Parameter caller_is_origin :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) -> M (H := H') bool.
    
    Global Instance Method_caller_is_origin `{H' : State.Trait} :
      Notation.Dot "caller_is_origin" := {
      Notation.dot := caller_is_origin;
    }.
    
    Parameter code_hash :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) ->
          (ref E::type["AccountId"]) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              E::type["Hash"]).
    
    Global Instance Method_code_hash `{H' : State.Trait} :
      Notation.Dot "code_hash" := {
      Notation.dot := code_hash;
    }.
    
    Parameter own_code_hash :
        forall
          `{H' : State.Trait}
          {E : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              E::type["Hash"]).
    
    Global Instance Method_own_code_hash `{H' : State.Trait} :
      Notation.Dot "own_code_hash" := {
      Notation.dot := own_code_hash;
    }.
    
    Parameter call_runtime :
        forall
          `{H' : State.Trait}
          {E Call : Set}
          `{ink_env.types.Environment.Trait E},
        (mut_ref Self) ->
          (ref Call) ->
          M (H := H')
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
              unit).
    
    Global Instance Method_call_runtime `{H' : State.Trait} :
      Notation.Dot "call_runtime" := {
      Notation.dot := call_runtime;
    }.
    
    Global Instance I
      : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.Trait
            Self
        := {
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.caller
        `{H' : State.Trait}
        :=
        caller;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.transferred_value
        `{H' : State.Trait}
        :=
        transferred_value;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.weight_to_fee
        `{H' : State.Trait}
        :=
        weight_to_fee;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.gas_left
        `{H' : State.Trait}
        :=
        gas_left;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.block_timestamp
        `{H' : State.Trait}
        :=
        block_timestamp;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.account_id
        `{H' : State.Trait}
        :=
        account_id;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.balance
        `{H' : State.Trait}
        :=
        balance;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.block_number
        `{H' : State.Trait}
        :=
        block_number;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.minimum_balance
        `{H' : State.Trait}
        :=
        minimum_balance;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.emit_event
        `{H' : State.Trait}
        :=
        emit_event;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.invoke_contract
        `{H' : State.Trait}
        :=
        invoke_contract;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.invoke_contract_delegate
        `{H' : State.Trait}
        :=
        invoke_contract_delegate;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.instantiate_contract
        `{H' : State.Trait}
        :=
        instantiate_contract;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.terminate_contract
        `{H' : State.Trait}
        :=
        terminate_contract;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.transfer
        `{H' : State.Trait}
        :=
        transfer;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.is_contract
        `{H' : State.Trait}
        :=
        is_contract;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.caller_is_origin
        `{H' : State.Trait}
        :=
        caller_is_origin;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.code_hash
        `{H' : State.Trait}
        :=
        code_hash;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.own_code_hash
        `{H' : State.Trait}
        :=
        own_code_hash;
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.call_runtime
        `{H' : State.Trait}
        :=
        call_runtime;
    }.
    Global Hint Resolve I : core.
  End
    Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
End impls.

Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Parameter hash :
      forall `{H' : State.Trait},
      (ref (Slice u8)) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
        M (H := H') unit.
  
  Global Instance AssociatedFunction_hash `{H' : State.Trait} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash;
  }.
  
  Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
    ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x128.

Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Parameter hash :
      forall `{H' : State.Trait},
      (ref (Slice u8)) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
        M (H := H') unit.
  
  Global Instance AssociatedFunction_hash `{H' : State.Trait} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash;
  }.
  
  Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
    ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Blake2x256.

Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Parameter hash :
      forall `{H' : State.Trait},
      (ref (Slice u8)) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
        M (H := H') unit.
  
  Global Instance AssociatedFunction_hash `{H' : State.Trait} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash;
  }.
  
  Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
    ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Sha2x256.

Module Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Parameter hash :
      forall `{H' : State.Trait},
      (ref (Slice u8)) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
        M (H := H') unit.
  
  Global Instance AssociatedFunction_hash `{H' : State.Trait} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash;
  }.
  
  Global Instance I : ink_env.hash.CryptoHash.Trait Self := {
    ink_env.hash.CryptoHash.hash `{H' : State.Trait} := hash;
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_CryptoHash_for_ink_env_hash_Keccak256.

Module
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink_engine.ext.Error -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := ink_engine.ext.Error) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module TopicsBuilder.
  Unset Primitive Projections.
  Record t : Set := {
    topics : alloc.vec.Vec (alloc.vec.Vec u8);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_topics : Notation.Dot "topics" := {
    Notation.dot '(Build_t x0) := x0;
  }.
  Global Instance Get_AF_topics : Notation.DoubleColon t "topics" := {
    Notation.double_colon '(Build_t x0) := x0;
  }.
End TopicsBuilder.
Definition TopicsBuilder : Set := TopicsBuilder.t.

Module
  Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
  
  Parameter default :
      forall `{H' : State.Trait},
      M (H := H') ink_env.engine.off_chain.impls.TopicsBuilder.
  
  Global Instance AssociatedFunction_default `{H' : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H' : State.Trait} := default;
  }.
  Global Hint Resolve I : core.
End Impl_core_default_Default_for_ink_env_engine_off_chain_impls_TopicsBuilder.

Module
  Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  Section
    Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
    Context {E : Set}.
    Definition Self := ink_env.engine.off_chain.impls.TopicsBuilder.
    
    Definition Output : Set := alloc.vec.Vec u8.
    
    Parameter expect :
        forall `{H' : State.Trait},
        (mut_ref Self) -> usize -> M (H := H') unit.
    
    Global Instance Method_expect `{H' : State.Trait} :
      Notation.Dot "expect" := {
      Notation.dot := expect;
    }.
    
    Parameter push_topic :
        forall
          `{H' : State.Trait}
          {T : Set}
          `{parity_scale_codec.codec.Encode.Trait T},
        (mut_ref Self) -> (ref T) -> M (H := H') unit.
    
    Global Instance Method_push_topic `{H' : State.Trait} :
      Notation.Dot "push_topic" := {
      Notation.dot := push_topic;
    }.
    
    Parameter output : forall `{H' : State.Trait}, Self -> M (H := H') Output.
    
    Global Instance Method_output `{H' : State.Trait} :
      Notation.Dot "output" := {
      Notation.dot := output;
    }.
    
    Global Instance I
      : ink_env.topics.TopicsBuilderBackend.Trait Self (E := E) := {
      ink_env.topics.TopicsBuilderBackend.Output := Output;
      ink_env.topics.TopicsBuilderBackend.expect `{H' : State.Trait} := expect;
      ink_env.topics.TopicsBuilderBackend.push_topic `{H' : State.Trait}
        :=
        push_topic;
      ink_env.topics.TopicsBuilderBackend.output `{H' : State.Trait} := output;
    }.
  End
    Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_TopicsBuilderBackend_for_ink_env_engine_off_chain_impls_TopicsBuilder.

Module
  Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.
  Definition Self := ink_env.engine.off_chain.EnvInstance.
  
  Parameter set_contract_storage :
      forall
        `{H' : State.Trait}
        {K V : Set}
        `{parity_scale_codec.codec.Encode.Trait K}
        `{ink_storage_traits.storage.Storable.Trait V},
      (mut_ref Self) ->
        (ref K) ->
        (ref V) ->
        M (H := H') (core.option.Option u32).
  
  Global Instance Method_set_contract_storage `{H' : State.Trait} :
    Notation.Dot "set_contract_storage" := {
    Notation.dot := set_contract_storage;
  }.
  
  Parameter get_contract_storage :
      forall
        `{H' : State.Trait}
        {K R : Set}
        `{parity_scale_codec.codec.Encode.Trait K}
        `{ink_storage_traits.storage.Storable.Trait R},
      (mut_ref Self) ->
        (ref K) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (core.option.Option R)).
  
  Global Instance Method_get_contract_storage `{H' : State.Trait} :
    Notation.Dot "get_contract_storage" := {
    Notation.dot := get_contract_storage;
  }.
  
  Parameter take_contract_storage :
      forall
        `{H' : State.Trait}
        {K R : Set}
        `{parity_scale_codec.codec.Encode.Trait K}
        `{ink_storage_traits.storage.Storable.Trait R},
      (mut_ref Self) ->
        (ref K) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (core.option.Option R)).
  
  Global Instance Method_take_contract_storage `{H' : State.Trait} :
    Notation.Dot "take_contract_storage" := {
    Notation.dot := take_contract_storage;
  }.
  
  Parameter contains_contract_storage :
      forall
        `{H' : State.Trait}
        {K : Set}
        `{parity_scale_codec.codec.Encode.Trait K},
      (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32).
  
  Global Instance Method_contains_contract_storage `{H' : State.Trait} :
    Notation.Dot "contains_contract_storage" := {
    Notation.dot := contains_contract_storage;
  }.
  
  Parameter clear_contract_storage :
      forall
        `{H' : State.Trait}
        {K : Set}
        `{parity_scale_codec.codec.Encode.Trait K},
      (mut_ref Self) -> (ref K) -> M (H := H') (core.option.Option u32).
  
  Global Instance Method_clear_contract_storage `{H' : State.Trait} :
    Notation.Dot "clear_contract_storage" := {
    Notation.dot := clear_contract_storage;
  }.
  
  Parameter decode_input :
      forall
        `{H' : State.Trait}
        {T : Set}
        `{parity_scale_codec.codec.Decode.Trait T},
      (mut_ref Self) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            T).
  
  Global Instance Method_decode_input `{H' : State.Trait} :
    Notation.Dot "decode_input" := {
    Notation.dot := decode_input;
  }.
  
  Parameter return_value :
      forall
        `{H' : State.Trait}
        {R : Set}
        `{parity_scale_codec.codec.Encode.Trait R},
      (mut_ref Self) ->
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags
        ->
        (ref R) ->
        M (H := H') Empty_set.
  
  Global Instance Method_return_value `{H' : State.Trait} :
    Notation.Dot "return_value" := {
    Notation.dot := return_value;
  }.
  
  Parameter debug_message :
      forall `{H' : State.Trait},
      (mut_ref Self) -> (ref str) -> M (H := H') unit.
  
  Global Instance Method_debug_message `{H' : State.Trait} :
    Notation.Dot "debug_message" := {
    Notation.dot := debug_message;
  }.
  
  Parameter hash_bytes :
      forall `{H' : State.Trait} {H : Set} `{ink_env.hash.CryptoHash.Trait H},
      (mut_ref Self) ->
        (ref (Slice u8)) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
        M (H := H') unit.
  
  Global Instance Method_hash_bytes `{H' : State.Trait} :
    Notation.Dot "hash_bytes" := {
    Notation.dot := hash_bytes;
  }.
  
  Parameter hash_encoded :
      forall
        `{H' : State.Trait}
        {H T : Set}
        `{ink_env.hash.CryptoHash.Trait H}
        `{parity_scale_codec.codec.Encode.Trait T},
      (mut_ref Self) ->
        (ref T) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := H))) ->
        M (H := H') unit.
  
  Global Instance Method_hash_encoded `{H' : State.Trait} :
    Notation.Dot "hash_encoded" := {
    Notation.dot := hash_encoded;
  }.
  
  Parameter ecdsa_recover :
      forall `{H' : State.Trait},
      (mut_ref Self) ->
        (ref (list u8)) ->
        (ref (list u8)) ->
        (mut_ref (list u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Global Instance Method_ecdsa_recover `{H' : State.Trait} :
    Notation.Dot "ecdsa_recover" := {
    Notation.dot := ecdsa_recover;
  }.
  
  Parameter ecdsa_to_eth_address :
      forall `{H' : State.Trait},
      (mut_ref Self) ->
        (ref (list u8)) ->
        (mut_ref (list u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Global Instance Method_ecdsa_to_eth_address `{H' : State.Trait} :
    Notation.Dot "ecdsa_to_eth_address" := {
    Notation.dot := ecdsa_to_eth_address;
  }.
  
  Parameter call_chain_extension :
      forall
        `{H' : State.Trait}
        {I T E ErrorCode F D : Set}
        `{parity_scale_codec.codec.Encode.Trait I}
        `{parity_scale_codec.codec.Decode.Trait T}
        `{core.convert.From.Trait E (T := ErrorCode)}
        `{core.ops.function.FnOnce.Trait F (Args := u32)}
        `{core.ops.function.FnOnce.Trait D (Args := ref (Slice u8))},
      (mut_ref Self) ->
        u32 ->
        (ref I) ->
        F ->
        D ->
        M (H := H') (core.result.Result T E).
  
  Global Instance Method_call_chain_extension `{H' : State.Trait} :
    Notation.Dot "call_chain_extension" := {
    Notation.dot := call_chain_extension;
  }.
  
  Parameter set_code_hash :
      forall `{H' : State.Trait},
      (mut_ref Self) ->
        (ref (Slice u8)) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Global Instance Method_set_code_hash `{H' : State.Trait} :
    Notation.Dot "set_code_hash" := {
    Notation.dot := set_code_hash;
  }.
  
  Global Instance I
    : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.Trait
          Self
      := {
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.set_contract_storage
      `{H' : State.Trait}
      :=
      set_contract_storage;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.get_contract_storage
      `{H' : State.Trait}
      :=
      get_contract_storage;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.take_contract_storage
      `{H' : State.Trait}
      :=
      take_contract_storage;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.contains_contract_storage
      `{H' : State.Trait}
      :=
      contains_contract_storage;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.clear_contract_storage
      `{H' : State.Trait}
      :=
      clear_contract_storage;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.decode_input
      `{H' : State.Trait}
      :=
      decode_input;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.return_value
      `{H' : State.Trait}
      :=
      return_value;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.debug_message
      `{H' : State.Trait}
      :=
      debug_message;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.hash_bytes
      `{H' : State.Trait}
      :=
      hash_bytes;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.hash_encoded
      `{H' : State.Trait}
      :=
      hash_encoded;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.ecdsa_recover
      `{H' : State.Trait}
      :=
      ecdsa_recover;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.ecdsa_to_eth_address
      `{H' : State.Trait}
      :=
      ecdsa_to_eth_address;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.call_chain_extension
      `{H' : State.Trait}
      :=
      call_chain_extension;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EnvBackend.set_code_hash
      `{H' : State.Trait}
      :=
      set_code_hash;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EnvBackend_for_ink_env_engine_off_chain_EnvInstance.

Module
  Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.
  Definition Self := ink_env.engine.off_chain.EnvInstance.
  
  Parameter caller :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') E::type["AccountId"].
  
  Global Instance Method_caller `{H' : State.Trait} : Notation.Dot "caller" := {
    Notation.dot := caller;
  }.
  
  Parameter transferred_value :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') E::type["Balance"].
  
  Global Instance Method_transferred_value `{H' : State.Trait} :
    Notation.Dot "transferred_value" := {
    Notation.dot := transferred_value;
  }.
  
  Parameter gas_left :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') u64.
  
  Global Instance Method_gas_left `{H' : State.Trait} :
    Notation.Dot "gas_left" := {
    Notation.dot := gas_left;
  }.
  
  Parameter block_timestamp :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') E::type["Timestamp"].
  
  Global Instance Method_block_timestamp `{H' : State.Trait} :
    Notation.Dot "block_timestamp" := {
    Notation.dot := block_timestamp;
  }.
  
  Parameter account_id :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') E::type["AccountId"].
  
  Global Instance Method_account_id `{H' : State.Trait} :
    Notation.Dot "account_id" := {
    Notation.dot := account_id;
  }.
  
  Parameter balance :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') E::type["Balance"].
  
  Global Instance Method_balance `{H' : State.Trait} :
    Notation.Dot "balance" := {
    Notation.dot := balance;
  }.
  
  Parameter block_number :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') E::type["BlockNumber"].
  
  Global Instance Method_block_number `{H' : State.Trait} :
    Notation.Dot "block_number" := {
    Notation.dot := block_number;
  }.
  
  Parameter minimum_balance :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') E::type["Balance"].
  
  Global Instance Method_minimum_balance `{H' : State.Trait} :
    Notation.Dot "minimum_balance" := {
    Notation.dot := minimum_balance;
  }.
  
  Parameter emit_event :
      forall
        `{H' : State.Trait}
        {E Event : Set}
        `{ink_env.types.Environment.Trait E}
        `{ink_env.topics.Topics.Trait Event}
        `{parity_scale_codec.codec.Encode.Trait Event},
      (mut_ref Self) -> Event -> M (H := H') unit.
  
  Global Instance Method_emit_event `{H' : State.Trait} :
    Notation.Dot "emit_event" := {
    Notation.dot := emit_event;
  }.
  
  Parameter invoke_contract :
      forall
        `{H' : State.Trait}
        {E Args R : Set}
        `{ink_env.types.Environment.Trait E}
        `{parity_scale_codec.codec.Encode.Trait Args}
        `{parity_scale_codec.codec.Decode.Trait R},
      (mut_ref Self) ->
        (ref
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
            E
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
              E)
            Args
            R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.MessageResult R)).
  
  Global Instance Method_invoke_contract `{H' : State.Trait} :
    Notation.Dot "invoke_contract" := {
    Notation.dot := invoke_contract;
  }.
  
  Parameter invoke_contract_delegate :
      forall
        `{H' : State.Trait}
        {E Args R : Set}
        `{ink_env.types.Environment.Trait E}
        `{parity_scale_codec.codec.Encode.Trait Args}
        `{parity_scale_codec.codec.Decode.Trait R},
      (mut_ref Self) ->
        (ref
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallParams
            E
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.DelegateCall
              E)
            Args
            R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.MessageResult R)).
  
  Global Instance Method_invoke_contract_delegate `{H' : State.Trait} :
    Notation.Dot "invoke_contract_delegate" := {
    Notation.dot := invoke_contract_delegate;
  }.
  
  Parameter instantiate_contract :
      forall
        `{H' : State.Trait}
        {E ContractRef Args Salt R : Set}
        `{ink_env.types.Environment.Trait E}
        `{ink_env.call.create_builder.FromAccountId.Trait ContractRef (T := E)}
        `{parity_scale_codec.codec.Encode.Trait Args}
        `{core.convert.AsRef.Trait Salt (T := Slice u8)}
        `{ink_env.call.create_builder.ConstructorReturnType.Trait R
            (C := ContractRef)},
      (mut_ref Self) ->
        (ref
          (ink_env.call.create_builder.CreateParams E ContractRef Args Salt R))
        ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            (ink_primitives.ConstructorResult
              (ink_env.call.create_builder.ConstructorReturnType.Output
                (Self := R)))).
  
  Global Instance Method_instantiate_contract `{H' : State.Trait} :
    Notation.Dot "instantiate_contract" := {
    Notation.dot := instantiate_contract;
  }.
  
  Parameter terminate_contract :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> E::type["AccountId"] -> M (H := H') Empty_set.
  
  Global Instance Method_terminate_contract `{H' : State.Trait} :
    Notation.Dot "terminate_contract" := {
    Notation.dot := terminate_contract;
  }.
  
  Parameter transfer :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) ->
        E::type["AccountId"] ->
        E::type["Balance"] ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Global Instance Method_transfer `{H' : State.Trait} :
    Notation.Dot "transfer" := {
    Notation.dot := transfer;
  }.
  
  Parameter weight_to_fee :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> u64 -> M (H := H') E::type["Balance"].
  
  Global Instance Method_weight_to_fee `{H' : State.Trait} :
    Notation.Dot "weight_to_fee" := {
    Notation.dot := weight_to_fee;
  }.
  
  Parameter is_contract :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> (ref E::type["AccountId"]) -> M (H := H') bool.
  
  Global Instance Method_is_contract `{H' : State.Trait} :
    Notation.Dot "is_contract" := {
    Notation.dot := is_contract;
  }.
  
  Parameter caller_is_origin :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) -> M (H := H') bool.
  
  Global Instance Method_caller_is_origin `{H' : State.Trait} :
    Notation.Dot "caller_is_origin" := {
    Notation.dot := caller_is_origin;
  }.
  
  Parameter code_hash :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) ->
        (ref E::type["AccountId"]) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            E::type["Hash"]).
  
  Global Instance Method_code_hash `{H' : State.Trait} :
    Notation.Dot "code_hash" := {
    Notation.dot := code_hash;
  }.
  
  Parameter own_code_hash :
      forall `{H' : State.Trait} {E : Set} `{ink_env.types.Environment.Trait E},
      (mut_ref Self) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            E::type["Hash"]).
  
  Global Instance Method_own_code_hash `{H' : State.Trait} :
    Notation.Dot "own_code_hash" := {
    Notation.dot := own_code_hash;
  }.
  
  Parameter call_runtime :
      forall
        `{H' : State.Trait}
        {E Call : Set}
        `{ink_env.types.Environment.Trait E},
      (mut_ref Self) ->
        (ref Call) ->
        M (H := H')
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Result
            unit).
  
  Global Instance Method_call_runtime `{H' : State.Trait} :
    Notation.Dot "call_runtime" := {
    Notation.dot := call_runtime;
  }.
  
  Global Instance I
    : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.Trait
          Self
      := {
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.caller
      `{H' : State.Trait}
      :=
      caller;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.transferred_value
      `{H' : State.Trait}
      :=
      transferred_value;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.weight_to_fee
      `{H' : State.Trait}
      :=
      weight_to_fee;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.gas_left
      `{H' : State.Trait}
      :=
      gas_left;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.block_timestamp
      `{H' : State.Trait}
      :=
      block_timestamp;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.account_id
      `{H' : State.Trait}
      :=
      account_id;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.balance
      `{H' : State.Trait}
      :=
      balance;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.block_number
      `{H' : State.Trait}
      :=
      block_number;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.minimum_balance
      `{H' : State.Trait}
      :=
      minimum_balance;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.emit_event
      `{H' : State.Trait}
      :=
      emit_event;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.invoke_contract
      `{H' : State.Trait}
      :=
      invoke_contract;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.invoke_contract_delegate
      `{H' : State.Trait}
      :=
      invoke_contract_delegate;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.instantiate_contract
      `{H' : State.Trait}
      :=
      instantiate_contract;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.terminate_contract
      `{H' : State.Trait}
      :=
      terminate_contract;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.transfer
      `{H' : State.Trait}
      :=
      transfer;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.is_contract
      `{H' : State.Trait}
      :=
      is_contract;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.caller_is_origin
      `{H' : State.Trait}
      :=
      caller_is_origin;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.code_hash
      `{H' : State.Trait}
      :=
      code_hash;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.own_code_hash
      `{H' : State.Trait}
      :=
      own_code_hash;
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.TypedEnvBackend.call_runtime
      `{H' : State.Trait}
      :=
      call_runtime;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_TypedEnvBackend_for_ink_env_engine_off_chain_EnvInstance.

Module Wrap_types_1.
  Module types.
    Module
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EmittedEvent.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.test_api.EmittedEvent -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.test_api.EmittedEvent)
          := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
    
    Module
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.Error -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.Error) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
    
    Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
      Definition Self := ink_env.engine.off_chain.AccountError.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.types.AccountError -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
    
    Module
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
      Definition Self :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
      
      Parameter from :
          forall `{H' : State.Trait},
          ink_engine.types.AccountError -> M (H := H') Self.
      
      Global Instance AssociatedFunction_from `{H' : State.Trait} :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance I
        : core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
        core.convert.From.from `{H' : State.Trait} := from;
      }.
      Global Hint Resolve I : core.
    End
      Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  End types.
End Wrap_types_1.
Import Wrap_types_1.

Module
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.EmittedEvent.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink_engine.test_api.EmittedEvent -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := ink_engine.test_api.EmittedEvent) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_EmittedEvent.

Module
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink_engine.Error -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := ink_engine.Error) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink_engine.types.AccountError -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.

Module
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.
  Definition Self :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink_engine.types.AccountError -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End
  Impl_core_convert_From_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_Error.

Module EnvInstance.
  Unset Primitive Projections.
  Record t : Set := {
    engine : ink_engine.ext.Engine;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_engine : Notation.Dot "engine" := {
    Notation.dot '(Build_t x0) := x0;
  }.
  Global Instance Get_AF_engine : Notation.DoubleColon t "engine" := {
    Notation.double_colon '(Build_t x0) := x0;
  }.
End EnvInstance.
Definition EnvInstance : Set := EnvInstance.t.

Module
  Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_OnInstance_for_ink_env_engine_off_chain_EnvInstance.
  Definition Self := ink_env.engine.off_chain.EnvInstance.
  
  Parameter on_instance :
      forall
        `{H' : State.Trait}
        {F R : Set}
        `{core.ops.function.FnOnce.Trait F (Args := mut_ref Self)},
      F -> M (H := H') R.
  
  Global Instance AssociatedFunction_on_instance `{H' : State.Trait} :
    Notation.DoubleColon Self "on_instance" := {
    Notation.double_colon := on_instance;
  }.
  
  Global Instance I
    : ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.OnInstance.Trait
          Self
      := {
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.OnInstance.on_instance
      `{H' : State.Trait}
      :=
      on_instance;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_OnInstance_for_ink_env_engine_off_chain_EnvInstance.

Module OffChainError.
  Inductive t : Set :=
  | Account (_ : ink_env.engine.off_chain.AccountError)
  | UninitializedBlocks
  | UninitializedExecutionContext
  | UnregisteredChainExtension.
End OffChainError.
Definition OffChainError := OffChainError.t.

Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_OffChainError.

Module Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink_env.engine.off_chain.AccountError ->
        M (H := H') ink_env.engine.off_chain.OffChainError.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := ink_env.engine.off_chain.AccountError)
      := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_ink_env_engine_off_chain_OffChainError.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_OffChainError.

Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) ->
        (ref ink_env.engine.off_chain.OffChainError) ->
        M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_OffChainError.

Module Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_OffChainError.

Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.
  Definition Self := ink_env.engine.off_chain.OffChainError.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_OffChainError.

Module AccountError.
  Inductive t : Set :=
  | Decoding (_ : parity_scale_codec.error.Error)
  | UnexpectedUserAccount
  | NoAccountForId (_ : alloc.vec.Vec u8).
End AccountError.
Definition AccountError := AccountError.t.

Module Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Parameter from :
      forall `{H' : State.Trait},
      parity_scale_codec.error.Error ->
        M (H := H') ink_env.engine.off_chain.AccountError.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_ink_env_engine_off_chain_AccountError.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End
  Impl_core_marker_StructuralPartialEq_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) ->
        (ref ink_env.engine.off_chain.AccountError) ->
        M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_env_engine_off_chain_AccountError.

Module Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.
  Definition Self := ink_env.engine.off_chain.AccountError.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_engine_off_chain_AccountError.

Module HashOutput.
  Class Trait (Self : Set) `{ink_env.hash.private.Sealed.Trait Self} : Type := {
    Type_ : Set;
    _ : Sigma `(core.default.Default.Trait Type_), unit;
  }.
  
  Global Instance Method_Type_ `(Trait)
    : Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End HashOutput.

Module CryptoHash.
  Class Trait (Self : Set) `{ink_env.hash.HashOutput.Trait Self} : Type := {
    hash `{H' : State.Trait}
      :
      (ref (Slice u8)) ->
        (mut_ref (ink_env.hash.HashOutput.Type_ (Self := Self))) ->
        M (H := H') unit;
  }.
  
  Global Instance Method_hash `{H' : State.Trait} `(Trait)
    : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
End CryptoHash.

Module Sha2x256.
  Inductive t : Set :=
  .
End Sha2x256.
Definition Sha2x256 := Sha2x256.t.

Module Impl_core_fmt_Debug_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_hash_Sha2x256.

Module Impl_core_marker_Copy_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_hash_Sha2x256.

Module Impl_core_clone_Clone_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_env.hash.Sha2x256.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_hash_Sha2x256.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Sha2x256.

Module Impl_core_cmp_PartialEq_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) -> (ref ink_env.hash.Sha2x256) -> M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_hash_Sha2x256.

Module Impl_core_marker_StructuralEq_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_env_hash_Sha2x256.

Module Impl_core_cmp_Eq_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_hash_Sha2x256.

Module Keccak256.
  Inductive t : Set :=
  .
End Keccak256.
Definition Keccak256 := Keccak256.t.

Module Impl_core_fmt_Debug_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_hash_Keccak256.

Module Impl_core_marker_Copy_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_hash_Keccak256.

Module Impl_core_clone_Clone_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_env.hash.Keccak256.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_hash_Keccak256.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Keccak256.

Module Impl_core_cmp_PartialEq_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) -> (ref ink_env.hash.Keccak256) -> M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_hash_Keccak256.

Module Impl_core_marker_StructuralEq_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_env_hash_Keccak256.

Module Impl_core_cmp_Eq_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_hash_Keccak256.

Module Blake2x256.
  Inductive t : Set :=
  .
End Blake2x256.
Definition Blake2x256 := Blake2x256.t.

Module Impl_core_fmt_Debug_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_hash_Blake2x256.

Module Impl_core_marker_Copy_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_hash_Blake2x256.

Module Impl_core_clone_Clone_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_env.hash.Blake2x256.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_hash_Blake2x256.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x256.

Module Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) -> (ref ink_env.hash.Blake2x256) -> M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x256.

Module Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x256.

Module Impl_core_cmp_Eq_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_hash_Blake2x256.

Module Blake2x128.
  Inductive t : Set :=
  .
End Blake2x128.
Definition Blake2x128 := Blake2x128.t.

Module Impl_core_fmt_Debug_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_env_hash_Blake2x128.

Module Impl_core_marker_Copy_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_env_hash_Blake2x128.

Module Impl_core_clone_Clone_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_env.hash.Blake2x128.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_env_hash_Blake2x128.

Module Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_env_hash_Blake2x128.

Module Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) -> (ref ink_env.hash.Blake2x128) -> M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_env_hash_Blake2x128.

Module Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_env_hash_Blake2x128.

Module Impl_core_cmp_Eq_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_env_hash_Blake2x128.

Module Wrap_private_1.
  Module private.
    Module Sealed.
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End Sealed.
  End private.
End Wrap_private_1.
Import Wrap_private_1.

Module Sealed.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End Sealed.

Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Global Instance I : ink_env.hash.private.Sealed.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Sha2x256.

Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Global Instance I : ink_env.hash.private.Sealed.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Keccak256.

Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Global Instance I : ink_env.hash.private.Sealed.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x256.

Module Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Global Instance I : ink_env.hash.private.Sealed.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_private_Sealed_for_ink_env_hash_Blake2x128.

Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Sha2x256.
  Definition Self := ink_env.hash.Sha2x256.
  
  Definition Type : Set := list u8.
  
  #[refine]
  Global Instance I : ink_env.hash.HashOutput.Trait Self := {
    ink_env.hash.HashOutput.Type := Type;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Sha2x256.

Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Keccak256.
  Definition Self := ink_env.hash.Keccak256.
  
  Definition Type : Set := list u8.
  
  #[refine]
  Global Instance I : ink_env.hash.HashOutput.Trait Self := {
    ink_env.hash.HashOutput.Type := Type;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Keccak256.

Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x256.
  Definition Self := ink_env.hash.Blake2x256.
  
  Definition Type : Set := list u8.
  
  #[refine]
  Global Instance I : ink_env.hash.HashOutput.Trait Self := {
    ink_env.hash.HashOutput.Type := Type;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x256.

Module Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x128.
  Definition Self := ink_env.hash.Blake2x128.
  
  Definition Type : Set := list u8.
  
  #[refine]
  Global Instance I : ink_env.hash.HashOutput.Trait Self := {
    ink_env.hash.HashOutput.Type := Type;
  }.
  eauto.
  Defined.
  Global Hint Resolve I : core.
End Impl_ink_env_hash_HashOutput_for_ink_env_hash_Blake2x128.

Module TopicsBuilderBackend.
  Class Trait (Self : Set) {E : Set} `{ink_env.types.Environment.Trait E} :
      Type := {
    Output : Set;
    expect `{H' : State.Trait} : (mut_ref Self) -> usize -> M (H := H') unit;
    push_topic
      `{H' : State.Trait}
      {T : Set}
      `{H'0 : parity_scale_codec.codec.Encode.Trait T}
      :
      (mut_ref Self) -> (ref T) -> M (H := H') unit;
    output `{H' : State.Trait} : Self -> M (H := H') Output;
  }.
  
  Global Instance Method_Output `(Trait)
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_expect `{H' : State.Trait} `(Trait)
    : Notation.Dot "expect" := {
    Notation.dot := expect;
  }.
  Global Instance Method_push_topic `{H' : State.Trait} `(Trait)
    : Notation.Dot "push_topic" := {
    Notation.dot {T : Set} `{H'0 : parity_scale_codec.codec.Encode.Trait T}
      :=
      push_topic (T := T) (H'0 := H'0);
  }.
  Global Instance Method_output `{H' : State.Trait} `(Trait)
    : Notation.Dot "output" := {
    Notation.dot := output;
  }.
End TopicsBuilderBackend.


Module
  Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
  Section
    Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
    Context {E B : Set}.
    Definition Self :=
      ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B.
    
    Parameter from : forall `{H' : State.Trait}, B -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I : core.convert.From.Trait Self (T := B) := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
  End
    Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.
  Global Hint Resolve I : core.
End
  Impl_core_convert_From_for_ink_env_topics_TopicsBuilder_ink_env_topics_state_Uninit_E_B.

Module Wrap_state_2.
  Module state.
    Module Uninit.
      Inductive t : Set :=
      .
    End Uninit.
    Definition Uninit := Uninit.t.
    
    Module HasRemainingTopics.
      Inductive t : Set :=
      .
    End HasRemainingTopics.
    Definition HasRemainingTopics := HasRemainingTopics.t.
    
    Module NoRemainingTopics.
      Inductive t : Set :=
      .
    End NoRemainingTopics.
    Definition NoRemainingTopics := NoRemainingTopics.t.
  End state.
End Wrap_state_2.
Import Wrap_state_2.

Module Uninit.
  Inductive t : Set :=
  .
End Uninit.
Definition Uninit := Uninit.t.

Module HasRemainingTopics.
  Inductive t : Set :=
  .
End HasRemainingTopics.
Definition HasRemainingTopics := HasRemainingTopics.t.

Module NoRemainingTopics.
  Inductive t : Set :=
  .
End NoRemainingTopics.
Definition NoRemainingTopics := NoRemainingTopics.t.

Module SomeRemainingTopics.
  Class Trait (Self : Set) : Type := {
    Next : Set;
  }.
  
  Global Instance Method_Next `(Trait)
    : Notation.DoubleColonType Self "Next" := {
    Notation.double_colon_type := Next;
  }.
End SomeRemainingTopics.

Module EventTopicsAmount.
  Class Trait (Self : Set) : Type := {
    AMOUNT `{H' : State.Trait} : usize;
  }.
  
  Global Instance Method_AMOUNT `{H' : State.Trait} `(Trait)
    : Notation.Dot "AMOUNT" := {
    Notation.dot := AMOUNT;
  }.
End EventTopicsAmount.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := list ink_env.topics.state.HasRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    ink_env.topics.SomeRemainingTopics.Next := Next;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 2.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 3.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 4.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 5.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 6.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 7.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 8.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 9.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 10.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 11.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 12.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 13.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 14.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 15.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 16.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 17.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 18.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 19.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 20.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 21.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 22.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 23.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 24.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 25.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 26.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 27.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 28.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 29.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 30.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 31.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 32.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition Next : Set := ink_env.topics.state.NoRemainingTopics.
  
  Global Instance I : ink_env.topics.SomeRemainingTopics.Trait Self := {
    ink_env.topics.SomeRemainingTopics.Next := Next;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_SomeRemainingTopics_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.
  Definition Self := list ink_env.topics.state.HasRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 1.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_Array_ink_env_topics_state_HasRemainingTopics.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_ink_env_topics_state_NoRemainingTopics.
  Definition Self := ink_env.topics.state.NoRemainingTopics.
  
  Definition AMOUNT `{H' : State.Trait} := Pure 0.
  
  Global Instance AssociatedFunction_AMOUNT `{H' : State.Trait} :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance I : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT `{H' : State.Trait} := AMOUNT;
  }.
  Global Hint Resolve I : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_ink_env_topics_state_NoRemainingTopics.

Module Topics.
  Class Trait (Self : Set) : Type := {
    RemainingTopics : Set;
    _ : Sigma `(ink_env.topics.EventTopicsAmount.Trait RemainingTopics), unit;
    topics
      `{H' : State.Trait}
      {E B : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
      :
      (ref Self) ->
        (ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B) ->
        M (H := H') (ink_env.topics.TopicsBuilderBackend.Output (Self := B));
  }.
  
  Global Instance Method_RemainingTopics `(Trait)
    : Notation.DoubleColonType Self "RemainingTopics" := {
    Notation.double_colon_type := RemainingTopics;
  }.
  Global Instance Method_topics `{H' : State.Trait} `(Trait)
    : Notation.Dot "topics" := {
    Notation.dot
      {E B : Set}
      `{H'0 : ink_env.types.Environment.Trait E}
      `{H'1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
      :=
      topics (E := E) (B := B) (H'0 := H'0) (H'1 := H'1);
  }.
End Topics.

Module PrefixedValue.
  Section PrefixedValue.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      prefix : ref (Slice u8);
      value : ref T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_prefix : Notation.Dot "prefix" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_prefix : Notation.DoubleColon t "prefix" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End PrefixedValue.
End PrefixedValue.
Definition PrefixedValue (T : Set) : Set := PrefixedValue.t (T := T).

Module Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
    Context {X : Set}.
    Definition Self := ink_env.topics.PrefixedValue X.
    
    Parameter size_hint :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') usize.
    
    Global Instance Method_size_hint `{H' : State.Trait} :
      Notation.Dot "size_hint" := {
      Notation.dot := size_hint;
    }.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {T : Set}
          `{parity_scale_codec.codec.Output.Trait T}
          `{core.marker.Sized.Trait T},
        (ref Self) -> (mut_ref T) -> M (H := H') unit.
    
    Global Instance Method_encode_to `{H' : State.Trait} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to;
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_env_topics_PrefixedValue_X.
