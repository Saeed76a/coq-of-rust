(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
Require CoqOfRust.ink.ink_env.
Require CoqOfRust.ink.pallet_contracts_primitives.
Require CoqOfRust.ink.subxt.

Module builders.
  Definition CreateBuilderPartial (E ContractRef Args R : Set) `{ink_env.types.Environment.Trait E} : Set :=
    ink_env.call.create_builder.CreateBuilder
      E
      ContractRef
      (ink_env.call.common.Unset_ (ink_env.types.Environment.Hash (Self := E)))
      (ink_env.call.common.Unset_ u64)
      (ink_env.call.common.Unset_
        (ink_env.types.Environment.Balance (Self := E)))
      (ink_env.call.common.Set_
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Unset_ ink_env.call.create_builder.state.Salt)
      (ink_env.call.common.Set_ (ink_env.call.common.ReturnType R)).
  
  Parameter constructor_exec_input :
      forall
        `{H' : State.Trait}
        {E ContractRef Args R : Set}
        `{parity_scale_codec.codec.Encode.Trait Args}
        `{ink_env.types.Environment.Trait E},
      (ink_e2e.builders.CreateBuilderPartial E ContractRef Args R) ->
        M (H := H') (alloc.vec.Vec u8 alloc.vec.Vec.Default.A).
End builders.

Definition CreateBuilderPartial (E ContractRef Args R : Set) `{ink_env.types.Environment.Trait E} : Set :=
  ink_env.call.create_builder.CreateBuilder
    E
    ContractRef
    (ink_env.call.common.Unset_ (ink_env.types.Environment.Hash (Self := E)))
    (ink_env.call.common.Unset_ u64)
    (ink_env.call.common.Unset_ (ink_env.types.Environment.Balance (Self := E)))
    (ink_env.call.common.Set_
      (ink_env.call.execution_input.ExecutionInput Args))
    (ink_env.call.common.Unset_ ink_env.call.create_builder.state.Salt)
    (ink_env.call.common.Set_ (ink_env.call.common.ReturnType R)).

Parameter constructor_exec_input :
    forall
      `{H' : State.Trait}
      {E ContractRef Args R : Set}
      `{parity_scale_codec.codec.Encode.Trait Args}
      `{ink_env.types.Environment.Trait E},
    (ink_e2e.builders.CreateBuilderPartial E ContractRef Args R) ->
      M (H := H') (alloc.vec.Vec u8 alloc.vec.Vec.Default.A).

Module xts.
  Module Weight.
    Unset Primitive Projections.
    Record t : Set := {
      ref_time : u64;
      proof_size : u64;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_ref_time : Notation.Dot "ref_time" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_ref_time : Notation.DoubleColon t "ref_time" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_proof_size : Notation.Dot "proof_size" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_proof_size : Notation.DoubleColon t "proof_size" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End Weight.
  Definition Weight : Set := Weight.t.
  
  Module Impl_core_clone_Clone_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_e2e.xts.Weight.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_e2e_xts_Weight.
  
  Module Impl_core_marker_Copy_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_e2e_xts_Weight.
  
  Module Impl_core_marker_StructuralEq_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_e2e_xts_Weight.
  
  Module Impl_core_cmp_PartialEq_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) -> (ref ink_e2e.xts.Weight) -> M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_e2e_xts_Weight.
  
  Module Impl_core_cmp_Eq_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_e2e_xts_Weight.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_e2e_xts_Weight.
  
  Module Impl_core_fmt_Debug_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_Weight.
  
  Module Impl_core_default_Default_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Parameter default :
        forall `{H' : State.Trait},
        M (H := H') ink_e2e.xts.Weight.
    
    Global Instance AssociatedFunction_default `{H' : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H' : State.Trait} := default;
    }.
    Global Hint Resolve I : core.
  End Impl_core_default_Default_for_ink_e2e_xts_Weight.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Parameter encode_as_type_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H' : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
        :=
        encode_as_type_to;
    }.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Weight.
  
  Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Parameter encode_as_fields_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
        :=
        encode_as_fields_to;
    }.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Weight.
  
  Module Impl_core_convert_From_for_ink_e2e_xts_Weight.
    Definition Self := ink_e2e.xts.Weight.
    
    Parameter from :
        forall `{H' : State.Trait},
        sp_weights.weight_v2.Weight -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I
      : core.convert.From.Trait Self (T := sp_weights.weight_v2.Weight) := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_From_for_ink_e2e_xts_Weight.
  
  Module Impl_core_convert_From_for_sp_weights_weight_v2_Weight.
    Definition Self := sp_weights.weight_v2.Weight.
    
    Parameter from :
        forall `{H' : State.Trait},
        ink_e2e.xts.Weight -> M (H := H') Self.
    
    Global Instance AssociatedFunction_from `{H' : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I
      : core.convert.From.Trait Self (T := ink_e2e.xts.Weight) := {
      core.convert.From.from `{H' : State.Trait} := from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_From_for_sp_weights_weight_v2_Weight.
  
  Module InstantiateWithCode.
    Section InstantiateWithCode.
      Context {E : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        value : E::type["Balance"];
        gas_limit : ink_e2e.xts.Weight;
        storage_deposit_limit : core.option.Option E::type["Balance"];
        code : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
        data : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
        salt : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_value : Notation.Dot "value" := {
        Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
      }.
      Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
        Notation.double_colon '(Build_t x0 _ _ _ _ _) := x0;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
      }.
      Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
        Notation.double_colon '(Build_t _ x1 _ _ _ _) := x1;
      }.
      Global Instance Get_storage_deposit_limit
        : Notation.Dot "storage_deposit_limit" := {
        Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
      }.
      Global Instance Get_AF_storage_deposit_limit
        : Notation.DoubleColon t "storage_deposit_limit" := {
        Notation.double_colon '(Build_t _ _ x2 _ _ _) := x2;
      }.
      Global Instance Get_code : Notation.Dot "code" := {
        Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
      }.
      Global Instance Get_AF_code : Notation.DoubleColon t "code" := {
        Notation.double_colon '(Build_t _ _ _ x3 _ _) := x3;
      }.
      Global Instance Get_data : Notation.Dot "data" := {
        Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
      }.
      Global Instance Get_AF_data : Notation.DoubleColon t "data" := {
        Notation.double_colon '(Build_t _ _ _ _ x4 _) := x4;
      }.
      Global Instance Get_salt : Notation.Dot "salt" := {
        Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
      }.
      Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
        Notation.double_colon '(Build_t _ _ _ _ _ x5) := x5;
      }.
    End InstantiateWithCode.
  End InstantiateWithCode.
  Definition InstantiateWithCode
      (E : Set)
      `{ink_env.types.Environment.Trait E}
      : Set :=
    InstantiateWithCode.t (E := E).
  
  (* Module Impl_core_fmt_Debug_for_ink_e2e_xts_InstantiateWithCode_E.
    (* Section Impl_core_fmt_Debug_for_ink_e2e_xts_InstantiateWithCode_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.InstantiateWithCode E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_xts_InstantiateWithCode_E. *)
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_InstantiateWithCode_E. *)
  
  (* Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_InstantiateWithCode_E.
    (* Section Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_InstantiateWithCode_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.InstantiateWithCode E.
      
      Parameter encode_as_type_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            u32 ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H' : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_InstantiateWithCode_E. *)
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_InstantiateWithCode_E. *)
  
  (* Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_InstantiateWithCode_E.
    (* Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_InstantiateWithCode_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.InstantiateWithCode E.
      
      Parameter encode_as_fields_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref (Slice scale_encode.PortableField)) ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
        Notation.Dot "encode_as_fields_to" := {
        Notation.dot := encode_as_fields_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
        scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
          :=
          encode_as_fields_to;
      }.
    End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_InstantiateWithCode_E. *)
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_InstantiateWithCode_E. *)
  
  Module Call.
    Section Call.
      Context {E : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        dest : subxt.utils.multi_address.MultiAddress E::type["AccountId"] unit;
        value : E::type["Balance"];
        gas_limit : ink_e2e.xts.Weight;
        storage_deposit_limit : core.option.Option E::type["Balance"];
        data : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_dest : Notation.Dot "dest" := {
        Notation.dot '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_AF_dest : Notation.DoubleColon t "dest" := {
        Notation.double_colon '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_value : Notation.Dot "value" := {
        Notation.dot '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
        Notation.double_colon '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
        Notation.dot '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
        Notation.double_colon '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_storage_deposit_limit
        : Notation.Dot "storage_deposit_limit" := {
        Notation.dot '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get_AF_storage_deposit_limit
        : Notation.DoubleColon t "storage_deposit_limit" := {
        Notation.double_colon '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get_data : Notation.Dot "data" := {
        Notation.dot '(Build_t _ _ _ _ x4) := x4;
      }.
      Global Instance Get_AF_data : Notation.DoubleColon t "data" := {
        Notation.double_colon '(Build_t _ _ _ _ x4) := x4;
      }.
    End Call.
  End Call.
  Definition Call (E : Set) `{ink_env.types.Environment.Trait E} : Set :=
    Call.t (E := E).
  
  Module Impl_core_fmt_Debug_for_ink_e2e_xts_Call_E.
    Section Impl_core_fmt_Debug_for_ink_e2e_xts_Call_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.Call E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_xts_Call_E.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_Call_E.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Call_E.
    Section Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Call_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.Call E.
      
      Parameter encode_as_type_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            u32 ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H' : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Call_E.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Call_E.
  
  Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Call_E.
    Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Call_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.Call E.
      
      Parameter encode_as_fields_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref (Slice scale_encode.PortableField)) ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
        Notation.Dot "encode_as_fields_to" := {
        Notation.dot := encode_as_fields_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
        scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
          :=
          encode_as_fields_to;
      }.
    End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Call_E.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Call_E.
  
  Module Transfer.
    Section Transfer.
      Context {E C : Set}.
      Context
        `{ink_env.types.Environment.Trait E}
        `{subxt.config.Config.Trait C}.
      Unset Primitive Projections.
      Record t : Set := {
        dest : subxt.utils.static_type.Static C::type["Address"];
        value : E::type["Balance"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_dest : Notation.Dot "dest" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_dest : Notation.DoubleColon t "dest" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get_value : Notation.Dot "value" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End Transfer.
  End Transfer.
  Definition Transfer
      (E C : Set)
      `{ink_env.types.Environment.Trait E}
      `{subxt.config.Config.Trait C}
      : Set :=
    Transfer.t (E := E) (C := C).
  
  Module Impl_core_fmt_Debug_for_ink_e2e_xts_Transfer_E_C.
    Section Impl_core_fmt_Debug_for_ink_e2e_xts_Transfer_E_C.
      Context {E C : Set}.
      Definition Self := ink_e2e.xts.Transfer E C.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_xts_Transfer_E_C.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_Transfer_E_C.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Transfer_E_C.
    Section Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Transfer_E_C.
      Context {E C : Set}.
      Definition Self := ink_e2e.xts.Transfer E C.
      
      Parameter encode_as_type_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            u32 ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H' : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Transfer_E_C.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Transfer_E_C.
  
  Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Transfer_E_C.
    Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Transfer_E_C.
      Context {E C : Set}.
      Definition Self := ink_e2e.xts.Transfer E C.
      
      Parameter encode_as_fields_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref (Slice scale_encode.PortableField)) ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
        Notation.Dot "encode_as_fields_to" := {
        Notation.dot := encode_as_fields_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
        scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
          :=
          encode_as_fields_to;
      }.
    End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Transfer_E_C.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Transfer_E_C.
  
  Module Determinism.
    Inductive t : Set :=
    | Enforced
    | Relaxed.
  End Determinism.
  Definition Determinism : Set := Determinism.t.
  
  Module Impl_core_fmt_Debug_for_ink_e2e_xts_Determinism.
    Definition Self := ink_e2e.xts.Determinism.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_Determinism.
  
  Module Impl_core_clone_Clone_for_ink_e2e_xts_Determinism.
    Definition Self := ink_e2e.xts.Determinism.
    
    Parameter clone :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') ink_e2e.xts.Determinism.
    
    Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H' : State.Trait} := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_e2e_xts_Determinism.
  
  Module Impl_core_marker_Copy_for_ink_e2e_xts_Determinism.
    Definition Self := ink_e2e.xts.Determinism.
    
    Global Instance I : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_e2e_xts_Determinism.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_e2e_xts_Determinism.
    Definition Self := ink_e2e.xts.Determinism.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_e2e_xts_Determinism.
  
  Module Impl_core_cmp_PartialEq_for_ink_e2e_xts_Determinism.
    Definition Self := ink_e2e.xts.Determinism.
    
    Parameter eq :
        forall `{H' : State.Trait},
        (ref Self) -> (ref ink_e2e.xts.Determinism) -> M (H := H') bool.
    
    Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_e2e_xts_Determinism.
  
  Module Impl_core_marker_StructuralEq_for_ink_e2e_xts_Determinism.
    Definition Self := ink_e2e.xts.Determinism.
    
    Global Instance I : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_e2e_xts_Determinism.
  
  Module Impl_core_cmp_Eq_for_ink_e2e_xts_Determinism.
    Definition Self := ink_e2e.xts.Determinism.
    
    Parameter assert_receiver_is_total_eq :
        forall `{H' : State.Trait},
        (ref Self) -> M (H := H') unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_e2e_xts_Determinism.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Determinism.
    Definition Self := ink_e2e.xts.Determinism.
    
    Parameter encode_as_type_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H' : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
        :=
        encode_as_type_to;
    }.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Determinism.
  
  Module UploadCode.
    Section UploadCode.
      Context {E : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        code : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
        storage_deposit_limit : core.option.Option E::type["Balance"];
        determinism : ink_e2e.xts.Determinism;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_code : Notation.Dot "code" := {
        Notation.dot '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_AF_code : Notation.DoubleColon t "code" := {
        Notation.double_colon '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_storage_deposit_limit
        : Notation.Dot "storage_deposit_limit" := {
        Notation.dot '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_AF_storage_deposit_limit
        : Notation.DoubleColon t "storage_deposit_limit" := {
        Notation.double_colon '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_determinism : Notation.Dot "determinism" := {
        Notation.dot '(Build_t _ _ x2) := x2;
      }.
      Global Instance Get_AF_determinism
        : Notation.DoubleColon t "determinism" := {
        Notation.double_colon '(Build_t _ _ x2) := x2;
      }.
    End UploadCode.
  End UploadCode.
  Definition UploadCode (E : Set) `{ink_env.types.Environment.Trait E} : Set :=
    UploadCode.t (E := E).
  
  Module Impl_core_fmt_Debug_for_ink_e2e_xts_UploadCode_E.
    Section Impl_core_fmt_Debug_for_ink_e2e_xts_UploadCode_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.UploadCode E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_xts_UploadCode_E.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_UploadCode_E.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_UploadCode_E.
    Section Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_UploadCode_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.UploadCode E.
      
      Parameter encode_as_type_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            u32 ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H' : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_UploadCode_E.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_UploadCode_E.
  
  Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_UploadCode_E.
    Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_UploadCode_E.
      Context {E : Set}.
      Definition Self := ink_e2e.xts.UploadCode E.
      
      Parameter encode_as_fields_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref (Slice scale_encode.PortableField)) ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
        Notation.Dot "encode_as_fields_to" := {
        Notation.dot := encode_as_fields_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
        scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
          :=
          encode_as_fields_to;
      }.
    End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_UploadCode_E.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_UploadCode_E.
  
  Module ContractsApi.
    Section ContractsApi.
      Context {C E : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        client : subxt.client.online_client.OnlineClient C;
        _phantom : core.marker.PhantomData (C * E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_client : Notation.Dot "client" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_client : Notation.DoubleColon t "client" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get__phantom : Notation.Dot "_phantom" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End ContractsApi.
  End ContractsApi.
  Definition ContractsApi
      (C E : Set)
      `{subxt.config.Config.Trait C}
      `{ink_env.types.Environment.Trait E}
      : Set :=
    ContractsApi.t (C := C) (E := E).
End xts.

Module client.
  Definition CallBuilderFinal (E Args RetType : Set) `{ink_env.types.Environment.Trait E} : Set :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
      E
      (ink_env.call.common.Set_
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
          E))
      (ink_env.call.common.Set_
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set_ (ink_env.call.common.ReturnType RetType)).
  
  Module InstantiationResult.
    Section InstantiationResult.
      Context {C E : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        account_id : E::type["AccountId"];
        dry_run
          :
          pallet_contracts_primitives.ContractInstantiateResult
            C::type["AccountId"]
            E::type["Balance"];
        events : subxt.blocks.block_types.ExtrinsicEvents C;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_account_id : Notation.Dot "account_id" := {
        Notation.dot '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_AF_account_id
        : Notation.DoubleColon t "account_id" := {
        Notation.double_colon '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_dry_run : Notation.Dot "dry_run" := {
        Notation.dot '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_AF_dry_run : Notation.DoubleColon t "dry_run" := {
        Notation.double_colon '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_events : Notation.Dot "events" := {
        Notation.dot '(Build_t _ _ x2) := x2;
      }.
      Global Instance Get_AF_events : Notation.DoubleColon t "events" := {
        Notation.double_colon '(Build_t _ _ x2) := x2;
      }.
    End InstantiationResult.
  End InstantiationResult.
  Definition InstantiationResult
      (C E : Set)
      `{subxt.config.Config.Trait C}
      `{ink_env.types.Environment.Trait E}
      : Set :=
    InstantiationResult.t (C := C) (E := E).
  
  Module UploadResult.
    Section UploadResult.
      Context {C E : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        code_hash : E::type["Hash"];
        dry_run
          :
          pallet_contracts_primitives.CodeUploadResult
            E::type["Hash"]
            E::type["Balance"];
        events : subxt.blocks.block_types.ExtrinsicEvents C;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_code_hash : Notation.Dot "code_hash" := {
        Notation.dot '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
        Notation.double_colon '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_dry_run : Notation.Dot "dry_run" := {
        Notation.dot '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_AF_dry_run : Notation.DoubleColon t "dry_run" := {
        Notation.double_colon '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_events : Notation.Dot "events" := {
        Notation.dot '(Build_t _ _ x2) := x2;
      }.
      Global Instance Get_AF_events : Notation.DoubleColon t "events" := {
        Notation.double_colon '(Build_t _ _ x2) := x2;
      }.
    End UploadResult.
  End UploadResult.
  Definition UploadResult
      (C E : Set)
      `{subxt.config.Config.Trait C}
      `{ink_env.types.Environment.Trait E}
      : Set :=
    UploadResult.t (C := C) (E := E).
  
  Module Impl_core_fmt_Debug_for_ink_e2e_client_UploadResult_C_E.
    Section Impl_core_fmt_Debug_for_ink_e2e_client_UploadResult_C_E.
      Context {C E : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Definition Self := ink_e2e.client.UploadResult C E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_client_UploadResult_C_E.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_client_UploadResult_C_E.
  
  Module Impl_core_fmt_Debug_for_ink_e2e_client_InstantiationResult_C_E.
    Section Impl_core_fmt_Debug_for_ink_e2e_client_InstantiationResult_C_E.
      Context {C E : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Definition Self := ink_e2e.client.InstantiationResult C E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_client_InstantiationResult_C_E.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_client_InstantiationResult_C_E.
  
  Module CallDryRunResult.
    Section CallDryRunResult.
      Context {E V : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        exec_result
          :
          pallet_contracts_primitives.ContractExecResult E::type["Balance"];
        _marker : core.marker.PhantomData V;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_exec_result : Notation.Dot "exec_result" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_exec_result
        : Notation.DoubleColon t "exec_result" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get__marker : Notation.Dot "_marker" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End CallDryRunResult.
  End CallDryRunResult.
  Definition CallDryRunResult
      (E V : Set)
      `{ink_env.types.Environment.Trait E}
      : Set :=
    CallDryRunResult.t (E := E) (V := V).
  
  Module CallResult.
    Section CallResult.
      Context {C E V : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        dry_run : ink_e2e.client.CallDryRunResult E V;
        events : subxt.blocks.block_types.ExtrinsicEvents C;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_dry_run : Notation.Dot "dry_run" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_dry_run : Notation.DoubleColon t "dry_run" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get_events : Notation.Dot "events" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF_events : Notation.DoubleColon t "events" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End CallResult.
  End CallResult.
  Definition CallResult
      (C E V : Set)
      `{subxt.config.Config.Trait C}
      `{ink_env.types.Environment.Trait E}
      : Set :=
    CallResult.t (C := C) (E := E) (V := V).
  
  Module Impl_core_fmt_Debug_for_ink_e2e_client_CallResult_C_E_V.
    Section Impl_core_fmt_Debug_for_ink_e2e_client_CallResult_C_E_V.
      Context {C E V : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Definition Self := ink_e2e.client.CallResult C E V.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_client_CallResult_C_E_V.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_client_CallResult_C_E_V.
  
  Module Impl_core_fmt_Debug_for_ink_e2e_client_CallDryRunResult_E_V.
    Section Impl_core_fmt_Debug_for_ink_e2e_client_CallDryRunResult_E_V.
      Context {E V : Set}.
      Context `{ink_env.types.Environment.Trait E}.
      Definition Self := ink_e2e.client.CallDryRunResult E V.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_client_CallDryRunResult_E_V.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_client_CallDryRunResult_E_V.
  
  Module Error.
    Section Error.
      Context {C E : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}
        `{core.fmt.Debug.Trait (ink_env.types.Environment.Balance (Self := E))}.
      Inductive t : Set :=
      | ContractNotFound (_ : alloc.string.String)
      |
        InstantiateDryRun
        (_
          :
          pallet_contracts_primitives.ContractInstantiateResult
            C::type["AccountId"]
            E::type["Balance"])
      | InstantiateExtrinsic (_ : subxt.error.dispatch_error.DispatchError)
      |
        UploadDryRun
        (_
          :
          pallet_contracts_primitives.CodeUploadResult
            E::type["Hash"]
            E::type["Balance"])
      | UploadExtrinsic (_ : subxt.error.dispatch_error.DispatchError)
      |
        CallDryRun
        (_ : pallet_contracts_primitives.ContractExecResult E::type["Balance"])
      | CallExtrinsic (_ : subxt.error.dispatch_error.DispatchError)
      | Balance (_ : alloc.string.String)
      | Decoding (_ : subxt.error.Error).
    End Error.
  End Error.
  Definition Error
      (C E : Set)
      `{subxt.config.Config.Trait C}
      `{ink_env.types.Environment.Trait E}
      `{core.fmt.Debug.Trait (ink_env.types.Environment.Balance (Self := E))}
      : Set :=
    Error.t (C := C) (E := E).
  
  (* Module Impl_core_fmt_Debug_for_ink_e2e_client_Error_C_E.
    (* Section Impl_core_fmt_Debug_for_ink_e2e_client_Error_C_E.
      Context {C E : Set}.
      Definition Self := ink_e2e.client.Error C E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_client_Error_C_E. *)
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_client_Error_C_E. *)
  
  (* Module Impl_core_fmt_Debug_for_ink_e2e_client_ContractInstantiatedEvent_E.
    (* Section Impl_core_fmt_Debug_for_ink_e2e_client_ContractInstantiatedEvent_E.
      Context {E : Set}.
      Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
  
  (* Module Impl_scale_encode_EncodeAsType_for_ink_e2e_client_ContractInstantiatedEvent_E.
    (* Section Impl_scale_encode_EncodeAsType_for_ink_e2e_client_ContractInstantiatedEvent_E.
      Context {E : Set}.
      Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
      
      Parameter encode_as_type_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            u32 ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H' : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
  
  (* Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E.
    (* Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E.
      Context {E : Set}.
      Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
      
      Parameter encode_as_fields_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref (Slice scale_encode.PortableField)) ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
        Notation.Dot "encode_as_fields_to" := {
        Notation.dot := encode_as_fields_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
        scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
          :=
          encode_as_fields_to;
      }.
    End Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
  
  (* Module Impl_subxt_events_StaticEvent_for_ink_e2e_client_ContractInstantiatedEvent_E.
    (* Section Impl_subxt_events_StaticEvent_for_ink_e2e_client_ContractInstantiatedEvent_E.
      Context {E : Set}.
      Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
      
      Definition PALLET `{H' : State.Trait} := Pure "Contracts".
      
      Global Instance AssociatedFunction_PALLET `{H' : State.Trait} :
        Notation.DoubleColon Self "PALLET" := {
        Notation.double_colon := PALLET;
      }.
      
      Definition EVENT `{H' : State.Trait} := Pure "Instantiated".
      
      Global Instance AssociatedFunction_EVENT `{H' : State.Trait} :
        Notation.DoubleColon Self "EVENT" := {
        Notation.double_colon := EVENT;
      }.
      
      Global Instance I : subxt.events.StaticEvent.Trait Self := {
        subxt.events.StaticEvent.PALLET `{H' : State.Trait} := PALLET;
        subxt.events.StaticEvent.EVENT `{H' : State.Trait} := EVENT;
      }.
    End Impl_subxt_events_StaticEvent_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
    Global Hint Resolve I : core.
  End Impl_subxt_events_StaticEvent_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
  
  (* Module Impl_core_fmt_Debug_for_ink_e2e_client_CodeStoredEvent_E.
    (* Section Impl_core_fmt_Debug_for_ink_e2e_client_CodeStoredEvent_E.
      Context {E : Set}.
      Definition Self := ink_e2e.client.CodeStoredEvent E.
      
      Parameter fmt :
          forall `{H' : State.Trait},
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M (H := H') core.fmt.Result.
      
      Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_e2e_client_CodeStoredEvent_E. *)
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_e2e_client_CodeStoredEvent_E. *)
  
  (* Module Impl_scale_encode_EncodeAsType_for_ink_e2e_client_CodeStoredEvent_E.
    (* Section Impl_scale_encode_EncodeAsType_for_ink_e2e_client_CodeStoredEvent_E.
      Context {E : Set}.
      Definition Self := ink_e2e.client.CodeStoredEvent E.
      
      Parameter encode_as_type_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            u32 ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_type_to `{H' : State.Trait} :
        Notation.Dot "encode_as_type_to" := {
        Notation.dot := encode_as_type_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsType.Trait Self := {
        scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
          :=
          encode_as_type_to;
      }.
    End Impl_scale_encode_EncodeAsType_for_ink_e2e_client_CodeStoredEvent_E. *)
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_client_CodeStoredEvent_E. *)
  
  (* Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_CodeStoredEvent_E.
    (* Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_CodeStoredEvent_E.
      Context {E : Set}.
      Definition Self := ink_e2e.client.CodeStoredEvent E.
      
      Parameter encode_as_fields_to :
          forall `{H' : State.Trait},
          (ref Self) ->
            (ref (Slice scale_encode.PortableField)) ->
            (ref scale_info.portable.PortableRegistry) ->
            (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
            M (H := H') (core.result.Result unit scale_encode.error.Error).
      
      Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
        Notation.Dot "encode_as_fields_to" := {
        Notation.dot := encode_as_fields_to;
      }.
      
      Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
        scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
          :=
          encode_as_fields_to;
      }.
    End Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_CodeStoredEvent_E. *)
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_CodeStoredEvent_E. *)
  
  (* Module Impl_subxt_events_StaticEvent_for_ink_e2e_client_CodeStoredEvent_E.
    (* Section Impl_subxt_events_StaticEvent_for_ink_e2e_client_CodeStoredEvent_E.
      Context {E : Set}.
      Definition Self := ink_e2e.client.CodeStoredEvent E.
      
      Definition PALLET `{H' : State.Trait} := Pure "Contracts".
      
      Global Instance AssociatedFunction_PALLET `{H' : State.Trait} :
        Notation.DoubleColon Self "PALLET" := {
        Notation.double_colon := PALLET;
      }.
      
      Definition EVENT `{H' : State.Trait} := Pure "CodeStored".
      
      Global Instance AssociatedFunction_EVENT `{H' : State.Trait} :
        Notation.DoubleColon Self "EVENT" := {
        Notation.double_colon := EVENT;
      }.
      
      Global Instance I : subxt.events.StaticEvent.Trait Self := {
        subxt.events.StaticEvent.PALLET `{H' : State.Trait} := PALLET;
        subxt.events.StaticEvent.EVENT `{H' : State.Trait} := EVENT;
      }.
    End Impl_subxt_events_StaticEvent_for_ink_e2e_client_CodeStoredEvent_E. *)
    Global Hint Resolve I : core.
  End Impl_subxt_events_StaticEvent_for_ink_e2e_client_CodeStoredEvent_E. *)
  
  Module Client.
    Section Client.
      Context {C E : Set}.
      Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Unset Primitive Projections.
      Record t : Set := {
        api : ink_e2e.xts.ContractsApi C E;
        contracts
          :
          alloc.collections.btree.map.BTreeMap
            alloc.string.String
            std.path.PathBuf
            alloc.collections.btree.map.BTreeMap.Default.A;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_api : Notation.Dot "api" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_AF_api : Notation.DoubleColon t "api" := {
        Notation.double_colon '(Build_t x0 _) := x0;
      }.
      Global Instance Get_contracts : Notation.Dot "contracts" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
      Global Instance Get_AF_contracts : Notation.DoubleColon t "contracts" := {
        Notation.double_colon '(Build_t _ x1) := x1;
      }.
    End Client.
  End Client.
  Definition Client
      (C E : Set)
      `{subxt.config.Config.Trait C}
      `{ink_env.types.Environment.Trait E}
      : Set :=
    Client.t (C := C) (E := E).
End client.

Definition CallBuilderFinal (E Args RetType : Set) `{ink_env.types.Environment.Trait E} : Set :=
  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
    E
    (ink_env.call.common.Set_
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
        E))
    (ink_env.call.common.Set_
      (ink_env.call.execution_input.ExecutionInput Args))
    (ink_env.call.common.Set_ (ink_env.call.common.ReturnType RetType)).

Module InstantiationResult.
  Section InstantiationResult.
    Context {C E : Set}.
    Context `{subxt.config.Config.Trait C} `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      account_id : E::type["AccountId"];
      dry_run
        :
        pallet_contracts_primitives.ContractInstantiateResult
          C::type["AccountId"]
          E::type["Balance"];
      events : subxt.blocks.block_types.ExtrinsicEvents C;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_account_id : Notation.Dot "account_id" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_AF_account_id : Notation.DoubleColon t "account_id" := {
      Notation.double_colon '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_dry_run : Notation.Dot "dry_run" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_AF_dry_run : Notation.DoubleColon t "dry_run" := {
      Notation.double_colon '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_events : Notation.Dot "events" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
    Global Instance Get_AF_events : Notation.DoubleColon t "events" := {
      Notation.double_colon '(Build_t _ _ x2) := x2;
    }.
  End InstantiationResult.
End InstantiationResult.
Definition InstantiationResult
    (C E : Set)
    `{subxt.config.Config.Trait C}
    `{ink_env.types.Environment.Trait E}
    : Set :=
  InstantiationResult.t (C := C) (E := E).

Module UploadResult.
  Section UploadResult.
    Context {C E : Set}.
    Context `{subxt.config.Config.Trait C} `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      code_hash : E::type["Hash"];
      dry_run
        :
        pallet_contracts_primitives.CodeUploadResult
          E::type["Hash"]
          E::type["Balance"];
      events : subxt.blocks.block_types.ExtrinsicEvents C;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_code_hash : Notation.Dot "code_hash" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_AF_code_hash : Notation.DoubleColon t "code_hash" := {
      Notation.double_colon '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_dry_run : Notation.Dot "dry_run" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_AF_dry_run : Notation.DoubleColon t "dry_run" := {
      Notation.double_colon '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_events : Notation.Dot "events" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
    Global Instance Get_AF_events : Notation.DoubleColon t "events" := {
      Notation.double_colon '(Build_t _ _ x2) := x2;
    }.
  End UploadResult.
End UploadResult.
Definition UploadResult
    (C E : Set)
    `{subxt.config.Config.Trait C}
    `{ink_env.types.Environment.Trait E}
    : Set :=
  UploadResult.t (C := C) (E := E).

Module Impl_core_fmt_Debug_for_ink_e2e_client_UploadResult_C_E.
  Section Impl_core_fmt_Debug_for_ink_e2e_client_UploadResult_C_E.
    Context {C E : Set}.
    Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Definition Self := ink_e2e.client.UploadResult C E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_client_UploadResult_C_E.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_client_UploadResult_C_E.

Module Impl_core_fmt_Debug_for_ink_e2e_client_InstantiationResult_C_E.
  Section Impl_core_fmt_Debug_for_ink_e2e_client_InstantiationResult_C_E.
    Context {C E : Set}.
    Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Definition Self := ink_e2e.client.InstantiationResult C E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_client_InstantiationResult_C_E.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_client_InstantiationResult_C_E.

Module CallResult.
  Section CallResult.
    Context {C E V : Set}.
    Context `{subxt.config.Config.Trait C} `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      dry_run : ink_e2e.client.CallDryRunResult E V;
      events : subxt.blocks.block_types.ExtrinsicEvents C;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_dry_run : Notation.Dot "dry_run" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_dry_run : Notation.DoubleColon t "dry_run" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_events : Notation.Dot "events" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_events : Notation.DoubleColon t "events" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End CallResult.
End CallResult.
Definition CallResult
    (C E V : Set)
    `{subxt.config.Config.Trait C}
    `{ink_env.types.Environment.Trait E}
    : Set :=
  CallResult.t (C := C) (E := E) (V := V).

Module Impl_core_fmt_Debug_for_ink_e2e_client_CallResult_C_E_V.
  Section Impl_core_fmt_Debug_for_ink_e2e_client_CallResult_C_E_V.
    Context {C E V : Set}.
    Context
        `{subxt.config.Config.Trait C}
        `{ink_env.types.Environment.Trait E}.
      Definition Self := ink_e2e.client.CallResult C E V.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_client_CallResult_C_E_V.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_client_CallResult_C_E_V.

Module CallDryRunResult.
  Section CallDryRunResult.
    Context {E V : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      exec_result
        :
        pallet_contracts_primitives.ContractExecResult E::type["Balance"];
      _marker : core.marker.PhantomData V;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_exec_result : Notation.Dot "exec_result" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_exec_result
      : Notation.DoubleColon t "exec_result" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get__marker : Notation.Dot "_marker" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End CallDryRunResult.
End CallDryRunResult.
Definition CallDryRunResult
    (E V : Set)
    `{ink_env.types.Environment.Trait E}
    : Set :=
  CallDryRunResult.t (E := E) (V := V).

Module Impl_core_fmt_Debug_for_ink_e2e_client_CallDryRunResult_E_V.
  Section Impl_core_fmt_Debug_for_ink_e2e_client_CallDryRunResult_E_V.
    Context {E V : Set}.
    Context `{ink_env.types.Environment.Trait E}.
      Definition Self := ink_e2e.client.CallDryRunResult E V.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_client_CallDryRunResult_E_V.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_client_CallDryRunResult_E_V.

Module Error.
  Section Error.
    Context {C E : Set}.
    Context
      `{subxt.config.Config.Trait C}
      `{ink_env.types.Environment.Trait E}
      `{core.fmt.Debug.Trait (ink_env.types.Environment.Balance (Self := E))}.
    Inductive t : Set :=
    | ContractNotFound (_ : alloc.string.String)
    |
      InstantiateDryRun
      (_
        :
        pallet_contracts_primitives.ContractInstantiateResult
          C::type["AccountId"]
          E::type["Balance"])
    | InstantiateExtrinsic (_ : subxt.error.dispatch_error.DispatchError)
    |
      UploadDryRun
      (_
        :
        pallet_contracts_primitives.CodeUploadResult
          E::type["Hash"]
          E::type["Balance"])
    | UploadExtrinsic (_ : subxt.error.dispatch_error.DispatchError)
    |
      CallDryRun
      (_ : pallet_contracts_primitives.ContractExecResult E::type["Balance"])
    | CallExtrinsic (_ : subxt.error.dispatch_error.DispatchError)
    | Balance (_ : alloc.string.String)
    | Decoding (_ : subxt.error.Error).
  End Error.
End Error.
Definition Error
    (C E : Set)
    `{subxt.config.Config.Trait C}
    `{ink_env.types.Environment.Trait E}
    `{core.fmt.Debug.Trait (ink_env.types.Environment.Balance (Self := E))}
    : Set :=
  Error.t (C := C) (E := E).

(* Module Impl_core_fmt_Debug_for_ink_e2e_client_Error_C_E.
  (* Section Impl_core_fmt_Debug_for_ink_e2e_client_Error_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.client.Error C E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_client_Error_C_E. *)
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_client_Error_C_E. *)

(* Module Impl_core_fmt_Debug_for_ink_e2e_client_ContractInstantiatedEvent_E.
  (* Section Impl_core_fmt_Debug_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_client_ContractInstantiatedEvent_E. *)

Module
  Impl_parity_scale_codec_codec_Decode_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Section
    Impl_parity_scale_codec_codec_Decode_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Parameter decode :
        forall
          `{H' : State.Trait}
          {__CodecInputEdqy : Set}
          `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
        (mut_ref __CodecInputEdqy) ->
          M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
  End
    Impl_parity_scale_codec_codec_Decode_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Decode_for_ink_e2e_client_ContractInstantiatedEvent_E.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_e2e_client_ContractInstantiatedEvent_E.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_client_ContractInstantiatedEvent_E.

Module
  Impl_scale_decode_IntoVisitor_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Section
    Impl_scale_decode_IntoVisitor_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Definition Visitor : Set := ink_e2e.client._.Visitor E.
    
    Parameter into_visitor : forall `{H' : State.Trait}, M (H := H') Visitor.
    
    Global Instance AssociatedFunction_into_visitor `{H' : State.Trait} :
      Notation.DoubleColon Self "into_visitor" := {
      Notation.double_colon := into_visitor;
    }.
    
    Global Instance I : scale_decode.IntoVisitor.Trait Self := {
      scale_decode.IntoVisitor.Visitor := Visitor;
      scale_decode.IntoVisitor.into_visitor `{H' : State.Trait} := into_visitor;
    }.
  End
    Impl_scale_decode_IntoVisitor_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Global Hint Resolve I : core.
End
  Impl_scale_decode_IntoVisitor_for_ink_e2e_client_ContractInstantiatedEvent_E.

Module Impl_scale_decode_visitor_Visitor_for_ink_e2e_client___Visitor_E.
  Section Impl_scale_decode_visitor_Visitor_for_ink_e2e_client___Visitor_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client._.Visitor E.
    
    Definition Error : Set := scale_decode.error.Error.
    
    Definition Value : Set := ink_e2e.client.ContractInstantiatedEvent E.
    
    Parameter visit_composite :
        forall `{H' : State.Trait},
        Self ->
          (mut_ref scale_decode.visitor.types.composite.Composite) ->
          scale_decode.visitor.TypeId ->
          M (H := H') (core.result.Result Value Error).
    
    Global Instance Method_visit_composite `{H' : State.Trait} :
      Notation.Dot "visit_composite" := {
      Notation.dot := visit_composite;
    }.
    
    Parameter visit_tuple :
        forall `{H' : State.Trait},
        Self ->
          (mut_ref scale_decode.visitor.types.tuple.Tuple) ->
          scale_decode.visitor.TypeId ->
          M (H := H') (core.result.Result Value Error).
    
    Global Instance Method_visit_tuple `{H' : State.Trait} :
      Notation.Dot "visit_tuple" := {
      Notation.dot := visit_tuple;
    }.
    
    Global Instance I : scale_decode.visitor.Visitor.Trait Self := {
      scale_decode.visitor.Visitor.Error := Error;
      scale_decode.visitor.Visitor.Value := Value;
    }.
  End Impl_scale_decode_visitor_Visitor_for_ink_e2e_client___Visitor_E.
  Global Hint Resolve I : core.
End Impl_scale_decode_visitor_Visitor_for_ink_e2e_client___Visitor_E.

Module
  Impl_scale_decode_DecodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Section
    Impl_scale_decode_DecodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Parameter decode_as_fields :
        forall `{H' : State.Trait},
        (mut_ref (ref (Slice u8))) ->
          (ref (Slice scale_decode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          M (H := H') (core.result.Result Self scale_decode.error.Error).
    
    Global Instance AssociatedFunction_decode_as_fields `{H' : State.Trait} :
      Notation.DoubleColon Self "decode_as_fields" := {
      Notation.double_colon := decode_as_fields;
    }.
    
    Global Instance I : scale_decode.DecodeAsFields.Trait Self := {
      scale_decode.DecodeAsFields.decode_as_fields `{H' : State.Trait}
        :=
        decode_as_fields;
    }.
  End
    Impl_scale_decode_DecodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E.
  Global Hint Resolve I : core.
End
  Impl_scale_decode_DecodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E.

(* Module Impl_scale_encode_EncodeAsType_for_ink_e2e_client_ContractInstantiatedEvent_E.
  (* Section Impl_scale_encode_EncodeAsType_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Parameter encode_as_type_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H' : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_e2e_client_ContractInstantiatedEvent_E. *)

(* Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E.
  (* Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Parameter encode_as_fields_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_ContractInstantiatedEvent_E. *)

(* Module Impl_subxt_events_StaticEvent_for_ink_e2e_client_ContractInstantiatedEvent_E.
  (* Section Impl_subxt_events_StaticEvent_for_ink_e2e_client_ContractInstantiatedEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.ContractInstantiatedEvent E.
    
    Definition PALLET `{H' : State.Trait} := Pure "Contracts".
    
    Global Instance AssociatedFunction_PALLET `{H' : State.Trait} :
      Notation.DoubleColon Self "PALLET" := {
      Notation.double_colon := PALLET;
    }.
    
    Definition EVENT `{H' : State.Trait} := Pure "Instantiated".
    
    Global Instance AssociatedFunction_EVENT `{H' : State.Trait} :
      Notation.DoubleColon Self "EVENT" := {
      Notation.double_colon := EVENT;
    }.
    
    Global Instance I : subxt.events.StaticEvent.Trait Self := {
      subxt.events.StaticEvent.PALLET `{H' : State.Trait} := PALLET;
      subxt.events.StaticEvent.EVENT `{H' : State.Trait} := EVENT;
    }.
  End Impl_subxt_events_StaticEvent_for_ink_e2e_client_ContractInstantiatedEvent_E. *)
  Global Hint Resolve I : core.
End Impl_subxt_events_StaticEvent_for_ink_e2e_client_ContractInstantiatedEvent_E. *)

(* Module Impl_core_fmt_Debug_for_ink_e2e_client_CodeStoredEvent_E.
  (* Section Impl_core_fmt_Debug_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_client_CodeStoredEvent_E. *)
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_client_CodeStoredEvent_E. *)

Module
  Impl_parity_scale_codec_codec_Decode_for_ink_e2e_client_CodeStoredEvent_E.
  Section
    Impl_parity_scale_codec_codec_Decode_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Parameter decode :
        forall
          `{H' : State.Trait}
          {__CodecInputEdqy : Set}
          `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
        (mut_ref __CodecInputEdqy) ->
          M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
  End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_client_CodeStoredEvent_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_client_CodeStoredEvent_E.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_e2e_client_CodeStoredEvent_E.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Parameter encode :
        forall `{H' : State.Trait},
        (ref Self) ->
          M (H := H')
            (alloc.vec.Vec CoqOfRust.core.primitive.u8 alloc.vec.Vec.Default.A).
    
    Global Instance Method_encode `{H' : State.Trait} :
      Notation.Dot "encode" := {
      Notation.dot := encode;
    }.
    
    Parameter using_encoded :
        forall
          `{H' : State.Trait}
          {R F : Set}
          `{core.ops.function.FnOnce.Trait F
              (Args := ref (Slice CoqOfRust.core.primitive.u8))},
        (ref Self) -> F -> M (H := H') R.
    
    Global Instance Method_using_encoded
        `{H' : State.Trait}
        {R F : Set}
        `{core.ops.function.FnOnce.Trait F
            (Args := ref (Slice CoqOfRust.core.primitive.u8))} :
      Notation.Dot "using_encoded" := {
      Notation.dot := using_encoded (R := R) (F := F);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_client_CodeStoredEvent_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_client_CodeStoredEvent_E.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_client_CodeStoredEvent_E.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_client_CodeStoredEvent_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_client_CodeStoredEvent_E.

Module Impl_scale_decode_IntoVisitor_for_ink_e2e_client_CodeStoredEvent_E.
  Section Impl_scale_decode_IntoVisitor_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Definition Visitor : Set := ink_e2e.client._.Visitor E.
    
    Parameter into_visitor : forall `{H' : State.Trait}, M (H := H') Visitor.
    
    Global Instance AssociatedFunction_into_visitor `{H' : State.Trait} :
      Notation.DoubleColon Self "into_visitor" := {
      Notation.double_colon := into_visitor;
    }.
    
    Global Instance I : scale_decode.IntoVisitor.Trait Self := {
      scale_decode.IntoVisitor.Visitor := Visitor;
      scale_decode.IntoVisitor.into_visitor `{H' : State.Trait} := into_visitor;
    }.
  End Impl_scale_decode_IntoVisitor_for_ink_e2e_client_CodeStoredEvent_E.
  Global Hint Resolve I : core.
End Impl_scale_decode_IntoVisitor_for_ink_e2e_client_CodeStoredEvent_E.

Module Impl_scale_decode_visitor_Visitor_for_ink_e2e_client___Visitor_E.
  Section Impl_scale_decode_visitor_Visitor_for_ink_e2e_client___Visitor_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client._.Visitor E.
    
    Definition Error : Set := scale_decode.error.Error.
    
    Definition Value : Set := ink_e2e.client.CodeStoredEvent E.
    
    Parameter visit_composite :
        forall `{H' : State.Trait},
        Self ->
          (mut_ref scale_decode.visitor.types.composite.Composite) ->
          scale_decode.visitor.TypeId ->
          M (H := H') (core.result.Result Value Error).
    
    Global Instance Method_visit_composite `{H' : State.Trait} :
      Notation.Dot "visit_composite" := {
      Notation.dot := visit_composite;
    }.
    
    Parameter visit_tuple :
        forall `{H' : State.Trait},
        Self ->
          (mut_ref scale_decode.visitor.types.tuple.Tuple) ->
          scale_decode.visitor.TypeId ->
          M (H := H') (core.result.Result Value Error).
    
    Global Instance Method_visit_tuple `{H' : State.Trait} :
      Notation.Dot "visit_tuple" := {
      Notation.dot := visit_tuple;
    }.
    
    Global Instance I : scale_decode.visitor.Visitor.Trait Self := {
      scale_decode.visitor.Visitor.Error := Error;
      scale_decode.visitor.Visitor.Value := Value;
    }.
  End Impl_scale_decode_visitor_Visitor_for_ink_e2e_client___Visitor_E.
  Global Hint Resolve I : core.
End Impl_scale_decode_visitor_Visitor_for_ink_e2e_client___Visitor_E.

Module Impl_scale_decode_DecodeAsFields_for_ink_e2e_client_CodeStoredEvent_E.
  Section Impl_scale_decode_DecodeAsFields_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Parameter decode_as_fields :
        forall `{H' : State.Trait},
        (mut_ref (ref (Slice u8))) ->
          (ref (Slice scale_decode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          M (H := H') (core.result.Result Self scale_decode.error.Error).
    
    Global Instance AssociatedFunction_decode_as_fields `{H' : State.Trait} :
      Notation.DoubleColon Self "decode_as_fields" := {
      Notation.double_colon := decode_as_fields;
    }.
    
    Global Instance I : scale_decode.DecodeAsFields.Trait Self := {
      scale_decode.DecodeAsFields.decode_as_fields `{H' : State.Trait}
        :=
        decode_as_fields;
    }.
  End Impl_scale_decode_DecodeAsFields_for_ink_e2e_client_CodeStoredEvent_E.
  Global Hint Resolve I : core.
End Impl_scale_decode_DecodeAsFields_for_ink_e2e_client_CodeStoredEvent_E.

(* Module Impl_scale_encode_EncodeAsType_for_ink_e2e_client_CodeStoredEvent_E.
  (* Section Impl_scale_encode_EncodeAsType_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Parameter encode_as_type_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H' : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_client_CodeStoredEvent_E. *)
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_e2e_client_CodeStoredEvent_E. *)

(* Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_CodeStoredEvent_E.
  (* Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Parameter encode_as_fields_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_CodeStoredEvent_E. *)
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_e2e_client_CodeStoredEvent_E. *)

(* Module Impl_subxt_events_StaticEvent_for_ink_e2e_client_CodeStoredEvent_E.
  (* Section Impl_subxt_events_StaticEvent_for_ink_e2e_client_CodeStoredEvent_E.
    Context {E : Set}.
    Definition Self := ink_e2e.client.CodeStoredEvent E.
    
    Definition PALLET `{H' : State.Trait} := Pure "Contracts".
    
    Global Instance AssociatedFunction_PALLET `{H' : State.Trait} :
      Notation.DoubleColon Self "PALLET" := {
      Notation.double_colon := PALLET;
    }.
    
    Definition EVENT `{H' : State.Trait} := Pure "CodeStored".
    
    Global Instance AssociatedFunction_EVENT `{H' : State.Trait} :
      Notation.DoubleColon Self "EVENT" := {
      Notation.double_colon := EVENT;
    }.
    
    Global Instance I : subxt.events.StaticEvent.Trait Self := {
      subxt.events.StaticEvent.PALLET `{H' : State.Trait} := PALLET;
      subxt.events.StaticEvent.EVENT `{H' : State.Trait} := EVENT;
    }.
  End Impl_subxt_events_StaticEvent_for_ink_e2e_client_CodeStoredEvent_E. *)
  Global Hint Resolve I : core.
End Impl_subxt_events_StaticEvent_for_ink_e2e_client_CodeStoredEvent_E. *)

Module Client.
  Section Client.
    Context {C E : Set}.
    Context `{subxt.config.Config.Trait C} `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      api : ink_e2e.xts.ContractsApi C E;
      contracts
        :
        alloc.collections.btree.map.BTreeMap
          alloc.string.String
          std.path.PathBuf
          alloc.collections.btree.map.BTreeMap.Default.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_api : Notation.Dot "api" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_api : Notation.DoubleColon t "api" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_contracts : Notation.Dot "contracts" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_contracts : Notation.DoubleColon t "contracts" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End Client.
End Client.
Definition Client
    (C E : Set)
    `{subxt.config.Config.Trait C}
    `{ink_env.types.Environment.Trait E}
    : Set :=
  Client.t (C := C) (E := E).

Module default_accounts.
  Parameter alice :
      forall
        `{H' : State.Trait}
        {C : Set}
        `{subxt.config.Config.Trait C}
        `{core.convert.From.Trait C::type["Signature"]
            (T := sp_core.sr25519.Signature)}
        `{core.convert.From.Trait C::type["AccountId"]
            (T := sp_core.crypto.AccountId32)},
      M (H := H')
          (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).
  
  Parameter bob :
      forall
        `{H' : State.Trait}
        {C : Set}
        `{subxt.config.Config.Trait C}
        `{core.convert.From.Trait C::type["Signature"]
            (T := sp_core.sr25519.Signature)}
        `{core.convert.From.Trait C::type["AccountId"]
            (T := sp_core.crypto.AccountId32)},
      M (H := H')
          (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).
  
  Parameter charlie :
      forall
        `{H' : State.Trait}
        {C : Set}
        `{subxt.config.Config.Trait C}
        `{core.convert.From.Trait C::type["Signature"]
            (T := sp_core.sr25519.Signature)}
        `{core.convert.From.Trait C::type["AccountId"]
            (T := sp_core.crypto.AccountId32)},
      M (H := H')
          (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).
  
  Parameter dave :
      forall
        `{H' : State.Trait}
        {C : Set}
        `{subxt.config.Config.Trait C}
        `{core.convert.From.Trait C::type["Signature"]
            (T := sp_core.sr25519.Signature)}
        `{core.convert.From.Trait C::type["AccountId"]
            (T := sp_core.crypto.AccountId32)},
      M (H := H')
          (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).
  
  Parameter eve :
      forall
        `{H' : State.Trait}
        {C : Set}
        `{subxt.config.Config.Trait C}
        `{core.convert.From.Trait C::type["Signature"]
            (T := sp_core.sr25519.Signature)}
        `{core.convert.From.Trait C::type["AccountId"]
            (T := sp_core.crypto.AccountId32)},
      M (H := H')
          (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).
  
  Parameter ferdie :
      forall
        `{H' : State.Trait}
        {C : Set}
        `{subxt.config.Config.Trait C}
        `{core.convert.From.Trait C::type["Signature"]
            (T := sp_core.sr25519.Signature)}
        `{core.convert.From.Trait C::type["AccountId"]
            (T := sp_core.crypto.AccountId32)},
      M (H := H')
          (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).
  
  Parameter one :
      forall
        `{H' : State.Trait}
        {C : Set}
        `{subxt.config.Config.Trait C}
        `{core.convert.From.Trait C::type["Signature"]
            (T := sp_core.sr25519.Signature)}
        `{core.convert.From.Trait C::type["AccountId"]
            (T := sp_core.crypto.AccountId32)},
      M (H := H')
          (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).
  
  Parameter two :
      forall
        `{H' : State.Trait}
        {C : Set}
        `{subxt.config.Config.Trait C}
        `{core.convert.From.Trait C::type["Signature"]
            (T := sp_core.sr25519.Signature)}
        `{core.convert.From.Trait C::type["AccountId"]
            (T := sp_core.crypto.AccountId32)},
      M (H := H')
          (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).
End default_accounts.

Parameter alice :
    forall
      `{H' : State.Trait}
      {C : Set}
      `{subxt.config.Config.Trait C}
      `{core.convert.From.Trait C::type["Signature"]
          (T := sp_core.sr25519.Signature)}
      `{core.convert.From.Trait C::type["AccountId"]
          (T := sp_core.crypto.AccountId32)},
    M (H := H') (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).

Parameter bob :
    forall
      `{H' : State.Trait}
      {C : Set}
      `{subxt.config.Config.Trait C}
      `{core.convert.From.Trait C::type["Signature"]
          (T := sp_core.sr25519.Signature)}
      `{core.convert.From.Trait C::type["AccountId"]
          (T := sp_core.crypto.AccountId32)},
    M (H := H') (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).

Parameter charlie :
    forall
      `{H' : State.Trait}
      {C : Set}
      `{subxt.config.Config.Trait C}
      `{core.convert.From.Trait C::type["Signature"]
          (T := sp_core.sr25519.Signature)}
      `{core.convert.From.Trait C::type["AccountId"]
          (T := sp_core.crypto.AccountId32)},
    M (H := H') (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).

Parameter dave :
    forall
      `{H' : State.Trait}
      {C : Set}
      `{subxt.config.Config.Trait C}
      `{core.convert.From.Trait C::type["Signature"]
          (T := sp_core.sr25519.Signature)}
      `{core.convert.From.Trait C::type["AccountId"]
          (T := sp_core.crypto.AccountId32)},
    M (H := H') (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).

Parameter eve :
    forall
      `{H' : State.Trait}
      {C : Set}
      `{subxt.config.Config.Trait C}
      `{core.convert.From.Trait C::type["Signature"]
          (T := sp_core.sr25519.Signature)}
      `{core.convert.From.Trait C::type["AccountId"]
          (T := sp_core.crypto.AccountId32)},
    M (H := H') (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).

Parameter ferdie :
    forall
      `{H' : State.Trait}
      {C : Set}
      `{subxt.config.Config.Trait C}
      `{core.convert.From.Trait C::type["Signature"]
          (T := sp_core.sr25519.Signature)}
      `{core.convert.From.Trait C::type["AccountId"]
          (T := sp_core.crypto.AccountId32)},
    M (H := H') (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).

Parameter one :
    forall
      `{H' : State.Trait}
      {C : Set}
      `{subxt.config.Config.Trait C}
      `{core.convert.From.Trait C::type["Signature"]
          (T := sp_core.sr25519.Signature)}
      `{core.convert.From.Trait C::type["AccountId"]
          (T := sp_core.crypto.AccountId32)},
    M (H := H') (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).

Parameter two :
    forall
      `{H' : State.Trait}
      {C : Set}
      `{subxt.config.Config.Trait C}
      `{core.convert.From.Trait C::type["Signature"]
          (T := sp_core.sr25519.Signature)}
      `{core.convert.From.Trait C::type["AccountId"]
          (T := sp_core.crypto.AccountId32)},
    M (H := H') (subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair).

Module node_proc.
  Module TestNodeProcess.
    Section TestNodeProcess.
      Context {R : Set}.
      Context `{subxt.config.Config.Trait R}.
      Unset Primitive Projections.
      Record t : Set := {
        proc : std.process.Child;
        client : subxt.client.online_client.OnlineClient R;
        url : alloc.string.String;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_proc : Notation.Dot "proc" := {
        Notation.dot '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_AF_proc : Notation.DoubleColon t "proc" := {
        Notation.double_colon '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_client : Notation.Dot "client" := {
        Notation.dot '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_AF_client : Notation.DoubleColon t "client" := {
        Notation.double_colon '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_url : Notation.Dot "url" := {
        Notation.dot '(Build_t _ _ x2) := x2;
      }.
      Global Instance Get_AF_url : Notation.DoubleColon t "url" := {
        Notation.double_colon '(Build_t _ _ x2) := x2;
      }.
    End TestNodeProcess.
  End TestNodeProcess.
  Definition TestNodeProcess (R : Set) `{subxt.config.Config.Trait R} : Set :=
    TestNodeProcess.t (R := R).
  
  Module Impl_core_ops_drop_Drop_for_ink_e2e_node_proc_TestNodeProcess_R.
    Section Impl_core_ops_drop_Drop_for_ink_e2e_node_proc_TestNodeProcess_R.
      Context {R : Set}.
      Definition Self := ink_e2e.node_proc.TestNodeProcess R.
      
      Parameter drop :
          forall `{H' : State.Trait},
          (mut_ref Self) -> M (H := H') unit.
      
      Global Instance Method_drop `{H' : State.Trait} : Notation.Dot "drop" := {
        Notation.dot := drop;
      }.
      
      Global Instance I : core.ops.drop.Drop.Trait Self := {
        core.ops.drop.Drop.drop `{H' : State.Trait} := drop;
      }.
    End Impl_core_ops_drop_Drop_for_ink_e2e_node_proc_TestNodeProcess_R.
    Global Hint Resolve I : core.
  End Impl_core_ops_drop_Drop_for_ink_e2e_node_proc_TestNodeProcess_R.
  
  Module TestNodeProcessBuilder.
    Section TestNodeProcessBuilder.
      Context {R : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        node_path : std.ffi.os_str.OsString;
        authority : core.option.Option sp_keyring.sr25519.Keyring;
        marker : core.marker.PhantomData R;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_node_path : Notation.Dot "node_path" := {
        Notation.dot '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_AF_node_path : Notation.DoubleColon t "node_path" := {
        Notation.double_colon '(Build_t x0 _ _) := x0;
      }.
      Global Instance Get_authority : Notation.Dot "authority" := {
        Notation.dot '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_AF_authority : Notation.DoubleColon t "authority" := {
        Notation.double_colon '(Build_t _ x1 _) := x1;
      }.
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t _ _ x2) := x2;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon '(Build_t _ _ x2) := x2;
      }.
    End TestNodeProcessBuilder.
  End TestNodeProcessBuilder.
  Definition TestNodeProcessBuilder (R : Set) : Set :=
    TestNodeProcessBuilder.t (R := R).
End node_proc.

Module TestNodeProcess.
  Section TestNodeProcess.
    Context {R : Set}.
    Context `{subxt.config.Config.Trait R}.
    Unset Primitive Projections.
    Record t : Set := {
      proc : std.process.Child;
      client : subxt.client.online_client.OnlineClient R;
      url : alloc.string.String;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_proc : Notation.Dot "proc" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_AF_proc : Notation.DoubleColon t "proc" := {
      Notation.double_colon '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_client : Notation.Dot "client" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_AF_client : Notation.DoubleColon t "client" := {
      Notation.double_colon '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_url : Notation.Dot "url" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
    Global Instance Get_AF_url : Notation.DoubleColon t "url" := {
      Notation.double_colon '(Build_t _ _ x2) := x2;
    }.
  End TestNodeProcess.
End TestNodeProcess.
Definition TestNodeProcess (R : Set) `{subxt.config.Config.Trait R} : Set :=
  TestNodeProcess.t (R := R).

Module Impl_core_ops_drop_Drop_for_ink_e2e_node_proc_TestNodeProcess_R.
  Section Impl_core_ops_drop_Drop_for_ink_e2e_node_proc_TestNodeProcess_R.
    Context {R : Set}.
    Definition Self := ink_e2e.node_proc.TestNodeProcess R.
    
    Parameter drop :
        forall `{H' : State.Trait},
        (mut_ref Self) -> M (H := H') unit.
    
    Global Instance Method_drop `{H' : State.Trait} : Notation.Dot "drop" := {
      Notation.dot := drop;
    }.
    
    Global Instance I : core.ops.drop.Drop.Trait Self := {
      core.ops.drop.Drop.drop `{H' : State.Trait} := drop;
    }.
  End Impl_core_ops_drop_Drop_for_ink_e2e_node_proc_TestNodeProcess_R.
  Global Hint Resolve I : core.
End Impl_core_ops_drop_Drop_for_ink_e2e_node_proc_TestNodeProcess_R.

Module TestNodeProcessBuilder.
  Section TestNodeProcessBuilder.
    Context {R : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      node_path : std.ffi.os_str.OsString;
      authority : core.option.Option sp_keyring.sr25519.Keyring;
      marker : core.marker.PhantomData R;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_node_path : Notation.Dot "node_path" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_AF_node_path : Notation.DoubleColon t "node_path" := {
      Notation.double_colon '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_authority : Notation.Dot "authority" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_AF_authority : Notation.DoubleColon t "authority" := {
      Notation.double_colon '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon '(Build_t _ _ x2) := x2;
    }.
  End TestNodeProcessBuilder.
End TestNodeProcessBuilder.
Definition TestNodeProcessBuilder (R : Set) : Set :=
  TestNodeProcessBuilder.t (R := R).

Module Weight.
  Unset Primitive Projections.
  Record t : Set := {
    ref_time : u64;
    proof_size : u64;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_ref_time : Notation.Dot "ref_time" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_AF_ref_time : Notation.DoubleColon t "ref_time" := {
    Notation.double_colon '(Build_t x0 _) := x0;
  }.
  Global Instance Get_proof_size : Notation.Dot "proof_size" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
  Global Instance Get_AF_proof_size : Notation.DoubleColon t "proof_size" := {
    Notation.double_colon '(Build_t _ x1) := x1;
  }.
End Weight.
Definition Weight : Set := Weight.t.

Module Impl_core_marker_Copy_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_e2e_xts_Weight.

Module Impl_core_clone_Clone_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_e2e.xts.Weight.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_e2e_xts_Weight.

Module Impl_core_marker_StructuralEq_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_e2e_xts_Weight.

Module Impl_core_cmp_Eq_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_e2e_xts_Weight.

Module Impl_core_marker_StructuralPartialEq_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_e2e_xts_Weight.

Module Impl_core_cmp_PartialEq_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) -> (ref ink_e2e.xts.Weight) -> M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_e2e_xts_Weight.

Module Impl_core_fmt_Debug_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_xts_Weight.

Module Impl_core_default_Default_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter default :
      forall `{H' : State.Trait},
      M (H := H') ink_e2e.xts.Weight.
  
  Global Instance AssociatedFunction_default `{H' : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H' : State.Trait} := default;
  }.
  Global Hint Resolve I : core.
End Impl_core_default_Default_for_ink_e2e_xts_Weight.

Module Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter encode_to :
      forall
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy},
      (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
  
  Global Instance Method_encode_to
      `{H' : State.Trait}
      {__CodecOutputEdqy : Set}
      `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      `{core.marker.Sized.Trait __CodecOutputEdqy} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Weight.

Module Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Global Instance I
    : parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
      := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Weight.

Module Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter decode :
      forall
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
      (mut_ref __CodecInputEdqy) ->
        M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode
      `{H' : State.Trait}
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      `{H' : State.Trait}
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Weight.

Module
  Impl_parity_scale_codec_max_encoded_len_MaxEncodedLen_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter max_encoded_len :
      forall `{H' : State.Trait},
      M (H := H') CoqOfRust.core.primitive.usize.
  
  Global Instance AssociatedFunction_max_encoded_len `{H' : State.Trait} :
    Notation.DoubleColon Self "max_encoded_len" := {
    Notation.double_colon := max_encoded_len;
  }.
  
  Global Instance I
    : parity_scale_codec.max_encoded_len.MaxEncodedLen.Trait Self := {
    parity_scale_codec.max_encoded_len.MaxEncodedLen.max_encoded_len
      `{H' : State.Trait}
      :=
      max_encoded_len;
  }.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_max_encoded_len_MaxEncodedLen_for_ink_e2e_xts_Weight.

Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter encode_as_type_to :
      forall `{H' : State.Trait},
      (ref Self) ->
        u32 ->
        (ref scale_info.portable.PortableRegistry) ->
        (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
        M (H := H') (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H' : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
      :=
      encode_as_type_to;
  }.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Weight.

Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter encode_as_fields_to :
      forall `{H' : State.Trait},
      (ref Self) ->
        (ref (Slice scale_encode.PortableField)) ->
        (ref scale_info.portable.PortableRegistry) ->
        (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
        M (H := H') (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
    Notation.Dot "encode_as_fields_to" := {
    Notation.dot := encode_as_fields_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
    scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
      :=
      encode_as_fields_to;
  }.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Weight.

Module Impl_serde_ser_Serialize_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter serialize :
      forall `{H' : State.Trait} {__S : Set} `{serde.ser.Serializer.Trait __S},
      (ref Self) ->
        __S ->
        M (H := H') (core.result.Result __S::type["Ok"] __S::type["Error"]).
  
  Global Instance Method_serialize
      `{H' : State.Trait}
      {__S : Set}
      `{serde.ser.Serializer.Trait __S} :
    Notation.Dot "serialize" := {
    Notation.dot := serialize (__S := __S);
  }.
  
  Global Instance I : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      `{H' : State.Trait}
      {__S : Set}
      `{serde.ser.Serializer.Trait __S}
      :=
      serialize (__S := __S);
  }.
  Global Hint Resolve I : core.
End Impl_serde_ser_Serialize_for_ink_e2e_xts_Weight.

Module Impl_serde_de_Deserialize_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter deserialize :
      forall `{H' : State.Trait} {__D : Set} `{serde.de.Deserializer.Trait __D},
      __D -> M (H := H') (core.result.Result Self __D::type["Error"]).
  
  Global Instance AssociatedFunction_deserialize
      `{H' : State.Trait}
      {__D : Set}
      `{serde.de.Deserializer.Trait __D} :
    Notation.DoubleColon Self "deserialize" := {
    Notation.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance I : serde.de.Deserialize.Trait Self := {
    serde.de.Deserialize.deserialize
      `{H' : State.Trait}
      {__D : Set}
      `{serde.de.Deserializer.Trait __D}
      :=
      deserialize (__D := __D);
  }.
  Global Hint Resolve I : core.
End Impl_serde_de_Deserialize_for_ink_e2e_xts_Weight.

Module Impl_serde_de_Visitor_for_ink_e2e_xts___deserialize___FieldVisitor.
  Definition Self := ink_e2e.xts._.deserialize.__FieldVisitor.
  
  Definition Value : Set := ink_e2e.xts._.deserialize.__Field.
  
  Parameter expecting :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_expecting `{H' : State.Trait} :
    Notation.Dot "expecting" := {
    Notation.dot := expecting;
  }.
  
  Parameter visit_u64 :
      forall `{H' : State.Trait} {__E : Set} `{serde.de.Error.Trait __E},
      Self -> u64 -> M (H := H') (core.result.Result Value __E).
  
  Global Instance Method_visit_u64
      `{H' : State.Trait}
      {__E : Set}
      `{serde.de.Error.Trait __E} :
    Notation.Dot "visit_u64" := {
    Notation.dot := visit_u64 (__E := __E);
  }.
  
  Parameter visit_str :
      forall `{H' : State.Trait} {__E : Set} `{serde.de.Error.Trait __E},
      Self -> (ref str) -> M (H := H') (core.result.Result Value __E).
  
  Global Instance Method_visit_str
      `{H' : State.Trait}
      {__E : Set}
      `{serde.de.Error.Trait __E} :
    Notation.Dot "visit_str" := {
    Notation.dot := visit_str (__E := __E);
  }.
  
  Parameter visit_bytes :
      forall `{H' : State.Trait} {__E : Set} `{serde.de.Error.Trait __E},
      Self -> (ref (Slice u8)) -> M (H := H') (core.result.Result Value __E).
  
  Global Instance Method_visit_bytes
      `{H' : State.Trait}
      {__E : Set}
      `{serde.de.Error.Trait __E} :
    Notation.Dot "visit_bytes" := {
    Notation.dot := visit_bytes (__E := __E);
  }.
  
  Global Instance I : serde.de.Visitor.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting `{H' : State.Trait} := expecting;
  }.
  Global Hint Resolve I : core.
End Impl_serde_de_Visitor_for_ink_e2e_xts___deserialize___FieldVisitor.

Module Impl_serde_de_Deserialize_for_ink_e2e_xts___deserialize___Field.
  Definition Self := ink_e2e.xts._.deserialize.__Field.
  
  Parameter deserialize :
      forall `{H' : State.Trait} {__D : Set} `{serde.de.Deserializer.Trait __D},
      __D -> M (H := H') (core.result.Result Self __D::type["Error"]).
  
  Global Instance AssociatedFunction_deserialize
      `{H' : State.Trait}
      {__D : Set}
      `{serde.de.Deserializer.Trait __D} :
    Notation.DoubleColon Self "deserialize" := {
    Notation.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance I : serde.de.Deserialize.Trait Self := {
    serde.de.Deserialize.deserialize
      `{H' : State.Trait}
      {__D : Set}
      `{serde.de.Deserializer.Trait __D}
      :=
      deserialize (__D := __D);
  }.
  Global Hint Resolve I : core.
End Impl_serde_de_Deserialize_for_ink_e2e_xts___deserialize___Field.

Module Impl_serde_de_Visitor_for_ink_e2e_xts___deserialize___Visitor.
  Definition Self := ink_e2e.xts._.deserialize.__Visitor.
  
  Definition Value : Set := ink_e2e.xts.Weight.
  
  Parameter expecting :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_expecting `{H' : State.Trait} :
    Notation.Dot "expecting" := {
    Notation.dot := expecting;
  }.
  
  Parameter visit_seq :
      forall `{H' : State.Trait} {__A : Set} `{serde.de.SeqAccess.Trait __A},
      Self -> __A -> M (H := H') (core.result.Result Value __A::type["Error"]).
  
  Global Instance Method_visit_seq
      `{H' : State.Trait}
      {__A : Set}
      `{serde.de.SeqAccess.Trait __A} :
    Notation.Dot "visit_seq" := {
    Notation.dot := visit_seq (__A := __A);
  }.
  
  Parameter visit_map :
      forall `{H' : State.Trait} {__A : Set} `{serde.de.MapAccess.Trait __A},
      Self -> __A -> M (H := H') (core.result.Result Value __A::type["Error"]).
  
  Global Instance Method_visit_map
      `{H' : State.Trait}
      {__A : Set}
      `{serde.de.MapAccess.Trait __A} :
    Notation.Dot "visit_map" := {
    Notation.dot := visit_map (__A := __A);
  }.
  
  Global Instance I : serde.de.Visitor.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting `{H' : State.Trait} := expecting;
  }.
  Global Hint Resolve I : core.
End Impl_serde_de_Visitor_for_ink_e2e_xts___deserialize___Visitor.

Module Impl_core_convert_From_for_ink_e2e_xts_Weight.
  Definition Self := ink_e2e.xts.Weight.
  
  Parameter from :
      forall `{H' : State.Trait},
      sp_weights.weight_v2.Weight -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := sp_weights.weight_v2.Weight) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_ink_e2e_xts_Weight.

Module Impl_core_convert_From_for_sp_weights_weight_v2_Weight.
  Definition Self := sp_weights.weight_v2.Weight.
  
  Parameter from :
      forall `{H' : State.Trait},
      ink_e2e.xts.Weight -> M (H := H') Self.
  
  Global Instance AssociatedFunction_from `{H' : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I
    : core.convert.From.Trait Self (T := ink_e2e.xts.Weight) := {
    core.convert.From.from `{H' : State.Trait} := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_sp_weights_weight_v2_Weight.

Module InstantiateWithCode.
  Section InstantiateWithCode.
    Context {E : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      value : E::type["Balance"];
      gas_limit : ink_e2e.xts.Weight;
      storage_deposit_limit : core.option.Option E::type["Balance"];
      code : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
      data : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
      salt : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon '(Build_t x0 _ _ _ _ _) := x0;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
    }.
    Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
      Notation.double_colon '(Build_t _ x1 _ _ _ _) := x1;
    }.
    Global Instance Get_storage_deposit_limit
      : Notation.Dot "storage_deposit_limit" := {
      Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
    }.
    Global Instance Get_AF_storage_deposit_limit
      : Notation.DoubleColon t "storage_deposit_limit" := {
      Notation.double_colon '(Build_t _ _ x2 _ _ _) := x2;
    }.
    Global Instance Get_code : Notation.Dot "code" := {
      Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
    }.
    Global Instance Get_AF_code : Notation.DoubleColon t "code" := {
      Notation.double_colon '(Build_t _ _ _ x3 _ _) := x3;
    }.
    Global Instance Get_data : Notation.Dot "data" := {
      Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
    }.
    Global Instance Get_AF_data : Notation.DoubleColon t "data" := {
      Notation.double_colon '(Build_t _ _ _ _ x4 _) := x4;
    }.
    Global Instance Get_salt : Notation.Dot "salt" := {
      Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
    }.
    Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
      Notation.double_colon '(Build_t _ _ _ _ _ x5) := x5;
    }.
  End InstantiateWithCode.
End InstantiateWithCode.
Definition InstantiateWithCode
    (E : Set)
    `{ink_env.types.Environment.Trait E}
    : Set :=
  InstantiateWithCode.t (E := E).

(* Module Impl_core_fmt_Debug_for_ink_e2e_xts_InstantiateWithCode_E.
  (* Section Impl_core_fmt_Debug_for_ink_e2e_xts_InstantiateWithCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.InstantiateWithCode E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_InstantiateWithCode_E. *)
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_xts_InstantiateWithCode_E. *)

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_InstantiateWithCode_E.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_InstantiateWithCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.InstantiateWithCode E.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_InstantiateWithCode_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_InstantiateWithCode_E.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_InstantiateWithCode_E.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_InstantiateWithCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.InstantiateWithCode E.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_InstantiateWithCode_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_InstantiateWithCode_E.

Module
  Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_InstantiateWithCode_E.
  Section
    Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_InstantiateWithCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.InstantiateWithCode E.
    
    Parameter decode :
        forall
          `{H' : State.Trait}
          {__CodecInputEdqy : Set}
          `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
        (mut_ref __CodecInputEdqy) ->
          M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
  End
    Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_InstantiateWithCode_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_InstantiateWithCode_E.

(* Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_InstantiateWithCode_E.
  (* Section Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_InstantiateWithCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.InstantiateWithCode E.
    
    Parameter encode_as_type_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H' : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_InstantiateWithCode_E. *)
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_InstantiateWithCode_E. *)

(* Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_InstantiateWithCode_E.
  (* Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_InstantiateWithCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.InstantiateWithCode E.
    
    Parameter encode_as_fields_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_InstantiateWithCode_E. *)
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_InstantiateWithCode_E. *)

Module Call.
  Section Call.
    Context {E : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      dest : subxt.utils.multi_address.MultiAddress E::type["AccountId"] unit;
      value : E::type["Balance"];
      gas_limit : ink_e2e.xts.Weight;
      storage_deposit_limit : core.option.Option E::type["Balance"];
      data : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_dest : Notation.Dot "dest" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_AF_dest : Notation.DoubleColon t "dest" := {
      Notation.double_colon '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_gas_limit : Notation.Dot "gas_limit" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_AF_gas_limit : Notation.DoubleColon t "gas_limit" := {
      Notation.double_colon '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_storage_deposit_limit
      : Notation.Dot "storage_deposit_limit" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get_AF_storage_deposit_limit
      : Notation.DoubleColon t "storage_deposit_limit" := {
      Notation.double_colon '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get_data : Notation.Dot "data" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
    Global Instance Get_AF_data : Notation.DoubleColon t "data" := {
      Notation.double_colon '(Build_t _ _ _ _ x4) := x4;
    }.
  End Call.
End Call.
Definition Call (E : Set) `{ink_env.types.Environment.Trait E} : Set :=
  Call.t (E := E).

Module Impl_core_fmt_Debug_for_ink_e2e_xts_Call_E.
  Section Impl_core_fmt_Debug_for_ink_e2e_xts_Call_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.Call E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_Call_E.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_xts_Call_E.

Module Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Call_E.
  Section Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Call_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.Call E.
    
    Parameter decode :
        forall
          `{H' : State.Trait}
          {__CodecInputEdqy : Set}
          `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
        (mut_ref __CodecInputEdqy) ->
          M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
  End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Call_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Call_E.

Module Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Call_E.
  Section Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Call_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.Call E.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Call_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Call_E.

Module Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Call_E.
  Section Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Call_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.Call E.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Call_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Call_E.

Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Call_E.
  Section Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Call_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.Call E.
    
    Parameter encode_as_type_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H' : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Call_E.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Call_E.

Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Call_E.
  Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Call_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.Call E.
    
    Parameter encode_as_fields_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Call_E.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Call_E.

Module Transfer.
  Section Transfer.
    Context {E C : Set}.
    Context `{ink_env.types.Environment.Trait E} `{subxt.config.Config.Trait C}.
    Unset Primitive Projections.
    Record t : Set := {
      dest : subxt.utils.static_type.Static C::type["Address"];
      value : E::type["Balance"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_dest : Notation.Dot "dest" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_dest : Notation.DoubleColon t "dest" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End Transfer.
End Transfer.
Definition Transfer
    (E C : Set)
    `{ink_env.types.Environment.Trait E}
    `{subxt.config.Config.Trait C}
    : Set :=
  Transfer.t (E := E) (C := C).

Module Impl_core_fmt_Debug_for_ink_e2e_xts_Transfer_E_C.
  Section Impl_core_fmt_Debug_for_ink_e2e_xts_Transfer_E_C.
    Context {E C : Set}.
    Definition Self := ink_e2e.xts.Transfer E C.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_Transfer_E_C.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_xts_Transfer_E_C.

Module Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Transfer_E_C.
  Section Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Transfer_E_C.
    Context {E C : Set}.
    Definition Self := ink_e2e.xts.Transfer E C.
    
    Parameter decode :
        forall
          `{H' : State.Trait}
          {__CodecInputEdqy : Set}
          `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
        (mut_ref __CodecInputEdqy) ->
          M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
  End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Transfer_E_C.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Transfer_E_C.

Module Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Transfer_E_C.
  Section Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Transfer_E_C.
    Context {E C : Set}.
    Definition Self := ink_e2e.xts.Transfer E C.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Transfer_E_C.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Transfer_E_C.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Transfer_E_C.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Transfer_E_C.
    Context {E C : Set}.
    Definition Self := ink_e2e.xts.Transfer E C.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Transfer_E_C.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Transfer_E_C.

Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Transfer_E_C.
  Section Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Transfer_E_C.
    Context {E C : Set}.
    Definition Self := ink_e2e.xts.Transfer E C.
    
    Parameter encode_as_type_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H' : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Transfer_E_C.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Transfer_E_C.

Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Transfer_E_C.
  Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Transfer_E_C.
    Context {E C : Set}.
    Definition Self := ink_e2e.xts.Transfer E C.
    
    Parameter encode_as_fields_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Transfer_E_C.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_Transfer_E_C.

Module Determinism.
  Inductive t : Set :=
  | Enforced
  | Relaxed.
End Determinism.
Definition Determinism : Set := Determinism.t.

Module Impl_core_fmt_Debug_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Parameter fmt :
      forall `{H' : State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M (H := H') core.fmt.Result.
  
  Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_xts_Determinism.

Module Impl_core_clone_Clone_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Parameter clone :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') ink_e2e.xts.Determinism.
  
  Global Instance Method_clone `{H' : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H' : State.Trait} := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_e2e_xts_Determinism.

Module Impl_core_marker_Copy_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Global Instance I : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_e2e_xts_Determinism.

Module Impl_core_marker_StructuralPartialEq_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_e2e_xts_Determinism.

Module Impl_core_cmp_PartialEq_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Parameter eq :
      forall `{H' : State.Trait},
      (ref Self) -> (ref ink_e2e.xts.Determinism) -> M (H := H') bool.
  
  Global Instance Method_eq `{H' : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq `{H' : State.Trait} := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_e2e_xts_Determinism.

Module Impl_core_marker_StructuralEq_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Global Instance I : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_e2e_xts_Determinism.

Module Impl_core_cmp_Eq_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Parameter assert_receiver_is_total_eq :
      forall `{H' : State.Trait},
      (ref Self) -> M (H := H') unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H' : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_e2e_xts_Determinism.

Module Impl_serde_ser_Serialize_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Parameter serialize :
      forall `{H' : State.Trait} {__S : Set} `{serde.ser.Serializer.Trait __S},
      (ref Self) ->
        __S ->
        M (H := H') (core.result.Result __S::type["Ok"] __S::type["Error"]).
  
  Global Instance Method_serialize
      `{H' : State.Trait}
      {__S : Set}
      `{serde.ser.Serializer.Trait __S} :
    Notation.Dot "serialize" := {
    Notation.dot := serialize (__S := __S);
  }.
  
  Global Instance I : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      `{H' : State.Trait}
      {__S : Set}
      `{serde.ser.Serializer.Trait __S}
      :=
      serialize (__S := __S);
  }.
  Global Hint Resolve I : core.
End Impl_serde_ser_Serialize_for_ink_e2e_xts_Determinism.

Module Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Parameter decode :
      forall
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
      (mut_ref __CodecInputEdqy) ->
        M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode
      `{H' : State.Trait}
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      `{H' : State.Trait}
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_Determinism.

Module Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Parameter encode_to :
      forall
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy},
      (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
  
  Global Instance Method_encode_to
      `{H' : State.Trait}
      {__CodecOutputEdqy : Set}
      `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      `{core.marker.Sized.Trait __CodecOutputEdqy} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Determinism.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Global Instance I
    : parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
      := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Determinism.

Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Determinism.
  Definition Self := ink_e2e.xts.Determinism.
  
  Parameter encode_as_type_to :
      forall `{H' : State.Trait},
      (ref Self) ->
        u32 ->
        (ref scale_info.portable.PortableRegistry) ->
        (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
        M (H := H') (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H' : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
      :=
      encode_as_type_to;
  }.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_Determinism.

Module UploadCode.
  Section UploadCode.
    Context {E : Set}.
    Context `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      code : alloc.vec.Vec u8 alloc.vec.Vec.Default.A;
      storage_deposit_limit : core.option.Option E::type["Balance"];
      determinism : ink_e2e.xts.Determinism;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_code : Notation.Dot "code" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_AF_code : Notation.DoubleColon t "code" := {
      Notation.double_colon '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_storage_deposit_limit
      : Notation.Dot "storage_deposit_limit" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_AF_storage_deposit_limit
      : Notation.DoubleColon t "storage_deposit_limit" := {
      Notation.double_colon '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_determinism : Notation.Dot "determinism" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
    Global Instance Get_AF_determinism
      : Notation.DoubleColon t "determinism" := {
      Notation.double_colon '(Build_t _ _ x2) := x2;
    }.
  End UploadCode.
End UploadCode.
Definition UploadCode (E : Set) `{ink_env.types.Environment.Trait E} : Set :=
  UploadCode.t (E := E).

Module Impl_core_fmt_Debug_for_ink_e2e_xts_UploadCode_E.
  Section Impl_core_fmt_Debug_for_ink_e2e_xts_UploadCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.UploadCode E.
    
    Parameter fmt :
        forall `{H' : State.Trait},
        (ref Self) ->
          (mut_ref core.fmt.Formatter) ->
          M (H := H') core.fmt.Result.
    
    Global Instance Method_fmt `{H' : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H' : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_e2e_xts_UploadCode_E.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_e2e_xts_UploadCode_E.

Module Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_UploadCode_E.
  Section Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_UploadCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.UploadCode E.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_UploadCode_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_UploadCode_E.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_UploadCode_E.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_UploadCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.UploadCode E.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_UploadCode_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_UploadCode_E.

Module Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_UploadCode_E.
  Section Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_UploadCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.UploadCode E.
    
    Parameter decode :
        forall
          `{H' : State.Trait}
          {__CodecInputEdqy : Set}
          `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
        (mut_ref __CodecInputEdqy) ->
          M (H := H') (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        `{H' : State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
  End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_UploadCode_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_e2e_xts_UploadCode_E.

Module Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_UploadCode_E.
  Section Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_UploadCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.UploadCode E.
    
    Parameter encode_as_type_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H' : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to `{H' : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_UploadCode_E.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_e2e_xts_UploadCode_E.

Module Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_UploadCode_E.
  Section Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_UploadCode_E.
    Context {E : Set}.
    Definition Self := ink_e2e.xts.UploadCode E.
    
    Parameter encode_as_fields_to :
        forall `{H' : State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (H := H') (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H' : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to `{H' : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_UploadCode_E.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_e2e_xts_UploadCode_E.

Module Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
  Section Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcInstantiateRequest C E.
    
    Parameter serialize :
        forall
          `{H' : State.Trait}
          {__S : Set}
          `{serde.ser.Serializer.Trait __S},
        (ref Self) ->
          __S ->
          M (H := H') (core.result.Result __S::type["Ok"] __S::type["Error"]).
    
    Global Instance Method_serialize
        `{H' : State.Trait}
        {__S : Set}
        `{serde.ser.Serializer.Trait __S} :
      Notation.Dot "serialize" := {
      Notation.dot := serialize (__S := __S);
    }.
    
    Global Instance I : serde.ser.Serialize.Trait Self := {
      serde.ser.Serialize.serialize
        `{H' : State.Trait}
        {__S : Set}
        `{serde.ser.Serializer.Trait __S}
        :=
        serialize (__S := __S);
    }.
  End Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
  Global Hint Resolve I : core.
End Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcInstantiateRequest_C_E.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcInstantiateRequest C E.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcInstantiateRequest_C_E.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcInstantiateRequest C E.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcInstantiateRequest_C_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcInstantiateRequest_C_E.

Module Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
  Section Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcCodeUploadRequest C E.
    
    Parameter serialize :
        forall
          `{H' : State.Trait}
          {__S : Set}
          `{serde.ser.Serializer.Trait __S},
        (ref Self) ->
          __S ->
          M (H := H') (core.result.Result __S::type["Ok"] __S::type["Error"]).
    
    Global Instance Method_serialize
        `{H' : State.Trait}
        {__S : Set}
        `{serde.ser.Serializer.Trait __S} :
      Notation.Dot "serialize" := {
      Notation.dot := serialize (__S := __S);
    }.
    
    Global Instance I : serde.ser.Serialize.Trait Self := {
      serde.ser.Serialize.serialize
        `{H' : State.Trait}
        {__S : Set}
        `{serde.ser.Serializer.Trait __S}
        :=
        serialize (__S := __S);
    }.
  End Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
  Global Hint Resolve I : core.
End Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcCodeUploadRequest C E.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcCodeUploadRequest C E.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcCodeUploadRequest_C_E.

Module Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcCallRequest_C_E.
  Section Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcCallRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcCallRequest C E.
    
    Parameter serialize :
        forall
          `{H' : State.Trait}
          {__S : Set}
          `{serde.ser.Serializer.Trait __S},
        (ref Self) ->
          __S ->
          M (H := H') (core.result.Result __S::type["Ok"] __S::type["Error"]).
    
    Global Instance Method_serialize
        `{H' : State.Trait}
        {__S : Set}
        `{serde.ser.Serializer.Trait __S} :
      Notation.Dot "serialize" := {
      Notation.dot := serialize (__S := __S);
    }.
    
    Global Instance I : serde.ser.Serialize.Trait Self := {
      serde.ser.Serialize.serialize
        `{H' : State.Trait}
        {__S : Set}
        `{serde.ser.Serializer.Trait __S}
        :=
        serialize (__S := __S);
    }.
  End Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcCallRequest_C_E.
  Global Hint Resolve I : core.
End Impl_serde_ser_Serialize_for_ink_e2e_xts_RpcCallRequest_C_E.

Module Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcCallRequest_C_E.
  Section
    Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcCallRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcCallRequest C E.
    
    Parameter encode_to :
        forall
          `{H' : State.Trait}
          {__CodecOutputEdqy : Set}
          `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
          `{core.marker.Sized.Trait __CodecOutputEdqy},
        (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
    
    Global Instance Method_encode_to
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.Dot "encode_to" := {
      Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
    }.
  End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcCallRequest_C_E.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_RpcCallRequest_C_E.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcCallRequest_C_E.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcCallRequest_C_E.
    Context {C E : Set}.
    Definition Self := ink_e2e.xts.RpcCallRequest C E.
    
    Global Instance I
      : parity_scale_codec.encode_like.EncodeLike.Trait Self
          (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
        := {
    }.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcCallRequest_C_E.
  Global Hint Resolve I : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_RpcCallRequest_C_E.

Module Impl_serde_ser_Serialize_for_ink_e2e_xts_Code.
  Definition Self := ink_e2e.xts.Code.
  
  Parameter serialize :
      forall `{H' : State.Trait} {__S : Set} `{serde.ser.Serializer.Trait __S},
      (ref Self) ->
        __S ->
        M (H := H') (core.result.Result __S::type["Ok"] __S::type["Error"]).
  
  Global Instance Method_serialize
      `{H' : State.Trait}
      {__S : Set}
      `{serde.ser.Serializer.Trait __S} :
    Notation.Dot "serialize" := {
    Notation.dot := serialize (__S := __S);
  }.
  
  Global Instance I : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      `{H' : State.Trait}
      {__S : Set}
      `{serde.ser.Serializer.Trait __S}
      :=
      serialize (__S := __S);
  }.
  Global Hint Resolve I : core.
End Impl_serde_ser_Serialize_for_ink_e2e_xts_Code.

Module Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Code.
  Definition Self := ink_e2e.xts.Code.
  
  Parameter encode_to :
      forall
        `{H' : State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy},
      (ref Self) -> (mut_ref __CodecOutputEdqy) -> M (H := H') unit.
  
  Global Instance Method_encode_to
      `{H' : State.Trait}
      {__CodecOutputEdqy : Set}
      `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      `{core.marker.Sized.Trait __CodecOutputEdqy} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_e2e_xts_Code.

Module Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Code.
  Definition Self := ink_e2e.xts.Code.
  
  Global Instance I
    : parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
      := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_e2e_xts_Code.

Module ContractsApi.
  Section ContractsApi.
    Context {C E : Set}.
    Context `{subxt.config.Config.Trait C} `{ink_env.types.Environment.Trait E}.
    Unset Primitive Projections.
    Record t : Set := {
      client : subxt.client.online_client.OnlineClient C;
      _phantom : core.marker.PhantomData (C * E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_client : Notation.Dot "client" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_AF_client : Notation.DoubleColon t "client" := {
      Notation.double_colon '(Build_t x0 _) := x0;
    }.
    Global Instance Get__phantom : Notation.Dot "_phantom" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
    Global Instance Get_AF__phantom : Notation.DoubleColon t "_phantom" := {
      Notation.double_colon '(Build_t _ x1) := x1;
    }.
  End ContractsApi.
End ContractsApi.
Definition ContractsApi
    (C E : Set)
    `{subxt.config.Config.Trait C}
    `{ink_env.types.Environment.Trait E}
    : Set :=
  ContractsApi.t (C := C) (E := E).

Module SubstrateConfig.
  Inductive t : Set :=
  .
End SubstrateConfig.
Definition SubstrateConfig : Set := SubstrateConfig.t.

Module Impl_subxt_config_Config_for_ink_e2e_SubstrateConfig.
  Definition Self := ink_e2e.SubstrateConfig.
  
  Definition Index : Set := u32.
  
  Definition Hash : Set := primitive_types.H256.
  
  Definition Hasher : Set := subxt.config.substrate.BlakeTwo256.
  
  Definition AccountId : Set := subxt.utils.account_id.AccountId32.
  
  Definition Address : Set :=
    sp_runtime.multiaddress.MultiAddress AccountId u32.
  
  Definition Header : Set :=
    subxt.config.substrate.SubstrateHeader
      u32
      subxt.config.substrate.BlakeTwo256.
  
  Definition Signature : Set := sp_runtime.MultiSignature.
  
  Definition ExtrinsicParams : Set :=
    subxt.config.substrate.SubstrateExtrinsicParams Self.
  
  Global Instance I : subxt.config.Config.Trait Self := {
    subxt.config.Config.Index := Index;
    subxt.config.Config.Hash := Hash;
    subxt.config.Config.Hasher := Hasher;
    subxt.config.Config.AccountId := AccountId;
    subxt.config.Config.Address := Address;
    subxt.config.Config.Header := Header;
    subxt.config.Config.Signature := Signature;
    subxt.config.Config.ExtrinsicParams := ExtrinsicParams;
  }.
  Global Hint Resolve I : core.
End Impl_subxt_config_Config_for_ink_e2e_SubstrateConfig.

Definition PolkadotConfig : Set :=
  subxt.config.WithExtrinsicParams
    ink_e2e.SubstrateConfig
    (subxt.config.polkadot.PolkadotExtrinsicParams ink_e2e.SubstrateConfig).

Definition Signer (C : Set) : Set :=
  subxt.tx.signer.pair_signer.PairSigner C sp_core.sr25519.Pair.

Parameter INIT : forall `{H' : State.Trait}, std.sync.once.Once.

Parameter LOG_PREFIX :
    forall `{H' : State.Trait},
    std.thread.local.LocalKey (core.cell.RefCell alloc.string.String).

Parameter log_prefix :
    forall `{H' : State.Trait},
    M (H := H') alloc.string.String.

Parameter log_info : forall `{H' : State.Trait}, (ref str) -> M (H := H') unit.

Parameter log_error : forall `{H' : State.Trait}, (ref str) -> M (H := H') unit.

Parameter account_id :
    forall `{H' : State.Trait},
    sp_keyring.sr25519.Keyring -> M (H := H') ink_primitives.types.AccountId.
