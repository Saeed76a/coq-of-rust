(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
Require CoqOfRust.ink.parity_scale_codec.
Require CoqOfRust.ink.scale_encode.
Require CoqOfRust.ink.scale_info.

Module key.
  Definition Key `{State.Trait} : Set := u32.
  
  Module KeyComposer.
    Inductive t : Set := Build.
  End KeyComposer.
  Definition KeyComposer := @KeyComposer.t.
  
  Module Error.
    Inductive t `{State.Trait} : Set :=
    | StructNameIsEmpty
    | FieldNameIsEmpty.
  End Error.
  Definition Error `{State.Trait} : Set := Error.t.
  
  Module Impl_core_fmt_Debug_for_ink_primitives_key_Error.
    Definition Self `{State.Trait} := ink_primitives.key.Error.
    
    Parameter fmt :
        forall `{State.Trait},
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_primitives_key_Error.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_key_Error.
    Definition Self `{State.Trait} := ink_primitives.key.Error.
    
    Global Instance I `{State.Trait}
      : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_primitives_key_Error.
  
  Module Impl_core_cmp_PartialEq_for_ink_primitives_key_Error.
    Definition Self `{State.Trait} := ink_primitives.key.Error.
    
    Parameter eq :
        forall `{State.Trait},
        (ref Self) -> (ref ink_primitives.key.Error) -> M bool.
    
    Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I `{State.Trait}
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_primitives_key_Error.
  
  Module Impl_core_marker_StructuralEq_for_ink_primitives_key_Error.
    Definition Self `{State.Trait} := ink_primitives.key.Error.
    
    Global Instance I `{State.Trait} : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_primitives_key_Error.
  
  Module Impl_core_cmp_Eq_for_ink_primitives_key_Error.
    Definition Self `{State.Trait} := ink_primitives.key.Error.
    
    Parameter assert_receiver_is_total_eq :
        forall `{State.Trait},
        (ref Self) -> M unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I `{State.Trait} : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_primitives_key_Error.
End key.

Definition Key `{State.Trait} : Set := u32.

Module KeyComposer.
  Inductive t : Set := Build.
End KeyComposer.
Definition KeyComposer := @KeyComposer.t.

Module Error.
  Inductive t `{State.Trait} : Set :=
  | StructNameIsEmpty
  | FieldNameIsEmpty.
End Error.
Definition Error `{State.Trait} : Set := Error.t.

Module Impl_core_fmt_Debug_for_ink_primitives_key_Error.
  Definition Self `{State.Trait} := ink_primitives.key.Error.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_primitives_key_Error.

Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_key_Error.
  Definition Self `{State.Trait} := ink_primitives.key.Error.
  
  Global Instance I `{State.Trait}
    : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_primitives_key_Error.

Module Impl_core_cmp_PartialEq_for_ink_primitives_key_Error.
  Definition Self `{State.Trait} := ink_primitives.key.Error.
  
  Parameter eq :
      forall `{State.Trait},
      (ref Self) -> (ref ink_primitives.key.Error) -> M bool.
  
  Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I `{State.Trait}
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_primitives_key_Error.

Module Impl_core_marker_StructuralEq_for_ink_primitives_key_Error.
  Definition Self `{State.Trait} := ink_primitives.key.Error.
  
  Global Instance I `{State.Trait} : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_primitives_key_Error.

Module Impl_core_cmp_Eq_for_ink_primitives_key_Error.
  Definition Self `{State.Trait} := ink_primitives.key.Error.
  
  Parameter assert_receiver_is_total_eq :
      forall `{State.Trait},
      (ref Self) -> M unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I `{State.Trait} : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_primitives_key_Error.

Module types.
  Module AccountId.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      x0 : array u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End AccountId.
  Definition AccountId `{State.Trait} : Set := M.val AccountId.t.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter encode_as_type_to :
        forall `{State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I `{State.Trait} : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to := encode_as_type_to;
    }.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_primitives_types_AccountId.
  
  Module Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter encode_as_fields_to :
        forall `{State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I `{State.Trait}
      : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to := encode_as_fields_to;
    }.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_AccountId.
  
  Module Impl_core_fmt_Debug_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter fmt :
        forall `{State.Trait},
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_primitives_types_AccountId.
  
  Module Impl_core_clone_Clone_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter clone :
        forall `{State.Trait},
        (ref Self) -> M ink_primitives.types.AccountId.
    
    Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_primitives_types_AccountId.
  
  Module Impl_core_marker_Copy_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_primitives_types_AccountId.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Global Instance I `{State.Trait}
      : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_AccountId.
  
  Module Impl_core_cmp_PartialEq_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter eq :
        forall `{State.Trait},
        (ref Self) -> (ref ink_primitives.types.AccountId) -> M bool.
    
    Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I `{State.Trait}
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_primitives_types_AccountId.
  
  Module Impl_core_marker_StructuralEq_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Global Instance I `{State.Trait} : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_primitives_types_AccountId.
  
  Module Impl_core_cmp_Eq_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter assert_receiver_is_total_eq :
        forall `{State.Trait},
        (ref Self) -> M unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I `{State.Trait} : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_primitives_types_AccountId.
  
  Module Impl_core_cmp_PartialOrd_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter partial_cmp :
        forall `{State.Trait},
        (ref Self) ->
          (ref ink_primitives.types.AccountId) ->
          M (core.option.Option core.cmp.Ordering).
    
    Global Instance Method_partial_cmp `{State.Trait} :
      Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I `{State.Trait}
      : core.cmp.PartialOrd.Trait Self
          (Rhs := core.cmp.PartialOrd.Default.Rhs Self)
        := {
      core.cmp.PartialOrd.partial_cmp := partial_cmp;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialOrd_for_ink_primitives_types_AccountId.
  
  Module Impl_core_cmp_Ord_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter cmp :
        forall `{State.Trait},
        (ref Self) ->
          (ref ink_primitives.types.AccountId) ->
          M core.cmp.Ordering.
    
    Global Instance Method_cmp `{State.Trait} : Notation.Dot "cmp" := {
      Notation.dot := cmp;
    }.
    
    Global Instance I `{State.Trait} : core.cmp.Ord.Trait Self := {
      core.cmp.Ord.cmp := cmp;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Ord_for_ink_primitives_types_AccountId.
  
  Module Impl_core_hash_Hash_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter hash :
        forall `{State.Trait} {__H : Set} `{core.hash.Hasher.Trait __H},
        (ref Self) -> (mut_ref __H) -> M unit.
    
    Global Instance Method_hash
        `{State.Trait}
        {__H : Set}
        `{core.hash.Hasher.Trait __H} :
      Notation.Dot "hash" := {
      Notation.dot := hash (__H := __H);
    }.
    
    Global Instance I `{State.Trait} : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash {__H : Set} `{core.hash.Hasher.Trait __H}
        :=
        hash (__H := __H);
    }.
    Global Hint Resolve I : core.
  End Impl_core_hash_Hash_for_ink_primitives_types_AccountId.
  
  Module Impl_core_convert_From_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter from :
        forall `{State.Trait},
        (array u8) -> M ink_primitives.types.AccountId.
    
    Global Instance AssociatedFunction_from `{State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.From.Trait Self (T := array u8) := {
      core.convert.From.from := from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_From_for_ink_primitives_types_AccountId.
  
  (* Module Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter as_ref : forall `{State.Trait}, (ref Self) -> M (ref (array u8)).
    
    Global Instance Method_as_ref `{State.Trait} : Notation.Dot "as_ref" := {
      Notation.dot := as_ref;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.AsRef.Trait Self (T := array u8) := {
      core.convert.AsRef.as_ref := as_ref;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_AsRef_for_ink_primitives_types_AccountId. *)
  
  (* Module Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter as_mut :
        forall `{State.Trait},
        (mut_ref Self) -> M (mut_ref (array u8)).
    
    Global Instance Method_as_mut `{State.Trait} : Notation.Dot "as_mut" := {
      Notation.dot := as_mut;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.AsMut.Trait Self (T := array u8) := {
      core.convert.AsMut.as_mut := as_mut;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_AsMut_for_ink_primitives_types_AccountId. *)
  
  (* (* Module Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter as_ref : forall `{State.Trait}, (ref Self) -> M (ref (Slice u8)).
    
    Global Instance Method_as_ref `{State.Trait} : Notation.Dot "as_ref" := {
      Notation.dot := as_ref;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.AsRef.Trait Self (T := Slice u8) := {
      core.convert.AsRef.as_ref := as_ref;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_AsRef_for_ink_primitives_types_AccountId. *)
  
  (* Module Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Parameter as_mut :
        forall `{State.Trait},
        (mut_ref Self) -> M (mut_ref (Slice u8)).
    
    Global Instance Method_as_mut `{State.Trait} : Notation.Dot "as_mut" := {
      Notation.dot := as_mut;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.AsMut.Trait Self (T := Slice u8) := {
      core.convert.AsMut.as_mut := as_mut;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_AsMut_for_ink_primitives_types_AccountId. *) *)
  
  Module Impl_core_convert_TryFrom_for_ink_primitives_types_AccountId.
    Definition Self `{State.Trait} := ink_primitives.types.AccountId.
    
    Definition Error : Set := core.array.TryFromSliceError.
    
    Parameter try_from :
        forall `{State.Trait},
        (ref (Slice u8)) ->
          M (core.result.Result Self core.array.TryFromSliceError).
    
    Global Instance AssociatedFunction_try_from `{State.Trait} :
      Notation.DoubleColon Self "try_from" := {
      Notation.double_colon := try_from;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.TryFrom.Trait Self (T := ref (Slice u8)) := {
      core.convert.TryFrom.Error := Error;
      core.convert.TryFrom.try_from := try_from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_TryFrom_for_ink_primitives_types_AccountId.
  
  Module Hash.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      x0 : array u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
  End Hash.
  Definition Hash `{State.Trait} : Set := M.val Hash.t.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter encode_as_type_to :
        forall `{State.Trait},
        (ref Self) ->
          u32 ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I `{State.Trait} : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to := encode_as_type_to;
    }.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsType_for_ink_primitives_types_Hash.
  
  Module Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter encode_as_fields_to :
        forall `{State.Trait},
        (ref Self) ->
          (ref (Slice scale_encode.PortableField)) ->
          (ref scale_info.portable.PortableRegistry) ->
          (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
          M (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I `{State.Trait}
      : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to := encode_as_fields_to;
    }.
    Global Hint Resolve I : core.
  End Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_Hash.
  
  Module Impl_core_fmt_Debug_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter fmt :
        forall `{State.Trait},
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
    
    Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Global Hint Resolve I : core.
  End Impl_core_fmt_Debug_for_ink_primitives_types_Hash.
  
  Module Impl_core_clone_Clone_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter clone :
        forall `{State.Trait},
        (ref Self) -> M ink_primitives.types.Hash.
    
    Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
    Global Hint Resolve I : core.
  End Impl_core_clone_Clone_for_ink_primitives_types_Hash.
  
  Module Impl_core_marker_Copy_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_Copy_for_ink_primitives_types_Hash.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Global Instance I `{State.Trait}
      : core.marker.StructuralPartialEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_Hash.
  
  Module Impl_core_cmp_PartialEq_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter eq :
        forall `{State.Trait},
        (ref Self) -> (ref ink_primitives.types.Hash) -> M bool.
    
    Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I `{State.Trait}
      : core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self)
        := {
      core.cmp.PartialEq.eq := eq;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialEq_for_ink_primitives_types_Hash.
  
  Module Impl_core_marker_StructuralEq_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Global Instance I `{State.Trait} : core.marker.StructuralEq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_marker_StructuralEq_for_ink_primitives_types_Hash.
  
  Module Impl_core_cmp_Eq_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter assert_receiver_is_total_eq :
        forall `{State.Trait},
        (ref Self) -> M unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I `{State.Trait} : core.cmp.Eq.Trait Self := {
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Eq_for_ink_primitives_types_Hash.
  
  Module Impl_core_cmp_PartialOrd_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter partial_cmp :
        forall `{State.Trait},
        (ref Self) ->
          (ref ink_primitives.types.Hash) ->
          M (core.option.Option core.cmp.Ordering).
    
    Global Instance Method_partial_cmp `{State.Trait} :
      Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I `{State.Trait}
      : core.cmp.PartialOrd.Trait Self
          (Rhs := core.cmp.PartialOrd.Default.Rhs Self)
        := {
      core.cmp.PartialOrd.partial_cmp := partial_cmp;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_PartialOrd_for_ink_primitives_types_Hash.
  
  Module Impl_core_cmp_Ord_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter cmp :
        forall `{State.Trait},
        (ref Self) -> (ref ink_primitives.types.Hash) -> M core.cmp.Ordering.
    
    Global Instance Method_cmp `{State.Trait} : Notation.Dot "cmp" := {
      Notation.dot := cmp;
    }.
    
    Global Instance I `{State.Trait} : core.cmp.Ord.Trait Self := {
      core.cmp.Ord.cmp := cmp;
    }.
    Global Hint Resolve I : core.
  End Impl_core_cmp_Ord_for_ink_primitives_types_Hash.
  
  Module Impl_core_hash_Hash_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter hash :
        forall `{State.Trait} {__H : Set} `{core.hash.Hasher.Trait __H},
        (ref Self) -> (mut_ref __H) -> M unit.
    
    Global Instance Method_hash
        `{State.Trait}
        {__H : Set}
        `{core.hash.Hasher.Trait __H} :
      Notation.Dot "hash" := {
      Notation.dot := hash (__H := __H);
    }.
    
    Global Instance I `{State.Trait} : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash {__H : Set} `{core.hash.Hasher.Trait __H}
        :=
        hash (__H := __H);
    }.
    Global Hint Resolve I : core.
  End Impl_core_hash_Hash_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_From_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter from :
        forall `{State.Trait},
        (array u8) -> M ink_primitives.types.Hash.
    
    Global Instance AssociatedFunction_from `{State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.From.Trait Self (T := array u8) := {
      core.convert.From.from := from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_From_for_ink_primitives_types_Hash.
  
  Module Impl_core_default_Default_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter default : forall `{State.Trait}, M ink_primitives.types.Hash.
    
    Global Instance AssociatedFunction_default `{State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I `{State.Trait} : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
    Global Hint Resolve I : core.
  End Impl_core_default_Default_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_TryFrom_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Definition Error : Set := core.array.TryFromSliceError.
    
    Parameter try_from :
        forall `{State.Trait},
        (ref (Slice u8)) ->
          M (core.result.Result Self core.array.TryFromSliceError).
    
    Global Instance AssociatedFunction_try_from `{State.Trait} :
      Notation.DoubleColon Self "try_from" := {
      Notation.double_colon := try_from;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.TryFrom.Trait Self (T := ref (Slice u8)) := {
      core.convert.TryFrom.Error := Error;
      core.convert.TryFrom.try_from := try_from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_TryFrom_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_AsRef_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter as_ref : forall `{State.Trait}, (ref Self) -> M (ref (Slice u8)).
    
    Global Instance Method_as_ref `{State.Trait} : Notation.Dot "as_ref" := {
      Notation.dot := as_ref;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.AsRef.Trait Self (T := Slice u8) := {
      core.convert.AsRef.as_ref := as_ref;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_AsRef_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_AsMut_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Parameter as_mut :
        forall `{State.Trait},
        (mut_ref Self) -> M (mut_ref (Slice u8)).
    
    Global Instance Method_as_mut `{State.Trait} : Notation.Dot "as_mut" := {
      Notation.dot := as_mut;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.AsMut.Trait Self (T := Slice u8) := {
      core.convert.AsMut.as_mut := as_mut;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_AsMut_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_From_for_Array_u8.
    Definition Self `{State.Trait} := array u8.
    
    Parameter from : forall `{State.Trait}, ink_primitives.types.Hash -> M Self.
    
    Global Instance AssociatedFunction_from `{State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I `{State.Trait}
      : core.convert.From.Trait Self (T := ink_primitives.types.Hash) := {
      core.convert.From.from := from;
    }.
    Global Hint Resolve I : core.
  End Impl_core_convert_From_for_Array_u8.
  
  Module Clear.
    Class Trait (Self : Set) : Type := {
      CLEAR_HASH `{State.Trait} : Self;
      is_clear `{State.Trait} : (ref Self) -> M bool;
    }.
    
    Global Instance Method_CLEAR_HASH `{State.Trait} `(Trait)
      : Notation.Dot "CLEAR_HASH" := {
      Notation.dot := CLEAR_HASH;
    }.
    Global Instance Method_is_clear `{State.Trait} `(Trait)
      : Notation.Dot "is_clear" := {
      Notation.dot := is_clear;
    }.
  End Clear.
  
  (* Module Impl_ink_primitives_types_Clear_for_Array_u8.
    Definition Self `{State.Trait} := array u8.
    
    Definition
      CLEAR_HASH
      `{State.Trait} := let* α0 := M.alloc 0 in
      repeat α0.
    
    Global Instance AssociatedFunction_CLEAR_HASH `{State.Trait} :
      Notation.DoubleColon Self "CLEAR_HASH" := {
      Notation.double_colon := CLEAR_HASH;
    }.
    
    Parameter is_clear : forall `{State.Trait}, (ref Self) -> M bool.
    
    Global Instance Method_is_clear `{State.Trait} :
      Notation.Dot "is_clear" := {
      Notation.dot := is_clear;
    }.
    
    Global Instance I `{State.Trait}
      : ink_primitives.types.Clear.Trait Self := {
      ink_primitives.types.Clear.CLEAR_HASH := CLEAR_HASH;
      ink_primitives.types.Clear.is_clear := is_clear;
    }.
    Global Hint Resolve I : core.
  End Impl_ink_primitives_types_Clear_for_Array_u8. *)
  
  (* Module Impl_ink_primitives_types_Clear_for_ink_primitives_types_Hash.
    Definition Self `{State.Trait} := ink_primitives.types.Hash.
    
    Definition
      CLEAR_HASH
      `{State.Trait} := Self
        (ink_primitives.types.Clear.CLEAR_HASH (Self := (list u8))).
    
    Global Instance AssociatedFunction_CLEAR_HASH `{State.Trait} :
      Notation.DoubleColon Self "CLEAR_HASH" := {
      Notation.double_colon := CLEAR_HASH;
    }.
    
    Parameter is_clear : forall `{State.Trait}, (ref Self) -> M bool.
    
    Global Instance Method_is_clear `{State.Trait} :
      Notation.Dot "is_clear" := {
      Notation.dot := is_clear;
    }.
    
    Global Instance I `{State.Trait}
      : ink_primitives.types.Clear.Trait Self := {
      ink_primitives.types.Clear.CLEAR_HASH := CLEAR_HASH;
      ink_primitives.types.Clear.is_clear := is_clear;
    }.
    Global Hint Resolve I : core.
  End Impl_ink_primitives_types_Clear_for_ink_primitives_types_Hash. *)
End types.

Module AccountId.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : array u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End AccountId.
Definition AccountId `{State.Trait} : Set := M.val AccountId.t.

Module Impl_scale_info_TypeInfo_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Definition Identity : Set := Self.
  
  Parameter type_info :
      forall `{State.Trait},
      M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T).
  
  Global Instance AssociatedFunction_type_info `{State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I `{State.Trait} : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info := type_info;
  }.
  Global Hint Resolve I : core.
End Impl_scale_info_TypeInfo_for_ink_primitives_types_AccountId.

Module Visitor.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : core.marker.PhantomData unit;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End Visitor.
Definition Visitor `{State.Trait} : Set := M.val Visitor.t.

(* Module Impl_scale_decode_IntoVisitor_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Definition Visitor : Set := ink_primitives.types._.Visitor.
  
  Parameter into_visitor : forall `{State.Trait}, M Visitor.
  
  Global Instance AssociatedFunction_into_visitor `{State.Trait} :
    Notation.DoubleColon Self "into_visitor" := {
    Notation.double_colon := into_visitor;
  }.
  
  Global Instance I `{State.Trait} : scale_decode.IntoVisitor.Trait Self := {
    scale_decode.IntoVisitor.Visitor := Visitor;
    scale_decode.IntoVisitor.into_visitor := into_visitor;
  }.
  Global Hint Resolve I : core.
End Impl_scale_decode_IntoVisitor_for_ink_primitives_types_AccountId. *)

(* (* Module Impl_scale_decode_visitor_Visitor_for_ink_primitives_types___Visitor.
  Definition Self `{State.Trait} := ink_primitives.types._.Visitor.
  
  Definition Error : Set := scale_decode.error.Error.
  
  Definition Value : Set := ink_primitives.types.AccountId.
  
  Parameter visit_composite :
      forall `{State.Trait},
      Self ->
        (mut_ref scale_decode.visitor.types.composite.Composite) ->
        scale_decode.visitor.TypeId ->
        M (core.result.Result Value Error).
  
  Global Instance Method_visit_composite `{State.Trait} :
    Notation.Dot "visit_composite" := {
    Notation.dot := visit_composite;
  }.
  
  Parameter visit_tuple :
      forall `{State.Trait},
      Self ->
        (mut_ref scale_decode.visitor.types.tuple.Tuple) ->
        scale_decode.visitor.TypeId ->
        M (core.result.Result Value Error).
  
  Global Instance Method_visit_tuple `{State.Trait} :
    Notation.Dot "visit_tuple" := {
    Notation.dot := visit_tuple;
  }.
  
  Global Instance I `{State.Trait}
    : scale_decode.visitor.Visitor.Trait Self := {
    scale_decode.visitor.Visitor.Error := Error;
    scale_decode.visitor.Visitor.Value := Value;
  }.
  Global Hint Resolve I : core.
End Impl_scale_decode_visitor_Visitor_for_ink_primitives_types___Visitor. *) *)

(* Module Impl_scale_decode_DecodeAsFields_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter decode_as_fields :
      forall `{State.Trait},
      (mut_ref (ref (Slice u8))) ->
        (ref (Slice scale_decode.PortableField)) ->
        (ref scale_info.portable.PortableRegistry) ->
        M (core.result.Result Self scale_decode.error.Error).
  
  Global Instance AssociatedFunction_decode_as_fields `{State.Trait} :
    Notation.DoubleColon Self "decode_as_fields" := {
    Notation.double_colon := decode_as_fields;
  }.
  
  Global Instance I `{State.Trait} : scale_decode.DecodeAsFields.Trait Self := {
    scale_decode.DecodeAsFields.decode_as_fields := decode_as_fields;
  }.
  Global Hint Resolve I : core.
End Impl_scale_decode_DecodeAsFields_for_ink_primitives_types_AccountId. *)

Module Impl_scale_encode_EncodeAsType_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter encode_as_type_to :
      forall `{State.Trait},
      (ref Self) ->
        u32 ->
        (ref scale_info.portable.PortableRegistry) ->
        (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
        M (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I `{State.Trait} : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to := encode_as_type_to;
  }.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_primitives_types_AccountId.

Module Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter encode_as_fields_to :
      forall `{State.Trait},
      (ref Self) ->
        (ref (Slice scale_encode.PortableField)) ->
        (ref scale_info.portable.PortableRegistry) ->
        (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
        M (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_fields_to `{State.Trait} :
    Notation.Dot "encode_as_fields_to" := {
    Notation.dot := encode_as_fields_to;
  }.
  
  Global Instance I `{State.Trait} : scale_encode.EncodeAsFields.Trait Self := {
    scale_encode.EncodeAsFields.encode_as_fields_to := encode_as_fields_to;
  }.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_AccountId.

Module Impl_core_fmt_Debug_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_primitives_types_AccountId.

Module Impl_core_marker_Copy_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_primitives_types_AccountId.

Module Impl_core_clone_Clone_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter clone :
      forall `{State.Trait},
      (ref Self) -> M ink_primitives.types.AccountId.
  
  Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_primitives_types_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Global Instance I `{State.Trait}
    : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_AccountId.

Module Impl_core_cmp_PartialEq_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter eq :
      forall `{State.Trait},
      (ref Self) -> (ref ink_primitives.types.AccountId) -> M bool.
  
  Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I `{State.Trait}
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_primitives_types_AccountId.

Module Impl_core_marker_StructuralEq_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Global Instance I `{State.Trait} : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_primitives_types_AccountId.

Module Impl_core_cmp_Eq_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter assert_receiver_is_total_eq :
      forall `{State.Trait},
      (ref Self) -> M unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I `{State.Trait} : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_primitives_types_AccountId.

Module Impl_core_cmp_Ord_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter cmp :
      forall `{State.Trait},
      (ref Self) -> (ref ink_primitives.types.AccountId) -> M core.cmp.Ordering.
  
  Global Instance Method_cmp `{State.Trait} : Notation.Dot "cmp" := {
    Notation.dot := cmp;
  }.
  
  Global Instance I `{State.Trait} : core.cmp.Ord.Trait Self := {
    core.cmp.Ord.cmp := cmp;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Ord_for_ink_primitives_types_AccountId.

Module Impl_core_cmp_PartialOrd_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter partial_cmp :
      forall `{State.Trait},
      (ref Self) ->
        (ref ink_primitives.types.AccountId) ->
        M (core.option.Option core.cmp.Ordering).
  
  Global Instance Method_partial_cmp `{State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I `{State.Trait}
    : core.cmp.PartialOrd.Trait Self
        (Rhs := core.cmp.PartialOrd.Default.Rhs Self)
      := {
    core.cmp.PartialOrd.partial_cmp := partial_cmp;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialOrd_for_ink_primitives_types_AccountId.

Module Impl_core_hash_Hash_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter hash :
      forall `{State.Trait} {__H : Set} `{core.hash.Hasher.Trait __H},
      (ref Self) -> (mut_ref __H) -> M unit.
  
  Global Instance Method_hash
      `{State.Trait}
      {__H : Set}
      `{core.hash.Hasher.Trait __H} :
    Notation.Dot "hash" := {
    Notation.dot := hash (__H := __H);
  }.
  
  Global Instance I `{State.Trait} : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash {__H : Set} `{core.hash.Hasher.Trait __H}
      :=
      hash (__H := __H);
  }.
  Global Hint Resolve I : core.
End Impl_core_hash_Hash_for_ink_primitives_types_AccountId.

(* Module Impl_parity_scale_codec_codec_Decode_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter decode :
      forall
        `{State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
      (mut_ref __CodecInputEdqy) ->
        M (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode
      `{State.Trait}
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_primitives_types_AccountId. *)

(* Module Impl_parity_scale_codec_codec_Encode_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter encode_to :
      forall
        `{State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy},
      (ref Self) -> (mut_ref __CodecOutputEdqy) -> M unit.
  
  Global Instance Method_encode_to
      `{State.Trait}
      {__CodecOutputEdqy : Set}
      `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      `{core.marker.Sized.Trait __CodecOutputEdqy} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Parameter encode :
      forall `{State.Trait},
      (ref Self) ->
        M (alloc.vec.Vec CoqOfRust.core.primitive.u8 alloc.vec.Vec.Default.A).
  
  Global Instance Method_encode `{State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Parameter using_encoded :
      forall
        `{State.Trait}
        {R F : Set}
        `{core.ops.function.FnOnce.Trait F
            (Args := ref (Slice CoqOfRust.core.primitive.u8))},
      (ref Self) -> F -> M R.
  
  Global Instance Method_using_encoded
      `{State.Trait}
      {R F : Set}
      `{core.ops.function.FnOnce.Trait F
          (Args := ref (Slice CoqOfRust.core.primitive.u8))} :
    Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded (R := R) (F := F);
  }.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_primitives_types_AccountId. *)

(* Module Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
      := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_types_AccountId. *)

Module Impl_core_convert_From_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter from :
      forall `{State.Trait},
      (array u8) -> M ink_primitives.types.AccountId.
  
  Global Instance AssociatedFunction_from `{State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.From.Trait Self (T := array u8) := {
    core.convert.From.from := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_ink_primitives_types_AccountId.

(* Module Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter as_ref : forall `{State.Trait}, (ref Self) -> M (ref (array u8)).
  
  Global Instance Method_as_ref `{State.Trait} : Notation.Dot "as_ref" := {
    Notation.dot := as_ref;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.AsRef.Trait Self (T := array u8) := {
    core.convert.AsRef.as_ref := as_ref;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_AsRef_for_ink_primitives_types_AccountId. *)

(* Module Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter as_mut :
      forall `{State.Trait},
      (mut_ref Self) -> M (mut_ref (array u8)).
  
  Global Instance Method_as_mut `{State.Trait} : Notation.Dot "as_mut" := {
    Notation.dot := as_mut;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.AsMut.Trait Self (T := array u8) := {
    core.convert.AsMut.as_mut := as_mut;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_AsMut_for_ink_primitives_types_AccountId. *)

(* Module Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter as_ref : forall `{State.Trait}, (ref Self) -> M (ref (Slice u8)).
  
  Global Instance Method_as_ref `{State.Trait} : Notation.Dot "as_ref" := {
    Notation.dot := as_ref;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.AsRef.Trait Self (T := Slice u8) := {
    core.convert.AsRef.as_ref := as_ref;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_AsRef_for_ink_primitives_types_AccountId. *)

(* Module Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Parameter as_mut :
      forall `{State.Trait},
      (mut_ref Self) -> M (mut_ref (Slice u8)).
  
  Global Instance Method_as_mut `{State.Trait} : Notation.Dot "as_mut" := {
    Notation.dot := as_mut;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.AsMut.Trait Self (T := Slice u8) := {
    core.convert.AsMut.as_mut := as_mut;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_AsMut_for_ink_primitives_types_AccountId. *)

Module Impl_core_convert_TryFrom_for_ink_primitives_types_AccountId.
  Definition Self `{State.Trait} := ink_primitives.types.AccountId.
  
  Definition Error : Set := core.array.TryFromSliceError.
  
  Parameter try_from :
      forall `{State.Trait},
      (ref (Slice u8)) ->
        M (core.result.Result Self core.array.TryFromSliceError).
  
  Global Instance AssociatedFunction_try_from `{State.Trait} :
    Notation.DoubleColon Self "try_from" := {
    Notation.double_colon := try_from;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.TryFrom.Trait Self (T := ref (Slice u8)) := {
    core.convert.TryFrom.Error := Error;
    core.convert.TryFrom.try_from := try_from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_TryFrom_for_ink_primitives_types_AccountId.

Module Hash.
  Unset Primitive Projections.
  Record t `{State.Trait} : Set := {
    x0 : array u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 `{State.Trait} : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
  }.
End Hash.
Definition Hash `{State.Trait} : Set := M.val Hash.t.

Module Impl_scale_info_TypeInfo_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Definition Identity : Set := Self.
  
  Parameter type_info :
      forall `{State.Trait},
      M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T).
  
  Global Instance AssociatedFunction_type_info `{State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I `{State.Trait} : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info := type_info;
  }.
  Global Hint Resolve I : core.
End Impl_scale_info_TypeInfo_for_ink_primitives_types_Hash.

(* Module Impl_scale_decode_IntoVisitor_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Definition Visitor : Set := ink_primitives.types._.Visitor.
  
  Parameter into_visitor : forall `{State.Trait}, M Visitor.
  
  Global Instance AssociatedFunction_into_visitor `{State.Trait} :
    Notation.DoubleColon Self "into_visitor" := {
    Notation.double_colon := into_visitor;
  }.
  
  Global Instance I `{State.Trait} : scale_decode.IntoVisitor.Trait Self := {
    scale_decode.IntoVisitor.Visitor := Visitor;
    scale_decode.IntoVisitor.into_visitor := into_visitor;
  }.
  Global Hint Resolve I : core.
End Impl_scale_decode_IntoVisitor_for_ink_primitives_types_Hash. *)

(* (* Module Impl_scale_decode_visitor_Visitor_for_ink_primitives_types___Visitor.
  Definition Self `{State.Trait} := ink_primitives.types._.Visitor.
  
  Definition Error : Set := scale_decode.error.Error.
  
  Definition Value : Set := ink_primitives.types.Hash.
  
  Parameter visit_composite :
      forall `{State.Trait},
      Self ->
        (mut_ref scale_decode.visitor.types.composite.Composite) ->
        scale_decode.visitor.TypeId ->
        M (core.result.Result Value Error).
  
  Global Instance Method_visit_composite `{State.Trait} :
    Notation.Dot "visit_composite" := {
    Notation.dot := visit_composite;
  }.
  
  Parameter visit_tuple :
      forall `{State.Trait},
      Self ->
        (mut_ref scale_decode.visitor.types.tuple.Tuple) ->
        scale_decode.visitor.TypeId ->
        M (core.result.Result Value Error).
  
  Global Instance Method_visit_tuple `{State.Trait} :
    Notation.Dot "visit_tuple" := {
    Notation.dot := visit_tuple;
  }.
  
  Global Instance I `{State.Trait}
    : scale_decode.visitor.Visitor.Trait Self := {
    scale_decode.visitor.Visitor.Error := Error;
    scale_decode.visitor.Visitor.Value := Value;
  }.
  Global Hint Resolve I : core.
End Impl_scale_decode_visitor_Visitor_for_ink_primitives_types___Visitor. *) *)

(* Module Impl_scale_decode_DecodeAsFields_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter decode_as_fields :
      forall `{State.Trait},
      (mut_ref (ref (Slice u8))) ->
        (ref (Slice scale_decode.PortableField)) ->
        (ref scale_info.portable.PortableRegistry) ->
        M (core.result.Result Self scale_decode.error.Error).
  
  Global Instance AssociatedFunction_decode_as_fields `{State.Trait} :
    Notation.DoubleColon Self "decode_as_fields" := {
    Notation.double_colon := decode_as_fields;
  }.
  
  Global Instance I `{State.Trait} : scale_decode.DecodeAsFields.Trait Self := {
    scale_decode.DecodeAsFields.decode_as_fields := decode_as_fields;
  }.
  Global Hint Resolve I : core.
End Impl_scale_decode_DecodeAsFields_for_ink_primitives_types_Hash. *)

Module Impl_scale_encode_EncodeAsType_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter encode_as_type_to :
      forall `{State.Trait},
      (ref Self) ->
        u32 ->
        (ref scale_info.portable.PortableRegistry) ->
        (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
        M (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I `{State.Trait} : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to := encode_as_type_to;
  }.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsType_for_ink_primitives_types_Hash.

Module Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter encode_as_fields_to :
      forall `{State.Trait},
      (ref Self) ->
        (ref (Slice scale_encode.PortableField)) ->
        (ref scale_info.portable.PortableRegistry) ->
        (mut_ref (alloc.vec.Vec u8 alloc.vec.Vec.Default.A)) ->
        M (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_fields_to `{State.Trait} :
    Notation.Dot "encode_as_fields_to" := {
    Notation.dot := encode_as_fields_to;
  }.
  
  Global Instance I `{State.Trait} : scale_encode.EncodeAsFields.Trait Self := {
    scale_encode.EncodeAsFields.encode_as_fields_to := encode_as_fields_to;
  }.
  Global Hint Resolve I : core.
End Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_Hash.

Module Impl_core_fmt_Debug_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_primitives_types_Hash.

Module Impl_core_marker_Copy_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_primitives_types_Hash.

Module Impl_core_clone_Clone_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter clone :
      forall `{State.Trait},
      (ref Self) -> M ink_primitives.types.Hash.
  
  Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_primitives_types_Hash.

Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Global Instance I `{State.Trait}
    : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_Hash.

Module Impl_core_cmp_PartialEq_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter eq :
      forall `{State.Trait},
      (ref Self) -> (ref ink_primitives.types.Hash) -> M bool.
  
  Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I `{State.Trait}
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_primitives_types_Hash.

Module Impl_core_marker_StructuralEq_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Global Instance I `{State.Trait} : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_primitives_types_Hash.

Module Impl_core_cmp_Eq_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter assert_receiver_is_total_eq :
      forall `{State.Trait},
      (ref Self) -> M unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I `{State.Trait} : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_primitives_types_Hash.

Module Impl_core_cmp_Ord_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter cmp :
      forall `{State.Trait},
      (ref Self) -> (ref ink_primitives.types.Hash) -> M core.cmp.Ordering.
  
  Global Instance Method_cmp `{State.Trait} : Notation.Dot "cmp" := {
    Notation.dot := cmp;
  }.
  
  Global Instance I `{State.Trait} : core.cmp.Ord.Trait Self := {
    core.cmp.Ord.cmp := cmp;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Ord_for_ink_primitives_types_Hash.

Module Impl_core_cmp_PartialOrd_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter partial_cmp :
      forall `{State.Trait},
      (ref Self) ->
        (ref ink_primitives.types.Hash) ->
        M (core.option.Option core.cmp.Ordering).
  
  Global Instance Method_partial_cmp `{State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I `{State.Trait}
    : core.cmp.PartialOrd.Trait Self
        (Rhs := core.cmp.PartialOrd.Default.Rhs Self)
      := {
    core.cmp.PartialOrd.partial_cmp := partial_cmp;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialOrd_for_ink_primitives_types_Hash.

Module Impl_core_hash_Hash_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter hash :
      forall `{State.Trait} {__H : Set} `{core.hash.Hasher.Trait __H},
      (ref Self) -> (mut_ref __H) -> M unit.
  
  Global Instance Method_hash
      `{State.Trait}
      {__H : Set}
      `{core.hash.Hasher.Trait __H} :
    Notation.Dot "hash" := {
    Notation.dot := hash (__H := __H);
  }.
  
  Global Instance I `{State.Trait} : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash {__H : Set} `{core.hash.Hasher.Trait __H}
      :=
      hash (__H := __H);
  }.
  Global Hint Resolve I : core.
End Impl_core_hash_Hash_for_ink_primitives_types_Hash.

(* Module Impl_parity_scale_codec_codec_Decode_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter decode :
      forall
        `{State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
      (mut_ref __CodecInputEdqy) ->
        M (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode
      `{State.Trait}
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_primitives_types_Hash. *)

(* Module Impl_parity_scale_codec_codec_Encode_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter encode_to :
      forall
        `{State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy},
      (ref Self) -> (mut_ref __CodecOutputEdqy) -> M unit.
  
  Global Instance Method_encode_to
      `{State.Trait}
      {__CodecOutputEdqy : Set}
      `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      `{core.marker.Sized.Trait __CodecOutputEdqy} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Parameter encode :
      forall `{State.Trait},
      (ref Self) ->
        M (alloc.vec.Vec CoqOfRust.core.primitive.u8 alloc.vec.Vec.Default.A).
  
  Global Instance Method_encode `{State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Parameter using_encoded :
      forall
        `{State.Trait}
        {R F : Set}
        `{core.ops.function.FnOnce.Trait F
            (Args := ref (Slice CoqOfRust.core.primitive.u8))},
      (ref Self) -> F -> M R.
  
  Global Instance Method_using_encoded
      `{State.Trait}
      {R F : Set}
      `{core.ops.function.FnOnce.Trait F
          (Args := ref (Slice CoqOfRust.core.primitive.u8))} :
    Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded (R := R) (F := F);
  }.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_primitives_types_Hash. *)

(* Module Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
      := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_types_Hash. *)

Module Impl_core_convert_From_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter from :
      forall `{State.Trait},
      (array u8) -> M ink_primitives.types.Hash.
  
  Global Instance AssociatedFunction_from `{State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.From.Trait Self (T := array u8) := {
    core.convert.From.from := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_ink_primitives_types_Hash.

Module Impl_core_default_Default_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter default : forall `{State.Trait}, M ink_primitives.types.Hash.
  
  Global Instance AssociatedFunction_default `{State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I `{State.Trait} : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
  Global Hint Resolve I : core.
End Impl_core_default_Default_for_ink_primitives_types_Hash.

Module Impl_core_convert_TryFrom_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Definition Error : Set := core.array.TryFromSliceError.
  
  Parameter try_from :
      forall `{State.Trait},
      (ref (Slice u8)) ->
        M (core.result.Result Self core.array.TryFromSliceError).
  
  Global Instance AssociatedFunction_try_from `{State.Trait} :
    Notation.DoubleColon Self "try_from" := {
    Notation.double_colon := try_from;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.TryFrom.Trait Self (T := ref (Slice u8)) := {
    core.convert.TryFrom.Error := Error;
    core.convert.TryFrom.try_from := try_from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_TryFrom_for_ink_primitives_types_Hash.

Module Impl_core_convert_AsRef_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter as_ref : forall `{State.Trait}, (ref Self) -> M (ref (Slice u8)).
  
  Global Instance Method_as_ref `{State.Trait} : Notation.Dot "as_ref" := {
    Notation.dot := as_ref;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.AsRef.Trait Self (T := Slice u8) := {
    core.convert.AsRef.as_ref := as_ref;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_AsRef_for_ink_primitives_types_Hash.

Module Impl_core_convert_AsMut_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Parameter as_mut :
      forall `{State.Trait},
      (mut_ref Self) -> M (mut_ref (Slice u8)).
  
  Global Instance Method_as_mut `{State.Trait} : Notation.Dot "as_mut" := {
    Notation.dot := as_mut;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.AsMut.Trait Self (T := Slice u8) := {
    core.convert.AsMut.as_mut := as_mut;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_AsMut_for_ink_primitives_types_Hash.

Module Impl_core_convert_From_for_Array_u8.
  Definition Self `{State.Trait} := array u8.
  
  Parameter from : forall `{State.Trait}, ink_primitives.types.Hash -> M Self.
  
  Global Instance AssociatedFunction_from `{State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I `{State.Trait}
    : core.convert.From.Trait Self (T := ink_primitives.types.Hash) := {
    core.convert.From.from := from;
  }.
  Global Hint Resolve I : core.
End Impl_core_convert_From_for_Array_u8.

Module Clear.
  Class Trait (Self : Set) : Type := {
    CLEAR_HASH `{State.Trait} : Self;
    is_clear `{State.Trait} : (ref Self) -> M bool;
  }.
  
  Global Instance Method_CLEAR_HASH `{State.Trait} `(Trait)
    : Notation.Dot "CLEAR_HASH" := {
    Notation.dot := CLEAR_HASH;
  }.
  Global Instance Method_is_clear `{State.Trait} `(Trait)
    : Notation.Dot "is_clear" := {
    Notation.dot := is_clear;
  }.
End Clear.

(* Module Impl_ink_primitives_types_Clear_for_Array_u8.
  Definition Self `{State.Trait} := array u8.
  
  Definition
    CLEAR_HASH
    `{State.Trait} := let* α0 := M.alloc 0 in
    repeat α0.
  
  Global Instance AssociatedFunction_CLEAR_HASH `{State.Trait} :
    Notation.DoubleColon Self "CLEAR_HASH" := {
    Notation.double_colon := CLEAR_HASH;
  }.
  
  Parameter is_clear : forall `{State.Trait}, (ref Self) -> M bool.
  
  Global Instance Method_is_clear `{State.Trait} : Notation.Dot "is_clear" := {
    Notation.dot := is_clear;
  }.
  
  Global Instance I `{State.Trait} : ink_primitives.types.Clear.Trait Self := {
    ink_primitives.types.Clear.CLEAR_HASH := CLEAR_HASH;
    ink_primitives.types.Clear.is_clear := is_clear;
  }.
  Global Hint Resolve I : core.
End Impl_ink_primitives_types_Clear_for_Array_u8. *)

(* Module Impl_ink_primitives_types_Clear_for_ink_primitives_types_Hash.
  Definition Self `{State.Trait} := ink_primitives.types.Hash.
  
  Definition
    CLEAR_HASH
    `{State.Trait} := Self
      (ink_primitives.types.Clear.CLEAR_HASH (Self := (list u8))).
  
  Global Instance AssociatedFunction_CLEAR_HASH `{State.Trait} :
    Notation.DoubleColon Self "CLEAR_HASH" := {
    Notation.double_colon := CLEAR_HASH;
  }.
  
  Parameter is_clear : forall `{State.Trait}, (ref Self) -> M bool.
  
  Global Instance Method_is_clear `{State.Trait} : Notation.Dot "is_clear" := {
    Notation.dot := is_clear;
  }.
  
  Global Instance I `{State.Trait} : ink_primitives.types.Clear.Trait Self := {
    ink_primitives.types.Clear.CLEAR_HASH := CLEAR_HASH;
    ink_primitives.types.Clear.is_clear := is_clear;
  }.
  Global Hint Resolve I : core.
End Impl_ink_primitives_types_Clear_for_ink_primitives_types_Hash. *)

Module LangError.
  Inductive t `{State.Trait} : Set :=
  | CouldNotReadInput.
End LangError.
Definition LangError `{State.Trait} : Set := LangError.t.

Module Impl_scale_info_TypeInfo_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Definition Identity : Set := Self.
  
  Parameter type_info :
      forall `{State.Trait},
      M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T).
  
  Global Instance AssociatedFunction_type_info `{State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I `{State.Trait} : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info := type_info;
  }.
  Global Hint Resolve I : core.
End Impl_scale_info_TypeInfo_for_ink_primitives_LangError.

Module Impl_core_fmt_Debug_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Parameter fmt :
      forall `{State.Trait},
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M core.fmt.Result.
  
  Global Instance Method_fmt `{State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I `{State.Trait} : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
  Global Hint Resolve I : core.
End Impl_core_fmt_Debug_for_ink_primitives_LangError.

Module Impl_core_clone_Clone_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Parameter clone :
      forall `{State.Trait},
      (ref Self) -> M ink_primitives.LangError.
  
  Global Instance Method_clone `{State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I `{State.Trait} : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
  Global Hint Resolve I : core.
End Impl_core_clone_Clone_for_ink_primitives_LangError.

Module Impl_core_marker_Copy_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Global Instance I `{State.Trait} : core.marker.Copy.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_Copy_for_ink_primitives_LangError.

Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Global Instance I `{State.Trait}
    : core.marker.StructuralPartialEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralPartialEq_for_ink_primitives_LangError.

Module Impl_core_cmp_PartialEq_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Parameter eq :
      forall `{State.Trait},
      (ref Self) -> (ref ink_primitives.LangError) -> M bool.
  
  Global Instance Method_eq `{State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I `{State.Trait}
    : core.cmp.PartialEq.Trait Self (Rhs := core.cmp.PartialEq.Default.Rhs Self)
      := {
    core.cmp.PartialEq.eq := eq;
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_PartialEq_for_ink_primitives_LangError.

Module Impl_core_marker_StructuralEq_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Global Instance I `{State.Trait} : core.marker.StructuralEq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_marker_StructuralEq_for_ink_primitives_LangError.

Module Impl_core_cmp_Eq_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Parameter assert_receiver_is_total_eq :
      forall `{State.Trait},
      (ref Self) -> M unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I `{State.Trait} : core.cmp.Eq.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_core_cmp_Eq_for_ink_primitives_LangError.

(* Module Impl_parity_scale_codec_codec_Encode_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Parameter encode_to :
      forall
        `{State.Trait}
        {__CodecOutputEdqy : Set}
        `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        `{core.marker.Sized.Trait __CodecOutputEdqy},
      (ref Self) -> (mut_ref __CodecOutputEdqy) -> M unit.
  
  Global Instance Method_encode_to
      `{State.Trait}
      {__CodecOutputEdqy : Set}
      `{parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      `{core.marker.Sized.Trait __CodecOutputEdqy} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.codec.Encode.Trait Self := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Encode_for_ink_primitives_LangError. *)

(* Module Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self)
      := {
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_LangError. *)

(* Module Impl_parity_scale_codec_codec_Decode_for_ink_primitives_LangError.
  Definition Self `{State.Trait} := ink_primitives.LangError.
  
  Parameter decode :
      forall
        `{State.Trait}
        {__CodecInputEdqy : Set}
        `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy},
      (mut_ref __CodecInputEdqy) ->
        M (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode
      `{State.Trait}
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance I `{State.Trait}
    : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      `{parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  Global Hint Resolve I : core.
End Impl_parity_scale_codec_codec_Decode_for_ink_primitives_LangError. *)

Definition MessageResult (T : Set) `{State.Trait} : Set :=
  core.result.Result T ink_primitives.LangError.

Definition ConstructorResult (T : Set) `{State.Trait} : Set :=
  core.result.Result T ink_primitives.LangError.
